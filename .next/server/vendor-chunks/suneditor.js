"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/suneditor";
exports.ids = ["vendor-chunks/suneditor"];
exports.modules = {

/***/ "(ssr)/./node_modules/suneditor/src/assets/defaultIcons.js":
/*!***********************************************************!*\
  !*** ./node_modules/suneditor/src/assets/defaultIcons.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2020 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    // rtl icon\n    rtl: {\n        italic: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10.5 15.8\" xml:space=\"preserve\"><g><path d=\"M0.3,0.1c0.3,0,0.5,0,0.7,0c1,0.1,1.7,0.1,2.2,0.1H4L7.2,0l0.2,1.1H7c-0.5,0-1,0.1-1.5,0.3v0.4l0.3,1.9L6,4.4L6.3,6 l0.1,0.4l0.1,0.5c0.1,0.2,0.1,0.4,0.2,0.7s0.1,0.6,0.2,0.9L7,9.1l0.6,2.8l0.3,1.4c0.1,0.4,0.2,0.7,0.4,1c0.4,0.2,0.8,0.3,1.2,0.4 l0.8,0.2l0.2,0.9l-1.1,0c-0.9-0.1-1.5-0.1-1.8-0.1h-2c-0.9,0.1-1.4,0.2-1.5,0.2c-0.1,0-0.2,0-0.3,0H3.4c-0.1,0-0.2,0-0.2,0 l-0.1-0.4c0-0.2-0.1-0.4-0.1-0.6l0.7-0.1c0.4,0,0.8-0.1,1.2-0.2c0-0.1,0-0.2,0-0.3l-0.1-0.5l-0.4-2.4L4,9.6L3.4,6.4 C3.2,5.7,3,4.7,2.7,3.3c0-0.3-0.1-0.5-0.1-0.8C2.5,2.1,2.4,1.9,2.3,1.6C2,1.4,1.6,1.3,1.3,1.2C0.9,1.2,0.5,1.1,0.2,0.9L0,0.4L0,0 L0.3,0.1L0.3,0.1z\"/></g></svg>',\n        indent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 12.4\" xml:space=\"preserve\"><g><g><path d=\"M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z\"/></g><path d=\"M13.1,3.5L15.7,6c0.1,0.1,0.1,0.3,0,0.4l-2.5,2.5C13.1,9,13,9,12.9,9c-0.1,0-0.1,0-0.2-0.1c-0.1-0.1-0.1-0.1-0.1-0.2V3.7 c0-0.1,0-0.2,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C13,3.4,13.1,3.4,13.1,3.5z\"/></g></svg>',\n        outdent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 12.4\" xml:space=\"preserve\"><g><g><path d=\"M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z\"/></g><path d=\"M15.5,3.4c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2v5.1c0,0.1,0,0.1-0.1,0.2C15.6,9,15.5,9,15.5,9 c-0.1,0-0.1,0-0.2-0.1l-2.5-2.5c-0.1-0.1-0.1-0.3,0-0.4l2.5-2.5C15.3,3.4,15.4,3.4,15.5,3.4z\"/></g></svg>',\n        list_bullets: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 12.4\" xml:space=\"preserve\"><g><path d=\"M12.4,10.7c0,0.9,0.8,1.7,1.7,1.7c0.9,0,1.7-0.8,1.7-1.7C15.7,9.8,15,9,14.1,9c-0.4,0-0.9,0.2-1.2,0.5 C12.5,9.8,12.4,10.2,12.4,10.7C12.4,10.7,12.4,10.7,12.4,10.7z M12.4,6.2c0,0.9,0.8,1.7,1.7,1.7c0.4,0,0.9-0.2,1.2-0.5 c0.3-0.3,0.4-0.7,0.4-1.1c0-0.9-0.7-1.7-1.6-1.7C13.1,4.6,12.4,5.3,12.4,6.2C12.4,6.2,12.4,6.2,12.4,6.2z M0,9.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1l10.7,0c0,0,0,0,0,0c0.1,0,0.3-0.1,0.3-0.3V9.8c0-0.1,0-0.1-0.1-0.2 C11.1,9.6,11,9.6,11,9.6l-10.7,0c-0.1,0-0.1,0-0.2,0.1C0,9.7,0,9.8,0,9.8L0,9.8z M12.9,2.9c0.3,0.3,0.7,0.5,1.2,0.5 c0.4,0,0.9-0.2,1.2-0.5c0.7-0.7,0.7-1.7,0-2.4C14.9,0.2,14.5,0,14.1,0c-0.4,0-0.9,0.2-1.2,0.5c-0.3,0.3-0.5,0.7-0.5,1.2 C12.4,2.1,12.5,2.6,12.9,2.9z M0,5.3V7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.1,0,0.2-0.1 c0.1-0.1,0.1-0.1,0.1-0.2V5.3c0,0,0,0,0,0c0-0.1-0.1-0.3-0.3-0.3H0.3c-0.1,0-0.1,0-0.2,0.1C0,5.2,0,5.3,0,5.3L0,5.3z M0,0.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1h10.7c0.1,0,0.1,0,0.2-0.1c0,0,0.1-0.1,0.1-0.2V0.8c0-0.1,0-0.1-0.1-0.2 c0-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.1,0-0.2,0.1C0,0.7,0,0.8,0,0.8L0,0.8z\"/></g></svg>',\n        list_number: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.7\" xml:space=\"preserve\"><g><path d=\"M0,11.5l0,1.7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2v-1.7 c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.2,0-0.2,0.1C0,11.4,0,11.4,0,11.5L0,11.5z M0,8.7c0,0.1,0,0.1,0.1,0.2 C0.1,8.9,0.2,9,0.3,9H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V7c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1l-10.7,0 c-0.1,0-0.2,0-0.2,0.1C0,6.8,0,6.9,0,7C0,7,0,8.7,0,8.7z M0,2.5v1.7c0,0.1,0,0.1,0.1,0.2c0,0,0.1,0.1,0.2,0.1l10.7,0 c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V2.4c0-0.1,0-0.1-0.1-0.2c-0.1,0-0.1,0-0.2,0H0.3c-0.1,0-0.1,0-0.2,0 C0,2.3,0,2.4,0,2.5L0,2.5z\"/></g><path d=\"M15.6,14.2c0-0.3-0.1-0.6-0.3-0.8c-0.2-0.2-0.4-0.4-0.7-0.4l0.9-1v-0.8h-2.9v1.3h0.9v-0.5h0.9l0,0c-0.1,0.1-0.2,0.2-0.3,0.3 s-0.2,0.3-0.4,0.5l-0.3,0.3l0.2,0.5c0.6,0,0.9,0.1,0.9,0.5c0,0.1-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.4,0.1c-0.3,0-0.7-0.1-0.9-0.3 l-0.5,0.8c0.4,0.4,0.9,0.6,1.5,0.6c0.4,0,0.9-0.1,1.2-0.4C15.5,15.1,15.6,14.7,15.6,14.2z\"/><path d=\"M15.6,8.7h-0.9v0.5h-1.1c0-0.2,0.2-0.4,0.4-0.5c0.2-0.2,0.4-0.3,0.7-0.4c0.3-0.2,0.5-0.3,0.7-0.6c0.2-0.2,0.3-0.5,0.3-0.8 c0-0.4-0.2-0.8-0.5-1c-0.6-0.4-1.4-0.5-2-0.1c-0.3,0.2-0.5,0.4-0.6,0.7L13.3,7c0.1-0.3,0.4-0.5,0.7-0.5c0.1,0,0.3,0,0.3,0.1 c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.2,0.1-0.3,0.3-0.5,0.4c-0.2,0.1-0.4,0.3-0.6,0.4c-0.2,0.2-0.4,0.4-0.5,0.6 c-0.1,0.2-0.2,0.5-0.2,0.8c0,0.2,0,0.3,0,0.5h3.2L15.6,8.7L15.6,8.7z\"/><path d=\"M15.6,3.6h-1V0h-0.9l-1.2,1.1l0.6,0.7c0.2-0.1,0.3-0.3,0.4-0.5l0,0v2.2h-0.9v0.9h3L15.6,3.6L15.6,3.6z\"/></svg>',\n        link: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.7\" xml:space=\"preserve\"><g><path d=\"M7.4,9.9l3.1,3.1c0.3,0.3,0.8,0.5,1.3,0.5c0.5,0,0.9-0.2,1.3-0.5c0,0,0,0,0,0c0.7-0.7,0.7-1.9,0-2.6L9.9,7.3 c0-0.1,0-0.2,0-0.3C9.9,7,10,7,10.1,7l2.2-0.2c0.1,0,0.1,0,0.2,0.1l2.1,2.1c0.4,0.4,0.7,0.8,0.9,1.3c0.2,0.5,0.3,1,0.3,1.5 c0,0.5-0.1,1-0.3,1.5c-0.8,2-3.2,3-5.2,2.2c-0.5-0.2-0.9-0.5-1.3-0.9l-2.1-2.1c-0.1,0-0.1-0.1-0.1-0.2L7,10.1C7,10,7,9.9,7.1,9.9 C7.2,9.8,7.3,9.9,7.4,9.9z M1.2,1.1C1.6,0.7,2,0.4,2.5,0.3c1-0.4,2.1-0.4,3.1,0C6,0.4,6.5,0.7,6.8,1.1L9,3.2C9,3.3,9.1,3.3,9,3.4 L8.8,5.6c0,0.1-0.1,0.2-0.2,0.2c-0.1,0.1-0.2,0.1-0.3,0L5.3,2.7C5,2.3,4.5,2.1,4,2.1c-0.5,0-0.9,0.2-1.3,0.5c0,0,0,0,0,0 C2,3.4,2,4.5,2.7,5.2l3.1,3.2c0.1,0.1,0.1,0.2,0,0.3c0,0.1-0.1,0.1-0.2,0.1L3.5,9C3.4,9,3.4,9,3.3,8.9L1.2,6.8c0,0,0,0,0,0 C-0.4,5.2-0.4,2.7,1.2,1.1L1.2,1.1z M14.3,6h-2.6c0,0,0,0,0,0c-0.1,0-0.2-0.1-0.2-0.2c0-0.1,0-0.2,0.1-0.3l2.5-0.7 c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0.1,0.1,0.2l0.1,0.8c0,0.1,0,0.1-0.1,0.2C14.5,6,14.4,6,14.3,6L14.3,6z M10.2,4.1 c0,0.1-0.1,0.2-0.2,0.2l0,0c0,0,0,0,0,0C9.8,4.2,9.7,4.1,9.8,4L9.7,1.4c0-0.1,0-0.1,0.1-0.2c0.1,0,0.1,0,0.2,0h0.8 c0.1,0,0.1,0,0.2,0.1c0,0.1,0,0.1,0,0.2L10.2,4.1L10.2,4.1z M1.5,9.7h1.3h1.3c0.1,0,0.2,0.1,0.2,0.2c0,0.1,0,0.2-0.1,0.3l-2.5,0.6 H1.6c0,0-0.1,0-0.1,0c-0.1,0-0.1-0.1-0.1-0.2L1.2,9.9c0-0.1,0-0.1,0.1-0.2c0-0.1,0.1-0.1,0.2-0.1L1.5,9.7z M5.6,11.6 C5.6,11.6,5.6,11.6,5.6,11.6c0-0.1,0.1-0.2,0.3-0.1c0,0,0,0,0,0c0.1,0,0.2,0.1,0.2,0.2v2.6c0,0.1,0,0.1-0.1,0.2 c0,0-0.1,0.1-0.2,0.1L5,14.5c-0.1,0-0.1,0-0.2-0.1c0-0.1,0-0.1,0-0.2L5.6,11.6L5.6,11.6z\"/></g></svg>',\n        unlink: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.7\" xml:space=\"preserve\"><g><path d=\"M14.6,14.6c1.6-1.6,1.6-4.1,0-5.7l0,0l-3.1-3.1l-1.2,1.6l2.9,2.9c0.4,0.4,0.6,0.9,0.6,1.5c0,1.1-0.9,2.1-2.1,2.1l0,0 c-0.6,0-1.1-0.2-1.5-0.6l-0.4-0.4l-1.7,1l0.8,0.8C10.4,16.2,13,16.2,14.6,14.6L14.6,14.6L14.6,14.6z M3.6,6C3,5.9,2.6,5.5,2.3,5 S1.9,4,2.1,3.4C2.3,2.9,2.6,2.5,3,2.2C3.5,2,4.1,1.9,4.6,2l3.3,1.4l0.5-2L5.1,0.1C4-0.1,2.9,0,2,0.5C1.1,1.1,0.4,1.9,0.2,3 C-0.1,4,0,5.1,0.6,6C1.1,6.9,1.9,7.6,3,7.8l5.4,2l0.5-2L6.2,6.9L3.6,6z\"/></g></svg>'\n    },\n    // common, ltr icon\n    redo: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.59 14.18\"><g><path d=\"M11.58,18.48a6.84,6.84,0,1,1,6.85-6.85s0,.26,0,.67a8,8,0,0,1-.22,1.44l.91-.55a.51.51,0,0,1,.36,0,.45.45,0,0,1,.29.22.47.47,0,0,1,.06.36.45.45,0,0,1-.22.29L17.42,15.3l-.12,0h-.25l-.12-.06-.09-.09-.06-.07,0-.06-.87-2.12a.43.43,0,0,1,0-.37.49.49,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26l.44,1.09a6.51,6.51,0,0,0,.24-1.36,4.58,4.58,0,0,0,0-.64,5.83,5.83,0,0,0-1.73-4.17,5.88,5.88,0,0,0-8.34,0,5.9,5.9,0,0,0,4.17,10.06.51.51,0,0,1,.33.15.48.48,0,0,1,0,.68.53.53,0,0,1-.33.12Z\" transform=\"translate(-4.48 -4.54)\"/></g></svg>',\n    undo: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.59 14.18\"><g><path d=\"M5,14a.43.43,0,0,1-.22-.29.46.46,0,0,1,.06-.36.43.43,0,0,1,.29-.22.56.56,0,0,1,.36,0l.91.55a8.27,8.27,0,0,1-.22-1.45,5.07,5.07,0,0,1,0-.67A6.85,6.85,0,1,1,13,18.47a.44.44,0,0,1-.33-.13.48.48,0,0,1,0-.68.51.51,0,0,1,.33-.15A5.89,5.89,0,0,0,17.15,7.45a5.88,5.88,0,0,0-8.33,0,5.84,5.84,0,0,0-1.73,4.17s0,.25,0,.65a6.49,6.49,0,0,0,.24,1.37l.44-1.09a.57.57,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26.43.43,0,0,1,0,.37L7.82,15l0,.09-.09.09-.1.07-.06,0H7.28l-.13,0-1.09-.63c-.65-.36-1-.57-1.1-.63Z\" transform=\"translate(-4.49 -4.53)\"/></g></svg>',\n    bold: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.76 15.75\"><g><path d=\"M6.4,3.76V19.5h6.76a5.55,5.55,0,0,0,2-.32,4.93,4.93,0,0,0,1.52-1,4.27,4.27,0,0,0,1.48-3.34,3.87,3.87,0,0,0-.69-2.37,5.74,5.74,0,0,0-.71-.83,3.44,3.44,0,0,0-1.1-.65,3.6,3.6,0,0,0,1.58-1.36,3.66,3.66,0,0,0,.53-1.93,3.7,3.7,0,0,0-1.21-2.87,4.65,4.65,0,0,0-3.25-1.1H6.4Zm2.46,6.65V5.57h3.52a4.91,4.91,0,0,1,1.36.15,2.3,2.3,0,0,1,.85.45,2.06,2.06,0,0,1,.74,1.71,2.3,2.3,0,0,1-.78,1.92,2.54,2.54,0,0,1-.86.46,4.7,4.7,0,0,1-1.32.15H8.86Zm0,7.27V12.15H12.7a4.56,4.56,0,0,1,1.38.17,3.43,3.43,0,0,1,.95.49,2.29,2.29,0,0,1,.92,2,2.73,2.73,0,0,1-.83,2.1,2.66,2.66,0,0,1-.83.58,3.25,3.25,0,0,1-1.26.2H8.86Z\" transform=\"translate(-6.4 -3.75)\"/></g></svg>',\n    underline: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 9.78 15.74\"><g><path d=\"M14.64,3.76h2.52v7.72a4.51,4.51,0,0,1-.59,2.31,3.76,3.76,0,0,1-1.71,1.53,6.12,6.12,0,0,1-2.64.53,5,5,0,0,1-3.57-1.18,4.17,4.17,0,0,1-1.27-3.24V3.76H9.9v7.3a3,3,0,0,0,.55,2,2.3,2.3,0,0,0,1.83.65,2.26,2.26,0,0,0,1.8-.65,3.09,3.09,0,0,0,.55-2V3.76Zm2.52,13.31V19.5H7.39V17.08h9.77Z\" transform=\"translate(-7.38 -3.76)\"/></g></svg>',\n    italic: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10.49 15.76\"><g><path d=\"M17.16,3.79l.37,0-.06.38-.14.52A10,10,0,0,1,16.21,5a9.37,9.37,0,0,0-1,.32,6.68,6.68,0,0,0-.25.89c-.06.31-.11.59-.14.85-.3,1.36-.52,2.41-.68,3.14l-.61,3.18L13.1,15l-.43,2.4-.12.46a.62.62,0,0,0,0,.28c.44.1.85.17,1.23.22l.68.11a4.51,4.51,0,0,1-.08.6l-.09.42a.92.92,0,0,0-.23,0l-.43,0a1.37,1.37,0,0,1-.29,0c-.13,0-.63-.08-1.49-.16l-2,0c-.28,0-.87,0-1.78.12L7,19.5l.17-.88.8-.2A6.61,6.61,0,0,0,9.19,18,2.62,2.62,0,0,0,9.61,17l.28-1.41.58-2.75.12-.66c.05-.3.11-.58.17-.86s.12-.51.17-.69l.12-.48.12-.43.31-1.6.15-.65.31-1.91V5.14a3.86,3.86,0,0,0-1.48-.29l-.38,0,.2-1.06,3.24.14.75,0c.45,0,1.18,0,2.18-.09.23,0,.46,0,.71,0Z\" transform=\"translate(-7.04 -3.76)\"/></g></svg>',\n    strike: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.9\"><g><path d=\"M12.94,13a4.27,4.27,0,0,1,1.32.58,1.46,1.46,0,0,1,.55,1.2,1.87,1.87,0,0,1-.88,1.64,4.17,4.17,0,0,1-2.35.59,4.44,4.44,0,0,1-2.74-.71,2.72,2.72,0,0,1-1-2.17H5.57a4.56,4.56,0,0,0,1.55,3.7,7,7,0,0,0,4.47,1.23,6,6,0,0,0,4.07-1.3,4.24,4.24,0,0,0,1.52-3.37,4,4,0,0,0-.26-1.4h-4ZM6.37,10.24A3.27,3.27,0,0,1,6,8.68a4,4,0,0,1,1.48-3.3,5.92,5.92,0,0,1,3.88-1.21,5.58,5.58,0,0,1,3.91,1.24,4.36,4.36,0,0,1,1.45,3.17H14.44a2.12,2.12,0,0,0-.91-1.81,4.45,4.45,0,0,0-2.44-.55,3.69,3.69,0,0,0-2,.51A1.64,1.64,0,0,0,8.3,8.22a1.3,1.3,0,0,0,.48,1.11,7,7,0,0,0,2.1.78l.28.06.28.08H6.37Zm13.09.68a.73.73,0,0,1,.49.21.66.66,0,0,1,.2.48.64.64,0,0,1-.2.48.71.71,0,0,1-.49.19H5.1a.67.67,0,0,1-.49-.19.66.66,0,0,1-.2-.48.64.64,0,0,1,.2-.48.73.73,0,0,1,.49-.21H19.46Z\" transform=\"translate(-4.41 -4.17)\"/></g></svg>',\n    subscript: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 14.61\"><g><path d=\"M15.38,4.33H12.74L11.19,7c-.28.46-.51.87-.69,1.21L10.07,9h0l-.44-.8c-.22-.4-.45-.81-.71-1.23L7.34,4.33H4.68L8.26,10,4.4,16.08H7.1l1.69-2.83c.38-.63.72-1.22,1-1.78l.25-.46h0l.49.92c.24.45.48.89.74,1.32L13,16.08h2.61L11.84,10l1.77-2.84,1.77-2.85Zm4.77,13.75H17v-.15c0-.4.05-.64.16-.72a4.42,4.42,0,0,1,1.16-.31,3.3,3.3,0,0,0,1.54-.56A1.84,1.84,0,0,0,20.15,15a1.78,1.78,0,0,0-.44-1.41A2.8,2.8,0,0,0,18,13.25a2.71,2.71,0,0,0-1.69.37,1.83,1.83,0,0,0-.44,1.43v.23H17v-.23q0-.63.18-.78a1.62,1.62,0,0,1,.88-.15,1.59,1.59,0,0,1,.88.15q.18.15.18.75t-.18.75a3.58,3.58,0,0,1-1.18.33,3.33,3.33,0,0,0-1.52.51,1.57,1.57,0,0,0-.32,1.18v1.15h4.27v-.86Z\" transform=\"translate(-4.4 -4.33)\"/></g></svg>',\n    superscript: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.42\"><g><path d=\"M12,13.14l3.61-5.81H12.94L11.33,10c-.28.46-.51.88-.69,1.25l-.45.83h0l-.45-.85c-.22-.41-.45-.82-.71-1.24L7.4,7.33H4.68l3.66,5.81L4.4,19.33H7.14l1.74-2.87q.58-1,1-1.83l.25-.48h0l.51.94.75,1.37,1.72,2.87h2.67l-1.92-3.09c-1.12-1.8-1.76-2.83-1.92-3.1Zm4.84-4.41h0l0,.15h3.27v.86H15.77V8.58a1.66,1.66,0,0,1,.33-1.22,3.51,3.51,0,0,1,1.56-.51,3.68,3.68,0,0,0,1.21-.34c.13-.1.19-.36.19-.77S19,5.07,18.87,5A1.63,1.63,0,0,0,18,4.8a1.58,1.58,0,0,0-.91.17c-.13.11-.19.38-.19.8V6H15.78V5.76a1.87,1.87,0,0,1,.45-1.47A2.84,2.84,0,0,1,18,3.91a2.8,2.8,0,0,1,1.72.38,1.84,1.84,0,0,1,.45,1.44,1.91,1.91,0,0,1-.34,1.35,3.24,3.24,0,0,1-1.58.57A3.69,3.69,0,0,0,17,8c-.12.1-.17.35-.17.76Z\" transform=\"translate(-4.4 -3.91)\"/></g></svg>',\n    erase: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.76\"><g><path d=\"M13.69,17.2h6.46v1.31H8.56L4.41,14.37,14,4.75l6.06,6.06L16.89,14l-3.2,3.19Zm-4.61,0h2.77L14.09,15,9.88,10.75,6.25,14.38l1.41,1.41c.84.82,1.31,1.29,1.42,1.41Z\" transform=\"translate(-4.41 -4.75)\"/></g></svg>',\n    indent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 12.36\"><g><path d=\"M4.68,14.45a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V9.1a.27.27,0,0,1,.08-.19.28.28,0,0,1,.2-.08.25.25,0,0,1,.19.07l2.54,2.54a.29.29,0,0,1,0,.4L4.88,14.36a.24.24,0,0,1-.2.09Zm15.19,1.12a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87Zm0-3.38a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm0-3.37a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm.2-3.29a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z\" transform=\"translate(-4.41 -5.44)\"/></g></svg>',\n    outdent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 12.36\"><g><path d=\"M19.87,15.57a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87ZM7.5,14.45a.25.25,0,0,1-.2-.09L4.76,11.84a.29.29,0,0,1,0-.4L7.3,8.9a.29.29,0,0,1,.4,0,.31.31,0,0,1,.07.2v5.06a.32.32,0,0,1-.08.21.26.26,0,0,1-.19.08ZM19.87,8.82a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm0,3.37a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm.2-6.66a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z\" transform=\"translate(-4.41 -5.44)\"/></g></svg>',\n    expansion: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M11.8,13.06l-5.1,5.1H9.51V19.5H4.41V14.4H5.75v2.81L8.3,14.66q2.25-2.23,2.55-2.55Zm8.35-9.3v5.1H18.81V6.05l-5.1,5.1-1-1,5.1-5.1H15.05V3.76Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    reduction: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M14.91,10h2.87v1.38H12.55V6.12h1.38V9l5.24-5.24.48.49.49.48ZM6.77,11.92H12v5.23H10.62V14.26L5.37,19.5l-1-1L9.63,13.3H6.77Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    code_view: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 11.8\"><g><path d=\"M8.09,7.94a.76.76,0,0,1,.53.22.72.72,0,0,1,.21.52.76.76,0,0,1-.22.54L6.18,11.63l2.43,2.44a.69.69,0,0,1,.2.51.66.66,0,0,1-.21.51.75.75,0,0,1-.51.22.63.63,0,0,1-.51-.21h0L4.63,12.15a.7.7,0,0,1-.22-.53.67.67,0,0,1,.25-.55L7.57,8.16a.82.82,0,0,1,.52-.22Zm12.05,3.69a.7.7,0,0,1-.23.52L17,15.1h0a.66.66,0,0,1-.51.21.73.73,0,0,1-.51-.22.75.75,0,0,1-.22-.51.63.63,0,0,1,.21-.51l2.43-2.44L15.92,9.22a.73.73,0,0,1-.22-.53A.74.74,0,0,1,17,8.18h0l2.91,2.91a.67.67,0,0,1,.27.54Zm-5.9-5.9a.73.73,0,0,1,.61.32.71.71,0,0,1,.07.68L11,17a1,1,0,0,1-.22.32.6.6,0,0,1-.35.16.75.75,0,0,1-.69-.26.69.69,0,0,1-.12-.72L13.56,6.23a.75.75,0,0,1,.26-.35.74.74,0,0,1,.42-.15Z\" transform=\"translate(-4.41 -5.73)\"/></g></svg>',\n    preview: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.65 15.66\"><g><path d=\"M16.19,14.43l2.49,2.49a.73.73,0,0,1,.21.52.67.67,0,0,1-.22.51.7.7,0,0,1-.52.22.69.69,0,0,1-.51-.21l-2.49-2.48a5.17,5.17,0,0,1-1.34.69,4.64,4.64,0,0,1-1.48.24,4.78,4.78,0,1,1,0-9.56,4.79,4.79,0,0,1,1.84.36,4.9,4.9,0,0,1,1.56,1,4.77,4.77,0,0,1,.46,6.18ZM10,14a3.3,3.3,0,0,0,2.34.93A3.37,3.37,0,0,0,14.7,14a3.3,3.3,0,0,0-1.08-5.41,3.47,3.47,0,0,0-2.56,0A3,3,0,0,0,10,9.28,3.31,3.31,0,0,0,10,14ZM16,4a3.86,3.86,0,0,1,2.77,1.14A3.9,3.9,0,0,1,20,7.85v4a.77.77,0,0,1-.22.53.7.7,0,0,1-.52.21.72.72,0,0,1-.74-.74v-4a2.46,2.46,0,0,0-.72-1.73A2.37,2.37,0,0,0,16,5.45H8.53A2.42,2.42,0,0,0,6.08,7.89v7.52a2.41,2.41,0,0,0,.71,1.73,2.46,2.46,0,0,0,1.74.72h4.08a.73.73,0,0,1,0,1.46H8.53a3.85,3.85,0,0,1-2.78-1.14A3.93,3.93,0,0,1,4.6,15.4V7.87A3.94,3.94,0,0,1,5.76,5.09,3.88,3.88,0,0,1,8.54,4H16Z\" transform=\"translate(-4.45 -3.8)\"/></g></svg>',\n    print: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.05 16.04\"><g><path d=\"M19.76,15.84a1.29,1.29,0,0,0,.39-.92V8.35A2.05,2.05,0,0,0,19.57,7a1.93,1.93,0,0,0-1.38-.57H6.37a1.95,1.95,0,0,0-2,2v6.56a1.23,1.23,0,0,0,.38.92,1.35,1.35,0,0,0,.93.38h2V14.9l-2,0V8.35a.67.67,0,0,1,.18-.47.62.62,0,0,1,.48-.19H18.18a.6.6,0,0,1,.46.19.66.66,0,0,1,.18.47V14.9h-2v1.32h2A1.35,1.35,0,0,0,19.76,15.84ZM17.52,7.69V5.06a1.31,1.31,0,0,0-.38-.92,1.34,1.34,0,0,0-.94-.38H8.34A1.3,1.3,0,0,0,7,5.06V7.69H8.34V5.06h7.87V7.69h1.31ZM8.34,12.93h7.87l0,5.26H8.34V12.93Zm7.87,5.26v0Zm.65,1.31a.6.6,0,0,0,.46-.19.72.72,0,0,0,.2-.47V12.29a.74.74,0,0,0-.2-.47.6.6,0,0,0-.46-.19H7.68a.6.6,0,0,0-.46.19.72.72,0,0,0-.2.47v6.55a.74.74,0,0,0,.2.47.6.6,0,0,0,.46.19h9.18ZM16.67,9.28a.7.7,0,0,0-.94,0,.63.63,0,0,0-.18.46.67.67,0,0,0,.18.47.68.68,0,0,0,.94,0,.66.66,0,0,0,.18-.47A.58.58,0,0,0,16.67,9.28Z\" transform=\"translate(-4.25 -3.61)\"/></g></svg>',\n    template: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14.27 15.64\"><g><path d=\"M18.18,19.16a1,1,0,0,0,1-1V5.73a1,1,0,0,0-1-1h-2v1h2V18.19H6.37V5.73h2v-1h-2A.94.94,0,0,0,5.68,5a1,1,0,0,0-.29.7V18.18a.94.94,0,0,0,.29.69,1,1,0,0,0,.69.29H18.18ZM9.82,10.31h4.92a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H9.82a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15Zm5.9,4.92H8.83a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h6.89a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.51.51,0,0,0-.5-.5ZM7.36,12.77a.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h8.85a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H7.85a.49.49,0,0,0-.35.15.52.52,0,0,0-.14.35Z\" transform=\"translate(-5.14 -3.77)\"/><path d=\"M14.24,6.71a1,1,0,0,0,1-1,1,1,0,0,0-1-1,1,1,0,0,0-1-1h-2a.94.94,0,0,0-.69.28,1,1,0,0,0-.29.7A.94.94,0,0,0,9.62,5a.91.91,0,0,0-.29.69,1,1,0,0,0,.29.7,1,1,0,0,0,.69.29h3.93Z\" transform=\"translate(-5.14 -3.77)\"/></g></svg>',\n    line_height: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 13.56\"><g><path d=\"M4.4,4.88V8.26a2,2,0,0,0,.5.39s.1,0,.18-.12a.62.62,0,0,0,.17-.28c.06-.19.13-.44.21-.74s.14-.52.19-.66a.58.58,0,0,1,.21-.3,2.41,2.41,0,0,1,.63-.21,3.83,3.83,0,0,1,.88-.12,9.15,9.15,0,0,1,1.31.06.16.16,0,0,1,.11,0,.26.26,0,0,1,.06.14,4,4,0,0,1,0,.49v2l.05,3.77c0,1.41,0,2.68-.05,3.81a1.79,1.79,0,0,1-.11.49,10.68,10.68,0,0,1-1.4.45,1.12,1.12,0,0,0-.69.43v.31l0,.22.61,0c.85-.08,1.54-.12,2.06-.12a19.76,19.76,0,0,1,2.09.08,15.08,15.08,0,0,0,1.64.08,1.4,1.4,0,0,0,.29,0,1.58,1.58,0,0,0,0-.26l-.05-.43a2.26,2.26,0,0,0-.43-.17l-.77-.22-.15,0a2.55,2.55,0,0,1-.78-.28,2.56,2.56,0,0,1-.11-.75l0-1.29,0-3.15V7.53a10.51,10.51,0,0,1,.06-1.2,3.83,3.83,0,0,1,.6,0l1.88,0a2.18,2.18,0,0,1,.38,0,.45.45,0,0,1,.23.17.9.9,0,0,1,.05.25c0,.16.06.35.1.58a3.33,3.33,0,0,0,.14.55A6.39,6.39,0,0,0,15,9a2.91,2.91,0,0,0,.6-.15,2.77,2.77,0,0,0,0-.46l0-.51,0-2.95-.25,0-.38,0L15,4.94a.71.71,0,0,1-.18.15.45.45,0,0,1-.25.07l-.29,0H8.75l-.15,0H7.45a17,17,0,0,1-1.86,0L5.36,5l-.25-.13ZM19.75,16.14h-.69v-9h.69A.4.4,0,0,0,20.13,7c.06-.11,0-.24-.1-.39L18.92,5.15a.52.52,0,0,0-.86,0L17,6.58c-.12.15-.16.28-.1.39s.18.16.38.16h.69v9h-.69a.4.4,0,0,0-.38.16c-.06.11,0,.24.1.39l1.11,1.43a.52.52,0,0,0,.86,0L20,16.69c.12-.15.16-.28.1-.39a.4.4,0,0,0-.38-.16Z\" transform=\"translate(-4.4 -4.86)\"/></g></svg>',\n    paragraph_style: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.81 15.74\"><g><path d=\"M18.18,3.76v2h-2V19.5h-2V5.73h-2V19.5h-2V11.63a3.94,3.94,0,0,1,0-7.87h7.87Z\" transform=\"translate(-6.37 -3.76)\"/></g></svg>',\n    text_style: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 13.76 15.74\"><g><path d=\"M17.68,6.71a2.22,2.22,0,0,0,1.06-.22.74.74,0,0,0,.42-.7.73.73,0,0,0-.08-.33.67.67,0,0,0-.17-.22,1,1,0,0,0-.31-.15L18.26,5l-.45-.09A15.27,15.27,0,0,0,13.26,5V4.74c0-.66-.63-1-1.92-1-.24,0-.43.15-.59.46a4,4,0,0,0-.36,1.14h0v0a26.45,26.45,0,0,1-3.5.35A2,2,0,0,0,5.77,6a.84.84,0,0,0-.37.79,2.14,2.14,0,0,0,.41,1.29,1.23,1.23,0,0,0,1.05.63,16.62,16.62,0,0,0,3.29-.45l-.34,3.35c-.16,1.61-.29,2.9-.37,3.86s-.12,1.66-.12,2.09l0,.65a5.15,5.15,0,0,0,.05.6,1.28,1.28,0,0,0,.16.54.34.34,0,0,0,.28.18,1.16,1.16,0,0,0,.79-.46,3.66,3.66,0,0,0,.68-1,22.08,22.08,0,0,0,1-4.33q.49-3.1.78-6.15a24.69,24.69,0,0,1,4.62-.84Z\" transform=\"translate(-5.4 -3.76)\"/></g></svg>',\n    save: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M18.53,19.5l.2-.05A1.78,1.78,0,0,0,20.13,18l0-.09V7.14a2,2,0,0,0-.28-.64A3.18,3.18,0,0,0,19.43,6c-.5-.52-1-1-1.55-1.54A2.59,2.59,0,0,0,17.37,4a1.83,1.83,0,0,0-.61-.25H6l-.21,0a1.78,1.78,0,0,0-1.4,1.49l0,.1V17.87a2.49,2.49,0,0,0,.09.37,1.79,1.79,0,0,0,1.44,1.23l.09,0Zm-6.25-.6H6.92a.61.61,0,0,1-.68-.48.78.78,0,0,1,0-.22V12.3a.62.62,0,0,1,.69-.68H17.64a.62.62,0,0,1,.69.69V18.2a.64.64,0,0,1-.71.69H12.28ZM12,9.81H8.15a.63.63,0,0,1-.72-.71v-4a.64.64,0,0,1,.72-.72h7.66a.64.64,0,0,1,.72.72v4a.65.65,0,0,1-.74.72ZM13.5,5V9.18h1.78V5Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    blockquote: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 475.082 475.081\"><g><path d=\"M164.45,219.27h-63.954c-7.614,0-14.087-2.664-19.417-7.994c-5.327-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.416-51.678c14.276-14.272,31.503-21.411,51.678-21.411h18.271c4.948,0,9.229-1.809,12.847-5.424c3.616-3.617,5.424-7.898,5.424-12.847V54.819c0-4.948-1.809-9.233-5.424-12.85c-3.617-3.612-7.898-5.424-12.847-5.424h-18.271c-19.797,0-38.684,3.858-56.673,11.563c-17.987,7.71-33.545,18.132-46.68,31.267c-13.134,13.129-23.553,28.688-31.262,46.677C3.855,144.039,0,162.931,0,182.726v200.991c0,15.235,5.327,28.171,15.986,38.834c10.66,10.657,23.606,15.985,38.832,15.985h109.639c15.225,0,28.167-5.328,38.828-15.985c10.657-10.663,15.987-23.599,15.987-38.834V274.088c0-15.232-5.33-28.168-15.994-38.832C192.622,224.6,179.675,219.27,164.45,219.27z\"/><path d=\"M459.103,235.256c-10.656-10.656-23.599-15.986-38.828-15.986h-63.953c-7.61,0-14.089-2.664-19.41-7.994c-5.332-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.409-51.678c14.271-14.272,31.497-21.411,51.682-21.411h18.267c4.949,0,9.233-1.809,12.848-5.424c3.613-3.617,5.428-7.898,5.428-12.847V54.819c0-4.948-1.814-9.233-5.428-12.85c-3.614-3.612-7.898-5.424-12.848-5.424h-18.267c-19.808,0-38.691,3.858-56.685,11.563c-17.984,7.71-33.537,18.132-46.672,31.267c-13.135,13.129-23.559,28.688-31.265,46.677c-7.707,17.987-11.567,36.879-11.567,56.674v200.991c0,15.235,5.332,28.171,15.988,38.834c10.657,10.657,23.6,15.985,38.828,15.985h109.633c15.229,0,28.171-5.328,38.827-15.985c10.664-10.663,15.985-23.599,15.985-38.834V274.088C475.082,258.855,469.76,245.92,459.103,235.256z\"/></g></svg>',\n    arrow_down: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 8.67\"><g><path d=\"M18.79,7.52a.8.8,0,0,1,.56-.23.82.82,0,0,1,.79.79.8.8,0,0,1-.23.56l-7.07,7.07a.79.79,0,0,1-.57.25.77.77,0,0,1-.57-.25h0L4.64,8.65a.8.8,0,0,1-.23-.57.82.82,0,0,1,.79-.79.8.8,0,0,1,.56.23L12.28,14l3.26-3.26,3.25-3.26Z\" transform=\"translate(-4.41 -7.29)\"/></g></svg>',\n    align_justify: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm0,5.9H20.15v-2H4.41v2Zm0,3.94H20.15v-2H4.41v2Zm0,3.93h7.87v-2H4.41v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    align_left: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm11.8,3.94H4.41v2H16.22v-2Zm-11.8,5.9H18.18v-2H4.41v2Zm0,3.93h9.84v-2H4.41v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    align_right: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm3.93,5.9H20.15v-2H8.34v2Zm-2,3.94H20.14v-2H6.37v2Zm3.94,3.93h9.84v-2H10.31v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    align_center: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm2,3.94v2H18.18v-2H6.37Zm-1,5.9H19.16v-2H5.39v2Zm2,3.93H17.2v-2H7.36v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    font_color: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.61\"><g><path d=\"M18.5,15.57,14.28,4.32h-3.4L6.65,15.57h3l.8-2.26h4.23l.8,2.26h3ZM14,11.07H11.14L12.54,7,13.25,9c.41,1.18.64,1.86.7,2ZM4.41,16.69v2.24H20.15V16.69H4.41Z\" transform=\"translate(-4.41 -4.32)\"/></g></svg>',\n    highlight_color: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.66 15.74\"><g><path d=\"M12.32,9.31,13.38,13H11.21l.52-1.83q.46-1.61.54-1.83ZM4.44,3.76H20.1V19.5H4.44V3.76ZM14.71,17.32h2.63L13.7,6H10.89L7.26,17.32H9.89l.63-2.24h3.55l.32,1.12c.18.65.29,1,.32,1.12Z\" transform=\"translate(-4.44 -3.76)\"/></g></svg>',\n    list_bullets: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 12.37\"><g><path d=\"M7.77,16.12a1.59,1.59,0,0,0-.49-1.18,1.62,1.62,0,0,0-1.19-.49,1.68,1.68,0,1,0,0,3.36,1.67,1.67,0,0,0,1.68-1.69Zm0-4.48A1.67,1.67,0,0,0,6.09,10,1.68,1.68,0,0,0,4.9,12.82a1.62,1.62,0,0,0,1.19.49,1.67,1.67,0,0,0,1.68-1.67Zm12.38,3.64a.27.27,0,0,0-.08-.19.28.28,0,0,0-.2-.09H9.19a.28.28,0,0,0-.2.08.29.29,0,0,0-.08.19V17a.27.27,0,0,0,.28.28H19.87a.27.27,0,0,0,.19-.08.24.24,0,0,0,.08-.2V15.28ZM7.77,7.13a1.63,1.63,0,0,0-.49-1.2,1.61,1.61,0,0,0-1.19-.49,1.61,1.61,0,0,0-1.19.49,1.71,1.71,0,0,0,0,2.4,1.62,1.62,0,0,0,1.19.49,1.61,1.61,0,0,0,1.19-.49,1.63,1.63,0,0,0,.49-1.2Zm12.38,3.66a.28.28,0,0,0-.08-.2.29.29,0,0,0-.19-.08H9.19a.27.27,0,0,0-.28.28v1.69a.27.27,0,0,0,.08.19.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08.25.25,0,0,0,.08-.19V10.79Zm0-4.5a.27.27,0,0,0-.08-.19A.25.25,0,0,0,19.88,6H9.19A.28.28,0,0,0,9,6.1a.26.26,0,0,0-.08.19V8A.27.27,0,0,0,9,8.17a.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08A.25.25,0,0,0,20.14,8V6.29Z\" transform=\"translate(-4.41 -5.44)\"/></g></svg>',\n    list_number: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.69 15.74\"><g><path d=\"M7.66,18a1.24,1.24,0,0,0-.26-.78,1.17,1.17,0,0,0-.72-.42l.85-1V15H4.58v1.34h.94v-.46l.85,0h0c-.11.11-.22.23-.32.35s-.23.27-.37.47L5.39,17l.23.51c.61-.05.92.11.92.49a.42.42,0,0,1-.18.37.79.79,0,0,1-.45.12A1.41,1.41,0,0,1,5,18.15l-.51.77A2.06,2.06,0,0,0,6,19.5a1.8,1.8,0,0,0,1.2-.41A1.38,1.38,0,0,0,7.66,18Zm0-5.54H6.75V13H5.63A.72.72,0,0,1,6,12.51a5.45,5.45,0,0,1,.66-.45,2.71,2.71,0,0,0,.67-.57,1.19,1.19,0,0,0,.31-.81,1.29,1.29,0,0,0-.45-1,1.86,1.86,0,0,0-2-.11,1.51,1.51,0,0,0-.62.7l.74.52A.87.87,0,0,1,6,10.28a.51.51,0,0,1,.35.12.42.42,0,0,1,.13.33.55.55,0,0,1-.21.4,3,3,0,0,1-.5.38c-.19.13-.39.27-.58.42a2,2,0,0,0-.5.6,1.63,1.63,0,0,0-.21.81,3.89,3.89,0,0,0,.05.48h3.2V12.44Zm12.45,2.82a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2V17a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V15.26ZM7.69,7.32h-1V3.76H5.8L4.6,4.88l.63.68a1.85,1.85,0,0,0,.43-.48h0l0,2.24H4.74V8.2h3V7.32Zm12.43,3.42a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2v1.71a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V10.74Zm0-4.52A.27.27,0,0,0,20,6,.28.28,0,0,0,19.83,6H9.1A.32.32,0,0,0,8.89,6a.24.24,0,0,0-.08.19V7.93a.27.27,0,0,0,.08.19.32.32,0,0,0,.21.08H19.83A.32.32,0,0,0,20,8.12a.26.26,0,0,0,.08-.2V6.22Z\" transform=\"translate(-4.43 -3.76)\"/></g></svg>',\n    table: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M4.41,8.05V3.76H8.7V8.05H4.41Zm5.71,0V3.76h4.3V8.05h-4.3Zm5.74-4.29h4.29V8.05H15.86V3.76Zm-11.45,10V9.48H8.7v4.3H4.41Zm5.71,0V9.48h4.3v4.3h-4.3Zm5.74,0V9.48h4.29v4.3H15.86ZM4.41,19.5V15.21H8.7V19.5H4.41Zm5.71,0V15.21h4.3V19.5h-4.3Zm5.74,0V15.21h4.29V19.5H15.86Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    horizontal_rule: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 2.24\"><g><path d=\"M20.15,12.75V10.51H4.41v2.24H20.15Z\" transform=\"translate(-4.41 -10.51)\"/></g></svg>',\n    show_blocks: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.66 15.67\"><g><path d=\"M19.72,5.58a1.64,1.64,0,0,0-1.64-1.64H6.23a1.62,1.62,0,0,0-1.16.48,1.63,1.63,0,0,0-.48,1.16V9.63a1.6,1.6,0,0,0,.48,1.16,1.62,1.62,0,0,0,1.16.47H18.09a1.67,1.67,0,0,0,1.16-.47,1.62,1.62,0,0,0,.48-1.16V5.58Zm-.94,4.05a.68.68,0,0,1-.7.7H6.23a.66.66,0,0,1-.48-.2.74.74,0,0,1-.21-.5V5.58a.66.66,0,0,1,.2-.48.71.71,0,0,1,.48-.21H18.08a.74.74,0,0,1,.5.21.66.66,0,0,1,.2.48ZM6.48,7.72a.21.21,0,0,0,.17-.07.22.22,0,0,0,.07-.17V7.06a1.27,1.27,0,0,1,.11-.52.37.37,0,0,1,.36-.23H8.77A.25.25,0,0,0,9,6.17a.19.19,0,0,0,0-.23.27.27,0,0,0-.2-.12H7.19a.88.88,0,0,0-.72.39,1.51,1.51,0,0,0-.23.85v.42a.24.24,0,0,0,.24.24Zm-.19.81a.21.21,0,0,0,.17-.07.26.26,0,0,0,.07-.17.24.24,0,0,0-.24-.24.2.2,0,0,0-.16.09.2.2,0,0,0-.07.16.22.22,0,0,0,.07.17.23.23,0,0,0,.16.06Zm8.46,5.1a1.63,1.63,0,0,0-.47-1.16A1.61,1.61,0,0,0,13.12,12H6.23a1.6,1.6,0,0,0-1.16.46,1.62,1.62,0,0,0-.48,1.16v4.05a1.64,1.64,0,0,0,1.64,1.64h6.89a1.6,1.6,0,0,0,1.16-.48,1.62,1.62,0,0,0,.47-1.16Zm-.94,4a.7.7,0,0,1-.2.49.65.65,0,0,1-.5.2H6.23a.66.66,0,0,1-.48-.2.75.75,0,0,1-.21-.49v-4a.74.74,0,0,1,.21-.5.66.66,0,0,1,.48-.2h6.89a.68.68,0,0,1,.7.7v4Zm6.15,0v-4a1.6,1.6,0,0,0-.48-1.16A1.67,1.67,0,0,0,18.32,12H17.1a1.63,1.63,0,0,0-1.16.47,1.61,1.61,0,0,0-.47,1.16v4a1.67,1.67,0,0,0,.47,1.16,1.62,1.62,0,0,0,1.16.48h1.22A1.64,1.64,0,0,0,20,17.68Zm-.94-4v4a.75.75,0,0,1-.21.49.62.62,0,0,1-.48.2H17.11a.69.69,0,0,1-.5-.2.7.7,0,0,1-.2-.49v-4a.68.68,0,0,1,.7-.7h1.22a.66.66,0,0,1,.48.2.72.72,0,0,1,.21.5Z\" transform=\"translate(-4.44 -3.79)\"/></g></svg>',\n    cancel: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M14.15,11.63l5.61,5.61a1.29,1.29,0,0,1,.38.93,1.27,1.27,0,0,1-.4.93,1.25,1.25,0,0,1-.92.4,1.31,1.31,0,0,1-.94-.4l-5.61-5.61L6.67,19.1a1.31,1.31,0,0,1-.94.4,1.24,1.24,0,0,1-.92-.4,1.27,1.27,0,0,1-.4-.93,1.33,1.33,0,0,1,.38-.93l5.61-5.63L4.79,6a1.26,1.26,0,0,1-.38-.93,1.22,1.22,0,0,1,.4-.92,1.28,1.28,0,0,1,.92-.39,1.38,1.38,0,0,1,.94.38l5.61,5.61,5.61-5.61a1.33,1.33,0,0,1,.94-.38,1.26,1.26,0,0,1,.92.39,1.24,1.24,0,0,1,.4.92,1.29,1.29,0,0,1-.39.93L17,8.81l-2.8,2.82Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    image: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.77\"><g><path d=\"M8.77,8.72a.88.88,0,0,1-.61-.27.82.82,0,0,1-.25-.61.89.89,0,0,1,.25-.62A.82.82,0,0,1,8.77,7a.81.81,0,0,1,.61.25.83.83,0,0,1,.27.62.81.81,0,0,1-.25.61.91.91,0,0,1-.63.27Zm9.62-5a1.74,1.74,0,0,1,1.76,1.76V17.76a1.74,1.74,0,0,1-1.76,1.76H6.16A1.74,1.74,0,0,1,4.4,17.76V5.51A1.74,1.74,0,0,1,6.16,3.75H18.39Zm0,1.75H6.16v8L8.53,11.8a.94.94,0,0,1,.54-.17.86.86,0,0,1,.54.2L11.09,13l3.64-4.55a.78.78,0,0,1,.34-.25.85.85,0,0,1,.42-.07.89.89,0,0,1,.39.12.78.78,0,0,1,.28.29l2.24,3.67V5.51Zm0,12.24V15.6L15.3,10.53,11.89,14.8a.89.89,0,0,1-.59.32.82.82,0,0,1-.64-.18L9,13.62,6.16,15.74v2Z\" transform=\"translate(-4.4 -3.75)\"/></g></svg>',\n    video: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.55\"><g><path d=\"M20.15,10.26V18.9l-3.94-1.57v1.2H4.41V10.66H16.22v1.23l2-.81,2-.82ZM14.64,17h0V12.54h0v-.31H6V17h8.67Zm3.94-.37v-4l-2.37,1v2l1.18.48,1.19.48ZM7.94,9.86A2.77,2.77,0,0,1,5.19,7.11a2.76,2.76,0,0,1,5.51,0A2.78,2.78,0,0,1,7.94,9.86Zm0-3.93a1.21,1.21,0,0,0-.83.35,1.15,1.15,0,0,0-.34.84A1.09,1.09,0,0,0,7.11,8,1.15,1.15,0,0,0,8,8.28,1.13,1.13,0,0,0,9.11,7.12,1.16,1.16,0,0,0,7.94,5.93Zm5.9,3.93a2.34,2.34,0,0,1-1.67-.68,2.3,2.3,0,0,1-.68-1.67,2.35,2.35,0,0,1,4-1.67,2.37,2.37,0,0,1,0,3.34,2.33,2.33,0,0,1-1.68.68Zm0-3.14a.75.75,0,1,0,.55.22.73.73,0,0,0-.55-.22Z\" transform=\"translate(-4.41 -4.35)\"/></g></svg>',\n    link: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.72\"><g><path d=\"M13.05,13.63a.24.24,0,0,1,.15.22L13.42,16a.19.19,0,0,1-.08.18l-2.12,2.14a4.08,4.08,0,0,1-1.29.85A4,4,0,0,1,4.71,17a3.92,3.92,0,0,1-.3-1.52A4,4,0,0,1,4.71,14a3.91,3.91,0,0,1,.87-1.3L7.7,10.56a.25.25,0,0,1,.2-.06l2.17.22a.21.21,0,0,1,.19.15.24.24,0,0,1,0,.25L7.12,14.23a1.81,1.81,0,0,0,0,2.58,1.78,1.78,0,0,0,1.29.52,1.74,1.74,0,0,0,1.28-.52L12.8,13.7a.24.24,0,0,1,.25-.07ZM19,4.92a4,4,0,0,1,0,5.66L16.86,12.7a.25.25,0,0,1-.17.08l-2.2-.23a.21.21,0,0,1-.19-.15.22.22,0,0,1,0-.25L17.44,9a1.81,1.81,0,0,0,0-2.58,1.78,1.78,0,0,0-1.29-.52,1.74,1.74,0,0,0-1.28.52L11.76,9.57a.21.21,0,0,1-.25,0,.24.24,0,0,1-.16-.21l-.22-2.17a.19.19,0,0,1,.08-.18l2.12-2.14a4.08,4.08,0,0,1,1.29-.85,4.05,4.05,0,0,1,3.06,0,3.85,3.85,0,0,1,1.3.85ZM5.84,9.82a.25.25,0,0,1-.18-.08.19.19,0,0,1-.07-.19l.11-.77a.2.2,0,0,1,.11-.17.24.24,0,0,1,.2,0l2.5.72a.25.25,0,0,1,.15.27.22.22,0,0,1-.23.21l-2.59,0Zm4.12-2-.73-2.5a.27.27,0,0,1,0-.2A.21.21,0,0,1,9.41,5L10.19,5a.25.25,0,0,1,.19,0,.23.23,0,0,1,.08.18l-.05,2.61a.2.2,0,0,1-.19.23h0A.22.22,0,0,1,10,7.85Zm8.76,5.58a.25.25,0,0,1,.18.08.23.23,0,0,1,.06.2l-.11.77a.25.25,0,0,1-.11.17.21.21,0,0,1-.12,0l-.08,0L16,14a.25.25,0,0,1-.15-.27.22.22,0,0,1,.22-.21l1.29,0,1.33,0Zm-4.12,2,.74,2.51a.28.28,0,0,1,0,.2.23.23,0,0,1-.18.11l-.8.11a.23.23,0,0,1-.17-.07.25.25,0,0,1-.08-.18l0-2.61a.22.22,0,0,1,.22-.22.21.21,0,0,1,.26.15Z\" transform=\"translate(-4.41 -3.77)\"/></g></svg>',\n    math: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.81 15.73\"><g><path d=\"M17.19,5.73a1,1,0,0,0,.71-.29,1,1,0,0,0,.28-.7,1,1,0,0,0-1-1H7.35a1,1,0,0,0-1,1,.77.77,0,0,0,.13.47h0l4.58,6.43L6.68,17.81a1.25,1.25,0,0,0-.29.71.94.94,0,0,0,.28.7.92.92,0,0,0,.69.28H17.2a1,1,0,0,0,.71-.28,1,1,0,0,0,0-1.39.92.92,0,0,0-.71-.29H9.26l3.87-5.43a.86.86,0,0,0,0-.95L9.26,5.73h7.93Z\" transform=\"translate(-6.38 -3.77)\"/></g></svg>',\n    unlink: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.72\"><g><path d=\"M19,18.32a4,4,0,0,0,0-5.68L15.85,9.5l-1.17,1.55L17.57,14a2,2,0,0,1,.61,1.47,2.08,2.08,0,0,1-2.09,2.09,2,2,0,0,1-1.47-.61l-.38-.37-1.74,1,.8.78a4,4,0,0,0,5.68,0ZM8,9.77a2,2,0,0,1-1.27-1,1.89,1.89,0,0,1-.21-1.57A2.1,2.1,0,0,1,7.45,6,2,2,0,0,1,9,5.76L12.27,7.2l.49-2L9.48,3.9a4,4,0,0,0-3.06.41A3.82,3.82,0,0,0,4.56,6.73a3.8,3.8,0,0,0,.4,3A3.78,3.78,0,0,0,7.39,11.6l5.38,2,.49-2-2.64-.94L8,9.77Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    table_header: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.74\"><g><path d=\"M17,19.5v-.78H15.5v.78H17Zm-3,0v-.78H12.5v.78H14Zm-3,0v-.78H9.53v.78H11Zm-3,0v-.78H6.53v.78H8Zm10.55,0a1.73,1.73,0,0,0,.85-.35,1.67,1.67,0,0,0,.56-.76l-.71-.31a1.21,1.21,0,0,1-.35.4,1.34,1.34,0,0,1-.53.23l.08.38c.06.24.09.38.1.41Zm-13.7-.63.55-.55A.77.77,0,0,1,5.25,18a1.31,1.31,0,0,1-.06-.38v-.38H4.41v.38a2,2,0,0,0,.12.68,1.6,1.6,0,0,0,.35.57Zm15.27-2.12V15.26h-.78v1.49h.78Zm-15-1V14.23H4.41v1.49h.78Zm15-2V12.26h-.78v1.49h.78Zm-15-1V11.22H4.41v1.51h.78Zm15-2V9.26h-.78v1.51h.78Zm-15-1V8.17H4.41V9.74h.78Zm15-2V6.28h-.78V7.77h.78Zm-15-1.11V5.33L4.48,5.1a.77.77,0,0,0-.07.27,2.72,2.72,0,0,0,0,.28v1h.79ZM19.21,5l.63-.4A1.62,1.62,0,0,0,19.16,4a1.94,1.94,0,0,0-.91-.22v.78a1.31,1.31,0,0,1,.56.12.88.88,0,0,1,.4.36ZM6,4.54H7.78V3.76H6a.82.82,0,0,0-.28.06l.12.35c.07.21.1.33.11.36Zm10.8,0V3.76H15.28v.78h1.49Zm-3,0V3.76H12.28v.78h1.49Zm-3,0V3.76H9.28v.78h1.51ZM6,10.84h12.6V6.91H6Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    merge_cell: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 15.74\"><g><path d=\"M18.92,13.5h1.23v4.15A1.84,1.84,0,0,1,18.3,19.5H14V18.27H18.3a.6.6,0,0,0,.44-.18.59.59,0,0,0,.18-.44V13.5ZM18.3,3.76a1.84,1.84,0,0,1,1.85,1.85V9.82H18.92V5.6a.6.6,0,0,0-.18-.44A.59.59,0,0,0,18.3,5H14V3.76H18.3Zm1.85,8.51H15.6L17.26,14l-.86.86-3.14-3.17L16.4,8.51l.86.86L15.62,11h4.54v1.24Zm-13.9,6h4.27V19.5H6.25A1.84,1.84,0,0,1,4.4,17.65V13.5H5.63v4.15a.61.61,0,0,0,.62.62Zm0-14.51h4.27V5H6.25a.6.6,0,0,0-.44.18.57.57,0,0,0-.17.43V9.81H4.41V5.6A1.83,1.83,0,0,1,6.25,3.76Zm5,7.9L8.15,14.83,7.3,14,9,12.27H4.41V11H8.94L7.3,9.38,7.73,9l.43-.43Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    split_cell: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.74\"><g><path d=\"M10.37,12.25H6.74L8.4,13.94l-.87.86L4.41,11.63,7.53,8.5l.87.86L6.74,11h3.62v1.23Zm9.78-.61L17,14.81,16.13,14l1.66-1.69H14.16V11h3.63L16.13,9.37l.43-.43A5.24,5.24,0,0,1,17,8.51ZM18.9,8.22V5.61a.57.57,0,0,0-.18-.43A.65.65,0,0,0,18.29,5H12.88V18.28h5.41a.7.7,0,0,0,.44-.18.57.57,0,0,0,.18-.43V15h1.23v2.64a1.84,1.84,0,0,1-1.85,1.83h-12A1.84,1.84,0,0,1,4.94,19a1.81,1.81,0,0,1-.54-1.29V15H5.63v2.64a.57.57,0,0,0,.18.43.67.67,0,0,0,.44.18h5.41V5H6.25a.7.7,0,0,0-.44.18.56.56,0,0,0-.17.43V8.22H4.41V5.61A1.8,1.8,0,0,1,5,4.31a1.91,1.91,0,0,1,1.31-.55h12a1.89,1.89,0,0,1,1.31.55,1.8,1.8,0,0,1,.54,1.3V8.23H18.9Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    caption: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.79\"><g><path d=\"M4.41,18.52H20.15v-2H4.41ZM20,4.73H18.07V6h.65v.65H20V4.73ZM17,6V4.73H14.55V6H17ZM13.49,6V4.73H11V6h2.47ZM10,6V4.73H7.5V6H10ZM5.79,6h.65V4.73H4.5V6.67H5.8V6ZM4.5,11.34H5.79V8.48H4.5ZM6.44,13.8H5.79v-.65H4.5v1.94H6.44ZM17,15.09V13.8H14.55v1.29H17Zm-3.52,0V13.8H11v1.29h2.47Zm-3.53,0V13.8H7.5v1.29H10ZM20,13.16H18.72v.65h-.65V15.1H20Zm-1.29-1.82H20V8.48h-1.3v2.86Z\" transform=\"translate(-4.41 -4.73)\"/></g></svg>',\n    edit: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.73\"><g><path d=\"M7.51,5.68h6l1.52-1.57H6.94a2.4,2.4,0,0,0-1.79.82A2.8,2.8,0,0,0,4.41,6.8V17a2.55,2.55,0,0,0,.75,1.8A2.48,2.48,0,0,0,7,19.5H17.22a2.57,2.57,0,0,0,1.83-.74,2.52,2.52,0,0,0,.77-1.8V8.83l-1.58,1.54v6a1.54,1.54,0,0,1-1.53,1.53H7.51A1.54,1.54,0,0,1,6,16.41V7.21A1.52,1.52,0,0,1,7.51,5.68Zm5.63,7.47h0L10.7,10.74l-1,3.38,1.71-.48,1.7-.49Zm.34-.34h0l5.36-5.32L16.4,5.08,11,10.4l1.23,1.21,1.21,1.2ZM19.93,6.4a.82.82,0,0,0,.22-.48A.54.54,0,0,0,20,5.47L18.45,4A.67.67,0,0,0,18,3.77a.7.7,0,0,0-.48.21l-.74.72,2.44,2.43.37-.37.35-.36Z\" transform=\"translate(-4.41 -3.77)\"/></g></svg>',\n    delete: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 15.74\"><g><path d=\"M19.16,6.71a.94.94,0,0,0,.69-.28.91.91,0,0,0,.29-.68A1,1,0,0,0,19.85,5a.93.93,0,0,0-.69-.3H14.24A.94.94,0,0,0,14,4.06a.92.92,0,0,0-.7-.3h-2a1,1,0,0,0-.7.3.93.93,0,0,0-.28.68H5.39A.92.92,0,0,0,4.7,5a1,1,0,0,0-.29.71.91.91,0,0,0,.29.68,1,1,0,0,0,.69.28H19.16Zm-12.79,1a1,1,0,0,0-.7.3.94.94,0,0,0-.28.69v8.85A1.88,1.88,0,0,0,6,18.93a1.9,1.9,0,0,0,1.39.57H17.2a1.87,1.87,0,0,0,1.39-.58,1.91,1.91,0,0,0,.58-1.39V8.68A1,1,0,0,0,18.88,8a.89.89,0,0,0-.7-.29,1,1,0,0,0-.69.29.92.92,0,0,0-.29.68v7.87a1,1,0,0,1-1,1H8.34a.94.94,0,0,1-.69-.28,1,1,0,0,1-.29-.71V8.68a1,1,0,0,0-1-1Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    modify: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.74\"><g><path d=\"M19.79,15.23a.66.66,0,0,1,.3.38.59.59,0,0,1-.07.48l-.8,1.38a.66.66,0,0,1-.38.3.59.59,0,0,1-.48-.07l-.68-.38a4.55,4.55,0,0,1-1.34.77v.78a.64.64,0,0,1-.18.45.61.61,0,0,1-.45.18h-1.6a.6.6,0,0,1-.44-.18.66.66,0,0,1-.19-.45v-.78a4.36,4.36,0,0,1-1.32-.77l-.69.38a.58.58,0,0,1-.48.07.66.66,0,0,1-.38-.3l-.38-.66h.83a1.77,1.77,0,0,0,1.23-.52,1.72,1.72,0,0,0,.51-1.23v-.18a3,3,0,0,0,.49-.28l.15.09a1.83,1.83,0,0,0,.88.23A1.75,1.75,0,0,0,15.84,14l.88-1.52a1.7,1.7,0,0,0,.17-1.32,1.66,1.66,0,0,0-.3-.61,1.84,1.84,0,0,0-.51-.45l-.15-.09,0-.29,0-.28.15-.09a1,1,0,0,0,.26-.18l0,.06v.78a4.34,4.34,0,0,1,1.34.77l.68-.38a.68.68,0,0,1,.48-.06.64.64,0,0,1,.38.29l.8,1.38a.58.58,0,0,1,.07.48.63.63,0,0,1-.3.38l-.68.4a3.84,3.84,0,0,1,.08.76,4.13,4.13,0,0,1-.08.78l.34.18.32.2ZM10.17,7.86a1.9,1.9,0,0,1,1.35,3.23,1.85,1.85,0,0,1-1.35.55A1.9,1.9,0,0,1,8.83,8.41a1.92,1.92,0,0,1,1.34-.55Zm1.58,7.2a.73.73,0,0,1-.21.49.66.66,0,0,1-.48.2H9.29a.68.68,0,0,1-.69-.69V14.2a4.75,4.75,0,0,1-1.48-.86l-.75.45a.73.73,0,0,1-.7,0,.63.63,0,0,1-.25-.26L4.54,12a.67.67,0,0,1-.08-.53.71.71,0,0,1,.32-.42l.75-.43a4.8,4.8,0,0,1-.08-.85,4.71,4.71,0,0,1,.08-.85l-.74-.44a.71.71,0,0,1-.32-.42.65.65,0,0,1,.07-.54L5.42,6a.66.66,0,0,1,.42-.32l.18,0a.73.73,0,0,1,.35.09l.75.43A4.68,4.68,0,0,1,8.6,5.33V4.45a.68.68,0,0,1,.69-.69h1.77a.64.64,0,0,1,.48.2.73.73,0,0,1,.21.49v.88a4.75,4.75,0,0,1,1.48.85L14,5.75a.67.67,0,0,1,.34-.09l.18,0a.71.71,0,0,1,.42.32l.89,1.54a.67.67,0,0,1,.06.52.73.73,0,0,1-.32.43l-.75.42a4.8,4.8,0,0,1,.08.85,4.71,4.71,0,0,1-.08.85l.75.43a.66.66,0,0,1,.32.42.73.73,0,0,1-.06.54l-.89,1.52a.69.69,0,0,1-.25.26.7.7,0,0,1-.35.09.64.64,0,0,1-.34-.09l-.75-.45a4.87,4.87,0,0,1-1.48.86v.87ZM7.23,9.75a3,3,0,0,0,.86,2.08,2.94,2.94,0,1,0,4.16-4.16,3,3,0,0,0-2.08-.85A2.94,2.94,0,0,0,7.23,9.75Z\" transform=\"translate(-4.44 -3.76)\"/></g></svg>',\n    revert: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 14.69\"><g><path d=\"M18.26,15V12.3l1.89-2V15a2.58,2.58,0,0,1-.24,1c-.2.58-.75.92-1.65,1H7.56v2L4.41,15.63,7.56,13v2h10.7ZM6.3,8.28V11L4.41,13V8.28a2.58,2.58,0,0,1,.24-1c.2-.58.75-.92,1.65-1H17v-2l3.15,3.34L17,10.3v-2H6.3Z\" transform=\"translate(-4.4 -4.28)\"/></g></svg>',\n    auto_size: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M6.71,17.19,6.89,16l1.21-.15A6,6,0,0,1,6.81,13.9a5.78,5.78,0,0,1-.45-2.27A6,6,0,0,1,8.1,7.45a5.83,5.83,0,0,1,4.17-1.73l1-1-1-1A7.89,7.89,0,0,0,5,14.64a7.73,7.73,0,0,0,1.71,2.55Zm5.57,2.31h0A7.86,7.86,0,0,0,17.85,6.07L17.67,7.3l-1.21.15a5.9,5.9,0,0,1,1.29,1.92,5.81,5.81,0,0,1,.45,2.26,5.91,5.91,0,0,1-5.9,5.9l-1,1,.49.49.47.5Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    insert_row_below: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M15.7,1.3c-0.1-0.1-0.1-0.2-0.2-0.2L15.3,1H0.4L0.3,1.1c0,0-0.1,0.1-0.1,0.1c0,0-0.1,0.1-0.1,0.1L0,1.4v7.7l0.1,0.1c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h2.3V9.3l0.1-0.5L3,8.5l0.1-0.2c-0.1,0-0.2,0-0.3,0H1.2v-6h13.3v6h-1.6c-0.1,0-0.2,0-0.3,0l0.1,0.2l0.2,0.4C12.9,9,13,9.2,13,9.3v0.1h2.3l0.2-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1V1.4L15.7,1.3z\"/><path d=\"M10.5,7.5C9.9,7.1,9.3,6.8,8.6,6.7c-0.2,0-0.5-0.1-0.7,0c-0.2,0-0.5,0-0.7,0C6.6,6.7,6.1,6.9,5.6,7.3C5.2,7.6,4.7,8,4.4,8.4C4.3,8.6,4.2,8.8,4.2,8.9C4.1,9.1,4,9.3,3.9,9.4C3.9,9.6,3.8,9.7,3.8,9.9c0,0.2-0.1,0.3-0.1,0.5v-0.1c-0.1,0.8,0.1,1.6,0.5,2.4c0.4,0.7,1,1.3,1.7,1.7c0.3,0.2,0.6,0.3,0.9,0.3c0.3,0.1,0.7,0.1,1,0.1c0.3,0,0.7,0,1-0.1c0.3-0.1,0.6-0.2,0.9-0.3c0.5-0.3,0.9-0.6,1.3-1c0.3-0.4,0.6-0.8,0.8-1.3c0.1-0.4,0.2-0.9,0.2-1.4c0-0.5-0.1-1-0.3-1.4C11.5,8.6,11.1,8,10.5,7.5z M10.1,11.3H8.5v1.6H8H7.9H7.3v0v-0.1v-1.4H5.7v-0.4v-0.2v-0.6h0h1.5V8.5h1.2v1.6h1.6V11.3z\"/></g></svg>',\n    insert_row_above: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M0.1,14.5c0.1,0.1,0.1,0.2,0.2,0.2l0.1,0.1h14.9l0.1-0.1c0,0,0.1-0.1,0.1-0.1c0,0,0.1-0.1,0.1-0.1l0.1-0.1V6.7l-0.1-0.1c0-0.1-0.1-0.1-0.2-0.2l-0.1-0.1h-2.3v0.1l-0.1,0.5l-0.2,0.4l-0.1,0.2c0.1,0,0.2,0,0.3,0h1.6v6H1.3v-6h1.6c0.1,0,0.2,0,0.3,0L3.1,7.3L2.9,6.9C2.8,6.8,2.8,6.6,2.7,6.5V6.3H0.4L0.3,6.4c-0.1,0-0.1,0.1-0.2,0.2L0,6.7v7.7L0.1,14.5z\"/><path d=\"M5.3,8.3c0.6,0.5,1.2,0.8,1.9,0.9c0.2,0,0.5,0.1,0.7,0c0.2,0,0.5,0,0.7,0c0.6-0.1,1.1-0.3,1.6-0.6c0.5-0.3,0.9-0.7,1.2-1.2c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.2,0.2-0.4,0.2-0.5c0.1-0.1,0.1-0.3,0.1-0.4C12,5.8,12,5.6,12,5.4v0.1c0.1-0.8-0.1-1.6-0.5-2.4c-0.4-0.7-1-1.3-1.7-1.7C9.5,1.3,9.2,1.2,8.9,1.1C8.5,1,8.2,1,7.9,1c-0.3,0-0.7,0-1,0.1C6.6,1.2,6.3,1.3,6,1.4C5.5,1.7,5.1,2,4.7,2.4C4.4,2.8,4.1,3.3,3.9,3.8C3.8,4.2,3.7,4.7,3.7,5.2c0,0.5,0.1,1,0.3,1.4C4.3,7.2,4.7,7.8,5.3,8.3z M5.7,4.5h1.6V2.9h0.5h0.1h0.6v0v0.1v1.4H10v0.4v0.2v0.6h0H8.5v1.6H7.3V5.7H5.7V4.5z\"/></g></svg>',\n    insert_column_left: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M14.5,15.7c0.1-0.1,0.2-0.1,0.2-0.2l0.1-0.1V0.4l-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1L14.4,0H6.7L6.6,0.1c-0.1,0-0.1,0.1-0.2,0.2L6.3,0.4v2.3h0.1l0.5,0.1L7.3,3l0.2,0.1c0-0.1,0-0.2,0-0.3V1.2h6v13.3h-6v-1.6c0-0.1,0-0.2,0-0.3l-0.2,0.1l-0.4,0.2C6.7,12.9,6.6,13,6.4,13H6.3v2.3l0.1,0.2c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h7.7L14.5,15.7z\"/><path d=\"M8.3,10.5C8.7,10,9,9.3,9.1,8.6c0-0.2,0.1-0.5,0-0.7c0-0.2,0-0.5,0-0.7C9,6.7,8.8,6.1,8.5,5.7C8.2,5.2,7.8,4.8,7.3,4.5C7.2,4.4,7,4.3,6.9,4.2C6.7,4.1,6.5,4,6.4,4C6.2,3.9,6.1,3.9,5.9,3.8c-0.2,0-0.3-0.1-0.5-0.1h0.1C4.7,3.7,3.8,3.9,3.1,4.3C2.4,4.7,1.8,5.3,1.4,6C1.3,6.3,1.2,6.6,1.1,6.9C1,7.2,1,7.6,1,7.9c0,0.3,0,0.7,0.1,1c0.1,0.3,0.2,0.6,0.3,0.9c0.3,0.5,0.6,0.9,1,1.3c0.4,0.3,0.8,0.6,1.3,0.8C4.2,12,4.7,12.1,5.1,12c0.5,0,1-0.1,1.4-0.3C7.2,11.5,7.8,11.1,8.3,10.5zM4.5,10.1V8.5H2.9V8V7.9V7.3h0H3h1.4V5.7h0.4h0.2h0.6v0v1.5h1.6v1.2H5.7v1.6H4.5z\"/></g></svg>',\n    insert_column_right: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M1.3,0.1C1.2,0.2,1.1,0.2,1.1,0.3L1,0.4v14.9l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0,0,0.1,0.1,0.1,0.1l0.1,0.1h7.7l0.1-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1v-2.3H9.3l-0.5-0.1l-0.4-0.2l-0.2-0.1c0,0.1,0,0.2,0,0.3v1.6h-6V1.3h6v1.6c0,0.1,0,0.2,0,0.3l0.2-0.1l0.4-0.2C9,2.9,9.2,2.8,9.3,2.8h0.1V0.5L9.4,0.3c0-0.1-0.1-0.1-0.2-0.2L9.1,0H1.4L1.3,0.1z\"/><path d=\"M7.5,5.3C7,5.8,6.7,6.5,6.6,7.2c0,0.2-0.1,0.5,0,0.7c0,0.2,0,0.5,0,0.7c0.1,0.6,0.3,1.1,0.6,1.6c0.3,0.5,0.7,0.9,1.2,1.2c0.2,0.1,0.3,0.2,0.5,0.3c0.2,0.1,0.4,0.2,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0.1,0.5,0.1h-0.1c0.8,0.1,1.6-0.1,2.4-0.5c0.7-0.4,1.3-1,1.7-1.7c0.2-0.3,0.3-0.6,0.3-0.9c0.1-0.3,0.1-0.7,0.1-1c0-0.3,0-0.7-0.1-1c-0.1-0.3-0.2-0.6-0.3-0.9c-0.3-0.5-0.6-0.9-1-1.3C13,4.4,12.5,4.2,12,4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1,0.1-1.4,0.2C8.5,4.3,7.9,4.7,7.5,5.3z M11.3,5.7v1.6h1.6v0.5v0.1v0.6h0h-0.1h-1.4v1.6h-0.4h-0.2h-0.6v0V8.5H8.5V7.3h1.6V5.7H11.3z\"/></g></svg>',\n    delete_row: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 13.83\"><g><path d=\"M4.7,18.46l.12.08H19.73l.12-.08a.58.58,0,0,0,.22-.22l.08-.12,0-7.69-.08-.11a.77.77,0,0,0-.18-.18l-.11-.08-2.31,0-.08.28-.1.29a1.58,1.58,0,0,1-.12.29l-.14.34s0,0,.18,0H18.9v6H5.64v-6H7.35c.14,0,.2,0,.18,0l-.14-.34a2.85,2.85,0,0,1-.12-.29l-.1-.29-.07-.27-2.31,0-.11.08a.77.77,0,0,0-.18.18l-.08.11,0,7.69.08.12a.47.47,0,0,0,.09.12l.13.09ZM12.11,13a4,4,0,0,0,1.46-.21,4.51,4.51,0,0,0,1.31-.71A4,4,0,0,0,16.26,10a4.32,4.32,0,0,0-.08-2.54,4.34,4.34,0,0,0-1-1.52,4.15,4.15,0,0,0-1.54-1,4.34,4.34,0,0,0-1.35-.22A4.07,4.07,0,0,0,11,4.93,3.94,3.94,0,0,0,9.24,6.07,3.92,3.92,0,0,0,8.15,8.88a3.91,3.91,0,0,0,.12.95A4.16,4.16,0,0,0,12.11,13Zm2.35-4.14v.58H10.09V8.27h4.37v.58Z\" transform=\"translate(-4.4 -4.71)\"/></g></svg>',\n    delete_column: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 13.81 15.74\"><g><path d=\"M5.66,19.42l.12.08,7.69,0,.11-.08a.77.77,0,0,0,.18-.18l.08-.11,0-2.32-.15,0-.45-.15-.42-.18-.17-.07a1,1,0,0,0,0,.27v1.63h-6V5h6V6.62a.9.9,0,0,0,0,.26l.17-.07.42-.17a3.91,3.91,0,0,1,.45-.15l.15,0,0-2.32L13.75,4a.77.77,0,0,0-.18-.18l-.11-.08H5.79l-.13.07a.63.63,0,0,0-.21.22l-.08.12V19.08l.08.12a.47.47,0,0,0,.09.12.35.35,0,0,0,.12.1Zm9-3.67a4.16,4.16,0,0,0,2.36-.51,4.08,4.08,0,0,0,1.67-1.72,4,4,0,0,0,.35-.91,3.79,3.79,0,0,0,.1-1,4.71,4.71,0,0,0-.11-1,5,5,0,0,0-.3-.87,4.25,4.25,0,0,0-1-1.25,4.49,4.49,0,0,0-1.34-.81A4.26,4.26,0,0,0,15,7.48a3.88,3.88,0,0,0-1.41.25A4.32,4.32,0,0,0,11.86,9,4,4,0,0,0,11,10.94a4.4,4.4,0,0,0-.05.68,4.5,4.5,0,0,0,.05.68,3.93,3.93,0,0,0,.61,1.57,4.22,4.22,0,0,0,1.18,1.2,4.59,4.59,0,0,0,.48.27c.2.1.37.17.5.22a2.44,2.44,0,0,0,.45.12,4.61,4.61,0,0,0,.5.07Zm2.54-4.12v.58H12.87V11h4.37v.59Z\" transform=\"translate(-5.37 -3.76)\"/></g></svg>',\n    fixed_column_width: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6,5H18A1,1 0 0,1 19,6A1,1 0 0,1 18,7H6A1,1 0 0,1 5,6A1,1 0 0,1 6,5M21,2V4H3V2H21M15,8H17V22H15V8M7,8H9V22H7V8M11,8H13V22H11V8Z\" /></svg>',\n    rotate_left: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M0.5,10.2c0,0.1,0,0.2,0,0.3v0.2l0,0c0.1,0.3,0.3,0.6,0.4,0.9l0,0C1,11.8,1.3,12,1.5,11.9h0.1h0.2h0.1c0.1-0.1,0.3-0.3,0.4-0.5v-0.2c0-0.1,0-0.2-0.1-0.3l0,0c-0.2-0.2-0.3-0.4-0.3-0.7l0,0C1.8,10,1.7,9.9,1.5,9.8c-0.1,0-0.2,0-0.3,0H0.9C0.7,9.9,0.6,10,0.5,10.2L0.5,10.2z\"/><path d=\"M2.2,11.5L2.2,11.5L2.2,11.5z\"/><path d=\"M5.9,3.6L5.9,3.6L5.9,3.6z\"/><path d=\"M0.1,7.9c0,0.3,0,0.6,0,0.9l0,0l0,0l0,0l0,0c0,0.2,0.1,0.3,0.2,0.4l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0l0,0c0.2,0,0.4-0.1,0.5-0.3l0,0c0-0.1,0.1-0.3,0.1-0.4V8.6l0,0c0-0.2,0-0.5,0-0.7l0,0c0-0.2-0.1-0.4-0.2-0.5C1.1,7.3,0.9,7.2,0.7,7.2S0.3,7.3,0.2,7.4C0.1,7.5,0,7.7,0.1,7.9z\"/><path d=\"M1.9,12.7L1.9,12.7c0,0.2,0,0.4,0.2,0.5l0,0l0.2,0.3l0,0c0.2,0.1,0.3,0.2,0.5,0.4l0,0l0,0l0,0l0,0C2.9,14,3,14.1,3.2,14.1s0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5v-0.1c0-0.2-0.1-0.4-0.2-0.5l0,0l-0.4-0.4l-0.2-0.2l0,0C3,12.1,2.8,12,2.6,12l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0C2,12.3,1.9,12.5,1.9,12.7z\"/><path d=\"M6.6,15c0,0.2,0.1,0.4,0.2,0.5c0.1,0.1,0.2,0.2,0.4,0.3l0,0c0.3,0,0.5,0,0.7,0h0.3l0,0c0.2,0,0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5l0,0l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0H7.9c-0.1,0-0.3,0-0.5,0l0,0H7.3c-0.2-0.1-0.3,0-0.5,0.1l0,0C6.7,14.6,6.6,14.8,6.6,15L6.6,15L6.6,15L6.6,15z\"/><path d=\"M4.2,7.4C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.1,0.1,0.3,0.2,0.5,0.2s0.3-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0C11.5,7.3,11,6.7,10,5.8l0,0L8.4,4.2l0,0C8.3,4.1,8.1,4,7.9,4S7.5,4.1,7.4,4.2L4.2,7.4L4.2,7.4z M6.8,9L5.7,7.9l2.2-2.2l2.3,2.2l-2.3,2.2C7.7,9.9,7.3,9.5,6.8,9L6.8,9z\"/><path d=\"M4.1,14.1C4,14.2,4,14.3,4,14.4v0.2l0,0c0.1,0.1,0.2,0.3,0.4,0.4l0,0c0.3,0.1,0.6,0.2,0.9,0.4h0.1h0.1l0,0c0.2,0,0.3-0.1,0.5-0.1l0,0c0.2-0.1,0.3-0.3,0.3-0.4l0,0l0,0l0,0l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3l0,0C6.1,14.2,6,14.1,5.8,14l0,0c-0.3-0.1-0.5-0.2-0.8-0.2l0,0c-0.1-0.1-0.2-0.1-0.3-0.1H4.5C4.3,13.7,4.2,13.9,4.1,14.1z\"/><path d=\"M9.3,14.4c0,0.1-0.1,0.3,0,0.4V15l0,0c0,0.1,0.1,0.3,0.5,0.4c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1l0,0c0.3-0.1,0.6-0.2,0.9-0.3l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0.1-0.3c0-0.1-0.1-0.2-0.1-0.3l0,0c-0.1-0.2-0.2-0.3-0.4-0.4l0,0h-0.3c-0.1,0-0.2,0-0.3,0l0,0c-0.2,0.1-0.5,0.2-0.8,0.3l0,0C9.5,14.1,9.4,14.2,9.3,14.4L9.3,14.4z\"/><path d=\"M11.4,14.7L11.4,14.7L11.4,14.7z\"/><path d=\"M9.5,15.3L9.5,15.3L9.5,15.3z\"/><path d=\"M15.9,7.9c0-1-0.2-2-0.6-3l0,0c-0.4-1-1-1.9-1.7-2.6C12.8,1.6,12,1,11,0.6l0,0C10.1,0.2,9,0,8,0C7.3,0,6.5,0.1,5.8,0.3l0,0C5.2,0.5,4.6,0.8,4,1.1L3.1,0.2l0,0C2.9,0.1,2.8,0,2.6,0H2.4l0,0C2.2,0,2,0.2,1.9,0.4l0,0L0.1,4.9l0,0C0,5,0,5.1,0,5.2c0,0.2,0.1,0.4,0.2,0.5l0,0c0.2,0.1,0.3,0.2,0.5,0.2h0.1H1l0,0l4.7-1.8l0,0C5.9,4,6.1,3.8,6.1,3.6V3.4C6.1,3.2,6,3,5.9,2.9l0,0L5.1,2.1c0.4-0.2,0.8-0.4,1.3-0.5c0.5-0.1,1.1-0.2,1.7-0.2c0.9,0,1.7,0.2,2.5,0.5l0,0c0.8,0.3,1.5,0.8,2.1,1.4c0.6,0.6,1.1,1.3,1.4,2.1l0,0c0.3,0.8,0.5,1.6,0.5,2.5s-0.2,1.7-0.5,2.5l0,0c-0.3,0.8-0.8,1.5-1.4,2.1c-0.2,0.2-0.4,0.3-0.6,0.5l0,0c-0.2,0.1-0.3,0.3-0.3,0.5v0.1c0,0.1,0,0.3,0.1,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0c0.1,0,0.3-0.1,0.4-0.2l0,0l0,0l0,0l0,0c0.2-0.2,0.5-0.4,0.7-0.6l0,0l0,0l0,0l0,0c0.7-0.8,1.3-1.6,1.7-2.6C15.6,10,15.8,9,15.9,7.9z M1.9,4C2,3.8,2.1,3.5,2.3,3.1l0,0L2.7,2l1.2,1.2L1.9,4z\"/><path d=\"M6.8,15.5L6.8,15.5L6.8,15.5z\"/></g></svg>',\n    rotate_right: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M9.9,15.3L9.9,15.3L9.9,15.3z\"/><path d=\"M6.9,15.1L6.9,15.1c0,0.1,0.1,0.3,0.2,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0h0.3c0.2,0,0.4,0,0.7,0l0,0c0.2-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.2-0.4V15c0-0.2-0.1-0.4-0.2-0.4c-0.2-0.1-0.3-0.2-0.5-0.2H8.4l0,0c-0.1,0-0.3,0-0.5,0H7.6l0,0c-0.2,0-0.4,0.1-0.5,0.2C7,14.7,6.9,14.9,6.9,15.1z\"/><path d=\"M6.5,14.4L6.5,14.4L6.5,14.4z\"/><path d=\"M5.8,5.8L5.8,5.8c-1,0.9-1.5,1.5-1.7,1.6l0,0C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.2,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0L8.4,4.2C8.3,4.1,8.1,4,7.9,4C7.7,4,7.5,4.1,7.4,4.2l0,0L5.8,5.8z M5.6,7.9l2.3-2.2l2.2,2.2L9,9l0,0l0,0l0,0l0,0c-0.5,0.6-0.9,0.9-1.1,1.1L5.6,7.9z\"/><path d=\"M9,15.5L9,15.5L9,15.5z\"/><path d=\"M9.6,14.7v0.2l0,0l0,0l0,0l0,0c0.1,0.2,0.1,0.3,0.3,0.3c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1h0.1c0.3-0.1,0.6-0.3,0.9-0.4l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0,0v-0.2c0-0.1,0-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4H11c-0.1,0-0.2,0.1-0.3,0.1l0,0c-0.2,0.1-0.4,0.2-0.7,0.3l0,0l0,0c-0.1,0.1-0.3,0.2-0.4,0.4C9.6,14.5,9.6,14.6,9.6,14.7z\"/><path d=\"M9,14.5L9,14.5L9,14.5z\"/><path d=\"M9.6,14.4L9.6,14.4L9.6,14.4z\"/><path d=\"M11.7,14L11.7,14L11.7,14z\"/><path d=\"M15.6,7.4L15.6,7.4L15.6,7.4z\"/><path d=\"M15,9.4c0.2,0,0.4,0,0.6-0.2l0,0c0.1-0.1,0.2-0.2,0.2-0.4l0,0l0,0l0,0l0,0c0-0.3,0-0.6,0-0.9c0-0.2-0.1-0.4-0.2-0.5c-0.1-0.1-0.3-0.2-0.5-0.2s-0.4,0.1-0.5,0.2c-0.1,0.1-0.2,0.3-0.2,0.5l0,0c0,0.2,0,0.4,0,0.7l0,0v0.1c0,0.1,0,0.3,0.1,0.4l0,0C14.6,9.3,14.8,9.4,15,9.4L15,9.4L15,9.4z\"/><path d=\"M14,12h0.1h0.2h0.1c0.2,0,0.5-0.2,0.6-0.4l0,0c0.2-0.3,0.3-0.6,0.4-0.9l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4h-0.3c-0.1,0-0.2,0-0.3,0C14.2,9.9,14,10,14,10.3l0,0c-0.1,0.2-0.2,0.5-0.3,0.7l0,0c-0.1,0.1-0.1,0.2-0.1,0.3v0.2l0,0l0,0C13.6,11.6,13.8,11.8,14,12z\"/><path d=\"M14.6,7.4L14.6,7.4L14.6,7.4z\"/><path d=\"M4.4,14.2c-0.1,0.1-0.1,0.2-0.1,0.3l0.1,0.2c0,0.2,0.2,0.3,0.3,0.4l0,0c0.3,0.1,0.6,0.3,1.1,0.4l0,0h0.1l0,0c0.1,0,0.2-0.1,0.4-0.2c0.1,0,0.2-0.2,0.3-0.3l0,0v-0.2c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.4-0.3l0,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-0.1,0-0.2,0-0.3,0H4.7l0,0C4.6,13.9,4.4,14,4.4,14.2L4.4,14.2z\"/><path d=\"M11.9,13.3c0,0.2,0.1,0.4,0.2,0.6c0.1,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l0,0l0,0l0,0c0.1-0.1,0.3-0.3,0.4-0.4l0,0l0.2-0.3l0,0c0.1-0.2,0.2-0.3,0.2-0.5l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.2,0.2l-0.4,0.4l0,0C12,13,11.9,13.1,11.9,13.3L11.9,13.3z\"/><path d=\"M12.1,13.8L12.1,13.8L12.1,13.8z\"/><path d=\"M11.9,13.3L11.9,13.3L11.9,13.3z\"/><path d=\"M15.9,5.2c0-0.1-0.1-0.2-0.1-0.3l0,0L14,0.4l0,0C13.9,0.2,13.7,0,13.5,0l0,0l0,0h-0.2c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.9,0.9c-0.5-0.3-1.1-0.6-1.8-0.8l0,0C9.4,0.1,8.7,0,7.9,0c-1,0-2,0.2-3,0.6S3,1.6,2.3,2.3C1.6,3.1,1,3.9,0.6,4.9l0,0C0.2,5.8,0,6.8,0,7.9c0,1,0.2,2,0.6,3s0.9,1.8,1.7,2.6l0,0l0,0l0,0l0,0c0.2,0.2,0.5,0.4,0.7,0.6l0,0l0,0l0,0l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0c0.2,0,0.4-0.1,0.6-0.3l0,0c0.1-0.1,0.1-0.3,0.1-0.4v-0.1l0,0C4.1,13.3,4,13.1,3.9,13l0,0c-0.2-0.1-0.4-0.3-0.6-0.5c-0.6-0.6-1.1-1.3-1.4-2.1l0,0C1.6,9.6,1.4,8.8,1.4,7.9s0.2-1.7,0.5-2.5l0,0c0.3-0.8,0.8-1.5,1.4-2.1c0.6-0.6,1.3-1.1,2.1-1.4l0,0C6.2,1.6,7,1.4,7.9,1.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.5l-0.8,0.8l0,0C10,3.1,9.9,3.2,9.9,3.4v0.2l0,0l0,0c0,0.2,0.2,0.4,0.4,0.5l0,0l4.5,1.8l0,0H15h0.1c0.2,0,0.4-0.1,0.5-0.2l0,0C15.7,5.6,15.8,5.4,15.9,5.2z M11.8,3.2L13,2l0.4,1.1l0,0c0.2,0.4,0.3,0.7,0.4,0.9L11.8,3.2z\"/></g></svg>',\n    mirror_horizontal: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14.75 15.74\"><g><path d=\"M13.75,3.76l5.9,15.74h-5.9V3.76ZM4.9,19.5,10.8,3.76V19.5H4.9Z\" transform=\"translate(-4.9 -3.76)\"/></g></svg>',\n    mirror_vertical: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.75\"><g><path d=\"M20.15,13.1,4.41,19V13.1H20.15ZM4.41,4.25l15.74,5.9H4.41V4.25Z\" transform=\"translate(-4.41 -4.25)\"/></g></svg>',\n    checked: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 12.1\"><g><path d=\"M4.59,12.23l.12.18L9.43,17.5a.58.58,0,0,0,.84,0L20,7.45h0a.58.58,0,0,0,0-.84l-.85-.85a.58.58,0,0,0-.84,0H18.2l-8.12,8.41a.29.29,0,0,1-.42,0l-3.4-3.63a.58.58,0,0,0-.84,0l-.85.85a.6.6,0,0,0-.14.21.51.51,0,0,0,0,.44c.05.06.1.13.16.19Z\" transform=\"translate(-4.38 -5.58)\"/></g></svg>',\n    line_break: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19,6a1,1,0,0,0-1,1v4a1,1,0,0,1-1,1H7.41l1.3-1.29A1,1,0,0,0,7.29,9.29l-3,3a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l3,3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L7.41,14H17a3,3,0,0,0,3-3V7A1,1,0,0,0,19,6Z\"/></svg>',\n    audio: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z\" /></svg>',\n    image_gallery: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"30 30 150 150\"><g><path d=\"M152.775,120.548V51.651c0-12.271-9.984-22.254-22.254-22.254H43.727c-12.271,0-22.254,9.983-22.254,22.254v68.896c0,12.27,9.983,22.254,22.254,22.254h86.795C142.791,142.802,152.775,132.817,152.775,120.548z M36.394,51.651c0-4.042,3.291-7.333,7.333-7.333h86.795c4.042,0,7.332,3.291,7.332,7.333v23.917l-14.938-17.767c-1.41-1.678-3.487-2.649-5.68-2.658h-0.029c-2.184,0-4.255,0.954-5.674,2.613L76.709,98.519l-9.096-9.398c-1.427-1.474-3.392-2.291-5.448-2.273c-2.052,0.025-4.004,0.893-5.396,2.4L36.394,111.32V51.651z M41.684,127.585l20.697-22.416l9.312,9.622c1.461,1.511,3.489,2.334,5.592,2.27c2.101-0.066,4.075-1.013,5.44-2.612l34.436-40.308l20.693,24.613v21.794c0,4.042-3.29,7.332-7.332,7.332H43.727C43.018,127.88,42.334,127.775,41.684,127.585z M182.616,152.5V75.657c0-4.12-3.34-7.46-7.461-7.46c-4.119,0-7.46,3.34-7.46,7.46V152.5c0,4.112-3.347,7.46-7.461,7.46h-94c-4.119,0-7.46,3.339-7.46,7.459c0,4.123,3.341,7.462,7.46,7.462h94C172.576,174.881,182.616,164.841,182.616,152.5z\"/></g></svg>',\n    bookmark: '<svg viewBox=\"0 0 24 24\"><path d=\"M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z\" /></svg>',\n    download: '<svg viewBox=\"0 0 24 24\"><path d=\"M2 12H4V17H20V12H22V17C22 18.11 21.11 19 20 19H4C2.9 19 2 18.11 2 17V12M12 15L17.55 9.54L16.13 8.13L13 11.25V2H11V11.25L7.88 8.13L6.46 9.55L12 15Z\" /></svg>',\n    dir_ltr: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M9 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2H9C6.79 2 5 3.79 5 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zm0 12v3H5v2h12v3l4-4-4-4z\"/></svg>',\n    dir_rtl: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M10 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zM8 14l-4 4 4 4v-3h12v-2H8v-3z\"/></svg>',\n    // Error\n    alert_outline: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z\" /></svg>',\n    // More icons\n    more_text: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 180 180\"><g><path d=\"M49.711,142.188h49.027c2.328,0.002,4.394,1.492,5.129,3.699l9.742,29.252c0.363,1.092,1.385,1.828,2.537,1.83l15.883,0.01c0.859,0,1.667-0.412,2.17-1.109s0.641-1.594,0.37-2.41l-16.625-50.045L86.503,28.953c-0.36-1.097-1.383-1.839-2.537-1.842H64.532c-1.153-0.001-2.178,0.736-2.542,1.831L13.847,173.457c-0.271,0.816-0.135,1.713,0.369,2.412c0.503,0.697,1.311,1.109,2.171,1.109h15.872c1.151,0,2.173-0.736,2.537-1.828l9.793-29.287C45.325,143.66,47.39,142.18,49.711,142.188L49.711,142.188z M53.493,119.098l15.607-46.9c0.744-2.196,2.806-3.674,5.125-3.674s4.381,1.478,5.125,3.674l15.607,46.904c0.537,1.621,0.263,3.402-0.736,4.789c-1.018,1.408-2.649,2.24-4.386,2.24H58.615c-1.736,0-3.368-0.832-4.386-2.24C53.23,122.504,52.956,120.721,53.493,119.098L53.493,119.098z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z\"/></g></svg>',\n    more_paragraph: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 180 180\"><g><path d=\"M128.39,28.499H63.493c-25.558,0-46.354,20.796-46.354,46.354c0,25.559,20.796,46.353,46.354,46.353h9.271v55.625h18.542V47.04h9.271V176.83h18.543V47.04h9.271V28.499z M72.764,102.664h-9.271c-15.337,0-27.813-12.475-27.813-27.812c0-15.336,12.476-27.813,27.813-27.813h9.271V102.664z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z\"/></g></svg>',\n    more_plus: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"35 30 140 140\"><g><path d=\"M137.215,102.045c0,3.498-2.835,6.332-6.333,6.332H24.549c-3.498,0-6.334-2.834-6.334-6.332l0,0c0-3.498,2.836-6.333,6.334-6.333h106.333C134.38,95.711,137.215,98.547,137.215,102.045L137.215,102.045z M77.715,161.545c-3.498,0-6.333-2.836-6.333-6.334V48.878c0-3.498,2.836-6.333,6.333-6.333l0,0c3.498,0,6.334,2.835,6.334,6.333v106.333C84.049,158.709,81.213,161.545,77.715,161.545L77.715,161.545z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.632,190.465,66.177,190.465,63.32L190.465,63.32z M190.465,101.993c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.888,1.026,5.353,3.056,7.396c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.993L190.465,101.993z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z\"/></g></svg>',\n    more_horizontal: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 3.58\"><g><path d=\"M4.64,10.73a1.84,1.84,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0A1.79,1.79,0,0,1,8,11.63a1.84,1.84,0,0,1-.25.9,1.69,1.69,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2.08,2.08,0,0,1,4.64,10.73Zm6.09,0a1.84,1.84,0,0,1,.65-.65,1.78,1.78,0,0,1,2.67,1.55,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.76,1.76,0,0,1-1.79,0,1.79,1.79,0,0,1-.64-2.44Zm6.08,0a1.69,1.69,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0,1.79,1.79,0,0,1,.9,1.54,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2,2,0,0,1,16.81,10.73Z\" transform=\"translate(-4.39 -9.84)\"/></g></svg>',\n    more_vertical: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 3.94 15.75\"><g><path d=\"M12.28,7.69a1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,2,2,0,0,1,1.39-.58,1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58Zm0,2a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39A1.92,1.92,0,0,1,13.67,13a2,2,0,0,1-1.39.58A1.92,1.92,0,0,1,10.89,13a2,2,0,0,1-.58-1.39,2,2,0,0,1,2-2Zm0,5.9a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,1.94,1.94,0,0,1,1.39-.58Z\" transform=\"translate(-10.31 -3.75)\"/></g></svg>',\n    // Not currently used\n    attachment: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8.38 15.68\"><g><path d=\"M15.23,6h1v9.78a3.88,3.88,0,0,1-1.31,2.45,4,4,0,0,1-6.57-2.45V7A3,3,0,0,1,9.2,4.89a3,3,0,0,1,5,2.09v8.31a1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39V8h1v7.32a1,1,0,0,0,.29.69,1,1,0,0,0,.69.28A.9.9,0,0,0,13,16a1,1,0,0,0,.29-.69V7a1.92,1.92,0,0,0-.58-1.39A2,2,0,0,0,11.27,5a1.92,1.92,0,0,0-1.39.58A2,2,0,0,0,9.33,7v8.31a3,3,0,1,0,5.9,0V6Z\" transform=\"translate(-8.08 -3.78)\"/></g></svg>',\n    map: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.7 15.62\"><g><path d=\"M12.05,12.42a2.93,2.93,0,1,1,2.07-5A2.88,2.88,0,0,1,15,9.49a3,3,0,0,1-.86,2.07,2.89,2.89,0,0,1-2.07.86Zm0-5.36a2.43,2.43,0,0,0-1.72,4.16,2.48,2.48,0,0,0,1.72.72,2.44,2.44,0,0,0,0-4.88Zm0-3.3A5.84,5.84,0,0,1,17.9,9.62a9.94,9.94,0,0,1-1.73,5A33.59,33.59,0,0,1,12.84,19a1.52,1.52,0,0,1-.23.2,1,1,0,0,1-.55.2h0a1,1,0,0,1-.55-.2,1.52,1.52,0,0,1-.23-.2,33.59,33.59,0,0,1-3.33-4.32,9.93,9.93,0,0,1-1.72-5,5.84,5.84,0,0,1,5.85-5.86ZM12,18.34l.08.05.06-.06a35.58,35.58,0,0,0,3.06-3.93,9.35,9.35,0,0,0,1.74-4.77,4.88,4.88,0,0,0-4.88-4.88A4.79,4.79,0,0,0,8.6,6.17,4.84,4.84,0,0,0,7.17,9.62,9.29,9.29,0,0,0,8.91,14.4,36,36,0,0,0,12,18.34Z\" transform=\"translate(-6.2 -3.76)\"/></g></svg>',\n    magic_stick: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 15.75\"><g><path d=\"M19.86,19.21a1,1,0,0,0,.28-.68,1,1,0,0,0-.28-.7L13,10.93a1,1,0,0,0-.7-.28,1,1,0,0,0-.68,1.65l6.9,6.9a1,1,0,0,0,.69.29.93.93,0,0,0,.69-.28ZM9.19,8.55a3,3,0,0,0,1.68,0,14.12,14.12,0,0,0,1.41-.32A11.26,11.26,0,0,0,10.8,7.06c-.56-.36-.86-.56-.91-.58S10,5.91,10,5.11s0-1.26-.15-1.37a4.35,4.35,0,0,0-1.19.71c-.53.4-.81.62-.87.68a9,9,0,0,0-2-.6,6.84,6.84,0,0,0-.76-.09s0,.27.08.77a8.6,8.6,0,0,0,.61,2q-.09.09-.69.87a3.59,3.59,0,0,0-.68,1.17c.12.17.57.23,1.36.15S7,9.26,7.15,9.23s.21.36.57.91a10.49,10.49,0,0,0,1.14,1.48c0-.1.14-.57.31-1.4a3,3,0,0,0,0-1.67Z\" transform=\"translate(-4.41 -3.74)\"/></g></svg>',\n    empty_file: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12.78 15.75\"><g><path d=\"M14.73,3.76,18.67,7.7v9.84a2,2,0,0,1-2,2H7.84a1.89,1.89,0,0,1-1.38-.58,2,2,0,0,1-.57-1.39V5.73a1.93,1.93,0,0,1,.57-1.38,2,2,0,0,1,1.38-.58h6.62l.26,0v0Zm2.95,4.92h-2a1.93,1.93,0,0,1-1.38-.57,2,2,0,0,1-.58-1.4V6.17c0-.36,0-.84,0-1.43H7.85a1,1,0,0,0-.7.29,1,1,0,0,0-.29.7V17.54a1,1,0,0,0,.29.69,1,1,0,0,0,.69.29h8.85a1,1,0,0,0,.71-.29.92.92,0,0,0,.28-.69Zm0-1L14.73,4.74v2A1,1,0,0,0,15,7.4a1,1,0,0,0,.69.29Z\" transform=\"translate(-5.89 -3.76)\"/></g></svg>'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/assets/defaultIcons.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ckb.js":
/*!************************************************!*\
  !*** ./node_modules/suneditor/src/lang/ckb.js ***!
  \************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ckb\",\n        toolbar: {\n            default: \"بنه‌ڕه‌ت\",\n            save: \"پاشه‌كه‌وتكردن\",\n            font: \"فۆنت\",\n            formats: \"Formats\",\n            fontSize: \"قه‌باره‌\",\n            bold: \"تۆخكردن\",\n            underline: \"هێڵ به‌ژێردا بێنه‌\",\n            italic: \"لار\",\n            strike: \"هێڵ به‌ناودا بێنه‌\",\n            subscript: \"ژێرسکریپت\",\n            superscript: \"سەرنووس\",\n            removeFormat: \"لابردنی فۆرمات\",\n            fontColor: \"ره‌نگی فۆنت\",\n            hiliteColor: \"ره‌نگی دیاركراو\",\n            indent: \"بۆشایی بەجێهێشتن\",\n            outdent: \"لابردنی بۆشایی\",\n            align: \"ئاراسته‌\",\n            alignLeft: \"لای چه‌پ\",\n            alignRight: \"لای راست\",\n            alignCenter: \"ناوه‌ند\",\n            alignJustify: \"به‌رێكی دابه‌ش بكه‌\",\n            list: \"لیست\",\n            orderList: \"لیستی ریزكراو\",\n            unorderList: \"لیستی ریزنه‌كراو\",\n            horizontalRule: \"هێڵی ئاسۆیی\",\n            hr_solid: \"پته‌و\",\n            hr_dotted: \"نوكته‌ نوكته‌\",\n            hr_dashed: \"داش داش\",\n            table: \"خشته‌\",\n            link: \"به‌سته‌ر\",\n            math: \"بیركاری\",\n            image: \"وێنه‌\",\n            video: \"ڤیدیۆ\",\n            audio: \"ده‌نگ\",\n            fullScreen: \"پڕ به‌ شاشه‌\",\n            showBlocks: \"بڵۆك نیشانبده\",\n            codeView: \"بینینی كۆده‌كان\",\n            undo: \"وەک خۆی لێ بکەوە\",\n            redo: \"هەڵگەڕاندنەوە\",\n            preview: \"پێشبینین\",\n            print: \"پرینت\",\n            tag_p: \"په‌ره‌گراف\",\n            tag_div: \"ی ئاسایی (DIV)\",\n            tag_h: \"سەرپەڕە\",\n            tag_blockquote: \"ده‌ق\",\n            tag_pre: \"كۆد\",\n            template: \"قاڵب\",\n            lineHeight: \"بڵندی دێر\",\n            paragraphStyle: \"ستایلی په‌ره‌گراف\",\n            textStyle: \"ستایلی نوسین\",\n            imageGallery: \"گاله‌ری وێنه‌كان\",\n            dir_ltr: \"من اليسار إلى اليمين\",\n            dir_rtl: \"من اليمين الى اليسار\",\n            mention: \"تنويه ب\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"به‌سته‌ر دابنێ\",\n                url: \"به‌سته‌ر\",\n                text: \"تێكستی به‌سته‌ر\",\n                newWindowCheck: \"له‌ په‌نجه‌ره‌یه‌كی نوێ بكه‌ره‌وه‌\",\n                downloadLinkCheck: \"رابط التحميل\",\n                bookmark: \"المرجعية\"\n            },\n            mathBox: {\n                title: \"بیركاری\",\n                inputLabel: \"نیشانه‌كانی بیركاری\",\n                fontSizeLabel: \"قه‌باره‌ی فۆنت\",\n                previewLabel: \"پێشبینین\"\n            },\n            imageBox: {\n                title: \"وێنه‌یه‌ك دابنێ\",\n                file: \"فایلێك هه‌ڵبژێره‌\",\n                url: \"به‌سته‌ری وێنه‌\",\n                altText: \"نوسینی جێگره‌وه‌\"\n            },\n            videoBox: {\n                title: \"ڤیدیۆیه‌ك دابنێ\",\n                file: \"فایلێك هه‌ڵبژێره‌\",\n                url: \"YouTube/Vimeo به‌سته‌ری له‌ناودانان وه‌ك \"\n            },\n            audioBox: {\n                title: \"ده‌نگێك دابنێ\",\n                file: \"فایلێك هه‌ڵبژێره‌\",\n                url: \"به‌سته‌ری ده‌نگ\"\n            },\n            browser: {\n                tags: \"تاگه‌كان\",\n                search: \"گه‌ران\"\n            },\n            caption: \"پێناسه‌یه‌ك دابنێ\",\n            close: \"داخستن\",\n            submitButton: \"ناردن\",\n            revertButton: \"بیگەڕێنەوە سەر باری سەرەتایی\",\n            proportion: \"رێژه‌كان وه‌ك خۆی بهێڵه‌وه‌\",\n            basic: \"سه‌ره‌تایی\",\n            left: \"چه‌پ\",\n            right: \"راست\",\n            center: \"ناوەڕاست\",\n            width: \"پانی\",\n            height: \"به‌رزی\",\n            size: \"قه‌باره‌\",\n            ratio: \"رێژه‌\"\n        },\n        controller: {\n            edit: \"دەسکاریکردن\",\n            unlink: \"سڕینەوەی بەستەر\",\n            remove: \"سڕینه‌وه‌\",\n            insertRowAbove: \"ریزك له‌ سه‌ره‌وه‌ زیادبكه‌\",\n            insertRowBelow: \"ریزێك له‌ خواره‌وه‌ زیادبكه‌\",\n            deleteRow: \"ریز بسره‌وه‌\",\n            insertColumnBefore: \"ستونێك له‌ پێشه‌وه‌ زیادبكه‌\",\n            insertColumnAfter: \"ستونێك له‌ دواوه‌ زیادبكه‌\",\n            deleteColumn: \"ستونێك بسره‌وه‌\",\n            fixedColumnWidth: \"پانی ستون نه‌گۆربكه‌\",\n            resize100: \"قه‌باره‌ بگۆره‌ بۆ ١٠٠%\",\n            resize75: \"قه‌باره‌ بگۆره‌ بۆ ٧٥%\",\n            resize50: \"قه‌باره‌ بگۆره‌ بۆ ٥٠%\",\n            resize25: \"قه‌باره‌ بگۆره‌ بۆ ٢٥%\",\n            autoSize: \"قه‌باره‌ی خۆكارانه‌\",\n            mirrorHorizontal: \"هه‌ڵگه‌رێنه‌وه‌ به‌ده‌وری ته‌وه‌ره‌ی ئاسۆیی\",\n            mirrorVertical: \"هه‌ڵگه‌رێنه‌وه‌ به‌ده‌وری ته‌وه‌ره‌ی ستونی\",\n            rotateLeft: \"بسوڕێنه‌ به‌لای چه‌پدا\",\n            rotateRight: \"بسورێنه‌ به‌لای راستدا\",\n            maxSize: \"گه‌وره‌ترین قه‌باره‌\",\n            minSize: \"بچوكترین قه‌باره‌\",\n            tableHeader: \"سه‌ردێری خشته‌ك\",\n            mergeCells: \"خانه‌كان تێكه‌ڵبكه‌\",\n            splitCells: \"خانه‌كان لێك جیابكه‌وه‌\",\n            HorizontalSplit: \"جیاكردنه‌وه‌ی ئاسۆیی\",\n            VerticalSplit: \"جیاكردنه‌وه‌ی ستونی\"\n        },\n        menu: {\n            spaced: \"بۆشای هه‌بێت\",\n            bordered: \"لێواری هه‌بێت\",\n            neon: \"نیۆن\",\n            translucent: \"كه‌مێك وه‌ك شووشه‌\",\n            shadow: \"سێبه‌ر\",\n            code: \"كۆد\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ckb\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ckb.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/cs.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/cs.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"cs\",\n        toolbar: {\n            default: \"V\\xfdchoz\\xed\",\n            save: \"Uložit\",\n            font: \"P\\xedsmo\",\n            formats: \"Form\\xe1ty\",\n            fontSize: \"Velikost\",\n            bold: \"Tučn\\xe9\",\n            underline: \"Podtržen\\xed\",\n            italic: \"Kurz\\xedva\",\n            strike: \"Přeškrtnut\\xed\",\n            subscript: \"Doln\\xed index\",\n            superscript: \"Horn\\xed index\",\n            removeFormat: \"Odebrat form\\xe1t\",\n            fontColor: \"Barva p\\xedsma\",\n            hiliteColor: \"Barva zv\\xfdrazněn\\xed\",\n            indent: \"Odsadit\",\n            outdent: \"Předsadit\",\n            align: \"Zarovnat\",\n            alignLeft: \"Zarovnat vlevo\",\n            alignRight: \"Zarovnat vpravo\",\n            alignCenter: \"Zarovnat na střed\",\n            alignJustify: \"Zarovnat do bloku\",\n            list: \"Seznam\",\n            orderList: \"Seřazen\\xfd seznam\",\n            unorderList: \"Neřazen\\xfd seznam\",\n            horizontalRule: \"Vodorovn\\xe1 č\\xe1ra\",\n            hr_solid: \"Nepřerušovan\\xe1\",\n            hr_dotted: \"Tečkovan\\xe1\",\n            hr_dashed: \"Č\\xe1rkovan\\xe1\",\n            table: \"Tabulka\",\n            link: \"Odkaz\",\n            math: \"Matematika\",\n            image: \"Obr\\xe1zek\",\n            video: \"Video\",\n            audio: \"Zvuk\",\n            fullScreen: \"Cel\\xe1 obrazovka\",\n            showBlocks: \"Zobrazit bloky\",\n            codeView: \"Zobrazen\\xed k\\xf3du\",\n            undo: \"Zpět\",\n            redo: \"Opakovat\",\n            preview: \"N\\xe1hled\",\n            print: \"tisk\",\n            tag_p: \"Odstavec\",\n            tag_div: \"Norm\\xe1ln\\xed (DIV)\",\n            tag_h: \"Z\\xe1hlav\\xed\",\n            tag_blockquote: \"Citovat\",\n            tag_pre: \"K\\xf3d\",\n            template: \"Šablona\",\n            lineHeight: \"V\\xfdška ř\\xe1dku\",\n            paragraphStyle: \"Styl odstavce\",\n            textStyle: \"Styl textu\",\n            imageGallery: \"Obr\\xe1zkov\\xe1 galerie\",\n            dir_ltr: \"Zleva doprava\",\n            dir_rtl: \"Zprava doleva\",\n            mention: \"Zm\\xednka\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Vložit odkaz\",\n                url: \"URL pro odkaz\",\n                text: \"Text k zobrazen\\xed\",\n                newWindowCheck: \"Otevř\\xedt v nov\\xe9m okně\",\n                downloadLinkCheck: \"Odkaz ke stažen\\xed\",\n                bookmark: \"Z\\xe1ložka\"\n            },\n            mathBox: {\n                title: \"Matematika\",\n                inputLabel: \"Matematick\\xe1 notace\",\n                fontSizeLabel: \"Velikost p\\xedsma\",\n                previewLabel: \"N\\xe1hled\"\n            },\n            imageBox: {\n                title: \"Vložit obr\\xe1zek\",\n                file: \"Vybrat ze souborů\",\n                url: \"URL obr\\xe1zku\",\n                altText: \"Alternativn\\xed text\"\n            },\n            videoBox: {\n                title: \"Vložit video\",\n                file: \"Vybrat ze souborů\",\n                url: \"URL pro vložen\\xed m\\xe9di\\xed, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Vložit zvuk\",\n                file: \"Vybrat ze souborů\",\n                url: \"Adresa URL zvuku\"\n            },\n            browser: {\n                tags: \"Št\\xedtky\",\n                search: \"Hledat\"\n            },\n            caption: \"Vložit popis\",\n            close: \"Zavř\\xedt\",\n            submitButton: \"Odeslat\",\n            revertButton: \"Vr\\xe1tit zpět\",\n            proportion: \"Omezen\\xed proporc\\xed\",\n            basic: \"Z\\xe1kladn\\xed\",\n            left: \"Vlevo\",\n            right: \"Vpravo\",\n            center: \"Střed\",\n            width: \"Š\\xedřka\",\n            height: \"V\\xfdška\",\n            size: \"Velikost\",\n            ratio: \"Poměr\"\n        },\n        controller: {\n            edit: \"Upravit\",\n            unlink: \"Odpojit\",\n            remove: \"Odebrat\",\n            insertRowAbove: \"Vložit ř\\xe1dek v\\xfdše\",\n            insertRowBelow: \"Vložit ř\\xe1dek n\\xedže\",\n            deleteRow: \"Smazat ř\\xe1dek\",\n            insertColumnBefore: \"Vložit sloupec před\",\n            insertColumnAfter: \"Vložit sloupec za\",\n            deleteColumn: \"Smazat sloupec\",\n            fixedColumnWidth: \"Pevn\\xe1 š\\xedřka sloupce\",\n            resize100: \"Změnit velikost 100%\",\n            resize75: \"Změnit velikost 75%\",\n            resize50: \"Změnit velikost 50%\",\n            resize25: \"Změnit velikost 25%\",\n            autoSize: \"Automatick\\xe1 velikost\",\n            mirrorHorizontal: \"Zrcadlo, horizont\\xe1ln\\xed\",\n            mirrorVertical: \"Zrcadlo, vertik\\xe1ln\\xed\",\n            rotateLeft: \"Otočit doleva\",\n            rotateRight: \"Otočit doprava\",\n            maxSize: \"Max. velikost\",\n            minSize: \"Min. velikost\",\n            tableHeader: \"Z\\xe1hlav\\xed tabulky\",\n            mergeCells: \"Spojit buňky\",\n            splitCells: \"Rozdělit buňky\",\n            HorizontalSplit: \"Vodorovn\\xe9 rozdělen\\xed\",\n            VerticalSplit: \"Svisl\\xe9 rozdělen\\xed\"\n        },\n        menu: {\n            spaced: \"Rozložen\\xe9\",\n            bordered: \"Ohraničen\\xe9\",\n            neon: \"Neon\",\n            translucent: \"Průsvitn\\xe9\",\n            shadow: \"St\\xedn\",\n            code: \"K\\xf3d\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"cs\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/cs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/da.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/da.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * \n * Danish translation by davidkonrad at github or gmail\n *\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"da\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Gem\",\n            font: \"Skrifttype\",\n            formats: \"Format\",\n            fontSize: \"Skriftst\\xf8rrelse\",\n            bold: \"Fed\",\n            underline: \"Understreget\",\n            italic: \"Skr\\xe5skrift\",\n            strike: \"Overstreget\",\n            subscript: \"S\\xe6nket skrift\",\n            superscript: \"H\\xe6vet skrift\",\n            removeFormat: \"Fjern formatering\",\n            fontColor: \"Skriftfarve\",\n            hiliteColor: \"Baggrundsfarve\",\n            indent: \"Ryk ind\",\n            outdent: \"Ryk ud\",\n            align: \"Justering\",\n            alignLeft: \"Venstrejustering\",\n            alignRight: \"H\\xf8jrejustering\",\n            alignCenter: \"Midterjustering\",\n            alignJustify: \"Tilpas margin\",\n            list: \"Lister\",\n            orderList: \"Nummereret liste\",\n            unorderList: \"Uordnet liste\",\n            horizontalRule: \"Horisontal linie\",\n            hr_solid: \"Almindelig\",\n            hr_dotted: \"Punkteret\",\n            hr_dashed: \"Streget\",\n            table: \"Tabel\",\n            link: \"Link\",\n            math: \"Math\",\n            image: \"Billede\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Fuld sk\\xe6rm\",\n            showBlocks: \"Vis blokke\",\n            codeView: \"Vis koder\",\n            undo: \"Undo\",\n            redo: \"Redo\",\n            preview: \"Preview\",\n            print: \"Print\",\n            tag_p: \"Paragraph\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Overskrift\",\n            tag_blockquote: \"Citer\",\n            tag_pre: \"Code\",\n            template: \"Schablone\",\n            lineHeight: \"Linjeh\\xf8jde\",\n            paragraphStyle: \"Afsnitstil\",\n            textStyle: \"Tekststil\",\n            imageGallery: \"Billedgalleri\",\n            dir_ltr: \"Venstre til h\\xf8jre\",\n            dir_rtl: \"H\\xf8jre til venstre\",\n            mention: \"N\\xe6vne\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inds\\xe6t link\",\n                url: \"URL til link\",\n                text: \"Tekst for link\",\n                newWindowCheck: \"\\xc5ben i nyt faneblad\",\n                downloadLinkCheck: \"Download link\",\n                bookmark: \"Bogm\\xe6rke\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Matematisk notation\",\n                fontSizeLabel: \"Skriftst\\xf8rrelse\",\n                previewLabel: \"Preview\"\n            },\n            imageBox: {\n                title: \"Inds\\xe6t billede\",\n                file: \"Inds\\xe6t fra fil\",\n                url: \"Inds\\xe6t fra URL\",\n                altText: \"Alternativ tekst\"\n            },\n            videoBox: {\n                title: \"Inds\\xe6t Video\",\n                file: \"Inds\\xe6t fra fil\",\n                url: \"Indlejr video / YouTube,Vimeo\"\n            },\n            audioBox: {\n                title: \"Inds\\xe6t Audio\",\n                file: \"Inds\\xe6t fra fil\",\n                url: \"Inds\\xe6t fra URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"S\\xf8g\"\n            },\n            caption: \"Inds\\xe6t beskrivelse\",\n            close: \"Luk\",\n            submitButton: \"Gennemf\\xf8r\",\n            revertButton: \"Gendan\",\n            proportion: \"Bevar proportioner\",\n            basic: \"Basis\",\n            left: \"Venstre\",\n            right: \"H\\xf8jre\",\n            center: \"Center\",\n            width: \"Bredde\",\n            height: \"H\\xf8jde\",\n            size: \"St\\xf8rrelse\",\n            ratio: \"Forhold\"\n        },\n        controller: {\n            edit: \"Rediger\",\n            unlink: \"Fjern link\",\n            remove: \"Fjern\",\n            insertRowAbove: \"Inds\\xe6t r\\xe6kke foroven\",\n            insertRowBelow: \"Inds\\xe6t r\\xe6kke nedenfor\",\n            deleteRow: \"Slet r\\xe6kke\",\n            insertColumnBefore: \"Inds\\xe6t kolonne f\\xf8r\",\n            insertColumnAfter: \"Inds\\xe6t kolonne efter\",\n            deleteColumn: \"Slet kolonne\",\n            fixedColumnWidth: \"Fast s\\xf8jlebredde\",\n            resize100: \"Forst\\xf8r 100%\",\n            resize75: \"Forst\\xf8r 75%\",\n            resize50: \"Forst\\xf8r 50%\",\n            resize25: \"Forst\\xf8r 25%\",\n            autoSize: \"Auto st\\xf8rrelse\",\n            mirrorHorizontal: \"Spejling, horisontal\",\n            mirrorVertical: \"Spejling, vertikal\",\n            rotateLeft: \"Roter til venstre\",\n            rotateRight: \"Toter til h\\xf8jre\",\n            maxSize: \"Max st\\xf8rrelse\",\n            minSize: \"Min st\\xf8rrelse\",\n            tableHeader: \"Tabel overskrift\",\n            mergeCells: \"Sammenl\\xe6g celler (merge)\",\n            splitCells: \"Opdel celler\",\n            HorizontalSplit: \"Opdel horisontalt\",\n            VerticalSplit: \"Opdel vertikalt\"\n        },\n        menu: {\n            spaced: \"Brev Afstand\",\n            bordered: \"Afgr\\xe6nsningslinje\",\n            neon: \"Neon\",\n            translucent: \"Gennemsigtig\",\n            shadow: \"Skygge\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"da\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/da.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/de.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/de.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 @Gundolf68\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"de\",\n        toolbar: {\n            default: \"Standard\",\n            save: \"Speichern\",\n            font: \"Schriftart\",\n            formats: \"Format\",\n            fontSize: \"Schriftgr\\xf6\\xdfe\",\n            bold: \"Fett\",\n            underline: \"Unterstrichen\",\n            italic: \"Kursiv\",\n            strike: \"Durchgestrichen\",\n            subscript: \"Tiefgestellt\",\n            superscript: \"Hochgestellt\",\n            removeFormat: \"Format entfernen\",\n            fontColor: \"Schriftfarbe\",\n            hiliteColor: \"Farbe f\\xfcr Hervorhebungen\",\n            indent: \"Einzug vergr\\xf6\\xdfern\",\n            outdent: \"Einzug verkleinern\",\n            align: \"Ausrichtung\",\n            alignLeft: \"Links ausrichten\",\n            alignRight: \"Rechts ausrichten\",\n            alignCenter: \"Zentriert ausrichten\",\n            alignJustify: \"Blocksatz\",\n            list: \"Liste\",\n            orderList: \"Nummerierte Liste\",\n            unorderList: \"Aufz\\xe4hlung\",\n            horizontalRule: \"Horizontale Linie\",\n            hr_solid: \"Strich\",\n            hr_dotted: \"Gepunktet\",\n            hr_dashed: \"Gestrichelt\",\n            table: \"Tabelle\",\n            link: \"Link\",\n            math: \"Mathematik\",\n            image: \"Bild\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Vollbild\",\n            showBlocks: \"Blockformatierungen anzeigen\",\n            codeView: \"Quelltext anzeigen\",\n            undo: \"R\\xfcckg\\xe4ngig\",\n            redo: \"Wiederholen\",\n            preview: \"Vorschau\",\n            print: \"Drucken\",\n            tag_p: \"Absatz\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Header\",\n            tag_blockquote: \"Zitat\",\n            tag_pre: \"Quellcode\",\n            template: \"Vorlage\",\n            lineHeight: \"Zeilenh\\xf6he\",\n            paragraphStyle: \"Absatzstil\",\n            textStyle: \"Textstil\",\n            imageGallery: \"Bildergalerie\",\n            dir_ltr: \"Links nach rechts\",\n            dir_rtl: \"Rechts nach links\",\n            mention: \"Erw\\xe4hnen\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Link einf\\xfcgen\",\n                url: \"Link-URL\",\n                text: \"Link-Text\",\n                newWindowCheck: \"In neuem Fenster anzeigen\",\n                downloadLinkCheck: \"Download-Link\",\n                bookmark: \"Lesezeichen\"\n            },\n            mathBox: {\n                title: \"Mathematik\",\n                inputLabel: \"Mathematische Notation\",\n                fontSizeLabel: \"Schriftgr\\xf6\\xdfe\",\n                previewLabel: \"Vorschau\"\n            },\n            imageBox: {\n                title: \"Bild einf\\xfcgen\",\n                file: \"Datei ausw\\xe4hlen\",\n                url: \"Bild-URL\",\n                altText: \"Alternativer Text\"\n            },\n            videoBox: {\n                title: \"Video einf\\xfcgen\",\n                file: \"Datei ausw\\xe4hlen\",\n                url: \"Video-URL, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Audio einf\\xfcgen\",\n                file: \"Datei ausw\\xe4hlen\",\n                url: \"Audio-URL\"\n            },\n            browser: {\n                tags: \"Stichworte\",\n                search: \"Suche\"\n            },\n            caption: \"Beschreibung eingeben\",\n            close: \"Schlie\\xdfen\",\n            submitButton: \"\\xdcbernehmen\",\n            revertButton: \"R\\xfcckg\\xe4ngig\",\n            proportion: \"Seitenverh\\xe4ltnis beibehalten\",\n            basic: \"Standard\",\n            left: \"Links\",\n            right: \"Rechts\",\n            center: \"Zentriert\",\n            width: \"Breite\",\n            height: \"H\\xf6he\",\n            size: \"Gr\\xf6\\xdfe\",\n            ratio: \"Verh\\xe4ltnis\"\n        },\n        controller: {\n            edit: \"Bearbeiten\",\n            unlink: \"Link entfernen\",\n            remove: \"L\\xf6schen\",\n            insertRowAbove: \"Zeile oberhalb einf\\xfcgen\",\n            insertRowBelow: \"Zeile unterhalb einf\\xfcgen\",\n            deleteRow: \"Zeile l\\xf6schen\",\n            insertColumnBefore: \"Spalte links einf\\xfcgen\",\n            insertColumnAfter: \"Spalte rechts einf\\xfcgen\",\n            deleteColumn: \"Spalte l\\xf6schen\",\n            fixedColumnWidth: \"Feste Spaltenbreite\",\n            resize100: \"Zoom 100%\",\n            resize75: \"Zoom 75%\",\n            resize50: \"Zoom 50%\",\n            resize25: \"Zoom 25%\",\n            autoSize: \"Automatische Gr\\xf6\\xdfenanpassung\",\n            mirrorHorizontal: \"Horizontal spiegeln\",\n            mirrorVertical: \"Vertikal spiegeln\",\n            rotateLeft: \"Nach links drehen\",\n            rotateRight: \"Nach rechts drehen\",\n            maxSize: \"Maximale Gr\\xf6\\xdfe\",\n            minSize: \"Mindestgr\\xf6\\xdfe\",\n            tableHeader: \"Tabellen\\xfcberschrift\",\n            mergeCells: \"Zellen verbinden\",\n            splitCells: \"Zellen teilen\",\n            HorizontalSplit: \"Horizontal teilen\",\n            VerticalSplit: \"Vertikal teilen\"\n        },\n        menu: {\n            spaced: \"Buchstabenabstand\",\n            bordered: \"Umrandet\",\n            neon: \"Neon\",\n            translucent: \"Durchscheinend\",\n            shadow: \"Schatten\",\n            code: \"Quellcode\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"de\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/de.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/en.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/en.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"en\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Save\",\n            font: \"Font\",\n            formats: \"Formats\",\n            fontSize: \"Size\",\n            bold: \"Bold\",\n            underline: \"Underline\",\n            italic: \"Italic\",\n            strike: \"Strike\",\n            subscript: \"Subscript\",\n            superscript: \"Superscript\",\n            removeFormat: \"Remove Format\",\n            fontColor: \"Font Color\",\n            hiliteColor: \"Highlight Color\",\n            indent: \"Indent\",\n            outdent: \"Outdent\",\n            align: \"Align\",\n            alignLeft: \"Align left\",\n            alignRight: \"Align right\",\n            alignCenter: \"Align center\",\n            alignJustify: \"Align justify\",\n            list: \"List\",\n            orderList: \"Ordered list\",\n            unorderList: \"Unordered list\",\n            horizontalRule: \"Horizontal line\",\n            hr_solid: \"Solid\",\n            hr_dotted: \"Dotted\",\n            hr_dashed: \"Dashed\",\n            table: \"Table\",\n            link: \"Link\",\n            math: \"Math\",\n            image: \"Image\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Full screen\",\n            showBlocks: \"Show blocks\",\n            codeView: \"Code view\",\n            undo: \"Undo\",\n            redo: \"Redo\",\n            preview: \"Preview\",\n            print: \"print\",\n            tag_p: \"Paragraph\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Header\",\n            tag_blockquote: \"Quote\",\n            tag_pre: \"Code\",\n            template: \"Template\",\n            lineHeight: \"Line height\",\n            paragraphStyle: \"Paragraph style\",\n            textStyle: \"Text style\",\n            imageGallery: \"Image gallery\",\n            dir_ltr: \"Left to right\",\n            dir_rtl: \"Right to left\",\n            mention: \"Mention\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Insert Link\",\n                url: \"URL to link\",\n                text: \"Text to display\",\n                newWindowCheck: \"Open in new window\",\n                downloadLinkCheck: \"Download link\",\n                bookmark: \"Bookmark\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Mathematical Notation\",\n                fontSizeLabel: \"Font Size\",\n                previewLabel: \"Preview\"\n            },\n            imageBox: {\n                title: \"Insert image\",\n                file: \"Select from files\",\n                url: \"Image URL\",\n                altText: \"Alternative text\"\n            },\n            videoBox: {\n                title: \"Insert Video\",\n                file: \"Select from files\",\n                url: \"Media embed URL, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Insert Audio\",\n                file: \"Select from files\",\n                url: \"Audio URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"Search\"\n            },\n            caption: \"Insert description\",\n            close: \"Close\",\n            submitButton: \"Submit\",\n            revertButton: \"Revert\",\n            proportion: \"Constrain proportions\",\n            basic: \"Basic\",\n            left: \"Left\",\n            right: \"Right\",\n            center: \"Center\",\n            width: \"Width\",\n            height: \"Height\",\n            size: \"Size\",\n            ratio: \"Ratio\"\n        },\n        controller: {\n            edit: \"Edit\",\n            unlink: \"Unlink\",\n            remove: \"Remove\",\n            insertRowAbove: \"Insert row above\",\n            insertRowBelow: \"Insert row below\",\n            deleteRow: \"Delete row\",\n            insertColumnBefore: \"Insert column before\",\n            insertColumnAfter: \"Insert column after\",\n            deleteColumn: \"Delete column\",\n            fixedColumnWidth: \"Fixed column width\",\n            resize100: \"Resize 100%\",\n            resize75: \"Resize 75%\",\n            resize50: \"Resize 50%\",\n            resize25: \"Resize 25%\",\n            autoSize: \"Auto size\",\n            mirrorHorizontal: \"Mirror, Horizontal\",\n            mirrorVertical: \"Mirror, Vertical\",\n            rotateLeft: \"Rotate left\",\n            rotateRight: \"Rotate right\",\n            maxSize: \"Max size\",\n            minSize: \"Min size\",\n            tableHeader: \"Table header\",\n            mergeCells: \"Merge cells\",\n            splitCells: \"Split Cells\",\n            HorizontalSplit: \"Horizontal split\",\n            VerticalSplit: \"Vertical split\"\n        },\n        menu: {\n            spaced: \"Spaced\",\n            bordered: \"Bordered\",\n            neon: \"Neon\",\n            translucent: \"Translucent\",\n            shadow: \"Shadow\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"en\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/en.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/es.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/es.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"es\",\n        toolbar: {\n            default: \"Valor por defecto\",\n            save: \"Guardar\",\n            font: \"Fuente\",\n            formats: \"Formato\",\n            fontSize: \"Tama\\xf1o de fuente\",\n            bold: \"Negrita\",\n            underline: \"Subrayado\",\n            italic: \"Cursiva\",\n            strike: \"Tachado\",\n            subscript: \"Sub\\xedndice\",\n            superscript: \"Super\\xedndice\",\n            removeFormat: \"Eliminar formato\",\n            fontColor: \"Color de fuente\",\n            hiliteColor: \"Color de resaltado\",\n            indent: \"M\\xe1s tabulaci\\xf3n\",\n            outdent: \"Menos tabulaci\\xf3n\",\n            align: \"Alinear\",\n            alignLeft: \"Alinear a la izquierda\",\n            alignRight: \"Alinear a la derecha\",\n            alignCenter: \"Alinear al centro\",\n            alignJustify: \"Justificar\",\n            list: \"Lista\",\n            orderList: \"Lista ordenada\",\n            unorderList: \"Lista desordenada\",\n            horizontalRule: \"Horizontal line\",\n            hr_solid: \"L\\xednea horizontal solida\",\n            hr_dotted: \"L\\xednea horizontal punteada\",\n            hr_dashed: \"L\\xednea horizontal discontinua\",\n            table: \"Tabla\",\n            link: \"Link\",\n            math: \"Matem\\xe1ticas\",\n            image: \"Imagen\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Pantalla completa\",\n            showBlocks: \"Ver bloques\",\n            codeView: \"Ver c\\xf3digo fuente\",\n            undo: \"UndoDeshacer \\xfaltima acci\\xf3n\",\n            redo: \"Rehacer \\xfaltima acci\\xf3n\",\n            preview: \"Vista previa\",\n            print: \"Imprimir\",\n            tag_p: \"P\\xe1rrafo\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Header\",\n            tag_blockquote: \"Cita\",\n            tag_pre: \"C\\xf3digo\",\n            template: \"Plantilla\",\n            lineHeight: \"Altura de la l\\xednea\",\n            paragraphStyle: \"Estilo del parrafo\",\n            textStyle: \"Estilo del texto\",\n            imageGallery: \"Galer\\xeda de im\\xe1genes\",\n            dir_ltr: \"De izquierda a derecha\",\n            dir_rtl: \"De derecha a izquierda\",\n            mention: \"Mencionar\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Insertar Link\",\n                url: \"\\xbfHacia que URL lleva el link?\",\n                text: \"Texto para mostrar\",\n                newWindowCheck: \"Abrir en una nueva ventana\",\n                downloadLinkCheck: \"Enlace de descarga\",\n                bookmark: \"Marcador\"\n            },\n            mathBox: {\n                title: \"Matem\\xe1ticas\",\n                inputLabel: \"Notaci\\xf3n Matem\\xe1tica\",\n                fontSizeLabel: \"Tama\\xf1o de fuente\",\n                previewLabel: \"Vista previa\"\n            },\n            imageBox: {\n                title: \"Insertar imagen\",\n                file: \"Seleccionar desde los archivos\",\n                url: \"URL de la imagen\",\n                altText: \"Texto alternativo\"\n            },\n            videoBox: {\n                title: \"Insertar Video\",\n                file: \"Seleccionar desde los archivos\",\n                url: \"\\xbfURL del v\\xeddeo? Youtube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Insertar Audio\",\n                file: \"Seleccionar desde los archivos\",\n                url: \"URL de la audio\"\n            },\n            browser: {\n                tags: \"Etiquetas\",\n                search: \"Buscar\"\n            },\n            caption: \"Insertar descripci\\xf3n\",\n            close: \"Cerrar\",\n            submitButton: \"Enviar\",\n            revertButton: \"revertir\",\n            proportion: \"Restringir las proporciones\",\n            basic: \"Basico\",\n            left: \"Izquierda\",\n            right: \"derecha\",\n            center: \"Centro\",\n            width: \"Ancho\",\n            height: \"Alto\",\n            size: \"Tama\\xf1o\",\n            ratio: \"Proporci\\xf3n\"\n        },\n        controller: {\n            edit: \"Editar\",\n            unlink: \"Desvincular\",\n            remove: \"RemoveQuitar\",\n            insertRowAbove: \"Insertar fila arriba\",\n            insertRowBelow: \"Insertar fila debajo\",\n            deleteRow: \"Eliminar fila\",\n            insertColumnBefore: \"Insertar columna antes\",\n            insertColumnAfter: \"Insertar columna despu\\xe9s\",\n            deleteColumn: \"Eliminar columna\",\n            fixedColumnWidth: \"Ancho de columna fijo\",\n            resize100: \"Redimensionar 100%\",\n            resize75: \"Redimensionar 75%\",\n            resize50: \"Redimensionar 50%\",\n            resize25: \"Redimensionar 25%\",\n            autoSize: \"Tama\\xf1o autom\\xe1tico\",\n            mirrorHorizontal: \"Espejo, Horizontal\",\n            mirrorVertical: \"Espejo, Vertical\",\n            rotateLeft: \"Girar a la izquierda\",\n            rotateRight: \"Girar a la derecha\",\n            maxSize: \"Tama\\xf1o m\\xe1ximo\",\n            minSize: \"Tama\\xf1o min\\xedmo\",\n            tableHeader: \"Encabezado de tabla\",\n            mergeCells: \"Combinar celdas\",\n            splitCells: \"Dividir celdas\",\n            HorizontalSplit: \"Divisi\\xf3n horizontal\",\n            VerticalSplit: \"Divisi\\xf3n vertical\"\n        },\n        menu: {\n            spaced: \"Espaciado\",\n            bordered: \"Bordeado\",\n            neon: \"Ne\\xf3n\",\n            translucent: \"Transl\\xfacido\",\n            shadow: \"Sombreado\",\n            code: \"C\\xf3digo\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"es\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/fr.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/fr.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"fr\",\n        toolbar: {\n            default: \"D\\xe9faut\",\n            save: \"Sauvegarder\",\n            font: \"Police\",\n            formats: \"Formats\",\n            fontSize: \"Taille\",\n            bold: \"Gras\",\n            underline: \"Soulign\\xe9\",\n            italic: \"Italique\",\n            strike: \"Barr\\xe9\",\n            subscript: \"Indice\",\n            superscript: \"Exposant\",\n            removeFormat: \"Effacer le formatage\",\n            fontColor: \"Couleur du texte\",\n            hiliteColor: \"Couleur en arri\\xe8re plan\",\n            indent: \"Indenter\",\n            outdent: \"D\\xe9sindenter\",\n            align: \"Alignement\",\n            alignLeft: \"\\xc0 gauche\",\n            alignRight: \"\\xc0 droite\",\n            alignCenter: \"Centr\\xe9\",\n            alignJustify: \"Justifi\\xe9\",\n            list: \"Liste\",\n            orderList: \"Ordonn\\xe9e\",\n            unorderList: \"Non-ordonn\\xe9e\",\n            horizontalRule: \"Ligne horizontale\",\n            hr_solid: \"Solide\",\n            hr_dotted: \"Points\",\n            hr_dashed: \"Tirets\",\n            table: \"Table\",\n            link: \"Lien\",\n            math: \"Math\",\n            image: \"Image\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Plein \\xe9cran\",\n            showBlocks: \"Voir les blocs\",\n            codeView: \"Voir le code\",\n            undo: \"Annuler\",\n            redo: \"R\\xe9tablir\",\n            preview: \"Pr\\xe9visualiser\",\n            print: \"Imprimer\",\n            tag_p: \"Paragraphe\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Titre\",\n            tag_blockquote: \"Citation\",\n            tag_pre: \"Code\",\n            template: \"Template\",\n            lineHeight: \"Hauteur de la ligne\",\n            paragraphStyle: \"Style de paragraphe\",\n            textStyle: \"Style de texte\",\n            imageGallery: \"Galerie d'images\",\n            dir_ltr: \"De gauche \\xe0 droite\",\n            dir_rtl: \"De droite \\xe0 gauche\",\n            mention: \"Mention\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Ins\\xe9rer un lien\",\n                url: \"Adresse URL du lien\",\n                text: \"Texte \\xe0 afficher\",\n                newWindowCheck: \"Ouvrir dans une nouvelle fen\\xeatre\",\n                downloadLinkCheck: \"Lien de t\\xe9l\\xe9chargement\",\n                bookmark: \"Signet\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Notation math\\xe9matique\",\n                fontSizeLabel: \"Taille\",\n                previewLabel: \"Pr\\xe9visualiser\"\n            },\n            imageBox: {\n                title: \"Ins\\xe9rer une image\",\n                file: \"S\\xe9lectionner le fichier\",\n                url: \"Adresse URL du fichier\",\n                altText: \"Texte Alternatif\"\n            },\n            videoBox: {\n                title: \"Ins\\xe9rer une vid\\xe9o\",\n                file: \"S\\xe9lectionner le fichier\",\n                url: \"URL d’int\\xe9gration du m\\xe9dia, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Ins\\xe9rer un fichier audio\",\n                file: \"S\\xe9lectionner le fichier\",\n                url: \"Adresse URL du fichier\"\n            },\n            browser: {\n                tags: \"Mots cl\\xe9s\",\n                search: \"Chercher\"\n            },\n            caption: \"Ins\\xe9rer une description\",\n            close: \"Fermer\",\n            submitButton: \"Appliquer\",\n            revertButton: \"Revenir en arri\\xe8re\",\n            proportion: \"Maintenir le rapport hauteur/largeur\",\n            basic: \"Basique\",\n            left: \"Gauche\",\n            right: \"Droite\",\n            center: \"Centr\\xe9\",\n            width: \"Largeur\",\n            height: \"Hauteur\",\n            size: \"Taille\",\n            ratio: \"Rapport\"\n        },\n        controller: {\n            edit: \"Modifier\",\n            unlink: \"Supprimer un lien\",\n            remove: \"Effacer\",\n            insertRowAbove: \"Ins\\xe9rer une ligne en dessous\",\n            insertRowBelow: \"Ins\\xe9rer une ligne au dessus\",\n            deleteRow: \"Effacer la ligne\",\n            insertColumnBefore: \"Ins\\xe9rer une colonne avant\",\n            insertColumnAfter: \"Ins\\xe9rer une colonne apr\\xe8s\",\n            deleteColumn: \"Effacer la colonne\",\n            fixedColumnWidth: \"Largeur de colonne fixe\",\n            resize100: \"Redimensionner \\xe0 100%\",\n            resize75: \"Redimensionner \\xe0 75%\",\n            resize50: \"Redimensionner \\xe0 50%\",\n            resize25: \"Redimensionner \\xe0 25%\",\n            autoSize: \"Taille automatique\",\n            mirrorHorizontal: \"Mirroir, Horizontal\",\n            mirrorVertical: \"Mirroir, Vertical\",\n            rotateLeft: \"Rotation \\xe0 gauche\",\n            rotateRight: \"Rotation \\xe0 droite\",\n            maxSize: \"Taille max\",\n            minSize: \"Taille min\",\n            tableHeader: \"En-t\\xeate de table\",\n            mergeCells: \"Fusionner les cellules\",\n            splitCells: \"Diviser les Cellules\",\n            HorizontalSplit: \"Scission horizontale\",\n            VerticalSplit: \"Scission verticale\"\n        },\n        menu: {\n            spaced: \"Espacement\",\n            bordered: \"Ligne de d\\xe9marcation\",\n            neon: \"N\\xe9on\",\n            translucent: \"Translucide\",\n            shadow: \"Ombre\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"fr\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/fr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/he.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/he.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"he\",\n        toolbar: {\n            default: \"ברירת מחדל\",\n            save: \"שמור\",\n            font: \"גופן\",\n            formats: \"עיצוב\",\n            fontSize: \"גודל\",\n            bold: \"מודגש\",\n            underline: \"קו תחתון\",\n            italic: \"נטוי\",\n            strike: \"קו חוצה\",\n            subscript: \"עילי\",\n            superscript: \"תחתי\",\n            removeFormat: \"הסר עיצוב\",\n            fontColor: \"צבע גופן\",\n            hiliteColor: \"צבע קו תחתון\",\n            indent: \"הגדל כניסה\",\n            outdent: \"הקטן כניסה\",\n            align: \"יישור\",\n            alignLeft: \"יישר לשמאל\",\n            alignRight: \"יישר לימין\",\n            alignCenter: \"מרכז\",\n            alignJustify: \"יישר לשני הצדדים\",\n            list: \"רשימה\",\n            orderList: \"מספור\",\n            unorderList: \"תבליטים\",\n            horizontalRule: \"קו אופקי\",\n            hr_solid: \"קו\",\n            hr_dotted: \"נקודות\",\n            hr_dashed: \"מקפים\",\n            table: \"טבלה\",\n            link: \"קישור\",\n            math: \"מתמטיקה\",\n            image: \"תמונה\",\n            video: \"חוזי\",\n            audio: \"שמע\",\n            fullScreen: \"מסך מלא\",\n            showBlocks: \"הצג גושים\",\n            codeView: \"הצג קוד\",\n            undo: \"בטל\",\n            redo: \"חזור\",\n            preview: \"תצוגה מקדימה\",\n            print: \"הדפס\",\n            tag_p: \"פסקה\",\n            tag_div: \"רגילה (DIV)\",\n            tag_h: \"כותרת\",\n            tag_blockquote: \"ציטוט\",\n            tag_pre: \"קוד\",\n            template: \"תבנית\",\n            lineHeight: \"גובה השורה\",\n            paragraphStyle: \"סגנון פסקה\",\n            textStyle: \"סגנון גופן\",\n            imageGallery: \"גלרית תמונות\",\n            dir_ltr: \"משמאל לימין\",\n            dir_rtl: \"מימין לשמאל\",\n            mention: \"הזכר\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"הכנס קשור\",\n                url: \"כתובת קשור\",\n                text: \"תיאור\",\n                newWindowCheck: \"פתח בחלון חדש\",\n                downloadLinkCheck: \"קישור להורדה\",\n                bookmark: \"סמניה\"\n            },\n            mathBox: {\n                title: \"נוסחה\",\n                inputLabel: \"סימנים מתמטים\",\n                fontSizeLabel: \"גודל גופן\",\n                previewLabel: \"תצוגה מקדימה\"\n            },\n            imageBox: {\n                title: \"הכנס תמונה\",\n                file: \"בחר מקובץ\",\n                url: \"כתובת URL תמונה\",\n                altText: \"תיאור (תגית alt)\"\n            },\n            videoBox: {\n                title: \"הכנס סרטון\",\n                file: \"בחר מקובץ\",\n                url: \"כתובת הטמעה YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"הכנס שמע\",\n                file: \"בחר מקובץ\",\n                url: \"כתובת URL שמע\"\n            },\n            browser: {\n                tags: \"תג\",\n                search: \"חפש\"\n            },\n            caption: \"הכנס תיאור\",\n            close: \"סגור\",\n            submitButton: \"שלח\",\n            revertButton: \"בטל\",\n            proportion: \"שמר יחס\",\n            basic: \"בסיסי\",\n            left: \"שמאל\",\n            right: \"ימין\",\n            center: \"מרכז\",\n            width: \"רוחב\",\n            height: \"גובה\",\n            size: \"גודל\",\n            ratio: \"יחס\"\n        },\n        controller: {\n            edit: \"ערוך\",\n            unlink: \"הסר קישורים\",\n            remove: \"הסר\",\n            insertRowAbove: \"הכנס שורה מעל\",\n            insertRowBelow: \"הכנס שורה מתחת\",\n            deleteRow: \"מחק שורה\",\n            insertColumnBefore: \"הכנס עמודה לפני\",\n            insertColumnAfter: \"הכנס עמודה אחרי\",\n            deleteColumn: \"מחק עמודה\",\n            fixedColumnWidth: \"קבע רוחב עמודות\",\n            resize100: \"ללא הקטנה\",\n            resize75: \"הקטן 75%\",\n            resize50: \"הקטן 50%\",\n            resize25: \"הקטן 25%\",\n            autoSize: \"הקטן אוטומטית\",\n            mirrorHorizontal: \"הפוך לרוחב\",\n            mirrorVertical: \"הפוך לגובה\",\n            rotateLeft: \"סובב שמאלה\",\n            rotateRight: \"סובב ימינה\",\n            maxSize: \"גודל מרבי\",\n            minSize: \"גודל מזערי\",\n            tableHeader: \"כותרת טבלה\",\n            mergeCells: \"מזג תאים\",\n            splitCells: \"פצל תא\",\n            HorizontalSplit: \"פצל לגובה\",\n            VerticalSplit: \"פצל לרוחב\"\n        },\n        menu: {\n            spaced: \"מרווח\",\n            bordered: \"בעל מיתאר\",\n            neon: \"זוהר\",\n            translucent: \"שקוף למחצה\",\n            shadow: \"צל\",\n            code: \"קוד\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"he\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/he.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/index.js":
/*!**************************************************!*\
  !*** ./node_modules/suneditor/src/lang/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ckb: () => (/* reexport default from dynamic */ _ckb__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   cs: () => (/* reexport default from dynamic */ _cs__WEBPACK_IMPORTED_MODULE_1___default.a),\n/* harmony export */   da: () => (/* reexport default from dynamic */ _da__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   de: () => (/* reexport default from dynamic */ _de__WEBPACK_IMPORTED_MODULE_3___default.a),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   en: () => (/* reexport default from dynamic */ _en__WEBPACK_IMPORTED_MODULE_4___default.a),\n/* harmony export */   es: () => (/* reexport default from dynamic */ _es__WEBPACK_IMPORTED_MODULE_5___default.a),\n/* harmony export */   fr: () => (/* reexport default from dynamic */ _fr__WEBPACK_IMPORTED_MODULE_6___default.a),\n/* harmony export */   he: () => (/* reexport default from dynamic */ _he__WEBPACK_IMPORTED_MODULE_7___default.a),\n/* harmony export */   it: () => (/* reexport default from dynamic */ _it__WEBPACK_IMPORTED_MODULE_8___default.a),\n/* harmony export */   ja: () => (/* reexport default from dynamic */ _ja__WEBPACK_IMPORTED_MODULE_9___default.a),\n/* harmony export */   ko: () => (/* reexport default from dynamic */ _ko__WEBPACK_IMPORTED_MODULE_10___default.a),\n/* harmony export */   lv: () => (/* reexport default from dynamic */ _lv__WEBPACK_IMPORTED_MODULE_11___default.a),\n/* harmony export */   nl: () => (/* reexport default from dynamic */ _nl__WEBPACK_IMPORTED_MODULE_12___default.a),\n/* harmony export */   pl: () => (/* reexport default from dynamic */ _pl__WEBPACK_IMPORTED_MODULE_13___default.a),\n/* harmony export */   pt_br: () => (/* reexport default from dynamic */ _pt_br__WEBPACK_IMPORTED_MODULE_14___default.a),\n/* harmony export */   ro: () => (/* reexport default from dynamic */ _ro__WEBPACK_IMPORTED_MODULE_15___default.a),\n/* harmony export */   ru: () => (/* reexport default from dynamic */ _ru__WEBPACK_IMPORTED_MODULE_16___default.a),\n/* harmony export */   se: () => (/* reexport default from dynamic */ _se__WEBPACK_IMPORTED_MODULE_17___default.a),\n/* harmony export */   ua: () => (/* reexport default from dynamic */ _ua__WEBPACK_IMPORTED_MODULE_18___default.a),\n/* harmony export */   ur: () => (/* reexport default from dynamic */ _ur__WEBPACK_IMPORTED_MODULE_19___default.a),\n/* harmony export */   zh_cn: () => (/* reexport default from dynamic */ _zh_cn__WEBPACK_IMPORTED_MODULE_20___default.a)\n/* harmony export */ });\n/* harmony import */ var _ckb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ckb */ \"(ssr)/./node_modules/suneditor/src/lang/ckb.js\");\n/* harmony import */ var _ckb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ckb__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cs */ \"(ssr)/./node_modules/suneditor/src/lang/cs.js\");\n/* harmony import */ var _cs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _da__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./da */ \"(ssr)/./node_modules/suneditor/src/lang/da.js\");\n/* harmony import */ var _da__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_da__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _de__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./de */ \"(ssr)/./node_modules/suneditor/src/lang/de.js\");\n/* harmony import */ var _de__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_de__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./en */ \"(ssr)/./node_modules/suneditor/src/lang/en.js\");\n/* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_en__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./es */ \"(ssr)/./node_modules/suneditor/src/lang/es.js\");\n/* harmony import */ var _es__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_es__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _fr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fr */ \"(ssr)/./node_modules/suneditor/src/lang/fr.js\");\n/* harmony import */ var _fr__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_fr__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _he__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./he */ \"(ssr)/./node_modules/suneditor/src/lang/he.js\");\n/* harmony import */ var _he__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_he__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _it__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./it */ \"(ssr)/./node_modules/suneditor/src/lang/it.js\");\n/* harmony import */ var _it__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_it__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _ja__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ja */ \"(ssr)/./node_modules/suneditor/src/lang/ja.js\");\n/* harmony import */ var _ja__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_ja__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ko__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ko */ \"(ssr)/./node_modules/suneditor/src/lang/ko.js\");\n/* harmony import */ var _ko__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_ko__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _lv__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lv */ \"(ssr)/./node_modules/suneditor/src/lang/lv.js\");\n/* harmony import */ var _lv__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_lv__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _nl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./nl */ \"(ssr)/./node_modules/suneditor/src/lang/nl.js\");\n/* harmony import */ var _nl__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_nl__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _pl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./pl */ \"(ssr)/./node_modules/suneditor/src/lang/pl.js\");\n/* harmony import */ var _pl__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_pl__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _pt_br__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pt_br */ \"(ssr)/./node_modules/suneditor/src/lang/pt_br.js\");\n/* harmony import */ var _pt_br__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_pt_br__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _ro__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ro */ \"(ssr)/./node_modules/suneditor/src/lang/ro.js\");\n/* harmony import */ var _ro__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_ro__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _ru__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ru */ \"(ssr)/./node_modules/suneditor/src/lang/ru.js\");\n/* harmony import */ var _ru__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_ru__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _se__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./se */ \"(ssr)/./node_modules/suneditor/src/lang/se.js\");\n/* harmony import */ var _se__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_se__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _ua__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ua */ \"(ssr)/./node_modules/suneditor/src/lang/ua.js\");\n/* harmony import */ var _ua__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_ua__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _ur__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ur */ \"(ssr)/./node_modules/suneditor/src/lang/ur.js\");\n/* harmony import */ var _ur__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_ur__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _zh_cn__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./zh_cn */ \"(ssr)/./node_modules/suneditor/src/lang/zh_cn.js\");\n/* harmony import */ var _zh_cn__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_zh_cn__WEBPACK_IMPORTED_MODULE_20__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ckb: (_ckb__WEBPACK_IMPORTED_MODULE_0___default()),\n    cs: (_cs__WEBPACK_IMPORTED_MODULE_1___default()),\n    da: (_da__WEBPACK_IMPORTED_MODULE_2___default()),\n    de: (_de__WEBPACK_IMPORTED_MODULE_3___default()),\n    en: (_en__WEBPACK_IMPORTED_MODULE_4___default()),\n    es: (_es__WEBPACK_IMPORTED_MODULE_5___default()),\n    fr: (_fr__WEBPACK_IMPORTED_MODULE_6___default()),\n    he: (_he__WEBPACK_IMPORTED_MODULE_7___default()),\n    it: (_it__WEBPACK_IMPORTED_MODULE_8___default()),\n    ja: (_ja__WEBPACK_IMPORTED_MODULE_9___default()),\n    ko: (_ko__WEBPACK_IMPORTED_MODULE_10___default()),\n    lv: (_lv__WEBPACK_IMPORTED_MODULE_11___default()),\n    nl: (_nl__WEBPACK_IMPORTED_MODULE_12___default()),\n    pl: (_pl__WEBPACK_IMPORTED_MODULE_13___default()),\n    pt_br: (_pt_br__WEBPACK_IMPORTED_MODULE_14___default()),\n    ro: (_ro__WEBPACK_IMPORTED_MODULE_15___default()),\n    ru: (_ru__WEBPACK_IMPORTED_MODULE_16___default()),\n    se: (_se__WEBPACK_IMPORTED_MODULE_17___default()),\n    ua: (_ua__WEBPACK_IMPORTED_MODULE_18___default()),\n    ur: (_ur__WEBPACK_IMPORTED_MODULE_19___default()),\n    zh_cn: (_zh_cn__WEBPACK_IMPORTED_MODULE_20___default())\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9sYW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUV3QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ007QUFFeUU7QUFDckcsaUVBQWU7SUFBRUEsR0FBR0EsK0NBQUFBO0lBQUVDLEVBQUVBLDhDQUFBQTtJQUFFQyxFQUFFQSw4Q0FBQUE7SUFBRUMsRUFBRUEsOENBQUFBO0lBQUVDLEVBQUVBLDhDQUFBQTtJQUFFQyxFQUFFQSw4Q0FBQUE7SUFBRUMsRUFBRUEsOENBQUFBO0lBQUVDLEVBQUVBLDhDQUFBQTtJQUFFQyxFQUFFQSw4Q0FBQUE7SUFBRUMsRUFBRUEsOENBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxFQUFFQSwrQ0FBQUE7SUFBRUMsRUFBRUEsK0NBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxLQUFLQSxrREFBQUE7SUFBRUMsRUFBRUEsK0NBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxFQUFFQSwrQ0FBQUE7SUFBRUMsRUFBRUEsK0NBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxLQUFLQSxrREFBQUE7QUFBQyxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGhlLWZsZXhpb24vcGtnLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvbGFuZy9pbmRleC5qcz8wNDkzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGNrYiBmcm9tICcuL2NrYic7XG5pbXBvcnQgY3MgZnJvbSAnLi9jcyc7XG5pbXBvcnQgZGEgZnJvbSAnLi9kYSc7XG5pbXBvcnQgZGUgZnJvbSAnLi9kZSc7XG5pbXBvcnQgZW4gZnJvbSAnLi9lbic7XG5pbXBvcnQgZXMgZnJvbSAnLi9lcyc7XG5pbXBvcnQgZnIgZnJvbSAnLi9mcic7XG5pbXBvcnQgaGUgZnJvbSAnLi9oZSc7XG5pbXBvcnQgaXQgZnJvbSAnLi9pdCc7XG5pbXBvcnQgamEgZnJvbSAnLi9qYSc7XG5pbXBvcnQga28gZnJvbSAnLi9rbyc7XG5pbXBvcnQgbHYgZnJvbSAnLi9sdic7XG5pbXBvcnQgbmwgZnJvbSAnLi9ubCc7XG5pbXBvcnQgcGwgZnJvbSAnLi9wbCc7XG5pbXBvcnQgcHRfYnIgZnJvbSAnLi9wdF9icic7XG5pbXBvcnQgcm8gZnJvbSAnLi9ybyc7XG5pbXBvcnQgcnUgZnJvbSAnLi9ydSc7XG5pbXBvcnQgc2UgZnJvbSAnLi9zZSc7XG5pbXBvcnQgdWEgZnJvbSAnLi91YSc7XG5pbXBvcnQgdXIgZnJvbSAnLi91cic7XG5pbXBvcnQgemhfY24gZnJvbSAnLi96aF9jbic7XG5cbmV4cG9ydCB7IGNrYiwgY3MsIGRhLCBkZSwgZW4sIGVzLCBmciwgaGUsIGl0LCBqYSwga28sIGx2LCBubCwgcGwsIHB0X2JyLCBybywgcnUsIHNlLCB1YSwgdXIsIHpoX2NuIH07XG5leHBvcnQgZGVmYXVsdCB7IGNrYiwgY3MsIGRhLCBkZSwgZW4sIGVzLCBmciwgaGUsIGl0LCBqYSwga28sIGx2LCBubCwgcGwsIHB0X2JyLCBybywgcnUsIHNlLCB1YSwgdXIsIHpoX2NuIH07XG4iXSwibmFtZXMiOlsiY2tiIiwiY3MiLCJkYSIsImRlIiwiZW4iLCJlcyIsImZyIiwiaGUiLCJpdCIsImphIiwia28iLCJsdiIsIm5sIiwicGwiLCJwdF9iciIsInJvIiwicnUiLCJzZSIsInVhIiwidXIiLCJ6aF9jbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/it.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/it.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG una finestra con un documento\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"it\",\n        toolbar: {\n            default: \"Predefinita\",\n            save: \"Salva\",\n            font: \"Font\",\n            formats: \"Formato\",\n            fontSize: \"Grandezza\",\n            bold: \"Grassetto\",\n            underline: \"Sottolineato\",\n            italic: \"Corsivo\",\n            strike: \"Barrato\",\n            subscript: \"Apice\",\n            superscript: \"Pedice\",\n            removeFormat: \"Rimuovi formattazione\",\n            fontColor: \"Colore testo\",\n            hiliteColor: \"Colore sottolineatura\",\n            indent: \"Aumenta rientro\",\n            outdent: \"Riduci rientro\",\n            align: \"Allinea\",\n            alignLeft: \"Allinea a sinistra\",\n            alignRight: \"Allinea a destra\",\n            alignCenter: \"Allinea al centro\",\n            alignJustify: \"Giustifica testo\",\n            list: \"Elenco\",\n            orderList: \"Elenco numerato\",\n            unorderList: \"Elenco puntato\",\n            horizontalRule: \"Linea orizzontale\",\n            hr_solid: \"Linea continua\",\n            hr_dotted: \"Puntini\",\n            hr_dashed: \"Trattini\",\n            table: \"Tabella\",\n            link: \"Collegamento ipertestuale\",\n            math: \"Formula matematica\",\n            image: \"Immagine\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"A tutto schermo\",\n            showBlocks: \"Visualizza blocchi\",\n            codeView: \"Visualizza codice\",\n            undo: \"Annulla\",\n            redo: \"Ripristina\",\n            preview: \"Anteprima\",\n            print: \"Stampa\",\n            tag_p: \"Paragrafo\",\n            tag_div: \"Normale (DIV)\",\n            tag_h: \"Titolo\",\n            tag_blockquote: \"Citazione\",\n            tag_pre: \"Codice\",\n            template: \"Modello\",\n            lineHeight: \"Interlinea\",\n            paragraphStyle: \"Stile paragrafo\",\n            textStyle: \"Stile testo\",\n            imageGallery: \"Galleria di immagini\",\n            dir_ltr: \"Da sinistra a destra\",\n            dir_rtl: \"Da destra a sinistra\",\n            mention: \"Menzione\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inserisci un link\",\n                url: \"Indirizzo\",\n                text: \"Testo da visualizzare\",\n                newWindowCheck: \"Apri in una nuova finestra\",\n                downloadLinkCheck: \"Link per scaricare\",\n                bookmark: \"Segnalibro\"\n            },\n            mathBox: {\n                title: \"Matematica\",\n                inputLabel: \"Notazione matematica\",\n                fontSizeLabel: \"Grandezza testo\",\n                previewLabel: \"Anteprima\"\n            },\n            imageBox: {\n                title: \"Inserisci immagine\",\n                file: \"Seleziona da file\",\n                url: \"Indirizzo immagine\",\n                altText: \"Testo alternativo (ALT)\"\n            },\n            videoBox: {\n                title: \"Inserisci video\",\n                file: \"Seleziona da file\",\n                url: \"Indirizzo video di embed, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Inserisci audio\",\n                file: \"Seleziona da file\",\n                url: \"Indirizzo audio\"\n            },\n            browser: {\n                tags: \"tag\",\n                search: \"Ricerca\"\n            },\n            caption: \"Inserisci didascalia\",\n            close: \"Chiudi\",\n            submitButton: \"Invia\",\n            revertButton: \"Annulla\",\n            proportion: \"Proporzionale\",\n            basic: \"Da impostazione\",\n            left: \"Sinistra\",\n            right: \"Destra\",\n            center: \"Centrato\",\n            width: \"Larghezza\",\n            height: \"Altezza\",\n            size: \"Dimensioni\",\n            ratio: \"Rapporto\"\n        },\n        controller: {\n            edit: \"Modifica\",\n            unlink: \"Elimina link\",\n            remove: \"Rimuovi\",\n            insertRowAbove: \"Inserisci riga sopra\",\n            insertRowBelow: \"Inserisci riga sotto\",\n            deleteRow: \"Cancella riga\",\n            insertColumnBefore: \"Inserisci colonna prima\",\n            insertColumnAfter: \"Inserisci colonna dopo\",\n            deleteColumn: \"Cancella colonna\",\n            fixedColumnWidth: \"Larghezza delle colonne fissa\",\n            resize100: \"Ridimensiona 100%\",\n            resize75: \"Ridimensiona 75%\",\n            resize50: \"Ridimensiona 50%\",\n            resize25: \"Ridimensiona 25%\",\n            autoSize: \"Ridimensione automatica\",\n            mirrorHorizontal: \"Capovolgi orizzontalmente\",\n            mirrorVertical: \"Capovolgi verticalmente\",\n            rotateLeft: \"Ruota a sinistra\",\n            rotateRight: \"Ruota a destra\",\n            maxSize: \"Dimensione massima\",\n            minSize: \"Dimensione minima\",\n            tableHeader: \"Intestazione tabella\",\n            mergeCells: \"Unisci celle\",\n            splitCells: \"Dividi celle\",\n            HorizontalSplit: \"Separa orizontalmente\",\n            VerticalSplit: \"Separa verticalmente\"\n        },\n        menu: {\n            spaced: \"Spaziato\",\n            bordered: \"Bordato\",\n            neon: \"Luminoso\",\n            translucent: \"Traslucido\",\n            shadow: \"Ombra\",\n            code: \"Codice\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"it\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/it.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ja.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ja.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ja\",\n        toolbar: {\n            default: \"デフォルト\",\n            save: \"保存\",\n            font: \"フォント\",\n            formats: \"段落形式\",\n            fontSize: \"サイズ\",\n            bold: \"太字\",\n            underline: \"下線\",\n            italic: \"イタリック\",\n            strike: \"取り消し線\",\n            subscript: \"下付き\",\n            superscript: \"上付き\",\n            removeFormat: \"形式を削除\",\n            fontColor: \"文字色\",\n            hiliteColor: \"文字の背景色\",\n            indent: \"インデント\",\n            outdent: \"インデント\",\n            align: \"ソート\",\n            alignLeft: \"左揃え\",\n            alignRight: \"右揃え\",\n            alignCenter: \"中央揃え\",\n            alignJustify: \"両端揃え\",\n            list: \"リスト\",\n            orderList: \"数値ブリット\",\n            unorderList: \"円形ブリット\",\n            horizontalRule: \"水平線を挿入\",\n            hr_solid: \"実線\",\n            hr_dotted: \"点線\",\n            hr_dashed: \"ダッシュ\",\n            table: \"テーブル\",\n            link: \"リンク\",\n            math: \"数学\",\n            image: \"画像\",\n            video: \"動画\",\n            audio: \"オーディオ\",\n            fullScreen: \"フルスクリーン\",\n            showBlocks: \"ブロック表示\",\n            codeView: \"HTMLの編集\",\n            undo: \"元に戻す\",\n            redo: \"再実行\",\n            preview: \"プレビュー\",\n            print: \"印刷\",\n            tag_p: \"本文\",\n            tag_div: \"基本（DIV）\",\n            tag_h: \"タイトル\",\n            tag_blockquote: \"引用\",\n            tag_pre: \"コード\",\n            template: \"テンプレート\",\n            lineHeight: \"行の高さ\",\n            paragraphStyle: \"段落スタイル\",\n            textStyle: \"テキストスタイル\",\n            imageGallery: \"イメージギャラリー\",\n            dir_ltr: \"左から右へ\",\n            dir_rtl: \"右から左に\",\n            mention: \"言及する\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"リンクの挿入\",\n                url: \"インターネットアドレス\",\n                text: \"画面のテキスト\",\n                newWindowCheck: \"別ウィンドウで開く\",\n                downloadLinkCheck: \"ダウンロードリンク\",\n                bookmark: \"ブックマーク\"\n            },\n            mathBox: {\n                title: \"数学\",\n                inputLabel: \"数学表記\",\n                fontSizeLabel: \"サイズ\",\n                previewLabel: \"プレビュー\"\n            },\n            imageBox: {\n                title: \"画像の挿入\",\n                file: \"ファイルの選択\",\n                url: \"イメージアドレス\",\n                altText: \"置換文字列\"\n            },\n            videoBox: {\n                title: \"動画を挿入\",\n                file: \"ファイルの選択\",\n                url: \"メディア埋め込みアドレス, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"オーディオを挿入\",\n                file: \"ファイルの選択\",\n                url: \"オーディオアドレス\"\n            },\n            browser: {\n                tags: \"タグ\",\n                search: \"探す\"\n            },\n            caption: \"説明付け\",\n            close: \"閉じる\",\n            submitButton: \"確認\",\n            revertButton: \"元に戻す\",\n            proportion: \"の割合カスタマイズ\",\n            basic: \"基本\",\n            left: \"左\",\n            right: \"右\",\n            center: \"中央\",\n            width: \"横\",\n            height: \"縦\",\n            size: \"サイズ\",\n            ratio: \"比率\"\n        },\n        controller: {\n            edit: \"編集\",\n            unlink: \"リンク解除\",\n            remove: \"削除\",\n            insertRowAbove: \"上に行を挿入\",\n            insertRowBelow: \"下に行を挿入\",\n            deleteRow: \"行の削除\",\n            insertColumnBefore: \"左に列を挿入\",\n            insertColumnAfter: \"右に列を挿入\",\n            deleteColumn: \"列を削除する\",\n            fixedColumnWidth: \"固定列幅\",\n            resize100: \"100％ サイズ\",\n            resize75: \"75％ サイズ\",\n            resize50: \"50％ サイズ\",\n            resize25: \"25％ サイズ\",\n            autoSize: \"自動サイズ\",\n            mirrorHorizontal: \"左右反転\",\n            mirrorVertical: \"上下反転\",\n            rotateLeft: \"左に回転\",\n            rotateRight: \"右に回転\",\n            maxSize: \"最大サイズ\",\n            minSize: \"最小サイズ\",\n            tableHeader: \"表のヘッダー\",\n            mergeCells: \"セルの結合\",\n            splitCells: \"セルを分割\",\n            HorizontalSplit: \"横分割\",\n            VerticalSplit: \"垂直分割\"\n        },\n        menu: {\n            spaced: \"文字間隔\",\n            bordered: \"境界線\",\n            neon: \"ネオン\",\n            translucent: \"半透明\",\n            shadow: \"影\",\n            code: \"コード\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ja\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ja.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ko.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ko.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ko\",\n        toolbar: {\n            default: \"기본값\",\n            save: \"저장\",\n            font: \"글꼴\",\n            formats: \"문단 형식\",\n            fontSize: \"크기\",\n            bold: \"굵게\",\n            underline: \"밑줄\",\n            italic: \"기울임\",\n            strike: \"취소선\",\n            subscript: \"아래 첨자\",\n            superscript: \"위 첨자\",\n            removeFormat: \"형식 제거\",\n            fontColor: \"글자색\",\n            hiliteColor: \"배경색\",\n            indent: \"들여쓰기\",\n            outdent: \"내어쓰기\",\n            align: \"정렬\",\n            alignLeft: \"왼쪽 정렬\",\n            alignRight: \"오른쪽 정렬\",\n            alignCenter: \"가운데 정렬\",\n            alignJustify: \"양쪽 정렬\",\n            list: \"리스트\",\n            orderList: \"숫자형 리스트\",\n            unorderList: \"원형 리스트\",\n            horizontalRule: \"가로 줄 삽입\",\n            hr_solid: \"실선\",\n            hr_dotted: \"점선\",\n            hr_dashed: \"대시\",\n            table: \"테이블\",\n            link: \"링크\",\n            math: \"수식\",\n            image: \"이미지\",\n            video: \"동영상\",\n            audio: \"오디오\",\n            fullScreen: \"전체 화면\",\n            showBlocks: \"블록 보기\",\n            codeView: \"HTML 편집\",\n            undo: \"실행 취소\",\n            redo: \"다시 실행\",\n            preview: \"미리보기\",\n            print: \"인쇄\",\n            tag_p: \"본문\",\n            tag_div: \"기본 (DIV)\",\n            tag_h: \"제목\",\n            tag_blockquote: \"인용문\",\n            tag_pre: \"코드\",\n            template: \"템플릿\",\n            lineHeight: \"줄 높이\",\n            paragraphStyle: \"문단 스타일\",\n            textStyle: \"글자 스타일\",\n            imageGallery: \"이미지 갤러리\",\n            dir_ltr: \"왼쪽에서 오른쪽\",\n            dir_rtl: \"오른쪽에서 왼쪽\",\n            mention: \"멘션\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"링크 삽입\",\n                url: \"인터넷 주소\",\n                text: \"화면 텍스트\",\n                newWindowCheck: \"새창으로 열기\",\n                downloadLinkCheck: \"다운로드 링크\",\n                bookmark: \"북마크\"\n            },\n            mathBox: {\n                title: \"수식\",\n                inputLabel: \"수학적 표기법\",\n                fontSizeLabel: \"글자 크기\",\n                previewLabel: \"미리보기\"\n            },\n            imageBox: {\n                title: \"이미지 삽입\",\n                file: \"파일 선택\",\n                url: \"이미지 주소\",\n                altText: \"대체 문자열\"\n            },\n            videoBox: {\n                title: \"동영상 삽입\",\n                file: \"파일 선택\",\n                url: \"미디어 임베드 주소, 유튜브/비메오\"\n            },\n            audioBox: {\n                title: \"오디오 삽입\",\n                file: \"파일 선택\",\n                url: \"오디오 파일 주소\"\n            },\n            browser: {\n                tags: \"태그\",\n                search: \"검색\"\n            },\n            caption: \"설명 넣기\",\n            close: \"닫기\",\n            submitButton: \"확인\",\n            revertButton: \"되돌리기\",\n            proportion: \"비율 맞춤\",\n            basic: \"기본\",\n            left: \"왼쪽\",\n            right: \"오른쪽\",\n            center: \"가운데\",\n            width: \"가로\",\n            height: \"세로\",\n            size: \"크기\",\n            ratio: \"비율\"\n        },\n        controller: {\n            edit: \"편집\",\n            unlink: \"링크 해제\",\n            remove: \"삭제\",\n            insertRowAbove: \"위에 행 삽입\",\n            insertRowBelow: \"아래에 행 삽입\",\n            deleteRow: \"행 삭제\",\n            insertColumnBefore: \"왼쪽에 열 삽입\",\n            insertColumnAfter: \"오른쪽에 열 삽입\",\n            deleteColumn: \"열 삭제\",\n            fixedColumnWidth: \"고정 된 열 너비\",\n            resize100: \"100% 크기\",\n            resize75: \"75% 크기\",\n            resize50: \"50% 크기\",\n            resize25: \"25% 크기\",\n            autoSize: \"자동 크기\",\n            mirrorHorizontal: \"좌우 반전\",\n            mirrorVertical: \"상하 반전\",\n            rotateLeft: \"왼쪽으로 회전\",\n            rotateRight: \"오른쪽으로 회전\",\n            maxSize: \"최대화\",\n            minSize: \"최소화\",\n            tableHeader: \"테이블 제목\",\n            mergeCells: \"셀 병합\",\n            splitCells: \"셀 분할\",\n            HorizontalSplit: \"가로 분할\",\n            VerticalSplit: \"세로 분할\"\n        },\n        menu: {\n            spaced: \"글자 간격\",\n            bordered: \"경계선\",\n            neon: \"네온\",\n            translucent: \"반투명\",\n            shadow: \"그림자\",\n            code: \"코드\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ko\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ko.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/lv.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/lv.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"lv\",\n        toolbar: {\n            default: \"Noklusējuma\",\n            save: \"Saglabāt\",\n            font: \"Fonts\",\n            formats: \"Formāti\",\n            fontSize: \"Fonta lielums\",\n            bold: \"Treknraksts\",\n            underline: \"Pasvītrot\",\n            italic: \"Slīpraksts\",\n            strike: \"Pārsvītrojums\",\n            subscript: \"Apakšraksts\",\n            superscript: \"Augšraksts\",\n            removeFormat: \"Noņemt formātu\",\n            fontColor: \"Fonta krāsa\",\n            hiliteColor: \"Teksta iezīmēšanas krāsa\",\n            indent: \"Palielināt atkāpi\",\n            outdent: \"Samazināt atkāpi\",\n            align: \"Izlīdzināt\",\n            alignLeft: \"Līdzināt pa kreisi\",\n            alignRight: \"Līdzināt pa labi\",\n            alignCenter: \"Centrēt\",\n            alignJustify: \"Taisnot\",\n            list: \"Saraksts\",\n            orderList: \"Numerācija\",\n            unorderList: \"Aizzimes\",\n            horizontalRule: \"Horizontāla līnija\",\n            hr_solid: \"Ciets\",\n            hr_dotted: \"Punktiņš\",\n            hr_dashed: \"Braša\",\n            table: \"Tabula\",\n            link: \"Saite\",\n            math: \"Matemātika\",\n            image: \"Attēls\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Pilnekrāna režīms\",\n            showBlocks: \"Parādit blokus\",\n            codeView: \"Koda skats\",\n            undo: \"Atsaukt\",\n            redo: \"Atkārtot\",\n            preview: \"Priekšskatījums\",\n            print: \"Drukāt\",\n            tag_p: \"Paragrāfs\",\n            tag_div: \"Normāli (DIV)\",\n            tag_h: \"Galvene\",\n            tag_blockquote: \"Citāts\",\n            tag_pre: \"Kods\",\n            template: \"Veidne\",\n            lineHeight: \"Līnijas augstums\",\n            paragraphStyle: \"Paragrāfa stils\",\n            textStyle: \"Teksta stils\",\n            imageGallery: \"Attēlu galerija\",\n            dir_ltr: \"No kreisās uz labo\",\n            dir_rtl: \"No labās uz kreiso\",\n            mention: \"Pieminēt\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Ievietot saiti\",\n                url: \"Saites URL\",\n                text: \"Parādāmais teksts\",\n                newWindowCheck: \"Atvērt jaunā logā\",\n                downloadLinkCheck: \"Lejupielādes saite\",\n                bookmark: \"Grāmatzīme\"\n            },\n            mathBox: {\n                title: \"Matemātika\",\n                inputLabel: \"Matemātiskā notācija\",\n                fontSizeLabel: \"Fonta lielums\",\n                previewLabel: \"Priekšskatījums\"\n            },\n            imageBox: {\n                title: \"Ievietot attēlu\",\n                file: \"Izvēlieties no failiem\",\n                url: \"Attēla URL\",\n                altText: \"Alternatīvs teksts\"\n            },\n            videoBox: {\n                title: \"Ievietot video\",\n                file: \"Izvēlieties no failiem\",\n                url: \"Multivides iegulšanas URL, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Ievietot audio\",\n                file: \"Izvēlieties no failiem\",\n                url: \"Audio URL\"\n            },\n            browser: {\n                tags: \"Tagi\",\n                search: \"Meklēt\"\n            },\n            caption: \"Ievietot aprakstu\",\n            close: \"Aizvērt\",\n            submitButton: \"Iesniegt\",\n            revertButton: \"Atjaunot\",\n            proportion: \"Ierobežo proporcijas\",\n            basic: \"Nav iesaiņojuma\",\n            left: \"Pa kreisi\",\n            right: \"Labajā pusē\",\n            center: \"Centrs\",\n            width: \"Platums\",\n            height: \"Augstums\",\n            size: \"Izmērs\",\n            ratio: \"Attiecība\"\n        },\n        controller: {\n            edit: \"Rediģēt\",\n            unlink: \"Atsaistīt\",\n            remove: \"Noņemt\",\n            insertRowAbove: \"Ievietot rindu virs\",\n            insertRowBelow: \"Ievietot rindu zemāk\",\n            deleteRow: \"Dzēst rindu\",\n            insertColumnBefore: \"Ievietot kolonnu pirms\",\n            insertColumnAfter: \"Ievietot kolonnu aiz\",\n            deleteColumn: \"Dzēst kolonnu\",\n            fixColumnWidth: \"Fiksēts kolonnas platums\",\n            resize100: \"Mainīt izmēru 100%\",\n            resize75: \"Mainīt izmēru 75%\",\n            resize50: \"Mainīt izmēru 50%\",\n            resize25: \"Mainīt izmēru 25%\",\n            autoSize: \"Automātiskais izmērs\",\n            mirrorHorizontal: \"Spogulis, horizontāls\",\n            mirrorVertical: \"Spogulis, vertikāls\",\n            rotateLeft: \"Pagriezt pa kreisi\",\n            rotateRight: \"Pagriezt pa labi\",\n            maxSize: \"Maksimālais izmērs\",\n            minSize: \"Minimālais izmērs\",\n            tableHeader: \"Tabulas galvene\",\n            mergeCells: \"Apvienot šūnas\",\n            splitCells: \"Sadalīt šūnas\",\n            HorizontalSplit: \"Horizontāls sadalījums\",\n            VerticalSplit: \"Vertikāls sadalījums\"\n        },\n        menu: {\n            spaced: \"Ar atstarpi\",\n            bordered: \"Robežojās\",\n            neon: \"Neona\",\n            translucent: \"Caurspīdīgs\",\n            shadow: \"Ēna\",\n            code: \"Kods\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"lv\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/lv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/nl.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/nl.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"nl\",\n        toolbar: {\n            default: \"Standaard\",\n            save: \"Opslaan\",\n            font: \"Lettertype\",\n            formats: \"Formaten\",\n            fontSize: \"Lettergrootte\",\n            bold: \"Vetgedrukt\",\n            underline: \"Onderstrepen\",\n            italic: \"Cursief\",\n            strike: \"Doorstrepen\",\n            subscript: \"Subscript\",\n            superscript: \"Superscript\",\n            removeFormat: \"Opmaak verwijderen\",\n            fontColor: \"Tekstkleur\",\n            hiliteColor: \"Tekst markeren\",\n            indent: \"Inspringen\",\n            outdent: \"Inspringen ongedaan maken\",\n            align: \"Uitlijnen\",\n            alignLeft: \"Links uitlijnen\",\n            alignRight: \"Rechts uitlijnen\",\n            alignCenter: \"In het midden uitlijnen\",\n            alignJustify: \"Uitvullen\",\n            list: \"Lijst\",\n            orderList: \"Geordende lijst\",\n            unorderList: \"Ongeordende lijst\",\n            horizontalRule: \"Horizontale regel\",\n            hr_solid: \"Standaard\",\n            hr_dotted: \"Gestippeld\",\n            hr_dashed: \"Gestreept\",\n            table: \"Tabel\",\n            link: \"Link\",\n            math: \"Wiskunde\",\n            image: \"Afbeelding\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Volledig scherm\",\n            showBlocks: \"Blokken tonen\",\n            codeView: \"Broncode weergeven\",\n            undo: \"Ongedaan maken\",\n            redo: \"Ongedaan maken herstellen\",\n            preview: \"Voorbeeldweergave\",\n            print: \"Printen\",\n            tag_p: \"Alinea\",\n            tag_div: \"Normaal (div)\",\n            tag_h: \"Kop\",\n            tag_blockquote: \"Citaat\",\n            tag_pre: \"Code\",\n            template: \"Sjabloon\",\n            lineHeight: \"Lijnhoogte\",\n            paragraphStyle: \"Alineastijl\",\n            textStyle: \"Tekststijl\",\n            imageGallery: \"Galerij\",\n            dir_ltr: \"Van links naar rechts\",\n            dir_rtl: \"Rechts naar links\",\n            mention: \"Vermelding\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Link invoegen\",\n                url: \"URL\",\n                text: \"Tekst van de link\",\n                newWindowCheck: \"In een nieuw tabblad openen\",\n                downloadLinkCheck: \"Downloadlink\",\n                bookmark: \"Bladwijzer\"\n            },\n            mathBox: {\n                title: \"Wiskunde\",\n                inputLabel: \"Wiskundige notatie\",\n                fontSizeLabel: \"Lettergrootte\",\n                previewLabel: \"Voorbeeld\"\n            },\n            imageBox: {\n                title: \"Afbeelding invoegen\",\n                file: \"Selecteer een bestand van uw apparaat\",\n                url: \"URL\",\n                altText: \"Alt-tekst\"\n            },\n            videoBox: {\n                title: \"Video invoegen\",\n                file: \"Selecteer een bestand van uw apparaat\",\n                url: \"Embedded URL (YouTube/Vimeo)\"\n            },\n            audioBox: {\n                title: \"Audio invoegen\",\n                file: \"Selecteer een bestand van uw apparaat\",\n                url: \"URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"Zoeken\"\n            },\n            caption: \"Omschrijving toevoegen\",\n            close: \"Sluiten\",\n            submitButton: \"Toepassen\",\n            revertButton: \"Standaardwaarden herstellen\",\n            proportion: \"Verhouding behouden\",\n            basic: \"Standaard\",\n            left: \"Links\",\n            right: \"Rechts\",\n            center: \"Midden\",\n            width: \"Breedte\",\n            height: \"Hoogte\",\n            size: \"Grootte\",\n            ratio: \"Verhouding\"\n        },\n        controller: {\n            edit: \"Bewerken\",\n            unlink: \"Ontkoppelen\",\n            remove: \"Verwijderen\",\n            insertRowAbove: \"Rij hierboven invoegen\",\n            insertRowBelow: \"Rij hieronder invoegen\",\n            deleteRow: \"Rij verwijderen\",\n            insertColumnBefore: \"Kolom links invoegen\",\n            insertColumnAfter: \"Kolom rechts invoegen\",\n            deleteColumn: \"Kolom verwijderen\",\n            fixedColumnWidth: \"Vaste kolombreedte\",\n            resize100: \"Formaat wijzigen: 100%\",\n            resize75: \"Formaat wijzigen: 75%\",\n            resize50: \"Formaat wijzigen: 50%\",\n            resize25: \"Formaat wijzigen: 25%\",\n            autoSize: \"Automatische grootte\",\n            mirrorHorizontal: \"Horizontaal spiegelen\",\n            mirrorVertical: \"Verticaal spiegelen\",\n            rotateLeft: \"Naar links draaien\",\n            rotateRight: \"Naar rechts draaien\",\n            maxSize: \"Maximale grootte\",\n            minSize: \"Minimale grootte\",\n            tableHeader: \"Tabelkoppen\",\n            mergeCells: \"Cellen samenvoegen\",\n            splitCells: \"Cellen splitsen\",\n            HorizontalSplit: \"Horizontaal splitsen\",\n            VerticalSplit: \"Verticaal splitsen\"\n        },\n        menu: {\n            spaced: \"Uit elkaar\",\n            bordered: \"Omlijnd\",\n            neon: \"Neon\",\n            translucent: \"Doorschijnend\",\n            shadow: \"Schaduw\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"nl\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/nl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/pl.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/pl.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"pl\",\n        toolbar: {\n            default: \"Domyślne\",\n            save: \"Zapisz\",\n            font: \"Czcionka\",\n            formats: \"Formaty\",\n            fontSize: \"Rozmiar\",\n            bold: \"Pogrubienie\",\n            underline: \"Podkreślenie\",\n            italic: \"Kursywa\",\n            strike: \"Przekreślenie\",\n            subscript: \"Indeks dolny\",\n            superscript: \"Indeks g\\xf3rny\",\n            removeFormat: \"Wyczyść formatowanie\",\n            fontColor: \"Kolor tekstu\",\n            hiliteColor: \"Kolor tła tekstu\",\n            indent: \"Zwiększ wcięcie\",\n            outdent: \"Zmniejsz wcięcie\",\n            align: \"Wyr\\xf3wnaj\",\n            alignLeft: \"Do lewej\",\n            alignRight: \"Do prawej\",\n            alignCenter: \"Do środka\",\n            alignJustify: \"Wyjustuj\",\n            list: \"Lista\",\n            orderList: \"Lista numerowana\",\n            unorderList: \"Lista wypunktowana\",\n            horizontalRule: \"Pozioma linia\",\n            hr_solid: \"Ciągła\",\n            hr_dotted: \"Kropkowana\",\n            hr_dashed: \"Przerywana\",\n            table: \"Tabela\",\n            link: \"Odnośnik\",\n            math: \"Matematyczne\",\n            image: \"Obraz\",\n            video: \"Wideo\",\n            audio: \"Audio\",\n            fullScreen: \"Pełny ekran\",\n            showBlocks: \"Pokaż bloki\",\n            codeView: \"Widok kodu\",\n            undo: \"Cofnij\",\n            redo: \"Pon\\xf3w\",\n            preview: \"Podgląd\",\n            print: \"Drukuj\",\n            tag_p: \"Akapit\",\n            tag_div: \"Blok (DIV)\",\n            tag_h: \"Nagł\\xf3wek H\",\n            tag_blockquote: \"Cytat\",\n            tag_pre: \"Kod\",\n            template: \"Szablon\",\n            lineHeight: \"Odstęp między wierszami\",\n            paragraphStyle: \"Styl akapitu\",\n            textStyle: \"Styl tekstu\",\n            imageGallery: \"Galeria obraz\\xf3w\",\n            dir_ltr: \"Od lewej do prawej\",\n            dir_rtl: \"Od prawej do lewej\",\n            mention: \"Wzmianka\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Wstaw odnośnik\",\n                url: \"Adres URL\",\n                text: \"Tekst do wyświetlenia\",\n                newWindowCheck: \"Otw\\xf3rz w nowym oknie\",\n                downloadLinkCheck: \"Link do pobrania\",\n                bookmark: \"Zakładka\"\n            },\n            mathBox: {\n                title: \"Matematyczne\",\n                inputLabel: \"Zapis matematyczny\",\n                fontSizeLabel: \"Rozmiar czcionki\",\n                previewLabel: \"Podgląd\"\n            },\n            imageBox: {\n                title: \"Wstaw obraz\",\n                file: \"Wybierz plik\",\n                url: \"Adres URL obrazka\",\n                altText: \"Tekst alternatywny\"\n            },\n            videoBox: {\n                title: \"Wstaw wideo\",\n                file: \"Wybierz plik\",\n                url: \"Adres URL video, np. YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Wstaw audio\",\n                file: \"Wybierz plik\",\n                url: \"Adres URL audio\"\n            },\n            browser: {\n                tags: \"Tagi\",\n                search: \"Szukaj\"\n            },\n            caption: \"Wstaw opis\",\n            close: \"Zamknij\",\n            submitButton: \"Zatwierdź\",\n            revertButton: \"Cofnij zmiany\",\n            proportion: \"Ogranicz proporcje\",\n            basic: \"Bez wyr\\xf3wnania\",\n            left: \"Do lewej\",\n            right: \"Do prawej\",\n            center: \"Do środka\",\n            width: \"Szerokość\",\n            height: \"Wysokość\",\n            size: \"Rozmiar\",\n            ratio: \"Proporcje\"\n        },\n        controller: {\n            edit: \"Edycja\",\n            unlink: \"Usuń odnośnik\",\n            remove: \"Usuń\",\n            insertRowAbove: \"Wstaw wiersz powyżej\",\n            insertRowBelow: \"Wstaw wiersz poniżej\",\n            deleteRow: \"Usuń wiersz\",\n            insertColumnBefore: \"Wstaw kolumnę z lewej\",\n            insertColumnAfter: \"Wstaw kolumnę z prawej\",\n            deleteColumn: \"Usuń kolumnę\",\n            fixedColumnWidth: \"Stała szerokość kolumny\",\n            resize100: \"Zmień rozmiar - 100%\",\n            resize75: \"Zmień rozmiar - 75%\",\n            resize50: \"Zmień rozmiar - 50%\",\n            resize25: \"Zmień rozmiar - 25%\",\n            autoSize: \"Rozmiar automatyczny\",\n            mirrorHorizontal: \"Odbicie lustrzane w poziomie\",\n            mirrorVertical: \"Odbicie lustrzane w pionie\",\n            rotateLeft: \"Obr\\xf3ć w lewo\",\n            rotateRight: \"Obr\\xf3ć w prawo\",\n            maxSize: \"Maksymalny rozmiar\",\n            minSize: \"Minimalny rozmiar\",\n            tableHeader: \"Nagł\\xf3wek tabeli\",\n            mergeCells: \"Scal kom\\xf3rki\",\n            splitCells: \"Podziel kom\\xf3rki\",\n            HorizontalSplit: \"Podział poziomy\",\n            VerticalSplit: \"Podział pionowy\"\n        },\n        menu: {\n            spaced: \"Rozstawiony\",\n            bordered: \"Z obw\\xf3dką\",\n            neon: \"Neon\",\n            translucent: \"P\\xf3łprzezroczysty\",\n            shadow: \"Cień\",\n            code: \"Kod\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"pl\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/pl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/pt_br.js":
/*!**************************************************!*\
  !*** ./node_modules/suneditor/src/lang/pt_br.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * Brazilian Portuguese translation by lpeil github\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"pt_br\",\n        toolbar: {\n            default: \"Padr\\xe3o\",\n            save: \"Salvar\",\n            font: \"Fonte\",\n            formats: \"Formatos\",\n            fontSize: \"Tamanho\",\n            bold: \"Negrito\",\n            underline: \"Sublinhado\",\n            italic: \"It\\xe1lico\",\n            strike: \"Riscado\",\n            subscript: \"Subescrito\",\n            superscript: \"Sobrescrito\",\n            removeFormat: \"Remover Formata\\xe7\\xe3o\",\n            fontColor: \"Cor da Fonte\",\n            hiliteColor: \"Cor de destaque\",\n            indent: \"Recuo\",\n            outdent: \"Avan\\xe7ar\",\n            align: \"Alinhar\",\n            alignLeft: \"Alinhar \\xe0 esquerda\",\n            alignRight: \"Alinhar \\xe0 direita\",\n            alignCenter: \"Centralizar\",\n            alignJustify: \"Justificar\",\n            list: \"Lista\",\n            orderList: \"Lista ordenada\",\n            unorderList: \"Lista desordenada\",\n            horizontalRule: \"Linha horizontal\",\n            hr_solid: \"s\\xf3lida\",\n            hr_dotted: \"pontilhada\",\n            hr_dashed: \"tracejada\",\n            table: \"Tabela\",\n            link: \"Link\",\n            math: \"Matem\\xe1tica\",\n            image: \"Imagem\",\n            video: \"V\\xeddeo\",\n            audio: \"\\xc1udio\",\n            fullScreen: \"Tela cheia\",\n            showBlocks: \"Mostrar blocos\",\n            codeView: \"Mostrar c\\xf3digos\",\n            undo: \"Voltar\",\n            redo: \"Refazer\",\n            preview: \"Prever\",\n            print: \"Imprimir\",\n            tag_p: \"Paragr\\xe1fo\",\n            tag_div: \"(DIV) Normal\",\n            tag_h: \"Cabe\\xe7alho\",\n            tag_blockquote: \"Citar\",\n            tag_pre: \"C\\xf3digo\",\n            template: \"Modelo\",\n            lineHeight: \"Altura da linha\",\n            paragraphStyle: \"Estilo do par\\xe1grafo\",\n            textStyle: \"Estilo do texto\",\n            imageGallery: \"Galeria de imagens\",\n            dir_ltr: \"Esquerda para direita\",\n            dir_rtl: \"Direita para esquerda\",\n            mention: \"Men\\xe7\\xe3o\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inserir link\",\n                url: \"URL para link\",\n                text: \"Texto a mostrar\",\n                newWindowCheck: \"Abrir em nova guia\",\n                downloadLinkCheck: \"Link para Download\",\n                bookmark: \"marcar p\\xe1ginas\"\n            },\n            mathBox: {\n                title: \"Matem\\xe1tica\",\n                inputLabel: \"Nota\\xe7\\xe3o matem\\xe1tica\",\n                fontSizeLabel: \"Tamanho\",\n                previewLabel: \"Prever\"\n            },\n            imageBox: {\n                title: \"Inserir imagens\",\n                file: \"Selecionar arquivos\",\n                url: \"URL da imagem\",\n                altText: \"Texto alternativo\"\n            },\n            videoBox: {\n                title: \"Inserir v\\xeddeo\",\n                file: \"Selecionar arquivos\",\n                url: \"URL do YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Inserir \\xe1udio\",\n                file: \"Selecionar arquivos\",\n                url: \"URL da \\xe1udio\"\n            },\n            browser: {\n                tags: \"Tag\",\n                search: \"Procurar\"\n            },\n            caption: \"Inserir descri\\xe7\\xe3o\",\n            close: \"Fechar\",\n            submitButton: \"Enviar\",\n            revertButton: \"Reverter\",\n            proportion: \"Restringir propor\\xe7\\xf5es\",\n            basic: \"B\\xe1sico\",\n            left: \"Esquerda\",\n            right: \"Direita\",\n            center: \"Centro\",\n            width: \"Largura\",\n            height: \"Altura\",\n            size: \"Tamanho\",\n            ratio: \"Propor\\xe7\\xf5es\"\n        },\n        controller: {\n            edit: \"Editar\",\n            unlink: \"Remover link\",\n            remove: \"Remover\",\n            insertRowAbove: \"Inserir linha acima\",\n            insertRowBelow: \"Inserir linha abaixo\",\n            deleteRow: \"Deletar linha\",\n            insertColumnBefore: \"Inserir coluna antes\",\n            insertColumnAfter: \"Inserir coluna depois\",\n            deleteColumn: \"Deletar coluna\",\n            fixedColumnWidth: \"Largura fixa da coluna\",\n            resize100: \"Redimensionar para 100%\",\n            resize75: \"Redimensionar para 75%\",\n            resize50: \"Redimensionar para 50%\",\n            resize25: \"Redimensionar para 25%\",\n            autoSize: \"Tamanho autom\\xe1tico\",\n            mirrorHorizontal: \"Espelho, Horizontal\",\n            mirrorVertical: \"Espelho, Vertical\",\n            rotateLeft: \"Girar para esquerda\",\n            rotateRight: \"Girar para direita\",\n            maxSize: \"Tam m\\xe1x\",\n            minSize: \"Tam m\\xedn\",\n            tableHeader: \"Cabe\\xe7alho da tabela\",\n            mergeCells: \"Mesclar c\\xe9lulas\",\n            splitCells: \"Dividir c\\xe9lulas\",\n            HorizontalSplit: \"Divis\\xe3o horizontal\",\n            VerticalSplit: \"Divis\\xe3o vertical\"\n        },\n        menu: {\n            spaced: \"Espa\\xe7ado\",\n            bordered: \"Com borda\",\n            neon: \"Neon\",\n            translucent: \"Transl\\xfacido\",\n            shadow: \"Sombreado\",\n            code: \"C\\xf3digo\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"pt_br\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/pt_br.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ro.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ro.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ro\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Salvează\",\n            font: \"Font\",\n            formats: \"Format\",\n            fontSize: \"Dimensiune\",\n            bold: \"\\xcengroșat\",\n            underline: \"Subliniat\",\n            italic: \"\\xcenclinat\",\n            strike: \"Tăiat\",\n            subscript: \"Subscript\",\n            superscript: \"Superscript\",\n            removeFormat: \"Șterge formatare\",\n            fontColor: \"Culoare font\",\n            hiliteColor: \"Culoare de evidențiere\",\n            indent: \"Indentează\",\n            outdent: \"Fără indentare\",\n            align: \"Aliniere\",\n            alignLeft: \"Aliniere la st\\xe2nga\",\n            alignRight: \"Aliniere la dreapta\",\n            alignCenter: \"Aliniere la centru\",\n            alignJustify: \"Aliniere st\\xe2nga - dreapta\",\n            list: \"Listă\",\n            orderList: \"Listă ordonată\",\n            unorderList: \"Listă neordonată\",\n            horizontalRule: \"Linie orizontală\",\n            hr_solid: \"Solid\",\n            hr_dotted: \"Punctat\",\n            hr_dashed: \"Punctate\",\n            table: \"Tabel\",\n            link: \"Link\",\n            math: \"Matematică\",\n            image: \"Imagine\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Tot ecranul\",\n            showBlocks: \"Arată blocuri\",\n            codeView: \"Vizualizare cod\",\n            undo: \"Anulează\",\n            redo: \"Refă\",\n            preview: \"Previzualizare\",\n            print: \"printează\",\n            tag_p: \"Paragraf\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Antet\",\n            tag_blockquote: \"Quote\",\n            tag_pre: \"Citat\",\n            template: \"Template\",\n            lineHeight: \"\\xcenălțime linie\",\n            paragraphStyle: \"Stil paragraf\",\n            textStyle: \"Stil text\",\n            imageGallery: \"Galerie de imagini\",\n            dir_ltr: \"De la st\\xe2nga la dreapta\",\n            dir_rtl: \"De la dreapta la stanga\",\n            mention: \"Mentiune\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inserează Link\",\n                url: \"Adresă link\",\n                text: \"Text de afișat\",\n                newWindowCheck: \"Deschide \\xeen fereastră nouă\",\n                downloadLinkCheck: \"Link de descărcare\",\n                bookmark: \"Marcaj\"\n            },\n            mathBox: {\n                title: \"Matematică\",\n                inputLabel: \"Notație matematică\",\n                fontSizeLabel: \"Dimensiune font\",\n                previewLabel: \"Previzualizare\"\n            },\n            imageBox: {\n                title: \"Inserează imagine\",\n                file: \"Selectează\",\n                url: \"URL imagine\",\n                altText: \"text alternativ\"\n            },\n            videoBox: {\n                title: \"Inserează video\",\n                file: \"Selectează\",\n                url: \"Include URL, youtube/vimeo\"\n            },\n            audioBox: {\n                title: \"Inserează Audio\",\n                file: \"Selectează\",\n                url: \"URL Audio\"\n            },\n            browser: {\n                tags: \"Etichete\",\n                search: \"Căutareim\"\n            },\n            caption: \"Inserează descriere\",\n            close: \"\\xcenchide\",\n            submitButton: \"Salvează\",\n            revertButton: \"Revenire\",\n            proportion: \"Constr\\xe2nge proporțiile\",\n            basic: \"De bază\",\n            left: \"St\\xe2nga\",\n            right: \"Dreapta\",\n            center: \"Centru\",\n            width: \"Lățime\",\n            height: \"\\xcenălțime\",\n            size: \"Dimensiune\",\n            ratio: \"Ratie\"\n        },\n        controller: {\n            edit: \"Editează\",\n            unlink: \"Scoate link\",\n            remove: \"Elimină\",\n            insertRowAbove: \"Inserează r\\xe2nd deasupra\",\n            insertRowBelow: \"Inserează r\\xe2nd dedesupt\",\n            deleteRow: \"Șterge linie\",\n            insertColumnBefore: \"Inserează coloană \\xeenainte\",\n            insertColumnAfter: \"Inserează coloană după\",\n            deleteColumn: \"Șterge coloană\",\n            fixedColumnWidth: \"Lățime fixă coloană\",\n            resize100: \"Redimensionare 100%\",\n            resize75: \"Redimensionare 75%\",\n            resize50: \"Redimensionare 50%\",\n            resize25: \"Redimensionare 25%\",\n            autoSize: \"Dimensiune automată\",\n            mirrorHorizontal: \"Oglindă, orizontal\",\n            mirrorVertical: \"Oglindă, vertical\",\n            rotateLeft: \"Rotește la st\\xe2nga\",\n            rotateRight: \"Rotește la dreapta\",\n            maxSize: \"Dimensiune maximă\",\n            minSize: \"Dimensiune minimă\",\n            tableHeader: \"Antet tabel\",\n            mergeCells: \"\\xcembină celule\",\n            splitCells: \"Divizează celule\",\n            HorizontalSplit: \"Despicare orizontală\",\n            VerticalSplit: \"Despicare verticală\"\n        },\n        menu: {\n            spaced: \"Spațiat\",\n            bordered: \"Mărginit\",\n            neon: \"Neon\",\n            translucent: \"Translucent\",\n            shadow: \"Umbră\",\n            code: \"Citat\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ro\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ro.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ru.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ru.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ru\",\n        toolbar: {\n            default: \"По умолчанию\",\n            save: \"Сохранить\",\n            font: \"Шрифт\",\n            formats: \"Стиль абзаца\",\n            fontSize: \"Размер шрифта\",\n            bold: \"Полужирный\",\n            underline: \"Подчёркнутый\",\n            italic: \"Курсив\",\n            strike: \"Зачеркнутый\",\n            subscript: \"Нижний индекс\",\n            superscript: \"Верхний индекс\",\n            removeFormat: \"Очистить форматирование\",\n            fontColor: \"Цвет текста\",\n            hiliteColor: \"Цвет фона\",\n            indent: \"Увеличить отступ\",\n            outdent: \"Уменьшить отступ\",\n            align: \"Выравнивание\",\n            alignLeft: \"Слева\",\n            alignRight: \"Справа\",\n            alignCenter: \"По центру\",\n            alignJustify: \"По ширине\",\n            list: \"Списки\",\n            orderList: \"Нумерованный\",\n            unorderList: \"Маркированный\",\n            horizontalRule: \"Горизонтальная линия\",\n            hr_solid: \"Сплошная\",\n            hr_dotted: \"Пунктир\",\n            hr_dashed: \"Штриховая\",\n            table: \"Таблица\",\n            link: \"Ссылка\",\n            math: \"математический\",\n            image: \"Изображение\",\n            video: \"Видео\",\n            audio: \"Аудио\",\n            fullScreen: \"Полный экран\",\n            showBlocks: \"Блочный вид\",\n            codeView: \"Редактировать HTML\",\n            undo: \"Отменить\",\n            redo: \"Вернуть\",\n            preview: \"Предварительный просмотр\",\n            print: \"Печать\",\n            tag_p: \"Текст\",\n            tag_div: \"Базовый\",\n            tag_h: \"Заголовок\",\n            tag_blockquote: \"Цитата\",\n            tag_pre: \"Код\",\n            template: \"Шаблон\",\n            lineHeight: \"Высота линии\",\n            paragraphStyle: \"Стиль абзаца\",\n            textStyle: \"Стиль текста\",\n            imageGallery: \"Галерея\",\n            dir_ltr: \"Слева направо\",\n            dir_rtl: \"Справа налево\",\n            mention: \"Упоминание\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Вставить ссылку\",\n                url: \"Ссылка\",\n                text: \"Текст\",\n                newWindowCheck: \"Открывать в новом окне\",\n                downloadLinkCheck: \"Ссылка для скачивания\",\n                bookmark: \"Закладка\"\n            },\n            mathBox: {\n                title: \"математический\",\n                inputLabel: \"Математическая запись\",\n                fontSizeLabel: \"Кегль\",\n                previewLabel: \"Предварительный просмотр\"\n            },\n            imageBox: {\n                title: \"Вставить изображение\",\n                file: \"Выберите файл\",\n                url: \"Адрес изображения\",\n                altText: \"Текстовое описание изображения\"\n            },\n            videoBox: {\n                title: \"Вставить видео\",\n                file: \"Выберите файл\",\n                url: \"Ссылка на видео, Youtube,Vimeo\"\n            },\n            audioBox: {\n                title: \"Вставить аудио\",\n                file: \"Выберите файл\",\n                url: \"Адрес аудио\"\n            },\n            browser: {\n                tags: \"Теги\",\n                search: \"Поиск\"\n            },\n            caption: \"Добавить подпись\",\n            close: \"Закрыть\",\n            submitButton: \"Подтвердить\",\n            revertButton: \"Сбросить\",\n            proportion: \"Сохранить пропорции\",\n            basic: \"Без обтекания\",\n            left: \"Слева\",\n            right: \"Справа\",\n            center: \"По центру\",\n            width: \"Ширина\",\n            height: \"Высота\",\n            size: \"Размер\",\n            ratio: \"Соотношение\"\n        },\n        controller: {\n            edit: \"Изменить\",\n            unlink: \"Убрать ссылку\",\n            remove: \"Удалить\",\n            insertRowAbove: \"Вставить строку выше\",\n            insertRowBelow: \"Вставить строку ниже\",\n            deleteRow: \"Удалить строку\",\n            insertColumnBefore: \"Вставить столбец слева\",\n            insertColumnAfter: \"Вставить столбец справа\",\n            deleteColumn: \"Удалить столбец\",\n            fixedColumnWidth: \"Фиксированная ширина столбца\",\n            resize100: \"Размер 100%\",\n            resize75: \"Размер 75%\",\n            resize50: \"Размер 50%\",\n            resize25: \"Размер 25%\",\n            autoSize: \"Авто размер\",\n            mirrorHorizontal: \"Отразить по горизонтали\",\n            mirrorVertical: \"Отразить по вертикали\",\n            rotateLeft: \"Повернуть против часовой стрелки\",\n            rotateRight: \"Повернуть по часовой стрелке\",\n            maxSize: \"Ширина по размеру страницы\",\n            minSize: \"Ширина по содержимому\",\n            tableHeader: \"Строка заголовков\",\n            mergeCells: \"Объединить ячейки\",\n            splitCells: \"Разделить ячейку\",\n            HorizontalSplit: \"Разделить горизонтально\",\n            VerticalSplit: \"Разделить вертикально\"\n        },\n        menu: {\n            spaced: \"интервал\",\n            bordered: \"Граничная Линия\",\n            neon: \"неон\",\n            translucent: \"полупрозрачный\",\n            shadow: \"Тень\",\n            code: \"Код\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ru\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9sYW5nL3J1LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRUMsVUFBVUEsTUFBTSxFQUFFQyxPQUFPO0lBQ3RCLElBQUksS0FBa0IsSUFBWSxPQUFPQyxPQUFPQyxPQUFPLEtBQUssVUFBVTtRQUNsRUQsT0FBT0MsT0FBTyxHQUFHSCxPQUFPSSxRQUFRLEdBQzVCSCxRQUFRRCxRQUFRLFFBQ2hCLFNBQVVLLENBQUM7WUFDUCxJQUFJLENBQUNBLEVBQUVELFFBQVEsRUFBRTtnQkFDYixNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxPQUFPTCxRQUFRSTtRQUNuQjtJQUNSLE9BQU87UUFDSEosUUFBUUQ7SUFDWjtBQUNKLEdBQUUsTUFBa0IsR0FBY08sQ0FBTUEsR0FBRyxRQUFNLFNBQVVBLE9BQU0sRUFBRUMsUUFBUTtJQUN2RSxNQUFNQyxPQUFPO1FBQ1RDLE1BQU07UUFDTkMsU0FBUztZQUNMQyxTQUFTO1lBQ1RDLE1BQU07WUFDTkMsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLFVBQVU7WUFDVkMsTUFBTTtZQUNOQyxXQUFXO1lBQ1hDLFFBQVE7WUFDUkMsUUFBUTtZQUNSQyxXQUFXO1lBQ1hDLGFBQWE7WUFDYkMsY0FBYztZQUNkQyxXQUFXO1lBQ1hDLGFBQWE7WUFDYkMsUUFBUTtZQUNSQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsV0FBVztZQUNYQyxZQUFZO1lBQ1pDLGFBQWE7WUFDYkMsY0FBYztZQUNkQyxNQUFNO1lBQ05DLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxnQkFBZ0I7WUFDaEJDLFVBQVU7WUFDVkMsV0FBVztZQUNYQyxXQUFXO1lBQ1hDLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLE9BQU87WUFDUEMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLFlBQVk7WUFDWkMsWUFBWTtZQUNaQyxVQUFVO1lBQ1ZDLE1BQU07WUFDTkMsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsT0FBTztZQUNQQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsZ0JBQWdCO1lBQ2hCQyxTQUFTO1lBQ1RDLFVBQVU7WUFDVkMsWUFBWTtZQUNaQyxnQkFBZ0I7WUFDaEJDLFdBQVc7WUFDWEMsY0FBYztZQUNkQyxTQUFTO1lBQ1RDLFNBQVM7WUFDVEMsU0FBUztRQUNiO1FBQ0FDLFdBQVc7WUFDUEMsU0FBUztnQkFDTEMsT0FBTztnQkFDUEMsS0FBSztnQkFDTEMsTUFBTTtnQkFDTkMsZ0JBQWdCO2dCQUNoQkMsbUJBQW1CO2dCQUNuQkMsVUFBVTtZQUNkO1lBQ0FDLFNBQVM7Z0JBQ0xOLE9BQU87Z0JBQ1BPLFlBQVk7Z0JBQ1pDLGVBQWU7Z0JBQ2ZDLGNBQWM7WUFDbEI7WUFDQUMsVUFBVTtnQkFDTlYsT0FBTztnQkFDUFcsTUFBTTtnQkFDTlYsS0FBSztnQkFDTFcsU0FBUztZQUNiO1lBQ0FDLFVBQVU7Z0JBQ05iLE9BQU87Z0JBQ1BXLE1BQU07Z0JBQ05WLEtBQUs7WUFDVDtZQUNBYSxVQUFVO2dCQUNOZCxPQUFPO2dCQUNQVyxNQUFNO2dCQUNOVixLQUFLO1lBQ1Q7WUFDQWMsU0FBUztnQkFDTEMsTUFBTTtnQkFDTkMsUUFBUTtZQUNaO1lBQ0FDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxjQUFjO1lBQ2RDLGNBQWM7WUFDZEMsWUFBWTtZQUNaQyxPQUFPO1lBQ1BDLE1BQU07WUFDTkMsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxNQUFNO1lBQ05DLE9BQU87UUFDWDtRQUNBQyxZQUFZO1lBQ1JDLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxRQUFRO1lBQ1JDLGdCQUFnQjtZQUNoQkMsZ0JBQWdCO1lBQ2hCQyxXQUFXO1lBQ1hDLG9CQUFvQjtZQUNwQkMsbUJBQW1CO1lBQ25CQyxjQUFjO1lBQ2RDLGtCQUFrQjtZQUNsQkMsV0FBVztZQUNYQyxVQUFVO1lBQ1ZDLFVBQVU7WUFDVkMsVUFBVTtZQUNWQyxVQUFVO1lBQ1ZDLGtCQUFrQjtZQUNsQkMsZ0JBQWdCO1lBQ2hCQyxZQUFZO1lBQ1pDLGFBQWE7WUFDYkMsU0FBUztZQUNUQyxTQUFTO1lBQ1RDLGFBQWE7WUFDYkMsWUFBWTtZQUNaQyxZQUFZO1lBQ1pDLGlCQUFpQjtZQUNqQkMsZUFBZTtRQUNuQjtRQUNBQyxNQUFNO1lBQ0ZDLFFBQVE7WUFDUkMsVUFBVTtZQUNWQyxNQUFNO1lBQ05DLGFBQWE7WUFDYkMsUUFBUTtZQUNSekgsTUFBTTtRQUNWO0lBQ0o7SUFFQSxJQUFJLE9BQU9GLGFBQWEsT0FBTzRILFdBQVc7UUFDdEMsSUFBSSxDQUFDN0gsUUFBTzhILGNBQWMsRUFBRTtZQUN4QkMsT0FBT0MsY0FBYyxDQUFDaEksU0FBUSxrQkFBa0I7Z0JBQzVDaUksWUFBWTtnQkFDWkMsVUFBVTtnQkFDVkMsY0FBYztnQkFDZEMsT0FBTyxDQUFDO1lBQ1o7UUFDSjtRQUVBTCxPQUFPQyxjQUFjLENBQUNoSSxRQUFPOEgsY0FBYyxFQUFFLE1BQU07WUFDL0NHLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLE9BQU9sSTtRQUNYO0lBQ0o7SUFFQSxPQUFPQTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvcnUuanM/N2ZkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXG4gKlxuICogc3VuZWRpdG9yLmpzXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxuICogTUlUIGxpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxuICAgICAgICAgICAgZnVuY3Rpb24gKHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTEFORyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XG4gICAgICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcbiAgICB9XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKHdpbmRvdywgbm9HbG9iYWwpIHtcbiAgICBjb25zdCBsYW5nID0ge1xuICAgICAgICBjb2RlOiAncnUnLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAn0J/QviDRg9C80L7Qu9GH0LDQvdC40Y4nLFxuICAgICAgICAgICAgc2F2ZTogJ9Ch0L7RhdGA0LDQvdC40YLRjCcsXG4gICAgICAgICAgICBmb250OiAn0KjRgNC40YTRgicsXG4gICAgICAgICAgICBmb3JtYXRzOiAn0KHRgtC40LvRjCDQsNCx0LfQsNGG0LAnLFxuICAgICAgICAgICAgZm9udFNpemU6ICfQoNCw0LfQvNC10YAg0YjRgNC40YTRgtCwJyxcbiAgICAgICAgICAgIGJvbGQ6ICfQn9C+0LvRg9C20LjRgNC90YvQuScsXG4gICAgICAgICAgICB1bmRlcmxpbmU6ICfQn9C+0LTRh9GR0YDQutC90YPRgtGL0LknLFxuICAgICAgICAgICAgaXRhbGljOiAn0JrRg9GA0YHQuNCyJyxcbiAgICAgICAgICAgIHN0cmlrZTogJ9CX0LDRh9C10YDQutC90YPRgtGL0LknLFxuICAgICAgICAgICAgc3Vic2NyaXB0OiAn0J3QuNC20L3QuNC5INC40L3QtNC10LrRgScsXG4gICAgICAgICAgICBzdXBlcnNjcmlwdDogJ9CS0LXRgNGF0L3QuNC5INC40L3QtNC10LrRgScsXG4gICAgICAgICAgICByZW1vdmVGb3JtYXQ6ICfQntGH0LjRgdGC0LjRgtGMINGE0L7RgNC80LDRgtC40YDQvtCy0LDQvdC40LUnLFxuICAgICAgICAgICAgZm9udENvbG9yOiAn0KbQstC10YIg0YLQtdC60YHRgtCwJyxcbiAgICAgICAgICAgIGhpbGl0ZUNvbG9yOiAn0KbQstC10YIg0YTQvtC90LAnLFxuICAgICAgICAgICAgaW5kZW50OiAn0KPQstC10LvQuNGH0LjRgtGMINC+0YLRgdGC0YPQvycsXG4gICAgICAgICAgICBvdXRkZW50OiAn0KPQvNC10L3RjNGI0LjRgtGMINC+0YLRgdGC0YPQvycsXG4gICAgICAgICAgICBhbGlnbjogJ9CS0YvRgNCw0LLQvdC40LLQsNC90LjQtScsXG4gICAgICAgICAgICBhbGlnbkxlZnQ6ICfQodC70LXQstCwJyxcbiAgICAgICAgICAgIGFsaWduUmlnaHQ6ICfQodC/0YDQsNCy0LAnLFxuICAgICAgICAgICAgYWxpZ25DZW50ZXI6ICfQn9C+INGG0LXQvdGC0YDRgycsXG4gICAgICAgICAgICBhbGlnbkp1c3RpZnk6ICfQn9C+INGI0LjRgNC40L3QtScsXG4gICAgICAgICAgICBsaXN0OiAn0KHQv9C40YHQutC4JyxcbiAgICAgICAgICAgIG9yZGVyTGlzdDogJ9Cd0YPQvNC10YDQvtCy0LDQvdC90YvQuScsXG4gICAgICAgICAgICB1bm9yZGVyTGlzdDogJ9Cc0LDRgNC60LjRgNC+0LLQsNC90L3Ri9C5JyxcbiAgICAgICAgICAgIGhvcml6b250YWxSdWxlOiAn0JPQvtGA0LjQt9C+0L3RgtCw0LvRjNC90LDRjyDQu9C40L3QuNGPJyxcbiAgICAgICAgICAgIGhyX3NvbGlkOiAn0KHQv9C70L7RiNC90LDRjycsXG4gICAgICAgICAgICBocl9kb3R0ZWQ6ICfQn9GD0L3QutGC0LjRgCcsXG4gICAgICAgICAgICBocl9kYXNoZWQ6ICfQqNGC0YDQuNGF0L7QstCw0Y8nLFxuICAgICAgICAgICAgdGFibGU6ICfQotCw0LHQu9C40YbQsCcsXG4gICAgICAgICAgICBsaW5rOiAn0KHRgdGL0LvQutCwJyxcbiAgICAgICAgICAgIG1hdGg6ICfQvNCw0YLQtdC80LDRgtC40YfQtdGB0LrQuNC5JyxcbiAgICAgICAgICAgIGltYWdlOiAn0JjQt9C+0LHRgNCw0LbQtdC90LjQtScsXG4gICAgICAgICAgICB2aWRlbzogJ9CS0LjQtNC10L4nLFxuICAgICAgICAgICAgYXVkaW86ICfQkNGD0LTQuNC+JyxcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46ICfQn9C+0LvQvdGL0Lkg0Y3QutGA0LDQvScsXG4gICAgICAgICAgICBzaG93QmxvY2tzOiAn0JHQu9C+0YfQvdGL0Lkg0LLQuNC0JyxcbiAgICAgICAgICAgIGNvZGVWaWV3OiAn0KDQtdC00LDQutGC0LjRgNC+0LLQsNGC0YwgSFRNTCcsXG4gICAgICAgICAgICB1bmRvOiAn0J7RgtC80LXQvdC40YLRjCcsXG4gICAgICAgICAgICByZWRvOiAn0JLQtdGA0L3Rg9GC0YwnLFxuICAgICAgICAgICAgcHJldmlldzogJ9Cf0YDQtdC00LLQsNGA0LjRgtC10LvRjNC90YvQuSDQv9GA0L7RgdC80L7RgtGAJyxcbiAgICAgICAgICAgIHByaW50OiAn0J/QtdGH0LDRgtGMJyxcbiAgICAgICAgICAgIHRhZ19wOiAn0KLQtdC60YHRgicsXG4gICAgICAgICAgICB0YWdfZGl2OiAn0JHQsNC30L7QstGL0LknLFxuICAgICAgICAgICAgdGFnX2g6ICfQl9Cw0LPQvtC70L7QstC+0LonLFxuICAgICAgICAgICAgdGFnX2Jsb2NrcXVvdGU6ICfQptC40YLQsNGC0LAnLFxuICAgICAgICAgICAgdGFnX3ByZTogJ9Ca0L7QtCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ9Co0LDQsdC70L7QvScsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAn0JLRi9GB0L7RgtCwINC70LjQvdC40LgnLFxuICAgICAgICAgICAgcGFyYWdyYXBoU3R5bGU6ICfQodGC0LjQu9GMINCw0LHQt9Cw0YbQsCcsXG4gICAgICAgICAgICB0ZXh0U3R5bGU6ICfQodGC0LjQu9GMINGC0LXQutGB0YLQsCcsXG4gICAgICAgICAgICBpbWFnZUdhbGxlcnk6ICfQk9Cw0LvQtdGA0LXRjycsXG4gICAgICAgICAgICBkaXJfbHRyOiAn0KHQu9C10LLQsCDQvdCw0L/RgNCw0LLQvicsXG4gICAgICAgICAgICBkaXJfcnRsOiAn0KHQv9GA0LDQstCwINC90LDQu9C10LLQvicsXG4gICAgICAgICAgICBtZW50aW9uOiAn0KPQv9C+0LzQuNC90LDQvdC40LUnXG4gICAgICAgIH0sXG4gICAgICAgIGRpYWxvZ0JveDoge1xuICAgICAgICAgICAgbGlua0JveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAn0JLRgdGC0LDQstC40YLRjCDRgdGB0YvQu9C60YMnLFxuICAgICAgICAgICAgICAgIHVybDogJ9Ch0YHRi9C70LrQsCcsXG4gICAgICAgICAgICAgICAgdGV4dDogJ9Ci0LXQutGB0YInLFxuICAgICAgICAgICAgICAgIG5ld1dpbmRvd0NoZWNrOiAn0J7RgtC60YDRi9Cy0LDRgtGMINCyINC90L7QstC+0Lwg0L7QutC90LUnLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkTGlua0NoZWNrOiAn0KHRgdGL0LvQutCwINC00LvRjyDRgdC60LDRh9C40LLQsNC90LjRjycsXG4gICAgICAgICAgICAgICAgYm9va21hcms6ICfQl9Cw0LrQu9Cw0LTQutCwJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdGhCb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9C80LDRgtC10LzQsNGC0LjRh9C10YHQutC40LknLFxuICAgICAgICAgICAgICAgIGlucHV0TGFiZWw6ICfQnNCw0YLQtdC80LDRgtC40YfQtdGB0LrQsNGPINC30LDQv9C40YHRjCcsXG4gICAgICAgICAgICAgICAgZm9udFNpemVMYWJlbDogJ9Ca0LXQs9C70YwnLFxuICAgICAgICAgICAgICAgIHByZXZpZXdMYWJlbDogJ9Cf0YDQtdC00LLQsNGA0LjRgtC10LvRjNC90YvQuSDQv9GA0L7RgdC80L7RgtGAJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQktGB0YLQsNCy0LjRgtGMINC40LfQvtCx0YDQsNC20LXQvdC40LUnLFxuICAgICAgICAgICAgICAgIGZpbGU6ICfQktGL0LHQtdGA0LjRgtC1INGE0LDQudC7JyxcbiAgICAgICAgICAgICAgICB1cmw6ICfQkNC00YDQtdGBINC40LfQvtCx0YDQsNC20LXQvdC40Y8nLFxuICAgICAgICAgICAgICAgIGFsdFRleHQ6ICfQotC10LrRgdGC0L7QstC+0LUg0L7Qv9C40YHQsNC90LjQtSDQuNC30L7QsdGA0LDQttC10L3QuNGPJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpZGVvQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQktGB0YLQsNCy0LjRgtGMINCy0LjQtNC10L4nLFxuICAgICAgICAgICAgICAgIGZpbGU6ICfQktGL0LHQtdGA0LjRgtC1INGE0LDQudC7JyxcbiAgICAgICAgICAgICAgICB1cmw6ICfQodGB0YvQu9C60LAg0L3QsCDQstC40LTQtdC+LCBZb3V0dWJlLFZpbWVvJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1ZGlvQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQktGB0YLQsNCy0LjRgtGMINCw0YPQtNC40L4nLFxuICAgICAgICAgICAgICAgIGZpbGU6ICfQktGL0LHQtdGA0LjRgtC1INGE0LDQudC7JyxcbiAgICAgICAgICAgICAgICB1cmw6ICfQkNC00YDQtdGBINCw0YPQtNC40L4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3Nlcjoge1xuICAgICAgICAgICAgICAgIHRhZ3M6ICfQotC10LPQuCcsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiAn0J/QvtC40YHQuicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FwdGlvbjogJ9CU0L7QsdCw0LLQuNGC0Ywg0L/QvtC00L/QuNGB0YwnLFxuICAgICAgICAgICAgY2xvc2U6ICfQl9Cw0LrRgNGL0YLRjCcsXG4gICAgICAgICAgICBzdWJtaXRCdXR0b246ICfQn9C+0LTRgtCy0LXRgNC00LjRgtGMJyxcbiAgICAgICAgICAgIHJldmVydEJ1dHRvbjogJ9Ch0LHRgNC+0YHQuNGC0YwnLFxuICAgICAgICAgICAgcHJvcG9ydGlvbjogJ9Ch0L7RhdGA0LDQvdC40YLRjCDQv9GA0L7Qv9C+0YDRhtC40LgnLFxuICAgICAgICAgICAgYmFzaWM6ICfQkdC10Lcg0L7QsdGC0LXQutCw0L3QuNGPJyxcbiAgICAgICAgICAgIGxlZnQ6ICfQodC70LXQstCwJyxcbiAgICAgICAgICAgIHJpZ2h0OiAn0KHQv9GA0LDQstCwJyxcbiAgICAgICAgICAgIGNlbnRlcjogJ9Cf0L4g0YbQtdC90YLRgNGDJyxcbiAgICAgICAgICAgIHdpZHRoOiAn0KjQuNGA0LjQvdCwJyxcbiAgICAgICAgICAgIGhlaWdodDogJ9CS0YvRgdC+0YLQsCcsXG4gICAgICAgICAgICBzaXplOiAn0KDQsNC30LzQtdGAJyxcbiAgICAgICAgICAgIHJhdGlvOiAn0KHQvtC+0YLQvdC+0YjQtdC90LjQtSdcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICAgICAgZWRpdDogJ9CY0LfQvNC10L3QuNGC0YwnLFxuICAgICAgICAgICAgdW5saW5rOiAn0KPQsdGA0LDRgtGMINGB0YHRi9C70LrRgycsXG4gICAgICAgICAgICByZW1vdmU6ICfQo9C00LDQu9C40YLRjCcsXG4gICAgICAgICAgICBpbnNlcnRSb3dBYm92ZTogJ9CS0YHRgtCw0LLQuNGC0Ywg0YHRgtGA0L7QutGDINCy0YvRiNC1JyxcbiAgICAgICAgICAgIGluc2VydFJvd0JlbG93OiAn0JLRgdGC0LDQstC40YLRjCDRgdGC0YDQvtC60YMg0L3QuNC20LUnLFxuICAgICAgICAgICAgZGVsZXRlUm93OiAn0KPQtNCw0LvQuNGC0Ywg0YHRgtGA0L7QutGDJyxcbiAgICAgICAgICAgIGluc2VydENvbHVtbkJlZm9yZTogJ9CS0YHRgtCw0LLQuNGC0Ywg0YHRgtC+0LvQsdC10YYg0YHQu9C10LLQsCcsXG4gICAgICAgICAgICBpbnNlcnRDb2x1bW5BZnRlcjogJ9CS0YHRgtCw0LLQuNGC0Ywg0YHRgtC+0LvQsdC10YYg0YHQv9GA0LDQstCwJyxcbiAgICAgICAgICAgIGRlbGV0ZUNvbHVtbjogJ9Cj0LTQsNC70LjRgtGMINGB0YLQvtC70LHQtdGGJyxcbiAgICAgICAgICAgIGZpeGVkQ29sdW1uV2lkdGg6ICfQpNC40LrRgdC40YDQvtCy0LDQvdC90LDRjyDRiNC40YDQuNC90LAg0YHRgtC+0LvQsdGG0LAnLFxuICAgICAgICAgICAgcmVzaXplMTAwOiAn0KDQsNC30LzQtdGAIDEwMCUnLFxuICAgICAgICAgICAgcmVzaXplNzU6ICfQoNCw0LfQvNC10YAgNzUlJyxcbiAgICAgICAgICAgIHJlc2l6ZTUwOiAn0KDQsNC30LzQtdGAIDUwJScsXG4gICAgICAgICAgICByZXNpemUyNTogJ9Cg0LDQt9C80LXRgCAyNSUnLFxuICAgICAgICAgICAgYXV0b1NpemU6ICfQkNCy0YLQviDRgNCw0LfQvNC10YAnLFxuICAgICAgICAgICAgbWlycm9ySG9yaXpvbnRhbDogJ9Ce0YLRgNCw0LfQuNGC0Ywg0L/QviDQs9C+0YDQuNC30L7QvdGC0LDQu9C4JyxcbiAgICAgICAgICAgIG1pcnJvclZlcnRpY2FsOiAn0J7RgtGA0LDQt9C40YLRjCDQv9C+INCy0LXRgNGC0LjQutCw0LvQuCcsXG4gICAgICAgICAgICByb3RhdGVMZWZ0OiAn0J/QvtCy0LXRgNC90YPRgtGMINC/0YDQvtGC0LjQsiDRh9Cw0YHQvtCy0L7QuSDRgdGC0YDQtdC70LrQuCcsXG4gICAgICAgICAgICByb3RhdGVSaWdodDogJ9Cf0L7QstC10YDQvdGD0YLRjCDQv9C+INGH0LDRgdC+0LLQvtC5INGB0YLRgNC10LvQutC1JyxcbiAgICAgICAgICAgIG1heFNpemU6ICfQqNC40YDQuNC90LAg0L/QviDRgNCw0LfQvNC10YDRgyDRgdGC0YDQsNC90LjRhtGLJyxcbiAgICAgICAgICAgIG1pblNpemU6ICfQqNC40YDQuNC90LAg0L/QviDRgdC+0LTQtdGA0LbQuNC80L7QvNGDJyxcbiAgICAgICAgICAgIHRhYmxlSGVhZGVyOiAn0KHRgtGA0L7QutCwINC30LDQs9C+0LvQvtCy0LrQvtCyJyxcbiAgICAgICAgICAgIG1lcmdlQ2VsbHM6ICfQntCx0YrQtdC00LjQvdC40YLRjCDRj9GH0LXQudC60LgnLFxuICAgICAgICAgICAgc3BsaXRDZWxsczogJ9Cg0LDQt9C00LXQu9C40YLRjCDRj9GH0LXQudC60YMnLFxuICAgICAgICAgICAgSG9yaXpvbnRhbFNwbGl0OiAn0KDQsNC30LTQtdC70LjRgtGMINCz0L7RgNC40LfQvtC90YLQsNC70YzQvdC+JyxcbiAgICAgICAgICAgIFZlcnRpY2FsU3BsaXQ6ICfQoNCw0LfQtNC10LvQuNGC0Ywg0LLQtdGA0YLQuNC60LDQu9GM0L3QvidcbiAgICAgICAgfSxcbiAgICAgICAgbWVudToge1xuICAgICAgICAgICAgc3BhY2VkOiAn0LjQvdGC0LXRgNCy0LDQuycsXG4gICAgICAgICAgICBib3JkZXJlZDogJ9CT0YDQsNC90LjRh9C90LDRjyDQm9C40L3QuNGPJyxcbiAgICAgICAgICAgIG5lb246ICfQvdC10L7QvScsXG4gICAgICAgICAgICB0cmFuc2x1Y2VudDogJ9C/0L7Qu9GD0L/RgNC+0LfRgNCw0YfQvdGL0LknLFxuICAgICAgICAgICAgc2hhZG93OiAn0KLQtdC90YwnLFxuICAgICAgICAgICAgY29kZTogJ9Ca0L7QtCdcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIG5vR2xvYmFsID09PSB0eXBlb2YgdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghd2luZG93LlNVTkVESVRPUl9MQU5HKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnU1VORURJVE9SX0xBTkcnLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWx1ZToge31cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5TVU5FRElUT1JfTEFORywgJ3J1Jywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGxhbmdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhbmc7XG59KSk7Il0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImxhbmciLCJjb2RlIiwidG9vbGJhciIsImRlZmF1bHQiLCJzYXZlIiwiZm9udCIsImZvcm1hdHMiLCJmb250U2l6ZSIsImJvbGQiLCJ1bmRlcmxpbmUiLCJpdGFsaWMiLCJzdHJpa2UiLCJzdWJzY3JpcHQiLCJzdXBlcnNjcmlwdCIsInJlbW92ZUZvcm1hdCIsImZvbnRDb2xvciIsImhpbGl0ZUNvbG9yIiwiaW5kZW50Iiwib3V0ZGVudCIsImFsaWduIiwiYWxpZ25MZWZ0IiwiYWxpZ25SaWdodCIsImFsaWduQ2VudGVyIiwiYWxpZ25KdXN0aWZ5IiwibGlzdCIsIm9yZGVyTGlzdCIsInVub3JkZXJMaXN0IiwiaG9yaXpvbnRhbFJ1bGUiLCJocl9zb2xpZCIsImhyX2RvdHRlZCIsImhyX2Rhc2hlZCIsInRhYmxlIiwibGluayIsIm1hdGgiLCJpbWFnZSIsInZpZGVvIiwiYXVkaW8iLCJmdWxsU2NyZWVuIiwic2hvd0Jsb2NrcyIsImNvZGVWaWV3IiwidW5kbyIsInJlZG8iLCJwcmV2aWV3IiwicHJpbnQiLCJ0YWdfcCIsInRhZ19kaXYiLCJ0YWdfaCIsInRhZ19ibG9ja3F1b3RlIiwidGFnX3ByZSIsInRlbXBsYXRlIiwibGluZUhlaWdodCIsInBhcmFncmFwaFN0eWxlIiwidGV4dFN0eWxlIiwiaW1hZ2VHYWxsZXJ5IiwiZGlyX2x0ciIsImRpcl9ydGwiLCJtZW50aW9uIiwiZGlhbG9nQm94IiwibGlua0JveCIsInRpdGxlIiwidXJsIiwidGV4dCIsIm5ld1dpbmRvd0NoZWNrIiwiZG93bmxvYWRMaW5rQ2hlY2siLCJib29rbWFyayIsIm1hdGhCb3giLCJpbnB1dExhYmVsIiwiZm9udFNpemVMYWJlbCIsInByZXZpZXdMYWJlbCIsImltYWdlQm94IiwiZmlsZSIsImFsdFRleHQiLCJ2aWRlb0JveCIsImF1ZGlvQm94IiwiYnJvd3NlciIsInRhZ3MiLCJzZWFyY2giLCJjYXB0aW9uIiwiY2xvc2UiLCJzdWJtaXRCdXR0b24iLCJyZXZlcnRCdXR0b24iLCJwcm9wb3J0aW9uIiwiYmFzaWMiLCJsZWZ0IiwicmlnaHQiLCJjZW50ZXIiLCJ3aWR0aCIsImhlaWdodCIsInNpemUiLCJyYXRpbyIsImNvbnRyb2xsZXIiLCJlZGl0IiwidW5saW5rIiwicmVtb3ZlIiwiaW5zZXJ0Um93QWJvdmUiLCJpbnNlcnRSb3dCZWxvdyIsImRlbGV0ZVJvdyIsImluc2VydENvbHVtbkJlZm9yZSIsImluc2VydENvbHVtbkFmdGVyIiwiZGVsZXRlQ29sdW1uIiwiZml4ZWRDb2x1bW5XaWR0aCIsInJlc2l6ZTEwMCIsInJlc2l6ZTc1IiwicmVzaXplNTAiLCJyZXNpemUyNSIsImF1dG9TaXplIiwibWlycm9ySG9yaXpvbnRhbCIsIm1pcnJvclZlcnRpY2FsIiwicm90YXRlTGVmdCIsInJvdGF0ZVJpZ2h0IiwibWF4U2l6ZSIsIm1pblNpemUiLCJ0YWJsZUhlYWRlciIsIm1lcmdlQ2VsbHMiLCJzcGxpdENlbGxzIiwiSG9yaXpvbnRhbFNwbGl0IiwiVmVydGljYWxTcGxpdCIsIm1lbnUiLCJzcGFjZWQiLCJib3JkZXJlZCIsIm5lb24iLCJ0cmFuc2x1Y2VudCIsInNoYWRvdyIsInVuZGVmaW5lZCIsIlNVTkVESVRPUl9MQU5HIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ru.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/se.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/se.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * \n * Swedish translation by olehrb at github or gmail\n *\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"se\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Spara\",\n            font: \"Typsnitt\",\n            formats: \"Format\",\n            fontSize: \"Textstorlek\",\n            bold: \"Fet\",\n            underline: \"Understruket\",\n            italic: \"Kursiv\",\n            strike: \"\\xd6verstruket\",\n            subscript: \"S\\xe4nkt skrift\",\n            superscript: \"H\\xf6jd skrift\",\n            removeFormat: \"Ta bort formattering\",\n            fontColor: \"Textf\\xe4rg\",\n            hiliteColor: \"Bakgrundsf\\xe4rg\",\n            indent: \"Minska indrag\",\n            outdent: \"\\xd6ka indrag\",\n            align: \"Justering\",\n            alignLeft: \"V\\xe4nsterjustering\",\n            alignRight: \"H\\xf6gerjustering\",\n            alignCenter: \"Mittenjusteirng\",\n            alignJustify: \"Justera indrag\",\n            list: \"Listor\",\n            orderList: \"Numrerad lista\",\n            unorderList: \"Oordnad lista\",\n            horizontalRule: \"Horisontell linje\",\n            hr_solid: \"Solid\",\n            hr_dotted: \"Punkter\",\n            hr_dashed: \"Prickad\",\n            table: \"Tabell\",\n            link: \"L\\xe4nk\",\n            math: \"Math\",\n            image: \"Bild\",\n            video: \"Video\",\n            audio: \"Ljud\",\n            fullScreen: \"Helsk\\xe4rm\",\n            showBlocks: \"Visa block\",\n            codeView: \"Visa koder\",\n            undo: \"\\xc5ngra\",\n            redo: \"G\\xf6r om\",\n            preview: \"Preview\",\n            print: \"Print\",\n            tag_p: \"Paragraf\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Rubrik\",\n            tag_blockquote: \"Citer\",\n            tag_pre: \"Kod\",\n            template: \"Mall\",\n            lineHeight: \"Linjeh\\xf6jd\",\n            paragraphStyle: \"Stil p\\xe5 stycke\",\n            textStyle: \"Textstil\",\n            imageGallery: \"Bildgalleri\",\n            dir_ltr: \"V\\xe4nster till h\\xf6ger\",\n            dir_rtl: \"H\\xf6ger till v\\xe4nster\",\n            mention: \"Namn\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"L\\xe4gg till l\\xe4nk\",\n                url: \"URL till l\\xe4nk\",\n                text: \"L\\xe4nktext\",\n                newWindowCheck: \"\\xd6ppna i nytt f\\xf6nster\",\n                downloadLinkCheck: \"Nedladdningsl\\xe4nk\",\n                bookmark: \"Bokm\\xe4rke\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Matematisk notation\",\n                fontSizeLabel: \"Textstorlek\",\n                previewLabel: \"Preview\"\n            },\n            imageBox: {\n                title: \"L\\xe4gg till bild\",\n                file: \"L\\xe4gg till fr\\xe5n fil\",\n                url: \"L\\xe4gg till fr\\xe5n URL\",\n                altText: \"Alternativ text\"\n            },\n            videoBox: {\n                title: \"L\\xe4gg till video\",\n                file: \"L\\xe4gg till fr\\xe5n fil\",\n                url: \"B\\xe4dda in video / YouTube,Vimeo\"\n            },\n            audioBox: {\n                title: \"L\\xe4gg till ljud\",\n                file: \"L\\xe4gg till fr\\xe5n fil\",\n                url: \"L\\xe4gg till fr\\xe5n URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"S\\xf6k\"\n            },\n            caption: \"L\\xe4gg till beskrivning\",\n            close: \"St\\xe4ng\",\n            submitButton: \"Skicka\",\n            revertButton: \"\\xc5terg\\xe5\",\n            proportion: \"Spara proportioner\",\n            basic: \"Basic\",\n            left: \"V\\xe4nster\",\n            right: \"H\\xf6ger\",\n            center: \"Center\",\n            width: \"Bredd\",\n            height: \"H\\xf6jd\",\n            size: \"Storlek\",\n            ratio: \"F\\xf6rh\\xe5llande\"\n        },\n        controller: {\n            edit: \"Redigera\",\n            unlink: \"Ta bort l\\xe4nk\",\n            remove: \"Ta bort\",\n            insertRowAbove: \"L\\xe4gg till rad \\xf6ver\",\n            insertRowBelow: \"L\\xe4gg till rad under\",\n            deleteRow: \"Ta bort rad\",\n            insertColumnBefore: \"L\\xe4gg till kolumn f\\xf6re\",\n            insertColumnAfter: \"L\\xe4gg till kolumn efter\",\n            deleteColumn: \"Ta bort kolumner\",\n            fixedColumnWidth: \"Fast kolumnbredd\",\n            resize100: \"F\\xf6rstora 100%\",\n            resize75: \"F\\xf6rstora 75%\",\n            resize50: \"F\\xf6rstora 50%\",\n            resize25: \"F\\xf6rstora 25%\",\n            autoSize: \"Autostorlek\",\n            mirrorHorizontal: \"Spegling, horisontell\",\n            mirrorVertical: \"Spegling, vertikal\",\n            rotateLeft: \"Rotera till v\\xe4nster\",\n            rotateRight: \"Rotera till h\\xf6ger\",\n            maxSize: \"Maxstorlek\",\n            minSize: \"Minsta storlek\",\n            tableHeader: \"Rubrik tabell\",\n            mergeCells: \"Sammanfoga celler (merge)\",\n            splitCells: \"Separera celler\",\n            HorizontalSplit: \"Separera horisontalt\",\n            VerticalSplit: \"Separera vertikalt\"\n        },\n        menu: {\n            spaced: \"Avst\\xe5nd\",\n            bordered: \"Avgr\\xe4nsningslinje\",\n            neon: \"Neon\",\n            translucent: \"Genomskinlig\",\n            shadow: \"Skugga\",\n            code: \"Kod\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"se\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/se.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ua.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ua.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ua\",\n        toolbar: {\n            default: \"По замовчуванням\",\n            save: \"Зберегти\",\n            font: \"Шрифт\",\n            formats: \"Стиль абзацу\",\n            fontSize: \"Розмір шрифту\",\n            bold: \"Жирний\",\n            underline: \"Підкреслений\",\n            italic: \"Курсив\",\n            strike: \"Перекреслити\",\n            subscript: \"Нижній індекс\",\n            superscript: \"Верхній індекс\",\n            removeFormat: \"Очистити форматування\",\n            fontColor: \"Колір тексту\",\n            hiliteColor: \"Колір виділення\",\n            indent: \"Збільшити відступ\",\n            outdent: \"Зменшити відступ\",\n            align: \"Вирівнювання\",\n            alignLeft: \"За лівим краєм\",\n            alignRight: \"За правим краєм\",\n            alignCenter: \"По центру\",\n            alignJustify: \"За шириною\",\n            list: \"Список\",\n            orderList: \"Нумерований\",\n            unorderList: \"Маркований\",\n            horizontalRule: \"Горизонтальна лінія\",\n            hr_solid: \"Суцільна\",\n            hr_dotted: \"Пунктирна\",\n            hr_dashed: \"Штрихова\",\n            table: \"Таблиця\",\n            link: \"Посилання\",\n            math: \"Формула\",\n            image: \"Зображення\",\n            video: \"Відео\",\n            audio: \"Аудіо\",\n            fullScreen: \"Повний екран\",\n            showBlocks: \"Показати блоки\",\n            codeView: \"Редагувати як HTML\",\n            undo: \"Скасувати\",\n            redo: \"Виконати знову\",\n            preview: \"Попередній перегляд\",\n            print: \"Друк\",\n            tag_p: \"Абзац\",\n            tag_div: \"Базовий\",\n            tag_h: \"Заголовок\",\n            tag_blockquote: \"Цитата\",\n            tag_pre: \"Код\",\n            template: \"Шаблон\",\n            lineHeight: \"Висота лінії\",\n            paragraphStyle: \"Стиль абзацу\",\n            textStyle: \"Стиль тексту\",\n            imageGallery: \"Галерея\",\n            dir_ltr: \"Зліва направо\",\n            dir_rtl: \"Справа наліво\",\n            mention: \"Згадати\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Вставити посилання\",\n                url: \"Посилання\",\n                text: \"Текст\",\n                newWindowCheck: \"Відкривати в новому вікні\",\n                downloadLinkCheck: \"Посилання для завантаження\",\n                bookmark: \"Закладка\"\n            },\n            mathBox: {\n                title: \"Формула\",\n                inputLabel: \"Математична запис\",\n                fontSizeLabel: \"Розмір шрифту\",\n                previewLabel: \"Попередній перегляд\"\n            },\n            imageBox: {\n                title: \"Вставити зображення\",\n                file: \"Виберіть файл\",\n                url: \"Посилання на зображення\",\n                altText: \"Текстовий опис зображення\"\n            },\n            videoBox: {\n                title: \"Вставити відео\",\n                file: \"Виберіть файл\",\n                url: \"Посилання на відео, Youtube, Vimeo\"\n            },\n            audioBox: {\n                title: \"Вставити аудіо\",\n                file: \"Виберіть файл\",\n                url: \"Посилання на аудіо\"\n            },\n            browser: {\n                tags: \"Теги\",\n                search: \"Пошук\"\n            },\n            caption: \"Додати підпис\",\n            close: \"Закрити\",\n            submitButton: \"Підтвердити\",\n            revertButton: \"Скинути\",\n            proportion: \"Зберегти пропорції\",\n            basic: \"Без обтікання\",\n            left: \"Зліва\",\n            right: \"Справа\",\n            center: \"По центру\",\n            width: \"Ширина\",\n            height: \"Висота\",\n            size: \"Розмір\",\n            ratio: \"Співвідношення\"\n        },\n        controller: {\n            edit: \"Змінити\",\n            unlink: \"Прибрати посилання\",\n            remove: \"Видалити\",\n            insertRowAbove: \"Вставити рядок вище\",\n            insertRowBelow: \"Вставити рядок нижче\",\n            deleteRow: \"Видалити рядок\",\n            insertColumnBefore: \"Вставити стовпець зліва\",\n            insertColumnAfter: \"Вставити стовпець справа\",\n            deleteColumn: \"Видалити стовпець\",\n            fixedColumnWidth: \"Фіксована ширина стовпця\",\n            resize100: \"Розмір 100%\",\n            resize75: \"Розмір 75%\",\n            resize50: \"Розмір 50%\",\n            resize25: \"Розмір 25%\",\n            autoSize: \"Авто розмір\",\n            mirrorHorizontal: \"Відобразити по горизонталі\",\n            mirrorVertical: \"Відобразити по вертикалі\",\n            rotateLeft: \"Повернути проти годинникової стрілки\",\n            rotateRight: \"Повернути за годинниковою стрілкою\",\n            maxSize: \"Ширина за розміром сторінки\",\n            minSize: \"Ширина за вмістом\",\n            tableHeader: \"Заголовок таблиці\",\n            mergeCells: \"Об'єднати клітинки\",\n            splitCells: \"Розділити клітинку\",\n            HorizontalSplit: \"Розділити горизонтально\",\n            VerticalSplit: \"Розділити вертикально\"\n        },\n        menu: {\n            spaced: \"Інтервал\",\n            bordered: \"З лініями\",\n            neon: \"Неон\",\n            translucent: \"Напівпрозорий\",\n            shadow: \"Тінь\",\n            code: \"Код\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ua\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ua.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/ur.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ur.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ur\",\n        toolbar: {\n            default: \"طے شدہ\",\n            save: \"محفوظ کریں\",\n            font: \"فونٹ\",\n            formats: \"فارمیٹس\",\n            fontSize: \"سائز\",\n            bold: \"بولڈ\",\n            underline: \"انڈر لائن\",\n            italic: \"ترچھا\",\n            strike: \"لکیرہ کردہ\",\n            subscript: \"ذیلی\",\n            superscript: \"انتہائی\",\n            removeFormat: \"فارمیٹ کو حذف دیں\",\n            fontColor: \"لکھائی کا رنگ\",\n            hiliteColor: \"نمایاں رنگ\",\n            indent: \"حاشیہ\",\n            outdent: \"ہاشیہ واپس\",\n            align: \"رخ\",\n            alignLeft: \"بائیں طرف\",\n            alignRight: \"دائیں طرف\",\n            alignCenter: \"مرکز میں طرف\",\n            alignJustify: \"ہر طرف برابر\",\n            list: \"فہرست\",\n            orderList: \"ترتیب شدہ فہرست\",\n            unorderList: \"غیر ترتیب شدہ فہرست\",\n            horizontalRule: \"لکیر\",\n            hr_solid: \"ٹھوس\",\n            hr_dotted: \"نقطے دار\",\n            hr_dashed: \"ڈیشڈ\",\n            table: \"میز\",\n            link: \"لنک\",\n            math: \"ریاضی\",\n            image: \"تصویر\",\n            video: \"ویڈیو\",\n            audio: \"آواز\",\n            fullScreen: \"پوری اسکرین\",\n            showBlocks: \"ڈبے دکھائیں\",\n            codeView: \"کوڈ کا نظارہ\",\n            undo: \"واپس کریں\",\n            redo: \"دوبارہ کریں\",\n            preview: \"پیشنظر\",\n            print: \"پرنٹ کریں\",\n            tag_p: \"پیراگراف\",\n            tag_div: \"عام (div)\",\n            tag_h: \"ہیڈر\",\n            tag_blockquote: \"اقتباس\",\n            tag_pre: \"کوڈ\",\n            template: \"سانچہ\",\n            lineHeight: \"لکیر کی اونچائی\",\n            paragraphStyle: \"عبارت کا انداز\",\n            textStyle: \"متن کا انداز\",\n            imageGallery: \"تصویری نگارخانہ\",\n            dir_ltr: \"بائیں سے دائیں\",\n            dir_rtl: \"دائیں سے بائیں\",\n            mention: \"تذکرہ\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"لنک داخل کریں\",\n                url: \"لنک کرنے کے لیے URL\",\n                text: \"ظاہر کرنے کے لیے متن\",\n                newWindowCheck: \"نئی ونڈو میں کھولیں\",\n                downloadLinkCheck: \"ڈاؤن لوڈ لنک\",\n                bookmark: \"بک مارک\"\n            },\n            mathBox: {\n                title: \"ریاضی\",\n                inputLabel: \"ریاضیاتی اشارے\",\n                fontSizeLabel: \"حرف کا سائز\",\n                previewLabel: \"پیش نظارہ\"\n            },\n            imageBox: {\n                title: \"تصویر داخل کریں\",\n                file: \"فائلوں سے منتخب کریں\",\n                url: \"تصویری URL\",\n                altText: \"متبادل متن\"\n            },\n            videoBox: {\n                title: \"ویڈیو داخل کریں\",\n                file: \"فائلوں سے منتخب کریں\",\n                url: \"ذرائع ابلاغ کا یو آر ایل، یوٹیوب/ویمیو\"\n            },\n            audioBox: {\n                title: \"آواز داخل کریں\",\n                file: \"فائلوں سے منتخب کریں\",\n                url: \"آواز URL\"\n            },\n            browser: {\n                tags: \"ٹیگز\",\n                search: \"تلاش کریں\"\n            },\n            caption: \"عنوان\",\n            close: \"بند کریں\",\n            submitButton: \"بھیجیں\",\n            revertButton: \"واپس\",\n            proportion: \"تناسب کو محدود کریں\",\n            basic: \"بنیادی\",\n            left: \"بائیں\",\n            right: \"دائیں\",\n            center: \"مرکز\",\n            width: \"چوڑائی\",\n            height: \"اونچائی\",\n            size: \"حجم\",\n            ratio: \"تناسب\"\n        },\n        controller: {\n            edit: \"ترمیم\",\n            unlink: \"لنک ختم کریں\",\n            remove: \"حذف\",\n            insertRowAbove: \"اوپر قطار شامل کریں\",\n            insertRowBelow: \"نیچے قطار شامل کریں\",\n            deleteRow: \"قطار کو حذف کریں\",\n            insertColumnBefore: \"پہلے ستون شامل کریں\",\n            insertColumnAfter: \"اس کے بعد ستون شامل کریں\",\n            deleteColumn: \"ستون حذف کریں\",\n            fixedColumnWidth: \"مقررہ ستون کی چوڑائی\",\n            resize100: \"100% کا حجم تبدیل کریں\",\n            resize75: \"75% کا حجم تبدیل کریں\",\n            resize50: \"50% کا حجم تبدیل کریں\",\n            resize25: \"25% کا حجم تبدیل کریں\",\n            autoSize: \"ازخود حجم\",\n            mirrorHorizontal: \"آئینہ، افقی\",\n            mirrorVertical: \"آئینہ، عمودی\",\n            rotateLeft: \"بائیں گھومو\",\n            rotateRight: \"دائیں گھمائیں\",\n            maxSize: \"زیادہ سے زیادہ سائز\",\n            minSize: \"کم از کم سائز\",\n            tableHeader: \"میز کی سرخی\",\n            mergeCells: \"حجروں کو ضم کریں\",\n            splitCells: \"حجروں کو علیدہ کرو\",\n            HorizontalSplit: \"افقی تقسیم\",\n            VerticalSplit: \"عمودی تقسیم\"\n        },\n        menu: {\n            spaced: \"فاصلہ\",\n            bordered: \"سرحدی\",\n            neon: \"نیین\",\n            translucent: \"پارباسی\",\n            shadow: \"سایہ\",\n            code: \"کوڈ\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ur\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9sYW5nL3VyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRUMsVUFBVUEsTUFBTSxFQUFFQyxPQUFPO0lBQ3RCLElBQUksS0FBa0IsSUFBWSxPQUFPQyxPQUFPQyxPQUFPLEtBQUssVUFBVTtRQUNsRUQsT0FBT0MsT0FBTyxHQUFHSCxPQUFPSSxRQUFRLEdBQzVCSCxRQUFRRCxRQUFRLFFBQ2hCLFNBQVVLLENBQUM7WUFDUCxJQUFJLENBQUNBLEVBQUVELFFBQVEsRUFBRTtnQkFDYixNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxPQUFPTCxRQUFRSTtRQUNuQjtJQUNSLE9BQU87UUFDSEosUUFBUUQ7SUFDWjtBQUNKLEdBQUUsTUFBa0IsR0FBY08sQ0FBTUEsR0FBRyxRQUFNLFNBQVVBLE9BQU0sRUFBRUMsUUFBUTtJQUN2RSxNQUFNQyxPQUFPO1FBQ1RDLE1BQU07UUFDTkMsU0FBUztZQUNMQyxTQUFTO1lBQ1RDLE1BQU07WUFDTkMsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLFVBQVU7WUFDVkMsTUFBTTtZQUNOQyxXQUFXO1lBQ1hDLFFBQVE7WUFDUkMsUUFBUTtZQUNSQyxXQUFXO1lBQ1hDLGFBQWE7WUFDYkMsY0FBYztZQUNkQyxXQUFXO1lBQ1hDLGFBQWE7WUFDYkMsUUFBUTtZQUNSQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsV0FBVztZQUNYQyxZQUFZO1lBQ1pDLGFBQWE7WUFDYkMsY0FBYztZQUNkQyxNQUFNO1lBQ05DLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxnQkFBZ0I7WUFDaEJDLFVBQVU7WUFDVkMsV0FBVztZQUNYQyxXQUFXO1lBQ1hDLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLE9BQU87WUFDUEMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLFlBQVk7WUFDWkMsWUFBWTtZQUNaQyxVQUFVO1lBQ1ZDLE1BQU07WUFDTkMsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsT0FBTztZQUNQQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsZ0JBQWdCO1lBQ2hCQyxTQUFTO1lBQ1RDLFVBQVU7WUFDVkMsWUFBWTtZQUNaQyxnQkFBZ0I7WUFDaEJDLFdBQVc7WUFDWEMsY0FBYztZQUNkQyxTQUFTO1lBQ1RDLFNBQVM7WUFDVEMsU0FBUztRQUNiO1FBQ0FDLFdBQVc7WUFDUEMsU0FBUztnQkFDTEMsT0FBTztnQkFDUEMsS0FBSztnQkFDTEMsTUFBTTtnQkFDTkMsZ0JBQWdCO2dCQUNoQkMsbUJBQW1CO2dCQUNuQkMsVUFBVTtZQUNkO1lBQ0FDLFNBQVM7Z0JBQ0xOLE9BQU87Z0JBQ1BPLFlBQVk7Z0JBQ1pDLGVBQWU7Z0JBQ2ZDLGNBQWM7WUFDbEI7WUFDQUMsVUFBVTtnQkFDTlYsT0FBTztnQkFDUFcsTUFBTTtnQkFDTlYsS0FBSztnQkFDTFcsU0FBUztZQUNiO1lBQ0FDLFVBQVU7Z0JBQ05iLE9BQU87Z0JBQ1BXLE1BQU07Z0JBQ05WLEtBQUs7WUFDVDtZQUNBYSxVQUFVO2dCQUNOZCxPQUFPO2dCQUNQVyxNQUFNO2dCQUNOVixLQUFLO1lBQ1Q7WUFDQWMsU0FBUztnQkFDTEMsTUFBTTtnQkFDTkMsUUFBUTtZQUNaO1lBQ0FDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxjQUFjO1lBQ2RDLGNBQWM7WUFDZEMsWUFBWTtZQUNaQyxPQUFPO1lBQ1BDLE1BQU07WUFDTkMsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxNQUFNO1lBQ05DLE9BQU87UUFDWDtRQUNBQyxZQUFZO1lBQ1JDLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxRQUFRO1lBQ1JDLGdCQUFnQjtZQUNoQkMsZ0JBQWdCO1lBQ2hCQyxXQUFXO1lBQ1hDLG9CQUFvQjtZQUNwQkMsbUJBQW1CO1lBQ25CQyxjQUFjO1lBQ2RDLGtCQUFrQjtZQUNsQkMsV0FBVztZQUNYQyxVQUFVO1lBQ1ZDLFVBQVU7WUFDVkMsVUFBVTtZQUNWQyxVQUFVO1lBQ1ZDLGtCQUFrQjtZQUNsQkMsZ0JBQWdCO1lBQ2hCQyxZQUFZO1lBQ1pDLGFBQWE7WUFDYkMsU0FBUztZQUNUQyxTQUFTO1lBQ1RDLGFBQWE7WUFDYkMsWUFBWTtZQUNaQyxZQUFZO1lBQ1pDLGlCQUFpQjtZQUNqQkMsZUFBZTtRQUNuQjtRQUNBQyxNQUFNO1lBQ0ZDLFFBQVE7WUFDUkMsVUFBVTtZQUNWQyxNQUFNO1lBQ05DLGFBQWE7WUFDYkMsUUFBUTtZQUNSekgsTUFBTTtRQUNWO0lBQ0o7SUFFQSxJQUFJLE9BQU9GLGFBQWEsT0FBTzRILFdBQVc7UUFDdEMsSUFBSSxDQUFDN0gsUUFBTzhILGNBQWMsRUFBRTtZQUN4QkMsT0FBT0MsY0FBYyxDQUFDaEksU0FBUSxrQkFBa0I7Z0JBQzVDaUksWUFBWTtnQkFDWkMsVUFBVTtnQkFDVkMsY0FBYztnQkFDZEMsT0FBTyxDQUFDO1lBQ1o7UUFDSjtRQUVBTCxPQUFPQyxjQUFjLENBQUNoSSxRQUFPOEgsY0FBYyxFQUFFLE1BQU07WUFDL0NHLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLE9BQU9sSTtRQUNYO0lBQ0o7SUFFQSxPQUFPQTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvdXIuanM/ZjU0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXG4gKlxuICogc3VuZWRpdG9yLmpzXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxuICogTUlUIGxpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxuICAgICAgICAgICAgZnVuY3Rpb24gKHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTEFORyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XG4gICAgICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcbiAgICB9XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKHdpbmRvdywgbm9HbG9iYWwpIHtcbiAgICBjb25zdCBsYW5nID0ge1xuICAgICAgICBjb2RlOiAndXInLFxuICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAn2LfbkiDYtNiv24EnLFxuICAgICAgICAgICAgc2F2ZTogJ9mF2K3ZgdmI2Lgg2qnYsduM2ronLFxuICAgICAgICAgICAgZm9udDogJ9mB2YjZhtm5JyxcbiAgICAgICAgICAgIGZvcm1hdHM6ICfZgdin2LHZhduM2bnYsycsXG4gICAgICAgICAgICBmb250U2l6ZTogJ9iz2KfYptiyJyxcbiAgICAgICAgICAgIGJvbGQ6ICfYqNmI2YTaiCcsXG4gICAgICAgICAgICB1bmRlcmxpbmU6ICfYp9mG2ojYsSDZhNin2KbZhicsXG4gICAgICAgICAgICBpdGFsaWM6ICfYqtix2obavtinJyxcbiAgICAgICAgICAgIHN0cmlrZTogJ9mE2qnbjNix24Eg2qnYsdiv24EnLFxuICAgICAgICAgICAgc3Vic2NyaXB0OiAn2LDbjNmE24wnLFxuICAgICAgICAgICAgc3VwZXJzY3JpcHQ6ICfYp9mG2Krbgdin2KbbjCcsXG4gICAgICAgICAgICByZW1vdmVGb3JtYXQ6ICfZgdin2LHZhduM2bkg2qnZiCDYrdiw2YEg2K/bjNq6JyxcbiAgICAgICAgICAgIGZvbnRDb2xvcjogJ9mE2qnavtin2KbbjCDaqdinINix2YbarycsXG4gICAgICAgICAgICBoaWxpdGVDb2xvcjogJ9mG2YXYp9uM2KfauiDYsdmG2q8nLFxuICAgICAgICAgICAgaW5kZW50OiAn2K3Yp9i024zbgScsXG4gICAgICAgICAgICBvdXRkZW50OiAn24HYp9i024zbgSDZiNin2b7YsycsXG4gICAgICAgICAgICBhbGlnbjogJ9ix2K4nLFxuICAgICAgICAgICAgYWxpZ25MZWZ0OiAn2KjYp9im24zauiDYt9ix2YEnLFxuICAgICAgICAgICAgYWxpZ25SaWdodDogJ9iv2KfYptuM2rog2LfYsdmBJyxcbiAgICAgICAgICAgIGFsaWduQ2VudGVyOiAn2YXYsdqp2LIg2YXbjNq6INi32LHZgScsXG4gICAgICAgICAgICBhbGlnbkp1c3RpZnk6ICfbgdixINi32LHZgSDYqNix2KfYqNixJyxcbiAgICAgICAgICAgIGxpc3Q6ICfZgduB2LHYs9iqJyxcbiAgICAgICAgICAgIG9yZGVyTGlzdDogJ9iq2LHYqtuM2Kgg2LTYr9uBINmB24HYsdiz2KonLFxuICAgICAgICAgICAgdW5vcmRlckxpc3Q6ICfYutuM2LEg2KrYsdiq24zYqCDYtNiv24Eg2YHbgdix2LPYqicsXG4gICAgICAgICAgICBob3Jpem9udGFsUnVsZTogJ9mE2qnbjNixJyxcbiAgICAgICAgICAgIGhyX3NvbGlkOiAn2bnavtmI2LMnLFxuICAgICAgICAgICAgaHJfZG90dGVkOiAn2YbZgti325Ig2K/Yp9ixJyxcbiAgICAgICAgICAgIGhyX2Rhc2hlZDogJ9qI24zYtNqIJyxcbiAgICAgICAgICAgIHRhYmxlOiAn2YXbjNiyJyxcbiAgICAgICAgICAgIGxpbms6ICfZhNmG2qknLFxuICAgICAgICAgICAgbWF0aDogJ9ix24zYp9i224wnLFxuICAgICAgICAgICAgaW1hZ2U6ICfYqti12YjbjNixJyxcbiAgICAgICAgICAgIHZpZGVvOiAn2YjbjNqI24zZiCcsXG4gICAgICAgICAgICBhdWRpbzogJ9ii2YjYp9iyJyxcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46ICfZvtmI2LHbjCDYp9iz2qnYsduM2YYnLFxuICAgICAgICAgICAgc2hvd0Jsb2NrczogJ9qI2KjbkiDYr9qp2r7Yp9im24zauicsXG4gICAgICAgICAgICBjb2RlVmlldzogJ9qp2YjaiCDaqdinINmG2LjYp9ix24EnLFxuICAgICAgICAgICAgdW5kbzogJ9mI2KfZvtizINqp2LHbjNq6JyxcbiAgICAgICAgICAgIHJlZG86ICfYr9mI2KjYp9ix24Eg2qnYsduM2ronLFxuICAgICAgICAgICAgcHJldmlldzogJ9m+24zYtNmG2LjYsScsXG4gICAgICAgICAgICBwcmludDogJ9m+2LHZhtm5INqp2LHbjNq6JyxcbiAgICAgICAgICAgIHRhZ19wOiAn2b7bjNix2Kfar9ix2KfZgScsXG4gICAgICAgICAgICB0YWdfZGl2OiAn2LnYp9mFIChkaXYpJyxcbiAgICAgICAgICAgIHRhZ19oOiAn24HbjNqI2LEnLFxuICAgICAgICAgICAgdGFnX2Jsb2NrcXVvdGU6ICfYp9mC2KrYqNin2LMnLFxuICAgICAgICAgICAgdGFnX3ByZTogJ9qp2YjaiCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ9iz2KfZhtqG24EnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogJ9mE2qnbjNixINqp24wg2KfZiNmG2obYp9im24wnLFxuICAgICAgICAgICAgcGFyYWdyYXBoU3R5bGU6ICfYudio2KfYsdiqINqp2Kcg2KfZhtiv2KfYsicsXG4gICAgICAgICAgICB0ZXh0U3R5bGU6ICfZhdiq2YYg2qnYpyDYp9mG2K/Yp9iyJyxcbiAgICAgICAgICAgIGltYWdlR2FsbGVyeTogJ9iq2LXZiNuM2LHbjCDZhtqv2KfYsdiu2KfZhtuBJyxcbiAgICAgICAgICAgIGRpcl9sdHI6ICfYqNin2KbbjNq6INiz25Ig2K/Yp9im24zauicsXG4gICAgICAgICAgICBkaXJfcnRsOiAn2K/Yp9im24zauiDYs9uSINio2KfYptuM2ronLFxuICAgICAgICAgICAgbWVudGlvbjogJ9iq2LDaqdix24EnXG4gICAgICAgIH0sXG4gICAgICAgIGRpYWxvZ0JveDoge1xuICAgICAgICAgICAgbGlua0JveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAn2YTZhtqpINiv2KfYrtmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgICAgICB1cmw6ICfZhNmG2qkg2qnYsdmG25Ig2qnbkiDZhNuM25IgVVJMJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAn2LjYp9uB2LEg2qnYsdmG25Ig2qnbkiDZhNuM25Ig2YXYqtmGJyxcbiAgICAgICAgICAgICAgICBuZXdXaW5kb3dDaGVjazogJ9mG2KbbjCDZiNmG2ojZiCDZhduM2rog2qnavtmI2YTbjNq6JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZExpbmtDaGVjazogJ9qI2KfYpNmGINmE2YjaiCDZhNmG2qknLFxuICAgICAgICAgICAgICAgIGJvb2ttYXJrOiAn2KjaqSDZhdin2LHaqSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXRoQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfYsduM2KfYttuMJyxcbiAgICAgICAgICAgICAgICBpbnB1dExhYmVsOiAn2LHbjNin2LbbjNin2KrbjCDYp9i02KfYsduSJyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZUxhYmVsOiAn2K3YsdmBINqp2Kcg2LPYp9im2LInLFxuICAgICAgICAgICAgICAgIHByZXZpZXdMYWJlbDogJ9m+24zYtCDZhti42KfYsduBJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfYqti12YjbjNixINiv2KfYrtmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgICAgICBmaWxlOiAn2YHYp9im2YTZiNq6INiz25Ig2YXZhtiq2K7YqCDaqdix24zauicsXG4gICAgICAgICAgICAgICAgdXJsOiAn2KrYtdmI24zYsduMIFVSTCcsXG4gICAgICAgICAgICAgICAgYWx0VGV4dDogJ9mF2KrYqNin2K/ZhCDZhdiq2YYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlkZW9Cb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9mI24zaiNuM2Ygg2K/Yp9iu2YQg2qnYsduM2ronLFxuICAgICAgICAgICAgICAgIGZpbGU6ICfZgdin2KbZhNmI2rog2LPbkiDZhdmG2KrYrtioINqp2LHbjNq6JyxcbiAgICAgICAgICAgICAgICB1cmw6ICfYsNix2KfYpti5INin2KjZhNin2Log2qnYpyDbjNmIINii2LEg2KfbjNmE2Iwg24zZiNm524zZiNioL9mI24zZhduM2YgnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXVkaW9Cb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9ii2YjYp9iyINiv2KfYrtmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgICAgICBmaWxlOiAn2YHYp9im2YTZiNq6INiz25Ig2YXZhtiq2K7YqCDaqdix24zauicsXG4gICAgICAgICAgICAgICAgdXJsOiAn2KLZiNin2LIgVVJMJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyb3dzZXI6IHtcbiAgICAgICAgICAgICAgICB0YWdzOiAn2bnbjNqv2LInLFxuICAgICAgICAgICAgICAgIHNlYXJjaDogJ9iq2YTYp9i0INqp2LHbjNq6JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0aW9uOiAn2LnZhtmI2KfZhicsXG4gICAgICAgICAgICBjbG9zZTogJ9io2YbYryDaqdix24zauicsXG4gICAgICAgICAgICBzdWJtaXRCdXR0b246ICfYqNq+24zYrNuM2ronLFxuICAgICAgICAgICAgcmV2ZXJ0QnV0dG9uOiAn2YjYp9m+2LMnLFxuICAgICAgICAgICAgcHJvcG9ydGlvbjogJ9iq2YbYp9iz2Kgg2qnZiCDZhdit2K/ZiNivINqp2LHbjNq6JyxcbiAgICAgICAgICAgIGJhc2ljOiAn2KjZhtuM2KfYr9uMJyxcbiAgICAgICAgICAgIGxlZnQ6ICfYqNin2KbbjNq6JyxcbiAgICAgICAgICAgIHJpZ2h0OiAn2K/Yp9im24zauicsXG4gICAgICAgICAgICBjZW50ZXI6ICfZhdix2qnYsicsXG4gICAgICAgICAgICB3aWR0aDogJ9qG2Yjakdin2KbbjCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICfYp9mI2Ybahtin2KbbjCcsXG4gICAgICAgICAgICBzaXplOiAn2K3YrNmFJyxcbiAgICAgICAgICAgIHJhdGlvOiAn2KrZhtin2LPYqCdcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICAgICAgZWRpdDogJ9iq2LHZhduM2YUnLFxuICAgICAgICAgICAgdW5saW5rOiAn2YTZhtqpINiu2KrZhSDaqdix24zauicsXG4gICAgICAgICAgICByZW1vdmU6ICfYrdiw2YEnLFxuICAgICAgICAgICAgaW5zZXJ0Um93QWJvdmU6ICfYp9mI2b7YsSDZgti32KfYsSDYtNin2YXZhCDaqdix24zauicsXG4gICAgICAgICAgICBpbnNlcnRSb3dCZWxvdzogJ9mG24zahtuSINmC2LfYp9ixINi02KfZhdmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgIGRlbGV0ZVJvdzogJ9mC2LfYp9ixINqp2Ygg2K3YsNmBINqp2LHbjNq6JyxcbiAgICAgICAgICAgIGluc2VydENvbHVtbkJlZm9yZTogJ9m+24HZhNuSINiz2KrZiNmGINi02KfZhdmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgIGluc2VydENvbHVtbkFmdGVyOiAn2KfYsyDaqduSINio2LnYryDYs9iq2YjZhiDYtNin2YXZhCDaqdix24zauicsXG4gICAgICAgICAgICBkZWxldGVDb2x1bW46ICfYs9iq2YjZhiDYrdiw2YEg2qnYsduM2ronLFxuICAgICAgICAgICAgZml4ZWRDb2x1bW5XaWR0aDogJ9mF2YLYsdix24Eg2LPYqtmI2YYg2qnbjCDahtmI2pHYp9im24wnLFxuICAgICAgICAgICAgcmVzaXplMTAwOiAnMTAwJSDaqdinINit2KzZhSDYqtio2K/bjNmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgIHJlc2l6ZTc1OiAnNzUlINqp2Kcg2K3YrNmFINiq2KjYr9uM2YQg2qnYsduM2ronLFxuICAgICAgICAgICAgcmVzaXplNTA6ICc1MCUg2qnYpyDYrdis2YUg2KrYqNiv24zZhCDaqdix24zauicsXG4gICAgICAgICAgICByZXNpemUyNTogJzI1JSDaqdinINit2KzZhSDYqtio2K/bjNmEINqp2LHbjNq6JyxcbiAgICAgICAgICAgIGF1dG9TaXplOiAn2KfYstiu2YjYryDYrdis2YUnLFxuICAgICAgICAgICAgbWlycm9ySG9yaXpvbnRhbDogJ9ii2KbbjNmG24HYjCDYp9mB2YLbjCcsXG4gICAgICAgICAgICBtaXJyb3JWZXJ0aWNhbDogJ9ii2KbbjNmG24HYjCDYudmF2YjYr9uMJyxcbiAgICAgICAgICAgIHJvdGF0ZUxlZnQ6ICfYqNin2KbbjNq6INqv2r7ZiNmF2YgnLFxuICAgICAgICAgICAgcm90YXRlUmlnaHQ6ICfYr9in2KbbjNq6INqv2r7Zhdin2KbbjNq6JyxcbiAgICAgICAgICAgIG1heFNpemU6ICfYstuM2KfYr9uBINiz25Ig2LLbjNin2K/bgSDYs9in2KbYsicsXG4gICAgICAgICAgICBtaW5TaXplOiAn2qnZhSDYp9iyINqp2YUg2LPYp9im2LInLFxuICAgICAgICAgICAgdGFibGVIZWFkZXI6ICfZhduM2LIg2qnbjCDYs9ix2K7bjCcsXG4gICAgICAgICAgICBtZXJnZUNlbGxzOiAn2K3YrNix2YjauiDaqdmIINi22YUg2qnYsduM2ronLFxuICAgICAgICAgICAgc3BsaXRDZWxsczogJ9it2KzYsdmI2rog2qnZiCDYudmE24zYr9uBINqp2LHZiCcsXG4gICAgICAgICAgICBIb3Jpem9udGFsU3BsaXQ6ICfYp9mB2YLbjCDYqtmC2LPbjNmFJyxcbiAgICAgICAgICAgIFZlcnRpY2FsU3BsaXQ6ICfYudmF2YjYr9uMINiq2YLYs9uM2YUnXG4gICAgICAgIH0sXG4gICAgICAgIG1lbnU6IHtcbiAgICAgICAgICAgIHNwYWNlZDogJ9mB2KfYtdmE24EnLFxuICAgICAgICAgICAgYm9yZGVyZWQ6ICfYs9ix2K3Yr9uMJyxcbiAgICAgICAgICAgIG5lb246ICfZhtuM24zZhicsXG4gICAgICAgICAgICB0cmFuc2x1Y2VudDogJ9m+2KfYsdio2KfYs9uMJyxcbiAgICAgICAgICAgIHNoYWRvdzogJ9iz2KfbjNuBJyxcbiAgICAgICAgICAgIGNvZGU6ICfaqdmI2ognXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXdpbmRvdy5TVU5FRElUT1JfTEFORykge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9MQU5HJywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1VORURJVE9SX0xBTkcsICd1cicsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBsYW5nXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsYW5nO1xufSkpOyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJsYW5nIiwiY29kZSIsInRvb2xiYXIiLCJkZWZhdWx0Iiwic2F2ZSIsImZvbnQiLCJmb3JtYXRzIiwiZm9udFNpemUiLCJib2xkIiwidW5kZXJsaW5lIiwiaXRhbGljIiwic3RyaWtlIiwic3Vic2NyaXB0Iiwic3VwZXJzY3JpcHQiLCJyZW1vdmVGb3JtYXQiLCJmb250Q29sb3IiLCJoaWxpdGVDb2xvciIsImluZGVudCIsIm91dGRlbnQiLCJhbGlnbiIsImFsaWduTGVmdCIsImFsaWduUmlnaHQiLCJhbGlnbkNlbnRlciIsImFsaWduSnVzdGlmeSIsImxpc3QiLCJvcmRlckxpc3QiLCJ1bm9yZGVyTGlzdCIsImhvcml6b250YWxSdWxlIiwiaHJfc29saWQiLCJocl9kb3R0ZWQiLCJocl9kYXNoZWQiLCJ0YWJsZSIsImxpbmsiLCJtYXRoIiwiaW1hZ2UiLCJ2aWRlbyIsImF1ZGlvIiwiZnVsbFNjcmVlbiIsInNob3dCbG9ja3MiLCJjb2RlVmlldyIsInVuZG8iLCJyZWRvIiwicHJldmlldyIsInByaW50IiwidGFnX3AiLCJ0YWdfZGl2IiwidGFnX2giLCJ0YWdfYmxvY2txdW90ZSIsInRhZ19wcmUiLCJ0ZW1wbGF0ZSIsImxpbmVIZWlnaHQiLCJwYXJhZ3JhcGhTdHlsZSIsInRleHRTdHlsZSIsImltYWdlR2FsbGVyeSIsImRpcl9sdHIiLCJkaXJfcnRsIiwibWVudGlvbiIsImRpYWxvZ0JveCIsImxpbmtCb3giLCJ0aXRsZSIsInVybCIsInRleHQiLCJuZXdXaW5kb3dDaGVjayIsImRvd25sb2FkTGlua0NoZWNrIiwiYm9va21hcmsiLCJtYXRoQm94IiwiaW5wdXRMYWJlbCIsImZvbnRTaXplTGFiZWwiLCJwcmV2aWV3TGFiZWwiLCJpbWFnZUJveCIsImZpbGUiLCJhbHRUZXh0IiwidmlkZW9Cb3giLCJhdWRpb0JveCIsImJyb3dzZXIiLCJ0YWdzIiwic2VhcmNoIiwiY2FwdGlvbiIsImNsb3NlIiwic3VibWl0QnV0dG9uIiwicmV2ZXJ0QnV0dG9uIiwicHJvcG9ydGlvbiIsImJhc2ljIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyIiwid2lkdGgiLCJoZWlnaHQiLCJzaXplIiwicmF0aW8iLCJjb250cm9sbGVyIiwiZWRpdCIsInVubGluayIsInJlbW92ZSIsImluc2VydFJvd0Fib3ZlIiwiaW5zZXJ0Um93QmVsb3ciLCJkZWxldGVSb3ciLCJpbnNlcnRDb2x1bW5CZWZvcmUiLCJpbnNlcnRDb2x1bW5BZnRlciIsImRlbGV0ZUNvbHVtbiIsImZpeGVkQ29sdW1uV2lkdGgiLCJyZXNpemUxMDAiLCJyZXNpemU3NSIsInJlc2l6ZTUwIiwicmVzaXplMjUiLCJhdXRvU2l6ZSIsIm1pcnJvckhvcml6b250YWwiLCJtaXJyb3JWZXJ0aWNhbCIsInJvdGF0ZUxlZnQiLCJyb3RhdGVSaWdodCIsIm1heFNpemUiLCJtaW5TaXplIiwidGFibGVIZWFkZXIiLCJtZXJnZUNlbGxzIiwic3BsaXRDZWxscyIsIkhvcml6b250YWxTcGxpdCIsIlZlcnRpY2FsU3BsaXQiLCJtZW51Iiwic3BhY2VkIiwiYm9yZGVyZWQiLCJuZW9uIiwidHJhbnNsdWNlbnQiLCJzaGFkb3ciLCJ1bmRlZmluZWQiLCJTVU5FRElUT1JfTEFORyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/ur.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lang/zh_cn.js":
/*!**************************************************!*\
  !*** ./node_modules/suneditor/src/lang/zh_cn.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"zh_cn\",\n        toolbar: {\n            default: \"默认\",\n            save: \"保存\",\n            font: \"字体\",\n            formats: \"格式\",\n            fontSize: \"字号\",\n            bold: \"粗体\",\n            underline: \"下划线\",\n            italic: \"斜体\",\n            strike: \"删除线\",\n            subscript: \"下标\",\n            superscript: \"上标\",\n            removeFormat: \"清除格式\",\n            fontColor: \"字体颜色\",\n            hiliteColor: \"背景颜色\",\n            indent: \"增加缩进\",\n            outdent: \"减少缩进\",\n            align: \"对齐方式\",\n            alignLeft: \"左对齐\",\n            alignRight: \"右对齐\",\n            alignCenter: \"居中\",\n            alignJustify: \"两端对齐\",\n            list: \"列表\",\n            orderList: \"有序列表\",\n            unorderList: \"无序列表\",\n            horizontalRule: \"水平线\",\n            hr_solid: \"实线\",\n            hr_dotted: \"点线\",\n            hr_dashed: \"虚线\",\n            table: \"表格\",\n            link: \"超链接\",\n            math: \"数学\",\n            image: \"图片\",\n            video: \"视频\",\n            audio: \"音讯\",\n            fullScreen: \"全屏\",\n            showBlocks: \"显示块区域\",\n            codeView: \"代码视图\",\n            undo: \"撤消\",\n            redo: \"恢复\",\n            preview: \"预览\",\n            print: \"打印\",\n            tag_p: \"段落\",\n            tag_div: \"正文 (DIV)\",\n            tag_h: \"标题\",\n            tag_blockquote: \"引用\",\n            tag_pre: \"代码\",\n            template: \"模板\",\n            lineHeight: \"行高\",\n            paragraphStyle: \"段落样式\",\n            textStyle: \"文字样式\",\n            imageGallery: \"图片库\",\n            dir_ltr: \"左到右\",\n            dir_rtl: \"右到左\",\n            mention: \"提到\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"插入超链接\",\n                url: \"网址\",\n                text: \"要显示的文字\",\n                newWindowCheck: \"在新标签页中打开\",\n                downloadLinkCheck: \"下载链接\",\n                bookmark: \"书签\"\n            },\n            mathBox: {\n                title: \"数学\",\n                inputLabel: \"数学符号\",\n                fontSizeLabel: \"字号\",\n                previewLabel: \"预览\"\n            },\n            imageBox: {\n                title: \"插入图片\",\n                file: \"上传图片\",\n                url: \"图片网址\",\n                altText: \"替换文字\"\n            },\n            videoBox: {\n                title: \"插入视频\",\n                file: \"上传图片\",\n                url: \"嵌入网址, Youtube,Vimeo\"\n            },\n            audioBox: {\n                title: \"插入音频\",\n                file: \"上传图片\",\n                url: \"音频网址\"\n            },\n            browser: {\n                tags: \"标签\",\n                search: \"搜索\"\n            },\n            caption: \"标题\",\n            close: \"取消\",\n            submitButton: \"确定\",\n            revertButton: \"恢复\",\n            proportion: \"比例\",\n            basic: \"基本\",\n            left: \"左\",\n            right: \"右\",\n            center: \"居中\",\n            width: \"宽度\",\n            height: \"高度\",\n            size: \"尺寸\",\n            ratio: \"比\"\n        },\n        controller: {\n            edit: \"编辑\",\n            unlink: \"去除链接\",\n            remove: \"删除\",\n            insertRowAbove: \"在上方插入\",\n            insertRowBelow: \"在下方插入\",\n            deleteRow: \"删除行\",\n            insertColumnBefore: \"在左侧插入\",\n            insertColumnAfter: \"在右侧插入\",\n            deleteColumn: \"删除列\",\n            fixedColumnWidth: \"固定列宽\",\n            resize100: \"放大 100%\",\n            resize75: \"放大 75%\",\n            resize50: \"放大 50%\",\n            resize25: \"放大 25%\",\n            mirrorHorizontal: \"翻转左右\",\n            mirrorVertical: \"翻转上下\",\n            rotateLeft: \"向左旋转\",\n            rotateRight: \"向右旋转\",\n            maxSize: \"最大尺寸\",\n            minSize: \"最小尺寸\",\n            tableHeader: \"表格标题\",\n            mergeCells: \"合并单元格\",\n            splitCells: \"分割单元格\",\n            HorizontalSplit: \"水平分割\",\n            VerticalSplit: \"垂直分割\"\n        },\n        menu: {\n            spaced: \"间隔开\",\n            bordered: \"边界线\",\n            neon: \"霓虹灯\",\n            translucent: \"半透明\",\n            shadow: \"阴影\",\n            code: \"代码\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"zh_cn\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lang/zh_cn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lib/constructor.js":
/*!*******************************************************!*\
  !*** ./node_modules/suneditor/src/lib/constructor.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _assets_defaultIcons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assets/defaultIcons */ \"(ssr)/./node_modules/suneditor/src/assets/defaultIcons.js\");\n/* harmony import */ var _lang_en__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lang/en */ \"(ssr)/./node_modules/suneditor/src/lang/en.js\");\n/* harmony import */ var _lang_en__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lang_en__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/suneditor/src/lib/util.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    /**\r\n     * @description document create\r\n     * @param {Element} element Textarea\r\n     * @param {Object} options Options\r\n     * @returns {Object}\r\n     */ init: function(element, options) {\n        if (typeof options !== \"object\") options = {};\n        const doc = document;\n        /** --- init options --- */ this._initOptions(element, options);\n        // suneditor div\n        const top_div = doc.createElement(\"DIV\");\n        top_div.className = \"sun-editor\" + (options.rtl ? \" se-rtl\" : \"\");\n        if (element.id) top_div.id = \"suneditor_\" + element.id;\n        // relative div\n        const relative = doc.createElement(\"DIV\");\n        relative.className = \"se-container\";\n        // toolbar\n        const tool_bar = this._createToolBar(doc, options.buttonList, options.plugins, options);\n        const toolbarShadow = tool_bar.element.cloneNode(false);\n        toolbarShadow.className += \" se-toolbar-shadow\";\n        tool_bar.element.style.visibility = \"hidden\";\n        if (tool_bar.pluginCallButtons.math) this._checkKatexMath(options.katex);\n        const arrow = doc.createElement(\"DIV\");\n        arrow.className = \"se-arrow\";\n        // sticky toolbar dummy\n        const sticky_dummy = doc.createElement(\"DIV\");\n        sticky_dummy.className = \"se-toolbar-sticky-dummy\";\n        // inner editor div\n        const editor_div = doc.createElement(\"DIV\");\n        editor_div.className = \"se-wrapper\";\n        /** --- init elements and create bottom bar --- */ const initElements = this._initElements(options, top_div, tool_bar.element, arrow);\n        const bottomBar = initElements.bottomBar;\n        const wysiwyg_div = initElements.wysiwygFrame;\n        const placeholder_span = initElements.placeholder;\n        let textarea = initElements.codeView;\n        // resizing bar\n        const resizing_bar = bottomBar.resizingBar;\n        const navigation = bottomBar.navigation;\n        const char_wrapper = bottomBar.charWrapper;\n        const char_counter = bottomBar.charCounter;\n        // loading box\n        const loading_box = doc.createElement(\"DIV\");\n        loading_box.className = \"se-loading-box sun-editor-common\";\n        loading_box.innerHTML = '<div class=\"se-loading-effect\"></div>';\n        // enter line\n        const line_breaker = doc.createElement(\"DIV\");\n        line_breaker.className = \"se-line-breaker\";\n        line_breaker.innerHTML = '<button class=\"se-btn\">' + options.icons.line_break + \"</button>\";\n        const line_breaker_t = doc.createElement(\"DIV\");\n        line_breaker_t.className += \"se-line-breaker-component\";\n        const line_breaker_b = line_breaker_t.cloneNode(true);\n        line_breaker_t.innerHTML = line_breaker_b.innerHTML = options.icons.line_break;\n        // resize operation background\n        const resize_back = doc.createElement(\"DIV\");\n        resize_back.className = \"se-resizing-back\";\n        /// focus temp\n        const focusTemp = doc.createElement(\"INPUT\");\n        focusTemp.tabIndex = -1;\n        focusTemp.style.cssText = \"position: fixed !important; top: -10000px !important; display: block !important; width: 0 !important; height: 0 !important; margin: 0 !important; padding: 0 !important;\";\n        // toolbar container\n        const toolbarContainer = options.toolbarContainer;\n        if (toolbarContainer) {\n            toolbarContainer.appendChild(tool_bar.element);\n            toolbarContainer.appendChild(toolbarShadow);\n        }\n        // resizingbar\n        const resizingBarContainer = options.resizingBarContainer;\n        if (resizing_bar && resizingBarContainer) resizingBarContainer.appendChild(resizing_bar);\n        /** append html */ editor_div.appendChild(textarea);\n        if (placeholder_span) editor_div.appendChild(placeholder_span);\n        if (!toolbarContainer) {\n            relative.appendChild(tool_bar.element);\n            relative.appendChild(toolbarShadow);\n        }\n        relative.appendChild(sticky_dummy);\n        relative.appendChild(editor_div);\n        relative.appendChild(resize_back);\n        relative.appendChild(loading_box);\n        relative.appendChild(line_breaker);\n        relative.appendChild(line_breaker_t);\n        relative.appendChild(line_breaker_b);\n        relative.appendChild(focusTemp);\n        if (resizing_bar && !resizingBarContainer) relative.appendChild(resizing_bar);\n        top_div.appendChild(relative);\n        textarea = this._checkCodeMirror(options, textarea);\n        return {\n            constructed: {\n                _top: top_div,\n                _relative: relative,\n                _toolBar: tool_bar.element,\n                _toolbarShadow: toolbarShadow,\n                _menuTray: tool_bar._menuTray,\n                _editorArea: editor_div,\n                _wysiwygArea: wysiwyg_div,\n                _codeArea: textarea,\n                _placeholder: placeholder_span,\n                _resizingBar: resizing_bar,\n                _navigation: navigation,\n                _charWrapper: char_wrapper,\n                _charCounter: char_counter,\n                _loading: loading_box,\n                _lineBreaker: line_breaker,\n                _lineBreaker_t: line_breaker_t,\n                _lineBreaker_b: line_breaker_b,\n                _resizeBack: resize_back,\n                _stickyDummy: sticky_dummy,\n                _arrow: arrow,\n                _focusTemp: focusTemp\n            },\n            options: options,\n            plugins: tool_bar.plugins,\n            pluginCallButtons: tool_bar.pluginCallButtons,\n            _responsiveButtons: tool_bar.responsiveButtons\n        };\n    },\n    /**\r\n     * @description Check the CodeMirror option to apply the CodeMirror and return the CodeMirror element.\r\n     * @param {Object} options options\r\n     * @param {Element} textarea textarea element\r\n     * @private\r\n     */ _checkCodeMirror: function(options, textarea) {\n        if (options.codeMirror) {\n            const cmOptions = [\n                {\n                    mode: \"htmlmixed\",\n                    htmlMode: true,\n                    lineNumbers: true,\n                    lineWrapping: true\n                },\n                options.codeMirror.options || {}\n            ].reduce(function(init, option) {\n                for(let key in option){\n                    if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(option, key)) init[key] = option[key];\n                }\n                return init;\n            }, {});\n            if (options.height === \"auto\") {\n                cmOptions.viewportMargin = Infinity;\n                cmOptions.height = \"auto\";\n            }\n            const cm = options.codeMirror.src.fromTextArea(textarea, cmOptions);\n            cm.display.wrapper.style.cssText = textarea.style.cssText;\n            options.codeMirrorEditor = cm;\n            textarea = cm.display.wrapper;\n            textarea.className += \" se-wrapper-code-mirror\";\n        }\n        return textarea;\n    },\n    /**\r\n     * @description Check for a katex object.\r\n     * @param {Object} katex katex object\r\n     * @private\r\n     */ _checkKatexMath: function(katex) {\n        if (!katex) throw Error('[SUNEDITOR.create.fail] To use the math button you need to add a \"katex\" object to the options.');\n        const katexOptions = [\n            {\n                throwOnError: false\n            },\n            katex.options || {}\n        ].reduce(function(init, option) {\n            for(let key in option){\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(option, key)) init[key] = option[key];\n            }\n            return init;\n        }, {});\n        katex.options = katexOptions;\n    },\n    /**\r\n     * @description Add or reset options\r\n     * @param {Object} mergeOptions New options property\r\n     * @param {Object} context Context object of core\r\n     * @param {Object} originOptions Origin options\r\n     * @returns {Object} pluginCallButtons\r\n     * @private\r\n     */ _setOptions: function(mergeOptions, context, originOptions) {\n        this._initOptions(context.element.originElement, mergeOptions);\n        const el = context.element;\n        const relative = el.relative;\n        const editorArea = el.editorArea;\n        const isNewToolbarContainer = mergeOptions.toolbarContainer && mergeOptions.toolbarContainer !== originOptions.toolbarContainer;\n        const isNewToolbar = mergeOptions.lang !== originOptions.lang || mergeOptions.buttonList !== originOptions.buttonList || mergeOptions.mode !== originOptions.mode || isNewToolbarContainer;\n        const tool_bar = this._createToolBar(document, isNewToolbar ? mergeOptions.buttonList : originOptions.buttonList, mergeOptions.plugins, mergeOptions);\n        if (tool_bar.pluginCallButtons.math) this._checkKatexMath(mergeOptions.katex);\n        const arrow = document.createElement(\"DIV\");\n        arrow.className = \"se-arrow\";\n        if (isNewToolbar) {\n            tool_bar.element.style.visibility = \"hidden\";\n            // toolbar container\n            if (isNewToolbarContainer) {\n                mergeOptions.toolbarContainer.appendChild(tool_bar.element);\n                el.toolbar.parentElement.removeChild(el.toolbar);\n            } else {\n                el.toolbar.parentElement.replaceChild(tool_bar.element, el.toolbar);\n            }\n            el.toolbar = tool_bar.element;\n            el._menuTray = tool_bar._menuTray;\n            el._arrow = arrow;\n        }\n        const initElements = this._initElements(mergeOptions, el.topArea, isNewToolbar ? tool_bar.element : el.toolbar, arrow);\n        const bottomBar = initElements.bottomBar;\n        const wysiwygFrame = initElements.wysiwygFrame;\n        const placeholder_span = initElements.placeholder;\n        let code = initElements.codeView;\n        if (el.resizingBar) _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeItem(el.resizingBar);\n        if (bottomBar.resizingBar) {\n            if (mergeOptions.resizingBarContainer && mergeOptions.resizingBarContainer !== originOptions.resizingBarContainer) {\n                mergeOptions.resizingBarContainer.appendChild(bottomBar.resizingBar);\n            } else {\n                relative.appendChild(bottomBar.resizingBar);\n            }\n        }\n        editorArea.innerHTML = \"\";\n        editorArea.appendChild(code);\n        if (placeholder_span) editorArea.appendChild(placeholder_span);\n        code = this._checkCodeMirror(mergeOptions, code);\n        el.resizingBar = bottomBar.resizingBar;\n        el.navigation = bottomBar.navigation;\n        el.charWrapper = bottomBar.charWrapper;\n        el.charCounter = bottomBar.charCounter;\n        el.wysiwygFrame = wysiwygFrame;\n        el.code = code;\n        el.placeholder = placeholder_span;\n        if (mergeOptions.rtl) _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addClass(el.topArea, \"se-rtl\");\n        else _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeClass(el.topArea, \"se-rtl\");\n        return {\n            callButtons: tool_bar.pluginCallButtons,\n            plugins: tool_bar.plugins,\n            toolbar: tool_bar\n        };\n    },\n    /**\r\n     * @description Initialize property of suneditor elements\r\n     * @param {Object} options Options\r\n     * @param {Element} topDiv Suneditor top div\r\n     * @param {Element} toolBar Tool bar\r\n     * @param {Element} toolBarArrow Tool bar arrow (balloon editor)\r\n     * @returns {Object} Bottom bar elements (resizingBar, navigation, charWrapper, charCounter)\r\n     * @private\r\n     */ _initElements: function(options, topDiv, toolBar, toolBarArrow) {\n        /** top div */ topDiv.style.cssText = options._editorStyles.top;\n        /** toolbar */ if (/inline/i.test(options.mode)) {\n            toolBar.className += \" se-toolbar-inline\";\n            toolBar.style.width = options.toolbarWidth;\n        } else if (/balloon/i.test(options.mode)) {\n            toolBar.className += \" se-toolbar-balloon\";\n            toolBar.style.width = options.toolbarWidth;\n            toolBar.appendChild(toolBarArrow);\n        }\n        /** editor */ // wysiwyg div or iframe\n        const wysiwygDiv = document.createElement(!options.iframe ? \"DIV\" : \"IFRAME\");\n        wysiwygDiv.className = \"se-wrapper-inner se-wrapper-wysiwyg\";\n        if (!options.iframe) {\n            wysiwygDiv.setAttribute(\"contenteditable\", true);\n            wysiwygDiv.setAttribute(\"autocorrect\", \"off\");\n            wysiwygDiv.setAttribute(\"scrolling\", \"auto\");\n            for(let key in options.iframeAttributes){\n                wysiwygDiv.setAttribute(key, options.iframeAttributes[key]);\n            }\n            wysiwygDiv.className += \" \" + options._editableClass;\n            wysiwygDiv.style.cssText = options._editorStyles.frame + options._editorStyles.editor;\n            wysiwygDiv.className += options.className;\n        } else {\n            wysiwygDiv.allowFullscreen = true;\n            wysiwygDiv.frameBorder = 0;\n            wysiwygDiv.style.cssText = options._editorStyles.frame;\n            wysiwygDiv.className += options.className;\n        }\n        // textarea for code view\n        const textarea = document.createElement(\"TEXTAREA\");\n        textarea.className = \"se-wrapper-inner se-wrapper-code\" + options.className;\n        textarea.style.cssText = options._editorStyles.frame;\n        textarea.style.display = \"none\";\n        if (options.height === \"auto\") textarea.style.overflow = \"hidden\";\n        /** resize bar */ let resizingBar = null;\n        let navigation = null;\n        let charWrapper = null;\n        let charCounter = null;\n        if (options.resizingBar) {\n            resizingBar = document.createElement(\"DIV\");\n            resizingBar.className = \"se-resizing-bar sun-editor-common\";\n            /** navigation */ navigation = document.createElement(\"DIV\");\n            navigation.className = \"se-navigation sun-editor-common\";\n            resizingBar.appendChild(navigation);\n            /** char counter */ if (options.charCounter) {\n                charWrapper = document.createElement(\"DIV\");\n                charWrapper.className = \"se-char-counter-wrapper\";\n                if (options.charCounterLabel) {\n                    const charLabel = document.createElement(\"SPAN\");\n                    charLabel.className = \"se-char-label\";\n                    charLabel.textContent = options.charCounterLabel;\n                    charWrapper.appendChild(charLabel);\n                }\n                charCounter = document.createElement(\"SPAN\");\n                charCounter.className = \"se-char-counter\";\n                charCounter.textContent = \"0\";\n                charWrapper.appendChild(charCounter);\n                if (options.maxCharCount > 0) {\n                    const char_max = document.createElement(\"SPAN\");\n                    char_max.textContent = \" / \" + options.maxCharCount;\n                    charWrapper.appendChild(char_max);\n                }\n                resizingBar.appendChild(charWrapper);\n            }\n        }\n        let placeholder = null;\n        if (options.placeholder) {\n            placeholder = document.createElement(\"SPAN\");\n            placeholder.className = \"se-placeholder\";\n            placeholder.innerText = options.placeholder;\n        }\n        return {\n            bottomBar: {\n                resizingBar: resizingBar,\n                navigation: navigation,\n                charWrapper: charWrapper,\n                charCounter: charCounter\n            },\n            wysiwygFrame: wysiwygDiv,\n            codeView: textarea,\n            placeholder: placeholder\n        };\n    },\n    /**\r\n     * @description Initialize options\r\n     * @param {Element} element Options object\r\n     * @param {Object} options Options object\r\n     * @private\r\n     */ _initOptions: function(element, options) {\n        const plugins = {};\n        if (options.plugins) {\n            const _plugins = options.plugins;\n            const pluginsValues = _plugins.length ? _plugins : Object.keys(_plugins).map(function(name) {\n                return _plugins[name];\n            });\n            for(let i = 0, len = pluginsValues.length, p; i < len; i++){\n                p = pluginsValues[i].default || pluginsValues[i];\n                plugins[p.name] = p;\n            }\n        }\n        options.plugins = plugins;\n        /** Values */ options.strictMode = options.strictMode !== false;\n        options.lang = options.lang || (_lang_en__WEBPACK_IMPORTED_MODULE_1___default());\n        options.value = typeof options.value === \"string\" ? options.value : null;\n        options.allowedClassNames = new _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._w.RegExp((options.allowedClassNames && typeof options.allowedClassNames === \"string\" ? options.allowedClassNames + \"|\" : \"\") + \"^__se__|se-|katex\");\n        options.historyStackDelayTime = typeof options.historyStackDelayTime === \"number\" ? options.historyStackDelayTime : 400;\n        options.frameAttrbutes = options.frameAttrbutes || {};\n        // tag style\n        options.defaultTag = typeof options.defaultTag === \"string\" && options.defaultTag.length > 0 ? options.defaultTag : \"p\";\n        const textTags = options.textTags = [\n            {\n                bold: \"STRONG\",\n                underline: \"U\",\n                italic: \"EM\",\n                strike: \"DEL\",\n                sub: \"SUB\",\n                sup: \"SUP\"\n            },\n            options.textTags || {}\n        ].reduce(function(_default, _new) {\n            for(let key in _new){\n                _default[key] = _new[key];\n            }\n            return _default;\n        }, {});\n        options._textTagsMap = {\n            \"strong\": textTags.bold.toLowerCase(),\n            \"b\": textTags.bold.toLowerCase(),\n            \"u\": textTags.underline.toLowerCase(),\n            \"ins\": textTags.underline.toLowerCase(),\n            \"em\": textTags.italic.toLowerCase(),\n            \"i\": textTags.italic.toLowerCase(),\n            \"del\": textTags.strike.toLowerCase(),\n            \"strike\": textTags.strike.toLowerCase(),\n            \"s\": textTags.strike.toLowerCase(),\n            \"sub\": textTags.sub.toLowerCase(),\n            \"sup\": textTags.sup.toLowerCase()\n        };\n        options._defaultCommand = {\n            bold: options.textTags.bold,\n            underline: options.textTags.underline,\n            italic: options.textTags.italic,\n            strike: options.textTags.strike,\n            subscript: options.textTags.sub,\n            superscript: options.textTags.sup\n        };\n        /** Whitelist, Blacklist */ options.__allowedScriptTag = options.__allowedScriptTag === true;\n        const whitelist = \"br|p|div|pre|blockquote|h1|h2|h3|h4|h5|h6|ol|ul|li|hr|figure|figcaption|img|iframe|audio|video|source|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|code|svg|path|details|summary\";\n        // tags\n        options.tagsBlacklist = options.tagsBlacklist || \"\";\n        options._defaultTagsWhitelist = (typeof options._defaultTagsWhitelist === \"string\" ? options._defaultTagsWhitelist : whitelist) + (options.__allowedScriptTag ? \"|script\" : \"\");\n        options._editorTagsWhitelist = options.addTagsWhitelist === \"*\" ? \"*\" : this._setWhitelist(options._defaultTagsWhitelist + (typeof options.addTagsWhitelist === \"string\" && options.addTagsWhitelist.length > 0 ? \"|\" + options.addTagsWhitelist : \"\"), options.tagsBlacklist);\n        // paste tags\n        options.pasteTagsBlacklist = options.tagsBlacklist + (options.tagsBlacklist && options.pasteTagsBlacklist ? \"|\" + options.pasteTagsBlacklist : options.pasteTagsBlacklist || \"\");\n        options.pasteTagsWhitelist = options.pasteTagsWhitelist === \"*\" ? \"*\" : this._setWhitelist(typeof options.pasteTagsWhitelist === \"string\" ? options.pasteTagsWhitelist : options._editorTagsWhitelist, options.pasteTagsBlacklist);\n        // tag attributes\n        options.attributesWhitelist = !options.attributesWhitelist || typeof options.attributesWhitelist !== \"object\" ? null : options.attributesWhitelist;\n        options.attributesBlacklist = !options.attributesBlacklist || typeof options.attributesBlacklist !== \"object\" ? null : options.attributesBlacklist;\n        /** Layout */ options.mode = options.mode || \"classic\"; // classic, inline, balloon, balloon-always\n        options.rtl = !!options.rtl;\n        options.lineAttrReset = [\n            \"id\"\n        ].concat(options.lineAttrReset && typeof options.lineAttrReset === \"string\" ? options.lineAttrReset.toLowerCase().split(\"|\") : []);\n        options._editableClass = \"sun-editor-editable\" + (options.rtl ? \" se-rtl\" : \"\");\n        options._printClass = typeof options._printClass === \"string\" ? options._printClass : null;\n        options.toolbarWidth = options.toolbarWidth ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.toolbarWidth) ? options.toolbarWidth + \"px\" : options.toolbarWidth : \"auto\";\n        options.toolbarContainer = typeof options.toolbarContainer === \"string\" ? document.querySelector(options.toolbarContainer) : options.toolbarContainer;\n        options.stickyToolbar = /balloon/i.test(options.mode) || !!options.toolbarContainer ? -1 : options.stickyToolbar === undefined ? 0 : /^\\d+/.test(options.stickyToolbar) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.stickyToolbar, 0) : -1;\n        options.hideToolbar = !!options.hideToolbar;\n        options.fullScreenOffset = options.fullScreenOffset === undefined ? 0 : /^\\d+/.test(options.fullScreenOffset) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.fullScreenOffset, 0) : 0;\n        options.fullPage = !!options.fullPage;\n        options.iframe = options.fullPage || !!options.iframe;\n        options.iframeAttributes = options.iframeAttributes || {};\n        options.iframeCSSFileName = options.iframe ? typeof options.iframeCSSFileName === \"string\" ? [\n            options.iframeCSSFileName\n        ] : options.iframeCSSFileName || [\n            \"suneditor\"\n        ] : null;\n        options.previewTemplate = typeof options.previewTemplate === \"string\" ? options.previewTemplate : null;\n        options.printTemplate = typeof options.printTemplate === \"string\" ? options.printTemplate : null;\n        /** CodeMirror object */ options.codeMirror = options.codeMirror ? options.codeMirror.src ? options.codeMirror : {\n            src: options.codeMirror\n        } : null;\n        /** katex object (Math plugin) */ options.katex = options.katex ? options.katex.src ? options.katex : {\n            src: options.katex\n        } : null;\n        options.mathFontSize = !!options.mathFontSize ? options.mathFontSize : [\n            {\n                text: \"1\",\n                value: \"1em\"\n            },\n            {\n                text: \"1.5\",\n                value: \"1.5em\"\n            },\n            {\n                text: \"2\",\n                value: \"2em\"\n            },\n            {\n                text: \"2.5\",\n                value: \"2.5em\"\n            }\n        ];\n        /** Display */ options.position = typeof options.position === \"string\" ? options.position : null;\n        options.display = options.display || (element.style.display === \"none\" || !element.style.display ? \"block\" : element.style.display);\n        options.popupDisplay = options.popupDisplay || \"full\";\n        /** Bottom resizing bar */ options.resizingBar = options.resizingBar === undefined ? /inline|balloon/i.test(options.mode) ? false : true : options.resizingBar;\n        options.showPathLabel = !options.resizingBar ? false : typeof options.showPathLabel === \"boolean\" ? options.showPathLabel : true;\n        options.resizeEnable = options.resizeEnable === undefined ? true : !!options.resizeEnable;\n        options.resizingBarContainer = typeof options.resizingBarContainer === \"string\" ? document.querySelector(options.resizingBarContainer) : options.resizingBarContainer;\n        /** Character count */ options.charCounter = options.maxCharCount > 0 ? true : typeof options.charCounter === \"boolean\" ? options.charCounter : false;\n        options.charCounterType = typeof options.charCounterType === \"string\" ? options.charCounterType : \"char\";\n        options.charCounterLabel = typeof options.charCounterLabel === \"string\" ? options.charCounterLabel.trim() : null;\n        options.maxCharCount = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.maxCharCount) && options.maxCharCount > -1 ? options.maxCharCount * 1 : null;\n        /** Width size */ options.width = options.width ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.width) ? options.width + \"px\" : options.width : element.clientWidth ? element.clientWidth + \"px\" : \"100%\";\n        options.minWidth = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.minWidth) ? options.minWidth + \"px\" : options.minWidth) || \"\";\n        options.maxWidth = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.maxWidth) ? options.maxWidth + \"px\" : options.maxWidth) || \"\";\n        /** Height size */ options.height = options.height ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.height) ? options.height + \"px\" : options.height : element.clientHeight ? element.clientHeight + \"px\" : \"auto\";\n        options.minHeight = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.minHeight) ? options.minHeight + \"px\" : options.minHeight) || \"\";\n        options.maxHeight = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.maxHeight) ? options.maxHeight + \"px\" : options.maxHeight) || \"\";\n        /** Editing area */ options.className = typeof options.className === \"string\" && options.className.length > 0 ? \" \" + options.className : \"\";\n        options.defaultStyle = typeof options.defaultStyle === \"string\" ? options.defaultStyle : \"\";\n        /** Defining menu items */ options.font = !options.font ? [\n            \"Arial\",\n            \"Comic Sans MS\",\n            \"Courier New\",\n            \"Impact\",\n            \"Georgia\",\n            \"tahoma\",\n            \"Trebuchet MS\",\n            \"Verdana\"\n        ] : options.font;\n        options.fontSize = !options.fontSize ? null : options.fontSize;\n        options.formats = !options.formats ? null : options.formats;\n        options.colorList = !options.colorList ? null : options.colorList;\n        options.lineHeights = !options.lineHeights ? null : options.lineHeights;\n        options.paragraphStyles = !options.paragraphStyles ? null : options.paragraphStyles;\n        options.textStyles = !options.textStyles ? null : options.textStyles;\n        options.fontSizeUnit = typeof options.fontSizeUnit === \"string\" ? options.fontSizeUnit.trim().toLowerCase() || \"px\" : \"px\";\n        options.alignItems = typeof options.alignItems === \"object\" ? options.alignItems : options.rtl ? [\n            \"right\",\n            \"center\",\n            \"left\",\n            \"justify\"\n        ] : [\n            \"left\",\n            \"center\",\n            \"right\",\n            \"justify\"\n        ];\n        /** Image */ options.imageResizing = options.imageResizing === undefined ? true : options.imageResizing;\n        options.imageHeightShow = options.imageHeightShow === undefined ? true : !!options.imageHeightShow;\n        options.imageAlignShow = options.imageAlignShow === undefined ? true : !!options.imageAlignShow;\n        options.imageWidth = !options.imageWidth ? \"auto\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.imageWidth) ? options.imageWidth + \"px\" : options.imageWidth;\n        options.imageHeight = !options.imageHeight ? \"auto\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.imageHeight) ? options.imageHeight + \"px\" : options.imageHeight;\n        options.imageSizeOnlyPercentage = !!options.imageSizeOnlyPercentage;\n        options._imageSizeUnit = options.imageSizeOnlyPercentage ? \"%\" : \"px\";\n        options.imageRotation = options.imageRotation !== undefined ? options.imageRotation : !(options.imageSizeOnlyPercentage || !options.imageHeightShow);\n        options.imageFileInput = options.imageFileInput === undefined ? true : options.imageFileInput;\n        options.imageUrlInput = options.imageUrlInput === undefined || !options.imageFileInput ? true : options.imageUrlInput;\n        options.imageUploadHeader = options.imageUploadHeader || null;\n        options.imageUploadUrl = typeof options.imageUploadUrl === \"string\" ? options.imageUploadUrl : null;\n        options.imageUploadSizeLimit = /\\d+/.test(options.imageUploadSizeLimit) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.imageUploadSizeLimit, 0) : null;\n        options.imageMultipleFile = !!options.imageMultipleFile;\n        options.imageAccept = typeof options.imageAccept !== \"string\" || options.imageAccept.trim() === \"*\" ? \"image/*\" : options.imageAccept.trim() || \"image/*\";\n        /** Image - image gallery */ options.imageGalleryUrl = typeof options.imageGalleryUrl === \"string\" ? options.imageGalleryUrl : null;\n        options.imageGalleryHeader = options.imageGalleryHeader || null;\n        /** Video */ options.videoResizing = options.videoResizing === undefined ? true : options.videoResizing;\n        options.videoHeightShow = options.videoHeightShow === undefined ? true : !!options.videoHeightShow;\n        options.videoAlignShow = options.videoAlignShow === undefined ? true : !!options.videoAlignShow;\n        options.videoRatioShow = options.videoRatioShow === undefined ? true : !!options.videoRatioShow;\n        options.videoWidth = !options.videoWidth || !_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoWidth, 0) ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.videoWidth) ? options.videoWidth + \"px\" : options.videoWidth;\n        options.videoHeight = !options.videoHeight || !_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoHeight, 0) ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.videoHeight) ? options.videoHeight + \"px\" : options.videoHeight;\n        options.videoSizeOnlyPercentage = !!options.videoSizeOnlyPercentage;\n        options._videoSizeUnit = options.videoSizeOnlyPercentage ? \"%\" : \"px\";\n        options.videoRotation = options.videoRotation !== undefined ? options.videoRotation : !(options.videoSizeOnlyPercentage || !options.videoHeightShow);\n        options.videoRatio = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoRatio, 4) || 0.5625;\n        options.videoRatioList = !options.videoRatioList ? null : options.videoRatioList;\n        options.youtubeQuery = (options.youtubeQuery || \"\").replace(\"?\", \"\");\n        options.vimeoQuery = (options.vimeoQuery || \"\").replace(\"?\", \"\");\n        options.videoFileInput = !!options.videoFileInput;\n        options.videoUrlInput = options.videoUrlInput === undefined || !options.videoFileInput ? true : options.videoUrlInput;\n        options.videoUploadHeader = options.videoUploadHeader || null;\n        options.videoUploadUrl = typeof options.videoUploadUrl === \"string\" ? options.videoUploadUrl : null;\n        options.videoUploadSizeLimit = /\\d+/.test(options.videoUploadSizeLimit) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoUploadSizeLimit, 0) : null;\n        options.videoMultipleFile = !!options.videoMultipleFile;\n        options.videoTagAttrs = options.videoTagAttrs || null;\n        options.videoIframeAttrs = options.videoIframeAttrs || null;\n        options.videoAccept = typeof options.videoAccept !== \"string\" || options.videoAccept.trim() === \"*\" ? \"video/*\" : options.videoAccept.trim() || \"video/*\";\n        /** Audio */ options.audioWidth = !options.audioWidth ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.audioWidth) ? options.audioWidth + \"px\" : options.audioWidth;\n        options.audioHeight = !options.audioHeight ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.audioHeight) ? options.audioHeight + \"px\" : options.audioHeight;\n        options.audioFileInput = !!options.audioFileInput;\n        options.audioUrlInput = options.audioUrlInput === undefined || !options.audioFileInput ? true : options.audioUrlInput;\n        options.audioUploadHeader = options.audioUploadHeader || null;\n        options.audioUploadUrl = typeof options.audioUploadUrl === \"string\" ? options.audioUploadUrl : null;\n        options.audioUploadSizeLimit = /\\d+/.test(options.audioUploadSizeLimit) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.audioUploadSizeLimit, 0) : null;\n        options.audioMultipleFile = !!options.audioMultipleFile;\n        options.audioTagAttrs = options.audioTagAttrs || null;\n        options.audioAccept = typeof options.audioAccept !== \"string\" || options.audioAccept.trim() === \"*\" ? \"audio/*\" : options.audioAccept.trim() || \"audio/*\";\n        /** Table */ options.tableCellControllerPosition = typeof options.tableCellControllerPosition === \"string\" ? options.tableCellControllerPosition.toLowerCase() : \"cell\";\n        /** Link */ options.linkTargetNewWindow = !!options.linkTargetNewWindow;\n        options.linkProtocol = typeof options.linkProtocol === \"string\" ? options.linkProtocol : null;\n        options.linkRel = Array.isArray(options.linkRel) ? options.linkRel : [];\n        options.linkRelDefault = options.linkRelDefault || {};\n        /** HR */ // options.hrItems = options.hrItems;\n        /** Key actions */ options.tabDisable = !!options.tabDisable;\n        options.shortcutsDisable = Array.isArray(options.shortcutsDisable) ? options.shortcutsDisable : [];\n        options.shortcutsHint = options.shortcutsHint === undefined ? true : !!options.shortcutsHint;\n        /** Defining save button */ options.callBackSave = !options.callBackSave ? null : options.callBackSave;\n        /** Templates Array */ options.templates = !options.templates ? null : options.templates;\n        /** ETC */ options.placeholder = typeof options.placeholder === \"string\" ? options.placeholder : null;\n        options.mediaAutoSelect = options.mediaAutoSelect === undefined ? true : !!options.mediaAutoSelect;\n        /** Buttons */ options.buttonList = !!options.buttonList ? options.buttonList : [\n            [\n                \"undo\",\n                \"redo\"\n            ],\n            [\n                \"bold\",\n                \"underline\",\n                \"italic\",\n                \"strike\",\n                \"subscript\",\n                \"superscript\"\n            ],\n            [\n                \"removeFormat\"\n            ],\n            [\n                \"outdent\",\n                \"indent\"\n            ],\n            [\n                \"fullScreen\",\n                \"showBlocks\",\n                \"codeView\"\n            ],\n            [\n                \"preview\",\n                \"print\"\n            ]\n        ];\n        /** RTL - buttons */ if (options.rtl) {\n            options.buttonList = options.buttonList.reverse();\n        }\n        /** --- Define icons --- */ // custom icons\n        options.icons = !options.icons || typeof options.icons !== \"object\" ? _assets_defaultIcons__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : [\n            _assets_defaultIcons__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n            options.icons\n        ].reduce(function(_default, _new) {\n            for(let key in _new){\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(_new, key)) _default[key] = _new[key];\n            }\n            return _default;\n        }, {});\n        // rtl icons\n        options.icons = !options.rtl ? options.icons : [\n            options.icons,\n            options.icons.rtl\n        ].reduce(function(_default, _new) {\n            for(let key in _new){\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(_new, key)) _default[key] = _new[key];\n            }\n            return _default;\n        }, {});\n        /** Private options */ options.__listCommonStyle = options.__listCommonStyle || [\n            \"fontSize\",\n            \"color\",\n            \"fontFamily\",\n            \"fontWeight\",\n            \"fontStyle\"\n        ];\n        /** _init options */ options._editorStyles = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._setDefaultOptionStyle(options, options.defaultStyle);\n    },\n    _setWhitelist: function(whitelist, blacklist) {\n        if (typeof blacklist !== \"string\") return whitelist;\n        blacklist = blacklist.split(\"|\");\n        whitelist = whitelist.split(\"|\");\n        for(let i = 0, len = blacklist.length, index; i < len; i++){\n            index = whitelist.indexOf(blacklist[i]);\n            if (index > -1) whitelist.splice(index, 1);\n        }\n        return whitelist.join(\"|\");\n    },\n    /**\r\n     * @description Suneditor's Default button list\r\n     * @param {Object} options options\r\n     * @private\r\n     */ _defaultButtons: function(options) {\n        const icons = options.icons;\n        const lang = options.lang;\n        const cmd = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isOSX_IOS ? \"⌘\" : \"CTRL\";\n        const addShift = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isOSX_IOS ? \"⇧\" : \"+SHIFT\";\n        const shortcutsDisable = !options.shortcutsHint ? [\n            \"bold\",\n            \"strike\",\n            \"underline\",\n            \"italic\",\n            \"undo\",\n            \"indent\",\n            \"save\"\n        ] : options.shortcutsDisable;\n        const indentKey = options.rtl ? [\n            \"[\",\n            \"]\"\n        ] : [\n            \"]\",\n            \"[\"\n        ];\n        const indentIcon = options.rtl ? [\n            icons.outdent,\n            icons.indent\n        ] : [\n            icons.indent,\n            icons.outdent\n        ];\n        return {\n            /** default command */ bold: [\n                \"\",\n                lang.toolbar.bold + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"bold\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">B</span>') + \"</span>\",\n                \"bold\",\n                \"\",\n                icons.bold\n            ],\n            underline: [\n                \"\",\n                lang.toolbar.underline + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"underline\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">U</span>') + \"</span>\",\n                \"underline\",\n                \"\",\n                icons.underline\n            ],\n            italic: [\n                \"\",\n                lang.toolbar.italic + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"italic\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">I</span>') + \"</span>\",\n                \"italic\",\n                \"\",\n                icons.italic\n            ],\n            strike: [\n                \"\",\n                lang.toolbar.strike + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"strike\") > -1 ? \"\" : cmd + addShift + '+<span class=\"se-shortcut-key\">S</span>') + \"</span>\",\n                \"strike\",\n                \"\",\n                icons.strike\n            ],\n            subscript: [\n                \"\",\n                lang.toolbar.subscript,\n                \"SUB\",\n                \"\",\n                icons.subscript\n            ],\n            superscript: [\n                \"\",\n                lang.toolbar.superscript,\n                \"SUP\",\n                \"\",\n                icons.superscript\n            ],\n            removeFormat: [\n                \"\",\n                lang.toolbar.removeFormat,\n                \"removeFormat\",\n                \"\",\n                icons.erase\n            ],\n            indent: [\n                \"\",\n                lang.toolbar.indent + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"indent\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">' + indentKey[0] + \"</span>\") + \"</span>\",\n                \"indent\",\n                \"\",\n                indentIcon[0]\n            ],\n            outdent: [\n                \"\",\n                lang.toolbar.outdent + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"indent\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">' + indentKey[1] + \"</span>\") + \"</span>\",\n                \"outdent\",\n                \"\",\n                indentIcon[1]\n            ],\n            fullScreen: [\n                \"se-code-view-enabled se-resizing-enabled\",\n                lang.toolbar.fullScreen,\n                \"fullScreen\",\n                \"\",\n                icons.expansion\n            ],\n            showBlocks: [\n                \"\",\n                lang.toolbar.showBlocks,\n                \"showBlocks\",\n                \"\",\n                icons.show_blocks\n            ],\n            codeView: [\n                \"se-code-view-enabled se-resizing-enabled\",\n                lang.toolbar.codeView,\n                \"codeView\",\n                \"\",\n                icons.code_view\n            ],\n            undo: [\n                \"\",\n                lang.toolbar.undo + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"undo\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">Z</span>') + \"</span>\",\n                \"undo\",\n                \"\",\n                icons.undo\n            ],\n            redo: [\n                \"\",\n                lang.toolbar.redo + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"undo\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">Y</span> / ' + cmd + addShift + '+<span class=\"se-shortcut-key\">Z</span>') + \"</span>\",\n                \"redo\",\n                \"\",\n                icons.redo\n            ],\n            preview: [\n                \"se-resizing-enabled\",\n                lang.toolbar.preview,\n                \"preview\",\n                \"\",\n                icons.preview\n            ],\n            print: [\n                \"se-resizing-enabled\",\n                lang.toolbar.print,\n                \"print\",\n                \"\",\n                icons.print\n            ],\n            dir: [\n                \"\",\n                lang.toolbar[options.rtl ? \"dir_ltr\" : \"dir_rtl\"],\n                \"dir\",\n                \"\",\n                icons[options.rtl ? \"dir_ltr\" : \"dir_rtl\"]\n            ],\n            dir_ltr: [\n                \"\",\n                lang.toolbar.dir_ltr,\n                \"dir_ltr\",\n                \"\",\n                icons.dir_ltr\n            ],\n            dir_rtl: [\n                \"\",\n                lang.toolbar.dir_rtl,\n                \"dir_rtl\",\n                \"\",\n                icons.dir_rtl\n            ],\n            save: [\n                \"se-resizing-enabled\",\n                lang.toolbar.save + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"save\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">S</span>') + \"</span>\",\n                \"save\",\n                \"\",\n                icons.save\n            ],\n            /** plugins - command */ blockquote: [\n                \"\",\n                lang.toolbar.tag_blockquote,\n                \"blockquote\",\n                \"command\",\n                icons.blockquote\n            ],\n            /** plugins - submenu */ font: [\n                \"se-btn-select se-btn-tool-font\",\n                lang.toolbar.font,\n                \"font\",\n                \"submenu\",\n                '<span class=\"txt\">' + lang.toolbar.font + \"</span>\" + icons.arrow_down\n            ],\n            formatBlock: [\n                \"se-btn-select se-btn-tool-format\",\n                lang.toolbar.formats,\n                \"formatBlock\",\n                \"submenu\",\n                '<span class=\"txt\">' + lang.toolbar.formats + \"</span>\" + icons.arrow_down\n            ],\n            fontSize: [\n                \"se-btn-select se-btn-tool-size\",\n                lang.toolbar.fontSize,\n                \"fontSize\",\n                \"submenu\",\n                '<span class=\"txt\">' + lang.toolbar.fontSize + \"</span>\" + icons.arrow_down\n            ],\n            fontColor: [\n                \"\",\n                lang.toolbar.fontColor,\n                \"fontColor\",\n                \"submenu\",\n                icons.font_color\n            ],\n            hiliteColor: [\n                \"\",\n                lang.toolbar.hiliteColor,\n                \"hiliteColor\",\n                \"submenu\",\n                icons.highlight_color\n            ],\n            align: [\n                \"se-btn-align\",\n                lang.toolbar.align,\n                \"align\",\n                \"submenu\",\n                options.rtl ? icons.align_right : icons.align_left\n            ],\n            list: [\n                \"\",\n                lang.toolbar.list,\n                \"list\",\n                \"submenu\",\n                icons.list_number\n            ],\n            horizontalRule: [\n                \"btn_line\",\n                lang.toolbar.horizontalRule,\n                \"horizontalRule\",\n                \"submenu\",\n                icons.horizontal_rule\n            ],\n            table: [\n                \"\",\n                lang.toolbar.table,\n                \"table\",\n                \"submenu\",\n                icons.table\n            ],\n            lineHeight: [\n                \"\",\n                lang.toolbar.lineHeight,\n                \"lineHeight\",\n                \"submenu\",\n                icons.line_height\n            ],\n            template: [\n                \"\",\n                lang.toolbar.template,\n                \"template\",\n                \"submenu\",\n                icons.template\n            ],\n            paragraphStyle: [\n                \"\",\n                lang.toolbar.paragraphStyle,\n                \"paragraphStyle\",\n                \"submenu\",\n                icons.paragraph_style\n            ],\n            textStyle: [\n                \"\",\n                lang.toolbar.textStyle,\n                \"textStyle\",\n                \"submenu\",\n                icons.text_style\n            ],\n            /** plugins - dialog */ link: [\n                \"\",\n                lang.toolbar.link,\n                \"link\",\n                \"dialog\",\n                icons.link\n            ],\n            image: [\n                \"\",\n                lang.toolbar.image,\n                \"image\",\n                \"dialog\",\n                icons.image\n            ],\n            video: [\n                \"\",\n                lang.toolbar.video,\n                \"video\",\n                \"dialog\",\n                icons.video\n            ],\n            audio: [\n                \"\",\n                lang.toolbar.audio,\n                \"audio\",\n                \"dialog\",\n                icons.audio\n            ],\n            math: [\n                \"\",\n                lang.toolbar.math,\n                \"math\",\n                \"dialog\",\n                icons.math\n            ],\n            /** plugins - fileBrowser */ imageGallery: [\n                \"\",\n                lang.toolbar.imageGallery,\n                \"imageGallery\",\n                \"fileBrowser\",\n                icons.image_gallery\n            ]\n        };\n    },\n    /**\r\n     * @description Create a group div containing each module\r\n     * @returns {Object}\r\n     * @private\r\n     */ _createModuleGroup: function() {\n        const oDiv = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"DIV\");\n        oDiv.className = \"se-btn-module se-btn-module-border\";\n        const oUl = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"UL\");\n        oUl.className = \"se-menu-list\";\n        oDiv.appendChild(oUl);\n        return {\n            \"div\": oDiv,\n            \"ul\": oUl\n        };\n    },\n    /**\r\n     * @description Create a button element\r\n     * @param {string} buttonClass className in button\r\n     * @param {string} title Title in button\r\n     * @param {string} dataCommand The data-command property of the button\r\n     * @param {string} dataDisplay The data-display property of the button ('dialog', 'submenu', 'command')\r\n     * @param {string} innerHTML Html in button\r\n     * @param {string} _disabled Button disabled\r\n     * @param {Object} _icons Icons\r\n     * @returns {Object}\r\n     * @private\r\n     */ _createButton: function(buttonClass, title, dataCommand, dataDisplay, innerHTML, _disabled, _icons) {\n        const oLi = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"LI\");\n        const oButton = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"BUTTON\");\n        const label = title || dataCommand;\n        oButton.setAttribute(\"type\", \"button\");\n        oButton.setAttribute(\"class\", \"se-btn\" + (buttonClass ? \" \" + buttonClass : \"\") + \" se-tooltip\");\n        oButton.setAttribute(\"data-command\", dataCommand);\n        oButton.setAttribute(\"data-display\", dataDisplay);\n        oButton.setAttribute(\"aria-label\", label.replace(/<span .+<\\/span>/, \"\"));\n        oButton.setAttribute(\"tabindex\", \"-1\");\n        if (!innerHTML) innerHTML = '<span class=\"se-icon-text\">!</span>';\n        if (/^default\\./i.test(innerHTML)) {\n            innerHTML = _icons[innerHTML.replace(/^default\\./i, \"\")];\n        }\n        if (/^text\\./i.test(innerHTML)) {\n            innerHTML = innerHTML.replace(/^text\\./i, \"\");\n            oButton.className += \" se-btn-more-text\";\n        }\n        innerHTML += '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + label + \"</span></span>\";\n        if (_disabled) oButton.setAttribute(\"disabled\", true);\n        oButton.innerHTML = innerHTML;\n        oLi.appendChild(oButton);\n        return {\n            \"li\": oLi,\n            \"button\": oButton\n        };\n    },\n    /**\r\n     * @description Create editor HTML\r\n     * @param {Array} doc document object\r\n     * @param {Array} buttonList option.buttonList\r\n     * @param {Object|null} plugins Plugins\r\n     * @param {Array} options options\r\n     * @returns {Object} { element: (Element) Toolbar element, plugins: (Array|null) Plugins Array, pluginCallButtons: (Object), responsiveButtons: (Array) }\r\n     * @private\r\n     */ _createToolBar: function(doc, buttonList, plugins, options) {\n        const separator_vertical = doc.createElement(\"DIV\");\n        separator_vertical.className = \"se-toolbar-separator-vertical\";\n        const tool_bar = doc.createElement(\"DIV\");\n        tool_bar.className = \"se-toolbar sun-editor-common\";\n        const _buttonTray = doc.createElement(\"DIV\");\n        _buttonTray.className = \"se-btn-tray\";\n        tool_bar.appendChild(_buttonTray);\n        /** create button list */ buttonList = JSON.parse(JSON.stringify(buttonList));\n        const icons = options.icons;\n        const defaultButtonList = this._defaultButtons(options);\n        const pluginCallButtons = {};\n        const responsiveButtons = [];\n        let module = null;\n        let button = null;\n        let moduleElement = null;\n        let buttonElement = null;\n        let pluginName = \"\";\n        let vertical = false;\n        const moreLayer = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"DIV\");\n        moreLayer.className = \"se-toolbar-more-layer\";\n        buttonGroupLoop: for(let i = 0, more, moreContainer, moreCommand, buttonGroup, align; i < buttonList.length; i++){\n            more = false;\n            align = \"\";\n            buttonGroup = buttonList[i];\n            moduleElement = this._createModuleGroup();\n            // button object\n            if (typeof buttonGroup === \"object\") {\n                // buttons loop\n                for(let j = 0, moreButton; j < buttonGroup.length; j++){\n                    button = buttonGroup[j];\n                    moreButton = false;\n                    if (/^\\%\\d+/.test(button) && j === 0) {\n                        buttonGroup[0] = button.replace(/[^\\d]/g, \"\");\n                        responsiveButtons.push(buttonGroup);\n                        buttonList.splice(i--, 1);\n                        continue buttonGroupLoop;\n                    }\n                    if (typeof button === \"object\") {\n                        if (typeof button.add === \"function\") {\n                            pluginName = button.name;\n                            module = defaultButtonList[pluginName];\n                            plugins[pluginName] = button;\n                        } else {\n                            pluginName = button.name;\n                            module = [\n                                button.buttonClass,\n                                button.title,\n                                button.name,\n                                button.dataDisplay,\n                                button.innerHTML,\n                                button._disabled\n                            ];\n                        }\n                    } else {\n                        // align\n                        if (/^\\-/.test(button)) {\n                            align = button.substr(1);\n                            moduleElement.div.className += \" module-float-\" + align;\n                            continue;\n                        }\n                        // rtl fix\n                        if (/^\\#/.test(button)) {\n                            const option = button.substr(1);\n                            if (option === \"fix\") moduleElement.ul.className += \" se-menu-dir-fix\";\n                            continue;\n                        }\n                        // more button\n                        if (/^\\:/.test(button)) {\n                            moreButton = true;\n                            const matched = button.match(/^\\:([^\\-]+)\\-([^\\-]+)\\-([^\\-]+)/);\n                            moreCommand = \"__se__\" + matched[1].trim();\n                            const title = matched[2].trim();\n                            const innerHTML = matched[3].trim();\n                            module = [\n                                \"se-btn-more\",\n                                title,\n                                moreCommand,\n                                \"MORE\",\n                                innerHTML\n                            ];\n                        } else {\n                            module = defaultButtonList[button];\n                        }\n                        pluginName = button;\n                        if (!module) {\n                            const custom = plugins[pluginName];\n                            if (!custom) throw Error(\"[SUNEDITOR.create.toolbar.fail] The button name of a plugin that does not exist. [\" + pluginName + \"]\");\n                            module = [\n                                custom.buttonClass,\n                                custom.title,\n                                custom.name,\n                                custom.display,\n                                custom.innerHTML,\n                                custom._disabled\n                            ];\n                        }\n                    }\n                    buttonElement = this._createButton(module[0], module[1], module[2], module[3], module[4], module[5], icons);\n                    (more ? moreContainer : moduleElement.ul).appendChild(buttonElement.li);\n                    if (plugins[pluginName]) {\n                        pluginCallButtons[pluginName] = buttonElement.button;\n                    }\n                    // more button\n                    if (moreButton) {\n                        more = true;\n                        moreContainer = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"DIV\");\n                        moreContainer.className = \"se-more-layer \" + moreCommand;\n                        moreContainer.innerHTML = '<div class=\"se-more-form\"><ul class=\"se-menu-list\"' + (align ? ' style=\"float: ' + align + ';\"' : \"\") + \"></ul></div>\";\n                        moreLayer.appendChild(moreContainer);\n                        moreContainer = moreContainer.firstElementChild.firstElementChild;\n                    }\n                }\n                if (vertical) {\n                    const sv = separator_vertical.cloneNode(false);\n                    _buttonTray.appendChild(sv);\n                }\n                _buttonTray.appendChild(moduleElement.div);\n                vertical = true;\n            } else if (/^\\/$/.test(buttonGroup)) {\n                const enterDiv = doc.createElement(\"DIV\");\n                enterDiv.className = \"se-btn-module-enter\";\n                _buttonTray.appendChild(enterDiv);\n                vertical = false;\n            }\n        }\n        switch(_buttonTray.children.length){\n            case 0:\n                _buttonTray.style.display = \"none\";\n                break;\n            case 1:\n                _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeClass(_buttonTray.firstElementChild, \"se-btn-module-border\");\n                break;\n            default:\n                if (options.rtl) {\n                    const sv = separator_vertical.cloneNode(false);\n                    sv.style.float = _buttonTray.lastElementChild.style.float;\n                    _buttonTray.appendChild(sv);\n                }\n        }\n        if (responsiveButtons.length > 0) responsiveButtons.unshift(buttonList);\n        if (moreLayer.children.length > 0) _buttonTray.appendChild(moreLayer);\n        // menu tray\n        const _menuTray = doc.createElement(\"DIV\");\n        _menuTray.className = \"se-menu-tray\";\n        tool_bar.appendChild(_menuTray);\n        // cover\n        const tool_cover = doc.createElement(\"DIV\");\n        tool_cover.className = \"se-toolbar-cover\";\n        tool_bar.appendChild(tool_cover);\n        if (options.hideToolbar) tool_bar.style.display = \"none\";\n        return {\n            \"element\": tool_bar,\n            \"plugins\": plugins,\n            \"pluginCallButtons\": pluginCallButtons,\n            \"responsiveButtons\": responsiveButtons,\n            \"_menuTray\": _menuTray,\n            \"_buttonTray\": _buttonTray\n        };\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lib/constructor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lib/context.js":
/*!***************************************************!*\
  !*** ./node_modules/suneditor/src/lib/context.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n/**\r\n * @description Elements and variables you should have\r\n * @param {Element} element textarea element\r\n * @param {object} cons Toolbar element you created\r\n * @param {JSON|Object} options Inserted options\r\n * @returns {Object} {Elements, variables of the editor, option}\r\n * @private\r\n */ const _Context = function(element, cons, options) {\n    return {\n        element: {\n            originElement: element,\n            topArea: cons._top,\n            relative: cons._relative,\n            toolbar: cons._toolBar,\n            _toolbarShadow: cons._toolbarShadow,\n            _buttonTray: cons._toolBar.querySelector(\".se-btn-tray\"),\n            _menuTray: cons._menuTray,\n            resizingBar: cons._resizingBar,\n            navigation: cons._navigation,\n            charWrapper: cons._charWrapper,\n            charCounter: cons._charCounter,\n            editorArea: cons._editorArea,\n            wysiwygFrame: cons._wysiwygArea,\n            wysiwyg: cons._wysiwygArea,\n            code: cons._codeArea,\n            placeholder: cons._placeholder,\n            loading: cons._loading,\n            lineBreaker: cons._lineBreaker,\n            lineBreaker_t: cons._lineBreaker_t,\n            lineBreaker_b: cons._lineBreaker_b,\n            resizeBackground: cons._resizeBack,\n            _stickyDummy: cons._stickyDummy,\n            _arrow: cons._arrow,\n            _focusTemp: cons._focusTemp\n        },\n        tool: {\n            cover: cons._toolBar.querySelector(\".se-toolbar-cover\"),\n            bold: cons._toolBar.querySelector('[data-command=\"bold\"]'),\n            underline: cons._toolBar.querySelector('[data-command=\"underline\"]'),\n            italic: cons._toolBar.querySelector('[data-command=\"italic\"]'),\n            strike: cons._toolBar.querySelector('[data-command=\"strike\"]'),\n            sub: cons._toolBar.querySelector('[data-command=\"SUB\"]'),\n            sup: cons._toolBar.querySelector('[data-command=\"SUP\"]'),\n            undo: cons._toolBar.querySelector('[data-command=\"undo\"]'),\n            redo: cons._toolBar.querySelector('[data-command=\"redo\"]'),\n            save: cons._toolBar.querySelector('[data-command=\"save\"]'),\n            outdent: cons._toolBar.querySelector('[data-command=\"outdent\"]'),\n            indent: cons._toolBar.querySelector('[data-command=\"indent\"]'),\n            fullScreen: cons._toolBar.querySelector('[data-command=\"fullScreen\"]'),\n            showBlocks: cons._toolBar.querySelector('[data-command=\"showBlocks\"]'),\n            codeView: cons._toolBar.querySelector('[data-command=\"codeView\"]'),\n            dir: cons._toolBar.querySelector('[data-command=\"dir\"]'),\n            dir_ltr: cons._toolBar.querySelector('[data-command=\"dir_ltr\"]'),\n            dir_rtl: cons._toolBar.querySelector('[data-command=\"dir_rtl\"]')\n        },\n        options: options,\n        option: options\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_Context);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9saWIvY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsTUFBTUEsV0FBVyxTQUFVQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsT0FBTztJQUM3QyxPQUFPO1FBQ0hGLFNBQVM7WUFDTEcsZUFBZUg7WUFDZkksU0FBU0gsS0FBS0ksSUFBSTtZQUNsQkMsVUFBVUwsS0FBS00sU0FBUztZQUN4QkMsU0FBU1AsS0FBS1EsUUFBUTtZQUN0QkMsZ0JBQWdCVCxLQUFLUyxjQUFjO1lBQ25DQyxhQUFhVixLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUN6Q0MsV0FBV1osS0FBS1ksU0FBUztZQUN6QkMsYUFBYWIsS0FBS2MsWUFBWTtZQUM5QkMsWUFBWWYsS0FBS2dCLFdBQVc7WUFDNUJDLGFBQWFqQixLQUFLa0IsWUFBWTtZQUM5QkMsYUFBYW5CLEtBQUtvQixZQUFZO1lBQzlCQyxZQUFZckIsS0FBS3NCLFdBQVc7WUFDNUJDLGNBQWN2QixLQUFLd0IsWUFBWTtZQUMvQkMsU0FBU3pCLEtBQUt3QixZQUFZO1lBQzFCRSxNQUFNMUIsS0FBSzJCLFNBQVM7WUFDcEJDLGFBQWE1QixLQUFLNkIsWUFBWTtZQUM5QkMsU0FBUzlCLEtBQUsrQixRQUFRO1lBQ3RCQyxhQUFhaEMsS0FBS2lDLFlBQVk7WUFDOUJDLGVBQWVsQyxLQUFLbUMsY0FBYztZQUNsQ0MsZUFBZXBDLEtBQUtxQyxjQUFjO1lBQ2xDQyxrQkFBa0J0QyxLQUFLdUMsV0FBVztZQUNsQ0MsY0FBY3hDLEtBQUt3QyxZQUFZO1lBQy9CQyxRQUFRekMsS0FBS3lDLE1BQU07WUFDbkJDLFlBQVkxQyxLQUFLMEMsVUFBVTtRQUMvQjtRQUNBQyxNQUFNO1lBQ0ZDLE9BQU81QyxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNuQ2tDLE1BQU03QyxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNsQ21DLFdBQVc5QyxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUN2Q29DLFFBQVEvQyxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNwQ3FDLFFBQVFoRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNwQ3NDLEtBQUtqRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNqQ3VDLEtBQUtsRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNqQ3dDLE1BQU1uRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNsQ3lDLE1BQU1wRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNsQzBDLE1BQU1yRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNsQzJDLFNBQVN0RCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNyQzRDLFFBQVF2RCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNwQzZDLFlBQVl4RCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUN4QzhDLFlBQVl6RCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUN4QytDLFVBQVUxRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUN0Q2dELEtBQUszRCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNqQ2lELFNBQVM1RCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztZQUNyQ2tELFNBQVM3RCxLQUFLUSxRQUFRLENBQUNHLGFBQWEsQ0FBQztRQUN6QztRQUNBVixTQUFTQTtRQUNUNkQsUUFBUTdEO0lBQ1o7QUFDSjtBQUVBLGlFQUFlSCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xpYi9jb250ZXh0LmpzP2I4MDYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gRWxlbWVudHMgYW5kIHZhcmlhYmxlcyB5b3Ugc2hvdWxkIGhhdmVcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IHRleHRhcmVhIGVsZW1lbnRcclxuICogQHBhcmFtIHtvYmplY3R9IGNvbnMgVG9vbGJhciBlbGVtZW50IHlvdSBjcmVhdGVkXHJcbiAqIEBwYXJhbSB7SlNPTnxPYmplY3R9IG9wdGlvbnMgSW5zZXJ0ZWQgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB7RWxlbWVudHMsIHZhcmlhYmxlcyBvZiB0aGUgZWRpdG9yLCBvcHRpb259XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBfQ29udGV4dCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25zLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgb3JpZ2luRWxlbWVudDogZWxlbWVudCxcclxuICAgICAgICAgICAgdG9wQXJlYTogY29ucy5fdG9wLFxyXG4gICAgICAgICAgICByZWxhdGl2ZTogY29ucy5fcmVsYXRpdmUsXHJcbiAgICAgICAgICAgIHRvb2xiYXI6IGNvbnMuX3Rvb2xCYXIsXHJcbiAgICAgICAgICAgIF90b29sYmFyU2hhZG93OiBjb25zLl90b29sYmFyU2hhZG93LFxyXG4gICAgICAgICAgICBfYnV0dG9uVHJheTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCcuc2UtYnRuLXRyYXknKSxcclxuICAgICAgICAgICAgX21lbnVUcmF5OiBjb25zLl9tZW51VHJheSxcclxuICAgICAgICAgICAgcmVzaXppbmdCYXI6IGNvbnMuX3Jlc2l6aW5nQmFyLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiBjb25zLl9uYXZpZ2F0aW9uLFxyXG4gICAgICAgICAgICBjaGFyV3JhcHBlcjogY29ucy5fY2hhcldyYXBwZXIsXHJcbiAgICAgICAgICAgIGNoYXJDb3VudGVyOiBjb25zLl9jaGFyQ291bnRlcixcclxuICAgICAgICAgICAgZWRpdG9yQXJlYTogY29ucy5fZWRpdG9yQXJlYSxcclxuICAgICAgICAgICAgd3lzaXd5Z0ZyYW1lOiBjb25zLl93eXNpd3lnQXJlYSxcclxuICAgICAgICAgICAgd3lzaXd5ZzogY29ucy5fd3lzaXd5Z0FyZWEsIC8vIGlmIChvcHRpb25zLmlmcmFtZSkgY29ucy5fd3lzaXd5Z0FyZWEuY29udGVudERvY3VtZW50LmJvZHlcclxuICAgICAgICAgICAgY29kZTogY29ucy5fY29kZUFyZWEsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBjb25zLl9wbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgbG9hZGluZzogY29ucy5fbG9hZGluZyxcclxuICAgICAgICAgICAgbGluZUJyZWFrZXI6IGNvbnMuX2xpbmVCcmVha2VyLFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtlcl90OiBjb25zLl9saW5lQnJlYWtlcl90LFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtlcl9iOiBjb25zLl9saW5lQnJlYWtlcl9iLFxyXG4gICAgICAgICAgICByZXNpemVCYWNrZ3JvdW5kOiBjb25zLl9yZXNpemVCYWNrLFxyXG4gICAgICAgICAgICBfc3RpY2t5RHVtbXk6IGNvbnMuX3N0aWNreUR1bW15LFxyXG4gICAgICAgICAgICBfYXJyb3c6IGNvbnMuX2Fycm93LFxyXG4gICAgICAgICAgICBfZm9jdXNUZW1wOiBjb25zLl9mb2N1c1RlbXBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvb2w6IHtcclxuICAgICAgICAgICAgY292ZXI6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignLnNlLXRvb2xiYXItY292ZXInKSxcclxuICAgICAgICAgICAgYm9sZDogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiYm9sZFwiXScpLFxyXG4gICAgICAgICAgICB1bmRlcmxpbmU6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInVuZGVybGluZVwiXScpLFxyXG4gICAgICAgICAgICBpdGFsaWM6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIml0YWxpY1wiXScpLFxyXG4gICAgICAgICAgICBzdHJpa2U6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInN0cmlrZVwiXScpLFxyXG4gICAgICAgICAgICBzdWI6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIlNVQlwiXScpLFxyXG4gICAgICAgICAgICBzdXA6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIlNVUFwiXScpLFxyXG4gICAgICAgICAgICB1bmRvOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJ1bmRvXCJdJyksXHJcbiAgICAgICAgICAgIHJlZG86IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInJlZG9cIl0nKSxcclxuICAgICAgICAgICAgc2F2ZTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwic2F2ZVwiXScpLFxyXG4gICAgICAgICAgICBvdXRkZW50OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJvdXRkZW50XCJdJyksXHJcbiAgICAgICAgICAgIGluZGVudDogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiaW5kZW50XCJdJyksXHJcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cImZ1bGxTY3JlZW5cIl0nKSxcclxuICAgICAgICAgICAgc2hvd0Jsb2NrczogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwic2hvd0Jsb2Nrc1wiXScpLFxyXG4gICAgICAgICAgICBjb2RlVmlldzogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiY29kZVZpZXdcIl0nKSxcclxuICAgICAgICAgICAgZGlyOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJkaXJcIl0nKSxcclxuICAgICAgICAgICAgZGlyX2x0cjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiZGlyX2x0clwiXScpLFxyXG4gICAgICAgICAgICBkaXJfcnRsOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJkaXJfcnRsXCJdJylcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgICAgb3B0aW9uOiBvcHRpb25zXHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgX0NvbnRleHQ7Il0sIm5hbWVzIjpbIl9Db250ZXh0IiwiZWxlbWVudCIsImNvbnMiLCJvcHRpb25zIiwib3JpZ2luRWxlbWVudCIsInRvcEFyZWEiLCJfdG9wIiwicmVsYXRpdmUiLCJfcmVsYXRpdmUiLCJ0b29sYmFyIiwiX3Rvb2xCYXIiLCJfdG9vbGJhclNoYWRvdyIsIl9idXR0b25UcmF5IiwicXVlcnlTZWxlY3RvciIsIl9tZW51VHJheSIsInJlc2l6aW5nQmFyIiwiX3Jlc2l6aW5nQmFyIiwibmF2aWdhdGlvbiIsIl9uYXZpZ2F0aW9uIiwiY2hhcldyYXBwZXIiLCJfY2hhcldyYXBwZXIiLCJjaGFyQ291bnRlciIsIl9jaGFyQ291bnRlciIsImVkaXRvckFyZWEiLCJfZWRpdG9yQXJlYSIsInd5c2l3eWdGcmFtZSIsIl93eXNpd3lnQXJlYSIsInd5c2l3eWciLCJjb2RlIiwiX2NvZGVBcmVhIiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJsb2FkaW5nIiwiX2xvYWRpbmciLCJsaW5lQnJlYWtlciIsIl9saW5lQnJlYWtlciIsImxpbmVCcmVha2VyX3QiLCJfbGluZUJyZWFrZXJfdCIsImxpbmVCcmVha2VyX2IiLCJfbGluZUJyZWFrZXJfYiIsInJlc2l6ZUJhY2tncm91bmQiLCJfcmVzaXplQmFjayIsIl9zdGlja3lEdW1teSIsIl9hcnJvdyIsIl9mb2N1c1RlbXAiLCJ0b29sIiwiY292ZXIiLCJib2xkIiwidW5kZXJsaW5lIiwiaXRhbGljIiwic3RyaWtlIiwic3ViIiwic3VwIiwidW5kbyIsInJlZG8iLCJzYXZlIiwib3V0ZGVudCIsImluZGVudCIsImZ1bGxTY3JlZW4iLCJzaG93QmxvY2tzIiwiY29kZVZpZXciLCJkaXIiLCJkaXJfbHRyIiwiZGlyX3J0bCIsIm9wdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lib/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lib/core.js":
/*!************************************************!*\
  !*** ./node_modules/suneditor/src/lib/core.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _constructor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constructor */ \"(ssr)/./node_modules/suneditor/src/lib/constructor.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context */ \"(ssr)/./node_modules/suneditor/src/lib/context.js\");\n/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./history */ \"(ssr)/./node_modules/suneditor/src/lib/history.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/suneditor/src/lib/util.js\");\n/* harmony import */ var _plugins_modules_notice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/modules/_notice */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/_notice.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n\n\n\n\n/**\r\n * @description SunEditor constuctor function.\r\n * create core object and event registration.\r\n * core, event, functions\r\n * @param {Object} context\r\n * @param {Object} pluginCallButtons\r\n * @param {Object} plugins \r\n * @param {Object} lang\r\n * @param {Object} options\r\n * @param {Object} _responsiveButtons\r\n * @returns {Object} functions Object\r\n */ /* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context, pluginCallButtons, plugins, lang, options, _responsiveButtons) {\n    const _d = context.element.originElement.ownerDocument || document;\n    const _w = _d.defaultView || window;\n    const util = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    const icons = options.icons;\n    /**\r\n     * @description editor core object\r\n     * should always bind this object when registering an event in the plug-in.\r\n     */ const core = {\n        _d: _d,\n        _w: _w,\n        _parser: new _w.DOMParser(),\n        _prevRtl: options.rtl,\n        _editorHeight: 0,\n        _editorHeightPadding: 0,\n        _listCamel: options.__listCommonStyle,\n        _listKebab: util.camelToKebabCase(options.__listCommonStyle),\n        __focusTemp: context.element._focusTemp,\n        /**\r\n         * @description Document object of the iframe if created as an iframe || _d\r\n         * @private\r\n         */ _wd: null,\n        /**\r\n         * @description Window object of the iframe if created as an iframe || _w\r\n         * @private\r\n         */ _ww: null,\n        /**\r\n         * @description Closest ShadowRoot to editor if found\r\n         * @private\r\n         */ _shadowRoot: null,\n        /**\r\n         * @description Block controller mousedown events in \"shadowRoot\" environment\r\n         * @private\r\n         */ _shadowRootControllerEventTarget: null,\n        /**\r\n         * @description Util object\r\n         */ util: util,\n        /**\r\n         * @description Functions object\r\n         */ functions: null,\n        /**\r\n         * @description Editor options\r\n         */ options: null,\n        /**\r\n         * @description Computed style of the wysiwyg area (window.getComputedStyle(context.element.wysiwyg))\r\n         */ wwComputedStyle: null,\n        /**\r\n         * @description Notice object\r\n         */ notice: _plugins_modules_notice__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        /**\r\n         * @description Default icons object\r\n         */ icons: icons,\n        /**\r\n         * @description History object for undo, redo\r\n         */ history: null,\n        /**\r\n         * @description Elements and user options parameters of the suneditor\r\n         */ context: context,\n        /**\r\n         * @description Plugin buttons\r\n         */ pluginCallButtons: pluginCallButtons,\n        /**\r\n         * @description Loaded plugins\r\n         */ plugins: plugins || {},\n        /**\r\n         * @description Whether the plugin is initialized\r\n         */ initPlugins: {},\n        /**\r\n         * @description Object for managing submenu elements\r\n         * @private\r\n         */ _targetPlugins: {},\n        /**\r\n         * @description Save rendered submenus and containers\r\n         * @private\r\n         */ _menuTray: {},\n        /**\r\n         * @description loaded language\r\n         */ lang: lang,\n        /**\r\n         * @description The selection node (core.getSelectionNode()) to which the effect was last applied\r\n         */ effectNode: null,\n        /**\r\n         * @description submenu element\r\n         */ submenu: null,\n        /**\r\n         * @description container element\r\n         */ container: null,\n        /**\r\n         * @description current subment name\r\n         * @private\r\n         */ _submenuName: \"\",\n        /**\r\n         * @description binded submenuOff method\r\n         * @private\r\n         */ _bindedSubmenuOff: null,\n        /**\r\n         * @description binded containerOff method\r\n         * @private\r\n         */ _bindedContainerOff: null,\n        /**\r\n         * @description active button element in submenu\r\n         */ submenuActiveButton: null,\n        /**\r\n         * @description active button element in container\r\n         */ containerActiveButton: null,\n        /**\r\n         * @description The elements array to be processed unvisible when the controllersOff function is executed (resizing, link modified button, table controller)\r\n         */ controllerArray: [],\n        /**\r\n         * @description The name of the plugin that called the currently active controller\r\n         */ currentControllerName: \"\",\n        /**\r\n         * @description The target element of current controller\r\n         */ currentControllerTarget: null,\n        /**\r\n         * @description The file component object of current selected file tag (getFileComponent)\r\n         */ currentFileComponentInfo: null,\n        /**\r\n         * @description An array of buttons whose class name is not \"se-code-view-enabled\"\r\n         */ codeViewDisabledButtons: [],\n        /**\r\n         * @description An array of buttons whose class name is not \"se-resizing-enabled\"\r\n         */ resizingDisabledButtons: [],\n        /**\r\n         * @description active more layer element in submenu\r\n         * @private\r\n         */ _moreLayerActiveButton: null,\n        /**\r\n         * @description Tag whitelist RegExp object used in \"_consistencyCheckOfHTML\" method\r\n         * ^(options._editorTagsWhitelist)$\r\n         * @private\r\n         */ _htmlCheckWhitelistRegExp: null,\n        /**\r\n         * @description Tag blacklist RegExp object used in \"_consistencyCheckOfHTML\" method\r\n         * @private\r\n         */ _htmlCheckBlacklistRegExp: null,\n        /**\r\n         * @description RegExp when using check disallowd tags. (b, i, ins, strike, s)\r\n         * @private\r\n         */ _disallowedTextTagsRegExp: null,\n        /**\r\n         * @description Editor tags whitelist (RegExp object)\r\n         * util.createTagsWhitelist(options._editorTagsWhitelist)\r\n         */ editorTagsWhitelistRegExp: null,\n        /**\r\n         * @description Editor tags blacklist (RegExp object)\r\n         * util.createTagsBlacklist(options.tagsBlacklist)\r\n         */ editorTagsBlacklistRegExp: null,\n        /**\r\n         * @description Tag whitelist when pasting (RegExp object)\r\n         * util.createTagsWhitelist(options.pasteTagsWhitelist)\r\n         */ pasteTagsWhitelistRegExp: null,\n        /**\r\n         * @description Tag blacklist when pasting (RegExp object)\r\n         * util.createTagsBlacklist(options.pasteTagsBlacklist)\r\n         */ pasteTagsBlacklistRegExp: null,\n        /**\r\n         * @description Boolean value of whether the editor has focus\r\n         */ hasFocus: false,\n        /**\r\n         * @description Boolean value of whether the editor is disabled\r\n         */ isDisabled: false,\n        /**\r\n         * @description Boolean value of whether the editor is readOnly\r\n         */ isReadOnly: false,\n        /**\r\n         * @description Attributes whitelist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesWhitelistRegExp: null,\n        _attributesWhitelistRegExp_all_data: null,\n        /**\r\n         * @description Attributes blacklist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesBlacklistRegExp: null,\n        /**\r\n         * @description Attributes of tags whitelist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesTagsWhitelist: null,\n        /**\r\n         * @description Attributes of tags blacklist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesTagsBlacklist: null,\n        /**\r\n         * @description binded controllersOff method\r\n         * @private\r\n         */ _bindControllersOff: null,\n        /**\r\n         * @description Is inline mode?\r\n         * @private\r\n         */ _isInline: null,\n        /**\r\n         * @description Is balloon|balloon-always mode?\r\n         * @private\r\n         */ _isBalloon: null,\n        /**\r\n         * @description Is balloon-always mode?\r\n         * @private\r\n         */ _isBalloonAlways: null,\n        /**\r\n         * @description Required value when using inline mode to sticky toolbar\r\n         * @private\r\n         */ _inlineToolbarAttr: {\n            top: \"\",\n            width: \"\",\n            isShow: false\n        },\n        /**\r\n         * @description Variable that controls the \"blur\" event in the editor of inline or balloon mode when the focus is moved to submenu\r\n         * @private\r\n         */ _notHideToolbar: false,\n        /**\r\n         * @description Variable value that sticky toolbar mode\r\n         * @private\r\n         */ _sticky: false,\n        /**\r\n         * @description Variables for controlling focus and blur events\r\n         * @private\r\n         */ _antiBlur: false,\n        /**\r\n         * @description Component line breaker element\r\n         * @private\r\n         */ _lineBreaker: null,\n        _lineBreakerButton: null,\n        /**\r\n         * @description If true, (initialize, reset) all indexes of image, video information\r\n         * @private\r\n         */ _componentsInfoInit: true,\n        _componentsInfoReset: false,\n        /**\r\n         * @description Plugins array with \"active\" method.\r\n         * \"activePlugins\" runs the \"add\" method when creating the editor.\r\n         */ activePlugins: null,\n        /**\r\n         * @description Information of tags that should maintain HTML structure, style, class name, etc. (In use by \"math\" plugin)\r\n         * When inserting \"html\" such as paste, it is executed on the \"html\" to be inserted. (core.cleanHTML)\r\n         * Basic Editor Actions:\r\n         * 1. All classes not starting with \"__se__\" or \"se-\" in the editor are removed.\r\n         * 2. The style of all tags except the \"span\" tag is removed from the editor.\r\n         * \"managedTagsInfo\" structure ex:\r\n         * managedTagsInfo: {\r\n         *   query: '.__se__xxx, se-xxx'\r\n         *   map: {\r\n         *     '__se__xxx': method.bind(core),\r\n         *     'se-xxx': method.bind(core),\r\n         *   }\r\n         * }\r\n         * @example\r\n         * Define in the following return format in the \"managedTagInfo\" function of the plugin.\r\n         * managedTagInfo() => {\r\n         *  return {\r\n         *    className: 'string', // Class name to identify the tag. (\"__se__xxx\", \"se-xxx\")\r\n         *    // Change the html of the \"element\". (\"element\" is the element found with \"className\".)\r\n         *    // \"method\" is executed by binding \"core\".\r\n         *    method: function (element) {\r\n         *      // this === core\r\n         *      element.innerHTML = // (rendered html);\r\n         *    }\r\n         *  }\r\n         * }\r\n         */ managedTagsInfo: null,\n        /**\r\n         * @description cashing: options.charCounterType === 'byte-html'\r\n         * @private\r\n         */ _charTypeHTML: false,\n        /**\r\n         * @description Array of \"checkFileInfo\" functions with the core bound\r\n         * (Plugins with \"checkFileInfo\" and \"resetFileInfo\" methods)\r\n         * \"fileInfoPlugins\" runs the \"add\" method when creating the editor.\r\n         * \"checkFileInfo\" method is always call just before the \"change\" event.\r\n         * @private\r\n         */ _fileInfoPluginsCheck: null,\n        /**\r\n         * @description Array of \"resetFileInfo\" functions with the core bound\r\n         * (Plugins with \"checkFileInfo\" and \"resetFileInfo\" methods)\r\n         * \"checkFileInfo\" method is always call just before the \"functions.setOptions\" method.\r\n         * @private\r\n         */ _fileInfoPluginsReset: null,\n        /**\r\n         * @description Variables for file component management\r\n         * @private\r\n         */ _fileManager: {\n            tags: null,\n            regExp: null,\n            queryString: null,\n            pluginRegExp: null,\n            pluginMap: null\n        },\n        /**\r\n         * @description Elements that need to change text or className for each selection change\r\n         * After creating the editor, \"activePlugins\" are added.\r\n         * @property {Element} STRONG bold button\r\n         * @property {Element} U underline button\r\n         * @property {Element} EM italic button\r\n         * @property {Element} DEL strike button\r\n         * @property {Element} SUB subscript button\r\n         * @property {Element} SUP superscript button\r\n         * @property {Element} OUTDENT outdent button\r\n         * @property {Element} INDENT indent button\r\n         */ commandMap: {},\n        /**\r\n         * @description CSS properties related to style tags \r\n         * @private\r\n         */ _commandMapStyles: {\n            STRONG: [\n                \"font-weight\"\n            ],\n            U: [\n                \"text-decoration\"\n            ],\n            EM: [\n                \"font-style\"\n            ],\n            DEL: [\n                \"text-decoration\"\n            ]\n        },\n        /**\r\n         * @description Style button related to edit area\r\n         * @property {Element} fullScreen fullScreen button element\r\n         * @property {Element} showBlocks showBlocks button element\r\n         * @property {Element} codeView codeView button element\r\n         * @private\r\n         */ _styleCommandMap: null,\n        /**\r\n         * @private\r\n         */ _cleanStyleRegExp: {\n            div: new _w.RegExp(\"\\\\s*[^-a-zA-Z](.+)\\\\s*:[^;]+(?!;)*\", \"ig\"),\n            span: new _w.RegExp(\"\\\\s*[^-a-zA-Z](font-family|font-size|color|background-color)\\\\s*:[^;]+(?!;)*\", \"ig\"),\n            format: new _w.RegExp(\"\\\\s*[^-a-zA-Z](text-align|margin-left|margin-right|width|height|line-height)\\\\s*:[^;]+(?!;)*\", \"ig\"),\n            fontSizeUnit: new _w.RegExp(\"\\\\d+\" + options.fontSizeUnit + \"$\", \"i\")\n        },\n        /**\r\n         * @description Variables used internally in editor operation\r\n         * @property {Boolean} isCodeView State of code view\r\n         * @property {Boolean} isFullScreen State of full screen\r\n         * @property {Number} innerHeight_fullScreen InnerHeight in editor when in full screen\r\n         * @property {Number} resizeClientY Remember the vertical size of the editor before resizing the editor (Used when calculating during resize operation)\r\n         * @property {Number} tabSize Indent size of tab (4)\r\n         * @property {Number} codeIndent Indent size of Code view mode (2)\r\n         * @property {Number} minResizingSize Minimum size of editing area when resized {Number} (.se-wrapper-inner {min-height: 65px;} || 65)\r\n         * @property {Array} currentNodes  An array of the current cursor's node structure\r\n         * @private\r\n         */ _variable: {\n            isChanged: false,\n            isCodeView: false,\n            isFullScreen: false,\n            innerHeight_fullScreen: 0,\n            resizeClientY: 0,\n            tabSize: 4,\n            codeIndent: 2,\n            minResizingSize: util.getNumber(context.element.wysiwygFrame.style.minHeight || \"65\", 0),\n            currentNodes: [],\n            currentNodesMap: [],\n            _range: null,\n            _selectionNode: null,\n            _originCssText: context.element.topArea.style.cssText,\n            _bodyOverflow: \"\",\n            _editorAreaOriginCssText: \"\",\n            _wysiwygOriginCssText: \"\",\n            _codeOriginCssText: \"\",\n            _fullScreenAttrs: {\n                sticky: false,\n                balloon: false,\n                inline: false\n            },\n            _lineBreakComp: null,\n            _lineBreakDir: \"\"\n        },\n        /**\r\n         * @description Temp variable for set line attrs\r\n         * @private\r\n         */ _formatAttrsTemp: null,\n        /**\r\n         * @description Save the current buttons states to \"allCommandButtons\" object\r\n         * @private\r\n         */ _saveButtonStates: function() {\n            if (!this.allCommandButtons) this.allCommandButtons = {};\n            const currentButtons = this.context.element._buttonTray.querySelectorAll(\".se-menu-list button[data-display]\");\n            for(let i = 0, element, command; i < currentButtons.length; i++){\n                element = currentButtons[i];\n                command = element.getAttribute(\"data-command\");\n                this.allCommandButtons[command] = element;\n            }\n        },\n        /**\r\n         * @description Recover the current buttons states from \"allCommandButtons\" object\r\n         * @private\r\n         */ _recoverButtonStates: function() {\n            if (this.allCommandButtons) {\n                const currentButtons = this.context.element._buttonTray.querySelectorAll(\".se-menu-list button[data-display]\");\n                for(let i = 0, button, command, oldButton; i < currentButtons.length; i++){\n                    button = currentButtons[i];\n                    command = button.getAttribute(\"data-command\");\n                    oldButton = this.allCommandButtons[command];\n                    if (oldButton) {\n                        button.parentElement.replaceChild(oldButton, button);\n                        if (this.context.tool[command]) this.context.tool[command] = oldButton;\n                    }\n                }\n            }\n        },\n        /**\r\n         * @description If the plugin is not added, add the plugin and call the 'add' function.\r\n         * If the plugin is added call callBack function.\r\n         * @param {String} pluginName The name of the plugin to call\r\n         * @param {function} callBackFunction Function to be executed immediately after module call\r\n         * @param {Element|null} _target Plugin target button (This is not necessary if you have a button list when creating the editor)\r\n         */ callPlugin: function(pluginName, callBackFunction, _target) {\n            _target = _target || pluginCallButtons[pluginName];\n            if (!this.plugins[pluginName]) {\n                throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:\"' + pluginName + '\")');\n            } else if (!this.initPlugins[pluginName]) {\n                this.plugins[pluginName].add(this, _target);\n                this.initPlugins[pluginName] = true;\n            } else if (typeof this._targetPlugins[pluginName] === \"object\" && !!_target) {\n                this.initMenuTarget(pluginName, _target, this._targetPlugins[pluginName]);\n            }\n            if (this.plugins[pluginName].active && !this.commandMap[pluginName] && !!_target) {\n                this.commandMap[pluginName] = _target;\n                this.activePlugins.push(pluginName);\n            }\n            if (typeof callBackFunction === \"function\") callBackFunction();\n        },\n        /**\r\n         * @description If the module is not added, add the module and call the 'add' function\r\n         * @param {Array} moduleArray module object's Array [dialog, resizing]\r\n         */ addModule: function(moduleArray) {\n            for(let i = 0, len = moduleArray.length, moduleName; i < len; i++){\n                moduleName = moduleArray[i].name;\n                if (!this.plugins[moduleName]) {\n                    this.plugins[moduleName] = moduleArray[i];\n                }\n                if (!this.initPlugins[moduleName]) {\n                    this.initPlugins[moduleName] = true;\n                    if (typeof this.plugins[moduleName].add === \"function\") this.plugins[moduleName].add(this);\n                }\n            }\n        },\n        /**\r\n         * @description Gets the current editor-relative scroll offset.\r\n         * @returns {Object} {top, left}\r\n         */ getGlobalScrollOffset: function() {\n            let t = 0, l = 0;\n            let el = context.element.topArea;\n            while(el){\n                t += el.scrollTop;\n                l += el.scrollLeft;\n                el = el.parentElement;\n            }\n            el = this._shadowRoot ? this._shadowRoot.host : null;\n            while(el){\n                t += el.scrollTop;\n                l += el.scrollLeft;\n                el = el.parentElement;\n            }\n            return {\n                top: t,\n                left: l\n            };\n        },\n        /**\r\n         * @description Method for managing submenu element.\r\n         * You must add the \"submenu\" element using the this method at custom plugin.\r\n         * @param {String} pluginName Plugin name\r\n         * @param {Element|null} target Target button\r\n         * @param {Element} menu Submenu element\r\n         */ initMenuTarget: function(pluginName, target, menu) {\n            if (!target) {\n                this._targetPlugins[pluginName] = menu;\n            } else {\n                context.element._menuTray.appendChild(menu);\n                this._targetPlugins[pluginName] = true;\n                this._menuTray[target.getAttribute(\"data-command\")] = menu;\n            }\n        },\n        /**\r\n         * @description Enable submenu\r\n         * @param {Element} element Submenu's button element to call\r\n         */ submenuOn: function(element) {\n            if (this._bindedSubmenuOff) this._bindedSubmenuOff();\n            if (this._bindControllersOff) this.controllersOff();\n            const submenuName = this._submenuName = element.getAttribute(\"data-command\");\n            const menu = this.submenu = this._menuTray[submenuName];\n            this.submenuActiveButton = element;\n            this._setMenuPosition(element, menu);\n            this._bindedSubmenuOff = this.submenuOff.bind(this);\n            this.addDocEvent(\"mousedown\", this._bindedSubmenuOff, false);\n            if (this.plugins[submenuName].on) this.plugins[submenuName].on.call(this);\n            this._antiBlur = true;\n        },\n        /**\r\n         * @description Disable submenu\r\n         */ submenuOff: function() {\n            this.removeDocEvent(\"mousedown\", this._bindedSubmenuOff);\n            this._bindedSubmenuOff = null;\n            if (this.submenu) {\n                this._submenuName = \"\";\n                this.submenu.style.display = \"none\";\n                this.submenu = null;\n                util.removeClass(this.submenuActiveButton, \"on\");\n                this.submenuActiveButton = null;\n                this._notHideToolbar = false;\n            }\n            this._antiBlur = false;\n        },\n        /**\r\n         * @description Disable more layer\r\n         */ moreLayerOff: function() {\n            if (this._moreLayerActiveButton) {\n                const layer = context.element.toolbar.querySelector(\".\" + this._moreLayerActiveButton.getAttribute(\"data-command\"));\n                layer.style.display = \"none\";\n                util.removeClass(this._moreLayerActiveButton, \"on\");\n                this._moreLayerActiveButton = null;\n            }\n        },\n        /**\r\n         * @description Enable container\r\n         * @param {Element} element Container's button element to call\r\n         */ containerOn: function(element) {\n            if (this._bindedContainerOff) this._bindedContainerOff();\n            const containerName = this._containerName = element.getAttribute(\"data-command\");\n            const menu = this.container = this._menuTray[containerName];\n            this.containerActiveButton = element;\n            this._setMenuPosition(element, menu);\n            this._bindedContainerOff = this.containerOff.bind(this);\n            this.addDocEvent(\"mousedown\", this._bindedContainerOff, false);\n            if (this.plugins[containerName].on) this.plugins[containerName].on.call(this);\n            this._antiBlur = true;\n        },\n        /**\r\n         * @description Disable container\r\n         */ containerOff: function() {\n            this.removeDocEvent(\"mousedown\", this._bindedContainerOff);\n            this._bindedContainerOff = null;\n            if (this.container) {\n                this._containerName = \"\";\n                this.container.style.display = \"none\";\n                this.container = null;\n                util.removeClass(this.containerActiveButton, \"on\");\n                this.containerActiveButton = null;\n                this._notHideToolbar = false;\n            }\n            this._antiBlur = false;\n        },\n        /**\r\n         * @description Set the menu position. (submenu, container)\r\n         * @param {*} element Button element\r\n         * @param {*} menu Menu element\r\n         * @private\r\n         */ _setMenuPosition: function(element, menu) {\n            menu.style.visibility = \"hidden\";\n            menu.style.display = \"block\";\n            menu.style.height = \"\";\n            util.addClass(element, \"on\");\n            const toolbar = this.context.element.toolbar;\n            const toolbarW = toolbar.offsetWidth;\n            const toolbarOffset = event._getEditorOffsets(context.element.toolbar);\n            const menuW = menu.offsetWidth;\n            const l = element.parentElement.offsetLeft + 3;\n            // rtl\n            if (options.rtl) {\n                const elementW = element.offsetWidth;\n                const rtlW = menuW > elementW ? menuW - elementW : 0;\n                const rtlL = rtlW > 0 ? 0 : elementW - menuW;\n                menu.style.left = l - rtlW + rtlL + \"px\";\n                if (toolbarOffset.left > event._getEditorOffsets(menu).left) {\n                    menu.style.left = \"0px\";\n                }\n            } else {\n                const overLeft = toolbarW <= menuW ? 0 : toolbarW - (l + menuW);\n                if (overLeft < 0) menu.style.left = l + overLeft + \"px\";\n                else menu.style.left = l + \"px\";\n            }\n            // get element top\n            let t = 0;\n            let offsetEl = element;\n            while(offsetEl && offsetEl !== toolbar){\n                t += offsetEl.offsetTop;\n                offsetEl = offsetEl.offsetParent;\n            }\n            const bt = t;\n            if (this._isBalloon) {\n                t += toolbar.offsetTop + element.offsetHeight;\n            } else {\n                t -= element.offsetHeight;\n            }\n            // set menu position\n            const toolbarTop = toolbarOffset.top;\n            const menuHeight = menu.offsetHeight;\n            const scrollTop = this.getGlobalScrollOffset().top;\n            const menuHeight_bottom = _w.innerHeight - (toolbarTop - scrollTop + bt + element.parentElement.offsetHeight);\n            if (menuHeight_bottom < menuHeight) {\n                let menuTop = -1 * (menuHeight - bt + 3);\n                const insTop = toolbarTop - scrollTop + menuTop;\n                const menuHeight_top = menuHeight + (insTop < 0 ? insTop : 0);\n                if (menuHeight_top > menuHeight_bottom) {\n                    menu.style.height = menuHeight_top + \"px\";\n                    menuTop = -1 * (menuHeight_top - bt + 3);\n                } else {\n                    menu.style.height = menuHeight_bottom + \"px\";\n                    menuTop = bt + element.parentElement.offsetHeight;\n                }\n                menu.style.top = menuTop + \"px\";\n            } else {\n                menu.style.top = bt + element.parentElement.offsetHeight + \"px\";\n            }\n            menu.style.visibility = \"\";\n        },\n        /**\r\n         * @description Show controller at editor area (controller elements, function, \"controller target element(@Required)\", \"controller name(@Required)\", etc..)\r\n         * @param {*} arguments controller elements, functions..\r\n         */ controllersOn: function() {\n            if (this._bindControllersOff) this._bindControllersOff();\n            this.controllerArray = [];\n            for(let i = 0, arg; i < arguments.length; i++){\n                arg = arguments[i];\n                if (!arg) continue;\n                if (typeof arg === \"string\") {\n                    this.currentControllerName = arg;\n                    continue;\n                }\n                if (typeof arg === \"function\") {\n                    this.controllerArray.push(arg);\n                    continue;\n                }\n                if (!util.hasClass(arg, \"se-controller\")) {\n                    this.currentControllerTarget = arg;\n                    this.currentFileComponentInfo = this.getFileComponent(arg);\n                    continue;\n                }\n                if (arg.style) {\n                    arg.style.display = \"block\";\n                    if (this._shadowRoot && this._shadowRootControllerEventTarget.indexOf(arg) === -1) {\n                        arg.addEventListener(\"mousedown\", function(e) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                        });\n                        this._shadowRootControllerEventTarget.push(arg);\n                    }\n                }\n                this.controllerArray.push(arg);\n            }\n            this._bindControllersOff = this.controllersOff.bind(this);\n            this.addDocEvent(\"mousedown\", this._bindControllersOff, false);\n            this.addDocEvent(\"keydown\", this._bindControllersOff, false);\n            this._antiBlur = true;\n            if (typeof functions.showController === \"function\") functions.showController(this.currentControllerName, this.controllerArray, this);\n        },\n        /**\r\n         * @description Hide controller at editor area (link button, image resize button..)\r\n         * @param {KeyboardEvent|MouseEvent|null} e Event object when called from mousedown and keydown events registered in \"core.controllersOn\"\r\n         */ controllersOff: function(e) {\n            this._lineBreaker.style.display = \"none\";\n            const len = this.controllerArray.length;\n            if (e && e.target && len > 0) {\n                for(let i = 0; i < len; i++){\n                    if (typeof this.controllerArray[i].contains === \"function\" && this.controllerArray[i].contains(e.target)) return;\n                }\n            }\n            if (this._fileManager.pluginRegExp.test(this.currentControllerName) && e && e.type === \"keydown\" && e.keyCode !== 27) return;\n            context.element.lineBreaker_t.style.display = context.element.lineBreaker_b.style.display = \"none\";\n            this._variable._lineBreakComp = null;\n            this.currentControllerName = \"\";\n            this.currentControllerTarget = null;\n            this.currentFileComponentInfo = null;\n            this.effectNode = null;\n            if (!this._bindControllersOff) return;\n            this.removeDocEvent(\"mousedown\", this._bindControllersOff);\n            this.removeDocEvent(\"keydown\", this._bindControllersOff);\n            this._bindControllersOff = null;\n            if (len > 0) {\n                for(let i = 0; i < len; i++){\n                    if (typeof this.controllerArray[i] === \"function\") this.controllerArray[i]();\n                    else this.controllerArray[i].style.display = \"none\";\n                }\n                this.controllerArray = [];\n            }\n            this._antiBlur = false;\n        },\n        /**\r\n         * @description Specify the position of the controller.\r\n         * @param {Element} controller Controller element.\r\n         * @param {Element} referEl Element that is the basis of the controller's position.\r\n         * @param {String} position Type of position (\"top\" | \"bottom\")\r\n         * When using the \"top\" position, there should not be an arrow on the controller.\r\n         * When using the \"bottom\" position there should be an arrow on the controller.\r\n         * @param {Object} addOffset These are the left and top values that need to be added specially. \r\n         * This argument is required. - {left: 0, top: 0}\r\n         * Please enter the value based on ltr mode.\r\n         * Calculated automatically in rtl mode.\r\n         */ setControllerPosition: function(controller, referEl, position, addOffset) {\n            if (options.rtl) addOffset.left *= -1;\n            const offset = util.getOffset(referEl, context.element.wysiwygFrame);\n            controller.style.visibility = \"hidden\";\n            controller.style.display = \"block\";\n            // Height value of the arrow element is 11px\n            const topMargin = position === \"top\" ? -(controller.offsetHeight + 2) : referEl.offsetHeight + 12;\n            controller.style.top = offset.top + topMargin + addOffset.top + \"px\";\n            const l = offset.left - context.element.wysiwygFrame.scrollLeft + addOffset.left;\n            const controllerW = controller.offsetWidth;\n            const referElW = referEl.offsetWidth;\n            const allow = util.hasClass(controller.firstElementChild, \"se-arrow\") ? controller.firstElementChild : null;\n            // rtl (Width value of the arrow element is 22px)\n            if (options.rtl) {\n                const rtlW = controllerW > referElW ? controllerW - referElW : 0;\n                const rtlL = rtlW > 0 ? 0 : referElW - controllerW;\n                controller.style.left = l - rtlW + rtlL + \"px\";\n                if (rtlW > 0) {\n                    if (allow) allow.style.left = (controllerW - 14 < 10 + rtlW ? controllerW - 14 : 10 + rtlW) + \"px\";\n                }\n                const overSize = context.element.wysiwygFrame.offsetLeft - controller.offsetLeft;\n                if (overSize > 0) {\n                    controller.style.left = \"0px\";\n                    if (allow) allow.style.left = overSize + \"px\";\n                }\n            } else {\n                controller.style.left = l + \"px\";\n                const overSize = context.element.wysiwygFrame.offsetWidth - (controller.offsetLeft + controllerW);\n                if (overSize < 0) {\n                    controller.style.left = controller.offsetLeft + overSize + \"px\";\n                    if (allow) allow.style.left = 20 - overSize + \"px\";\n                } else {\n                    if (allow) allow.style.left = \"20px\";\n                }\n            }\n            controller.style.visibility = \"\";\n        },\n        /**\r\n         * @description javascript execCommand\r\n         * @param {String} command javascript execCommand function property\r\n         * @param {Boolean|undefined} showDefaultUI javascript execCommand function property\r\n         * @param {String|undefined} value javascript execCommand function property\r\n         */ execCommand: function(command, showDefaultUI, value) {\n            this._wd.execCommand(command, showDefaultUI, command === \"formatBlock\" ? \"<\" + value + \">\" : value);\n            // history stack\n            this.history.push(true);\n        },\n        /**\r\n         * @description Focus to wysiwyg area using \"native focus function\"\r\n         */ nativeFocus: function() {\n            this.__focus();\n            this._editorRange();\n        },\n        /**\r\n         * @description Focus method\r\n         * @private\r\n         */ __focus: function() {\n            const caption = util.getParentElement(this.getSelectionNode(), \"figcaption\");\n            if (caption) {\n                caption.focus();\n            } else {\n                context.element.wysiwyg.focus();\n            }\n        },\n        /**\r\n         * @description Focus to wysiwyg area\r\n         */ focus: function() {\n            if (context.element.wysiwygFrame.style.display === \"none\") return;\n            if (options.iframe) {\n                this.nativeFocus();\n            } else {\n                try {\n                    const range = this.getRange();\n                    if (range.startContainer === range.endContainer && util.isWysiwygDiv(range.startContainer)) {\n                        const currentNode = range.commonAncestorContainer.children[range.startOffset];\n                        if (!util.isFormatElement(currentNode) && !util.isComponent(currentNode)) {\n                            const format = util.createElement(options.defaultTag);\n                            const br = util.createElement(\"BR\");\n                            format.appendChild(br);\n                            context.element.wysiwyg.insertBefore(format, currentNode);\n                            this.setRange(br, 0, br, 0);\n                            return;\n                        }\n                    }\n                    this.setRange(range.startContainer, range.startOffset, range.endContainer, range.endOffset);\n                } catch (e) {\n                    this.nativeFocus();\n                }\n            }\n            event._applyTagEffects();\n            if (this._isBalloon) event._toggleToolbarBalloon();\n        },\n        /**\r\n         * @description If \"focusEl\" is a component, then that component is selected; if it is a format element, the last text is selected\r\n         * If \"focusEdge\" is null, then selected last element\r\n         * @param {Element|null} focusEl Focus element\r\n         */ focusEdge: function(focusEl) {\n            if (!focusEl) focusEl = context.element.wysiwyg.lastElementChild;\n            const fileComponentInfo = this.getFileComponent(focusEl);\n            if (fileComponentInfo) {\n                this.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);\n            } else if (focusEl) {\n                focusEl = util.getChildElement(focusEl, function(current) {\n                    return current.childNodes.length === 0 || current.nodeType === 3;\n                }, true);\n                if (!focusEl) this.nativeFocus();\n                else this.setRange(focusEl, focusEl.textContent.length, focusEl, focusEl.textContent.length);\n            } else {\n                this.focus();\n            }\n        },\n        /**\r\n         * @description Focusout to wysiwyg area (.blur())\r\n         */ blur: function() {\n            if (options.iframe) {\n                context.element.wysiwygFrame.blur();\n            } else {\n                context.element.wysiwyg.blur();\n            }\n        },\n        /**\r\n         * @description Set current editor's range object and return.\r\n         * @param {Node} startCon The startContainer property of the selection object.\r\n         * @param {Number} startOff The startOffset property of the selection object.\r\n         * @param {Node} endCon The endContainer property of the selection object.\r\n         * @param {Number} endOff The endOffset property of the selection object.\r\n         * @returns {Object} Range object.\r\n         */ setRange: function(startCon, startOff, endCon, endOff) {\n            if (!startCon || !endCon) return;\n            if (startOff > startCon.textContent.length) startOff = startCon.textContent.length;\n            if (endOff > endCon.textContent.length) endOff = endCon.textContent.length;\n            if (util.isFormatElement(startCon)) {\n                startCon = startCon.childNodes[startOff] || startCon.childNodes[startOff - 1] || startCon;\n                startOff = startOff > 0 ? startCon.nodeType === 1 ? 1 : startCon.textContent ? startCon.textContent.length : 0 : 0;\n            }\n            if (util.isFormatElement(endCon)) {\n                endCon = endCon.childNodes[endOff] || endCon.childNodes[endOff - 1] || endCon;\n                endOff = endOff > 0 ? endCon.nodeType === 1 ? 1 : endCon.textContent ? endCon.textContent.length : 0 : 0;\n            }\n            const range = this._wd.createRange();\n            try {\n                range.setStart(startCon, startOff);\n                range.setEnd(endCon, endOff);\n            } catch (error) {\n                console.warn(\"[SUNEDITOR.core.focus.error] \" + error);\n                this.nativeFocus();\n                return;\n            }\n            const selection = this.getSelection();\n            if (selection.removeAllRanges) {\n                selection.removeAllRanges();\n            }\n            selection.addRange(range);\n            this._rangeInfo(range, this.getSelection());\n            if (options.iframe) this.__focus();\n            return range;\n        },\n        /**\r\n         * @description Remove range object and button effect\r\n         */ removeRange: function() {\n            this._variable._range = null;\n            this._variable._selectionNode = null;\n            if (this.hasFocus) this.getSelection().removeAllRanges();\n            this._setKeyEffect([]);\n        },\n        /**\r\n         * @description Get current editor's range object\r\n         * @returns {Object}\r\n         */ getRange: function() {\n            const range = this._variable._range || this._createDefaultRange();\n            const selection = this.getSelection();\n            if (range.collapsed === selection.isCollapsed || !context.element.wysiwyg.contains(selection.focusNode)) return range;\n            if (selection.rangeCount > 0) {\n                this._variable._range = selection.getRangeAt(0);\n                return this._variable._range;\n            } else {\n                const sc = selection.anchorNode, ec = selection.focusNode, so = selection.anchorOffset, eo = selection.focusOffset;\n                const compareValue = util.compareElements(sc, ec);\n                const rightDir = compareValue.ancestor && (compareValue.result === 0 ? so <= eo : compareValue.result > 1 ? true : false);\n                return this.setRange(rightDir ? sc : ec, rightDir ? so : eo, rightDir ? ec : sc, rightDir ? eo : so);\n            }\n        },\n        /**\r\n         * @description If the \"range\" object is a non-editable area, add a line at the top of the editor and update the \"range\" object.\r\n         * Returns a new \"range\" or argument \"range\".\r\n         * @param {Object} range core.getRange()\r\n         * @param {Element|null} container If there is \"container\" argument, it creates a line in front of the container.\r\n         * @returns {Object} range\r\n         */ getRange_addLine: function(range, container) {\n            if (this._selectionVoid(range)) {\n                const wysiwyg = context.element.wysiwyg;\n                const op = util.createElement(options.defaultTag);\n                op.innerHTML = \"<br>\";\n                wysiwyg.insertBefore(op, container && container !== wysiwyg ? container.nextElementSibling : wysiwyg.firstElementChild);\n                this.setRange(op.firstElementChild, 0, op.firstElementChild, 1);\n                range = this._variable._range;\n            }\n            return range;\n        },\n        /**\r\n         * @description Get window selection obejct\r\n         * @returns {Object}\r\n         */ getSelection: function() {\n            const selection = this._shadowRoot && this._shadowRoot.getSelection ? this._shadowRoot.getSelection() : this._ww.getSelection();\n            if (!this._variable._range && !context.element.wysiwyg.contains(selection.focusNode)) {\n                selection.removeAllRanges();\n                selection.addRange(this._createDefaultRange());\n            }\n            return selection;\n        },\n        /**\r\n         * @description Get current select node\r\n         * @returns {Node}\r\n         */ getSelectionNode: function() {\n            if (!context.element.wysiwyg.contains(this._variable._selectionNode)) this._editorRange();\n            if (!this._variable._selectionNode) {\n                const selectionNode = util.getChildElement(context.element.wysiwyg.firstChild, function(current) {\n                    return current.childNodes.length === 0 || current.nodeType === 3;\n                }, false);\n                if (!selectionNode) {\n                    this._editorRange();\n                } else {\n                    this._variable._selectionNode = selectionNode;\n                    return selectionNode;\n                }\n            }\n            return this._variable._selectionNode;\n        },\n        /**\r\n         * @description Saving the range object and the currently selected node of editor\r\n         * @private\r\n         */ _editorRange: function() {\n            const activeEl = this._wd.activeElement;\n            if (util.isInputElement(activeEl)) {\n                this._variable._selectionNode = activeEl;\n                return activeEl;\n            }\n            const selection = this.getSelection();\n            if (!selection) return null;\n            let range = null;\n            if (selection.rangeCount > 0) {\n                range = selection.getRangeAt(0);\n            } else {\n                range = this._createDefaultRange();\n            }\n            this._rangeInfo(range, selection);\n        },\n        /**\r\n         * @description Set \"range\" and \"selection\" info.\r\n         * @param {Object} range range object.\r\n         * @param {Object} selection selection object.\r\n         */ _rangeInfo: function(range, selection) {\n            let selectionNode = null;\n            this._variable._range = range;\n            if (range.collapsed) {\n                if (util.isWysiwygDiv(range.commonAncestorContainer)) selectionNode = range.commonAncestorContainer.children[range.startOffset] || range.commonAncestorContainer;\n                else selectionNode = range.commonAncestorContainer;\n            } else {\n                selectionNode = selection.extentNode || selection.anchorNode;\n            }\n            this._variable._selectionNode = selectionNode;\n        },\n        /**\r\n         * @description Return the range object of editor's first child node\r\n         * @returns {Object}\r\n         * @private\r\n         */ _createDefaultRange: function() {\n            const wysiwyg = context.element.wysiwyg;\n            const range = this._wd.createRange();\n            let firstFormat = wysiwyg.firstElementChild;\n            let focusEl = null;\n            if (!firstFormat) {\n                firstFormat = util.createElement(options.defaultTag);\n                focusEl = util.createElement(\"BR\");\n                firstFormat.appendChild(focusEl);\n                wysiwyg.appendChild(firstFormat);\n            } else {\n                focusEl = firstFormat.firstChild;\n                if (!focusEl) {\n                    focusEl = util.createElement(\"BR\");\n                    firstFormat.appendChild(focusEl);\n                }\n            }\n            range.setStart(focusEl, 0);\n            range.setEnd(focusEl, 0);\n            return range;\n        },\n        /**\r\n         * @description Returns true if there is no valid \"selection\".\r\n         * @param {Object} range core.getRange()\r\n         * @returns {Object} range\r\n         * @private\r\n         */ _selectionVoid: function(range) {\n            const comm = range.commonAncestorContainer;\n            return util.isWysiwygDiv(range.startContainer) && util.isWysiwygDiv(range.endContainer) || /FIGURE/i.test(comm.nodeName) || this._fileManager.regExp.test(comm.nodeName) || util.isMediaComponent(comm);\n        },\n        /**\r\n         * @description Reset range object to text node selected status.\r\n         * @returns {Boolean} Returns false if there is no valid selection.\r\n         * @private\r\n         */ _resetRangeToTextNode: function() {\n            const range = this.getRange();\n            if (this._selectionVoid(range)) return false;\n            let startCon = range.startContainer;\n            let startOff = range.startOffset;\n            let endCon = range.endContainer;\n            let endOff = range.endOffset;\n            let tempCon, tempOffset, tempChild;\n            if (util.isFormatElement(startCon)) {\n                if (!startCon.childNodes[startOff]) {\n                    startCon = startCon.lastChild || startCon;\n                    startOff = startCon.textContent.length;\n                } else {\n                    startCon = startCon.childNodes[startOff] || startCon;\n                    startOff = 0;\n                }\n                while(startCon && startCon.nodeType === 1 && startCon.firstChild){\n                    startCon = startCon.firstChild || startCon;\n                    startOff = 0;\n                }\n            }\n            if (util.isFormatElement(endCon)) {\n                endCon = endCon.childNodes[endOff] || endCon.lastChild || endCon;\n                while(endCon && endCon.nodeType === 1 && endCon.lastChild){\n                    endCon = endCon.lastChild;\n                }\n                endOff = endCon.textContent.length;\n            }\n            // startContainer\n            tempCon = util.isWysiwygDiv(startCon) ? context.element.wysiwyg.firstChild : startCon;\n            tempOffset = startOff;\n            if (util.isBreak(tempCon) || tempCon.nodeType === 1 && tempCon.childNodes.length > 0) {\n                const onlyBreak = util.isBreak(tempCon);\n                if (!onlyBreak) {\n                    while(tempCon && !util.isBreak(tempCon) && tempCon.nodeType === 1){\n                        tempCon = tempCon.childNodes[tempOffset] || tempCon.nextElementSibling || tempCon.nextSibling;\n                        tempOffset = 0;\n                    }\n                    let format = util.getFormatElement(tempCon, null);\n                    if (format === util.getRangeFormatElement(format, null)) {\n                        format = util.createElement(util.getParentElement(tempCon, util.isCell) ? \"DIV\" : options.defaultTag);\n                        tempCon.parentNode.insertBefore(format, tempCon);\n                        format.appendChild(tempCon);\n                    }\n                }\n                if (util.isBreak(tempCon)) {\n                    const emptyText = util.createTextNode(util.zeroWidthSpace);\n                    tempCon.parentNode.insertBefore(emptyText, tempCon);\n                    tempCon = emptyText;\n                    if (onlyBreak) {\n                        if (startCon === endCon) {\n                            endCon = tempCon;\n                            endOff = 1;\n                        }\n                    }\n                }\n            }\n            // set startContainer\n            startCon = tempCon;\n            startOff = tempOffset;\n            // endContainer\n            tempCon = util.isWysiwygDiv(endCon) ? context.element.wysiwyg.lastChild : endCon;\n            tempOffset = endOff;\n            if (util.isBreak(tempCon) || tempCon.nodeType === 1 && tempCon.childNodes.length > 0) {\n                const onlyBreak = util.isBreak(tempCon);\n                if (!onlyBreak) {\n                    while(tempCon && !util.isBreak(tempCon) && tempCon.nodeType === 1){\n                        tempChild = tempCon.childNodes;\n                        if (tempChild.length === 0) break;\n                        tempCon = tempChild[tempOffset > 0 ? tempOffset - 1 : tempOffset] || !/FIGURE/i.test(tempChild[0].nodeName) ? tempChild[0] : tempCon.previousElementSibling || tempCon.previousSibling || startCon;\n                        tempOffset = tempOffset > 0 ? tempCon.textContent.length : tempOffset;\n                    }\n                    let format = util.getFormatElement(tempCon, null);\n                    if (format === util.getRangeFormatElement(format, null)) {\n                        format = util.createElement(util.isCell(format) ? \"DIV\" : options.defaultTag);\n                        tempCon.parentNode.insertBefore(format, tempCon);\n                        format.appendChild(tempCon);\n                    }\n                }\n                if (util.isBreak(tempCon)) {\n                    const emptyText = util.createTextNode(util.zeroWidthSpace);\n                    tempCon.parentNode.insertBefore(emptyText, tempCon);\n                    tempCon = emptyText;\n                    tempOffset = 1;\n                    if (onlyBreak && !tempCon.previousSibling) {\n                        util.removeItem(endCon);\n                    }\n                }\n            }\n            // set endContainer\n            endCon = tempCon;\n            endOff = tempOffset;\n            // set Range\n            this.setRange(startCon, startOff, endCon, endOff);\n            return true;\n        },\n        /**\r\n         * @description Returns a \"formatElement\"(util.isFormatElement) array from the currently selected range.\r\n         * @param {Function|null} validation The validation function. (Replaces the default validation function-util.isFormatElement(current))\r\n         * @returns {Array}\r\n         */ getSelectedElements: function(validation) {\n            if (!this._resetRangeToTextNode()) return [];\n            let range = this.getRange();\n            if (util.isWysiwygDiv(range.startContainer)) {\n                const children = context.element.wysiwyg.children;\n                if (children.length === 0) return [];\n                this.setRange(children[0], 0, children[children.length - 1], children[children.length - 1].textContent.trim().length);\n                range = this.getRange();\n            }\n            const startCon = range.startContainer;\n            const endCon = range.endContainer;\n            const commonCon = range.commonAncestorContainer;\n            // get line nodes\n            const lineNodes = util.getListChildren(commonCon, function(current) {\n                return validation ? validation(current) : util.isFormatElement(current);\n            });\n            if (!util.isWysiwygDiv(commonCon) && !util.isRangeFormatElement(commonCon)) lineNodes.unshift(util.getFormatElement(commonCon, null));\n            if (startCon === endCon || lineNodes.length === 1) return lineNodes;\n            let startLine = util.getFormatElement(startCon, null);\n            let endLine = util.getFormatElement(endCon, null);\n            let startIdx = null;\n            let endIdx = null;\n            const onlyTable = function(current) {\n                return util.isTable(current) ? /^TABLE$/i.test(current.nodeName) : true;\n            };\n            let startRangeEl = util.getRangeFormatElement(startLine, onlyTable);\n            let endRangeEl = util.getRangeFormatElement(endLine, onlyTable);\n            if (util.isTable(startRangeEl) && util.isListCell(startRangeEl.parentNode)) startRangeEl = startRangeEl.parentNode;\n            if (util.isTable(endRangeEl) && util.isListCell(endRangeEl.parentNode)) endRangeEl = endRangeEl.parentNode;\n            const sameRange = startRangeEl === endRangeEl;\n            for(let i = 0, len = lineNodes.length, line; i < len; i++){\n                line = lineNodes[i];\n                if (startLine === line || !sameRange && line === startRangeEl) {\n                    startIdx = i;\n                    continue;\n                }\n                if (endLine === line || !sameRange && line === endRangeEl) {\n                    endIdx = i;\n                    break;\n                }\n            }\n            if (startIdx === null) startIdx = 0;\n            if (endIdx === null) endIdx = lineNodes.length - 1;\n            return lineNodes.slice(startIdx, endIdx + 1);\n        },\n        /**\r\n         * @description Get format elements and components from the selected area. (P, DIV, H[1-6], OL, UL, TABLE..)\r\n         * If some of the component are included in the selection, get the entire that component.\r\n         * @param {Boolean} removeDuplicate If true, if there is a parent and child tag among the selected elements, the child tag is excluded.\r\n         * @returns {Array}\r\n         */ getSelectedElementsAndComponents: function(removeDuplicate) {\n            const commonCon = this.getRange().commonAncestorContainer;\n            const myComponent = util.getParentElement(commonCon, util.isComponent);\n            const selectedLines = util.isTable(commonCon) ? this.getSelectedElements(null) : this.getSelectedElements((function(current) {\n                const component = this.getParentElement(current, this.isComponent);\n                return this.isFormatElement(current) && (!component || component === myComponent) || this.isComponent(current) && !this.getFormatElement(current);\n            }).bind(util));\n            if (removeDuplicate) {\n                for(let i = 0, len = selectedLines.length; i < len; i++){\n                    for(let j = i - 1; j >= 0; j--){\n                        if (selectedLines[j].contains(selectedLines[i])) {\n                            selectedLines.splice(i, 1);\n                            i--;\n                            len--;\n                            break;\n                        }\n                    }\n                }\n            }\n            return selectedLines;\n        },\n        /**\r\n         * @description Determine if this offset is the edge offset of container\r\n         * @param {Node} container The node of the selection object. (range.startContainer..)\r\n         * @param {Number} offset The offset of the selection object. (core.getRange().startOffset...)\r\n         * @param {String|undefined} dir Select check point - Both edge, Front edge or End edge. (\"front\": Front edge, \"end\": End edge, undefined: Both edge)\r\n         * @returns {Boolean}\r\n         */ isEdgePoint: function(container, offset, dir) {\n            return dir !== \"end\" && offset === 0 || (!dir || dir !== \"front\") && !container.nodeValue && offset === 1 || (!dir || dir === \"end\") && !!container.nodeValue && offset === container.nodeValue.length;\n        },\n        /**\r\n         * @description Check if the container and offset values are the edges of the format tag\r\n         * @param {Node} container The node of the selection object. (range.startContainer..)\r\n         * @param {Number} offset The offset of the selection object. (core.getRange().startOffset...)\r\n         * @param {String} dir Select check point - \"front\": Front edge, \"end\": End edge, undefined: Both edge.\r\n         * @returns {Array|null}\r\n         * @private\r\n         */ _isEdgeFormat: function(node, offset, dir) {\n            if (!this.isEdgePoint(node, offset, dir)) return false;\n            const result = [];\n            dir = dir === \"front\" ? \"previousSibling\" : \"nextSibling\";\n            while(node && !util.isFormatElement(node) && !util.isWysiwygDiv(node)){\n                if (!node[dir] || util.isBreak(node[dir]) && !node[dir][dir]) {\n                    if (node.nodeType === 1) result.push(node.cloneNode(false));\n                    node = node.parentNode;\n                } else {\n                    return null;\n                }\n            }\n            return result;\n        },\n        /**\r\n         * @description Show loading box\r\n         */ showLoading: function() {\n            context.element.loading.style.display = \"block\";\n        },\n        /**\r\n         * @description Close loading box\r\n         */ closeLoading: function() {\n            context.element.loading.style.display = \"none\";\n        },\n        /**\r\n         * @description Append format element to sibling node of argument element.\r\n         * If the \"formatNodeName\" argument value is present, the tag of that argument value is inserted,\r\n         * If not, the currently selected format tag is inserted.\r\n         * @param {Element} element Insert as siblings of that element\r\n         * @param {String|Element|null} formatNode Node name or node obejct to be inserted\r\n         * @returns {Element}\r\n         */ appendFormatTag: function(element, formatNode) {\n            if (!element || !element.parentNode) return null;\n            const currentFormatEl = util.getFormatElement(this.getSelectionNode(), null);\n            let oFormat = null;\n            if (!util.isFormatElement(element) && util.isFreeFormatElement(currentFormatEl || element.parentNode)) {\n                oFormat = util.createElement(\"BR\");\n            } else {\n                const oFormatName = formatNode ? typeof formatNode === \"string\" ? formatNode : formatNode.nodeName : util.isFormatElement(currentFormatEl) && !util.isRangeFormatElement(currentFormatEl) && !util.isFreeFormatElement(currentFormatEl) ? currentFormatEl.nodeName : options.defaultTag;\n                oFormat = util.createElement(oFormatName);\n                oFormat.innerHTML = \"<br>\";\n                if (formatNode && typeof formatNode !== \"string\" || !formatNode && util.isFormatElement(currentFormatEl)) {\n                    util.copyTagAttributes(oFormat, formatNode || currentFormatEl, [\n                        \"id\"\n                    ]);\n                }\n            }\n            if (util.isCell(element)) element.insertBefore(oFormat, element.nextElementSibling);\n            else element.parentNode.insertBefore(oFormat, element.nextElementSibling);\n            return oFormat;\n        },\n        /**\r\n         * @description The method to insert a element and return. (used elements : table, hr, image, video)\r\n         * If \"element\" is \"HR\", insert and return the new line.\r\n         * @param {Element} element Element to be inserted\r\n         * @param {Boolean} notHistoryPush When true, it does not update the history stack and the selection object and return EdgeNodes (util.getEdgeChildNodes)\r\n         * @param {Boolean} checkCharCount If true, if \"options.maxCharCount\" is exceeded when \"element\" is added, null is returned without addition.\r\n         * @param {Boolean} notSelect If true, Do not automatically select the inserted component.\r\n         * @returns {Element}\r\n         */ insertComponent: function(element, notHistoryPush, checkCharCount, notSelect) {\n            if (this.isReadOnly || checkCharCount && !this.checkCharCount(element, null)) {\n                return null;\n            }\n            const r = this.removeNode();\n            this.getRange_addLine(this.getRange(), r.container);\n            let oNode = null;\n            let selectionNode = this.getSelectionNode();\n            let formatEl = util.getFormatElement(selectionNode, null);\n            if (util.isListCell(formatEl)) {\n                this.insertNode(element, selectionNode === formatEl ? null : r.container.nextSibling, false);\n                if (!element.nextSibling) element.parentNode.appendChild(util.createElement(\"BR\"));\n            } else {\n                if (this.getRange().collapsed && (r.container.nodeType === 3 || util.isBreak(r.container))) {\n                    const depthFormat = util.getParentElement(r.container, (function(current) {\n                        return this.isRangeFormatElement(current);\n                    }).bind(util));\n                    oNode = util.splitElement(r.container, r.offset, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);\n                    if (oNode) formatEl = oNode.previousSibling;\n                }\n                this.insertNode(element, util.isRangeFormatElement(formatEl) ? null : formatEl, false);\n                if (formatEl && util.onlyZeroWidthSpace(formatEl)) util.removeItem(formatEl);\n            }\n            if (!notSelect) {\n                this.setRange(element, 0, element, 0);\n                const fileComponentInfo = this.getFileComponent(element);\n                if (fileComponentInfo) {\n                    this.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);\n                } else if (oNode) {\n                    oNode = util.getEdgeChildNodes(oNode, null).sc || oNode;\n                    this.setRange(oNode, 0, oNode, 0);\n                }\n            }\n            // history stack\n            if (!notHistoryPush) this.history.push(1);\n            return oNode || element;\n        },\n        /**\r\n         * @description Gets the file component and that plugin name\r\n         * return: {target, component, pluginName} | null\r\n         * @param {Element} element Target element (figure tag, component div, file tag)\r\n         * @returns {Object|null}\r\n         */ getFileComponent: function(element) {\n            if (!this._fileManager.queryString || !element) return null;\n            let target, pluginName;\n            if (/^FIGURE$/i.test(element.nodeName) || /se-component/.test(element.className)) {\n                target = element.querySelector(this._fileManager.queryString);\n            }\n            if (!target && element.nodeName && this._fileManager.regExp.test(element.nodeName)) {\n                target = element;\n            }\n            if (target) {\n                pluginName = this._fileManager.pluginMap[target.nodeName.toLowerCase()];\n                if (pluginName) {\n                    return {\n                        target: target,\n                        component: util.getParentElement(target, util.isComponent),\n                        pluginName: pluginName\n                    };\n                }\n            }\n            return null;\n        },\n        /**\r\n         * @description The component(image, video) is selected and the resizing module is called.\r\n         * @param {Element} element Element tag (img, iframe, video)\r\n         * @param {String} pluginName Plugin name (image, video)\r\n         */ selectComponent: function(element, pluginName) {\n            if (util.isUneditableComponent(util.getParentElement(element, util.isComponent)) || util.isUneditableComponent(element)) return false;\n            if (!this.hasFocus) this.focus();\n            const plugin = this.plugins[pluginName];\n            if (!plugin) return;\n            _w.setTimeout((function() {\n                if (typeof plugin.select === \"function\") this.callPlugin(pluginName, plugin.select.bind(this, element), null);\n                this._setComponentLineBreaker(element);\n            }).bind(this));\n        },\n        /**\r\n         * @description Set line breaker of component\r\n         * @param {Element} element Element tag (img, iframe, video)\r\n         * @private\r\n         */ _setComponentLineBreaker: function(element) {\n            // line breaker\n            this._lineBreaker.style.display = \"none\";\n            const container = util.getParentElement(element, util.isComponent);\n            const t_style = context.element.lineBreaker_t.style;\n            const b_style = context.element.lineBreaker_b.style;\n            const target = this.context.resizing.resizeContainer.style.display === \"block\" ? this.context.resizing.resizeContainer : element;\n            const isList = util.isListCell(container.parentNode);\n            let componentTop, wScroll, w;\n            // top\n            if (isList ? !container.previousSibling : !util.isFormatElement(container.previousElementSibling)) {\n                this._variable._lineBreakComp = container;\n                wScroll = context.element.wysiwyg.scrollTop;\n                componentTop = util.getOffset(element, context.element.wysiwygFrame).top + wScroll;\n                w = target.offsetWidth / 2 / 2;\n                t_style.top = componentTop - wScroll - 12 + \"px\";\n                t_style.left = util.getOffset(target).left + w + \"px\";\n                t_style.display = \"block\";\n            } else {\n                t_style.display = \"none\";\n            }\n            // bottom\n            if (isList ? !container.nextSibling : !util.isFormatElement(container.nextElementSibling)) {\n                if (!componentTop) {\n                    this._variable._lineBreakComp = container;\n                    wScroll = context.element.wysiwyg.scrollTop;\n                    componentTop = util.getOffset(element, context.element.wysiwygFrame).top + wScroll;\n                    w = target.offsetWidth / 2 / 2;\n                }\n                b_style.top = componentTop + target.offsetHeight - wScroll - 12 + \"px\";\n                b_style.left = util.getOffset(target).left + target.offsetWidth - w - 24 + \"px\";\n                b_style.display = \"block\";\n            } else {\n                b_style.display = \"none\";\n            }\n        },\n        _checkDuplicateNode: function(oNode, parentNode) {\n            (function recursionFunc(current) {\n                core._dupleCheck(current, parentNode);\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length; i < len; i++){\n                    recursionFunc(childNodes[i]);\n                }\n            })(oNode);\n        },\n        _dupleCheck: function(oNode, parentNode) {\n            if (!util.isTextStyleElement(oNode)) return;\n            const oStyles = (oNode.style.cssText.match(/[^;]+;/g) || []).map(function(v) {\n                return v.trim();\n            });\n            const nodeName = oNode.nodeName;\n            if (/^span$/i.test(nodeName) && oStyles.length === 0) return oNode;\n            let duple = false;\n            (function recursionFunc(ancestor) {\n                if (util.isWysiwygDiv(ancestor) || !util.isTextStyleElement(ancestor)) return;\n                if (ancestor.nodeName === nodeName) {\n                    duple = true;\n                    const styles = ancestor.style.cssText.match(/[^;]+;/g) || [];\n                    for(let i = 0, len = styles.length, j; i < len; i++){\n                        if ((j = oStyles.indexOf(styles[i].trim())) > -1) {\n                            oStyles.splice(j, 1);\n                        }\n                    }\n                    for(let i = 0, len = ancestor.classList.length; i < len; i++){\n                        oNode.classList.remove(ancestor.classList[i]);\n                    }\n                }\n                recursionFunc(ancestor.parentElement);\n            })(parentNode);\n            if (duple) {\n                if (!(oNode.style.cssText = oStyles.join(\" \"))) {\n                    oNode.setAttribute(\"style\", \"\");\n                    oNode.removeAttribute(\"style\");\n                }\n                if (!oNode.attributes.length) {\n                    oNode.setAttribute(\"data-se-duple\", \"true\");\n                }\n            }\n            return oNode;\n        },\n        /**\r\n         * @description Delete selected node and insert argument value node and return.\r\n         * If the \"afterNode\" exists, it is inserted after the \"afterNode\"\r\n         * Inserting a text node merges with both text nodes on both sides and returns a new \"{ container, startOffset, endOffset }\".\r\n         * @param {Node} oNode Element to be inserted\r\n         * @param {Node|null} afterNode If the node exists, it is inserted after the node\r\n         * @param {Boolean} checkCharCount If true, if \"options.maxCharCount\" is exceeded when \"element\" is added, null is returned without addition.\r\n         * @returns {Object|Node|null}\r\n         */ insertNode: function(oNode, afterNode, checkCharCount) {\n            if (this.isReadOnly || checkCharCount && !this.checkCharCount(oNode, null)) {\n                return null;\n            }\n            let fNode = null;\n            let range = this.getRange();\n            let line = util.isListCell(range.commonAncestorContainer) ? range.commonAncestorContainer : util.getFormatElement(this.getSelectionNode(), null);\n            let insertListCell = util.isListCell(line) && (util.isListCell(oNode) || util.isList(oNode));\n            let parentNode, originAfter, tempAfterNode, tempParentNode = null;\n            const freeFormat = util.isFreeFormatElement(line);\n            const isFormats = !freeFormat && (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode)) || util.isComponent(oNode);\n            if (insertListCell) {\n                tempAfterNode = afterNode || util.isList(oNode) ? line.lastChild : line.nextElementSibling;\n                tempParentNode = util.isList(oNode) ? line : (tempAfterNode || line).parentNode;\n            }\n            if (!afterNode && (isFormats || util.isComponent(oNode) || util.isMedia(oNode))) {\n                const isEdge = this.isEdgePoint(range.endContainer, range.endOffset, \"end\");\n                const r = this.removeNode();\n                const container = r.container;\n                const prevContainer = container === r.prevContainer && range.collapsed ? null : r.prevContainer;\n                if (insertListCell && prevContainer) {\n                    tempParentNode = prevContainer.nodeType === 3 ? prevContainer.parentNode : prevContainer;\n                    if (tempParentNode.contains(container)) {\n                        let sameParent = true;\n                        tempAfterNode = container;\n                        while(tempAfterNode.parentNode && tempAfterNode.parentNode !== tempParentNode){\n                            tempAfterNode = tempAfterNode.parentNode;\n                            sameParent = false;\n                        }\n                        if (sameParent && container === prevContainer) tempAfterNode = tempAfterNode.nextSibling;\n                    } else {\n                        tempAfterNode = null;\n                    }\n                } else if (insertListCell && util.isListCell(container) && !line.parentElement) {\n                    line = util.createElement(\"LI\");\n                    tempParentNode.appendChild(line);\n                    container.appendChild(tempParentNode);\n                    tempAfterNode = null;\n                } else if (container.nodeType === 3 || util.isBreak(container) || insertListCell) {\n                    const depthFormat = util.getParentElement(container, (function(current) {\n                        return this.isRangeFormatElement(current) || this.isListCell(current);\n                    }).bind(util));\n                    afterNode = util.splitElement(container, r.offset, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);\n                    if (!afterNode) {\n                        tempAfterNode = afterNode = line;\n                    } else if (insertListCell) {\n                        if (line.contains(container)) {\n                            const subList = util.isList(line.lastElementChild);\n                            let newCell = null;\n                            if (!isEdge) {\n                                newCell = line.cloneNode(false);\n                                newCell.appendChild(afterNode.textContent.trim() ? afterNode : util.createTextNode(util.zeroWidthSpace));\n                            }\n                            if (subList) {\n                                if (!newCell) {\n                                    newCell = line.cloneNode(false);\n                                    newCell.appendChild(util.createTextNode(util.zeroWidthSpace));\n                                }\n                                newCell.appendChild(line.lastElementChild);\n                            }\n                            if (newCell) {\n                                line.parentNode.insertBefore(newCell, line.nextElementSibling);\n                                tempAfterNode = afterNode = newCell;\n                            }\n                        }\n                    } else {\n                        afterNode = afterNode.previousSibling;\n                    }\n                }\n            }\n            range = !afterNode && !isFormats ? this.getRange_addLine(this.getRange(), null) : this.getRange();\n            const commonCon = range.commonAncestorContainer;\n            const startOff = range.startOffset;\n            const endOff = range.endOffset;\n            const formatRange = range.startContainer === commonCon && util.isFormatElement(commonCon);\n            const startCon = formatRange ? commonCon.childNodes[startOff] || commonCon.childNodes[0] || range.startContainer : range.startContainer;\n            const endCon = formatRange ? commonCon.childNodes[endOff] || commonCon.childNodes[commonCon.childNodes.length - 1] || range.endContainer : range.endContainer;\n            if (!insertListCell) {\n                if (!afterNode) {\n                    parentNode = startCon;\n                    if (startCon.nodeType === 3) {\n                        parentNode = startCon.parentNode;\n                    }\n                    /** No Select range node */ if (range.collapsed) {\n                        if (commonCon.nodeType === 3) {\n                            if (commonCon.textContent.length > endOff) afterNode = commonCon.splitText(endOff);\n                            else afterNode = commonCon.nextSibling;\n                        } else {\n                            if (!util.isBreak(parentNode)) {\n                                let c = parentNode.childNodes[startOff];\n                                const focusNode = c && c.nodeType === 3 && util.onlyZeroWidthSpace(c) && util.isBreak(c.nextSibling) ? c.nextSibling : c;\n                                if (focusNode) {\n                                    if (!focusNode.nextSibling && util.isBreak(focusNode)) {\n                                        parentNode.removeChild(focusNode);\n                                        afterNode = null;\n                                    } else {\n                                        afterNode = util.isBreak(focusNode) && !util.isBreak(oNode) ? focusNode : focusNode.nextSibling;\n                                    }\n                                } else {\n                                    afterNode = null;\n                                }\n                            } else {\n                                afterNode = parentNode;\n                                parentNode = parentNode.parentNode;\n                            }\n                        }\n                    } else {\n                        const isSameContainer = startCon === endCon;\n                        if (isSameContainer) {\n                            if (this.isEdgePoint(endCon, endOff)) afterNode = endCon.nextSibling;\n                            else afterNode = endCon.splitText(endOff);\n                            let removeNode = startCon;\n                            if (!this.isEdgePoint(startCon, startOff)) removeNode = startCon.splitText(startOff);\n                            parentNode.removeChild(removeNode);\n                            if (parentNode.childNodes.length === 0 && isFormats) {\n                                parentNode.innerHTML = \"<br>\";\n                            }\n                        } else {\n                            const removedTag = this.removeNode();\n                            const container = removedTag.container;\n                            const prevContainer = removedTag.prevContainer;\n                            if (container && container.childNodes.length === 0 && isFormats) {\n                                if (util.isFormatElement(container)) {\n                                    container.innerHTML = \"<br>\";\n                                } else if (util.isRangeFormatElement(container)) {\n                                    container.innerHTML = \"<\" + options.defaultTag + \"><br></\" + options.defaultTag + \">\";\n                                }\n                            }\n                            if (util.isListCell(container) && oNode.nodeType === 3) {\n                                parentNode = container;\n                                afterNode = null;\n                            } else if (!isFormats && prevContainer) {\n                                parentNode = prevContainer.nodeType === 3 ? prevContainer.parentNode : prevContainer;\n                                if (parentNode.contains(container)) {\n                                    let sameParent = true;\n                                    afterNode = container;\n                                    while(afterNode.parentNode && afterNode.parentNode !== parentNode){\n                                        afterNode = afterNode.parentNode;\n                                        sameParent = false;\n                                    }\n                                    if (sameParent && container === prevContainer) afterNode = afterNode.nextSibling;\n                                } else {\n                                    afterNode = null;\n                                }\n                            } else if (util.isWysiwygDiv(container) && !util.isFormatElement(oNode)) {\n                                parentNode = container.appendChild(util.createElement(options.defaultTag));\n                                afterNode = null;\n                            } else {\n                                afterNode = isFormats ? endCon : container === prevContainer ? container.nextSibling : container;\n                                parentNode = !afterNode || !afterNode.parentNode ? commonCon : afterNode.parentNode;\n                            }\n                            while(afterNode && !util.isFormatElement(afterNode) && afterNode.parentNode !== commonCon){\n                                afterNode = afterNode.parentNode;\n                            }\n                        }\n                    }\n                } else {\n                    parentNode = afterNode.parentNode;\n                    afterNode = afterNode.nextSibling;\n                    originAfter = true;\n                }\n            }\n            try {\n                // set node\n                if (!insertListCell) {\n                    if (util.isWysiwygDiv(afterNode) || parentNode === context.element.wysiwyg.parentNode) {\n                        parentNode = context.element.wysiwyg;\n                        afterNode = null;\n                    }\n                    if (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode) || !util.isListCell(parentNode) && util.isComponent(oNode)) {\n                        const oldParent = parentNode;\n                        if (util.isList(afterNode)) {\n                            parentNode = afterNode;\n                            afterNode = null;\n                        } else if (util.isListCell(afterNode)) {\n                            parentNode = afterNode.previousElementSibling || afterNode;\n                        } else if (!originAfter && !afterNode) {\n                            const r = this.removeNode();\n                            const container = r.container.nodeType === 3 ? util.isListCell(util.getFormatElement(r.container, null)) ? r.container : util.getFormatElement(r.container, null) || r.container.parentNode : r.container;\n                            const rangeCon = util.isWysiwygDiv(container) || util.isRangeFormatElement(container);\n                            parentNode = rangeCon ? container : container.parentNode;\n                            afterNode = rangeCon ? null : container.nextSibling;\n                        }\n                        if (oldParent.childNodes.length === 0 && parentNode !== oldParent) util.removeItem(oldParent);\n                    }\n                    if (isFormats && !freeFormat && !util.isRangeFormatElement(parentNode) && !util.isListCell(parentNode) && !util.isWysiwygDiv(parentNode)) {\n                        afterNode = parentNode.nextElementSibling;\n                        parentNode = parentNode.parentNode;\n                    }\n                    if (util.isWysiwygDiv(parentNode) && (oNode.nodeType === 3 || util.isBreak(oNode))) {\n                        const fomatNode = util.createElement(options.defaultTag);\n                        fomatNode.appendChild(oNode);\n                        fNode = oNode;\n                        oNode = fomatNode;\n                    }\n                }\n                // insert--\n                if (insertListCell) {\n                    if (!tempParentNode.parentNode) {\n                        parentNode = context.element.wysiwyg;\n                        afterNode = null;\n                    } else {\n                        parentNode = tempParentNode;\n                        afterNode = tempAfterNode;\n                    }\n                } else {\n                    afterNode = parentNode === afterNode ? parentNode.lastChild : afterNode;\n                }\n                if (util.isListCell(oNode) && !util.isList(parentNode)) {\n                    if (util.isListCell(parentNode)) {\n                        afterNode = parentNode.nextElementSibling;\n                        parentNode = parentNode.parentNode;\n                    } else {\n                        const ul = util.createElement(\"ol\");\n                        parentNode.insertBefore(ul, afterNode);\n                        parentNode = ul;\n                        afterNode = null;\n                    }\n                    insertListCell = true;\n                }\n                this._checkDuplicateNode(oNode, parentNode);\n                parentNode.insertBefore(oNode, afterNode);\n                if (insertListCell) {\n                    if (util.onlyZeroWidthSpace(line.textContent.trim())) {\n                        util.removeItem(line);\n                        oNode = oNode.lastChild;\n                    } else {\n                        const chList = util.getArrayItem(line.children, util.isList);\n                        if (chList) {\n                            if (oNode !== chList) {\n                                oNode.appendChild(chList);\n                                oNode = chList.previousSibling;\n                            } else {\n                                parentNode.appendChild(oNode);\n                                oNode = parentNode;\n                            }\n                            if (util.onlyZeroWidthSpace(line.textContent.trim())) {\n                                util.removeItem(line);\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                parentNode.appendChild(oNode);\n                console.warn(\"[SUNEDITOR.insertNode.warn] \" + error);\n            } finally{\n                if (fNode) oNode = fNode;\n                const dupleNodes = parentNode.querySelectorAll(\"[data-se-duple]\");\n                if (dupleNodes.length > 0) {\n                    for(let i = 0, len = dupleNodes.length, d, c, ch, parent; i < len; i++){\n                        d = dupleNodes[i];\n                        ch = d.childNodes;\n                        parent = d.parentNode;\n                        while(ch[0]){\n                            c = ch[0];\n                            parent.insertBefore(c, d);\n                        }\n                        if (d === oNode) oNode = c;\n                        util.removeItem(d);\n                    }\n                }\n                if ((util.isFormatElement(oNode) || util.isComponent(oNode)) && startCon === endCon) {\n                    const cItem = util.getFormatElement(commonCon, null);\n                    if (cItem && cItem.nodeType === 1 && util.isEmptyLine(cItem)) {\n                        util.removeItem(cItem);\n                    }\n                }\n                if (freeFormat && (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode))) {\n                    oNode = this._setIntoFreeFormat(oNode);\n                }\n                if (!util.isComponent(oNode)) {\n                    let offset = 1;\n                    if (oNode.nodeType === 3) {\n                        offset = oNode.textContent.length;\n                        this.setRange(oNode, offset, oNode, offset);\n                    } else if (!util.isBreak(oNode) && !util.isListCell(oNode) && util.isFormatElement(parentNode)) {\n                        let zeroWidth = null;\n                        if (!oNode.previousSibling || util.isBreak(oNode.previousSibling)) {\n                            zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                            oNode.parentNode.insertBefore(zeroWidth, oNode);\n                        }\n                        if (!oNode.nextSibling || util.isBreak(oNode.nextSibling)) {\n                            zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                            oNode.parentNode.insertBefore(zeroWidth, oNode.nextSibling);\n                        }\n                        if (util._isIgnoreNodeChange(oNode)) {\n                            oNode = oNode.nextSibling;\n                            offset = 0;\n                        }\n                    }\n                    this.setRange(oNode, offset, oNode, offset);\n                }\n                return oNode;\n            }\n        },\n        _setIntoFreeFormat: function(oNode) {\n            const parentNode = oNode.parentNode;\n            let oNodeChildren, lastONode;\n            while(util.isFormatElement(oNode) || util.isRangeFormatElement(oNode)){\n                oNodeChildren = oNode.childNodes;\n                lastONode = null;\n                while(oNodeChildren[0]){\n                    lastONode = oNodeChildren[0];\n                    if (util.isFormatElement(lastONode) || util.isRangeFormatElement(lastONode)) {\n                        this._setIntoFreeFormat(lastONode);\n                        if (!oNode.parentNode) break;\n                        oNodeChildren = oNode.childNodes;\n                        continue;\n                    }\n                    parentNode.insertBefore(lastONode, oNode);\n                }\n                if (oNode.childNodes.length === 0) util.removeItem(oNode);\n                oNode = util.createElement(\"BR\");\n                parentNode.insertBefore(oNode, lastONode.nextSibling);\n            }\n            return oNode;\n        },\n        /**\r\n         * @description Delete the currently selected nodes and reset selection range\r\n         * Returns {container: \"the last element after deletion\", offset: \"offset\", prevContainer: \"previousElementSibling Of the deleted area\"}\r\n         * @returns {Object}\r\n         */ removeNode: function() {\n            this._resetRangeToTextNode();\n            const range = this.getRange();\n            if (range.startContainer === range.endContainer) {\n                const fileComponent = util.getParentElement(range.startContainer, util.isMediaComponent);\n                if (fileComponent) {\n                    const br = util.createElement(\"BR\");\n                    const format = util.createElement(options.defaultTag);\n                    format.appendChild(br);\n                    util.changeElement(fileComponent, format);\n                    core.setRange(format, 0, format, 0);\n                    this.history.push(true);\n                    return {\n                        container: format,\n                        offset: 0,\n                        prevContainer: null\n                    };\n                }\n            }\n            const isStartEdge = range.startOffset === 0;\n            const isEndEdge = core.isEdgePoint(range.endContainer, range.endOffset, \"end\");\n            let prevContainer = null;\n            let startPrevEl = null;\n            let endNextEl = null;\n            if (isStartEdge) {\n                startPrevEl = util.getFormatElement(range.startContainer);\n                if (startPrevEl) {\n                    prevContainer = startPrevEl.previousElementSibling;\n                    startPrevEl = prevContainer;\n                }\n            }\n            if (isEndEdge) {\n                endNextEl = util.getFormatElement(range.endContainer);\n                endNextEl = endNextEl ? endNextEl.nextElementSibling : endNextEl;\n            }\n            let container, offset = 0;\n            let startCon = range.startContainer;\n            let endCon = range.endContainer;\n            let startOff = range.startOffset;\n            let endOff = range.endOffset;\n            const commonCon = range.commonAncestorContainer.nodeType === 3 && range.commonAncestorContainer.parentNode === startCon.parentNode ? startCon.parentNode : range.commonAncestorContainer;\n            if (commonCon === startCon && commonCon === endCon) {\n                startCon = commonCon.children[startOff];\n                endCon = commonCon.children[endOff];\n                startOff = endOff = 0;\n            }\n            if (!startCon || !endCon) return {\n                container: commonCon,\n                offset: 0\n            };\n            if (startCon === endCon && range.collapsed) {\n                if (startCon.textContent && util.onlyZeroWidthSpace(startCon.textContent.substr(startOff))) {\n                    return {\n                        container: startCon,\n                        offset: startOff,\n                        prevContainer: startCon && startCon.parentNode ? startCon : null\n                    };\n                }\n            }\n            let beforeNode = null;\n            let afterNode = null;\n            const childNodes = util.getListChildNodes(commonCon, null);\n            let startIndex = util.getArrayIndex(childNodes, startCon);\n            let endIndex = util.getArrayIndex(childNodes, endCon);\n            if (childNodes.length > 0 && startIndex > -1 && endIndex > -1) {\n                for(let i = startIndex + 1, startNode = startCon; i >= 0; i--){\n                    if (childNodes[i] === startNode.parentNode && childNodes[i].firstChild === startNode && startOff === 0) {\n                        startIndex = i;\n                        startNode = startNode.parentNode;\n                    }\n                }\n                for(let i = endIndex - 1, endNode = endCon; i > startIndex; i--){\n                    if (childNodes[i] === endNode.parentNode && childNodes[i].nodeType === 1) {\n                        childNodes.splice(i, 1);\n                        endNode = endNode.parentNode;\n                        --endIndex;\n                    }\n                }\n            } else {\n                if (childNodes.length === 0) {\n                    if (util.isFormatElement(commonCon) || util.isRangeFormatElement(commonCon) || util.isWysiwygDiv(commonCon) || util.isBreak(commonCon) || util.isMedia(commonCon)) {\n                        return {\n                            container: commonCon,\n                            offset: 0\n                        };\n                    } else if (commonCon.nodeType === 3) {\n                        return {\n                            container: commonCon,\n                            offset: endOff\n                        };\n                    }\n                    childNodes.push(commonCon);\n                    startCon = endCon = commonCon;\n                } else {\n                    startCon = endCon = childNodes[0];\n                    if (util.isBreak(startCon) || util.onlyZeroWidthSpace(startCon)) {\n                        return {\n                            container: util.isMedia(commonCon) ? commonCon : startCon,\n                            offset: 0\n                        };\n                    }\n                }\n                startIndex = endIndex = 0;\n            }\n            for(let i = startIndex; i <= endIndex; i++){\n                const item = childNodes[i];\n                if (item.length === 0 || item.nodeType === 3 && item.data === undefined) {\n                    this._nodeRemoveListItem(item);\n                    continue;\n                }\n                if (item === startCon) {\n                    if (startCon.nodeType === 1) {\n                        if (util.isComponent(startCon)) continue;\n                        else beforeNode = util.createTextNode(startCon.textContent);\n                    } else {\n                        if (item === endCon) {\n                            beforeNode = util.createTextNode(startCon.substringData(0, startOff) + endCon.substringData(endOff, endCon.length - endOff));\n                            offset = startOff;\n                        } else {\n                            beforeNode = util.createTextNode(startCon.substringData(0, startOff));\n                        }\n                    }\n                    if (beforeNode.length > 0) {\n                        startCon.data = beforeNode.data;\n                    } else {\n                        this._nodeRemoveListItem(startCon);\n                    }\n                    if (item === endCon) break;\n                    continue;\n                }\n                if (item === endCon) {\n                    if (endCon.nodeType === 1) {\n                        if (util.isComponent(endCon)) continue;\n                        else afterNode = util.createTextNode(endCon.textContent);\n                    } else {\n                        afterNode = util.createTextNode(endCon.substringData(endOff, endCon.length - endOff));\n                    }\n                    if (afterNode.length > 0) {\n                        endCon.data = afterNode.data;\n                    } else {\n                        this._nodeRemoveListItem(endCon);\n                    }\n                    continue;\n                }\n                this._nodeRemoveListItem(item);\n            }\n            const endUl = util.getParentElement(endCon, \"ul\");\n            const startLi = util.getParentElement(startCon, \"li\");\n            if (endUl && startLi && startLi.contains(endUl)) {\n                container = endUl.previousSibling;\n                offset = container.textContent.length;\n            } else {\n                container = endCon && endCon.parentNode ? endCon : startCon && startCon.parentNode ? startCon : range.endContainer || range.startContainer;\n                offset = !isStartEdge && !isEndEdge ? offset : isEndEdge ? container.textContent.length : 0;\n            }\n            if (!util.isWysiwygDiv(container) && container.childNodes.length === 0) {\n                const rc = util.removeItemAllParents(container, null, null);\n                if (rc) container = rc.sc || rc.ec || context.element.wysiwyg;\n            }\n            if (!util.getFormatElement(container) && !(startCon && startCon.parentNode)) {\n                if (endNextEl) {\n                    container = endNextEl;\n                    offset = 0;\n                } else if (startPrevEl) {\n                    container = startPrevEl;\n                    offset = 1;\n                }\n            }\n            // set range\n            this.setRange(container, offset, container, offset);\n            // history stack\n            this.history.push(true);\n            return {\n                container: container,\n                offset: offset,\n                prevContainer: prevContainer\n            };\n        },\n        _nodeRemoveListItem: function(item) {\n            const format = util.getFormatElement(item, null);\n            util.removeItem(item);\n            if (!util.isListCell(format)) return;\n            util.removeItemAllParents(format, null, null);\n            if (format && util.isList(format.firstChild)) {\n                format.insertBefore(util.createTextNode(util.zeroWidthSpace), format.firstChild);\n            }\n        },\n        /**\r\n         * @description Appended all selected format Element to the argument element and insert\r\n         * @param {Element} rangeElement Element of wrap the arguments (BLOCKQUOTE...)\r\n         */ applyRangeFormatElement: function(rangeElement) {\n            this.getRange_addLine(this.getRange(), null);\n            const rangeLines = this.getSelectedElementsAndComponents(false);\n            if (!rangeLines || rangeLines.length === 0) return;\n            linesLoop: for(let i = 0, len = rangeLines.length, line, nested, fEl, lEl, f, l; i < len; i++){\n                line = rangeLines[i];\n                if (!util.isListCell(line)) continue;\n                nested = line.lastElementChild;\n                if (nested && util.isListCell(line.nextElementSibling) && rangeLines.indexOf(line.nextElementSibling) > -1) {\n                    lEl = nested.lastElementChild;\n                    if (rangeLines.indexOf(lEl) > -1) {\n                        let list = null;\n                        while(list = lEl.lastElementChild){\n                            if (util.isList(list)) {\n                                if (rangeLines.indexOf(list.lastElementChild) > -1) {\n                                    lEl = list.lastElementChild;\n                                } else {\n                                    continue linesLoop;\n                                }\n                            }\n                        }\n                        fEl = nested.firstElementChild;\n                        f = rangeLines.indexOf(fEl);\n                        l = rangeLines.indexOf(lEl);\n                        rangeLines.splice(f, l - f + 1);\n                        len = rangeLines.length;\n                        continue;\n                    }\n                }\n            }\n            let last = rangeLines[rangeLines.length - 1];\n            let standTag, beforeTag, pElement;\n            if (util.isRangeFormatElement(last) || util.isFormatElement(last)) {\n                standTag = last;\n            } else {\n                standTag = util.getRangeFormatElement(last, null) || util.getFormatElement(last, null);\n            }\n            if (util.isCell(standTag)) {\n                beforeTag = null;\n                pElement = standTag;\n            } else {\n                beforeTag = standTag.nextSibling;\n                pElement = standTag.parentNode;\n            }\n            let parentDepth = util.getElementDepth(standTag);\n            let listParent = null;\n            const lineArr = [];\n            const removeItems = function(parent, origin, before) {\n                let cc = null;\n                if (parent !== origin && !util.isTable(origin)) {\n                    if (origin && util.getElementDepth(parent) === util.getElementDepth(origin)) return before;\n                    cc = util.removeItemAllParents(origin, null, parent);\n                }\n                return cc ? cc.ec : before;\n            };\n            for(let i = 0, len = rangeLines.length, line, originParent, depth, before, nextLine, nextList, nested; i < len; i++){\n                line = rangeLines[i];\n                originParent = line.parentNode;\n                if (!originParent || rangeElement.contains(originParent)) continue;\n                depth = util.getElementDepth(line);\n                if (util.isList(originParent)) {\n                    if (listParent === null) {\n                        if (nextList) {\n                            listParent = nextList;\n                            nested = true;\n                            nextList = null;\n                        } else {\n                            listParent = originParent.cloneNode(false);\n                        }\n                    }\n                    lineArr.push(line);\n                    nextLine = rangeLines[i + 1];\n                    if (i === len - 1 || nextLine && nextLine.parentNode !== originParent) {\n                        // nested list\n                        if (nextLine && line.contains(nextLine.parentNode)) {\n                            nextList = nextLine.parentNode.cloneNode(false);\n                        }\n                        let list = originParent.parentNode, p;\n                        while(util.isList(list)){\n                            p = util.createElement(list.nodeName);\n                            p.appendChild(listParent);\n                            listParent = p;\n                            list = list.parentNode;\n                        }\n                        const edge = this.detachRangeFormatElement(originParent, lineArr, null, true, true);\n                        if (parentDepth >= depth) {\n                            parentDepth = depth;\n                            pElement = edge.cc;\n                            beforeTag = removeItems(pElement, originParent, edge.ec);\n                            if (beforeTag) pElement = beforeTag.parentNode;\n                        } else if (pElement === edge.cc) {\n                            beforeTag = edge.ec;\n                        }\n                        if (pElement !== edge.cc) {\n                            before = removeItems(pElement, edge.cc, before);\n                            if (before !== undefined) beforeTag = before;\n                            else beforeTag = edge.cc;\n                        }\n                        for(let c = 0, cLen = edge.removeArray.length; c < cLen; c++){\n                            listParent.appendChild(edge.removeArray[c]);\n                        }\n                        if (!nested) rangeElement.appendChild(listParent);\n                        if (nextList) edge.removeArray[edge.removeArray.length - 1].appendChild(nextList);\n                        listParent = null;\n                        nested = false;\n                    }\n                } else {\n                    if (parentDepth >= depth) {\n                        parentDepth = depth;\n                        pElement = originParent;\n                        beforeTag = line.nextSibling;\n                    }\n                    rangeElement.appendChild(line);\n                    if (pElement !== originParent) {\n                        before = removeItems(pElement, originParent);\n                        if (before !== undefined) beforeTag = before;\n                    }\n                }\n            }\n            this.effectNode = null;\n            util.mergeSameTags(rangeElement, null, false);\n            util.mergeNestedTags(rangeElement, (function(current) {\n                return this.isList(current);\n            }).bind(util));\n            // Nested list\n            if (beforeTag && util.getElementDepth(beforeTag) > 0 && (util.isList(beforeTag.parentNode) || util.isList(beforeTag.parentNode.parentNode))) {\n                const depthFormat = util.getParentElement(beforeTag, (function(current) {\n                    return this.isRangeFormatElement(current) && !this.isList(current);\n                }).bind(util));\n                const splitRange = util.splitElement(beforeTag, null, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);\n                splitRange.parentNode.insertBefore(rangeElement, splitRange);\n            } else {\n                pElement.insertBefore(rangeElement, beforeTag);\n                removeItems(rangeElement, beforeTag);\n            }\n            const edge = util.getEdgeChildNodes(rangeElement.firstElementChild, rangeElement.lastElementChild);\n            if (rangeLines.length > 1) {\n                this.setRange(edge.sc, 0, edge.ec, edge.ec.textContent.length);\n            } else {\n                this.setRange(edge.ec, edge.ec.textContent.length, edge.ec, edge.ec.textContent.length);\n            }\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description The elements of the \"selectedFormats\" array are detached from the \"rangeElement\" element. (\"LI\" tags are converted to \"P\" tags)\r\n         * When \"selectedFormats\" is null, all elements are detached and return {cc: parentNode, sc: nextSibling, ec: previousSibling, removeArray: [Array of removed elements]}.\r\n         * @param {Element} rangeElement Range format element (PRE, BLOCKQUOTE, OL, UL...)\r\n         * @param {Array|null} selectedFormats Array of format elements (P, DIV, LI...) to remove.\r\n         * If null, Applies to all elements and return {cc: parentNode, sc: nextSibling, ec: previousSibling}\r\n         * @param {Element|null} newRangeElement The node(rangeElement) to replace the currently wrapped node.\r\n         * @param {Boolean} remove If true, deleted without detached.\r\n         * @param {Boolean} notHistoryPush When true, it does not update the history stack and the selection object and return EdgeNodes (util.getEdgeChildNodes)\r\n         * @returns {Object}\r\n         */ detachRangeFormatElement: function(rangeElement, selectedFormats, newRangeElement, remove, notHistoryPush) {\n            const range = this.getRange();\n            let so = range.startOffset;\n            let eo = range.endOffset;\n            let children = util.getListChildNodes(rangeElement, function(current) {\n                return current.parentNode === rangeElement;\n            });\n            let parent = rangeElement.parentNode;\n            let firstNode = null;\n            let lastNode = null;\n            let rangeEl = rangeElement.cloneNode(false);\n            const removeArray = [];\n            const newList = util.isList(newRangeElement);\n            let insertedNew = false;\n            let reset = false;\n            let moveComplete = false;\n            function appendNode(parent, insNode, sibling, originNode) {\n                if (util.onlyZeroWidthSpace(insNode)) {\n                    insNode.innerHTML = util.zeroWidthSpace;\n                    so = eo = 1;\n                }\n                if (insNode.nodeType === 3) {\n                    parent.insertBefore(insNode, sibling);\n                    return insNode;\n                }\n                const insChildren = (moveComplete ? insNode : originNode).childNodes;\n                let format = insNode.cloneNode(false);\n                let first = null;\n                let c = null;\n                while(insChildren[0]){\n                    c = insChildren[0];\n                    if (util._notTextNode(c) && !util.isBreak(c) && !util.isListCell(format)) {\n                        if (format.childNodes.length > 0) {\n                            if (!first) first = format;\n                            parent.insertBefore(format, sibling);\n                            format = insNode.cloneNode(false);\n                        }\n                        parent.insertBefore(c, sibling);\n                        if (!first) first = c;\n                    } else {\n                        format.appendChild(c);\n                    }\n                }\n                if (format.childNodes.length > 0) {\n                    if (util.isListCell(parent) && util.isListCell(format) && util.isList(sibling)) {\n                        if (newList) {\n                            first = sibling;\n                            while(sibling){\n                                format.appendChild(sibling);\n                                sibling = sibling.nextSibling;\n                            }\n                            parent.parentNode.insertBefore(format, parent.nextElementSibling);\n                        } else {\n                            const originNext = originNode.nextElementSibling;\n                            const detachRange = util.detachNestedList(originNode, false);\n                            if (rangeElement !== detachRange || originNext !== originNode.nextElementSibling) {\n                                const fChildren = format.childNodes;\n                                while(fChildren[0]){\n                                    originNode.appendChild(fChildren[0]);\n                                }\n                                rangeElement = detachRange;\n                                reset = true;\n                            }\n                        }\n                    } else {\n                        parent.insertBefore(format, sibling);\n                    }\n                    if (!first) first = format;\n                }\n                return first;\n            }\n            // detach loop\n            for(let i = 0, len = children.length, insNode, lineIndex, next; i < len; i++){\n                insNode = children[i];\n                if (insNode.nodeType === 3 && util.isList(rangeEl)) continue;\n                moveComplete = false;\n                if (remove && i === 0) {\n                    if (!selectedFormats || selectedFormats.length === len || selectedFormats[0] === insNode) {\n                        firstNode = rangeElement.previousSibling;\n                    } else {\n                        firstNode = rangeEl;\n                    }\n                }\n                if (selectedFormats) lineIndex = selectedFormats.indexOf(insNode);\n                if (selectedFormats && lineIndex === -1) {\n                    if (!rangeEl) rangeEl = rangeElement.cloneNode(false);\n                    rangeEl.appendChild(insNode);\n                } else {\n                    if (selectedFormats) next = selectedFormats[lineIndex + 1];\n                    if (rangeEl && rangeEl.children.length > 0) {\n                        parent.insertBefore(rangeEl, rangeElement);\n                        rangeEl = null;\n                    }\n                    if (!newList && util.isListCell(insNode)) {\n                        if (next && util.getElementDepth(insNode) !== util.getElementDepth(next) && (util.isListCell(parent) || util.getArrayItem(insNode.children, util.isList, false))) {\n                            const insNext = insNode.nextElementSibling;\n                            const detachRange = util.detachNestedList(insNode, false);\n                            if (rangeElement !== detachRange || insNext !== insNode.nextElementSibling) {\n                                rangeElement = detachRange;\n                                reset = true;\n                            }\n                        } else {\n                            const inner = insNode;\n                            insNode = util.createElement(remove ? inner.nodeName : util.isList(rangeElement.parentNode) || util.isListCell(rangeElement.parentNode) ? \"LI\" : util.isCell(rangeElement.parentNode) ? \"DIV\" : options.defaultTag);\n                            const isCell = util.isListCell(insNode);\n                            const innerChildren = inner.childNodes;\n                            while(innerChildren[0]){\n                                if (util.isList(innerChildren[0]) && !isCell) break;\n                                insNode.appendChild(innerChildren[0]);\n                            }\n                            util.copyFormatAttributes(insNode, inner);\n                            moveComplete = true;\n                        }\n                    } else {\n                        insNode = insNode.cloneNode(false);\n                    }\n                    if (!reset) {\n                        if (!remove) {\n                            if (newRangeElement) {\n                                if (!insertedNew) {\n                                    parent.insertBefore(newRangeElement, rangeElement);\n                                    insertedNew = true;\n                                }\n                                insNode = appendNode(newRangeElement, insNode, null, children[i]);\n                            } else {\n                                insNode = appendNode(parent, insNode, rangeElement, children[i]);\n                            }\n                            if (!reset) {\n                                if (selectedFormats) {\n                                    lastNode = insNode;\n                                    if (!firstNode) {\n                                        firstNode = insNode;\n                                    }\n                                } else if (!firstNode) {\n                                    firstNode = lastNode = insNode;\n                                }\n                            }\n                        } else {\n                            removeArray.push(insNode);\n                            util.removeItem(children[i]);\n                        }\n                        if (reset) {\n                            reset = moveComplete = false;\n                            children = util.getListChildNodes(rangeElement, function(current) {\n                                return current.parentNode === rangeElement;\n                            });\n                            rangeEl = rangeElement.cloneNode(false);\n                            parent = rangeElement.parentNode;\n                            i = -1;\n                            len = children.length;\n                            continue;\n                        }\n                    }\n                }\n            }\n            const rangeParent = rangeElement.parentNode;\n            let rangeRight = rangeElement.nextSibling;\n            if (rangeEl && rangeEl.children.length > 0) {\n                rangeParent.insertBefore(rangeEl, rangeRight);\n            }\n            if (newRangeElement) firstNode = newRangeElement.previousSibling;\n            else if (!firstNode) firstNode = rangeElement.previousSibling;\n            rangeRight = rangeElement.nextSibling !== rangeEl ? rangeElement.nextSibling : rangeEl ? rangeEl.nextSibling : null;\n            if (rangeElement.children.length === 0 || rangeElement.textContent.length === 0) {\n                util.removeItem(rangeElement);\n            } else {\n                util.removeEmptyNode(rangeElement, null, false);\n            }\n            let edge = null;\n            if (remove) {\n                edge = {\n                    cc: rangeParent,\n                    sc: firstNode,\n                    so: so,\n                    ec: rangeRight,\n                    eo: eo,\n                    removeArray: removeArray\n                };\n            } else {\n                if (!firstNode) firstNode = lastNode;\n                if (!lastNode) lastNode = firstNode;\n                const childEdge = util.getEdgeChildNodes(firstNode, lastNode.parentNode ? firstNode : lastNode);\n                edge = {\n                    cc: (childEdge.sc || childEdge.ec).parentNode,\n                    sc: childEdge.sc,\n                    so: so,\n                    ec: childEdge.ec,\n                    eo: eo,\n                    removeArray: null\n                };\n            }\n            this.effectNode = null;\n            if (notHistoryPush) return edge;\n            if (!remove && edge) {\n                if (!selectedFormats) {\n                    this.setRange(edge.sc, 0, edge.sc, 0);\n                } else {\n                    this.setRange(edge.sc, so, edge.ec, eo);\n                }\n            }\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description \"selectedFormats\" array are detached from the list element.\r\n         * The return value is applied when the first and last lines of \"selectedFormats\" are \"LI\" respectively.\r\n         * @param {Array} selectedFormats Array of format elements (LI, P...) to remove.\r\n         * @param {Boolean} remove If true, deleted without detached.\r\n         * @returns {Object} {sc: <LI>, ec: <LI>}.\r\n         */ detachList: function(selectedFormats, remove) {\n            let rangeArr = {};\n            let listFirst = false;\n            let listLast = false;\n            let first = null;\n            let last = null;\n            const passComponent = (function(current) {\n                return !this.isComponent(current);\n            }).bind(util);\n            for(let i = 0, len = selectedFormats.length, r, o, lastIndex, isList; i < len; i++){\n                lastIndex = i === len - 1;\n                o = util.getRangeFormatElement(selectedFormats[i], passComponent);\n                isList = util.isList(o);\n                if (!r && isList) {\n                    r = o;\n                    rangeArr = {\n                        r: r,\n                        f: [\n                            util.getParentElement(selectedFormats[i], \"LI\")\n                        ]\n                    };\n                    if (i === 0) listFirst = true;\n                } else if (r && isList) {\n                    if (r !== o) {\n                        const edge = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, null, remove, true);\n                        o = selectedFormats[i].parentNode;\n                        if (listFirst) {\n                            first = edge.sc;\n                            listFirst = false;\n                        }\n                        if (lastIndex) last = edge.ec;\n                        if (isList) {\n                            r = o;\n                            rangeArr = {\n                                r: r,\n                                f: [\n                                    util.getParentElement(selectedFormats[i], \"LI\")\n                                ]\n                            };\n                            if (lastIndex) listLast = true;\n                        } else {\n                            r = null;\n                        }\n                    } else {\n                        rangeArr.f.push(util.getParentElement(selectedFormats[i], \"LI\"));\n                        if (lastIndex) listLast = true;\n                    }\n                }\n                if (lastIndex && util.isList(r)) {\n                    const edge = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, null, remove, true);\n                    if (listLast || len === 1) last = edge.ec;\n                    if (listFirst) first = edge.sc || last;\n                }\n            }\n            return {\n                sc: first,\n                ec: last\n            };\n        },\n        /**\r\n         * @description Add, update, and delete nodes from selected text.\r\n         * 1. If there is a node in the \"appendNode\" argument, a node with the same tags and attributes as \"appendNode\" is added to the selection text.\r\n         * 2. If it is in the same tag, only the tag's attributes are changed without adding a tag.\r\n         * 3. If the \"appendNode\" argument is null, the node of the selection is update or remove without adding a new node.\r\n         * 4. The same style as the style attribute of the \"styleArray\" argument is deleted.\r\n         *    (Styles should be put with attribute names from css. [\"background-color\"])\r\n         * 5. The same class name as the class attribute of the \"styleArray\" argument is deleted.\r\n         *    (The class name is preceded by \".\" [\".className\"])\r\n         * 6. Use a list of styles and classes of \"appendNode\" in \"styleArray\" to avoid duplicate property values.\r\n         * 7. If a node with all styles and classes removed has the same tag name as \"appendNode\" or \"removeNodeArray\", or \"appendNode\" is null, that node is deleted.\r\n         * 8. Regardless of the style and class of the node, the tag with the same name as the \"removeNodeArray\" argument value is deleted.\r\n         * 9. If the \"strictRemove\" argument is true, only nodes with all styles and classes removed from the nodes of \"removeNodeArray\" are removed.\r\n         *10. It won't work if the parent node has the same class and same value style.\r\n         *    However, if there is a value in \"removeNodeArray\", it works and the text node is separated even if there is no node to replace.\r\n         * @param {Element|null} appendNode The element to be added to the selection. If it is null, only delete the node.\r\n         * @param {Array|null} styleArray The style or className attribute name Array to check (['font-size'], ['.className'], ['font-family', 'color', '.className']...])\r\n         * @param {Array|null} removeNodeArray An array of node names to remove types from, remove all formats when \"appendNode\" is null and there is an empty array or null value. (['span'], ['strong', 'em'] ...])\r\n         * @param {Boolean|null} strictRemove If true, only nodes with all styles and classes removed from the nodes of \"removeNodeArray\" are removed.\r\n         */ nodeChange: function(appendNode, styleArray, removeNodeArray, strictRemove) {\n            this._resetRangeToTextNode();\n            let range = this.getRange_addLine(this.getRange(), null);\n            styleArray = styleArray && styleArray.length > 0 ? styleArray : false;\n            removeNodeArray = removeNodeArray && removeNodeArray.length > 0 ? removeNodeArray : false;\n            const isRemoveNode = !appendNode;\n            const isRemoveFormat = isRemoveNode && !removeNodeArray && !styleArray;\n            let startCon = range.startContainer;\n            let startOff = range.startOffset;\n            let endCon = range.endContainer;\n            let endOff = range.endOffset;\n            if (isRemoveFormat && range.collapsed && util.isFormatElement(startCon.parentNode) || startCon === endCon && startCon.nodeType === 1 && util.isNonEditable(startCon)) {\n                const format = startCon.parentNode;\n                if (!util.isListCell(format) || !util.getValues(format.style).some((function(k) {\n                    return this._listKebab.indexOf(k) > -1;\n                }).bind(this))) return;\n            }\n            if (range.collapsed && !isRemoveFormat) {\n                if (startCon.nodeType === 1 && !util.isBreak(startCon) && !util.isComponent(startCon)) {\n                    let afterNode = null;\n                    const focusNode = startCon.childNodes[startOff];\n                    if (focusNode) {\n                        if (!focusNode.nextSibling) {\n                            afterNode = null;\n                        } else {\n                            afterNode = util.isBreak(focusNode) ? focusNode : focusNode.nextSibling;\n                        }\n                    }\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    startCon.insertBefore(zeroWidth, afterNode);\n                    this.setRange(zeroWidth, 1, zeroWidth, 1);\n                    range = this.getRange();\n                    startCon = range.startContainer;\n                    startOff = range.startOffset;\n                    endCon = range.endContainer;\n                    endOff = range.endOffset;\n                }\n            }\n            if (util.isFormatElement(startCon)) {\n                startCon = startCon.childNodes[startOff] || startCon.firstChild;\n                startOff = 0;\n            }\n            if (util.isFormatElement(endCon)) {\n                endCon = endCon.childNodes[endOff] || endCon.lastChild;\n                endOff = endCon.textContent.length;\n            }\n            if (isRemoveNode) {\n                appendNode = util.createElement(\"DIV\");\n            }\n            const wRegExp = _w.RegExp;\n            const newNodeName = appendNode.nodeName;\n            /* checked same style property */ if (!isRemoveFormat && startCon === endCon && !removeNodeArray && appendNode) {\n                let sNode = startCon;\n                let checkCnt = 0;\n                const checkAttrs = [];\n                const checkStyles = appendNode.style;\n                for(let i = 0, len = checkStyles.length; i < len; i++){\n                    checkAttrs.push(checkStyles[i]);\n                }\n                const ckeckClasses = appendNode.classList;\n                for(let i = 0, len = ckeckClasses.length; i < len; i++){\n                    checkAttrs.push(\".\" + ckeckClasses[i]);\n                }\n                if (checkAttrs.length > 0) {\n                    while(!util.isFormatElement(sNode) && !util.isWysiwygDiv(sNode)){\n                        for(let i = 0; i < checkAttrs.length; i++){\n                            if (sNode.nodeType === 1) {\n                                const s = checkAttrs[i];\n                                const classReg = /^\\./.test(s) ? new wRegExp(\"\\\\s*\" + s.replace(/^\\./, \"\") + \"(\\\\s+|$)\", \"ig\") : false;\n                                const styleCheck = isRemoveNode ? !!sNode.style[s] : !!sNode.style[s] && !!appendNode.style[s] && sNode.style[s] === appendNode.style[s];\n                                const classCheck = classReg === false ? false : isRemoveNode ? !!sNode.className.match(classReg) : !!sNode.className.match(classReg) && !!appendNode.className.match(classReg);\n                                if (styleCheck || classCheck) {\n                                    checkCnt++;\n                                }\n                            }\n                        }\n                        sNode = sNode.parentNode;\n                    }\n                    if (checkCnt >= checkAttrs.length) return;\n                }\n            }\n            let start = {}, end = {};\n            let newNode, styleRegExp = \"\", classRegExp = \"\", removeNodeRegExp = \"\";\n            if (styleArray) {\n                for(let i = 0, len = styleArray.length, s; i < len; i++){\n                    s = styleArray[i];\n                    if (/^\\./.test(s)) {\n                        classRegExp += (classRegExp ? \"|\" : \"\\\\s*(?:\") + s.replace(/^\\./, \"\");\n                    } else {\n                        styleRegExp += (styleRegExp ? \"|\" : \"(?:;|^|\\\\s)(?:\") + s;\n                    }\n                }\n                if (styleRegExp) {\n                    styleRegExp += \")\\\\s*:[^;]*\\\\s*(?:;|$)\";\n                    styleRegExp = new wRegExp(styleRegExp, \"ig\");\n                }\n                if (classRegExp) {\n                    classRegExp += \")(?=\\\\s+|$)\";\n                    classRegExp = new wRegExp(classRegExp, \"ig\");\n                }\n            }\n            if (removeNodeArray) {\n                removeNodeRegExp = \"^(?:\" + removeNodeArray[0];\n                for(let i = 1; i < removeNodeArray.length; i++){\n                    removeNodeRegExp += \"|\" + removeNodeArray[i];\n                }\n                removeNodeRegExp += \")$\";\n                removeNodeRegExp = new wRegExp(removeNodeRegExp, \"i\");\n            }\n            /** validation check function*/ const wBoolean = _w.Boolean;\n            const _removeCheck = {\n                v: false\n            };\n            const validation = function(checkNode) {\n                const vNode = checkNode.cloneNode(false);\n                // all path\n                if (vNode.nodeType === 3 || util.isBreak(vNode)) return vNode;\n                // all remove\n                if (isRemoveFormat) return null;\n                // remove node check\n                const tagRemove = !removeNodeRegExp && isRemoveNode || removeNodeRegExp && removeNodeRegExp.test(vNode.nodeName);\n                // tag remove\n                if (tagRemove && !strictRemove) {\n                    _removeCheck.v = true;\n                    return null;\n                }\n                // style regexp\n                const originStyle = vNode.style.cssText;\n                let style = \"\";\n                if (styleRegExp && originStyle.length > 0) {\n                    style = originStyle.replace(styleRegExp, \"\").trim();\n                    if (style !== originStyle) _removeCheck.v = true;\n                }\n                // class check\n                const originClasses = vNode.className;\n                let classes = \"\";\n                if (classRegExp && originClasses.length > 0) {\n                    classes = originClasses.replace(classRegExp, \"\").trim();\n                    if (classes !== originClasses) _removeCheck.v = true;\n                }\n                // remove only\n                if (isRemoveNode) {\n                    if ((classRegExp || !originClasses) && (styleRegExp || !originStyle) && !style && !classes && tagRemove) {\n                        _removeCheck.v = true;\n                        return null;\n                    }\n                }\n                // change\n                if (style || classes || vNode.nodeName !== newNodeName || wBoolean(styleRegExp) !== wBoolean(originStyle) || wBoolean(classRegExp) !== wBoolean(originClasses)) {\n                    if (styleRegExp && originStyle.length > 0) vNode.style.cssText = style;\n                    if (!vNode.style.cssText) {\n                        vNode.removeAttribute(\"style\");\n                    }\n                    if (classRegExp && originClasses.length > 0) vNode.className = classes.trim();\n                    if (!vNode.className.trim()) {\n                        vNode.removeAttribute(\"class\");\n                    }\n                    if (!vNode.style.cssText && !vNode.className && (vNode.nodeName === newNodeName || tagRemove)) {\n                        _removeCheck.v = true;\n                        return null;\n                    }\n                    return vNode;\n                }\n                _removeCheck.v = true;\n                return null;\n            };\n            // get line nodes\n            const lineNodes = this.getSelectedElements(null);\n            range = this.getRange();\n            startCon = range.startContainer;\n            startOff = range.startOffset;\n            endCon = range.endContainer;\n            endOff = range.endOffset;\n            if (!util.getFormatElement(startCon, null)) {\n                startCon = util.getChildElement(lineNodes[0], function(current) {\n                    return current.nodeType === 3;\n                }, false);\n                startOff = 0;\n            }\n            if (!util.getFormatElement(endCon, null)) {\n                endCon = util.getChildElement(lineNodes[lineNodes.length - 1], function(current) {\n                    return current.nodeType === 3;\n                }, false);\n                endOff = endCon.textContent.length;\n            }\n            const oneLine = util.getFormatElement(startCon, null) === util.getFormatElement(endCon, null);\n            const endLength = lineNodes.length - (oneLine ? 0 : 1);\n            // node Changes\n            newNode = appendNode.cloneNode(false);\n            const isRemoveAnchor = isRemoveFormat || isRemoveNode && function(arr) {\n                for(let n = 0, len = arr.length; n < len; n++){\n                    if (util._isMaintainedNode(arr[n]) || util._isSizeNode(arr[n])) return true;\n                }\n                return false;\n            }(removeNodeArray);\n            const isSizeNode = isRemoveNode || util._isSizeNode(newNode);\n            const _getMaintainedNode = this._util_getMaintainedNode.bind(util, isRemoveAnchor, isSizeNode);\n            const _isMaintainedNode = this._util_isMaintainedNode.bind(util, isRemoveAnchor, isSizeNode);\n            // one line\n            if (oneLine) {\n                if (this._resetCommonListCell(lineNodes[0], styleArray)) range = this.setRange(startCon, startOff, endCon, endOff);\n                const newRange = this._nodeChange_oneLine(lineNodes[0], newNode, validation, startCon, startOff, endCon, endOff, isRemoveFormat, isRemoveNode, range.collapsed, _removeCheck, _getMaintainedNode, _isMaintainedNode);\n                start.container = newRange.startContainer;\n                start.offset = newRange.startOffset;\n                end.container = newRange.endContainer;\n                end.offset = newRange.endOffset;\n                if (start.container === end.container && util.onlyZeroWidthSpace(start.container)) {\n                    start.offset = end.offset = 1;\n                }\n                this._setCommonListStyle(newRange.ancestor, null);\n            } else {\n                let appliedCommonList = false;\n                if (endLength > 0 && this._resetCommonListCell(lineNodes[endLength], styleArray)) appliedCommonList = true;\n                if (this._resetCommonListCell(lineNodes[0], styleArray)) appliedCommonList = true;\n                if (appliedCommonList) this.setRange(startCon, startOff, endCon, endOff);\n                // end\n                if (endLength > 0) {\n                    newNode = appendNode.cloneNode(false);\n                    end = this._nodeChange_endLine(lineNodes[endLength], newNode, validation, endCon, endOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode);\n                }\n                // mid\n                for(let i = endLength - 1, newRange; i > 0; i--){\n                    this._resetCommonListCell(lineNodes[i], styleArray);\n                    newNode = appendNode.cloneNode(false);\n                    newRange = this._nodeChange_middleLine(lineNodes[i], newNode, validation, isRemoveFormat, isRemoveNode, _removeCheck, end.container);\n                    if (newRange.endContainer && newRange.ancestor.contains(newRange.endContainer)) {\n                        end.ancestor = null;\n                        end.container = newRange.endContainer;\n                    }\n                    this._setCommonListStyle(newRange.ancestor, null);\n                }\n                // start\n                newNode = appendNode.cloneNode(false);\n                start = this._nodeChange_startLine(lineNodes[0], newNode, validation, startCon, startOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode, end.container);\n                if (start.endContainer) {\n                    end.ancestor = null;\n                    end.container = start.endContainer;\n                }\n                if (endLength <= 0) {\n                    end = start;\n                } else if (!end.container) {\n                    end.ancestor = null;\n                    end.container = start.container;\n                    end.offset = start.container.textContent.length;\n                }\n                this._setCommonListStyle(start.ancestor, null);\n                this._setCommonListStyle(end.ancestor || util.getFormatElement(end.container), null);\n            }\n            // set range\n            this.controllersOff();\n            this.setRange(start.container, start.offset, end.container, end.offset);\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description Reset common style of list cell\r\n         * @param {Element} el List cell element. <li>\r\n         * @param {Array|null} styleArray Style array\r\n         * @private\r\n         */ _resetCommonListCell: function(el, styleArray) {\n            if (!util.isListCell(el)) return;\n            if (!styleArray) styleArray = this._listKebab;\n            const children = util.getArrayItem(el.childNodes, function(current) {\n                return !util.isBreak(current);\n            }, true);\n            const elStyles = el.style;\n            const ec = [], ek = [], elKeys = util.getValues(elStyles);\n            for(let i = 0, len = this._listKebab.length; i < len; i++){\n                if (elKeys.indexOf(this._listKebab[i]) > -1 && styleArray.indexOf(this._listKebab[i]) > -1) {\n                    ec.push(this._listCamel[i]);\n                    ek.push(this._listKebab[i]);\n                }\n            }\n            if (!ec.length) return;\n            // reset cell style---\n            const refer = util.createElement(\"SPAN\");\n            for(let i = 0, len = ec.length; i < len; i++){\n                refer.style[ec[i]] = elStyles[ek[i]];\n                elStyles.removeProperty(ek[i]);\n            }\n            let sel = refer.cloneNode(false);\n            let r = null, appliedEl = false;\n            for(let i = 0, len = children.length, c, s; i < len; i++){\n                c = children[i];\n                if (options._textTagsMap[c.nodeName.toLowerCase()]) continue;\n                s = util.getValues(c.style);\n                if (s.length === 0 || ec.some(function(k) {\n                    return s.indexOf(k) === -1;\n                }) && s.some(function(k) {\n                    ec.indexOf(k) > -1;\n                })) {\n                    r = c.nextSibling;\n                    sel.appendChild(c);\n                } else if (sel.childNodes.length > 0) {\n                    el.insertBefore(sel, r);\n                    sel = refer.cloneNode(false);\n                    r = null;\n                    appliedEl = true;\n                }\n            }\n            if (sel.childNodes.length > 0) {\n                el.insertBefore(sel, r);\n                appliedEl = true;\n            }\n            if (!elStyles.length) {\n                el.removeAttribute(\"style\");\n            }\n            return appliedEl;\n        },\n        /**\r\n         * @description If certain styles are applied to all child nodes of the list cell, the style of the list cell is also changed. (bold, color, size)\r\n         * @param {Element} el List cell element. <li>\r\n         * @param {Element|null} child Variable for recursive call. (\"null\" on the first call)\r\n         * @private\r\n         */ _setCommonListStyle: function(el, child) {\n            if (!util.isListCell(el)) return;\n            const children = util.getArrayItem((child || el).childNodes, function(current) {\n                return !util.isBreak(current);\n            }, true);\n            child = children[0];\n            if (!child || children.length > 1 || child.nodeType !== 1) return;\n            // set cell style---\n            const childStyle = child.style;\n            const elStyle = el.style;\n            const nodeName = child.nodeName.toLowerCase();\n            let appliedEl = false;\n            // bold, italic\n            if (options._textTagsMap[nodeName] === options._defaultCommand.bold.toLowerCase()) elStyle.fontWeight = \"bold\";\n            if (options._textTagsMap[nodeName] === options._defaultCommand.italic.toLowerCase()) elStyle.fontStyle = \"italic\";\n            // styles\n            const cKeys = util.getValues(childStyle);\n            if (cKeys.length > 0) {\n                for(let i = 0, len = this._listCamel.length; i < len; i++){\n                    if (cKeys.indexOf(this._listKebab[i]) > -1) {\n                        elStyle[this._listCamel[i]] = childStyle[this._listCamel[i]];\n                        childStyle.removeProperty(this._listKebab[i]);\n                        appliedEl = true;\n                    }\n                }\n            }\n            this._setCommonListStyle(el, child);\n            if (!appliedEl) return;\n            // common style\n            if (!childStyle.length) {\n                const ch = child.childNodes;\n                const p = child.parentNode;\n                const n = child.nextSibling;\n                while(ch.length > 0){\n                    p.insertBefore(ch[0], n);\n                }\n                util.removeItem(child);\n            }\n        },\n        /**\r\n         * @description Strip remove node\r\n         * @param {Node} removeNode The remove node\r\n         * @private\r\n         */ _stripRemoveNode: function(removeNode) {\n            const element = removeNode.parentNode;\n            if (!removeNode || removeNode.nodeType === 3 || !element) return;\n            const children = removeNode.childNodes;\n            while(children[0]){\n                element.insertBefore(children[0], removeNode);\n            }\n            element.removeChild(removeNode);\n        },\n        /**\r\n         * @description Return the parent maintained tag. (bind and use a util object)\r\n         * @param {Element} element Element\r\n         * @returns {Element}\r\n         * @private\r\n         */ _util_getMaintainedNode: function(_isRemove, _isSizeNode, element) {\n            if (!element || _isRemove) return null;\n            return this.getParentElement(element, this._isMaintainedNode.bind(this)) || (!_isSizeNode ? this.getParentElement(element, this._isSizeNode.bind(this)) : null);\n        },\n        /**\r\n         * @description Check if element is a tag that should be persisted. (bind and use a util object)\r\n         * @param {Element} element Element\r\n         * @returns {Element}\r\n         * @private\r\n         */ _util_isMaintainedNode: function(_isRemove, _isSizeNode, element) {\n            if (!element || _isRemove || element.nodeType !== 1) return false;\n            const anchor = this._isMaintainedNode(element);\n            return this.getParentElement(element, this._isMaintainedNode.bind(this)) ? anchor : anchor || (!_isSizeNode ? this._isSizeNode(element) : false);\n        },\n        /**\r\n         * @description wraps text nodes of line selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Node} startCon The startContainer property of the selection object.\r\n         * @param {Number} startOff The startOffset property of the selection object.\r\n         * @param {Node} endCon The endContainer property of the selection object.\r\n         * @param {Number} endOff The endOffset property of the selection object.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @param {Boolean} collapsed range.collapsed\r\n         * @returns {{ancestor: *, startContainer: *, startOffset: *, endContainer: *, endOffset: *}}\r\n         * @private\r\n         */ _nodeChange_oneLine: function(element, newInnerNode, validation, startCon, startOff, endCon, endOff, isRemoveFormat, isRemoveNode, collapsed, _removeCheck, _getMaintainedNode, _isMaintainedNode) {\n            // not add tag\n            let parentCon = startCon.parentNode;\n            while(!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)){\n                if (parentCon.nodeName === newInnerNode.nodeName) break;\n                parentCon = parentCon.parentNode;\n            }\n            if (!isRemoveNode && parentCon === endCon.parentNode && parentCon.nodeName === newInnerNode.nodeName) {\n                if (util.onlyZeroWidthSpace(startCon.textContent.slice(0, startOff)) && util.onlyZeroWidthSpace(endCon.textContent.slice(endOff))) {\n                    const children = parentCon.childNodes;\n                    let sameTag = true;\n                    for(let i = 0, len = children.length, c, s, e, z; i < len; i++){\n                        c = children[i];\n                        z = !util.onlyZeroWidthSpace(c);\n                        if (c === startCon) {\n                            s = true;\n                            continue;\n                        }\n                        if (c === endCon) {\n                            e = true;\n                            continue;\n                        }\n                        if (!s && z || s && e && z) {\n                            sameTag = false;\n                            break;\n                        }\n                    }\n                    if (sameTag) {\n                        util.copyTagAttributes(parentCon, newInnerNode);\n                        return {\n                            ancestor: element,\n                            startContainer: startCon,\n                            startOffset: startOff,\n                            endContainer: endCon,\n                            endOffset: endOff\n                        };\n                    }\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const el = element;\n            const nNodeArray = [\n                newInnerNode\n            ];\n            const pNode = element.cloneNode(false);\n            const isSameNode = startCon === endCon;\n            let startContainer = startCon;\n            let startOffset = startOff;\n            let endContainer = endCon;\n            let endOffset = endOff;\n            let startPass = false;\n            let endPass = false;\n            let pCurrent, newNode, appendNode, cssText, anchorNode;\n            const wRegExp = _w.RegExp;\n            function checkCss(vNode) {\n                const regExp = new wRegExp(\"(?:;|^|\\\\s)(?:\" + cssText + \"null)\\\\s*:[^;]*\\\\s*(?:;|$)\", \"ig\");\n                let style = \"\";\n                if (regExp && vNode.style.cssText.length > 0) {\n                    style = regExp.test(vNode.style.cssText);\n                }\n                return !style;\n            }\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length, vNode; i < len; i++){\n                    let child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    let cloneNode;\n                    // startContainer\n                    if (!startPass && child === startContainer) {\n                        let line = pNode;\n                        anchorNode = _getMaintainedNode(child);\n                        const prevNode = util.createTextNode(startContainer.nodeType === 1 ? \"\" : startContainer.substringData(0, startOffset));\n                        const textNode = util.createTextNode(startContainer.nodeType === 1 ? \"\" : startContainer.substringData(startOffset, isSameNode ? endOffset >= startOffset ? endOffset - startOffset : startContainer.data.length - startOffset : startContainer.data.length - startOffset));\n                        if (anchorNode) {\n                            const a = _getMaintainedNode(ancestor);\n                            if (a && a.parentNode !== line) {\n                                let m = a;\n                                let p = null;\n                                while(m.parentNode !== line){\n                                    ancestor = p = m.parentNode.cloneNode(false);\n                                    while(m.childNodes[0]){\n                                        p.appendChild(m.childNodes[0]);\n                                    }\n                                    m.appendChild(p);\n                                    m = m.parentNode;\n                                }\n                                m.parentNode.appendChild(a);\n                            }\n                            anchorNode = anchorNode.cloneNode(false);\n                        }\n                        if (!util.onlyZeroWidthSpace(prevNode)) {\n                            ancestor.appendChild(prevNode);\n                        }\n                        const prevAnchorNode = _getMaintainedNode(ancestor);\n                        if (!!prevAnchorNode) anchorNode = prevAnchorNode;\n                        if (anchorNode) line = anchorNode;\n                        newNode = child;\n                        pCurrent = [];\n                        cssText = \"\";\n                        while(newNode !== line && newNode !== el && newNode !== null){\n                            vNode = _isMaintainedNode(newNode) ? null : validation(newNode);\n                            if (vNode && newNode.nodeType === 1 && checkCss(newNode)) {\n                                pCurrent.push(vNode);\n                                cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || textNode;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        newInnerNode.appendChild(childNode);\n                        line.appendChild(newInnerNode);\n                        if (anchorNode && !_getMaintainedNode(endContainer)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        startContainer = textNode;\n                        startOffset = 0;\n                        startPass = true;\n                        if (newNode !== textNode) newNode.appendChild(startContainer);\n                        if (!isSameNode) continue;\n                    }\n                    // endContainer\n                    if (!endPass && child === endContainer) {\n                        anchorNode = _getMaintainedNode(child);\n                        const afterNode = util.createTextNode(endContainer.nodeType === 1 ? \"\" : endContainer.substringData(endOffset, endContainer.length - endOffset));\n                        const textNode = util.createTextNode(isSameNode || endContainer.nodeType === 1 ? \"\" : endContainer.substringData(0, endOffset));\n                        if (anchorNode) {\n                            anchorNode = anchorNode.cloneNode(false);\n                        } else if (_isMaintainedNode(newInnerNode.parentNode) && !anchorNode) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!util.onlyZeroWidthSpace(afterNode)) {\n                            newNode = child;\n                            cssText = \"\";\n                            pCurrent = [];\n                            const anchors = [];\n                            while(newNode !== pNode && newNode !== el && newNode !== null){\n                                if (newNode.nodeType === 1 && checkCss(newNode)) {\n                                    if (_isMaintainedNode(newNode)) anchors.push(newNode.cloneNode(false));\n                                    else pCurrent.push(newNode.cloneNode(false));\n                                    cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                                }\n                                newNode = newNode.parentNode;\n                            }\n                            pCurrent = pCurrent.concat(anchors);\n                            cloneNode = appendNode = newNode = pCurrent.pop() || afterNode;\n                            while(pCurrent.length > 0){\n                                newNode = pCurrent.pop();\n                                appendNode.appendChild(newNode);\n                                appendNode = newNode;\n                            }\n                            pNode.appendChild(cloneNode);\n                            newNode.textContent = afterNode.data;\n                        }\n                        if (anchorNode && cloneNode) {\n                            const afterAnchorNode = _getMaintainedNode(cloneNode);\n                            if (afterAnchorNode) {\n                                anchorNode = afterAnchorNode;\n                            }\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        cssText = \"\";\n                        while(newNode !== pNode && newNode !== el && newNode !== null){\n                            vNode = _isMaintainedNode(newNode) ? null : validation(newNode);\n                            if (vNode && newNode.nodeType === 1 && checkCss(newNode)) {\n                                pCurrent.push(vNode);\n                                cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || textNode;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (anchorNode) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            newInnerNode.appendChild(childNode);\n                            anchorNode.insertBefore(newInnerNode, anchorNode.firstChild);\n                            pNode.appendChild(anchorNode);\n                            nNodeArray.push(newInnerNode);\n                            anchorNode = null;\n                        } else {\n                            newInnerNode.appendChild(childNode);\n                        }\n                        endContainer = textNode;\n                        endOffset = textNode.data.length;\n                        endPass = true;\n                        if (!isRemoveFormat && collapsed) {\n                            newInnerNode = textNode;\n                            textNode.textContent = util.zeroWidthSpace;\n                        }\n                        if (newNode !== textNode) newNode.appendChild(endContainer);\n                        continue;\n                    }\n                    // other\n                    if (startPass) {\n                        if (child.nodeType === 1 && !util.isBreak(child)) {\n                            if (util._isIgnoreNodeChange(child)) {\n                                pNode.appendChild(child.cloneNode(true));\n                                if (!collapsed) {\n                                    newInnerNode = newInnerNode.cloneNode(false);\n                                    pNode.appendChild(newInnerNode);\n                                    nNodeArray.push(newInnerNode);\n                                }\n                            } else {\n                                recursionFunc(child, child);\n                            }\n                            continue;\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        cssText = \"\";\n                        const anchors = [];\n                        while(newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode){\n                            vNode = endPass ? newNode.cloneNode(false) : validation(newNode);\n                            if (newNode.nodeType === 1 && !util.isBreak(child) && vNode && checkCss(newNode)) {\n                                if (_isMaintainedNode(newNode)) {\n                                    if (!anchorNode) anchors.push(vNode);\n                                } else {\n                                    pCurrent.push(vNode);\n                                }\n                                cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        pCurrent = pCurrent.concat(anchors);\n                        const childNode = pCurrent.pop() || child;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode) && !util.onlyZeroWidthSpace(newInnerNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!endPass && !anchorNode && _isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            const aChildren = childNode.childNodes;\n                            for(let a = 0, aLen = aChildren.length; a < aLen; a++){\n                                newInnerNode.appendChild(aChildren[a]);\n                            }\n                            childNode.appendChild(newInnerNode);\n                            pNode.appendChild(childNode);\n                            nNodeArray.push(newInnerNode);\n                            if (newInnerNode.children.length > 0) ancestor = newNode;\n                            else ancestor = newInnerNode;\n                        } else if (childNode === child) {\n                            if (!endPass) ancestor = newInnerNode;\n                            else ancestor = pNode;\n                        } else if (endPass) {\n                            pNode.appendChild(childNode);\n                            ancestor = newNode;\n                        } else {\n                            newInnerNode.appendChild(childNode);\n                            ancestor = newNode;\n                        }\n                        if (anchorNode && child.nodeType === 3) {\n                            if (_getMaintainedNode(child)) {\n                                const ancestorAnchorNode = util.getParentElement(ancestor, (function(current) {\n                                    return this._isMaintainedNode(current.parentNode) || current.parentNode === pNode;\n                                }).bind(util));\n                                anchorNode.appendChild(ancestorAnchorNode);\n                                newInnerNode = ancestorAnchorNode.cloneNode(false);\n                                nNodeArray.push(newInnerNode);\n                                pNode.appendChild(newInnerNode);\n                            } else {\n                                anchorNode = null;\n                            }\n                        }\n                    }\n                    cloneNode = child.cloneNode(false);\n                    ancestor.appendChild(cloneNode);\n                    if (child.nodeType === 1 && !util.isBreak(child)) coverNode = cloneNode;\n                    recursionFunc(child, coverNode);\n                }\n            })(element, pNode);\n            // not remove tag\n            if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {\n                return {\n                    ancestor: element,\n                    startContainer: startCon,\n                    startOffset: startOff,\n                    endContainer: endCon,\n                    endOffset: endOff\n                };\n            }\n            isRemoveFormat = isRemoveFormat && isRemoveNode;\n            if (isRemoveFormat) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    let textNode, textNode_s, textNode_e;\n                    if (collapsed) {\n                        textNode = util.createTextNode(util.zeroWidthSpace);\n                        pNode.replaceChild(textNode, removeNode);\n                    } else {\n                        const rChildren = removeNode.childNodes;\n                        textNode_s = rChildren[0];\n                        while(rChildren[0]){\n                            textNode_e = rChildren[0];\n                            pNode.insertBefore(textNode_e, removeNode);\n                        }\n                        util.removeItem(removeNode);\n                    }\n                    if (i === 0) {\n                        if (collapsed) {\n                            startContainer = endContainer = textNode;\n                        } else {\n                            startContainer = textNode_s;\n                            endContainer = textNode_e;\n                        }\n                    }\n                }\n            } else {\n                if (isRemoveNode) {\n                    for(let i = 0; i < nNodeArray.length; i++){\n                        this._stripRemoveNode(nNodeArray[i]);\n                    }\n                }\n                if (collapsed) {\n                    startContainer = endContainer = newInnerNode;\n                }\n            }\n            util.removeEmptyNode(pNode, newInnerNode, false);\n            if (collapsed) {\n                startOffset = startContainer.textContent.length;\n                endOffset = endContainer.textContent.length;\n            }\n            // endContainer reset\n            const endConReset = isRemoveFormat || endContainer.textContent.length === 0;\n            if (!util.isBreak(endContainer) && endContainer.textContent.length === 0) {\n                util.removeItem(endContainer);\n                endContainer = startContainer;\n            }\n            endOffset = endConReset ? endContainer.textContent.length : endOffset;\n            // node change\n            const newStartOffset = {\n                s: 0,\n                e: 0\n            };\n            const startPath = util.getNodePath(startContainer, pNode, newStartOffset);\n            const mergeEndCon = !endContainer.parentNode;\n            if (mergeEndCon) endContainer = startContainer;\n            const newEndOffset = {\n                s: 0,\n                e: 0\n            };\n            const endPath = util.getNodePath(endContainer, pNode, !mergeEndCon && !endConReset ? newEndOffset : null);\n            startOffset += newStartOffset.s;\n            endOffset = collapsed ? startOffset : mergeEndCon ? startContainer.textContent.length : endConReset ? endOffset + newStartOffset.s : endOffset + newEndOffset.s;\n            // tag merge\n            const newOffsets = util.mergeSameTags(pNode, [\n                startPath,\n                endPath\n            ], true);\n            element.parentNode.replaceChild(pNode, element);\n            startContainer = util.getNodeFromPath(startPath, pNode);\n            endContainer = util.getNodeFromPath(endPath, pNode);\n            return {\n                ancestor: pNode,\n                startContainer: startContainer,\n                startOffset: startOffset + newOffsets[0],\n                endContainer: endContainer,\n                endOffset: endOffset + newOffsets[1]\n            };\n        },\n        /**\r\n         * @description wraps first line selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Node} startCon The startContainer property of the selection object.\r\n         * @param {Number} startOff The startOffset property of the selection object.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @returns {null|Node} If end container is renewed, returned renewed node\r\n         * @returns {Object} { ancestor, container, offset, endContainer }\r\n         * @private\r\n         */ _nodeChange_startLine: function(element, newInnerNode, validation, startCon, startOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode, _endContainer) {\n            // not add tag\n            let parentCon = startCon.parentNode;\n            while(!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)){\n                if (parentCon.nodeName === newInnerNode.nodeName) break;\n                parentCon = parentCon.parentNode;\n            }\n            if (!isRemoveNode && parentCon.nodeName === newInnerNode.nodeName && !util.isFormatElement(parentCon) && !parentCon.nextSibling && util.onlyZeroWidthSpace(startCon.textContent.slice(0, startOff))) {\n                let sameTag = true;\n                let s = startCon.previousSibling;\n                while(s){\n                    if (!util.onlyZeroWidthSpace(s)) {\n                        sameTag = false;\n                        break;\n                    }\n                    s = s.previousSibling;\n                }\n                if (sameTag) {\n                    util.copyTagAttributes(parentCon, newInnerNode);\n                    return {\n                        ancestor: element,\n                        container: startCon,\n                        offset: startOff\n                    };\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const el = element;\n            const nNodeArray = [\n                newInnerNode\n            ];\n            const pNode = element.cloneNode(false);\n            let container = startCon;\n            let offset = startOff;\n            let passNode = false;\n            let pCurrent, newNode, appendNode, anchorNode;\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length, vNode, cloneChild; i < len; i++){\n                    const child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    if (passNode && !util.isBreak(child)) {\n                        if (child.nodeType === 1) {\n                            if (util._isIgnoreNodeChange(child)) {\n                                newInnerNode = newInnerNode.cloneNode(false);\n                                cloneChild = child.cloneNode(true);\n                                pNode.appendChild(cloneChild);\n                                pNode.appendChild(newInnerNode);\n                                nNodeArray.push(newInnerNode);\n                                // end container\n                                if (_endContainer && child.contains(_endContainer)) {\n                                    const endPath = util.getNodePath(_endContainer, child);\n                                    _endContainer = util.getNodeFromPath(endPath, cloneChild);\n                                }\n                            } else {\n                                recursionFunc(child, child);\n                            }\n                            continue;\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        const anchors = [];\n                        while(newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode){\n                            vNode = validation(newNode);\n                            if (newNode.nodeType === 1 && vNode) {\n                                if (_isMaintainedNode(newNode)) {\n                                    if (!anchorNode) anchors.push(vNode);\n                                } else {\n                                    pCurrent.push(vNode);\n                                }\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        pCurrent = pCurrent.concat(anchors);\n                        const isTopNode = pCurrent.length > 0;\n                        const childNode = pCurrent.pop() || child;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!anchorNode && _isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            const aChildren = childNode.childNodes;\n                            for(let a = 0, aLen = aChildren.length; a < aLen; a++){\n                                newInnerNode.appendChild(aChildren[a]);\n                            }\n                            childNode.appendChild(newInnerNode);\n                            pNode.appendChild(childNode);\n                            ancestor = !_isMaintainedNode(newNode) ? newNode : newInnerNode;\n                            nNodeArray.push(newInnerNode);\n                        } else if (isTopNode) {\n                            newInnerNode.appendChild(childNode);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (anchorNode && child.nodeType === 3) {\n                            if (_getMaintainedNode(child)) {\n                                const ancestorAnchorNode = util.getParentElement(ancestor, (function(current) {\n                                    return this._isMaintainedNode(current.parentNode) || current.parentNode === pNode;\n                                }).bind(util));\n                                anchorNode.appendChild(ancestorAnchorNode);\n                                newInnerNode = ancestorAnchorNode.cloneNode(false);\n                                nNodeArray.push(newInnerNode);\n                                pNode.appendChild(newInnerNode);\n                            } else {\n                                anchorNode = null;\n                            }\n                        }\n                    }\n                    // startContainer\n                    if (!passNode && child === container) {\n                        let line = pNode;\n                        anchorNode = _getMaintainedNode(child);\n                        const prevNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(0, offset));\n                        const textNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(offset, container.length - offset));\n                        if (anchorNode) {\n                            const a = _getMaintainedNode(ancestor);\n                            if (a && a.parentNode !== line) {\n                                let m = a;\n                                let p = null;\n                                while(m.parentNode !== line){\n                                    ancestor = p = m.parentNode.cloneNode(false);\n                                    while(m.childNodes[0]){\n                                        p.appendChild(m.childNodes[0]);\n                                    }\n                                    m.appendChild(p);\n                                    m = m.parentNode;\n                                }\n                                m.parentNode.appendChild(a);\n                            }\n                            anchorNode = anchorNode.cloneNode(false);\n                        }\n                        if (!util.onlyZeroWidthSpace(prevNode)) {\n                            ancestor.appendChild(prevNode);\n                        }\n                        const prevAnchorNode = _getMaintainedNode(ancestor);\n                        if (!!prevAnchorNode) anchorNode = prevAnchorNode;\n                        if (anchorNode) line = anchorNode;\n                        newNode = ancestor;\n                        pCurrent = [];\n                        while(newNode !== line && newNode !== null){\n                            vNode = validation(newNode);\n                            if (newNode.nodeType === 1 && vNode) {\n                                pCurrent.push(vNode);\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || ancestor;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (childNode !== ancestor) {\n                            newInnerNode.appendChild(childNode);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (util.isBreak(child)) newInnerNode.appendChild(child.cloneNode(false));\n                        line.appendChild(newInnerNode);\n                        container = textNode;\n                        offset = 0;\n                        passNode = true;\n                        ancestor.appendChild(container);\n                        continue;\n                    }\n                    vNode = !passNode ? child.cloneNode(false) : validation(child);\n                    if (vNode) {\n                        ancestor.appendChild(vNode);\n                        if (child.nodeType === 1 && !util.isBreak(child)) coverNode = vNode;\n                    }\n                    recursionFunc(child, coverNode);\n                }\n            })(element, pNode);\n            // not remove tag\n            if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {\n                return {\n                    ancestor: element,\n                    container: startCon,\n                    offset: startOff,\n                    endContainer: _endContainer\n                };\n            }\n            isRemoveFormat = isRemoveFormat && isRemoveNode;\n            if (isRemoveFormat) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    const rChildren = removeNode.childNodes;\n                    const textNode = rChildren[0];\n                    while(rChildren[0]){\n                        pNode.insertBefore(rChildren[0], removeNode);\n                    }\n                    util.removeItem(removeNode);\n                    if (i === 0) container = textNode;\n                }\n            } else if (isRemoveNode) {\n                newInnerNode = newInnerNode.firstChild;\n                for(let i = 0; i < nNodeArray.length; i++){\n                    this._stripRemoveNode(nNodeArray[i]);\n                }\n            }\n            if (!isRemoveFormat && pNode.childNodes.length === 0) {\n                if (element.childNodes) {\n                    container = element.childNodes[0];\n                } else {\n                    container = util.createTextNode(util.zeroWidthSpace);\n                    element.appendChild(container);\n                }\n            } else {\n                util.removeEmptyNode(pNode, newInnerNode, false);\n                if (util.onlyZeroWidthSpace(pNode.textContent)) {\n                    container = pNode.firstChild;\n                    offset = 0;\n                }\n                // node change\n                const offsets = {\n                    s: 0,\n                    e: 0\n                };\n                const path = util.getNodePath(container, pNode, offsets);\n                offset += offsets.s;\n                // tag merge\n                const newOffsets = util.mergeSameTags(pNode, [\n                    path\n                ], true);\n                element.parentNode.replaceChild(pNode, element);\n                container = util.getNodeFromPath(path, pNode);\n                offset += newOffsets[0];\n            }\n            return {\n                ancestor: pNode,\n                container: container,\n                offset: offset,\n                endContainer: _endContainer\n            };\n        },\n        /**\r\n         * @description wraps mid lines selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @param {Node} _endContainer Offset node of last line already modified (end.container)\r\n         * @returns {Object} { ancestor, endContainer: \"If end container is renewed, returned renewed node\" }\r\n         * @private\r\n         */ _nodeChange_middleLine: function(element, newInnerNode, validation, isRemoveFormat, isRemoveNode, _removeCheck, _endContainer) {\n            // not add tag\n            if (!isRemoveNode) {\n                // end container path\n                let endPath = null;\n                if (_endContainer && element.contains(_endContainer)) endPath = util.getNodePath(_endContainer, element);\n                const tempNode = element.cloneNode(true);\n                const newNodeName = newInnerNode.nodeName;\n                const newCssText = newInnerNode.style.cssText;\n                const newClass = newInnerNode.className;\n                let children = tempNode.childNodes;\n                let i = 0, len = children.length;\n                for(let child; i < len; i++){\n                    child = children[i];\n                    if (child.nodeType === 3) break;\n                    if (child.nodeName === newNodeName) {\n                        child.style.cssText += newCssText;\n                        util.addClass(child, newClass);\n                    } else if (!util.isBreak(child) && util._isIgnoreNodeChange(child)) {\n                        continue;\n                    } else if (len === 1) {\n                        children = child.childNodes;\n                        len = children.length;\n                        i = -1;\n                        continue;\n                    } else {\n                        break;\n                    }\n                }\n                if (len > 0 && i === len) {\n                    element.innerHTML = tempNode.innerHTML;\n                    return {\n                        ancestor: element,\n                        endContainer: endPath ? util.getNodeFromPath(endPath, element) : null\n                    };\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const pNode = element.cloneNode(false);\n            const nNodeArray = [\n                newInnerNode\n            ];\n            let noneChange = true;\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length, vNode, cloneChild; i < len; i++){\n                    let child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    if (!util.isBreak(child) && util._isIgnoreNodeChange(child)) {\n                        if (newInnerNode.childNodes.length > 0) {\n                            pNode.appendChild(newInnerNode);\n                            newInnerNode = newInnerNode.cloneNode(false);\n                        }\n                        cloneChild = child.cloneNode(true);\n                        pNode.appendChild(cloneChild);\n                        pNode.appendChild(newInnerNode);\n                        nNodeArray.push(newInnerNode);\n                        ancestor = newInnerNode;\n                        // end container\n                        if (_endContainer && child.contains(_endContainer)) {\n                            const endPath = util.getNodePath(_endContainer, child);\n                            _endContainer = util.getNodeFromPath(endPath, cloneChild);\n                        }\n                        continue;\n                    } else {\n                        vNode = validation(child);\n                        if (vNode) {\n                            noneChange = false;\n                            ancestor.appendChild(vNode);\n                            if (child.nodeType === 1) coverNode = vNode;\n                        }\n                    }\n                    if (!util.isBreak(child)) recursionFunc(child, coverNode);\n                }\n            })(element, newInnerNode);\n            // not remove tag\n            if (noneChange || isRemoveNode && !isRemoveFormat && !_removeCheck.v) return {\n                ancestor: element,\n                endContainer: _endContainer\n            };\n            pNode.appendChild(newInnerNode);\n            if (isRemoveFormat && isRemoveNode) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    const rChildren = removeNode.childNodes;\n                    while(rChildren[0]){\n                        pNode.insertBefore(rChildren[0], removeNode);\n                    }\n                    util.removeItem(removeNode);\n                }\n            } else if (isRemoveNode) {\n                newInnerNode = newInnerNode.firstChild;\n                for(let i = 0; i < nNodeArray.length; i++){\n                    this._stripRemoveNode(nNodeArray[i]);\n                }\n            }\n            util.removeEmptyNode(pNode, newInnerNode, false);\n            util.mergeSameTags(pNode, null, true);\n            // node change\n            element.parentNode.replaceChild(pNode, element);\n            return {\n                ancestor: pNode,\n                endContainer: _endContainer\n            };\n        },\n        /**\r\n         * @description wraps last line selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Node} endCon The endContainer property of the selection object.\r\n         * @param {Number} endOff The endOffset property of the selection object.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @returns {Object} { ancestor, container, offset }\r\n         * @private\r\n         */ _nodeChange_endLine: function(element, newInnerNode, validation, endCon, endOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode) {\n            // not add tag\n            let parentCon = endCon.parentNode;\n            while(!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)){\n                if (parentCon.nodeName === newInnerNode.nodeName) break;\n                parentCon = parentCon.parentNode;\n            }\n            if (!isRemoveNode && parentCon.nodeName === newInnerNode.nodeName && !util.isFormatElement(parentCon) && !parentCon.previousSibling && util.onlyZeroWidthSpace(endCon.textContent.slice(endOff))) {\n                let sameTag = true;\n                let e = endCon.nextSibling;\n                while(e){\n                    if (!util.onlyZeroWidthSpace(e)) {\n                        sameTag = false;\n                        break;\n                    }\n                    e = e.nextSibling;\n                }\n                if (sameTag) {\n                    util.copyTagAttributes(parentCon, newInnerNode);\n                    return {\n                        ancestor: element,\n                        container: endCon,\n                        offset: endOff\n                    };\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const el = element;\n            const nNodeArray = [\n                newInnerNode\n            ];\n            const pNode = element.cloneNode(false);\n            let container = endCon;\n            let offset = endOff;\n            let passNode = false;\n            let pCurrent, newNode, appendNode, anchorNode;\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = childNodes.length - 1, vNode; 0 <= i; i--){\n                    const child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    if (passNode && !util.isBreak(child)) {\n                        if (child.nodeType === 1) {\n                            if (util._isIgnoreNodeChange(child)) {\n                                newInnerNode = newInnerNode.cloneNode(false);\n                                const cloneChild = child.cloneNode(true);\n                                pNode.insertBefore(cloneChild, ancestor);\n                                pNode.insertBefore(newInnerNode, cloneChild);\n                                nNodeArray.push(newInnerNode);\n                            } else {\n                                recursionFunc(child, child);\n                            }\n                            continue;\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        const anchors = [];\n                        while(newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode){\n                            vNode = validation(newNode);\n                            if (vNode && newNode.nodeType === 1) {\n                                if (_isMaintainedNode(newNode)) {\n                                    if (!anchorNode) anchors.push(vNode);\n                                } else {\n                                    pCurrent.push(vNode);\n                                }\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        pCurrent = pCurrent.concat(anchors);\n                        const isTopNode = pCurrent.length > 0;\n                        const childNode = pCurrent.pop() || child;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.insertBefore(newInnerNode, pNode.firstChild);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!anchorNode && _isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            const aChildren = childNode.childNodes;\n                            for(let a = 0, aLen = aChildren.length; a < aLen; a++){\n                                newInnerNode.appendChild(aChildren[a]);\n                            }\n                            childNode.appendChild(newInnerNode);\n                            pNode.insertBefore(childNode, pNode.firstChild);\n                            nNodeArray.push(newInnerNode);\n                            if (newInnerNode.children.length > 0) ancestor = newNode;\n                            else ancestor = newInnerNode;\n                        } else if (isTopNode) {\n                            newInnerNode.insertBefore(childNode, newInnerNode.firstChild);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (anchorNode && child.nodeType === 3) {\n                            if (_getMaintainedNode(child)) {\n                                const ancestorAnchorNode = util.getParentElement(ancestor, (function(current) {\n                                    return this._isMaintainedNode(current.parentNode) || current.parentNode === pNode;\n                                }).bind(util));\n                                anchorNode.appendChild(ancestorAnchorNode);\n                                newInnerNode = ancestorAnchorNode.cloneNode(false);\n                                nNodeArray.push(newInnerNode);\n                                pNode.insertBefore(newInnerNode, pNode.firstChild);\n                            } else {\n                                anchorNode = null;\n                            }\n                        }\n                    }\n                    // endContainer\n                    if (!passNode && child === container) {\n                        anchorNode = _getMaintainedNode(child);\n                        const afterNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(offset, container.length - offset));\n                        const textNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(0, offset));\n                        if (anchorNode) {\n                            anchorNode = anchorNode.cloneNode(false);\n                            const a = _getMaintainedNode(ancestor);\n                            if (a && a.parentNode !== pNode) {\n                                let m = a;\n                                let p = null;\n                                while(m.parentNode !== pNode){\n                                    ancestor = p = m.parentNode.cloneNode(false);\n                                    while(m.childNodes[0]){\n                                        p.appendChild(m.childNodes[0]);\n                                    }\n                                    m.appendChild(p);\n                                    m = m.parentNode;\n                                }\n                                m.parentNode.insertBefore(a, m.parentNode.firstChild);\n                            }\n                            anchorNode = anchorNode.cloneNode(false);\n                        } else if (_isMaintainedNode(newInnerNode.parentNode) && !anchorNode) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!util.onlyZeroWidthSpace(afterNode)) {\n                            ancestor.insertBefore(afterNode, ancestor.firstChild);\n                        }\n                        newNode = ancestor;\n                        pCurrent = [];\n                        while(newNode !== pNode && newNode !== null){\n                            vNode = _isMaintainedNode(newNode) ? null : validation(newNode);\n                            if (vNode && newNode.nodeType === 1) {\n                                pCurrent.push(vNode);\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || ancestor;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (childNode !== ancestor) {\n                            newInnerNode.insertBefore(childNode, newInnerNode.firstChild);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (util.isBreak(child)) newInnerNode.appendChild(child.cloneNode(false));\n                        if (anchorNode) {\n                            anchorNode.insertBefore(newInnerNode, anchorNode.firstChild);\n                            pNode.insertBefore(anchorNode, pNode.firstChild);\n                            anchorNode = null;\n                        } else {\n                            pNode.insertBefore(newInnerNode, pNode.firstChild);\n                        }\n                        container = textNode;\n                        offset = textNode.data.length;\n                        passNode = true;\n                        ancestor.insertBefore(container, ancestor.firstChild);\n                        continue;\n                    }\n                    vNode = !passNode ? child.cloneNode(false) : validation(child);\n                    if (vNode) {\n                        ancestor.insertBefore(vNode, ancestor.firstChild);\n                        if (child.nodeType === 1 && !util.isBreak(child)) coverNode = vNode;\n                    }\n                    recursionFunc(child, coverNode);\n                }\n            })(element, pNode);\n            // not remove tag\n            if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {\n                return {\n                    ancestor: element,\n                    container: endCon,\n                    offset: endOff\n                };\n            }\n            isRemoveFormat = isRemoveFormat && isRemoveNode;\n            if (isRemoveFormat) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    const rChildren = removeNode.childNodes;\n                    let textNode = null;\n                    while(rChildren[0]){\n                        textNode = rChildren[0];\n                        pNode.insertBefore(textNode, removeNode);\n                    }\n                    util.removeItem(removeNode);\n                    if (i === nNodeArray.length - 1) {\n                        container = textNode;\n                        offset = textNode.textContent.length;\n                    }\n                }\n            } else if (isRemoveNode) {\n                newInnerNode = newInnerNode.firstChild;\n                for(let i = 0; i < nNodeArray.length; i++){\n                    this._stripRemoveNode(nNodeArray[i]);\n                }\n            }\n            if (!isRemoveFormat && pNode.childNodes.length === 0) {\n                if (element.childNodes) {\n                    container = element.childNodes[0];\n                } else {\n                    container = util.createTextNode(util.zeroWidthSpace);\n                    element.appendChild(container);\n                }\n            } else {\n                if (!isRemoveNode && newInnerNode.textContent.length === 0) {\n                    util.removeEmptyNode(pNode, null, false);\n                    return {\n                        ancestor: null,\n                        container: null,\n                        offset: 0\n                    };\n                }\n                util.removeEmptyNode(pNode, newInnerNode, false);\n                if (util.onlyZeroWidthSpace(pNode.textContent)) {\n                    container = pNode.firstChild;\n                    offset = container.textContent.length;\n                } else if (util.onlyZeroWidthSpace(container)) {\n                    container = newInnerNode;\n                    offset = 1;\n                }\n                // node change\n                const offsets = {\n                    s: 0,\n                    e: 0\n                };\n                const path = util.getNodePath(container, pNode, offsets);\n                offset += offsets.s;\n                // tag merge\n                const newOffsets = util.mergeSameTags(pNode, [\n                    path\n                ], true);\n                element.parentNode.replaceChild(pNode, element);\n                container = util.getNodeFromPath(path, pNode);\n                offset += newOffsets[0];\n            }\n            return {\n                ancestor: pNode,\n                container: container,\n                offset: container.nodeType === 1 && offset === 1 ? container.childNodes.length : offset\n            };\n        },\n        /**\r\n         * @description Run plugin calls and basic commands.\r\n         * @param {String} command Command string\r\n         * @param {String} display Display type string ('command', 'submenu', 'dialog', 'container')\r\n         * @param {Element} target The element of command button\r\n         */ actionCall: function(command, display, target) {\n            // call plugins\n            if (display) {\n                if (/more/i.test(display)) {\n                    if (target !== this._moreLayerActiveButton) {\n                        const layer = context.element.toolbar.querySelector(\".\" + command);\n                        if (layer) {\n                            if (this._moreLayerActiveButton) this.moreLayerOff();\n                            this._moreLayerActiveButton = target;\n                            layer.style.display = \"block\";\n                            event._showToolbarBalloon();\n                            event._showToolbarInline();\n                        }\n                        util.addClass(target, \"on\");\n                    } else {\n                        const layer = context.element.toolbar.querySelector(\".\" + this._moreLayerActiveButton.getAttribute(\"data-command\"));\n                        if (layer) {\n                            this.moreLayerOff();\n                            event._showToolbarBalloon();\n                            event._showToolbarInline();\n                        }\n                    }\n                    return;\n                }\n                if (/container/.test(display) && (this._menuTray[command] === null || target !== this.containerActiveButton)) {\n                    this.callPlugin(command, this.containerOn.bind(this, target), target);\n                    return;\n                }\n                if (this.isReadOnly && util.arrayIncludes(this.resizingDisabledButtons, target)) return;\n                if (/submenu/.test(display) && (this._menuTray[command] === null || target !== this.submenuActiveButton)) {\n                    this.callPlugin(command, this.submenuOn.bind(this, target), target);\n                    return;\n                } else if (/dialog/.test(display)) {\n                    this.callPlugin(command, this.plugins[command].open.bind(this), target);\n                    return;\n                } else if (/command/.test(display)) {\n                    this.callPlugin(command, this.plugins[command].action.bind(this), target);\n                } else if (/fileBrowser/.test(display)) {\n                    this.callPlugin(command, this.plugins[command].open.bind(this, null), target);\n                }\n            } else if (command) {\n                this.commandHandler(target, command);\n            }\n            if (/submenu/.test(display)) {\n                this.submenuOff();\n            } else if (!/command/.test(display)) {\n                this.submenuOff();\n                this.containerOff();\n            }\n        },\n        /**\r\n         * @description Execute command of command button(All Buttons except submenu and dialog)\r\n         * (selectAll, codeView, fullScreen, indent, outdent, undo, redo, removeFormat, print, preview, showBlocks, save, bold, underline, italic, strike, subscript, superscript, copy, cut, paste)\r\n         * @param {Element|null} target The element of command button\r\n         * @param {String} command Property of command button (data-value)\r\n         */ commandHandler: function(target, command) {\n            if (core.isReadOnly && !/copy|cut|selectAll|codeView|fullScreen|print|preview|showBlocks/.test(command)) return;\n            switch(command){\n                case \"copy\":\n                case \"cut\":\n                    this.execCommand(command);\n                    break;\n                case \"paste\":\n                    break;\n                case \"selectAll\":\n                    this.containerOff();\n                    const wysiwyg = context.element.wysiwyg;\n                    let first = util.getChildElement(wysiwyg.firstChild, function(current) {\n                        return current.childNodes.length === 0 || current.nodeType === 3;\n                    }, false) || wysiwyg.firstChild;\n                    let last = util.getChildElement(wysiwyg.lastChild, function(current) {\n                        return current.childNodes.length === 0 || current.nodeType === 3;\n                    }, true) || wysiwyg.lastChild;\n                    if (!first || !last) return;\n                    if (util.isMedia(first)) {\n                        const info = this.getFileComponent(first);\n                        const br = util.createElement(\"BR\");\n                        const format = util.createElement(options.defaultTag);\n                        format.appendChild(br);\n                        first = info ? info.component : first;\n                        first.parentNode.insertBefore(format, first);\n                        first = br;\n                    }\n                    if (util.isMedia(last)) {\n                        const br = util.createElement(\"BR\");\n                        const format = util.createElement(options.defaultTag);\n                        format.appendChild(br);\n                        wysiwyg.appendChild(format);\n                        last = br;\n                    }\n                    event._showToolbarBalloon(this.setRange(first, 0, last, last.textContent.length));\n                    break;\n                case \"codeView\":\n                    this.toggleCodeView();\n                    break;\n                case \"fullScreen\":\n                    this.toggleFullScreen(target);\n                    break;\n                case \"indent\":\n                case \"outdent\":\n                    this.indent(command);\n                    break;\n                case \"undo\":\n                    this.history.undo();\n                    break;\n                case \"redo\":\n                    this.history.redo();\n                    break;\n                case \"removeFormat\":\n                    this.removeFormat();\n                    this.focus();\n                    break;\n                case \"print\":\n                    this.print();\n                    break;\n                case \"preview\":\n                    this.preview();\n                    break;\n                case \"showBlocks\":\n                    this.toggleDisplayBlocks();\n                    break;\n                case \"dir\":\n                    this.setDir(options.rtl ? \"ltr\" : \"rtl\");\n                    break;\n                case \"dir_ltr\":\n                    this.setDir(\"ltr\");\n                    break;\n                case \"dir_rtl\":\n                    this.setDir(\"rtl\");\n                    break;\n                case \"save\":\n                    if (typeof options.callBackSave === \"function\") {\n                        options.callBackSave(this.getContents(false), this._variable.isChanged);\n                    } else if (this._variable.isChanged && typeof functions.save === \"function\") {\n                        functions.save();\n                    } else {\n                        throw Error(\"[SUNEDITOR.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)\");\n                    }\n                    this._variable.isChanged = false;\n                    if (context.tool.save) context.tool.save.setAttribute(\"disabled\", true);\n                    break;\n                default:\n                    command = options._defaultCommand[command.toLowerCase()] || command;\n                    if (!this.commandMap[command]) this.commandMap[command] = target;\n                    const nodesMap = this._variable.currentNodesMap;\n                    const cmd = nodesMap.indexOf(command) > -1 ? null : util.createElement(command);\n                    let removeNode = command;\n                    if (/^SUB$/i.test(command) && nodesMap.indexOf(\"SUP\") > -1) {\n                        removeNode = \"SUP\";\n                    } else if (/^SUP$/i.test(command) && nodesMap.indexOf(\"SUB\") > -1) {\n                        removeNode = \"SUB\";\n                    }\n                    this.nodeChange(cmd, this._commandMapStyles[command] || null, [\n                        removeNode\n                    ], false);\n                    this.focus();\n            }\n        },\n        /**\r\n         * @description Remove format of the currently selected range\r\n         */ removeFormat: function() {\n            this.nodeChange(null, null, null, null);\n        },\n        /**\r\n         * @description This method implements indentation to selected range.\r\n         * Setted \"margin-left\" to \"25px\" in the top \"P\" tag of the parameter node.\r\n         * @param {String} command Separator (\"indent\" or \"outdent\")\r\n         */ indent: function(command) {\n            const range = this.getRange();\n            const rangeLines = this.getSelectedElements(null);\n            const cells = [];\n            const shift = \"indent\" !== command;\n            const marginDir = options.rtl ? \"marginRight\" : \"marginLeft\";\n            let sc = range.startContainer;\n            let ec = range.endContainer;\n            let so = range.startOffset;\n            let eo = range.endOffset;\n            for(let i = 0, len = rangeLines.length, f, margin; i < len; i++){\n                f = rangeLines[i];\n                if (!util.isListCell(f) || !this.plugins.list) {\n                    margin = /\\d+/.test(f.style[marginDir]) ? util.getNumber(f.style[marginDir], 0) : 0;\n                    if (shift) {\n                        margin -= 25;\n                    } else {\n                        margin += 25;\n                    }\n                    util.setStyle(f, marginDir, margin <= 0 ? \"\" : margin + \"px\");\n                } else {\n                    if (shift || f.previousElementSibling) {\n                        cells.push(f);\n                    }\n                }\n            }\n            // list cells\n            if (cells.length > 0) {\n                this.plugins.list.editInsideList.call(this, shift, cells);\n            }\n            this.effectNode = null;\n            this.setRange(sc, so, ec, eo);\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description Add or remove the class name of \"body\" so that the code block is visible\r\n         */ toggleDisplayBlocks: function() {\n            const wysiwyg = context.element.wysiwyg;\n            util.toggleClass(wysiwyg, \"se-show-block\");\n            if (util.hasClass(wysiwyg, \"se-show-block\")) {\n                util.addClass(this._styleCommandMap.showBlocks, \"active\");\n            } else {\n                util.removeClass(this._styleCommandMap.showBlocks, \"active\");\n            }\n            this._resourcesStateChange();\n        },\n        /**\r\n         * @description Changes to code view or wysiwyg view\r\n         */ toggleCodeView: function() {\n            const isCodeView = this._variable.isCodeView;\n            this.controllersOff();\n            util.setDisabledButtons(!isCodeView, this.codeViewDisabledButtons);\n            if (isCodeView) {\n                if (!util.isNonEditable(context.element.wysiwygFrame)) this._setCodeDataToEditor();\n                context.element.wysiwygFrame.scrollTop = 0;\n                context.element.code.style.display = \"none\";\n                context.element.wysiwygFrame.style.display = \"block\";\n                this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: none\");\n                this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: block\");\n                if (options.height === \"auto\" && !options.codeMirrorEditor) context.element.code.style.height = \"0px\";\n                this._variable.isCodeView = false;\n                if (!this._variable.isFullScreen) {\n                    this._notHideToolbar = false;\n                    if (/balloon|balloon-always/i.test(options.mode)) {\n                        context.element._arrow.style.display = \"\";\n                        this._isInline = false;\n                        this._isBalloon = true;\n                        event._hideToolbar();\n                    }\n                }\n                this.nativeFocus();\n                util.removeClass(this._styleCommandMap.codeView, \"active\");\n                // history stack\n                if (!util.isNonEditable(context.element.wysiwygFrame)) {\n                    this.history.push(false);\n                    this.history._resetCachingButton();\n                }\n            } else {\n                this._setEditorDataToCodeView();\n                this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: block\");\n                this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: none\");\n                if (this._variable.isFullScreen) context.element.code.style.height = \"100%\";\n                else if (options.height === \"auto\" && !options.codeMirrorEditor) context.element.code.style.height = context.element.code.scrollHeight > 0 ? context.element.code.scrollHeight + \"px\" : \"auto\";\n                if (options.codeMirrorEditor) options.codeMirrorEditor.refresh();\n                this._variable.isCodeView = true;\n                if (!this._variable.isFullScreen) {\n                    this._notHideToolbar = true;\n                    if (this._isBalloon) {\n                        context.element._arrow.style.display = \"none\";\n                        context.element.toolbar.style.left = \"\";\n                        this._isInline = true;\n                        this._isBalloon = false;\n                        event._showToolbarInline();\n                    }\n                }\n                this._variable._range = null;\n                context.element.code.focus();\n                util.addClass(this._styleCommandMap.codeView, \"active\");\n            }\n            this._checkPlaceholder();\n            if (this.isReadOnly) util.setDisabledButtons(true, this.resizingDisabledButtons);\n            // user event\n            if (typeof functions.toggleCodeView === \"function\") functions.toggleCodeView(this._variable.isCodeView, this);\n        },\n        /**\r\n         * @description Convert the data of the code view and put it in the WYSIWYG area.\r\n         * @private\r\n         */ _setCodeDataToEditor: function() {\n            const code_html = this._getCodeView();\n            if (options.fullPage) {\n                const parseDocument = this._parser.parseFromString(code_html, \"text/html\");\n                if (!this.options.__allowedScriptTag) {\n                    const headChildren = parseDocument.head.children;\n                    for(let i = 0, len = headChildren.length; i < len; i++){\n                        if (/^script$/i.test(headChildren[i].tagName)) {\n                            parseDocument.head.removeChild(headChildren[i]);\n                            i--, len--;\n                        }\n                    }\n                }\n                let headers = parseDocument.head.innerHTML;\n                if (!parseDocument.head.querySelector('link[rel=\"stylesheet\"]') || this.options.height === \"auto\" && !parseDocument.head.querySelector(\"style\")) {\n                    headers += util._setIframeCssTags(this.options);\n                }\n                this._wd.head.innerHTML = headers;\n                this._wd.body.innerHTML = this.convertContentsForEditor(parseDocument.body.innerHTML);\n                const attrs = parseDocument.body.attributes;\n                for(let i = 0, len = attrs.length; i < len; i++){\n                    if (attrs[i].name === \"contenteditable\") continue;\n                    this._wd.body.setAttribute(attrs[i].name, attrs[i].value);\n                }\n                if (!util.hasClass(this._wd.body, \"sun-editor-editable\")) {\n                    const editableClasses = options._editableClass.split(\" \");\n                    for(let i = 0; i < editableClasses.length; i++){\n                        util.addClass(this._wd.body, options._editableClass[i]);\n                    }\n                }\n            } else {\n                context.element.wysiwyg.innerHTML = code_html.length > 0 ? this.convertContentsForEditor(code_html) : \"<\" + options.defaultTag + \"><br></\" + options.defaultTag + \">\";\n            }\n        },\n        /**\r\n         * @description Convert the data of the WYSIWYG area and put it in the code view area.\r\n         * @private\r\n         */ _setEditorDataToCodeView: function() {\n            const codeContents = this.convertHTMLForCodeView(context.element.wysiwyg, false);\n            let codeValue = \"\";\n            if (options.fullPage) {\n                const attrs = util.getAttributesToString(this._wd.body, null);\n                codeValue = \"<!DOCTYPE html>\\n<html>\\n\" + this._wd.head.outerHTML.replace(/>(?!\\n)/g, \">\\n\") + \"<body \" + attrs + \">\\n\" + codeContents + \"</body>\\n</html>\";\n            } else {\n                codeValue = codeContents;\n            }\n            context.element.code.style.display = \"block\";\n            context.element.wysiwygFrame.style.display = \"none\";\n            this._setCodeView(codeValue);\n        },\n        /**\r\n         * @description Changes to full screen or default screen\r\n         * @param {Element|null} element full screen button\r\n         */ toggleFullScreen: function(element) {\n            const topArea = context.element.topArea;\n            const toolbar = context.element.toolbar;\n            const editorArea = context.element.editorArea;\n            const wysiwygFrame = context.element.wysiwygFrame;\n            const code = context.element.code;\n            const _var = this._variable;\n            this.controllersOff();\n            const wasToolbarHidden = toolbar.style.display === \"none\" || this._isInline && !this._inlineToolbarAttr.isShow;\n            if (!_var.isFullScreen) {\n                _var.isFullScreen = true;\n                _var._fullScreenAttrs.inline = this._isInline;\n                _var._fullScreenAttrs.balloon = this._isBalloon;\n                if (this._isInline || this._isBalloon) {\n                    this._isInline = false;\n                    this._isBalloon = false;\n                }\n                if (!!options.toolbarContainer) context.element.relative.insertBefore(toolbar, editorArea);\n                topArea.style.position = \"fixed\";\n                topArea.style.top = \"0\";\n                topArea.style.left = \"0\";\n                topArea.style.width = \"100%\";\n                topArea.style.maxWidth = \"100%\";\n                topArea.style.height = \"100%\";\n                topArea.style.zIndex = \"2147483647\";\n                if (context.element._stickyDummy.style.display !== ( true && \"\")) {\n                    _var._fullScreenAttrs.sticky = true;\n                    context.element._stickyDummy.style.display = \"none\";\n                    util.removeClass(toolbar, \"se-toolbar-sticky\");\n                }\n                _var._bodyOverflow = _d.body.style.overflow;\n                _d.body.style.overflow = \"hidden\";\n                _var._editorAreaOriginCssText = editorArea.style.cssText;\n                _var._wysiwygOriginCssText = wysiwygFrame.style.cssText;\n                _var._codeOriginCssText = code.style.cssText;\n                editorArea.style.cssText = toolbar.style.cssText = \"\";\n                wysiwygFrame.style.cssText = (wysiwygFrame.style.cssText.match(/\\s?display(\\s+)?:(\\s+)?[a-zA-Z]+;/) || [\n                    \"\"\n                ])[0] + options._editorStyles.editor;\n                code.style.cssText = (code.style.cssText.match(/\\s?display(\\s+)?:(\\s+)?[a-zA-Z]+;/) || [\n                    \"\"\n                ])[0];\n                toolbar.style.width = wysiwygFrame.style.height = code.style.height = \"100%\";\n                toolbar.style.position = \"relative\";\n                toolbar.style.display = \"block\";\n                _var.innerHeight_fullScreen = _w.innerHeight - toolbar.offsetHeight;\n                editorArea.style.height = _var.innerHeight_fullScreen - options.fullScreenOffset + \"px\";\n                if (element) util.changeElement(element.firstElementChild, icons.reduction);\n                if (options.iframe && options.height === \"auto\") {\n                    editorArea.style.overflow = \"auto\";\n                    this._iframeAutoHeight();\n                }\n                context.element.topArea.style.marginTop = options.fullScreenOffset + \"px\";\n                util.addClass(this._styleCommandMap.fullScreen, \"active\");\n            } else {\n                _var.isFullScreen = false;\n                wysiwygFrame.style.cssText = _var._wysiwygOriginCssText;\n                code.style.cssText = _var._codeOriginCssText;\n                toolbar.style.cssText = \"\";\n                editorArea.style.cssText = _var._editorAreaOriginCssText;\n                topArea.style.cssText = _var._originCssText;\n                _d.body.style.overflow = _var._bodyOverflow;\n                if (options.height === \"auto\" && !options.codeMirrorEditor) event._codeViewAutoHeight();\n                if (!!options.toolbarContainer) options.toolbarContainer.appendChild(toolbar);\n                if (options.stickyToolbar > -1) {\n                    util.removeClass(toolbar, \"se-toolbar-sticky\");\n                }\n                if (_var._fullScreenAttrs.sticky && !options.toolbarContainer) {\n                    _var._fullScreenAttrs.sticky = false;\n                    context.element._stickyDummy.style.display = \"block\";\n                    util.addClass(toolbar, \"se-toolbar-sticky\");\n                }\n                this._isInline = _var._fullScreenAttrs.inline;\n                this._isBalloon = _var._fullScreenAttrs.balloon;\n                if (this._isInline) event._showToolbarInline();\n                if (!!options.toolbarContainer) util.removeClass(toolbar, \"se-toolbar-balloon\");\n                event.onScroll_window();\n                if (element) util.changeElement(element.firstElementChild, icons.expansion);\n                context.element.topArea.style.marginTop = \"\";\n                util.removeClass(this._styleCommandMap.fullScreen, \"active\");\n            }\n            if (wasToolbarHidden) functions.toolbar.hide();\n            // user event\n            if (typeof functions.toggleFullScreen === \"function\") functions.toggleFullScreen(this._variable.isFullScreen, this);\n        },\n        /**\r\n         * @description Prints the current contents of the editor.\r\n         */ print: function() {\n            const iframe = util.createElement(\"IFRAME\");\n            iframe.style.display = \"none\";\n            _d.body.appendChild(iframe);\n            const contentsHTML = options.printTemplate ? options.printTemplate.replace(/\\{\\{\\s*contents\\s*\\}\\}/i, this.getContents(true)) : this.getContents(true);\n            const printDocument = util.getIframeDocument(iframe);\n            const wDoc = this._wd;\n            if (options.iframe) {\n                const arrts = options._printClass !== null ? 'class=\"' + options._printClass + '\"' : options.fullPage ? util.getAttributesToString(wDoc.body, [\n                    \"contenteditable\"\n                ]) : 'class=\"' + options._editableClass + '\"';\n                printDocument.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + wDoc.head.innerHTML + \"</head>\" + \"<body \" + arrts + \">\" + contentsHTML + \"</body>\" + \"</html>\");\n            } else {\n                const links = _d.head.getElementsByTagName(\"link\");\n                const styles = _d.head.getElementsByTagName(\"style\");\n                let linkHTML = \"\";\n                for(let i = 0, len = links.length; i < len; i++){\n                    linkHTML += links[i].outerHTML;\n                }\n                for(let i = 0, len = styles.length; i < len; i++){\n                    linkHTML += styles[i].outerHTML;\n                }\n                printDocument.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + linkHTML + \"</head>\" + '<body class=\"' + (options._printClass !== null ? options._printClass : options._editableClass) + '\">' + contentsHTML + \"</body>\" + \"</html>\");\n            }\n            this.showLoading();\n            _w.setTimeout(function() {\n                try {\n                    iframe.focus();\n                    // IE or Edge, Chromium\n                    if (util.isIE_Edge || util.isChromium || !!_d.documentMode || !!_w.StyleMedia) {\n                        try {\n                            iframe.contentWindow.document.execCommand(\"print\", false, null);\n                        } catch (e) {\n                            iframe.contentWindow.print();\n                        }\n                    } else {\n                        // Other browsers\n                        iframe.contentWindow.print();\n                    }\n                } catch (error) {\n                    throw Error(\"[SUNEDITOR.core.print.fail] error: \" + error);\n                } finally{\n                    core.closeLoading();\n                    util.removeItem(iframe);\n                }\n            }, 1000);\n        },\n        /**\r\n         * @description Open the preview window.\r\n         */ preview: function() {\n            core.submenuOff();\n            core.containerOff();\n            core.controllersOff();\n            const contentsHTML = options.previewTemplate ? options.previewTemplate.replace(/\\{\\{\\s*contents\\s*\\}\\}/i, this.getContents(true)) : this.getContents(true);\n            const windowObject = _w.open(\"\", \"_blank\");\n            windowObject.mimeType = \"text/html\";\n            const wDoc = this._wd;\n            if (options.iframe) {\n                const arrts = options._printClass !== null ? 'class=\"' + options._printClass + '\"' : options.fullPage ? util.getAttributesToString(wDoc.body, [\n                    \"contenteditable\"\n                ]) : 'class=\"' + options._editableClass + '\"';\n                windowObject.document.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + wDoc.head.innerHTML + \"<style>body {overflow:auto !important; margin: 10px auto !important; height:auto !important; outline:1px dashed #ccc;}</style>\" + \"</head>\" + \"<body \" + arrts + \">\" + contentsHTML + \"</body>\" + \"</html>\");\n            } else {\n                const links = _d.head.getElementsByTagName(\"link\");\n                const styles = _d.head.getElementsByTagName(\"style\");\n                let linkHTML = \"\";\n                for(let i = 0, len = links.length; i < len; i++){\n                    linkHTML += links[i].outerHTML;\n                }\n                for(let i = 0, len = styles.length; i < len; i++){\n                    linkHTML += styles[i].outerHTML;\n                }\n                windowObject.document.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + '<meta charset=\"utf-8\" />' + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">' + \"<title>\" + lang.toolbar.preview + \"</title>\" + linkHTML + \"</head>\" + '<body class=\"' + (options._printClass !== null ? options._printClass : options._editableClass) + '\" style=\"margin:10px auto !important; height:auto !important; outline:1px dashed #ccc;\">' + contentsHTML + \"</body>\" + \"</html>\");\n            }\n        },\n        /**\r\n         * @description Set direction to \"rtl\" or \"ltr\".\r\n         * @param {String} dir \"rtl\" or \"ltr\"\r\n         */ setDir: function(dir) {\n            const rtl = dir === \"rtl\";\n            const changeDir = this._prevRtl !== rtl;\n            this._prevRtl = options.rtl = rtl;\n            if (changeDir) {\n                // align buttons\n                if (this.plugins.align) {\n                    this.plugins.align.exchangeDir.call(this);\n                }\n                // indent buttons\n                if (context.tool.indent) util.changeElement(context.tool.indent.firstElementChild, icons.indent);\n                if (context.tool.outdent) util.changeElement(context.tool.outdent.firstElementChild, icons.outdent);\n            }\n            const el = context.element;\n            if (rtl) {\n                util.addClass(el.topArea, \"se-rtl\");\n                util.addClass(el.wysiwygFrame, \"se-rtl\");\n            } else {\n                util.removeClass(el.topArea, \"se-rtl\");\n                util.removeClass(el.wysiwygFrame, \"se-rtl\");\n            }\n            const lineNodes = util.getListChildren(el.wysiwyg, function(current) {\n                return util.isFormatElement(current) && (current.style.marginRight || current.style.marginLeft || current.style.textAlign);\n            });\n            for(let i = 0, len = lineNodes.length, n, l, r; i < len; i++){\n                n = lineNodes[i];\n                // indent margin\n                r = n.style.marginRight;\n                l = n.style.marginLeft;\n                if (r || l) {\n                    n.style.marginRight = l;\n                    n.style.marginLeft = r;\n                }\n                // text align\n                r = n.style.textAlign;\n                if (r === \"left\") n.style.textAlign = \"right\";\n                else if (r === \"right\") n.style.textAlign = \"left\";\n            }\n            const tool = context.tool;\n            if (tool.dir) {\n                util.changeTxt(tool.dir.querySelector(\".se-tooltip-text\"), lang.toolbar[options.rtl ? \"dir_ltr\" : \"dir_rtl\"]);\n                util.changeElement(tool.dir.firstElementChild, icons[options.rtl ? \"dir_ltr\" : \"dir_rtl\"]);\n            }\n            if (tool.dir_ltr) {\n                if (rtl) util.removeClass(tool.dir_ltr, \"active\");\n                else util.addClass(tool.dir_ltr, \"active\");\n            }\n            if (tool.dir_rtl) {\n                if (rtl) util.addClass(tool.dir_rtl, \"active\");\n                else util.removeClass(tool.dir_rtl, \"active\");\n            }\n        },\n        /**\r\n         * @description Sets the HTML string\r\n         * @param {String|undefined} html HTML string\r\n         */ setContents: function(html) {\n            this.removeRange();\n            const convertValue = html === null || html === undefined ? \"\" : this.convertContentsForEditor(html, null, null);\n            if (!this._variable.isCodeView) {\n                context.element.wysiwyg.innerHTML = convertValue;\n                this._resetComponents();\n                // history stack\n                this.history.push(false);\n            } else {\n                const value = this.convertHTMLForCodeView(convertValue, false);\n                this._setCodeView(value);\n            }\n        },\n        /**\r\n         * @description Sets the contents of the iframe's head tag and body tag when using the \"iframe\" or \"fullPage\" option.\r\n         * @param {Object} ctx { head: HTML string, body: HTML string}\r\n         */ setIframeContents: function(ctx) {\n            if (!options.iframe) return false;\n            if (ctx.head) this._wd.head.innerHTML = this.options.__allowedScriptTag ? ctx.head : ctx.head.replace(this.__scriptTagRegExp, \"\");\n            if (ctx.body) this._wd.body.innerHTML = this.convertContentsForEditor(ctx.body);\n            this._resetComponents();\n        },\n        /**\r\n         * @description Gets the current contents\r\n         * @param {Boolean} onlyContents Return only the contents of the body without headers when the \"fullPage\" option is true\r\n         * @returns {Object}\r\n         */ getContents: function(onlyContents) {\n            const contents = this.cleanHTML(context.element.wysiwyg.innerHTML, null, null);\n            const renderHTML = util.createElement(\"DIV\");\n            renderHTML.innerHTML = contents;\n            const editableEls = util.getListChildren(renderHTML, function(current) {\n                return current.hasAttribute(\"contenteditable\");\n            });\n            for(let i = 0, len = editableEls.length; i < len; i++){\n                editableEls[i].removeAttribute(\"contenteditable\");\n            }\n            if (options.fullPage && !onlyContents) {\n                const attrs = util.getAttributesToString(this._wd.body, [\n                    \"contenteditable\"\n                ]);\n                return \"<!DOCTYPE html><html>\" + this._wd.head.outerHTML + \"<body \" + attrs + \">\" + renderHTML.innerHTML + \"</body></html>\";\n            } else {\n                return renderHTML.innerHTML;\n            }\n        },\n        /**\r\n         * @description Gets the current contents with containing parent div(div.sun-editor-editable).\r\n         * <div class=\"sun-editor-editable\">{contents}</div>\r\n         * @param {Boolean} onlyContents Return only the contents of the body without headers when the \"fullPage\" option is true\r\n         * @returns {String}\r\n         */ getFullContents: function(onlyContents) {\n            return '<div class=\"sun-editor-editable' + (options.rtl ? \" se-rtl\" : \"\") + '\">' + this.getContents(onlyContents) + \"</div>\";\n        },\n        /**\r\n         * @description Returns HTML string according to tag type and configuration.\r\n         * Use only \"cleanHTML\"\r\n         * @param {Node} node Node\r\n         * @param {Boolean} requireFormat If true, text nodes that do not have a format node is wrapped with the format tag.\r\n         * @private\r\n         */ _makeLine: function(node, requireFormat) {\n            const defaultTag = options.defaultTag;\n            // element\n            if (node.nodeType === 1) {\n                if (this.__disallowedTagNameRegExp.test(node.nodeName)) return \"\";\n                if (/__se__tag/.test(node.className)) return node.outerHTML;\n                const ch = util.getListChildNodes(node, function(current) {\n                    return util.isSpanWithoutAttr(current) && !util.getParentElement(current, util.isNotCheckingNode);\n                }) || [];\n                for(let i = ch.length - 1; i >= 0; i--){\n                    ch[i].outerHTML = ch[i].innerHTML;\n                }\n                if (!requireFormat || util.isFormatElement(node) || util.isRangeFormatElement(node) || util.isComponent(node) || util.isFigures(node) || util.isAnchor(node) && util.isMedia(node.firstElementChild)) {\n                    return util.isSpanWithoutAttr(node) ? node.innerHTML : node.outerHTML;\n                } else {\n                    return \"<\" + defaultTag + \">\" + (util.isSpanWithoutAttr(node) ? node.innerHTML : node.outerHTML) + \"</\" + defaultTag + \">\";\n                }\n            }\n            // text\n            if (node.nodeType === 3) {\n                if (!requireFormat) return util._HTMLConvertor(node.textContent);\n                const textArray = node.textContent.split(/\\n/g);\n                let html = \"\";\n                for(let i = 0, tLen = textArray.length, text; i < tLen; i++){\n                    text = textArray[i].trim();\n                    if (text.length > 0) html += \"<\" + defaultTag + \">\" + util._HTMLConvertor(text) + \"</\" + defaultTag + \">\";\n                }\n                return html;\n            }\n            // comments\n            if (node.nodeType === 8 && this._allowHTMLComments) {\n                return \"<!--\" + node.textContent.trim() + \"-->\";\n            }\n            return \"\";\n        },\n        /**\r\n         * @description Removes attribute values such as style and converts tags that do not conform to the \"html5\" standard.\r\n         * @param {String} text \r\n         * @returns {String} HTML string\r\n         * @private\r\n         */ _tagConvertor: function(text) {\n            if (!this._disallowedTextTagsRegExp) return text;\n            const ec = options._textTagsMap;\n            return text.replace(this._disallowedTextTagsRegExp, function(m, t, n, p) {\n                return t + (typeof ec[n] === \"string\" ? ec[n] : n) + (p ? \" \" + p : \"\");\n            });\n        },\n        /**\r\n         * @description Delete disallowed tags\r\n         * @param {String} html HTML string\r\n         * @returns {String}\r\n         * @private\r\n         */ _deleteDisallowedTags: function(html) {\n            html = html.replace(this.__disallowedTagsRegExp, \"\").replace(/<[a-z0-9]+\\:[a-z0-9]+[^>^\\/]*>[^>]*<\\/[a-z0-9]+\\:[a-z0-9]+>/gi, \"\");\n            if (!/\\bfont\\b/i.test(this.options._editorTagsWhitelist)) {\n                html = html.replace(/(<\\/?)font(\\s?)/gi, \"$1span$2\");\n            }\n            return html.replace(this.editorTagsWhitelistRegExp, \"\").replace(this.editorTagsBlacklistRegExp, \"\");\n        },\n        _convertFontSize: function(to, size) {\n            const math = this._w.Math;\n            const value = size.match(/(\\d+(?:\\.\\d+)?)(.+)/);\n            const sizeNum = value ? value[1] * 1 : util.fontValueMap[size];\n            const from = value ? value[2] : \"rem\";\n            let pxSize = sizeNum;\n            if (/em/.test(from)) {\n                pxSize = math.round(sizeNum / 0.0625);\n            } else if (from === \"pt\") {\n                pxSize = math.round(sizeNum * 1.333);\n            } else if (from === \"%\") {\n                pxSize = sizeNum / 100;\n            }\n            switch(to){\n                case \"em\":\n                case \"rem\":\n                case \"%\":\n                    return (pxSize * 0.0625).toFixed(2) + to;\n                case \"pt\":\n                    return math.floor(pxSize / 1.333) + to;\n                default:\n                    return pxSize + to;\n            }\n        },\n        _cleanStyle: function(m, v, name) {\n            let sv = (m.match(/style\\s*=\\s*(?:\"|')[^\"']*(?:\"|')/) || [])[0];\n            if (/span/i.test(name) && !sv && (m.match(/<[^\\s]+\\s(.+)/) || [])[1]) {\n                const size = (m.match(/\\ssize=\"([^\"]+)\"/i) || [])[1];\n                const face = (m.match(/\\sface=\"([^\"]+)\"/i) || [])[1];\n                const color = (m.match(/\\scolor=\"([^\"]+)\"/i) || [])[1];\n                if (size || face || color) {\n                    sv = 'style=\"' + (size ? \"font-size:\" + this.util.getNumber(size / 3.333, 1) + \"rem;\" : \"\") + (face ? \"font-family:\" + face + \";\" : \"\") + (color ? \"color:\" + color + \";\" : \"\") + '\"';\n                }\n            }\n            if (sv) {\n                if (!v) v = [];\n                const style = sv.replace(/&quot;/g, \"\").match(this._cleanStyleRegExp[name]);\n                if (style) {\n                    const allowedStyle = [];\n                    for(let i = 0, len = style.length, r; i < len; i++){\n                        r = style[i].match(/([a-zA-Z0-9-]+)(:)([^\"']+)/);\n                        if (r && !/inherit|initial|revert|unset/i.test(r[3])) {\n                            const k = util.kebabToCamelCase(r[1].trim());\n                            const v = this.wwComputedStyle[k] ? this.wwComputedStyle[k].replace(/\"/g, \"\") : \"\";\n                            const c = r[3].trim();\n                            switch(k){\n                                case \"fontFamily\":\n                                    if (!options.plugins.font || options.font.indexOf(c) === -1) continue;\n                                    break;\n                                case \"fontSize\":\n                                    if (!options.plugins.fontSize) continue;\n                                    if (!this._cleanStyleRegExp.fontSizeUnit.test(r[0])) {\n                                        r[0] = r[0].replace((r[0].match(/:\\s*([^;]+)/) || [])[1], this._convertFontSize.bind(this, options.fontSizeUnit));\n                                    }\n                                    break;\n                                case \"color\":\n                                    if (!options.plugins.fontColor || /rgba\\(([0-9]+\\s*,\\s*){3}0\\)|windowtext/i.test(c)) continue;\n                                    break;\n                                case \"backgroundColor\":\n                                    if (!options.plugins.hiliteColor || /rgba\\(([0-9]+\\s*,\\s*){3}0\\)|windowtext/i.test(c)) continue;\n                                    break;\n                            }\n                            if (v !== c) {\n                                allowedStyle.push(r[0]);\n                            }\n                        }\n                    }\n                    if (allowedStyle.length > 0) v.push('style=\"' + allowedStyle.join(\";\") + '\"');\n                }\n            }\n            return v;\n        },\n        /**\r\n         * @description Tag and tag attribute check RegExp function. (used by \"cleanHTML\" and \"convertContentsForEditor\")\r\n         * @param {Boolean} lowLevelCheck Row level check\r\n         * @param {String} m RegExp value\r\n         * @param {String} t RegExp value\r\n         * @returns {String}\r\n         * @private\r\n         */ _cleanTags: function(lowLevelCheck, m, t) {\n            if (/^<[a-z0-9]+\\:[a-z0-9]+/i.test(m)) return m;\n            let v = null;\n            const tagName = t.match(/(?!<)[a-zA-Z0-9\\-]+/)[0].toLowerCase();\n            // blacklist\n            const bAttr = this._attributesTagsBlacklist[tagName];\n            m = m.replace(/\\s(?:on[a-z]+)\\s*=\\s*(\")[^\"]*\\1/ig, \"\");\n            if (bAttr) m = m.replace(bAttr, \"\");\n            else m = m.replace(this._attributesBlacklistRegExp, \"\");\n            // whitelist\n            const wAttr = this._attributesTagsWhitelist[tagName];\n            if (wAttr) v = m.match(wAttr);\n            else v = m.match(lowLevelCheck ? this._attributesWhitelistRegExp : this._attributesWhitelistRegExp_all_data);\n            // attribute\n            if (lowLevelCheck || tagName === \"span\" || tagName === \"li\" || this._cleanStyleRegExp[tagName]) {\n                if (tagName === \"a\") {\n                    const sv = m.match(/(?:(?:id|name)\\s*=\\s*(?:\"|')[^\"']*(?:\"|'))/g);\n                    if (sv) {\n                        if (!v) v = [];\n                        v.push(sv[0]);\n                    }\n                } else if (!v || !/style=/i.test(v.toString())) {\n                    if (tagName === \"span\" || tagName === \"li\") {\n                        v = this._cleanStyle(m, v, \"span\");\n                    }\n                    if (this._cleanStyleRegExp[tagName]) {\n                        v = this._cleanStyle(m, v, tagName);\n                    } else if (/^(P|DIV|H[1-6]|PRE)$/i.test(tagName)) {\n                        v = this._cleanStyle(m, v, \"format\");\n                    }\n                }\n            } else {\n                const sv = m.match(/style\\s*=\\s*(?:\"|')[^\"']*(?:\"|')/);\n                if (sv && !v) v = [\n                    sv[0]\n                ];\n                else if (sv && !v.some(function(v) {\n                    return /^style/.test(v.trim());\n                })) v.push(sv[0]);\n            }\n            // figure\n            if (util.isFigures(tagName)) {\n                const sv = m.match(/style\\s*=\\s*(?:\"|')[^\"']*(?:\"|')/);\n                if (!v) v = [];\n                if (sv) v.push(sv[0]);\n            }\n            if (v) {\n                for(let i = 0, len = v.length, a; i < len; i++){\n                    // if (lowLevelCheck && /^class=\"(?!(__se__|se-|katex))/.test(v[i].trim())) continue;\n                    a = /^(?:href|src)\\s*=\\s*('|\"|\\s)*javascript\\s*\\:/i.test(v[i].trim()) ? \"\" : v[i];\n                    t += (/^\\s/.test(a) ? \"\" : \" \") + a;\n                }\n            }\n            return t;\n        },\n        /**\r\n         * @description Determines if formatting is required and returns a domTree\r\n         * @param {Element} dom documentFragment\r\n         * @returns {Element}\r\n         * @private\r\n         */ _editFormat: function(dom) {\n            let value = \"\", f;\n            const tempTree = dom.childNodes;\n            for(let i = 0, len = tempTree.length, n; i < len; i++){\n                n = tempTree[i];\n                if (n.nodeType === 8) {\n                    value += \"<!-- \" + n.textContent + \" -->\";\n                } else if (!util.isFormatElement(n) && !util.isRangeFormatElement(n) && !util.isComponent(n) && !/meta/i.test(n.nodeName)) {\n                    if (!f) f = util.createElement(options.defaultTag);\n                    f.appendChild(n);\n                    i--;\n                    len--;\n                } else {\n                    if (f) {\n                        value += f.outerHTML;\n                        f = null;\n                    }\n                    value += n.outerHTML;\n                }\n            }\n            if (f) value += f.outerHTML;\n            return _d.createRange().createContextualFragment(value);\n        },\n        _convertListCell: function(domTree) {\n            let html = \"\";\n            for(let i = 0, len = domTree.length, node; i < len; i++){\n                node = domTree[i];\n                if (node.nodeType === 1) {\n                    if (util.isList(node)) {\n                        html += node.innerHTML;\n                    } else if (util.isListCell(node)) {\n                        html += node.outerHTML;\n                    } else if (util.isFormatElement(node)) {\n                        html += \"<li>\" + (node.innerHTML.trim() || \"<br>\") + \"</li>\";\n                    } else if (util.isRangeFormatElement(node) && !util.isTable(node)) {\n                        html += this._convertListCell(node);\n                    } else {\n                        html += \"<li>\" + node.outerHTML + \"</li>\";\n                    }\n                } else {\n                    html += \"<li>\" + (node.textContent || \"<br>\") + \"</li>\";\n                }\n            }\n            return html;\n        },\n        _isFormatData: function(domTree) {\n            let requireFormat = false;\n            for(let i = 0, len = domTree.length, t; i < len; i++){\n                t = domTree[i];\n                if (t.nodeType === 1 && !util.isTextStyleElement(t) && !util.isBreak(t) && !this.__disallowedTagNameRegExp.test(t.nodeName)) {\n                    requireFormat = true;\n                    break;\n                }\n            }\n            return requireFormat;\n        },\n        /**\r\n         * @description Gets the clean HTML code for editor\r\n         * @param {String} html HTML string\r\n         * @param {String|RegExp|null} whitelist Regular expression of allowed tags.\r\n         * RegExp object is create by util.createTagsWhitelist method. (core.pasteTagsWhitelistRegExp)\r\n         * @param {String|RegExp|null} blacklist Regular expression of disallowed tags.\r\n         * RegExp object is create by util.createTagsBlacklist method. (core.pasteTagsBlacklistRegExp)\r\n         * @returns {String}\r\n         */ cleanHTML: function(html, whitelist, blacklist) {\n            if (!options.strictMode) return html;\n            html = this._deleteDisallowedTags(this._parser.parseFromString(util.htmlCompress(html), \"text/html\").body.innerHTML).replace(/(<[a-zA-Z0-9\\-]+)[^>]*(?=>)/g, this._cleanTags.bind(this, true)).replace(/<br\\/?>$/i, \"\");\n            const dom = _d.createRange().createContextualFragment(html);\n            try {\n                util._consistencyCheckOfHTML(dom, this._htmlCheckWhitelistRegExp, this._htmlCheckBlacklistRegExp, this._classNameFilter);\n            } catch (error) {\n                console.warn(\"[SUNEDITOR.cleanHTML.consistencyCheck.fail] \" + error);\n            }\n            if (this.managedTagsInfo && this.managedTagsInfo.query) {\n                const textCompList = dom.querySelectorAll(this.managedTagsInfo.query);\n                for(let i = 0, len = textCompList.length, initMethod, classList; i < len; i++){\n                    classList = [].slice.call(textCompList[i].classList);\n                    for(let c = 0, cLen = classList.length; c < cLen; c++){\n                        initMethod = this.managedTagsInfo.map[classList[c]];\n                        if (initMethod) {\n                            initMethod(textCompList[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n            let domTree = dom.childNodes;\n            let cleanHTML = \"\";\n            const requireFormat = this._isFormatData(domTree);\n            if (requireFormat) {\n                domTree = this._editFormat(dom).childNodes;\n            }\n            for(let i = 0, len = domTree.length, t; i < len; i++){\n                t = domTree[i];\n                if (this.__allowedScriptRegExp.test(t.nodeName)) {\n                    cleanHTML += t.outerHTML;\n                    continue;\n                }\n                cleanHTML += this._makeLine(t, requireFormat);\n            }\n            cleanHTML = util.htmlRemoveWhiteSpace(cleanHTML);\n            if (!cleanHTML) {\n                cleanHTML = html;\n            } else {\n                if (whitelist) cleanHTML = cleanHTML.replace(typeof whitelist === \"string\" ? util.createTagsWhitelist(whitelist) : whitelist, \"\");\n                if (blacklist) cleanHTML = cleanHTML.replace(typeof blacklist === \"string\" ? util.createTagsBlacklist(blacklist) : blacklist, \"\");\n            }\n            return this._tagConvertor(cleanHTML);\n        },\n        /**\r\n         * @description Converts contents into a format that can be placed in an editor\r\n         * @param {String} contents contents\r\n         * @returns {String}\r\n         */ convertContentsForEditor: function(contents) {\n            if (!options.strictMode) return contents;\n            contents = this._deleteDisallowedTags(this._parser.parseFromString(util.htmlCompress(contents), \"text/html\").body.innerHTML).replace(/(<[a-zA-Z0-9\\-]+)[^>]*(?=>)/g, this._cleanTags.bind(this, true));\n            const dom = _d.createRange().createContextualFragment(contents);\n            try {\n                util._consistencyCheckOfHTML(dom, this._htmlCheckWhitelistRegExp, this._htmlCheckBlacklistRegExp, this._classNameFilter);\n            } catch (error) {\n                console.warn(\"[SUNEDITOR.convertContentsForEditor.consistencyCheck.fail] \" + error);\n            }\n            if (this.managedTagsInfo && this.managedTagsInfo.query) {\n                const textCompList = dom.querySelectorAll(this.managedTagsInfo.query);\n                for(let i = 0, len = textCompList.length, initMethod, classList; i < len; i++){\n                    classList = [].slice.call(textCompList[i].classList);\n                    for(let c = 0, cLen = classList.length; c < cLen; c++){\n                        initMethod = this.managedTagsInfo.map[classList[c]];\n                        if (initMethod) {\n                            initMethod(textCompList[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n            const domTree = dom.childNodes;\n            let cleanHTML = \"\", p = null;\n            for(let i = 0, t; i < domTree.length; i++){\n                t = domTree[i];\n                if (this.__allowedScriptRegExp.test(t.nodeName)) {\n                    cleanHTML += t.outerHTML;\n                    continue;\n                }\n                if (!util.isFormatElement(t) && !util.isRangeFormatElement(t) && !util.isComponent(t) && !util.isFigures(t) && t.nodeType !== 8 && !/__se__tag/.test(t.className)) {\n                    if (!p) p = util.createElement(options.defaultTag);\n                    p.appendChild(t);\n                    i--;\n                    if (domTree[i + 1] && !util.isFormatElement(domTree[i + 1])) {\n                        continue;\n                    } else {\n                        t = p;\n                        p = null;\n                    }\n                }\n                if (p) {\n                    cleanHTML += this._makeLine(p, true);\n                    p = null;\n                }\n                cleanHTML += this._makeLine(t, true);\n            }\n            if (p) cleanHTML += this._makeLine(p, true);\n            if (cleanHTML.length === 0) return \"<\" + options.defaultTag + \"><br></\" + options.defaultTag + \">\";\n            cleanHTML = util.htmlRemoveWhiteSpace(cleanHTML);\n            return this._tagConvertor(cleanHTML);\n        },\n        /**\r\n         * @description Converts wysiwyg area element into a format that can be placed in an editor of code view mode\r\n         * @param {Element|String} html WYSIWYG element (context.element.wysiwyg) or HTML string.\r\n         * @param {Boolean} comp If true, does not line break and indentation of tags.\r\n         * @returns {String}\r\n         */ convertHTMLForCodeView: function(html, comp) {\n            let returnHTML = \"\";\n            const wRegExp = _w.RegExp;\n            const brReg = new wRegExp(\"^(BLOCKQUOTE|PRE|TABLE|THEAD|TBODY|TR|TH|TD|OL|UL|IMG|IFRAME|VIDEO|AUDIO|FIGURE|FIGCAPTION|HR|BR|CANVAS|SELECT)$\", \"i\");\n            const wDoc = typeof html === \"string\" ? _d.createRange().createContextualFragment(html) : html;\n            const isFormat = (function(current) {\n                return this.isFormatElement(current) || this.isComponent(current);\n            }).bind(util);\n            const brChar = comp ? \"\" : \"\\n\";\n            let indentSize = comp ? 0 : this._variable.codeIndent * 1;\n            indentSize = indentSize > 0 ? new _w.Array(indentSize + 1).join(\" \") : \"\";\n            (function recursionFunc(element, indent) {\n                const children = element.childNodes;\n                const elementRegTest = brReg.test(element.nodeName);\n                const elementIndent = elementRegTest ? indent : \"\";\n                for(let i = 0, len = children.length, node, br, lineBR, nodeRegTest, tag, tagIndent; i < len; i++){\n                    node = children[i];\n                    nodeRegTest = brReg.test(node.nodeName);\n                    br = nodeRegTest ? brChar : \"\";\n                    lineBR = isFormat(node) && !elementRegTest && !/^(TH|TD)$/i.test(element.nodeName) ? brChar : \"\";\n                    if (node.nodeType === 8) {\n                        returnHTML += \"\\n<!-- \" + node.textContent.trim() + \" -->\" + br;\n                        continue;\n                    }\n                    if (node.nodeType === 3) {\n                        if (!util.isList(node.parentElement)) returnHTML += util._HTMLConvertor(/^\\n+$/.test(node.data) ? \"\" : node.data);\n                        continue;\n                    }\n                    if (node.childNodes.length === 0) {\n                        returnHTML += (/^HR$/i.test(node.nodeName) ? brChar : \"\") + (/^PRE$/i.test(node.parentElement.nodeName) && /^BR$/i.test(node.nodeName) ? \"\" : elementIndent) + node.outerHTML + br;\n                        continue;\n                    }\n                    if (!node.outerHTML) {\n                        returnHTML += new _w.XMLSerializer().serializeToString(node);\n                    } else {\n                        tag = node.nodeName.toLowerCase();\n                        tagIndent = elementIndent || nodeRegTest ? indent : \"\";\n                        returnHTML += (lineBR || (elementRegTest ? \"\" : br)) + tagIndent + node.outerHTML.match(wRegExp(\"<\" + tag + \"[^>]*>\", \"i\"))[0] + br;\n                        recursionFunc(node, indent + indentSize, \"\");\n                        returnHTML += (/\\n$/.test(returnHTML) ? tagIndent : \"\") + \"</\" + tag + \">\" + (lineBR || br || elementRegTest ? brChar :  false || /^(TH|TD)$/i.test(node.nodeName) ? brChar : \"\");\n                    }\n                }\n            })(wDoc, \"\");\n            return returnHTML.trim() + brChar;\n        },\n        /**\r\n         * @description Add an event to document.\r\n         * When created as an Iframe, the same event is added to the document in the Iframe.\r\n         * @param {String} type Event type\r\n         * @param {Function} listener Event listener\r\n         * @param {Boolean} useCapture Use event capture\r\n         */ addDocEvent: function(type, listener, useCapture) {\n            _d.addEventListener(type, listener, useCapture);\n            if (options.iframe) {\n                this._wd.addEventListener(type, listener);\n            }\n        },\n        /**\r\n         * @description Remove events from document.\r\n         * When created as an Iframe, the event of the document inside the Iframe is also removed.\r\n         * @param {String} type Event type\r\n         * @param {Function} listener Event listener\r\n         */ removeDocEvent: function(type, listener) {\n            _d.removeEventListener(type, listener);\n            if (options.iframe) {\n                this._wd.removeEventListener(type, listener);\n            }\n        },\n        /**\r\n         * @description The current number of characters is counted and displayed.\r\n         * @param {String} inputText Text added.\r\n         * @returns {Boolean}\r\n         * @private\r\n         */ _charCount: function(inputText) {\n            const maxCharCount = options.maxCharCount;\n            const countType = options.charCounterType;\n            let nextCharCount = 0;\n            if (!!inputText) nextCharCount = this.getCharLength(inputText, countType);\n            this._setCharCount();\n            if (maxCharCount > 0) {\n                let over = false;\n                const count = functions.getCharCount(countType);\n                if (count > maxCharCount) {\n                    over = true;\n                    if (nextCharCount > 0) {\n                        this._editorRange();\n                        const range = this.getRange();\n                        const endOff = range.endOffset - 1;\n                        const text = this.getSelectionNode().textContent;\n                        const slicePosition = range.endOffset - (count - maxCharCount);\n                        this.getSelectionNode().textContent = text.slice(0, slicePosition < 0 ? 0 : slicePosition) + text.slice(range.endOffset, text.length);\n                        this.setRange(range.endContainer, endOff, range.endContainer, endOff);\n                    }\n                } else if (count + nextCharCount > maxCharCount) {\n                    over = true;\n                }\n                if (over) {\n                    this._callCounterBlink();\n                    if (nextCharCount > 0) return false;\n                }\n            }\n            return true;\n        },\n        /**\r\n         * @description When \"element\" is added, if it is greater than \"options.maxCharCount\", false is returned.\r\n         * @param {Node|String} element Element node or String.\r\n         * @param {String|null} charCounterType charCounterType. If it is null, the options.charCounterType\r\n         * @returns {Boolean}\r\n         */ checkCharCount: function(element, charCounterType) {\n            if (options.maxCharCount) {\n                const countType = charCounterType || options.charCounterType;\n                const length = this.getCharLength(typeof element === \"string\" ? element : this._charTypeHTML && element.nodeType === 1 ? element.outerHTML : element.textContent, countType);\n                if (length > 0 && length + functions.getCharCount(countType) > options.maxCharCount) {\n                    this._callCounterBlink();\n                    return false;\n                }\n            }\n            return true;\n        },\n        /**\r\n         * @description Get the length of the content.\r\n         * Depending on the option, the length of the character is taken. (charCounterType)\r\n         * @param {String} content Content to count\r\n         * @param {String} charCounterType options.charCounterType\r\n         * @returns {Number}\r\n         */ getCharLength: function(content, charCounterType) {\n            return /byte/.test(charCounterType) ? util.getByteLength(content) : content.length;\n        },\n        /**\r\n         * @description Reset buttons of the responsive toolbar.\r\n         */ resetResponsiveToolbar: function() {\n            core.controllersOff();\n            const responsiveSize = event._responsiveButtonSize;\n            if (responsiveSize) {\n                let w = 0;\n                if ((core._isBalloon || core._isInline) && options.toolbarWidth === \"auto\") {\n                    w = context.element.topArea.offsetWidth;\n                } else {\n                    w = context.element.toolbar.offsetWidth;\n                }\n                let responsiveWidth = \"default\";\n                for(let i = 1, len = responsiveSize.length; i < len; i++){\n                    if (w < responsiveSize[i]) {\n                        responsiveWidth = responsiveSize[i] + \"\";\n                        break;\n                    }\n                }\n                if (event._responsiveCurrentSize !== responsiveWidth) {\n                    event._responsiveCurrentSize = responsiveWidth;\n                    functions.setToolbarButtons(event._responsiveButtons[responsiveWidth]);\n                }\n            }\n        },\n        /**\r\n         * @description Set the char count to charCounter element textContent.\r\n         * @private\r\n         */ _setCharCount: function() {\n            if (context.element.charCounter) {\n                _w.setTimeout((function(functions, options) {\n                    if (this.textContent && functions) {\n                        this.textContent = functions.getCharCount(options.charCounterType);\n                    }\n                }).bind(context.element.charCounter, functions, options), 0);\n            }\n        },\n        /**\r\n         * @description The character counter blinks.\r\n         * @private\r\n         */ _callCounterBlink: function() {\n            const charWrapper = context.element.charWrapper;\n            if (charWrapper && !util.hasClass(charWrapper, \"se-blink\")) {\n                util.addClass(charWrapper, \"se-blink\");\n                _w.setTimeout(function() {\n                    util.removeClass(charWrapper, \"se-blink\");\n                }, 600);\n            }\n        },\n        /**\r\n         * @description Check the components such as image and video and modify them according to the format.\r\n         * @private\r\n         */ _checkComponents: function() {\n            for(let i = 0, len = this._fileInfoPluginsCheck.length; i < len; i++){\n                this._fileInfoPluginsCheck[i]();\n            }\n        },\n        /**\r\n         * @description Initialize the information of the components.\r\n         * @private\r\n         */ _resetComponents: function() {\n            for(let i = 0, len = this._fileInfoPluginsReset.length; i < len; i++){\n                this._fileInfoPluginsReset[i]();\n            }\n        },\n        /**\r\n         * @description Set method in the code view area\r\n         * @param {String} value HTML string\r\n         * @private\r\n         */ _setCodeView: function(value) {\n            if (options.codeMirrorEditor) {\n                options.codeMirrorEditor.getDoc().setValue(value);\n            } else {\n                context.element.code.value = value;\n            }\n        },\n        /**\r\n         * @description Get method in the code view area\r\n         * @private\r\n         */ _getCodeView: function() {\n            return options.codeMirrorEditor ? options.codeMirrorEditor.getDoc().getValue() : context.element.code.value;\n        },\n        /**\r\n         * @description remove class, display text.\r\n         * @param {Array|null} ignoredList Igonred button list\r\n         */ _setKeyEffect: function(ignoredList) {\n            const commandMap = this.commandMap;\n            const activePlugins = this.activePlugins;\n            for(let key in commandMap){\n                if (ignoredList.indexOf(key) > -1 || !util.hasOwn(commandMap, key)) continue;\n                if (activePlugins.indexOf(key) > -1) {\n                    plugins[key].active.call(this, null);\n                } else if (commandMap.OUTDENT && /^OUTDENT$/i.test(key)) {\n                    if (!util.isImportantDisabled(commandMap.OUTDENT)) commandMap.OUTDENT.setAttribute(\"disabled\", true);\n                } else if (commandMap.INDENT && /^INDENT$/i.test(key)) {\n                    if (!util.isImportantDisabled(commandMap.INDENT)) commandMap.INDENT.removeAttribute(\"disabled\");\n                } else {\n                    util.removeClass(commandMap[key], \"active\");\n                }\n            }\n        },\n        /**\r\n         * @description Initializ core variable\r\n         * @param {Boolean} reload Is relooad?\r\n         * @param {String} _initHTML initial html string\r\n         * @private\r\n         */ _init: function(reload, _initHTML) {\n            const wRegExp = _w.RegExp;\n            this._ww = options.iframe ? context.element.wysiwygFrame.contentWindow : _w;\n            this._wd = _d;\n            this._charTypeHTML = options.charCounterType === \"byte-html\";\n            this.wwComputedStyle = _w.getComputedStyle(context.element.wysiwyg);\n            this._editorHeight = context.element.wysiwygFrame.offsetHeight;\n            this._editorHeightPadding = util.getNumber(this.wwComputedStyle.getPropertyValue(\"padding-top\")) + util.getNumber(this.wwComputedStyle.getPropertyValue(\"padding-bottom\"));\n            this._classNameFilter = (function(v) {\n                return this.test(v) ? v : \"\";\n            }).bind(options.allowedClassNames);\n            const sPrefix = options.__allowedScriptTag ? \"\" : \"script|\";\n            this.__scriptTagRegExp = new wRegExp(\"<(script)[^>]*>([\\\\s\\\\S]*?)<\\\\/\\\\1>|<script[^>]*\\\\/?>\", \"gi\");\n            this.__disallowedTagsRegExp = new wRegExp(\"<(\" + sPrefix + \"style)[^>]*>([\\\\s\\\\S]*?)<\\\\/\\\\1>|<(\" + sPrefix + \"style)[^>]*\\\\/?>\", \"gi\");\n            this.__disallowedTagNameRegExp = new wRegExp(\"^(\" + sPrefix + \"meta|link|style|[a-z]+:[a-z]+)$\", \"i\");\n            this.__allowedScriptRegExp = new wRegExp(\"^\" + (options.__allowedScriptTag ? \"script\" : \"\") + \"$\", \"i\");\n            if (!options.iframe && typeof _w.ShadowRoot === \"function\") {\n                let child = context.element.wysiwygFrame;\n                while(child){\n                    if (child.shadowRoot) {\n                        this._shadowRoot = child.shadowRoot;\n                        break;\n                    } else if (child instanceof _w.ShadowRoot) {\n                        this._shadowRoot = child;\n                        break;\n                    }\n                    child = child.parentNode;\n                }\n                if (this._shadowRoot) this._shadowRootControllerEventTarget = [];\n            }\n            // set disallow text nodes\n            const disallowTextTags = _w.Object.keys(options._textTagsMap);\n            const allowTextTags = !options.addTagsWhitelist ? [] : options.addTagsWhitelist.split(\"|\").filter(function(v) {\n                return /b|i|ins|s|strike/i.test(v);\n            });\n            for(let i = 0; i < allowTextTags.length; i++){\n                disallowTextTags.splice(disallowTextTags.indexOf(allowTextTags[i].toLowerCase()), 1);\n            }\n            this._disallowedTextTagsRegExp = disallowTextTags.length === 0 ? null : new wRegExp(\"(<\\\\/?)(\" + disallowTextTags.join(\"|\") + \")\\\\b\\\\s*([^>^<]+)?\\\\s*(?=>)\", \"gi\");\n            // set whitelist\n            const getRegList = function(str, str2) {\n                return !str ? \"^\" : str === \"*\" ? \"[a-z-]+\" : !str2 ? str : str + \"|\" + str2;\n            };\n            // tags\n            const videoAttr = \"|controls|autoplay|loop|muted|poster|preload|playsinline\";\n            const iframeAttr = \"|allowfullscreen|sandbox|loading|allow|referrerpolicy|frameborder|scrolling\";\n            const defaultAttr = \"contenteditable|colspan|rowspan|target|href|download|rel|src|alt|class|type|origin-size\" + videoAttr + iframeAttr;\n            const dataAttr = \"data-format|data-size|data-file-size|data-file-name|data-origin|data-align|data-image-link|data-rotate|data-proportion|data-percentage|data-exp|data-font-size\";\n            this._allowHTMLComments = options._editorTagsWhitelist.indexOf(\"//\") > -1 || options._editorTagsWhitelist === \"*\";\n            // html check\n            this._htmlCheckWhitelistRegExp = new wRegExp(\"^(\" + getRegList(options._editorTagsWhitelist.replace(\"|//\", \"\"), \"\") + \")$\", \"i\");\n            this._htmlCheckBlacklistRegExp = new wRegExp(\"^(\" + (options.tagsBlacklist || \"^\") + \")$\", \"i\");\n            // tags\n            this.editorTagsWhitelistRegExp = util.createTagsWhitelist(getRegList(options._editorTagsWhitelist.replace(\"|//\", \"|<!--|-->\"), \"\"));\n            this.editorTagsBlacklistRegExp = util.createTagsBlacklist(options.tagsBlacklist.replace(\"|//\", \"|<!--|-->\"));\n            // paste tags\n            this.pasteTagsWhitelistRegExp = util.createTagsWhitelist(getRegList(options.pasteTagsWhitelist, \"\"));\n            this.pasteTagsBlacklistRegExp = util.createTagsBlacklist(options.pasteTagsBlacklist);\n            // attributes\n            const regEndStr = '\\\\s*=\\\\s*(\")[^\"]*\\\\1';\n            const _wAttr = options.attributesWhitelist;\n            let tagsAttr = {};\n            let allAttr = \"\";\n            if (!!_wAttr) {\n                for(let k in _wAttr){\n                    if (!util.hasOwn(_wAttr, k) || /^on[a-z]+$/i.test(_wAttr[k])) continue;\n                    if (k === \"all\") {\n                        allAttr = getRegList(_wAttr[k], defaultAttr);\n                    } else {\n                        tagsAttr[k] = new wRegExp(\"\\\\s(?:\" + getRegList(_wAttr[k], \"\") + \")\" + regEndStr, \"ig\");\n                    }\n                }\n            }\n            this._attributesWhitelistRegExp = new wRegExp(\"\\\\s(?:\" + (allAttr || defaultAttr + \"|\" + dataAttr) + \")\" + regEndStr, \"ig\");\n            this._attributesWhitelistRegExp_all_data = new wRegExp(\"\\\\s(?:\" + ((allAttr || defaultAttr) + \"|data-[a-z0-9\\\\-]+\") + \")\" + regEndStr, \"ig\");\n            this._attributesTagsWhitelist = tagsAttr;\n            // blacklist\n            const _bAttr = options.attributesBlacklist;\n            tagsAttr = {};\n            allAttr = \"\";\n            if (!!_bAttr) {\n                for(let k in _bAttr){\n                    if (!util.hasOwn(_bAttr, k)) continue;\n                    if (k === \"all\") {\n                        allAttr = getRegList(_bAttr[k], \"\");\n                    } else {\n                        tagsAttr[k] = new wRegExp(\"\\\\s(?:\" + getRegList(_bAttr[k], \"\") + \")\" + regEndStr, \"ig\");\n                    }\n                }\n            }\n            this._attributesBlacklistRegExp = new wRegExp(\"\\\\s(?:\" + (allAttr || \"^\") + \")\" + regEndStr, \"ig\");\n            this._attributesTagsBlacklist = tagsAttr;\n            // set modes\n            this._isInline = /inline/i.test(options.mode);\n            this._isBalloon = /balloon|balloon-always/i.test(options.mode);\n            this._isBalloonAlways = /balloon-always/i.test(options.mode);\n            // caching buttons\n            this._cachingButtons();\n            // file components\n            this._fileInfoPluginsCheck = [];\n            this._fileInfoPluginsReset = [];\n            // text components\n            this.managedTagsInfo = {\n                query: \"\",\n                map: {}\n            };\n            const managedClass = [];\n            // Command and file plugins registration\n            this.activePlugins = [];\n            this._fileManager.tags = [];\n            this._fileManager.pluginMap = {};\n            let filePluginRegExp = [];\n            let plugin, button;\n            for(let key in plugins){\n                if (!util.hasOwn(plugins, key)) continue;\n                plugin = plugins[key];\n                button = pluginCallButtons[key];\n                if ((plugin.active || plugin.action) && button) {\n                    this.callPlugin(key, null, button);\n                }\n                if (typeof plugin.checkFileInfo === \"function\" && typeof plugin.resetFileInfo === \"function\") {\n                    this.callPlugin(key, null, button);\n                    this._fileInfoPluginsCheck.push(plugin.checkFileInfo.bind(this));\n                    this._fileInfoPluginsReset.push(plugin.resetFileInfo.bind(this));\n                }\n                if (_w.Array.isArray(plugin.fileTags)) {\n                    const fileTags = plugin.fileTags;\n                    this.callPlugin(key, null, button);\n                    this._fileManager.tags = this._fileManager.tags.concat(fileTags);\n                    filePluginRegExp.push(key);\n                    for(let tag = 0, tLen = fileTags.length; tag < tLen; tag++){\n                        this._fileManager.pluginMap[fileTags[tag].toLowerCase()] = key;\n                    }\n                }\n                if (plugin.managedTags) {\n                    const info = plugin.managedTags();\n                    managedClass.push(\".\" + info.className);\n                    this.managedTagsInfo.map[info.className] = info.method.bind(this);\n                }\n            }\n            this.managedTagsInfo.query = managedClass.toString();\n            this._fileManager.queryString = this._fileManager.tags.join(\",\");\n            this._fileManager.regExp = new wRegExp(\"^(\" + (this._fileManager.tags.join(\"|\") || \"^\") + \")$\", \"i\");\n            this._fileManager.pluginRegExp = new wRegExp(\"^(\" + (filePluginRegExp.length === 0 ? \"^\" : filePluginRegExp.join(\"|\")) + \")$\", \"i\");\n            // cache editor's element\n            this._variable._originCssText = context.element.topArea.style.cssText;\n            this._placeholder = context.element.placeholder;\n            this._lineBreaker = context.element.lineBreaker;\n            this._lineBreakerButton = this._lineBreaker.querySelector(\"button\");\n            // Excute history function\n            this.history = (0,_history__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, this._onChange_historyStack.bind(this));\n            // register notice module\n            this.addModule([\n                _plugins_modules_notice__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n            ]);\n            // Init, validate\n            if (options.iframe) {\n                this._wd = context.element.wysiwygFrame.contentDocument;\n                context.element.wysiwyg = this._wd.body;\n                if (options._editorStyles.editor) context.element.wysiwyg.style.cssText = options._editorStyles.editor;\n                if (options.height === \"auto\") this._iframeAuto = this._wd.body;\n            }\n            this._initWysiwygArea(reload, _initHTML);\n        },\n        /**\r\n         * @description Caching basic buttons to use\r\n         * @private\r\n         */ _cachingButtons: function() {\n            this.codeViewDisabledButtons = context.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~=\"se-code-view-enabled\"]):not([data-display=\"MORE\"])');\n            this.resizingDisabledButtons = context.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~=\"se-resizing-enabled\"]):not([data-display=\"MORE\"])');\n            const tool = context.tool;\n            const commandMap = this.commandMap;\n            commandMap.INDENT = tool.indent;\n            commandMap.OUTDENT = tool.outdent;\n            commandMap[options.textTags.bold.toUpperCase()] = tool.bold;\n            commandMap[options.textTags.underline.toUpperCase()] = tool.underline;\n            commandMap[options.textTags.italic.toUpperCase()] = tool.italic;\n            commandMap[options.textTags.strike.toUpperCase()] = tool.strike;\n            commandMap[options.textTags.sub.toUpperCase()] = tool.subscript;\n            commandMap[options.textTags.sup.toUpperCase()] = tool.superscript;\n            this._styleCommandMap = {\n                fullScreen: tool.fullScreen,\n                showBlocks: tool.showBlocks,\n                codeView: tool.codeView\n            };\n            this._saveButtonStates();\n        },\n        /**\r\n         * @description Initializ wysiwyg area (Only called from core._init)\r\n         * @param {Boolean} reload Is relooad?\r\n         * @param {String} _initHTML initial html string\r\n         * @private\r\n         */ _initWysiwygArea: function(reload, _initHTML) {\n            context.element.wysiwyg.innerHTML = reload ? _initHTML : this.convertContentsForEditor((typeof _initHTML === \"string\" ? _initHTML : /^TEXTAREA$/i.test(context.element.originElement.nodeName) ? context.element.originElement.value : context.element.originElement.innerHTML) || \"\");\n        },\n        /**\r\n         * @description Called when there are changes to tags in the wysiwyg region.\r\n         * @private\r\n         */ _resourcesStateChange: function() {\n            this._iframeAutoHeight();\n            this._checkPlaceholder();\n        },\n        /**\r\n         * @description Called when after execute \"history.push\"\r\n         * @private\r\n         */ _onChange_historyStack: function() {\n            if (this.hasFocus) event._applyTagEffects();\n            this._variable.isChanged = true;\n            if (context.tool.save) context.tool.save.removeAttribute(\"disabled\");\n            // user event\n            if (functions.onChange) functions.onChange(this.getContents(true), this);\n            if (context.element.toolbar.style.display === \"block\") event._showToolbarBalloon();\n        },\n        /**\r\n         * @description Modify the height value of the iframe when the height of the iframe is automatic.\r\n         * @private\r\n         */ _iframeAutoHeight: function() {\n            if (this._iframeAuto) {\n                _w.setTimeout(function() {\n                    const h = core._iframeAuto.offsetHeight;\n                    context.element.wysiwygFrame.style.height = h + \"px\";\n                    if (!util.isResizeObserverSupported) core.__callResizeFunction(h, null);\n                });\n            } else if (!util.isResizeObserverSupported) {\n                core.__callResizeFunction(context.element.wysiwygFrame.offsetHeight, null);\n            }\n        },\n        __callResizeFunction: function(h, resizeObserverEntry) {\n            h = h === -1 ? resizeObserverEntry.borderBoxSize && resizeObserverEntry.borderBoxSize[0] ? resizeObserverEntry.borderBoxSize[0].blockSize : resizeObserverEntry.contentRect.height + this._editorHeightPadding : h;\n            if (this._editorHeight !== h) {\n                if (typeof functions.onResizeEditor === \"function\") functions.onResizeEditor(h, this._editorHeight, core, resizeObserverEntry);\n                this._editorHeight = h;\n            }\n        },\n        /**\r\n         * @description Set display property when there is placeholder.\r\n         * @private\r\n         */ _checkPlaceholder: function() {\n            if (this._placeholder) {\n                if (this._variable.isCodeView) {\n                    this._placeholder.style.display = \"none\";\n                    return;\n                }\n                const wysiwyg = context.element.wysiwyg;\n                if (!util.onlyZeroWidthSpace(wysiwyg.textContent) || wysiwyg.querySelector(util._allowedEmptyNodeList) || (wysiwyg.innerText.match(/\\n/g) || \"\").length > 1) {\n                    this._placeholder.style.display = \"none\";\n                } else {\n                    this._placeholder.style.display = \"block\";\n                }\n            }\n        },\n        /**\r\n         * @description If there is no default format, add a format and move \"selection\".\r\n         * @param {String|null} formatName Format tag name (default: 'P')\r\n         * @returns {undefined|null}\r\n         * @private\r\n         */ _setDefaultFormat: function(formatName) {\n            if (this._fileManager.pluginRegExp.test(this.currentControllerName)) return;\n            const range = this.getRange();\n            const commonCon = range.commonAncestorContainer;\n            const startCon = range.startContainer;\n            const rangeEl = util.getRangeFormatElement(commonCon, null);\n            let focusNode, offset, format;\n            const fileComponent = util.getParentElement(commonCon, util.isComponent);\n            if (fileComponent && !util.isTable(fileComponent)) {\n                return;\n            } else if (commonCon.nodeType === 1 && commonCon.getAttribute(\"data-se-embed\") === \"true\") {\n                let el = commonCon.nextElementSibling;\n                if (!util.isFormatElement(el)) el = this.appendFormatTag(commonCon, options.defaultTag);\n                this.setRange(el.firstChild, 0, el.firstChild, 0);\n                return;\n            }\n            if ((util.isRangeFormatElement(startCon) || util.isWysiwygDiv(startCon)) && (util.isComponent(startCon.children[range.startOffset]) || util.isComponent(startCon.children[range.startOffset - 1]))) return;\n            if (util.getParentElement(commonCon, util.isNotCheckingNode)) return null;\n            if (rangeEl) {\n                format = util.createElement(formatName || options.defaultTag);\n                format.innerHTML = rangeEl.innerHTML;\n                if (format.childNodes.length === 0) format.innerHTML = util.zeroWidthSpace;\n                rangeEl.innerHTML = format.outerHTML;\n                format = rangeEl.firstChild;\n                focusNode = util.getEdgeChildNodes(format, null).sc;\n                if (!focusNode) {\n                    focusNode = util.createTextNode(util.zeroWidthSpace);\n                    format.insertBefore(focusNode, format.firstChild);\n                }\n                offset = focusNode.textContent.length;\n                this.setRange(focusNode, offset, focusNode, offset);\n                return;\n            }\n            if (util.isRangeFormatElement(commonCon) && commonCon.childNodes.length <= 1) {\n                let br = null;\n                if (commonCon.childNodes.length === 1 && util.isBreak(commonCon.firstChild)) {\n                    br = commonCon.firstChild;\n                } else {\n                    br = util.createTextNode(util.zeroWidthSpace);\n                    commonCon.appendChild(br);\n                }\n                this.setRange(br, 1, br, 1);\n                return;\n            }\n            try {\n                if (commonCon.nodeType === 3) {\n                    format = util.createElement(formatName || options.defaultTag);\n                    commonCon.parentNode.insertBefore(format, commonCon);\n                    format.appendChild(commonCon);\n                }\n                if (util.isBreak(format.nextSibling)) util.removeItem(format.nextSibling);\n                if (util.isBreak(format.previousSibling)) util.removeItem(format.previousSibling);\n                if (util.isBreak(focusNode)) {\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    focusNode.parentNode.insertBefore(zeroWidth, focusNode);\n                    focusNode = zeroWidth;\n                }\n            } catch (e) {\n                this.execCommand(\"formatBlock\", false, formatName || options.defaultTag);\n                this.removeRange();\n                this._editorRange();\n            }\n            if (format) {\n                if (util.isBreak(format.nextSibling)) util.removeItem(format.nextSibling);\n                if (util.isBreak(format.previousSibling)) util.removeItem(format.previousSibling);\n                if (util.isBreak(focusNode)) {\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    focusNode.parentNode.insertBefore(zeroWidth, focusNode);\n                    focusNode = zeroWidth;\n                }\n            }\n            this.effectNode = null;\n            this.nativeFocus();\n        },\n        /**\r\n         * @description Initialization after \"setOptions\"\r\n         * @param {Object} el context.element\r\n         * @param {String} _initHTML Initial html string\r\n         * @private\r\n         */ _setOptionsInit: function(el, _initHTML) {\n            this.context = context = (0,_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(el.originElement, this._getConstructed(el), options);\n            this._componentsInfoReset = true;\n            this._editorInit(true, _initHTML);\n        },\n        /**\r\n         * @description Initializ editor\r\n         * @param {Boolean} reload Is relooad?\r\n         * @param {String} _initHTML initial html string\r\n         * @private\r\n         */ _editorInit: function(reload, _initHTML) {\n            // initialize core and add event listeners\n            this._init(reload, _initHTML);\n            event._addEvent();\n            this._setCharCount();\n            event._offStickyToolbar();\n            event.onResize_window();\n            // toolbar visibility\n            context.element.toolbar.style.visibility = \"\";\n            // wisywig attributes\n            const attr = options.frameAttrbutes;\n            for(let k in attr){\n                context.element.wysiwyg.setAttribute(k, attr[k]);\n            }\n            this._checkComponents();\n            this._componentsInfoInit = false;\n            this._componentsInfoReset = false;\n            this.history.reset(true);\n            _w.setTimeout(function() {\n                if (typeof core._resourcesStateChange !== \"function\") return;\n                // observer\n                if (event._resizeObserver) event._resizeObserver.observe(context.element.wysiwygFrame);\n                if (event._toolbarObserver) event._toolbarObserver.observe(context.element._toolbarShadow);\n                // resource state\n                core._resourcesStateChange();\n                // user event\n                if (typeof functions.onload === \"function\") functions.onload(core, reload);\n            });\n        },\n        /**\r\n         * @description Create and return an object to cache the new context.\r\n         * @param {Element} contextEl context.element\r\n         * @returns {Object}\r\n         * @private\r\n         */ _getConstructed: function(contextEl) {\n            return {\n                _top: contextEl.topArea,\n                _relative: contextEl.relative,\n                _toolBar: contextEl.toolbar,\n                _toolbarShadow: contextEl._toolbarShadow,\n                _menuTray: contextEl._menuTray,\n                _editorArea: contextEl.editorArea,\n                _wysiwygArea: contextEl.wysiwygFrame,\n                _codeArea: contextEl.code,\n                _placeholder: contextEl.placeholder,\n                _resizingBar: contextEl.resizingBar,\n                _navigation: contextEl.navigation,\n                _charCounter: contextEl.charCounter,\n                _charWrapper: contextEl.charWrapper,\n                _loading: contextEl.loading,\n                _lineBreaker: contextEl.lineBreaker,\n                _lineBreaker_t: contextEl.lineBreaker_t,\n                _lineBreaker_b: contextEl.lineBreaker_b,\n                _resizeBack: contextEl.resizeBackground,\n                _stickyDummy: contextEl._stickyDummy,\n                _arrow: contextEl._arrow\n            };\n        }\n    };\n    /**\r\n     * @description event function\r\n     */ const event = {\n        _IEisComposing: false,\n        _lineBreakerBind: null,\n        _responsiveCurrentSize: \"default\",\n        _responsiveButtonSize: null,\n        _responsiveButtons: null,\n        _cursorMoveKeyCode: new _w.RegExp(\"^(8|3[2-9]|40|46)$\"),\n        _directionKeyCode: new _w.RegExp(\"^(8|13|3[2-9]|40|46)$\"),\n        _nonTextKeyCode: new _w.RegExp(\"^(8|13|1[6-9]|20|27|3[3-9]|40|45|46|11[2-9]|12[0-3]|144|145)$\"),\n        _historyIgnoreKeyCode: new _w.RegExp(\"^(1[6-9]|20|27|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$\"),\n        _onButtonsCheck: new _w.RegExp(\"^(\" + _w.Object.keys(options._textTagsMap).join(\"|\") + \")$\", \"i\"),\n        _frontZeroWidthReg: new _w.RegExp(util.zeroWidthSpace + \"+\", \"\"),\n        _keyCodeShortcut: {\n            65: \"A\",\n            66: \"B\",\n            83: \"S\",\n            85: \"U\",\n            73: \"I\",\n            89: \"Y\",\n            90: \"Z\",\n            219: \"[\",\n            221: \"]\"\n        },\n        _shortcutCommand: function(keyCode, shift) {\n            let command = null;\n            const keyStr = event._keyCodeShortcut[keyCode];\n            switch(keyStr){\n                case \"A\":\n                    command = \"selectAll\";\n                    break;\n                case \"B\":\n                    if (options.shortcutsDisable.indexOf(\"bold\") === -1) {\n                        command = \"bold\";\n                    }\n                    break;\n                case \"S\":\n                    if (shift && options.shortcutsDisable.indexOf(\"strike\") === -1) {\n                        command = \"strike\";\n                    } else if (!shift && options.shortcutsDisable.indexOf(\"save\") === -1) {\n                        command = \"save\";\n                    }\n                    break;\n                case \"U\":\n                    if (options.shortcutsDisable.indexOf(\"underline\") === -1) {\n                        command = \"underline\";\n                    }\n                    break;\n                case \"I\":\n                    if (options.shortcutsDisable.indexOf(\"italic\") === -1) {\n                        command = \"italic\";\n                    }\n                    break;\n                case \"Z\":\n                    if (options.shortcutsDisable.indexOf(\"undo\") === -1) {\n                        if (shift) {\n                            command = \"redo\";\n                        } else {\n                            command = \"undo\";\n                        }\n                    }\n                    break;\n                case \"Y\":\n                    if (options.shortcutsDisable.indexOf(\"undo\") === -1) {\n                        command = \"redo\";\n                    }\n                    break;\n                case \"[\":\n                    if (options.shortcutsDisable.indexOf(\"indent\") === -1) {\n                        command = options.rtl ? \"indent\" : \"outdent\";\n                    }\n                    break;\n                case \"]\":\n                    if (options.shortcutsDisable.indexOf(\"indent\") === -1) {\n                        command = options.rtl ? \"outdent\" : \"indent\";\n                    }\n                    break;\n            }\n            if (!command) return !!keyStr;\n            core.commandHandler(core.commandMap[command], command);\n            return true;\n        },\n        _applyTagEffects: function() {\n            if (util.hasClass(context.element.wysiwyg, \"se-read-only\")) {\n                return false;\n            }\n            let selectionNode = core.getSelectionNode();\n            if (selectionNode === core.effectNode) return;\n            core.effectNode = selectionNode;\n            const marginDir = options.rtl ? \"marginRight\" : \"marginLeft\";\n            const commandMap = core.commandMap;\n            const classOnCheck = event._onButtonsCheck;\n            const commandMapNodes = [];\n            const currentNodes = [];\n            const activePlugins = core.activePlugins;\n            const cLen = activePlugins.length;\n            let nodeName = \"\";\n            while(selectionNode.firstChild){\n                selectionNode = selectionNode.firstChild;\n            }\n            for(let element = selectionNode; !util.isWysiwygDiv(element); element = element.parentNode){\n                if (!element) break;\n                if (element.nodeType !== 1 || util.isBreak(element)) continue;\n                nodeName = element.nodeName.toUpperCase();\n                currentNodes.push(nodeName);\n                /* Active plugins */ if (!core.isReadOnly) {\n                    for(let c = 0, name; c < cLen; c++){\n                        name = activePlugins[c];\n                        if (commandMapNodes.indexOf(name) === -1 && plugins[name].active.call(core, element)) {\n                            commandMapNodes.push(name);\n                        }\n                    }\n                }\n                if (util.isFormatElement(element)) {\n                    /* Outdent */ if (commandMapNodes.indexOf(\"OUTDENT\") === -1 && commandMap.OUTDENT && !util.isImportantDisabled(commandMap.OUTDENT)) {\n                        if (util.isListCell(element) || element.style[marginDir] && util.getNumber(element.style[marginDir], 0) > 0) {\n                            commandMapNodes.push(\"OUTDENT\");\n                            commandMap.OUTDENT.removeAttribute(\"disabled\");\n                        }\n                    }\n                    /* Indent */ if (commandMapNodes.indexOf(\"INDENT\") === -1 && commandMap.INDENT && !util.isImportantDisabled(commandMap.INDENT)) {\n                        commandMapNodes.push(\"INDENT\");\n                        if (util.isListCell(element) && !element.previousElementSibling) {\n                            commandMap.INDENT.setAttribute(\"disabled\", true);\n                        } else {\n                            commandMap.INDENT.removeAttribute(\"disabled\");\n                        }\n                    }\n                    continue;\n                }\n                /** default active buttons [strong, ins, em, del, sub, sup] */ if (classOnCheck && classOnCheck.test(nodeName)) {\n                    commandMapNodes.push(nodeName);\n                    util.addClass(commandMap[nodeName], \"active\");\n                }\n            }\n            core._setKeyEffect(commandMapNodes);\n            /** save current nodes */ core._variable.currentNodes = currentNodes.reverse();\n            core._variable.currentNodesMap = commandMapNodes;\n            /**  Displays the current node structure to resizingBar */ if (options.showPathLabel) context.element.navigation.textContent = core._variable.currentNodes.join(\" > \");\n        },\n        _buttonsEventHandler: function(e) {\n            let target = e.target;\n            if (core._bindControllersOff) e.stopPropagation();\n            if (/^(input|textarea|select|option)$/i.test(target.nodeName)) {\n                core._antiBlur = false;\n            } else {\n                e.preventDefault();\n            }\n            if (util.getParentElement(target, \".se-submenu\")) {\n                e.stopPropagation();\n                core._notHideToolbar = true;\n            } else {\n                let command = target.getAttribute(\"data-command\");\n                let className = target.className;\n                while(!command && !/se-menu-list/.test(className) && !/sun-editor-common/.test(className)){\n                    target = target.parentNode;\n                    command = target.getAttribute(\"data-command\");\n                    className = target.className;\n                }\n                if (command === core._submenuName || command === core._containerName) {\n                    e.stopPropagation();\n                }\n            }\n        },\n        addGlobalEvent (type, listener, useCapture) {\n            if (options.iframe) {\n                core._ww.addEventListener(type, listener, useCapture);\n            }\n            core._w.addEventListener(type, listener, useCapture);\n            return {\n                type: type,\n                listener: listener,\n                useCapture: useCapture\n            };\n        },\n        removeGlobalEvent (type, listener, useCapture) {\n            if (!type) return;\n            if (typeof type === \"object\") {\n                listener = type.listener;\n                useCapture = type.useCapture;\n                type = type.type;\n            }\n            if (options.iframe) {\n                core._ww.removeEventListener(type, listener, useCapture);\n            }\n            core._w.removeEventListener(type, listener, useCapture);\n        },\n        onClick_toolbar: function(e) {\n            let target = e.target;\n            let display = target.getAttribute(\"data-display\");\n            let command = target.getAttribute(\"data-command\");\n            let className = target.className;\n            core.controllersOff();\n            while(target.parentNode && !command && !/se-menu-list/.test(className) && !/se-toolbar/.test(className)){\n                target = target.parentNode;\n                command = target.getAttribute(\"data-command\");\n                display = target.getAttribute(\"data-display\");\n                className = target.className;\n            }\n            if (!command && !display) return;\n            if (target.disabled) return;\n            core.actionCall(command, display, target);\n        },\n        __selectionSyncEvent: null,\n        onMouseDown_wysiwyg: function(e) {\n            if (core.isReadOnly || util.isNonEditable(context.element.wysiwyg)) return;\n            if (util._isExcludeSelectionElement(e.target)) {\n                e.preventDefault();\n                return;\n            }\n            event.removeGlobalEvent(event.__selectionSyncEvent);\n            event.__selectionSyncEvent = event.addGlobalEvent(\"mouseup\", function() {\n                core._editorRange();\n                event.removeGlobalEvent(event.__selectionSyncEvent);\n            });\n            // user event\n            if (typeof functions.onMouseDown === \"function\" && functions.onMouseDown(e, core) === false) return;\n            const tableCell = util.getParentElement(e.target, util.isCell);\n            if (tableCell) {\n                const tablePlugin = core.plugins.table;\n                if (tablePlugin && tableCell !== tablePlugin._fixedCell && !tablePlugin._shift) {\n                    core.callPlugin(\"table\", function() {\n                        tablePlugin.onTableCellMultiSelect.call(core, tableCell, false);\n                    }, null);\n                }\n            }\n            if (core._isBalloon) {\n                event._hideToolbar();\n            }\n        },\n        onClick_wysiwyg: function(e) {\n            // if (util.hasClass(context.element.wysiwyg, 'se-read-only')) {\n            //     e.preventDefault();\n            //     return false;\n            // }\n            const targetElement = e.target;\n            if (core.isReadOnly) {\n                e.preventDefault();\n                if (util.isAnchor(targetElement)) {\n                    _w.open(targetElement.href, targetElement.target);\n                }\n                return false;\n            }\n            if (util.isNonEditable(context.element.wysiwyg)) return;\n            // user event\n            if (typeof functions.onClick === \"function\" && functions.onClick(e, core) === false) return;\n            const fileComponentInfo = core.getFileComponent(targetElement);\n            if (fileComponentInfo) {\n                e.preventDefault();\n                core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);\n                return;\n            }\n            const figcaption = util.getParentElement(targetElement, \"FIGCAPTION\");\n            if (figcaption && util.isNonEditable(figcaption)) {\n                e.preventDefault();\n                figcaption.focus();\n                if (core._isInline && !core._inlineToolbarAttr.isShow) {\n                    event._showToolbarInline();\n                    const hideToolbar = function() {\n                        event._hideToolbar();\n                        figcaption.removeEventListener(\"blur\", hideToolbar);\n                    };\n                    figcaption.addEventListener(\"blur\", hideToolbar);\n                }\n            }\n            core._editorRange();\n            if (e.detail === 3) {\n                let range = core.getRange();\n                if (util.isFormatElement(range.endContainer) && range.endOffset === 0) {\n                    range = core.setRange(range.startContainer, range.startOffset, range.startContainer, range.startContainer.length);\n                    core._rangeInfo(range, core.getSelection());\n                }\n            }\n            const selectionNode = core.getSelectionNode();\n            const formatEl = util.getFormatElement(selectionNode, null);\n            const rangeEl = util.getRangeFormatElement(selectionNode, null);\n            let selectionNodeDeepestFirstChild = selectionNode;\n            while(selectionNodeDeepestFirstChild.firstChild)selectionNodeDeepestFirstChild = selectionNodeDeepestFirstChild.firstChild;\n            const selectedComponentInfo = core.getFileComponent(selectionNodeDeepestFirstChild);\n            if (selectedComponentInfo) {\n                const range = core.getRange();\n                if (!rangeEl && range.startContainer === range.endContainer) core.selectComponent(selectedComponentInfo.target, selectedComponentInfo.pluginName);\n            } else if (core.currentFileComponentInfo) core.controllersOff();\n            if (!formatEl && !util.isNonEditable(targetElement) && !util.isList(rangeEl)) {\n                const range = core.getRange();\n                if (util.getFormatElement(range.startContainer) === util.getFormatElement(range.endContainer)) {\n                    if (util.isList(rangeEl)) {\n                        e.preventDefault();\n                        const oLi = util.createElement(\"LI\");\n                        const prevLi = selectionNode.nextElementSibling;\n                        oLi.appendChild(selectionNode);\n                        rangeEl.insertBefore(oLi, prevLi);\n                        core.focus();\n                    } else if (!util.isWysiwygDiv(selectionNode) && !util.isComponent(selectionNode) && (!util.isTable(selectionNode) || util.isCell(selectionNode)) && core._setDefaultFormat(util.isRangeFormatElement(rangeEl) ? \"DIV\" : options.defaultTag) !== null) {\n                        e.preventDefault();\n                        core.focus();\n                    } else {\n                        event._applyTagEffects();\n                    }\n                }\n            } else {\n                event._applyTagEffects();\n            }\n            if (core._isBalloon) _w.setTimeout(event._toggleToolbarBalloon);\n        },\n        _balloonDelay: null,\n        _showToolbarBalloonDelay: function() {\n            if (event._balloonDelay) {\n                _w.clearTimeout(event._balloonDelay);\n            }\n            event._balloonDelay = _w.setTimeout((function() {\n                _w.clearTimeout(this._balloonDelay);\n                this._balloonDelay = null;\n                this._showToolbarBalloon();\n            }).bind(event), 350);\n        },\n        _toggleToolbarBalloon: function() {\n            core._editorRange();\n            const range = core.getRange();\n            if (core._bindControllersOff || !core._isBalloonAlways && range.collapsed) event._hideToolbar();\n            else event._showToolbarBalloon(range);\n        },\n        _showToolbarBalloon: function(rangeObj) {\n            if (!core._isBalloon) return;\n            const range = rangeObj || core.getRange();\n            const toolbar = context.element.toolbar;\n            const topArea = context.element.topArea;\n            const selection = core.getSelection();\n            let isDirTop;\n            if (core._isBalloonAlways && range.collapsed) {\n                isDirTop = true;\n            } else if (selection.focusNode === selection.anchorNode) {\n                isDirTop = selection.focusOffset < selection.anchorOffset;\n            } else {\n                const childNodes = util.getListChildNodes(range.commonAncestorContainer, null);\n                isDirTop = util.getArrayIndex(childNodes, selection.focusNode) < util.getArrayIndex(childNodes, selection.anchorNode);\n            }\n            let rects = range.getClientRects();\n            rects = rects[isDirTop ? 0 : rects.length - 1];\n            const globalScroll = core.getGlobalScrollOffset();\n            let scrollLeft = globalScroll.left;\n            let scrollTop = globalScroll.top;\n            const editorWidth = topArea.offsetWidth;\n            const offsets = event._getEditorOffsets(null);\n            const stickyTop = offsets.top;\n            const editorLeft = offsets.left;\n            toolbar.style.top = \"-10000px\";\n            toolbar.style.visibility = \"hidden\";\n            toolbar.style.display = \"block\";\n            if (!rects) {\n                const node = core.getSelectionNode();\n                if (util.isFormatElement(node)) {\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    core.insertNode(zeroWidth, null, false);\n                    core.setRange(zeroWidth, 1, zeroWidth, 1);\n                    core._editorRange();\n                    rects = core.getRange().getClientRects();\n                    rects = rects[isDirTop ? 0 : rects.length - 1];\n                }\n                if (!rects) {\n                    const nodeOffset = util.getOffset(node, context.element.wysiwygFrame);\n                    rects = {\n                        left: nodeOffset.left,\n                        top: nodeOffset.top,\n                        right: nodeOffset.left,\n                        bottom: nodeOffset.top + node.offsetHeight,\n                        noText: true\n                    };\n                    scrollLeft = 0;\n                    scrollTop = 0;\n                }\n                isDirTop = true;\n            }\n            const arrowMargin = _w.Math.round(context.element._arrow.offsetWidth / 2);\n            const toolbarWidth = toolbar.offsetWidth;\n            const toolbarHeight = toolbar.offsetHeight;\n            const iframeRects = /iframe/i.test(context.element.wysiwygFrame.nodeName) ? context.element.wysiwygFrame.getClientRects()[0] : null;\n            if (iframeRects) {\n                rects = {\n                    left: rects.left + iframeRects.left,\n                    top: rects.top + iframeRects.top,\n                    right: rects.right + iframeRects.right - iframeRects.width,\n                    bottom: rects.bottom + iframeRects.bottom - iframeRects.height\n                };\n            }\n            event._setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin);\n            if (toolbarWidth !== toolbar.offsetWidth || toolbarHeight !== toolbar.offsetHeight) {\n                event._setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin);\n            }\n            if (options.toolbarContainer) {\n                const editorParent = topArea.parentElement;\n                let container = options.toolbarContainer;\n                let left = container.offsetLeft;\n                let top = container.offsetTop;\n                while(!container.parentElement.contains(editorParent) || !/^(BODY|HTML)$/i.test(container.parentElement.nodeName)){\n                    container = container.offsetParent;\n                    left += container.offsetLeft;\n                    top += container.offsetTop;\n                }\n                toolbar.style.left = toolbar.offsetLeft - left + topArea.offsetLeft + \"px\";\n                toolbar.style.top = toolbar.offsetTop - top + topArea.offsetTop + \"px\";\n            }\n            toolbar.style.visibility = \"\";\n        },\n        _setToolbarOffset: function(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin) {\n            const padding = 1;\n            const toolbarWidth = toolbar.offsetWidth;\n            const toolbarHeight = rects.noText && !isDirTop ? 0 : toolbar.offsetHeight;\n            const absoluteLeft = (isDirTop ? rects.left : rects.right) - editorLeft - toolbarWidth / 2 + scrollLeft;\n            const overRight = absoluteLeft + toolbarWidth - editorWidth;\n            let t = (isDirTop ? rects.top - toolbarHeight - arrowMargin : rects.bottom + arrowMargin) - (rects.noText ? 0 : stickyTop) + scrollTop;\n            let l = absoluteLeft < 0 ? padding : overRight < 0 ? absoluteLeft : absoluteLeft - overRight - padding - 1;\n            let resetTop = false;\n            const space = t + (isDirTop ? event._getEditorOffsets(null).top : toolbar.offsetHeight - context.element.wysiwyg.offsetHeight);\n            if (!isDirTop && space > 0 && event._getPageBottomSpace() < space) {\n                isDirTop = true;\n                resetTop = true;\n            } else if (isDirTop && _d.documentElement.offsetTop > space) {\n                isDirTop = false;\n                resetTop = true;\n            }\n            if (resetTop) t = (isDirTop ? rects.top - toolbarHeight - arrowMargin : rects.bottom + arrowMargin) - (rects.noText ? 0 : stickyTop) + scrollTop;\n            toolbar.style.left = _w.Math.floor(l) + \"px\";\n            toolbar.style.top = _w.Math.floor(t) + \"px\";\n            if (isDirTop) {\n                util.removeClass(context.element._arrow, \"se-arrow-up\");\n                util.addClass(context.element._arrow, \"se-arrow-down\");\n                context.element._arrow.style.top = toolbarHeight + \"px\";\n            } else {\n                util.removeClass(context.element._arrow, \"se-arrow-down\");\n                util.addClass(context.element._arrow, \"se-arrow-up\");\n                context.element._arrow.style.top = -arrowMargin + \"px\";\n            }\n            const arrow_left = _w.Math.floor(toolbarWidth / 2 + (absoluteLeft - l));\n            context.element._arrow.style.left = (arrow_left + arrowMargin > toolbar.offsetWidth ? toolbar.offsetWidth - arrowMargin : arrow_left < arrowMargin ? arrowMargin : arrow_left) + \"px\";\n        },\n        _showToolbarInline: function() {\n            if (!core._isInline) return;\n            const toolbar = context.element.toolbar;\n            if (options.toolbarContainer) toolbar.style.position = \"relative\";\n            else toolbar.style.position = \"absolute\";\n            toolbar.style.visibility = \"hidden\";\n            toolbar.style.display = \"block\";\n            core._inlineToolbarAttr.width = toolbar.style.width = options.toolbarWidth;\n            core._inlineToolbarAttr.top = toolbar.style.top = (options.toolbarContainer ? 0 : -1 - toolbar.offsetHeight) + \"px\";\n            if (typeof functions.showInline === \"function\") functions.showInline(toolbar, context, core);\n            event.onScroll_window();\n            core._inlineToolbarAttr.isShow = true;\n            toolbar.style.visibility = \"\";\n        },\n        _hideToolbar: function() {\n            if (!core._notHideToolbar && !core._variable.isFullScreen) {\n                context.element.toolbar.style.display = \"none\";\n                core._inlineToolbarAttr.isShow = false;\n            }\n        },\n        onInput_wysiwyg: function(e) {\n            if (/AUDIO/.test(e.target.nodeName)) return false;\n            if (core.isReadOnly || core.isDisabled) {\n                e.preventDefault();\n                e.stopPropagation();\n                core.history.go(core.history.getCurrentIndex());\n                return false;\n            }\n            core._editorRange();\n            const data = (e.data === null ? \"\" : e.data === undefined ? \" \" : e.data) || \"\";\n            if (!core._charCount(data)) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            // user event\n            if (typeof functions.onInput === \"function\" && functions.onInput(e, core) === false) return;\n            // history stack\n            core.history.push(true);\n        },\n        _isUneditableNode: function(range, isFront) {\n            const container = isFront ? range.startContainer : range.endContainer;\n            const offset = isFront ? range.startOffset : range.endOffset;\n            const siblingKey = isFront ? \"previousSibling\" : \"nextSibling\";\n            const isElement = container.nodeType === 1;\n            let siblingNode;\n            if (isElement) {\n                siblingNode = event._isUneditableNode_getSibling(container.childNodes[offset], siblingKey, container);\n                return siblingNode && siblingNode.nodeType === 1 && siblingNode.getAttribute(\"contenteditable\") === \"false\";\n            } else {\n                siblingNode = event._isUneditableNode_getSibling(container, siblingKey, container);\n                return core.isEdgePoint(container, offset, isFront ? \"front\" : \"end\") && siblingNode && siblingNode.nodeType === 1 && siblingNode.getAttribute(\"contenteditable\") === \"false\";\n            }\n        },\n        _isUneditableNode_getSibling: function(selectNode, siblingKey, container) {\n            if (!selectNode) return null;\n            let siblingNode = selectNode[siblingKey];\n            if (!siblingNode) {\n                siblingNode = util.getFormatElement(container);\n                siblingNode = siblingNode ? siblingNode[siblingKey] : null;\n                if (siblingNode && !util.isComponent(siblingNode)) siblingNode = siblingKey === \"previousSibling\" ? siblingNode.firstChild : siblingNode.lastChild;\n                else return null;\n            }\n            return siblingNode;\n        },\n        _onShortcutKey: false,\n        onKeyDown_wysiwyg: function(e) {\n            let selectionNode = core.getSelectionNode();\n            if (util.isInputElement(selectionNode)) return;\n            const keyCode = e.keyCode;\n            const shift = e.shiftKey;\n            const ctrl = e.ctrlKey || e.metaKey || keyCode === 91 || keyCode === 92 || keyCode === 224;\n            const alt = e.altKey;\n            event._IEisComposing = keyCode === 229;\n            if (!ctrl && core.isReadOnly && !event._cursorMoveKeyCode.test(keyCode)) {\n                e.preventDefault();\n                return false;\n            }\n            core.submenuOff();\n            if (core._isBalloon) {\n                event._hideToolbar();\n            }\n            // user event\n            if (typeof functions.onKeyDown === \"function\" && functions.onKeyDown(e, core) === false) return;\n            /** Shortcuts */ if (ctrl && event._shortcutCommand(keyCode, shift)) {\n                event._onShortcutKey = true;\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            } else if (event._onShortcutKey) {\n                event._onShortcutKey = false;\n            }\n            /** default key action */ const range = core.getRange();\n            const selectRange = !range.collapsed || range.startContainer !== range.endContainer;\n            const fileComponentName = core._fileManager.pluginRegExp.test(core.currentControllerName) ? core.currentControllerName : \"\";\n            let formatEl = util.getFormatElement(selectionNode, null) || selectionNode;\n            let rangeEl = util.getRangeFormatElement(formatEl, null);\n            const isArrowKey = /37|38|39|40/.test(e.keyCode);\n            if (isArrowKey && event._onKeyDown_wysiwyg_arrowKey(e) === false) return;\n            switch(keyCode){\n                case 8:\n                    /** backspace key */ if (!selectRange) {\n                        if (fileComponentName) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            core.plugins[fileComponentName].destroy.call(core);\n                            break;\n                        }\n                    }\n                    if (selectRange && event._hardDelete()) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    if (!util.isFormatElement(formatEl) && !context.element.wysiwyg.firstElementChild && !util.isComponent(selectionNode) && core._setDefaultFormat(options.defaultTag) !== null) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        return false;\n                    }\n                    if (!selectRange && !formatEl.previousElementSibling && range.startOffset === 0 && !selectionNode.previousSibling && !util.isListCell(formatEl) && util.isFormatElement(formatEl) && (!util.isFreeFormatElement(formatEl) || util.isClosureFreeFormatElement(formatEl))) {\n                        // closure range\n                        if (util.isClosureRangeFormatElement(formatEl.parentNode)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            return false;\n                        }\n                        // maintain default format\n                        if (util.isWysiwygDiv(formatEl.parentNode) && formatEl.childNodes.length <= 1 && (!formatEl.firstChild || util.onlyZeroWidthSpace(formatEl.textContent))) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (formatEl.nodeName.toUpperCase() === options.defaultTag.toUpperCase()) {\n                                formatEl.innerHTML = \"<br>\";\n                                const attrs = formatEl.attributes;\n                                while(attrs[0]){\n                                    formatEl.removeAttribute(attrs[0].name);\n                                }\n                            } else {\n                                const defaultFormat = util.createElement(options.defaultTag);\n                                defaultFormat.innerHTML = \"<br>\";\n                                formatEl.parentElement.replaceChild(defaultFormat, formatEl);\n                            }\n                            core.nativeFocus();\n                            return false;\n                        }\n                    }\n                    // clean remove tag\n                    const startCon = range.startContainer;\n                    if (formatEl && !formatEl.previousElementSibling && range.startOffset === 0 && startCon.nodeType === 3 && !util.isFormatElement(startCon.parentNode)) {\n                        let prev = startCon.parentNode.previousSibling;\n                        const next = startCon.parentNode.nextSibling;\n                        if (!prev) {\n                            if (!next) {\n                                prev = util.createElement(\"BR\");\n                                formatEl.appendChild(prev);\n                            } else {\n                                prev = next;\n                            }\n                        }\n                        let con = startCon;\n                        while(formatEl.contains(con) && !con.previousSibling){\n                            con = con.parentNode;\n                        }\n                        if (!formatEl.contains(con)) {\n                            startCon.textContent = \"\";\n                            util.removeItemAllParents(startCon, null, formatEl);\n                            break;\n                        }\n                    }\n                    // tag[contenteditable=\"false\"]\n                    if (event._isUneditableNode(range, true)) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    // format attributes\n                    if (!selectRange && core._isEdgeFormat(range.startContainer, range.startOffset, \"start\")) {\n                        if (util.isFormatElement(formatEl.previousElementSibling)) {\n                            core._formatAttrsTemp = formatEl.previousElementSibling.attributes;\n                        }\n                    }\n                    // nested list\n                    const commonCon = range.commonAncestorContainer;\n                    formatEl = util.getFormatElement(range.startContainer, null);\n                    rangeEl = util.getRangeFormatElement(formatEl, null);\n                    if (rangeEl && formatEl && !util.isCell(rangeEl) && !/^FIGCAPTION$/i.test(rangeEl.nodeName)) {\n                        if (util.isListCell(formatEl) && util.isList(rangeEl) && (util.isListCell(rangeEl.parentNode) || formatEl.previousElementSibling) && (selectionNode === formatEl || selectionNode.nodeType === 3 && (!selectionNode.previousSibling || util.isList(selectionNode.previousSibling))) && (util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null) ? rangeEl.contains(range.startContainer) : range.startOffset === 0 && range.collapsed)) {\n                            if (range.startContainer !== range.endContainer) {\n                                e.preventDefault();\n                                core.removeNode();\n                                if (range.startContainer.nodeType === 3) {\n                                    core.setRange(range.startContainer, range.startContainer.textContent.length, range.startContainer, range.startContainer.textContent.length);\n                                }\n                                // history stack\n                                core.history.push(true);\n                            } else {\n                                let prev = formatEl.previousElementSibling || rangeEl.parentNode;\n                                if (util.isListCell(prev)) {\n                                    e.preventDefault();\n                                    let prevLast = prev;\n                                    if (!prev.contains(formatEl) && util.isListCell(prevLast) && util.isList(prevLast.lastElementChild)) {\n                                        prevLast = prevLast.lastElementChild.lastElementChild;\n                                        while(util.isListCell(prevLast) && util.isList(prevLast.lastElementChild)){\n                                            prevLast = prevLast.lastElementChild && prevLast.lastElementChild.lastElementChild;\n                                        }\n                                        prev = prevLast;\n                                    }\n                                    let con = prev === rangeEl.parentNode ? rangeEl.previousSibling : prev.lastChild;\n                                    if (!con) {\n                                        con = util.createTextNode(util.zeroWidthSpace);\n                                        rangeEl.parentNode.insertBefore(con, rangeEl.parentNode.firstChild);\n                                    }\n                                    const offset = con.nodeType === 3 ? con.textContent.length : 1;\n                                    const children = formatEl.childNodes;\n                                    let after = con;\n                                    let child = children[0];\n                                    while(child = children[0]){\n                                        prev.insertBefore(child, after.nextSibling);\n                                        after = child;\n                                    }\n                                    util.removeItem(formatEl);\n                                    if (rangeEl.children.length === 0) util.removeItem(rangeEl);\n                                    core.setRange(con, offset, con, offset);\n                                    // history stack\n                                    core.history.push(true);\n                                }\n                            }\n                            break;\n                        }\n                        // detach range\n                        if (!selectRange && range.startOffset === 0) {\n                            let detach = true;\n                            let comm = commonCon;\n                            while(comm && comm !== rangeEl && !util.isWysiwygDiv(comm)){\n                                if (comm.previousSibling) {\n                                    if (comm.previousSibling.nodeType === 1 || !util.onlyZeroWidthSpace(comm.previousSibling.textContent.trim())) {\n                                        detach = false;\n                                        break;\n                                    }\n                                }\n                                comm = comm.parentNode;\n                            }\n                            if (detach && rangeEl.parentNode) {\n                                e.preventDefault();\n                                core.detachRangeFormatElement(rangeEl, util.isListCell(formatEl) ? [\n                                    formatEl\n                                ] : null, null, false, false);\n                                // history stack\n                                core.history.push(true);\n                                break;\n                            }\n                        }\n                    }\n                    // component\n                    if (!selectRange && formatEl && (range.startOffset === 0 || (selectionNode === formatEl ? !!formatEl.childNodes[range.startOffset] : false))) {\n                        const sel = selectionNode === formatEl ? formatEl.childNodes[range.startOffset] : selectionNode;\n                        const prev = formatEl.previousSibling;\n                        // select file component\n                        const ignoreZWS = (commonCon.nodeType === 3 || util.isBreak(commonCon)) && !commonCon.previousSibling && range.startOffset === 0;\n                        if (sel && !sel.previousSibling && (commonCon && util.isComponent(commonCon.previousSibling) || ignoreZWS && util.isComponent(prev))) {\n                            const fileComponentInfo = core.getFileComponent(prev);\n                            if (fileComponentInfo) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (formatEl.textContent.length === 0) util.removeItem(formatEl);\n                                if (core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName) === false) core.blur();\n                            } else if (util.isComponent(prev)) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                util.removeItem(prev);\n                            }\n                            break;\n                        }\n                        // delete nonEditable\n                        if (sel && util.isNonEditable(sel.previousSibling)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            util.removeItem(sel.previousSibling);\n                            break;\n                        }\n                    }\n                    break;\n                case 46:\n                    /** delete key */ if (fileComponentName) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        core.plugins[fileComponentName].destroy.call(core);\n                        break;\n                    }\n                    if (selectRange && event._hardDelete()) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    // tag[contenteditable=\"false\"]\n                    if (event._isUneditableNode(range, false)) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    // component\n                    if ((util.isFormatElement(selectionNode) || selectionNode.nextSibling === null || util.onlyZeroWidthSpace(selectionNode.nextSibling) && selectionNode.nextSibling.nextSibling === null) && range.startOffset === selectionNode.textContent.length) {\n                        const nextEl = formatEl.nextElementSibling;\n                        if (!nextEl) break;\n                        if (util.isComponent(nextEl)) {\n                            e.preventDefault();\n                            if (util.onlyZeroWidthSpace(formatEl)) {\n                                util.removeItem(formatEl);\n                                // table component\n                                if (util.isTable(nextEl)) {\n                                    let cell = util.getChildElement(nextEl, util.isCell, false);\n                                    cell = cell.firstElementChild || cell;\n                                    core.setRange(cell, 0, cell, 0);\n                                    break;\n                                }\n                            }\n                            // select file component\n                            const fileComponentInfo = core.getFileComponent(nextEl);\n                            if (fileComponentInfo) {\n                                e.stopPropagation();\n                                if (core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName) === false) core.blur();\n                            } else if (util.isComponent(nextEl)) {\n                                e.stopPropagation();\n                                util.removeItem(nextEl);\n                            }\n                            break;\n                        }\n                    }\n                    if (!selectRange && (core.isEdgePoint(range.endContainer, range.endOffset) || (selectionNode === formatEl ? !!formatEl.childNodes[range.startOffset] : false))) {\n                        const sel = selectionNode === formatEl ? formatEl.childNodes[range.startOffset] || selectionNode : selectionNode;\n                        // delete nonEditable\n                        if (sel && util.isNonEditable(sel.nextSibling)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            util.removeItem(sel.nextSibling);\n                            break;\n                        } else if (util.isComponent(sel)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            util.removeItem(sel);\n                            break;\n                        }\n                    }\n                    // format attributes\n                    if (!selectRange && core._isEdgeFormat(range.endContainer, range.endOffset, \"end\")) {\n                        if (util.isFormatElement(formatEl.nextElementSibling)) {\n                            core._formatAttrsTemp = formatEl.attributes;\n                        }\n                    }\n                    // nested list\n                    formatEl = util.getFormatElement(range.startContainer, null);\n                    rangeEl = util.getRangeFormatElement(formatEl, null);\n                    if (util.isListCell(formatEl) && util.isList(rangeEl) && (selectionNode === formatEl || selectionNode.nodeType === 3 && (!selectionNode.nextSibling || util.isList(selectionNode.nextSibling)) && (util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null) ? rangeEl.contains(range.endContainer) : range.endOffset === selectionNode.textContent.length && range.collapsed))) {\n                        if (range.startContainer !== range.endContainer) core.removeNode();\n                        let next = util.getArrayItem(formatEl.children, util.isList, false);\n                        next = next || formatEl.nextElementSibling || rangeEl.parentNode.nextElementSibling;\n                        if (next && (util.isList(next) || util.getArrayItem(next.children, util.isList, false))) {\n                            e.preventDefault();\n                            let con, children;\n                            if (util.isList(next)) {\n                                const child = next.firstElementChild;\n                                children = child.childNodes;\n                                con = children[0];\n                                while(children[0]){\n                                    formatEl.insertBefore(children[0], next);\n                                }\n                                util.removeItem(child);\n                            } else {\n                                con = next.firstChild;\n                                children = next.childNodes;\n                                while(children[0]){\n                                    formatEl.appendChild(children[0]);\n                                }\n                                util.removeItem(next);\n                            }\n                            core.setRange(con, 0, con, 0);\n                            // history stack\n                            core.history.push(true);\n                        }\n                        break;\n                    }\n                    break;\n                case 9:\n                    /** tab key */ if (fileComponentName || options.tabDisable) break;\n                    e.preventDefault();\n                    if (ctrl || alt || util.isWysiwygDiv(selectionNode)) break;\n                    const isEdge = !range.collapsed || core.isEdgePoint(range.startContainer, range.startOffset);\n                    const selectedFormats = core.getSelectedElements(null);\n                    selectionNode = core.getSelectionNode();\n                    const cells = [];\n                    let lines = [];\n                    let fc = util.isListCell(selectedFormats[0]), lc = util.isListCell(selectedFormats[selectedFormats.length - 1]);\n                    let r = {\n                        sc: range.startContainer,\n                        so: range.startOffset,\n                        ec: range.endContainer,\n                        eo: range.endOffset\n                    };\n                    for(let i = 0, len = selectedFormats.length, f; i < len; i++){\n                        f = selectedFormats[i];\n                        if (util.isListCell(f)) {\n                            if (!f.previousElementSibling && !shift) {\n                                continue;\n                            } else {\n                                cells.push(f);\n                            }\n                        } else {\n                            lines.push(f);\n                        }\n                    }\n                    // Nested list\n                    if (cells.length > 0 && isEdge && core.plugins.list) {\n                        r = core.plugins.list.editInsideList.call(core, shift, cells);\n                    } else {\n                        // table\n                        const tableCell = util.getParentElement(selectionNode, util.isCell);\n                        if (tableCell && isEdge) {\n                            const table = util.getParentElement(tableCell, \"table\");\n                            const cells = util.getListChildren(table, util.isCell);\n                            let idx = shift ? util.prevIdx(cells, tableCell) : util.nextIdx(cells, tableCell);\n                            if (idx === cells.length && !shift) idx = 0;\n                            if (idx === -1 && shift) idx = cells.length - 1;\n                            let moveCell = cells[idx];\n                            if (!moveCell) break;\n                            moveCell = moveCell.firstElementChild || moveCell;\n                            core.setRange(moveCell, 0, moveCell, 0);\n                            break;\n                        }\n                        lines = lines.concat(cells);\n                        fc = lc = null;\n                    }\n                    // Lines tab(4)\n                    if (lines.length > 0) {\n                        if (!shift) {\n                            const tabText = util.createTextNode(new _w.Array(core._variable.tabSize + 1).join(\"\\xa0\"));\n                            if (lines.length === 1) {\n                                const textRange = core.insertNode(tabText, null, true);\n                                if (!textRange) return false;\n                                if (!fc) {\n                                    r.sc = tabText;\n                                    r.so = textRange.endOffset;\n                                }\n                                if (!lc) {\n                                    r.ec = tabText;\n                                    r.eo = textRange.endOffset;\n                                }\n                            } else {\n                                const len = lines.length - 1;\n                                for(let i = 0, child; i <= len; i++){\n                                    child = lines[i].firstChild;\n                                    if (!child) continue;\n                                    if (util.isBreak(child)) {\n                                        lines[i].insertBefore(tabText.cloneNode(false), child);\n                                    } else {\n                                        child.textContent = tabText.textContent + child.textContent;\n                                    }\n                                }\n                                const firstChild = util.getChildElement(lines[0], \"text\", false);\n                                const endChild = util.getChildElement(lines[len], \"text\", true);\n                                if (!fc && firstChild) {\n                                    r.sc = firstChild;\n                                    r.so = 0;\n                                }\n                                if (!lc && endChild) {\n                                    r.ec = endChild;\n                                    r.eo = endChild.textContent.length;\n                                }\n                            }\n                        } else {\n                            const len = lines.length - 1;\n                            for(let i = 0, line; i <= len; i++){\n                                line = lines[i].childNodes;\n                                for(let c = 0, cLen = line.length, child; c < cLen; c++){\n                                    child = line[c];\n                                    if (!child) break;\n                                    if (util.onlyZeroWidthSpace(child)) continue;\n                                    if (/^\\s{1,4}$/.test(child.textContent)) {\n                                        util.removeItem(child);\n                                    } else if (/^\\s{1,4}/.test(child.textContent)) {\n                                        child.textContent = child.textContent.replace(/^\\s{1,4}/, \"\");\n                                    }\n                                    break;\n                                }\n                            }\n                            const firstChild = util.getChildElement(lines[0], \"text\", false);\n                            const endChild = util.getChildElement(lines[len], \"text\", true);\n                            if (!fc && firstChild) {\n                                r.sc = firstChild;\n                                r.so = 0;\n                            }\n                            if (!lc && endChild) {\n                                r.ec = endChild;\n                                r.eo = endChild.textContent.length;\n                            }\n                        }\n                    }\n                    core.setRange(r.sc, r.so, r.ec, r.eo);\n                    // history stack\n                    core.history.push(false);\n                    break;\n                case 13:\n                    /** enter key */ // enter login start\n                    const freeFormatEl = util.getFreeFormatElement(selectionNode, null);\n                    if (core._charTypeHTML) {\n                        let enterHTML = \"\";\n                        if (!shift && freeFormatEl || shift) {\n                            enterHTML = \"<br>\";\n                        } else {\n                            enterHTML = \"<\" + formatEl.nodeName + \"><br></\" + formatEl.nodeName + \">\";\n                        }\n                        if (!core.checkCharCount(enterHTML, \"byte-html\")) {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                    if (!shift && !fileComponentName) {\n                        const formatEndEdge = core._isEdgeFormat(range.endContainer, range.endOffset, \"end\");\n                        const formatStartEdge = core._isEdgeFormat(range.startContainer, range.startOffset, \"start\");\n                        // add default format line\n                        if (formatEndEdge && (/^H[1-6]$/i.test(formatEl.nodeName) || /^HR$/i.test(formatEl.nodeName))) {\n                            event._enterPrevent(e);\n                            let temp = null;\n                            const newFormat = core.appendFormatTag(formatEl, options.defaultTag);\n                            if (formatEndEdge && formatEndEdge.length > 0) {\n                                temp = formatEndEdge.pop();\n                                const innerNode = temp;\n                                while(formatEndEdge.length > 0){\n                                    temp = temp.appendChild(formatEndEdge.pop());\n                                }\n                                newFormat.appendChild(innerNode);\n                            }\n                            temp = !temp ? newFormat.firstChild : temp.appendChild(newFormat.firstChild);\n                            if (util.isBreak(temp)) {\n                                const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                                temp.parentNode.insertBefore(zeroWidth, temp);\n                                core.setRange(zeroWidth, 1, zeroWidth, 1);\n                            } else {\n                                core.setRange(temp, 0, temp, 0);\n                            }\n                            break;\n                        } else if (rangeEl && formatEl && !util.isCell(rangeEl) && !/^FIGCAPTION$/i.test(rangeEl.nodeName)) {\n                            const range = core.getRange();\n                            if (core.isEdgePoint(range.endContainer, range.endOffset) && util.isList(selectionNode.nextSibling)) {\n                                event._enterPrevent(e);\n                                const newEl = util.createElement(\"LI\");\n                                const br = util.createElement(\"BR\");\n                                newEl.appendChild(br);\n                                formatEl.parentNode.insertBefore(newEl, formatEl.nextElementSibling);\n                                newEl.appendChild(selectionNode.nextSibling);\n                                core.setRange(br, 1, br, 1);\n                                break;\n                            }\n                            if ((range.commonAncestorContainer.nodeType === 3 ? !range.commonAncestorContainer.nextElementSibling : true) && util.onlyZeroWidthSpace(formatEl.innerText.trim()) && !util.isListCell(formatEl.nextElementSibling)) {\n                                event._enterPrevent(e);\n                                let newEl = null;\n                                if (util.isListCell(rangeEl.parentNode)) {\n                                    const parentLi = formatEl.parentNode.parentNode;\n                                    rangeEl = parentLi.parentNode;\n                                    const newListCell = util.createElement(\"LI\");\n                                    newListCell.innerHTML = \"<br>\";\n                                    util.copyTagAttributes(newListCell, formatEl, options.lineAttrReset);\n                                    newEl = newListCell;\n                                    rangeEl.insertBefore(newEl, parentLi.nextElementSibling);\n                                } else {\n                                    const newFormat = util.isCell(rangeEl.parentNode) ? \"DIV\" : util.isList(rangeEl.parentNode) ? \"LI\" : util.isFormatElement(rangeEl.nextElementSibling) && !util.isRangeFormatElement(rangeEl.nextElementSibling) ? rangeEl.nextElementSibling.nodeName : util.isFormatElement(rangeEl.previousElementSibling) && !util.isRangeFormatElement(rangeEl.previousElementSibling) ? rangeEl.previousElementSibling.nodeName : options.defaultTag;\n                                    newEl = util.createElement(newFormat);\n                                    util.copyTagAttributes(newEl, formatEl, options.lineAttrReset);\n                                    const edge = core.detachRangeFormatElement(rangeEl, [\n                                        formatEl\n                                    ], null, true, true);\n                                    edge.cc.insertBefore(newEl, edge.ec);\n                                }\n                                newEl.innerHTML = \"<br>\";\n                                util.removeItemAllParents(formatEl, null, null);\n                                core.setRange(newEl, 1, newEl, 1);\n                                break;\n                            }\n                        }\n                        if (freeFormatEl) {\n                            event._enterPrevent(e);\n                            const selectionFormat = selectionNode === freeFormatEl;\n                            const wSelection = core.getSelection();\n                            const children = selectionNode.childNodes, offset = wSelection.focusOffset, prev = selectionNode.previousElementSibling, next = selectionNode.nextSibling;\n                            if (!util.isClosureFreeFormatElement(freeFormatEl) && !!children && (selectionFormat && range.collapsed && children.length - 1 <= offset + 1 && util.isBreak(children[offset]) && (!children[offset + 1] || (!children[offset + 2] || util.onlyZeroWidthSpace(children[offset + 2].textContent)) && children[offset + 1].nodeType === 3 && util.onlyZeroWidthSpace(children[offset + 1].textContent)) && offset > 0 && util.isBreak(children[offset - 1]) || !selectionFormat && util.onlyZeroWidthSpace(selectionNode.textContent) && util.isBreak(prev) && (util.isBreak(prev.previousSibling) || !util.onlyZeroWidthSpace(prev.previousSibling.textContent)) && (!next || !util.isBreak(next) && util.onlyZeroWidthSpace(next.textContent)))) {\n                                if (selectionFormat) util.removeItem(children[offset - 1]);\n                                else util.removeItem(selectionNode);\n                                const newEl = core.appendFormatTag(freeFormatEl, util.isFormatElement(freeFormatEl.nextElementSibling) && !util.isRangeFormatElement(freeFormatEl.nextElementSibling) ? freeFormatEl.nextElementSibling : null);\n                                util.copyFormatAttributes(newEl, freeFormatEl);\n                                core.setRange(newEl, 1, newEl, 1);\n                                break;\n                            }\n                            if (selectionFormat) {\n                                functions.insertHTML(range.collapsed && util.isBreak(range.startContainer.childNodes[range.startOffset - 1]) ? \"<br>\" : \"<br><br>\", true, false);\n                                let focusNode = wSelection.focusNode;\n                                const wOffset = wSelection.focusOffset;\n                                if (freeFormatEl === focusNode) {\n                                    focusNode = focusNode.childNodes[wOffset - offset > 1 ? wOffset - 1 : wOffset];\n                                }\n                                core.setRange(focusNode, 1, focusNode, 1);\n                            } else {\n                                const focusNext = wSelection.focusNode.nextSibling;\n                                const br = util.createElement(\"BR\");\n                                core.insertNode(br, null, false);\n                                const brPrev = br.previousSibling, brNext = br.nextSibling;\n                                if (!util.isBreak(focusNext) && !util.isBreak(brPrev) && (!brNext || util.onlyZeroWidthSpace(brNext))) {\n                                    br.parentNode.insertBefore(br.cloneNode(false), br);\n                                    core.setRange(br, 1, br, 1);\n                                } else {\n                                    core.setRange(brNext, 0, brNext, 0);\n                                }\n                            }\n                            event._onShortcutKey = true;\n                            break;\n                        }\n                        // set format attrs - edge\n                        if (range.collapsed && (formatStartEdge || formatEndEdge)) {\n                            event._enterPrevent(e);\n                            const focusBR = util.createElement(\"BR\");\n                            const newFormat = util.createElement(formatEl.nodeName);\n                            util.copyTagAttributes(newFormat, formatEl, options.lineAttrReset);\n                            let child = focusBR;\n                            do {\n                                if (!util.isBreak(selectionNode) && selectionNode.nodeType === 1) {\n                                    const f = selectionNode.cloneNode(false);\n                                    f.appendChild(child);\n                                    child = f;\n                                }\n                                selectionNode = selectionNode.parentNode;\n                            }while (formatEl !== selectionNode && formatEl.contains(selectionNode));\n                            newFormat.appendChild(child);\n                            formatEl.parentNode.insertBefore(newFormat, formatStartEdge && !formatEndEdge ? formatEl : formatEl.nextElementSibling);\n                            if (formatEndEdge) {\n                                core.setRange(focusBR, 1, focusBR, 1);\n                            }\n                            break;\n                        }\n                        if (formatEl) {\n                            e.stopPropagation();\n                            let newEl;\n                            let offset = 0;\n                            if (!range.collapsed) {\n                                const isMultiLine = util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null);\n                                const newFormat = formatEl.cloneNode(false);\n                                newFormat.innerHTML = \"<br>\";\n                                const r = core.removeNode();\n                                newEl = util.getFormatElement(r.container, null);\n                                if (!newEl) {\n                                    if (util.isWysiwygDiv(r.container)) {\n                                        event._enterPrevent(e);\n                                        context.element.wysiwyg.appendChild(newFormat);\n                                        newEl = newFormat;\n                                        util.copyTagAttributes(newEl, formatEl, options.lineAttrReset);\n                                        core.setRange(newEl, offset, newEl, offset);\n                                    }\n                                    break;\n                                }\n                                const innerRange = util.getRangeFormatElement(r.container);\n                                newEl = newEl.contains(innerRange) ? util.getChildElement(innerRange, util.getFormatElement.bind(util)) : newEl;\n                                if (isMultiLine) {\n                                    if (formatEndEdge && !formatStartEdge) {\n                                        newEl.parentNode.insertBefore(newFormat, !r.prevContainer || r.container === r.prevContainer ? newEl.nextElementSibling : newEl);\n                                        newEl = newFormat;\n                                        offset = 0;\n                                    } else {\n                                        offset = r.offset;\n                                        if (formatStartEdge) {\n                                            const tempEl = newEl.parentNode.insertBefore(newFormat, newEl);\n                                            if (formatEndEdge) {\n                                                newEl = tempEl;\n                                                offset = 0;\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    if (formatEndEdge && formatStartEdge) {\n                                        newEl.parentNode.insertBefore(newFormat, r.prevContainer && r.container === r.prevContainer ? newEl.nextElementSibling : newEl);\n                                        newEl = newFormat;\n                                        offset = 0;\n                                    } else {\n                                        newEl = util.splitElement(r.container, r.offset, util.getElementDepth(formatEl));\n                                    }\n                                }\n                            } else {\n                                if (util.onlyZeroWidthSpace(formatEl)) {\n                                    newEl = core.appendFormatTag(formatEl, formatEl.cloneNode(false));\n                                } else {\n                                    newEl = util.splitElement(range.endContainer, range.endOffset, util.getElementDepth(formatEl));\n                                }\n                            }\n                            event._enterPrevent(e);\n                            util.copyTagAttributes(newEl, formatEl, options.lineAttrReset);\n                            core.setRange(newEl, offset, newEl, offset);\n                            break;\n                        }\n                    }\n                    if (selectRange) break;\n                    if (rangeEl && util.getParentElement(rangeEl, \"FIGCAPTION\") && util.getParentElement(rangeEl, util.isList)) {\n                        event._enterPrevent(e);\n                        formatEl = core.appendFormatTag(formatEl, null);\n                        core.setRange(formatEl, 0, formatEl, 0);\n                    }\n                    if (fileComponentName) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        core.containerOff();\n                        core.controllersOff();\n                        const compContext = context[fileComponentName];\n                        const container = compContext._container;\n                        const sibling = container.previousElementSibling || container.nextElementSibling;\n                        let newEl = null;\n                        if (util.isListCell(container.parentNode)) {\n                            newEl = util.createElement(\"BR\");\n                        } else {\n                            newEl = util.createElement(util.isFormatElement(sibling) && !util.isRangeFormatElement(sibling) ? sibling.nodeName : options.defaultTag);\n                            newEl.innerHTML = \"<br>\";\n                        }\n                        if (shift) container.parentNode.insertBefore(newEl, container);\n                        else container.parentNode.insertBefore(newEl, container.nextElementSibling);\n                        core.callPlugin(fileComponentName, function() {\n                            if (core.selectComponent(compContext._element, fileComponentName) === false) core.blur();\n                        }, null);\n                    }\n                    break;\n                case 27:\n                    if (fileComponentName) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        core.controllersOff();\n                        return false;\n                    }\n                    break;\n            }\n            if (shift && keyCode === 16) {\n                e.preventDefault();\n                e.stopPropagation();\n                const tablePlugin = core.plugins.table;\n                if (tablePlugin && !tablePlugin._shift && !tablePlugin._ref) {\n                    const cell = util.getParentElement(formatEl, util.isCell);\n                    if (cell) {\n                        tablePlugin.onTableCellMultiSelect.call(core, cell, true);\n                        return;\n                    }\n                }\n            } else if (shift && (util.isOSX_IOS ? alt : ctrl) && keyCode === 32) {\n                e.preventDefault();\n                e.stopPropagation();\n                const nbsp = core.insertNode(util.createTextNode(\"\\xa0\"));\n                if (nbsp && nbsp.container) {\n                    core.setRange(nbsp.container, nbsp.endOffset, nbsp.container, nbsp.endOffset);\n                    return;\n                }\n            }\n            if (util.isIE && !ctrl && !alt && !selectRange && !event._nonTextKeyCode.test(keyCode) && util.isBreak(range.commonAncestorContainer)) {\n                const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                core.insertNode(zeroWidth, null, false);\n                core.setRange(zeroWidth, 1, zeroWidth, 1);\n            }\n            if (event._directionKeyCode.test(keyCode)) {\n                core._editorRange();\n                event._applyTagEffects();\n            }\n        },\n        _onKeyDown_wysiwyg_arrowKey: function(e) {\n            if (e.shiftKey) return; // shiftkey needs(?) other custom handler. This one may be adapted (in 'selectNode(...)'), but not for table\n            let selectionNode = core.getSelectionNode();\n            const selectNode = function(node, offset = 0) {\n                e.preventDefault();\n                e.stopPropagation();\n                if (!node) return;\n                let componentInfo = core.getFileComponent(node);\n                if (componentInfo) {\n                    core.selectComponent(componentInfo.target, componentInfo.pluginName); // more responsive for key holdness\n                } else {\n                    core.setRange(node, offset, node, offset);\n                    core.controllersOff();\n                }\n            };\n            const table = util.getParentElement(selectionNode, \"table\");\n            if (table) {\n                const currentRow = util.getParentElement(selectionNode, \"tr\");\n                const currentCell = util.getParentElement(selectionNode, \"td\");\n                let currentCellFirstNode = currentCell;\n                let currentCellLastNode = currentCell;\n                if (currentCell) {\n                    while(currentCellFirstNode.firstChild)currentCellFirstNode = currentCellFirstNode.firstChild;\n                    while(currentCellLastNode.lastChild)currentCellLastNode = currentCellLastNode.lastChild;\n                }\n                let selectionNodeDeepestFirstChild = selectionNode;\n                while(selectionNodeDeepestFirstChild.firstChild)selectionNodeDeepestFirstChild = selectionNodeDeepestFirstChild.firstChild;\n                const isCellFirstNode = selectionNodeDeepestFirstChild === currentCellFirstNode;\n                const isCellLastNode = selectionNodeDeepestFirstChild === currentCellLastNode;\n                let siblingToSet = null;\n                let offset = 0;\n                if (e.keyCode === 38 && isCellFirstNode) {\n                    const previousRow = currentRow && currentRow.previousElementSibling;\n                    if (previousRow) siblingToSet = previousRow.children[currentCell.cellIndex];\n                    else siblingToSet = util.getPreviousDeepestNode(table, core.context.element.wysiwyg);\n                    while(siblingToSet.lastChild)siblingToSet = siblingToSet.lastChild;\n                    if (siblingToSet) offset = siblingToSet.textContent.length;\n                } else if (e.keyCode === 40 && isCellLastNode) {\n                    const nextRow = currentRow && currentRow.nextElementSibling;\n                    if (nextRow) siblingToSet = nextRow.children[currentCell.cellIndex];\n                    else siblingToSet = util.getNextDeepestNode(table, core.context.element.wysiwyg);\n                    while(siblingToSet.firstChild)siblingToSet = siblingToSet.firstChild;\n                }\n                if (siblingToSet) {\n                    selectNode(siblingToSet, offset);\n                    return false;\n                }\n            }\n            const componentInfo = core.getFileComponent(selectionNode);\n            if (componentInfo) {\n                const selectPrevious = /37|38/.test(e.keyCode);\n                const selectNext = /39|40/.test(e.keyCode);\n                if (selectPrevious) {\n                    const previousDeepestNode = util.getPreviousDeepestNode(componentInfo.target, core.context.element.wysiwyg);\n                    selectNode(previousDeepestNode, previousDeepestNode && previousDeepestNode.textContent.length);\n                } else if (selectNext) {\n                    const nextDeepestNode = util.getNextDeepestNode(componentInfo.target, core.context.element.wysiwyg);\n                    selectNode(nextDeepestNode);\n                }\n            }\n        },\n        onKeyUp_wysiwyg: function(e) {\n            if (event._onShortcutKey) return;\n            core._editorRange();\n            const keyCode = e.keyCode;\n            const ctrl = e.ctrlKey || e.metaKey || keyCode === 91 || keyCode === 92 || keyCode === 224;\n            const alt = e.altKey;\n            if (core.isReadOnly) {\n                if (!ctrl && event._cursorMoveKeyCode.test(keyCode)) event._applyTagEffects();\n                return;\n            }\n            const range = core.getRange();\n            let selectionNode = core.getSelectionNode();\n            if (core._isBalloon && (core._isBalloonAlways && keyCode !== 27 || !range.collapsed)) {\n                if (core._isBalloonAlways) {\n                    if (keyCode !== 27) event._showToolbarBalloonDelay();\n                } else {\n                    event._showToolbarBalloon();\n                    return;\n                }\n            }\n            let selectionNodeDeepestFirstChild = selectionNode;\n            while(selectionNodeDeepestFirstChild.firstChild)selectionNodeDeepestFirstChild = selectionNodeDeepestFirstChild.firstChild;\n            const selectedComponentInfo = core.getFileComponent(selectionNodeDeepestFirstChild);\n            if (!(e.keyCode === 16 || e.shiftKey) && selectedComponentInfo) core.selectComponent(selectedComponentInfo.target, selectedComponentInfo.pluginName);\n            else if (core.currentFileComponentInfo) core.controllersOff();\n            /** when format tag deleted */ if (keyCode === 8 && util.isWysiwygDiv(selectionNode) && selectionNode.textContent === \"\" && selectionNode.children.length === 0) {\n                e.preventDefault();\n                e.stopPropagation();\n                selectionNode.innerHTML = \"\";\n                const oFormatTag = util.createElement(util.isFormatElement(core._variable.currentNodes[0]) ? core._variable.currentNodes[0] : options.defaultTag);\n                oFormatTag.innerHTML = \"<br>\";\n                selectionNode.appendChild(oFormatTag);\n                core.setRange(oFormatTag, 0, oFormatTag, 0);\n                event._applyTagEffects();\n                core.history.push(false);\n                return;\n            }\n            const formatEl = util.getFormatElement(selectionNode, null);\n            const rangeEl = util.getRangeFormatElement(selectionNode, null);\n            const attrs = core._formatAttrsTemp;\n            if (attrs) {\n                for(let i = 0, len = attrs.length; i < len; i++){\n                    if (keyCode === 13 && /^id$/i.test(attrs[i].name)) {\n                        formatEl.removeAttribute(\"id\");\n                        continue;\n                    }\n                    formatEl.setAttribute(attrs[i].name, attrs[i].value);\n                }\n                core._formatAttrsTemp = null;\n            }\n            if (!formatEl && range.collapsed && !util.isComponent(selectionNode) && !util.isList(selectionNode) && core._setDefaultFormat(util.isRangeFormatElement(rangeEl) ? \"DIV\" : options.defaultTag) !== null) {\n                selectionNode = core.getSelectionNode();\n            }\n            const textKey = !ctrl && !alt && !event._nonTextKeyCode.test(keyCode);\n            if (textKey && selectionNode.nodeType === 3 && util.zeroWidthRegExp.test(selectionNode.textContent) && !(e.isComposing !== undefined ? e.isComposing : event._IEisComposing)) {\n                let so = range.startOffset, eo = range.endOffset;\n                const frontZeroWidthCnt = (selectionNode.textContent.substring(0, eo).match(event._frontZeroWidthReg) || \"\").length;\n                so = range.startOffset - frontZeroWidthCnt;\n                eo = range.endOffset - frontZeroWidthCnt;\n                selectionNode.textContent = selectionNode.textContent.replace(util.zeroWidthRegExp, \"\");\n                core.setRange(selectionNode, so < 0 ? 0 : so, selectionNode, eo < 0 ? 0 : eo);\n            }\n            core._charCount(\"\");\n            // user event\n            if (typeof functions.onKeyUp === \"function\" && functions.onKeyUp(e, core) === false) return;\n            // history stack\n            if (!ctrl && !alt && !event._historyIgnoreKeyCode.test(keyCode)) {\n                core.history.push(true);\n            }\n        },\n        onScroll_wysiwyg: function(e) {\n            core.controllersOff();\n            if (core._isBalloon) event._hideToolbar();\n            // user event\n            if (typeof functions.onScroll === \"function\") functions.onScroll(e, core);\n        },\n        onFocus_wysiwyg: function(e) {\n            if (core._antiBlur) return;\n            core.hasFocus = true;\n            _w.setTimeout(event._applyTagEffects);\n            if (core._isInline) event._showToolbarInline();\n            // user event\n            if (typeof functions.onFocus === \"function\") functions.onFocus(e, core);\n        },\n        onBlur_wysiwyg: function(e) {\n            if (core._antiBlur || core._variable.isCodeView) return;\n            core.hasFocus = false;\n            core.effectNode = null;\n            core.controllersOff();\n            if (core._isInline || core._isBalloon) event._hideToolbar();\n            core._setKeyEffect([]);\n            core._variable.currentNodes = [];\n            core._variable.currentNodesMap = [];\n            if (options.showPathLabel) context.element.navigation.textContent = \"\";\n            // user event\n            if (typeof functions.onBlur === \"function\") functions.onBlur(e, core, this);\n        },\n        onMouseDown_resizingBar: function(e) {\n            e.stopPropagation();\n            core.submenuOff();\n            core.controllersOff();\n            core._variable.resizeClientY = e.clientY;\n            context.element.resizeBackground.style.display = \"block\";\n            function closureFunc() {\n                context.element.resizeBackground.style.display = \"none\";\n                _d.removeEventListener(\"mousemove\", event._resize_editor);\n                _d.removeEventListener(\"mouseup\", closureFunc);\n            }\n            _d.addEventListener(\"mousemove\", event._resize_editor);\n            _d.addEventListener(\"mouseup\", closureFunc);\n        },\n        _resize_editor: function(e) {\n            const resizeInterval = context.element.editorArea.offsetHeight + (e.clientY - core._variable.resizeClientY);\n            const h = resizeInterval < core._variable.minResizingSize ? core._variable.minResizingSize : resizeInterval;\n            context.element.wysiwygFrame.style.height = context.element.code.style.height = h + \"px\";\n            core._variable.resizeClientY = e.clientY;\n            if (!util.isResizeObserverSupported) core.__callResizeFunction(h, null);\n        },\n        onResize_window: function() {\n            if (!util.isResizeObserverSupported) core.resetResponsiveToolbar();\n            const toolbar = context.element.toolbar;\n            const isToolbarHidden = toolbar.style.display === \"none\" || core._isInline && !core._inlineToolbarAttr.isShow;\n            if (toolbar.offsetWidth === 0 && !isToolbarHidden) return;\n            if (context.fileBrowser && context.fileBrowser.area.style.display === \"block\") {\n                context.fileBrowser.body.style.maxHeight = _w.innerHeight - context.fileBrowser.header.offsetHeight - 50 + \"px\";\n            }\n            if (core.submenuActiveButton && core.submenu) {\n                core._setMenuPosition(core.submenuActiveButton, core.submenu);\n            }\n            if (core._variable.isFullScreen) {\n                core._variable.innerHeight_fullScreen += _w.innerHeight - toolbar.offsetHeight - core._variable.innerHeight_fullScreen;\n                context.element.editorArea.style.height = core._variable.innerHeight_fullScreen + \"px\";\n                return;\n            }\n            if (core._variable.isCodeView && core._isInline) {\n                event._showToolbarInline();\n                return;\n            }\n            core._iframeAutoHeight();\n            if (core._sticky) {\n                toolbar.style.width = context.element.topArea.offsetWidth - 2 + \"px\";\n                event.onScroll_window();\n            }\n        },\n        onScroll_window: function() {\n            if (core._variable.isFullScreen || context.element.toolbar.offsetWidth === 0 || options.stickyToolbar < 0) return;\n            const element = context.element;\n            const editorHeight = element.editorArea.offsetHeight;\n            const y = (this.scrollY || _d.documentElement.scrollTop) + options.stickyToolbar;\n            const editorTop = event._getEditorOffsets(options.toolbarContainer).top - (core._isInline ? element.toolbar.offsetHeight : 0);\n            const inlineOffset = core._isInline && y - editorTop > 0 ? y - editorTop - context.element.toolbar.offsetHeight : 0;\n            if (y < editorTop) {\n                event._offStickyToolbar();\n            } else if (y + core._variable.minResizingSize >= editorHeight + editorTop) {\n                if (!core._sticky) event._onStickyToolbar(inlineOffset);\n                element.toolbar.style.top = inlineOffset + editorHeight + editorTop + options.stickyToolbar - y - core._variable.minResizingSize + \"px\";\n            } else if (y >= editorTop) {\n                event._onStickyToolbar(inlineOffset);\n            }\n        },\n        _getEditorOffsets: function(container) {\n            let offsetEl = container || context.element.topArea;\n            let t = 0, l = 0, s = 0;\n            while(offsetEl){\n                t += offsetEl.offsetTop;\n                l += offsetEl.offsetLeft;\n                s += offsetEl.scrollTop;\n                offsetEl = offsetEl.offsetParent;\n            }\n            return {\n                top: t,\n                left: l,\n                scroll: s\n            };\n        },\n        _getPageBottomSpace: function() {\n            return _d.documentElement.scrollHeight - (event._getEditorOffsets(null).top + context.element.topArea.offsetHeight);\n        },\n        _onStickyToolbar: function(inlineOffset) {\n            const element = context.element;\n            if (!core._isInline && !options.toolbarContainer) {\n                element._stickyDummy.style.height = element.toolbar.offsetHeight + \"px\";\n                element._stickyDummy.style.display = \"block\";\n            }\n            element.toolbar.style.top = options.stickyToolbar + inlineOffset + \"px\";\n            element.toolbar.style.width = core._isInline ? core._inlineToolbarAttr.width : element.toolbar.offsetWidth + \"px\";\n            util.addClass(element.toolbar, \"se-toolbar-sticky\");\n            core._sticky = true;\n        },\n        _offStickyToolbar: function() {\n            const element = context.element;\n            element._stickyDummy.style.display = \"none\";\n            element.toolbar.style.top = core._isInline ? core._inlineToolbarAttr.top : \"\";\n            element.toolbar.style.width = core._isInline ? core._inlineToolbarAttr.width : \"\";\n            element.editorArea.style.marginTop = \"\";\n            util.removeClass(element.toolbar, \"se-toolbar-sticky\");\n            core._sticky = false;\n        },\n        _codeViewAutoHeight: function() {\n            if (core._variable.isFullScreen) return;\n            context.element.code.style.height = context.element.code.scrollHeight + \"px\";\n        },\n        // FireFox - table delete, Chrome - image, video, audio\n        _hardDelete: function() {\n            const range = core.getRange();\n            const sc = range.startContainer;\n            const ec = range.endContainer;\n            // table\n            const sCell = util.getRangeFormatElement(sc);\n            const eCell = util.getRangeFormatElement(ec);\n            const sIsCell = util.isCell(sCell);\n            const eIsCell = util.isCell(eCell);\n            const ancestor = range.commonAncestorContainer;\n            if ((sIsCell && !sCell.previousElementSibling && !sCell.parentElement.previousElementSibling || eIsCell && !eCell.nextElementSibling && !eCell.parentElement.nextElementSibling) && sCell !== eCell) {\n                if (!sIsCell) {\n                    util.removeItem(util.getParentElement(eCell, function(current) {\n                        return ancestor === current.parentNode;\n                    }));\n                } else if (!eIsCell) {\n                    util.removeItem(util.getParentElement(sCell, function(current) {\n                        return ancestor === current.parentNode;\n                    }));\n                } else {\n                    util.removeItem(util.getParentElement(sCell, function(current) {\n                        return ancestor === current.parentNode;\n                    }));\n                    core.nativeFocus();\n                    return true;\n                }\n            }\n            // component\n            const sComp = sc.nodeType === 1 ? util.getParentElement(sc, \".se-component\") : null;\n            const eComp = ec.nodeType === 1 ? util.getParentElement(ec, \".se-component\") : null;\n            if (sComp) util.removeItem(sComp);\n            if (eComp) util.removeItem(eComp);\n            return false;\n        },\n        onPaste_wysiwyg: function(e) {\n            const clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;\n            if (!clipboardData) return true;\n            return event._dataTransferAction(\"paste\", e, clipboardData);\n        },\n        _setClipboardComponent: function(e, info, clipboardData) {\n            e.preventDefault();\n            e.stopPropagation();\n            clipboardData.setData(\"text/html\", info.component.outerHTML);\n        },\n        onCopy_wysiwyg: function(e) {\n            const clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;\n            // user event\n            if (typeof functions.onCopy === \"function\" && functions.onCopy(e, clipboardData, core) === false) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            const info = core.currentFileComponentInfo;\n            if (info && !util.isIE) {\n                event._setClipboardComponent(e, info, clipboardData);\n                util.addClass(info.component, \"se-component-copy\");\n                // copy effect\n                _w.setTimeout(function() {\n                    util.removeClass(info.component, \"se-component-copy\");\n                }, 150);\n            }\n        },\n        onSave_wysiwyg: function(content) {\n            // user event\n            if (typeof functions.onSave === \"function\") {\n                functions.onSave(content, core);\n                return;\n            }\n        },\n        onCut_wysiwyg: function(e) {\n            const clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;\n            // user event\n            if (typeof functions.onCut === \"function\" && functions.onCut(e, clipboardData, core) === false) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            const info = core.currentFileComponentInfo;\n            if (info && !util.isIE) {\n                event._setClipboardComponent(e, info, clipboardData);\n                util.removeItem(info.component);\n                core.controllersOff();\n            }\n            _w.setTimeout(function() {\n                // history stack\n                core.history.push(false);\n            });\n        },\n        onDrop_wysiwyg: function(e) {\n            if (core.isReadOnly || util.isIE) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            const dataTransfer = e.dataTransfer;\n            if (!dataTransfer) return true;\n            event._setDropLocationSelection(e);\n            core.removeNode();\n            if (!document.body.contains(core.currentControllerTarget)) core.controllersOff();\n            return event._dataTransferAction(\"drop\", e, dataTransfer);\n        },\n        _setDropLocationSelection: function(e) {\n            const range = {\n                startContainer: null,\n                startOffset: null,\n                endContainer: null,\n                endOffset: null\n            };\n            let r = null;\n            if (e.rangeParent) {\n                range.startContainer = e.rangeParent;\n                range.startOffset = e.rangeOffset;\n                range.endContainer = e.rangeParent;\n                range.endOffset = e.rangeOffset;\n            } else if (core._wd.caretRangeFromPoint) {\n                r = core._wd.caretRangeFromPoint(e.clientX, e.clientY);\n            } else {\n                r = core.getRange();\n            }\n            if (r) {\n                range.startContainer = r.startContainer;\n                range.startOffset = r.startOffset;\n                range.endContainer = r.endContainer;\n                range.endOffset = r.endOffset;\n            }\n            if (range.startContainer === range.endContainer) {\n                const component = util.getParentElement(range.startContainer, util.isComponent);\n                if (component) {\n                    range.startContainer = component;\n                    range.startOffset = 0;\n                    range.endContainer = component;\n                    range.endOffset = 0;\n                }\n            }\n            core.setRange(range.startContainer, range.startOffset, range.endContainer, range.endOffset);\n        },\n        _dataTransferAction: function(type, e, data) {\n            let plainText, cleanData;\n            if (util.isIE) {\n                plainText = data.getData(\"Text\");\n                const range = core.getRange();\n                const tempDiv = util.createElement(\"DIV\");\n                const tempRange = {\n                    sc: range.startContainer,\n                    so: range.startOffset,\n                    ec: range.endContainer,\n                    eo: range.endOffset\n                };\n                tempDiv.setAttribute(\"contenteditable\", true);\n                tempDiv.style.cssText = \"position:absolute; top:0; left:0; width:1px; height:1px; overflow:hidden;\";\n                context.element.relative.appendChild(tempDiv);\n                tempDiv.focus();\n                _w.setTimeout(function() {\n                    cleanData = tempDiv.innerHTML;\n                    util.removeItem(tempDiv);\n                    core.setRange(tempRange.sc, tempRange.so, tempRange.ec, tempRange.eo);\n                    event._setClipboardData(type, e, plainText, cleanData, data);\n                });\n                return true;\n            } else {\n                plainText = data.getData(\"text/plain\");\n                cleanData = data.getData(\"text/html\");\n                if (event._setClipboardData(type, e, plainText, cleanData, data) === false) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    return false;\n                }\n            }\n        },\n        _setClipboardData: function(type, e, plainText, cleanData, data) {\n            // MS word, OneNode, Excel\n            const MSData = /class=[\"']*Mso(Normal|List)/i.test(cleanData) || /content=[\"']*Word.Document/i.test(cleanData) || /content=[\"']*OneNote.File/i.test(cleanData) || /content=[\"']*Excel.Sheet/i.test(cleanData);\n            const onlyText = !cleanData;\n            if (!onlyText) {\n                cleanData = cleanData.replace(/^<html>\\r?\\n?<body>\\r?\\n?\\x3C!--StartFragment--\\>|\\x3C!--EndFragment-->\\r?\\n?<\\/body\\>\\r?\\n?<\\/html>$/g, \"\");\n                if (MSData) {\n                    cleanData = cleanData.replace(/\\n/g, \" \");\n                    plainText = plainText.replace(/\\n/g, \" \");\n                }\n                cleanData = core.cleanHTML(cleanData, core.pasteTagsWhitelistRegExp, core.pasteTagsBlacklistRegExp);\n            } else {\n                cleanData = util._HTMLConvertor(plainText).replace(/\\n/g, \"<br>\");\n            }\n            const maxCharCount = core._charCount(core._charTypeHTML ? cleanData : plainText);\n            // user event - paste\n            if (type === \"paste\" && typeof functions.onPaste === \"function\") {\n                const value = functions.onPaste(e, cleanData, maxCharCount, core);\n                if (value === false) {\n                    return false;\n                } else if (typeof value === \"string\") {\n                    if (!value) return false;\n                    cleanData = value;\n                }\n            }\n            // user event - drop\n            if (type === \"drop\" && typeof functions.onDrop === \"function\") {\n                const value = functions.onDrop(e, cleanData, maxCharCount, core);\n                if (value === false) {\n                    return false;\n                } else if (typeof value === \"string\") {\n                    if (!value) return false;\n                    cleanData = value;\n                }\n            }\n            // files\n            const files = data.files;\n            if (files.length > 0 && !MSData) {\n                if (/^image/.test(files[0].type) && core.plugins.image) {\n                    functions.insertImage(files);\n                }\n                return false;\n            }\n            if (!maxCharCount) {\n                return false;\n            }\n            if (cleanData) {\n                functions.insertHTML(cleanData, true, false);\n                return false;\n            }\n        },\n        onMouseMove_wysiwyg: function(e) {\n            if (core.isDisabled || core.isReadOnly) return false;\n            const component = util.getParentElement(e.target, util.isComponent);\n            const lineBreakerStyle = core._lineBreaker.style;\n            if (component && !core.currentControllerName) {\n                const ctxEl = context.element;\n                let scrollTop = 0;\n                let el = ctxEl.wysiwyg;\n                do {\n                    scrollTop += el.scrollTop;\n                    el = el.parentElement;\n                }while (el && !/^(BODY|HTML)$/i.test(el.nodeName));\n                const wScroll = ctxEl.wysiwyg.scrollTop;\n                const offsets = event._getEditorOffsets(null);\n                const componentTop = util.getOffset(component, ctxEl.wysiwygFrame).top + wScroll;\n                const y = e.pageY + scrollTop + (options.iframe && !options.toolbarContainer ? ctxEl.toolbar.offsetHeight : 0);\n                const c = componentTop + (options.iframe ? scrollTop : offsets.top);\n                const isList = util.isListCell(component.parentNode);\n                let dir = \"\", top = \"\";\n                if ((isList ? !component.previousSibling : !util.isFormatElement(component.previousElementSibling)) && y < c + 20) {\n                    top = componentTop;\n                    dir = \"t\";\n                } else if ((isList ? !component.nextSibling : !util.isFormatElement(component.nextElementSibling)) && y > c + component.offsetHeight - 20) {\n                    top = componentTop + component.offsetHeight;\n                    dir = \"b\";\n                } else {\n                    lineBreakerStyle.display = \"none\";\n                    return;\n                }\n                core._variable._lineBreakComp = component;\n                core._variable._lineBreakDir = dir;\n                lineBreakerStyle.top = top - wScroll + \"px\";\n                core._lineBreakerButton.style.left = util.getOffset(component).left + component.offsetWidth / 2 - 15 + \"px\";\n                lineBreakerStyle.display = \"block\";\n            } else if (lineBreakerStyle.display !== \"none\") {\n                lineBreakerStyle.display = \"none\";\n            }\n        },\n        _enterPrevent (e) {\n            e.preventDefault();\n            if (!util.isMobile) return;\n            core.__focusTemp.focus();\n        },\n        _onMouseDown_lineBreak: function(e) {\n            e.preventDefault();\n        },\n        _onLineBreak: function(e) {\n            e.preventDefault();\n            const component = core._variable._lineBreakComp;\n            const dir = !this ? core._variable._lineBreakDir : this;\n            const isList = util.isListCell(component.parentNode);\n            const format = util.createElement(isList ? \"BR\" : util.isCell(component.parentNode) ? \"DIV\" : options.defaultTag);\n            if (!isList) format.innerHTML = \"<br>\";\n            if (core._charTypeHTML && !core.checkCharCount(format.outerHTML, \"byte-html\")) return;\n            component.parentNode.insertBefore(format, dir === \"t\" ? component : component.nextSibling);\n            core._lineBreaker.style.display = \"none\";\n            core._variable._lineBreakComp = null;\n            const focusEl = isList ? format : format.firstChild;\n            core.setRange(focusEl, 1, focusEl, 1);\n            // history stack\n            core.history.push(false);\n        },\n        _resizeObserver: null,\n        _toolbarObserver: null,\n        _addEvent: function() {\n            const eventWysiwyg = options.iframe ? core._ww : context.element.wysiwyg;\n            if (util.isResizeObserverSupported) {\n                this._resizeObserver = new _w.ResizeObserver(function(entries) {\n                    core.__callResizeFunction(-1, entries[0]);\n                });\n            }\n            /** toolbar event */ context.element.toolbar.addEventListener(\"mousedown\", event._buttonsEventHandler, false);\n            context.element._menuTray.addEventListener(\"mousedown\", event._buttonsEventHandler, false);\n            context.element.toolbar.addEventListener(\"click\", event.onClick_toolbar, false);\n            /** editor area */ eventWysiwyg.addEventListener(\"mousedown\", event.onMouseDown_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"click\", event.onClick_wysiwyg, false);\n            eventWysiwyg.addEventListener(util.isIE ? \"textinput\" : \"input\", event.onInput_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"keydown\", event.onKeyDown_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"keyup\", event.onKeyUp_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"paste\", event.onPaste_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"copy\", event.onCopy_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"cut\", event.onCut_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"drop\", event.onDrop_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"scroll\", event.onScroll_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"focus\", event.onFocus_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"blur\", event.onBlur_wysiwyg, false);\n            /** line breaker */ event._lineBreakerBind = {\n                a: event._onLineBreak.bind(\"\"),\n                t: event._onLineBreak.bind(\"t\"),\n                b: event._onLineBreak.bind(\"b\")\n            };\n            eventWysiwyg.addEventListener(\"mousemove\", event.onMouseMove_wysiwyg, false);\n            core._lineBreakerButton.addEventListener(\"mousedown\", event._onMouseDown_lineBreak, false);\n            core._lineBreakerButton.addEventListener(\"click\", event._lineBreakerBind.a, false);\n            context.element.lineBreaker_t.addEventListener(\"mousedown\", event._lineBreakerBind.t, false);\n            context.element.lineBreaker_b.addEventListener(\"mousedown\", event._lineBreakerBind.b, false);\n            /** Events are registered mobile.  */ eventWysiwyg.addEventListener(\"touchstart\", event.onMouseDown_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            eventWysiwyg.addEventListener(\"touchend\", event.onClick_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            /** code view area auto line */ if (options.height === \"auto\" && !options.codeMirrorEditor) {\n                context.element.code.addEventListener(\"keydown\", event._codeViewAutoHeight, false);\n                context.element.code.addEventListener(\"keyup\", event._codeViewAutoHeight, false);\n                context.element.code.addEventListener(\"paste\", event._codeViewAutoHeight, false);\n            }\n            /** resizingBar */ if (context.element.resizingBar) {\n                if (/\\d+/.test(options.height) && options.resizeEnable) {\n                    context.element.resizingBar.addEventListener(\"mousedown\", event.onMouseDown_resizingBar, false);\n                } else {\n                    util.addClass(context.element.resizingBar, \"se-resizing-none\");\n                }\n            }\n            /** set response toolbar */ event._setResponsiveToolbar();\n            /** responsive toolbar observer */ if (util.isResizeObserverSupported) this._toolbarObserver = new _w.ResizeObserver(core.resetResponsiveToolbar);\n            /** window event */ _w.addEventListener(\"resize\", event.onResize_window, false);\n            if (options.stickyToolbar > -1) {\n                _w.addEventListener(\"scroll\", event.onScroll_window, false);\n            }\n        },\n        _removeEvent: function() {\n            const eventWysiwyg = options.iframe ? core._ww : context.element.wysiwyg;\n            context.element.toolbar.removeEventListener(\"mousedown\", event._buttonsEventHandler);\n            context.element._menuTray.removeEventListener(\"mousedown\", event._buttonsEventHandler);\n            context.element.toolbar.removeEventListener(\"click\", event.onClick_toolbar);\n            eventWysiwyg.removeEventListener(\"mousedown\", event.onMouseDown_wysiwyg);\n            eventWysiwyg.removeEventListener(\"click\", event.onClick_wysiwyg);\n            eventWysiwyg.removeEventListener(util.isIE ? \"textinput\" : \"input\", event.onInput_wysiwyg);\n            eventWysiwyg.removeEventListener(\"keydown\", event.onKeyDown_wysiwyg);\n            eventWysiwyg.removeEventListener(\"keyup\", event.onKeyUp_wysiwyg);\n            eventWysiwyg.removeEventListener(\"paste\", event.onPaste_wysiwyg);\n            eventWysiwyg.removeEventListener(\"copy\", event.onCopy_wysiwyg);\n            eventWysiwyg.removeEventListener(\"cut\", event.onCut_wysiwyg);\n            eventWysiwyg.removeEventListener(\"drop\", event.onDrop_wysiwyg);\n            eventWysiwyg.removeEventListener(\"scroll\", event.onScroll_wysiwyg);\n            eventWysiwyg.removeEventListener(\"mousemove\", event.onMouseMove_wysiwyg);\n            core._lineBreakerButton.removeEventListener(\"mousedown\", event._onMouseDown_lineBreak);\n            core._lineBreakerButton.removeEventListener(\"click\", event._lineBreakerBind.a);\n            context.element.lineBreaker_t.removeEventListener(\"mousedown\", event._lineBreakerBind.t);\n            context.element.lineBreaker_b.removeEventListener(\"mousedown\", event._lineBreakerBind.b);\n            event._lineBreakerBind = null;\n            eventWysiwyg.removeEventListener(\"touchstart\", event.onMouseDown_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            eventWysiwyg.removeEventListener(\"touchend\", event.onClick_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            eventWysiwyg.removeEventListener(\"focus\", event.onFocus_wysiwyg);\n            eventWysiwyg.removeEventListener(\"blur\", event.onBlur_wysiwyg);\n            context.element.code.removeEventListener(\"keydown\", event._codeViewAutoHeight);\n            context.element.code.removeEventListener(\"keyup\", event._codeViewAutoHeight);\n            context.element.code.removeEventListener(\"paste\", event._codeViewAutoHeight);\n            if (context.element.resizingBar) {\n                context.element.resizingBar.removeEventListener(\"mousedown\", event.onMouseDown_resizingBar);\n            }\n            if (event._resizeObserver) {\n                event._resizeObserver.unobserve(context.element.wysiwygFrame);\n                event._resizeObserver = null;\n            }\n            if (event._toolbarObserver) {\n                event._toolbarObserver.unobserve(context.element._toolbarShadow);\n                event._toolbarObserver = null;\n            }\n            _w.removeEventListener(\"resize\", event.onResize_window);\n            _w.removeEventListener(\"scroll\", event.onScroll_window);\n        },\n        _setResponsiveToolbar: function() {\n            if (_responsiveButtons.length === 0) {\n                _responsiveButtons = null;\n                return;\n            }\n            event._responsiveCurrentSize = \"default\";\n            const sizeArray = event._responsiveButtonSize = [];\n            const buttonsObj = event._responsiveButtons = {\n                default: _responsiveButtons[0]\n            };\n            for(let i = 1, len = _responsiveButtons.length, size, buttonGroup; i < len; i++){\n                buttonGroup = _responsiveButtons[i];\n                size = buttonGroup[0] * 1;\n                sizeArray.push(size);\n                buttonsObj[size] = buttonGroup[1];\n            }\n            sizeArray.sort(function(a, b) {\n                return a - b;\n            }).unshift(\"default\");\n        }\n    };\n    /** functions */ const functions = {\n        /**\r\n         * @description Core, Util object\r\n         */ core: core,\n        util: util,\n        /**\r\n         * @description Event functions\r\n         * @param {Object} e Event Object\r\n         * @param {Object} core Core object\r\n         */ onload: null,\n        onScroll: null,\n        onMouseDown: null,\n        onClick: null,\n        onInput: null,\n        onKeyDown: null,\n        onKeyUp: null,\n        onCopy: null,\n        onCut: null,\n        onFocus: null,\n        /**\r\n         * @description Event functions\r\n         * @param {Object} e Event Object\r\n         * @param {Object} core Core object\r\n         * @param {String} contents Current contents\r\n         */ onBlur: null,\n        /**\r\n         * @description Event functions\r\n         * @param {String} contents Current contents\r\n         * @param {Object} core Core object\r\n         */ onChange: null,\n        /**\r\n         * @description Event functions\r\n         * @param {String} contents Current contents\r\n         * @param {Object} core Core object\r\n         */ onSave: null,\n        /**\r\n         * @description Event functions (drop, paste)\r\n         * When false is returned, the default behavior is stopped.\r\n         * If the string is returned, the cleanData value is modified to the return value.\r\n         * @param {Object} e Event object.\r\n         * @param {String} cleanData HTML string modified for editor format.\r\n         * @param {Boolean} maxChartCount option (true if max character is exceeded)\r\n         * @param {Object} core Core object\r\n         * @returns {Boolean|String}\r\n         */ onDrop: null,\n        onPaste: null,\n        /**\r\n         * @description Called just before the inline toolbar is positioned and displayed on the screen.\r\n         * @param {Element} toolbar Toolbar Element\r\n         * @param {Object} context The editor's context object (editor.getContext())\r\n         * @param {Object} core Core object\r\n         */ showInline: null,\n        /**\r\n         * @description Called just after the controller is positioned and displayed on the screen.\r\n         * controller - editing elements displayed on the screen [image resizing, table editor, link editor..]]\r\n         * @param {String} name The name of the plugin that called the controller\r\n         * @param {Array} controllers Array of Controller elements\r\n         * @param {Object} core Core object\r\n         */ showController: null,\n        /**\r\n         * @description An event when toggling between code view and wysiwyg view.\r\n         * @param {Boolean} isCodeView Whether the current code view mode\r\n         * @param {Object} core Core object\r\n         */ toggleCodeView: null,\n        /**\r\n         * @description An event when toggling full screen.\r\n         * @param {Boolean} isFullScreen Whether the current full screen mode\r\n         * @param {Object} core Core object\r\n         */ toggleFullScreen: null,\n        /**\r\n         * @description It replaces the default callback function of the image upload\r\n         * @param {Object} response Response object\r\n         * @param {Object} info Input information\r\n         * - linkValue: Link url value\r\n         * - linkNewWindow: Open in new window Check Value\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update image if true, create image if false\r\n         * - element: If isUpdate is true, the currently selected image.\r\n         * @param {Object} core Core object\r\n         */ imageUploadHandler: null,\n        /**\r\n         * @description It replaces the default callback function of the video upload\r\n         * @param xmlHttp xmlHttpRequest object\r\n         * @param info Input information\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update video if true, create video if false\r\n         * - element: If isUpdate is true, the currently selected video.\r\n         * @param core Core object\r\n         */ videoUploadHandler: null,\n        /**\r\n         * @description It replaces the default callback function of the audio upload\r\n         * @param xmlHttp xmlHttpRequest object\r\n         * @param info Input information\r\n         * - isUpdate: Update audio if true, create audio if false\r\n         * - element: If isUpdate is true, the currently selected audio.\r\n         * @param core Core object\r\n         */ audioUploadHandler: null,\n        /**\r\n         * @description Called before the image is uploaded\r\n         * If true is returned, the internal upload process runs normally.\r\n         * If false is returned, no image upload is performed.\r\n         * If new fileList are returned,  replaced the previous fileList\r\n         * If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         * @param {Array} files Files array\r\n         * @param {Object} info info: {\r\n         * - linkValue: Link url value\r\n         * - linkNewWindow: Open in new window Check Value\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update image if true, create image if false\r\n         * - element: If isUpdate is true, the currently selected image.\r\n         * }\r\n         * @param {Object} core Core object\r\n         * @param {Function} uploadHandler If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         *                \"uploadHandler\" is an upload function with \"core\" and \"info\" bound.\r\n         *                [upload files] : uploadHandler(files or [new File(...),])\r\n         *                [error]        : uploadHandler(\"Error message\")\r\n         *                [Just finish]  : uploadHandler()\r\n         *                [directly register] : uploadHandler(response) // Same format as \"imageUploadUrl\" response\r\n         *                                   ex) {\r\n         *                                      // \"errorMessage\": \"insert error message\",\r\n         *                                      \"result\": [ { \"url\": \"...\", \"name\": \"...\", \"size\": \"999\" }, ]\r\n         *                                   }\r\n         * @returns {Boolean|Array|undefined}\r\n         */ onImageUploadBefore: null,\n        /**\r\n         * @description Called before the video is uploaded\r\n         * If true is returned, the internal upload process runs normally.\r\n         * If false is returned, no video(iframe, video) upload is performed.\r\n         * If new fileList are returned,  replaced the previous fileList\r\n         * If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         * @param {Array} files Files array\r\n         * @param {Object} info info: {\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update video if true, create video if false\r\n         * - element: If isUpdate is true, the currently selected video.\r\n         * }\r\n         * @param {Object} core Core object\r\n         * @param {Function} uploadHandler If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         *                \"uploadHandler\" is an upload function with \"core\" and \"info\" bound.\r\n         *                [upload files] : uploadHandler(files or [new File(...),])\r\n         *                [error]        : uploadHandler(\"Error message\")\r\n         *                [Just finish]  : uploadHandler()\r\n         *                [directly register] : uploadHandler(response) // Same format as \"videoUploadUrl\" response\r\n         *                                   ex) {\r\n         *                                      // \"errorMessage\": \"insert error message\",\r\n         *                                      \"result\": [ { \"url\": \"...\", \"name\": \"...\", \"size\": \"999\" }, ]\r\n         *                                   }\r\n         * @returns {Boolean|Array|undefined}\r\n         */ onVideoUploadBefore: null,\n        /**\r\n         * @description Called before the audio is uploaded\r\n         * If true is returned, the internal upload process runs normally.\r\n         * If false is returned, no audio upload is performed.\r\n         * If new fileList are returned,  replaced the previous fileList\r\n         * If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         * @param {Array} files Files array\r\n         * @param {Object} info info: {\r\n         * - isUpdate: Update audio if true, create audio if false\r\n         * - element: If isUpdate is true, the currently selected audio.\r\n         * }\r\n         * @param {Object} core Core object\r\n         * @param {Function} uploadHandler If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         *                \"uploadHandler\" is an upload function with \"core\" and \"info\" bound.\r\n         *                [upload files] : uploadHandler(files or [new File(...),])\r\n         *                [error]        : uploadHandler(\"Error message\")\r\n         *                [Just finish]  : uploadHandler()\r\n         *                [directly register] : uploadHandler(response) // Same format as \"audioUploadUrl\" response\r\n         *                                   ex) {\r\n         *                                      // \"errorMessage\": \"insert error message\",\r\n         *                                      \"result\": [ { \"url\": \"...\", \"name\": \"...\", \"size\": \"999\" }, ]\r\n         *                                   }\r\n         * @returns {Boolean|Array|undefined}\r\n         */ onAudioUploadBefore: null,\n        /**\r\n         * @description Called when the image is uploaded, updated, deleted\r\n         * @param {Element} targetElement Target element\r\n         * @param {Number} index Uploaded index\r\n         * @param {String} state Upload status ('create', 'update', 'delete')\r\n         * @param {Object} info Image info object\r\n         * - index: data index\r\n         * - name: file name\r\n         * - size: file size\r\n         * - select: select function\r\n         * - delete: delete function\r\n         * - element: target element\r\n         * - src: src attribute of tag\r\n         * @param {Number} remainingFilesCount Count of remaining files to upload (0 when added as a url)\r\n         * @param {Object} core Core object\r\n         */ onImageUpload: null,\n        /**\r\n        * @description Called when the video(iframe, video) is is uploaded, updated, deleted\r\n        * -- arguments is same \"onImageUpload\" --\r\n        */ onVideoUpload: null,\n        /**\r\n        * @description Called when the audio is is uploaded, updated, deleted\r\n        * -- arguments is same \"onImageUpload\" --\r\n        */ onAudioUpload: null,\n        /**\r\n         * @description Called when the image is upload failed\r\n         * @param {String} errorMessage Error message\r\n         * @param {Object} result Response Object\r\n         * @param {Object} core Core object\r\n         * @returns {Boolean}\r\n         */ onImageUploadError: null,\n        /**\r\n         * @description Called when the video(iframe, video) upload failed\r\n         * -- arguments is same \"onImageUploadError\" --\r\n         */ onVideoUploadError: null,\n        /**\r\n         * @description Called when the audio upload failed\r\n         * -- arguments is same \"onImageUploadError\" --\r\n         */ onAudioUploadError: null,\n        /**\r\n         * @description Called when the editor is resized using the bottom bar\r\n         */ onResizeEditor: null,\n        /**\r\n         * @description Called after the \"setToolbarButtons\" invocation.\r\n         * Can be used to tweak buttons properties (useful for custom buttons)\r\n         * @param {Array} buttonList Button list \r\n         * @param {Object} core Core object\r\n         */ onSetToolbarButtons: null,\n        /**\r\n         * @description Reset the buttons on the toolbar. (Editor is not reloaded)\r\n         * You cannot set a new plugin for the button.\r\n         * @param {Array} buttonList Button list \r\n         */ setToolbarButtons: function(buttonList) {\n            core.submenuOff();\n            core.containerOff();\n            core.moreLayerOff();\n            const newToolbar = _constructor__WEBPACK_IMPORTED_MODULE_4__[\"default\"]._createToolBar(_d, buttonList, core.plugins, options);\n            _responsiveButtons = newToolbar.responsiveButtons;\n            event._setResponsiveToolbar();\n            context.element.toolbar.replaceChild(newToolbar._buttonTray, context.element._buttonTray);\n            const newContext = (0,_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context.element.originElement, core._getConstructed(context.element), options);\n            context.element = newContext.element;\n            context.tool = newContext.tool;\n            if (options.iframe) context.element.wysiwyg = core._wd.body;\n            core._recoverButtonStates();\n            core._cachingButtons();\n            core.history._resetCachingButton();\n            core.effectNode = null;\n            if (core.hasFocus) event._applyTagEffects();\n            if (core.isReadOnly) util.setDisabledButtons(true, core.resizingDisabledButtons);\n            if (typeof functions.onSetToolbarButtons === \"function\") functions.onSetToolbarButtons(newToolbar._buttonTray.querySelectorAll(\"button\"), core);\n        },\n        /**\r\n         * @description Add or reset option property (Editor is reloaded)\r\n         * @param {Object} _options Options\r\n         */ setOptions: function(_options) {\n            event._removeEvent();\n            core._resetComponents();\n            util.removeClass(core._styleCommandMap.showBlocks, \"active\");\n            util.removeClass(core._styleCommandMap.codeView, \"active\");\n            core._variable.isCodeView = false;\n            core._iframeAuto = null;\n            core.plugins = _options.plugins || core.plugins;\n            const mergeOptions = [\n                options,\n                _options\n            ].reduce(function(init, option) {\n                for(let key in option){\n                    if (!util.hasOwn(option, key)) continue;\n                    if (key === \"plugins\" && option[key] && init[key]) {\n                        let i = init[key], o = option[key];\n                        i = i.length ? i : _w.Object.keys(i).map(function(name) {\n                            return i[name];\n                        });\n                        o = o.length ? o : _w.Object.keys(o).map(function(name) {\n                            return o[name];\n                        });\n                        init[key] = o.filter(function(val) {\n                            return i.indexOf(val) === -1;\n                        }).concat(i);\n                    } else {\n                        init[key] = option[key];\n                    }\n                }\n                return init;\n            }, {});\n            const el = context.element;\n            const _initHTML = el.wysiwyg.innerHTML;\n            // set option\n            const cons = _constructor__WEBPACK_IMPORTED_MODULE_4__[\"default\"]._setOptions(mergeOptions, context, options);\n            if (cons.callButtons) {\n                pluginCallButtons = cons.callButtons;\n                core.initPlugins = {};\n            }\n            if (cons.plugins) {\n                core.plugins = plugins = cons.plugins;\n            }\n            // reset context\n            if (el._menuTray.children.length === 0) this._menuTray = {};\n            _responsiveButtons = cons.toolbar.responsiveButtons;\n            core.options = options = mergeOptions;\n            core.lang = lang = options.lang;\n            if (options.iframe) {\n                el.wysiwygFrame.addEventListener(\"load\", function() {\n                    util._setIframeDocument(this, options);\n                    core._setOptionsInit(el, _initHTML);\n                });\n            }\n            el.editorArea.appendChild(el.wysiwygFrame);\n            if (!options.iframe) {\n                core._setOptionsInit(el, _initHTML);\n            }\n        },\n        /**\r\n         * @description Set \"options.defaultStyle\" style.\r\n         * Define the style of the edit area\r\n         * It can also be defined with the \"setOptions\" method, but the \"setDefaultStyle\" method does not render the editor again.\r\n         * @param {String} style Style string\r\n         */ setDefaultStyle: function(style) {\n            const newStyles = options._editorStyles = util._setDefaultOptionStyle(options, style);\n            const el = context.element;\n            // top area\n            el.topArea.style.cssText = newStyles.top;\n            // code view\n            el.code.style.cssText = options._editorStyles.frame;\n            el.code.style.display = \"none\";\n            if (options.height === \"auto\") {\n                el.code.style.overflow = \"hidden\";\n            } else {\n                el.code.style.overflow = \"\";\n            }\n            // wysiwyg frame\n            if (!options.iframe) {\n                el.wysiwygFrame.style.cssText = newStyles.frame + newStyles.editor;\n            } else {\n                el.wysiwygFrame.style.cssText = newStyles.frame;\n                el.wysiwyg.style.cssText = newStyles.editor;\n            }\n        },\n        /**\r\n         * @description Open a notice area\r\n         * @param {String} message Notice message\r\n         */ noticeOpen: function(message) {\n            core.notice.open.call(core, message);\n        },\n        /**\r\n         * @description Close a notice area\r\n         */ noticeClose: function() {\n            core.notice.close.call(core);\n        },\n        /**\r\n         * @description Copying the contents of the editor to the original textarea and execute onSave callback\r\n         * * not working during enabled codeView mode\r\n         */ save: function() {\n            const contents = core.getContents(false);\n            context.element.originElement.value = contents;\n            event.onSave_wysiwyg(contents, core);\n        },\n        /**\r\n         * @description Gets the suneditor's context object. Contains settings, plugins, and cached element objects\r\n         * @returns {Object}\r\n         */ getContext: function() {\n            return context;\n        },\n        /**\r\n         * @description Gets the contents of the suneditor\r\n         * * not working during enabled codeView mode\r\n         * @param {Boolean} onlyContents - Return only the contents of the body without headers when the \"fullPage\" option is true\r\n         * @returns {String}\r\n         */ getContents: function(onlyContents) {\n            return core.getContents(onlyContents);\n        },\n        /**\r\n         * @description Gets only the text of the suneditor contents\r\n         * * not working during enabled codeView mode\r\n         * @returns {String}\r\n         */ getText: function() {\n            return context.element.wysiwyg.textContent;\n        },\n        /**\r\n         * @description Get the editor's number of characters or binary data size.\r\n         * You can use the \"charCounterType\" option format.\r\n         * @param {String|null} charCounterType options - charCounterType ('char', 'byte', 'byte-html')\r\n         * If argument is no value, the currently set \"charCounterType\" option is used.\r\n         * @returns {Number}\r\n         */ getCharCount: function(charCounterType) {\n            charCounterType = typeof charCounterType === \"string\" ? charCounterType : options.charCounterType;\n            return core.getCharLength(core._charTypeHTML ? context.element.wysiwyg.innerHTML : context.element.wysiwyg.textContent, charCounterType);\n        },\n        /**\r\n         * @description Gets uploaded images informations\r\n         * - index: data index\r\n         * - name: file name\r\n         * - size: file size\r\n         * - select: select function\r\n         * - delete: delete function\r\n         * - element: target element\r\n         * - src: src attribute of tag\r\n         * @returns {Array}\r\n         */ getImagesInfo: function() {\n            return context.image ? context.image._infoList : [];\n        },\n        /**\r\n         * @description Gets uploaded files(plugin using fileManager) information list.\r\n         * image: [img], video: [video, iframe], audio: [audio]\r\n         * When the argument value is 'image', it is the same function as \"getImagesInfo\".\r\n         * - index: data index\r\n         * - name: file name\r\n         * - size: file size\r\n         * - select: select function\r\n         * - delete: delete function\r\n         * - element: target element\r\n         * - src: src attribute of tag\r\n         * @param {String} pluginName Plugin name (image, video, audio)\r\n         * @returns {Array}\r\n         */ getFilesInfo: function(pluginName) {\n            return context[pluginName] ? context[pluginName]._infoList : [];\n        },\n        /**\r\n         * @description Upload images using image plugin\r\n         * @param {FileList} files FileList\r\n         */ insertImage: function(files) {\n            if (!core.plugins.image || !files) return;\n            if (!core.initPlugins.image) core.callPlugin(\"image\", core.plugins.image.submitAction.bind(core, files), null);\n            else core.plugins.image.submitAction.call(core, files);\n            core.focus();\n        },\n        /**\r\n         * @description Inserts an HTML element or HTML string or plain string at the current cursor position\r\n         * @param {Element|String} html HTML Element or HTML string or plain string\r\n         * @param {Boolean} notCleaningData If true, inserts the HTML string without refining it with core.cleanHTML.\r\n         * @param {Boolean} checkCharCount If true, if \"options.maxCharCount\" is exceeded when \"element\" is added, null is returned without addition.\r\n         * @param {Boolean} rangeSelection If true, range select the inserted node.\r\n         */ insertHTML: function(html, notCleaningData, checkCharCount, rangeSelection) {\n            if (!context.element.wysiwygFrame.contains(core.getSelection().focusNode)) core.focus();\n            if (typeof html === \"string\") {\n                if (!notCleaningData) html = core.cleanHTML(html, null, null);\n                try {\n                    if (util.isListCell(util.getFormatElement(core.getSelectionNode(), null))) {\n                        const dom = _d.createRange().createContextualFragment(html);\n                        const domTree = dom.childNodes;\n                        if (core._isFormatData(domTree)) html = core._convertListCell(domTree);\n                    }\n                    const dom = _d.createRange().createContextualFragment(html);\n                    const domTree = dom.childNodes;\n                    if (checkCharCount) {\n                        const type = core._charTypeHTML ? \"outerHTML\" : \"textContent\";\n                        let checkHTML = \"\";\n                        for(let i = 0, len = domTree.length; i < len; i++){\n                            checkHTML += domTree[i][type];\n                        }\n                        if (!core.checkCharCount(checkHTML, null)) return;\n                    }\n                    let c, a, t, prev, firstCon;\n                    while(c = domTree[0]){\n                        if (prev && prev.nodeType === 3 && a && a.nodeType === 1 && util.isBreak(c)) {\n                            prev = c;\n                            util.removeItem(c);\n                            continue;\n                        }\n                        t = core.insertNode(c, a, false);\n                        a = t.container || t;\n                        if (!firstCon) firstCon = t;\n                        prev = c;\n                    }\n                    if (prev.nodeType === 3 && a.nodeType === 1) a = prev;\n                    const offset = a.nodeType === 3 ? t.endOffset || a.textContent.length : a.childNodes.length;\n                    if (rangeSelection) core.setRange(firstCon.container || firstCon, firstCon.startOffset || 0, a, offset);\n                    else core.setRange(a, offset, a, offset);\n                } catch (error) {\n                    if (core.isDisabled || core.isReadOnly) return;\n                    console.warn(\"[SUNEDITOR.insertHTML.fail] \" + error);\n                    core.execCommand(\"insertHTML\", false, html);\n                }\n            } else {\n                if (util.isComponent(html)) {\n                    core.insertComponent(html, false, checkCharCount, false);\n                } else {\n                    let afterNode = null;\n                    if (util.isFormatElement(html) || util.isMedia(html)) {\n                        afterNode = util.getFormatElement(core.getSelectionNode(), null);\n                    }\n                    core.insertNode(html, afterNode, checkCharCount);\n                }\n            }\n            core.effectNode = null;\n            core.focus();\n            // history stack\n            core.history.push(false);\n        },\n        /**\r\n         * @description Change the contents of the suneditor\r\n         * @param {String|undefined} contents Contents to Input\r\n         */ setContents: function(contents) {\n            core.setContents(contents);\n        },\n        /**\r\n         * @description Add contents to the suneditor\r\n         * @param {String} contents Contents to Input\r\n         */ appendContents: function(contents) {\n            const convertValue = core.convertContentsForEditor(contents);\n            if (!core._variable.isCodeView) {\n                const temp = util.createElement(\"DIV\");\n                temp.innerHTML = convertValue;\n                const wysiwyg = context.element.wysiwyg;\n                const children = temp.children;\n                for(let i = 0, len = children.length; i < len; i++){\n                    if (children[i]) {\n                        wysiwyg.appendChild(children[i]);\n                    }\n                }\n            } else {\n                core._setCodeView(core._getCodeView() + \"\\n\" + core.convertHTMLForCodeView(convertValue, false));\n            }\n            // history stack\n            core.history.push(false);\n        },\n        /**\r\n         * @description Switch to or off \"ReadOnly\" mode.\r\n         * @param {Boolean} value \"readOnly\" boolean value.\r\n         */ readOnly: function(value) {\n            core.isReadOnly = value;\n            util.setDisabledButtons(!!value, core.resizingDisabledButtons);\n            if (value) {\n                /** off menus */ core.controllersOff();\n                if (core.submenuActiveButton && core.submenuActiveButton.disabled) core.submenuOff();\n                if (core._moreLayerActiveButton && core._moreLayerActiveButton.disabled) core.moreLayerOff();\n                if (core.containerActiveButton && core.containerActiveButton.disabled) core.containerOff();\n                if (core.modalForm) core.plugins.dialog.close.call(core);\n                context.element.code.setAttribute(\"readOnly\", \"true\");\n                util.addClass(context.element.wysiwygFrame, \"se-read-only\");\n            } else {\n                context.element.code.removeAttribute(\"readOnly\");\n                util.removeClass(context.element.wysiwygFrame, \"se-read-only\");\n            }\n            if (options.codeMirrorEditor) options.codeMirrorEditor.setOption(\"readOnly\", !!value);\n        },\n        /**\r\n         * @description Disable the suneditor\r\n         */ disable: function() {\n            this.toolbar.disable();\n            this.wysiwyg.disable();\n        },\n        /**\r\n         * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n         */ disabled: function() {\n            this.disable();\n        },\n        /**\r\n         * @description Enable the suneditor\r\n         */ enable: function() {\n            this.toolbar.enable();\n            this.wysiwyg.enable();\n        },\n        /**\r\n         * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n         */ enabled: function() {\n            this.enable();\n        },\n        /**\r\n         * @description Show the suneditor\r\n         */ show: function() {\n            const topAreaStyle = context.element.topArea.style;\n            if (topAreaStyle.display === \"none\") topAreaStyle.display = options.display;\n        },\n        /**\r\n         * @description Hide the suneditor\r\n         */ hide: function() {\n            context.element.topArea.style.display = \"none\";\n        },\n        /**\r\n         * @description Destroy the suneditor\r\n         */ destroy: function() {\n            /** off menus */ core.submenuOff();\n            core.containerOff();\n            core.controllersOff();\n            if (core.notice) core.notice.close.call(core);\n            if (core.modalForm) core.plugins.dialog.close.call(core);\n            /** remove history */ core.history._destroy();\n            /** remove event listeners */ event._removeEvent();\n            /** remove element */ util.removeItem(context.element.toolbar);\n            util.removeItem(context.element.topArea);\n            /** remove object reference */ for(let k in core.functions){\n                if (util.hasOwn(core, k)) delete core.functions[k];\n            }\n            for(let k in core){\n                if (util.hasOwn(core, k)) delete core[k];\n            }\n            for(let k in event){\n                if (util.hasOwn(event, k)) delete event[k];\n            }\n            for(let k in context){\n                if (util.hasOwn(context, k)) delete context[k];\n            }\n            for(let k in pluginCallButtons){\n                if (util.hasOwn(pluginCallButtons, k)) delete pluginCallButtons[k];\n            }\n            /** remove user object */ for(let k in this){\n                if (util.hasOwn(this, k)) delete this[k];\n            }\n        },\n        /**\r\n         * @description Toolbar methods\r\n         */ toolbar: {\n            /**\r\n             * @description Disable the toolbar\r\n             */ disable: function() {\n                /** off menus */ core.submenuOff();\n                core.moreLayerOff();\n                core.containerOff();\n                context.tool.cover.style.display = \"block\";\n            },\n            /**\r\n             * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n             */ disabled: function() {\n                this.disable();\n            },\n            /**\r\n             * @description Enable the toolbar\r\n             */ enable: function() {\n                context.tool.cover.style.display = \"none\";\n            },\n            /**\r\n             * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n             */ enabled: function() {\n                this.enable();\n            },\n            /**\r\n             * @description Show the toolbar\r\n             */ show: function() {\n                if (core._isInline) {\n                    event._showToolbarInline();\n                } else {\n                    context.element.toolbar.style.display = \"\";\n                    context.element._stickyDummy.style.display = \"\";\n                }\n                event.onResize_window();\n            },\n            /**\r\n             * @description Hide the toolbar\r\n             */ hide: function() {\n                if (core._isInline) {\n                    event._hideToolbar();\n                } else {\n                    context.element.toolbar.style.display = \"none\";\n                    context.element._stickyDummy.style.display = \"none\";\n                }\n                event.onResize_window();\n            }\n        },\n        /**\r\n         * @description Wysiwyg methods\r\n         */ wysiwyg: {\n            /**\r\n             * @description Disable the wysiwyg area\r\n             */ disable: function() {\n                /** off menus */ core.controllersOff();\n                if (core.modalForm) core.plugins.dialog.close.call(core);\n                context.element.wysiwyg.setAttribute(\"contenteditable\", false);\n                core.isDisabled = true;\n                if (options.codeMirrorEditor) {\n                    options.codeMirrorEditor.setOption(\"readOnly\", true);\n                } else {\n                    context.element.code.setAttribute(\"disabled\", \"disabled\");\n                }\n            },\n            /**\r\n             * @description Enable the wysiwyg area\r\n             */ enable: function() {\n                context.element.wysiwyg.setAttribute(\"contenteditable\", true);\n                core.isDisabled = false;\n                if (options.codeMirrorEditor) {\n                    options.codeMirrorEditor.setOption(\"readOnly\", false);\n                } else {\n                    context.element.code.removeAttribute(\"disabled\");\n                }\n            }\n        }\n    };\n    /************ Core init ************/ // functions\n    core.functions = functions;\n    core.options = options;\n    // Create to sibling node\n    let contextEl = context.element;\n    let originEl = contextEl.originElement;\n    let topEl = contextEl.topArea;\n    originEl.style.display = \"none\";\n    topEl.style.display = \"block\";\n    // init\n    if (options.iframe) {\n        contextEl.wysiwygFrame.addEventListener(\"load\", function() {\n            util._setIframeDocument(this, options);\n            core._editorInit(false, options.value);\n            options.value = null;\n        });\n    }\n    // insert editor element\n    if (typeof originEl.nextElementSibling === \"object\") {\n        originEl.parentNode.insertBefore(topEl, originEl.nextElementSibling);\n    } else {\n        originEl.parentNode.appendChild(topEl);\n    }\n    contextEl.editorArea.appendChild(contextEl.wysiwygFrame);\n    contextEl = originEl = topEl = null;\n    // init\n    if (!options.iframe) {\n        core._editorInit(false, options.value);\n        options.value = null;\n    }\n    return functions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lib/history.js":
/*!***************************************************!*\
  !*** ./node_modules/suneditor/src/lib/history.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(core, change) {\n    const _w = core._w;\n    const util = core.util;\n    const delayTime = core.options.historyStackDelayTime;\n    let editor = core.context.element;\n    let undo = core.context.tool.undo;\n    let redo = core.context.tool.redo;\n    let pushDelay = null;\n    let stackIndex = 0;\n    let stack = [];\n    function setContentsFromStack() {\n        const item = stack[stackIndex];\n        editor.wysiwyg.innerHTML = item.contents;\n        core.setRange(util.getNodeFromPath(item.s.path, editor.wysiwyg), item.s.offset, util.getNodeFromPath(item.e.path, editor.wysiwyg), item.e.offset);\n        core.focus();\n        if (stack.length <= 1) {\n            if (undo) undo.setAttribute(\"disabled\", true);\n            if (redo) redo.setAttribute(\"disabled\", true);\n        } else {\n            if (stackIndex === 0) {\n                if (undo) undo.setAttribute(\"disabled\", true);\n                if (redo) redo.removeAttribute(\"disabled\");\n            } else if (stackIndex === stack.length - 1) {\n                if (undo) undo.removeAttribute(\"disabled\");\n                if (redo) redo.setAttribute(\"disabled\", true);\n            } else {\n                if (undo) undo.removeAttribute(\"disabled\");\n                if (redo) redo.removeAttribute(\"disabled\");\n            }\n        }\n        core.controllersOff();\n        core._checkComponents();\n        core._setCharCount();\n        core._resourcesStateChange();\n        // onChange\n        change();\n    }\n    function pushStack() {\n        core._checkComponents();\n        const current = editor.wysiwyg.innerHTML;\n        if (!current || !!stack[stackIndex] && current === stack[stackIndex].contents) return;\n        stackIndex++;\n        const range = core._variable._range;\n        if (stack.length > stackIndex) {\n            stack = stack.slice(0, stackIndex);\n            if (redo) redo.setAttribute(\"disabled\", true);\n        }\n        if (!range) {\n            stack[stackIndex] = {\n                contents: current,\n                s: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: [\n                        0,\n                        0\n                    ]\n                },\n                e: {\n                    path: 0,\n                    offset: 0\n                }\n            };\n        } else {\n            stack[stackIndex] = {\n                contents: current,\n                s: {\n                    path: util.getNodePath(range.startContainer, null, null),\n                    offset: range.startOffset\n                },\n                e: {\n                    path: util.getNodePath(range.endContainer, null, null),\n                    offset: range.endOffset\n                }\n            };\n        }\n        if (stackIndex === 1 && undo) undo.removeAttribute(\"disabled\");\n        core._setCharCount();\n        // onChange\n        change();\n    }\n    return {\n        /**\n         * @description History stack\n         */ stack: stack,\n        /**\n         * @description Saving the current status to the history object stack\n         * If \"delay\" is true, it will be saved after (options.historyStackDelayTime || 400) miliseconds\n         * If the function is called again with the \"delay\" argument true before it is saved, the delay time is renewal\n         * You can specify the delay time by sending a number.\n         * @param {Boolean|Number} delay If true, Add stack without delay time.\n         */ push: function(delay) {\n            _w.setTimeout(core._resourcesStateChange.bind(core));\n            const time = typeof delay === \"number\" ? delay > 0 ? delay : 0 : !delay ? 0 : delayTime;\n            if (!time || pushDelay) {\n                _w.clearTimeout(pushDelay);\n                if (!time) {\n                    pushStack();\n                    return;\n                }\n            }\n            pushDelay = _w.setTimeout(function() {\n                _w.clearTimeout(pushDelay);\n                pushDelay = null;\n                pushStack();\n            }, time);\n        },\n        /**\n         * @description Undo function\n         */ undo: function() {\n            if (stackIndex > 0) {\n                stackIndex--;\n                setContentsFromStack();\n            }\n        },\n        /**\n         * @description Redo function\n         */ redo: function() {\n            if (stack.length - 1 > stackIndex) {\n                stackIndex++;\n                setContentsFromStack();\n            }\n        },\n        /**\n         * @description Go to the history stack for that index.\n         * If \"index\" is -1, go to the last stack\n         */ go: function(index) {\n            stackIndex = index < 0 ? stack.length - 1 : index;\n            setContentsFromStack();\n        },\n        /**\n         * @description Get the current history stack index.\n         * @returns {Number} Current Stack index\n         */ getCurrentIndex: function() {\n            return stackIndex;\n        },\n        /**\n         * @description Reset the history object\n         */ reset: function(ignoreChangeEvent) {\n            if (undo) undo.setAttribute(\"disabled\", true);\n            if (redo) redo.setAttribute(\"disabled\", true);\n            core._variable.isChanged = false;\n            if (core.context.tool.save) core.context.tool.save.setAttribute(\"disabled\", true);\n            stack.splice(0);\n            stackIndex = 0;\n            // pushStack\n            stack[stackIndex] = {\n                contents: core.getContents(true),\n                s: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: 0\n                },\n                e: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: 0\n                }\n            };\n            if (!ignoreChangeEvent) change();\n        },\n        /**\n         * @description Reset the disabled state of the buttons to fit the current stack.\n         * @private\n         */ _resetCachingButton: function() {\n            editor = core.context.element;\n            undo = core.context.tool.undo;\n            redo = core.context.tool.redo;\n            if (stackIndex === 0) {\n                if (undo) undo.setAttribute(\"disabled\", true);\n                if (redo && stackIndex === stack.length - 1) redo.setAttribute(\"disabled\", true);\n                core._variable.isChanged = false;\n                if (core.context.tool.save) core.context.tool.save.setAttribute(\"disabled\", true);\n            } else if (stackIndex === stack.length - 1) {\n                if (redo) redo.setAttribute(\"disabled\", true);\n            }\n        },\n        /**\n         * @description Remove all stacks and remove the timeout function.\n         * @private\n         */ _destroy: function() {\n            if (pushDelay) _w.clearTimeout(pushDelay);\n            stack = null;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lib/history.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/lib/util.js":
/*!************************************************!*\
  !*** ./node_modules/suneditor/src/lib/util.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n/**\r\n * @description utility function\r\n */ const util = {\n    _d: null,\n    _w: null,\n    isIE: null,\n    isIE_Edge: null,\n    isOSX_IOS: null,\n    isChromium: null,\n    isMobile: null,\n    isResizeObserverSupported: null,\n    _propertiesInit: function() {\n        if (this._d) return;\n        this._d = document;\n        this._w = window;\n        this.isIE = navigator.userAgent.indexOf(\"Trident\") > -1;\n        this.isIE_Edge = navigator.userAgent.indexOf(\"Trident\") > -1 || navigator.appVersion.indexOf(\"Edge\") > -1;\n        this.isOSX_IOS = /(Mac|iPhone|iPod|iPad)/.test(navigator.platform);\n        this.isChromium = !!window.chrome;\n        this.isResizeObserverSupported = typeof ResizeObserver === \"function\";\n        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || \"ontouchstart\" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n    },\n    _allowedEmptyNodeList: \".se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas\",\n    /**\r\n     * @description HTML Reserved Word Converter.\r\n     * @param {String} contents \r\n     * @returns {String} HTML string\r\n     * @private\r\n     */ _HTMLConvertor: function(contents) {\n        const ec = {\n            \"&\": \"&amp;\",\n            \"\\xa0\": \"&nbsp;\",\n            \"'\": \"&apos;\",\n            '\"': \"&quot;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\"\n        };\n        return contents.replace(/&|\\u00A0|'|\"|<|>/g, function(m) {\n            return typeof ec[m] === \"string\" ? ec[m] : m;\n        });\n    },\n    /**\r\n     * @description Unicode Character 'ZERO WIDTH SPACE' (\\u200B)\r\n     */ zeroWidthSpace: String.fromCharCode(8203),\n    /**\r\n     * @description Regular expression to find 'zero width space' (/\\u200B/g)\r\n     */ zeroWidthRegExp: new RegExp(String.fromCharCode(8203), \"g\"),\n    /**\r\n     * @description Regular expression to find only 'zero width space' (/^\\u200B+$/)\r\n     */ onlyZeroWidthRegExp: new RegExp(\"^\" + String.fromCharCode(8203) + \"+$\"),\n    fontValueMap: {\n        \"xx-small\": 1,\n        \"x-small\": 2,\n        \"small\": 3,\n        \"medium\": 4,\n        \"large\": 5,\n        \"x-large\": 6,\n        \"xx-large\": 7\n    },\n    /**\r\n     * @description A method that checks If the text is blank or to see if it contains 'ZERO WIDTH SPACE' or empty (util.zeroWidthSpace)\r\n     * @param {String|Node} text String value or Node\r\n     * @returns {Boolean}\r\n     */ onlyZeroWidthSpace: function(text) {\n        if (text === null || text === undefined) return false;\n        if (typeof text !== \"string\") text = text.textContent;\n        return text === \"\" || this.onlyZeroWidthRegExp.test(text);\n    },\n    /**\r\n     * @description Gets XMLHttpRequest object\r\n     * @returns {XMLHttpRequest|ActiveXObject}\r\n     */ getXMLHttpRequest: function() {\n        /** IE */ if (this._w.ActiveXObject) {\n            try {\n                return new ActiveXObject(\"Msxml2.XMLHTTP\");\n            } catch (e) {\n                try {\n                    return new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } catch (e1) {\n                    return null;\n                }\n            }\n        } else if (this._w.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        } else {\n            return null;\n        }\n    },\n    /**\r\n     * @description Object.values\r\n     * @param {Object|null} obj Object parameter.\r\n     * @returns {Array}\r\n     */ getValues: function(obj) {\n        return !obj ? [] : this._w.Object.keys(obj).map(function(i) {\n            return obj[i];\n        });\n    },\n    /**\r\n     * @description Convert the CamelCase To the KebabCase.\r\n     * @param {String|Array} param [Camel string]\r\n     * @returns {String|Array}\r\n     */ camelToKebabCase: function(param) {\n        if (typeof param === \"string\") {\n            return param.replace(/[A-Z]/g, function(letter) {\n                return \"-\" + letter.toLowerCase();\n            });\n        } else {\n            return param.map(function(str) {\n                return util.camelToKebabCase(str);\n            });\n        }\n    },\n    /**\r\n     * @description Convert the KebabCase To the CamelCase.\r\n     * @param {String|Array} param [KebabCase string]\r\n     * @returns {String|Array}\r\n     */ kebabToCamelCase: function(param) {\n        if (typeof param === \"string\") {\n            return param.replace(/-[a-zA-Z]/g, function(letter) {\n                return letter.replace(\"-\", \"\").toUpperCase();\n            });\n        } else {\n            return param.map(function(str) {\n                return util.camelToKebabCase(str);\n            });\n        }\n    },\n    /**\r\n     * @description Create Element node\r\n     * @param {String} elementName Element name\r\n     * @returns {Element}\r\n     */ createElement: function(elementName) {\n        return this._d.createElement(elementName);\n    },\n    /**\r\n     * @description Create text node\r\n     * @param {String} text text contents\r\n     * @returns {Node}\r\n     */ createTextNode: function(text) {\n        return this._d.createTextNode(text || \"\");\n    },\n    /**\r\n     * @description The editor checks tags by string.\r\n     * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n     * When using an attribute with \"<\" or \">\", use \"HTMLEncoder\" to save. (ex: math(katex))\r\n     * @param {String} contents HTML or Text string\r\n     * @returns {String}\r\n     */ HTMLEncoder: function(contents) {\n        const ec = {\n            \"<\": \"$lt;\",\n            \">\": \"$gt;\"\n        };\n        return contents.replace(/<|>/g, function(m) {\n            return typeof ec[m] === \"string\" ? ec[m] : m;\n        });\n    },\n    /**\r\n     * @description The editor checks tags by string.\r\n     * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n     * Decoder of data stored as \"HTMLEncoder\" (ex: math(katex))\r\n     * @param {String} contents HTML or Text string\r\n     * @returns {String}\r\n     */ HTMLDecoder: function(contents) {\n        const ec = {\n            \"$lt;\": \"<\",\n            \"$gt;\": \">\"\n        };\n        return contents.replace(/\\$lt;|\\$gt;/g, function(m) {\n            return typeof ec[m] === \"string\" ? ec[m] : m;\n        });\n    },\n    /**\r\n     * @description This method run Object.prototype.hasOwnProperty.call(obj, key)\r\n     * @param {Object} obj Object\r\n     * @param {String} key obj.key\r\n     * @returns {Boolean}\r\n     */ hasOwn: function(obj, key) {\n        return this._hasOwn.call(obj, key);\n    },\n    _hasOwn: Object.prototype.hasOwnProperty,\n    /**\r\n     * @deprecated\r\n     * @description Get the the tag path of the arguments value\r\n     * If not found, return the first found value\r\n     * @param {Array} nameArray File name array\r\n     * @param {String} extension js, css\r\n     * @returns {String}\r\n     */ getIncludePath: function(nameArray, extension) {\n        let path = \"\";\n        const pathList = [];\n        const tagName = extension === \"js\" ? \"script\" : \"link\";\n        const src = extension === \"js\" ? \"src\" : \"href\";\n        let fileName = \"(?:\";\n        for(let i = 0, len = nameArray.length; i < len; i++){\n            fileName += nameArray[i] + (i < len - 1 ? \"|\" : \")\");\n        }\n        const regExp = new this._w.RegExp(\"(^|.*[\\\\/])\" + fileName + \"(\\\\.[^\\\\/]+)?.\" + extension + \"(?:\\\\?.*|;.*)?$\", \"i\");\n        const extRegExp = new this._w.RegExp(\".+\\\\.\" + extension + \"(?:\\\\?.*|;.*)?$\", \"i\");\n        for(let c = this._d.getElementsByTagName(tagName), i = 0; i < c.length; i++){\n            if (extRegExp.test(c[i][src])) {\n                pathList.push(c[i]);\n            }\n        }\n        for(let i = 0; i < pathList.length; i++){\n            let editorTag = pathList[i][src].match(regExp);\n            if (editorTag) {\n                path = editorTag[0];\n                break;\n            }\n        }\n        if (path === \"\") path = pathList.length > 0 ? pathList[0][src] : \"\";\n        -1 === path.indexOf(\":/\") && \"//\" !== path.slice(0, 2) && (path = 0 === path.indexOf(\"/\") ? location.href.match(/^.*?:\\/\\/[^\\/]*/)[0] + path : location.href.match(/^[^\\?]*\\/(?:)/)[0] + path);\n        if (!path) throw \"[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +\" + name + \", extension: \" + extension + \")\";\n        return path;\n    },\n    /**\r\n     * @deprecated\r\n     * @description Returns the CSS text that has been applied to the current page.\r\n     * @param {Document|null} doc To get the CSS text of an document(core._wd). If null get the current document.\r\n     * @returns {String} Styles string\r\n     */ getPageStyle: function(doc) {\n        let cssText = \"\";\n        const sheets = (doc || this._d).styleSheets;\n        for(let i = 0, len = sheets.length, rules; i < len; i++){\n            try {\n                rules = sheets[i].cssRules;\n            } catch (e) {\n                continue;\n            }\n            if (rules) {\n                for(let c = 0, cLen = rules.length; c < cLen; c++){\n                    cssText += rules[c].cssText;\n                }\n            }\n        }\n        return cssText;\n    },\n    /**\r\n     * @description Get the argument iframe's document object\r\n     * @param {Element} iframe Iframe element (context.element.wysiwygFrame)\r\n     * @returns {Document}\r\n     */ getIframeDocument: function(iframe) {\n        let wDocument = iframe.contentWindow || iframe.contentDocument;\n        if (wDocument.document) wDocument = wDocument.document;\n        return wDocument;\n    },\n    /**\r\n     * @description Get attributes of argument element to string ('class=\"---\" name=\"---\" ')\r\n     * @param {Element} element Element object\r\n     * @param {Array|null} exceptAttrs Array of attribute names to exclude from the result\r\n     * @returns {String}\r\n     */ getAttributesToString: function(element, exceptAttrs) {\n        if (!element.attributes) return \"\";\n        const attrs = element.attributes;\n        let attrString = \"\";\n        for(let i = 0, len = attrs.length; i < len; i++){\n            if (exceptAttrs && exceptAttrs.indexOf(attrs[i].name) > -1) continue;\n            attrString += attrs[i].name + '=\"' + attrs[i].value + '\" ';\n        }\n        return attrString;\n    },\n    /**\r\n     * @descriptionGets Get the length in bytes of a string.\r\n     * referencing code: \"https://github.com/shaan1974/myrdin/blob/master/expressions/string.js#L11\"\r\n     * @param {String} text String text\r\n     * @returns {Number}\r\n     */ getByteLength: function(text) {\n        if (!text || !text.toString) return 0;\n        text = text.toString();\n        const encoder = this._w.encodeURIComponent;\n        let cr, cl;\n        if (this.isIE_Edge) {\n            cl = this._w.unescape(encoder(text)).length;\n            cr = 0;\n            if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\n                cr = encoder(text).match(/(%0A|%0D)/gi).length;\n            }\n            return cl + cr;\n        } else {\n            cl = new this._w.TextEncoder(\"utf-8\").encode(text).length;\n            cr = 0;\n            if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\n                cr = encoder(text).match(/(%0A|%0D)/gi).length;\n            }\n            return cl + cr;\n        }\n    },\n    /**\r\n     * @description It is judged whether it is the edit region top div element or iframe's body tag.\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isWysiwygDiv: function(element) {\n        return element && element.nodeType === 1 && (this.hasClass(element, \"se-wrapper-wysiwyg\") || /^BODY$/i.test(element.nodeName));\n    },\n    /**\r\n     * @description It is judged whether it is the contenteditable property is false.\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isNonEditable: function(element) {\n        return element && element.nodeType === 1 && element.getAttribute(\"contenteditable\") === \"false\";\n    },\n    /**\r\n     * @description It is judged whether it is a node related to the text style.\r\n     * (strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isTextStyleElement: function(element) {\n        return element && element.nodeType !== 3 && /^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(element.nodeName);\n    },\n    /**\r\n     * @description It is judged whether it is the input element (INPUT, TEXTAREA)\r\n     * @param {Node} element The node to check\r\n     * @returns \r\n     */ isInputElement: function(element) {\n        return element && element.nodeType === 1 && /^(INPUT|TEXTAREA)$/i.test(element.nodeName);\n    },\n    /**\r\n     * @description It is judged whether it is the format element (P, DIV, H[1-6], PRE, LI | class=\"__se__format__replace_xxx\")\r\n     * Format element also contain \"free format Element\"\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__replace_.+(\\\\s|$)|(\\\\s|^)__se__format__free_.+(\\\\s|$)\")) && !this.isComponent(element) && !this.isWysiwygDiv(element);\n    },\n    /**\r\n     * @description It is judged whether it is the range format element. (BLOCKQUOTE, OL, UL, FIGCAPTION, TABLE, THEAD, TBODY, TR, TH, TD | class=\"__se__format__range_xxx\")\r\n     * Range format element is wrap the \"format element\" and \"component\"\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isRangeFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__range_.+(\\\\s|$)\"));\n    },\n    /**\r\n     * @description It is judged whether it is the closure range format element. (TH, TD | class=\"__se__format__range__closure_xxx\")\r\n     * Closure range format elements is included in the range format element.\r\n     *  - Closure range format element is wrap the \"format element\" and \"component\"\r\n     * ※ You cannot exit this format with the Enter key or Backspace key.\r\n     * ※ Use it only in special cases. ([ex] format of table cells)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isClosureRangeFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^(TH|TD)$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__range__closure_.+(\\\\s|$)\"));\n    },\n    /**\r\n     * @description It is judged whether it is the free format element. (PRE | class=\"__se__format__free_xxx\")\r\n     * Free format elements is included in the format element.\r\n     * Free format elements's line break is \"BR\" tag.\r\n     * ※ Entering the Enter key in the space on the last line ends \"Free Format\" and appends \"Format\".\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isFreeFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^PRE$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__free_.+(\\\\s|$)\")) && !this.isComponent(element) && !this.isWysiwygDiv(element);\n    },\n    /**\r\n     * @description It is judged whether it is the closure free format element. (class=\"__se__format__free__closure_xxx\")\r\n     * Closure free format elements is included in the free format element.\r\n     *  - Closure free format elements's line break is \"BR\" tag.\r\n     * ※ You cannot exit this format with the Enter key or Backspace key.\r\n     * ※ Use it only in special cases. ([ex] format of table cells)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isClosureFreeFormatElement: function(element) {\n        return element && element.nodeType === 1 && this.hasClass(element, \"(\\\\s|^)__se__format__free__closure_.+(\\\\s|$)\");\n    },\n    /**\r\n     * @description It is judged whether it is the component[img, iframe, video, audio, table] cover(class=\"se-component\") and table, hr\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isComponent: function(element) {\n        return element && (/se-component/.test(element.className) || /^(TABLE|HR)$/.test(element.nodeName));\n    },\n    /**\r\n     * @description Checks for \"__se__uneditable\" in the class list.\r\n     * Components with class \"__se__uneditable\" cannot be modified.\r\n     * @param {Element} element The element to check\r\n     * @returns {Boolean}\r\n     */ isUneditableComponent: function(element) {\n        return element && this.hasClass(element, \"__se__uneditable\");\n    },\n    /**\r\n     * @description It is judged whether it is the component [img, iframe] cover(class=\"se-component\")\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isMediaComponent: function(element) {\n        return element && /se-component/.test(element.className);\n    },\n    /**\r\n     * @description It is judged whether it is the not checking node. (class=\"katex\", \"__se__tag\")\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isNotCheckingNode: function(element) {\n        return element && /katex|__se__tag/.test(element.className);\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a format node (util.isFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isRangeFormatElement(element)) element.firstElementChild;\n            if (this.isFormatElement(element) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a format node (util.isRangeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getRangeFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isRangeFormatElement(element) && !/^(THEAD|TBODY|TR)$/i.test(element.nodeName) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a free format node (util.isFreeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getFreeFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isFreeFormatElement(element) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a closure free format node (util.isClosureFreeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getClosureFreeFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isClosureFreeFormatElement(element) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description Add style and className of copyEl to originEl\r\n     * @param {Element} originEl Origin element\r\n     * @param {Element} copyEl Element to copy\r\n     * @param {Array|null} blacklist Blacklist array(LowerCase)\r\n     */ copyTagAttributes: function(originEl, copyEl, blacklist) {\n        if (copyEl.style.cssText) {\n            const copyStyles = copyEl.style;\n            for(let i = 0, len = copyStyles.length; i < len; i++){\n                originEl.style[copyStyles[i]] = copyStyles[copyStyles[i]];\n            }\n        }\n        const attrs = copyEl.attributes;\n        for(let i = 0, len = attrs.length, name1; i < len; i++){\n            name1 = attrs[i].name.toLowerCase();\n            if (blacklist && blacklist.indexOf(name1) > -1 || !attrs[i].value) originEl.removeAttribute(name1);\n            else if (name1 !== \"style\") originEl.setAttribute(attrs[i].name, attrs[i].value);\n        }\n    },\n    /**\r\n     * @description Copy and apply attributes of format tag that should be maintained. (style, class) Ignore \"__se__format__\" class\r\n     * @param {Element} originEl Origin element\r\n     * @param {Element} copyEl Element to copy\r\n     */ copyFormatAttributes: function(originEl, copyEl) {\n        copyEl = copyEl.cloneNode(false);\n        copyEl.className = copyEl.className.replace(/(\\s|^)__se__format__[^\\s]+/g, \"\");\n        this.copyTagAttributes(originEl, copyEl);\n    },\n    /**\r\n     * @description Get the item from the array that matches the condition.\r\n     * @param {Array|HTMLCollection|NodeList} array Array to get item\r\n     * @param {Function|null} validation Conditional function\r\n     * @param {Boolean} multi If true, returns all items that meet the criteria otherwise, returns an empty array.\r\n     * If false, returns only one item that meet the criteria otherwise return null.\r\n     * @returns {Array|Node|null}\r\n     */ getArrayItem: function(array, validation, multi) {\n        if (!array || array.length === 0) return null;\n        validation = validation || function() {\n            return true;\n        };\n        const arr = [];\n        for(let i = 0, len = array.length, a; i < len; i++){\n            a = array[i];\n            if (validation(a)) {\n                if (!multi) return a;\n                else arr.push(a);\n            }\n        }\n        return !multi ? null : arr;\n    },\n    /**\r\n     * @description Check if an array contains an element \r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} element The element to check for\r\n     * @returns {Boolean}\r\n     */ arrayIncludes: function(array, element) {\n        for(let i = 0; i < array.length; i++){\n            if (array[i] === element) {\n                return true;\n            }\n        }\n        return false;\n    },\n    /**\r\n     * @description Get the index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} element The element to find index\r\n     * @returns {Number}\r\n     */ getArrayIndex: function(array, element) {\n        let idx = -1;\n        for(let i = 0, len = array.length; i < len; i++){\n            if (array[i] === element) {\n                idx = i;\n                break;\n            }\n        }\n        return idx;\n    },\n    /**\r\n     * @description Get the next index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} item The element to find index\r\n     * @returns {Number}\r\n     */ nextIdx: function(array, item) {\n        let idx = this.getArrayIndex(array, item);\n        if (idx === -1) return -1;\n        return idx + 1;\n    },\n    /**\r\n     * @description Get the previous index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array Element array\r\n     * @param {Node} item The element to find index\r\n     * @returns {Number}\r\n     */ prevIdx: function(array, item) {\n        let idx = this.getArrayIndex(array, item);\n        if (idx === -1) return -1;\n        return idx - 1;\n    },\n    /**\r\n     * @description Returns the index compared to other sibling nodes.\r\n     * @param {Node} node The Node to find index\r\n     * @returns {Number}\r\n     */ getPositionIndex: function(node) {\n        let idx = 0;\n        while(node = node.previousSibling){\n            idx += 1;\n        }\n        return idx;\n    },\n    /**\r\n     * @description Returns the position of the \"node\" in the \"parentNode\" in a numerical array.\r\n     * ex) <p><span>aa</span><span>bb</span></p> : getNodePath(node: \"bb\", parentNode: \"<P>\") -> [1, 0]\r\n     * @param {Node} node The Node to find position path\r\n     * @param {Node|null} parentNode Parent node. If null, wysiwyg div area\r\n     * @param {Object|null} _newOffsets If you send an object of the form \"{s: 0, e: 0}\", the text nodes that are attached together are merged into one, centered on the \"node\" argument.\r\n     * \"_newOffsets.s\" stores the length of the combined characters after \"node\" and \"_newOffsets.e\" stores the length of the combined characters before \"node\".\r\n     * Do not use unless absolutely necessary.\r\n     * @returns {Array}\r\n     */ getNodePath: function(node, parentNode, _newOffsets) {\n        const path = [];\n        let finds = true;\n        this.getParentElement(node, (function(el) {\n            if (el === parentNode) finds = false;\n            if (finds && !this.isWysiwygDiv(el)) {\n                // merge text nodes\n                if (_newOffsets && el.nodeType === 3) {\n                    let temp = null, tempText = null;\n                    _newOffsets.s = _newOffsets.e = 0;\n                    let previous = el.previousSibling;\n                    while(previous && previous.nodeType === 3){\n                        tempText = previous.textContent.replace(this.zeroWidthRegExp, \"\");\n                        _newOffsets.s += tempText.length;\n                        el.textContent = tempText + el.textContent;\n                        temp = previous;\n                        previous = previous.previousSibling;\n                        this.removeItem(temp);\n                    }\n                    let next = el.nextSibling;\n                    while(next && next.nodeType === 3){\n                        tempText = next.textContent.replace(this.zeroWidthRegExp, \"\");\n                        _newOffsets.e += tempText.length;\n                        el.textContent += tempText;\n                        temp = next;\n                        next = next.nextSibling;\n                        this.removeItem(temp);\n                    }\n                }\n                // index push\n                path.push(el);\n            }\n            return false;\n        }).bind(this));\n        return path.map(this.getPositionIndex).reverse();\n    },\n    /**\r\n     * @description Returns the node in the location of the path array obtained from \"util.getNodePath\".\r\n     * @param {Array} offsets Position array, array obtained from \"util.getNodePath\"\r\n     * @param {Node} parentNode Base parent element\r\n     * @returns {Node}\r\n     */ getNodeFromPath: function(offsets, parentNode) {\n        let current = parentNode;\n        let nodes;\n        for(let i = 0, len = offsets.length; i < len; i++){\n            nodes = current.childNodes;\n            if (nodes.length === 0) break;\n            if (nodes.length <= offsets[i]) {\n                current = nodes[nodes.length - 1];\n            } else {\n                current = nodes[offsets[i]];\n            }\n        }\n        return current;\n    },\n    /**\r\n     * @description Compares the style and class for equal values.\r\n     * Returns true if both are text nodes.\r\n     * @param {Node} a Node to compare\r\n     * @param {Node} b Node to compare\r\n     * @returns {Boolean}\r\n     */ isSameAttributes: function(a, b) {\n        if (a.nodeType === 3 && b.nodeType === 3) return true;\n        if (a.nodeType === 3 || b.nodeType === 3) return false;\n        const style_a = a.style;\n        const style_b = b.style;\n        let compStyle = 0;\n        for(let i = 0, len = style_a.length; i < len; i++){\n            if (style_a[style_a[i]] === style_b[style_a[i]]) compStyle++;\n        }\n        const class_a = a.classList;\n        const class_b = b.classList;\n        const reg = this._w.RegExp;\n        let compClass = 0;\n        for(let i = 0, len = class_a.length; i < len; i++){\n            if (reg(\"(s|^)\" + class_a[i] + \"(s|$)\").test(class_b.value)) compClass++;\n        }\n        return compStyle === style_b.length && compStyle === style_a.length && compClass === class_b.length && compClass === class_a.length;\n    },\n    /**\r\n     * @description Check the line element(util.isFormatElement) is empty.\r\n     * @param {Element} element Format element node\r\n     * @returns {Boolean}\r\n     */ isEmptyLine: function(element) {\n        return !element || !element.parentNode || !element.querySelector(\"IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE\") && element.children.length === 0 && this.onlyZeroWidthSpace(element.textContent);\n    },\n    /**\r\n     * @description Check the span's attributes are empty.\r\n     * @param {Element|null} element Element node\r\n     * @returns {Boolean}\r\n     */ isSpanWithoutAttr: function(element) {\n        return !!element && element.nodeType === 1 && /^SPAN$/i.test(element.nodeName) && !element.className && !element.style.cssText;\n    },\n    /**\r\n     * @description Check the node is a list (ol, ul)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isList: function(node) {\n        return node && /^(OL|UL)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a list cell (li)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isListCell: function(node) {\n        return node && /^LI$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a table (table, thead, tbody, tr, th, td)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isTable: function(node) {\n        return node && /^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a table cell (td, th)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isCell: function(node) {\n        return node && /^(TD|TH)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a break node (BR)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isBreak: function(node) {\n        return node && /^BR$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a anchor node (A)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isAnchor: function(node) {\n        return node && /^A$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a media node (img, iframe, audio, video, canvas)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isMedia: function(node) {\n        return node && /^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a figure tag or util.isMedia()\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isFigures: function(node) {\n        return node && (this.isMedia(node) || /^(FIGURE)$/i.test(typeof node === \"string\" ? node : node.nodeName));\n    },\n    /**\r\n     * @description Checks for numeric (with decimal point).\r\n     * @param {String|Number} text Text string or number\r\n     * @returns {Boolean}\r\n     */ isNumber: function(text) {\n        return !!text && /^-?\\d+(\\.\\d+)?$/.test(text + \"\");\n    },\n    /**\r\n     * @description Get a number.\r\n     * @param {String|Number} text Text string or number\r\n     * @param {Number} maxDec Maximum number of decimal places (-1 : Infinity)\r\n     * @returns {Number}\r\n     */ getNumber: function(text, maxDec) {\n        if (!text) return 0;\n        let number = (text + \"\").match(/-?\\d+(\\.\\d+)?/);\n        if (!number || !number[0]) return 0;\n        number = number[0];\n        return maxDec < 0 ? number * 1 : maxDec === 0 ? this._w.Math.round(number * 1) : (number * 1).toFixed(maxDec) * 1;\n    },\n    /**\r\n     * @description Get all \"children\" of the argument value element (Without text nodes)\r\n     * @param {Element} element element to get child node\r\n     * @param {Function|null} validation Conditional function\r\n     * @returns {Array}\r\n     */ getListChildren: function(element, validation) {\n        const children = [];\n        if (!element || !element.children || element.children.length === 0) return children;\n        validation = validation || function() {\n            return true;\n        };\n        (function recursionFunc(current) {\n            if (element !== current && validation(current)) {\n                children.push(current);\n            }\n            if (!!current.children) {\n                for(let i = 0, len = current.children.length; i < len; i++){\n                    recursionFunc(current.children[i]);\n                }\n            }\n        })(element);\n        return children;\n    },\n    /**\r\n     * @description Get all \"childNodes\" of the argument value element (Include text nodes)\r\n     * @param {Node} element element to get child node\r\n     * @param {Function|null} validation Conditional function\r\n     * @returns {Array}\r\n     */ getListChildNodes: function(element, validation) {\n        const children = [];\n        if (!element || element.childNodes.length === 0) return children;\n        validation = validation || function() {\n            return true;\n        };\n        (function recursionFunc(current) {\n            if (element !== current && validation(current)) {\n                children.push(current);\n            }\n            for(let i = 0, len = current.childNodes.length; i < len; i++){\n                recursionFunc(current.childNodes[i]);\n            }\n        })(element);\n        return children;\n    },\n    /**\r\n     * @description Returns the number of parents nodes.\r\n     * \"0\" when the parent node is the WYSIWYG area.\r\n     * \"-1\" when the element argument is the WYSIWYG area.\r\n     * @param {Node} element The element to check\r\n     * @returns {Number}\r\n     */ getElementDepth: function(element) {\n        if (!element || this.isWysiwygDiv(element)) return -1;\n        let depth = 0;\n        element = element.parentNode;\n        while(element && !this.isWysiwygDiv(element)){\n            depth += 1;\n            element = element.parentNode;\n        }\n        return depth;\n    },\n    /**\r\n     * @description Compares two elements to find a common ancestor, and returns the order of the two elements.\r\n     * @param {Node} a Node to compare.\r\n     * @param {Node} b Node to compare.\r\n     * @returns {Object} { ancesstor, a, b, result: (a > b ? 1 : a < b ? -1 : 0) };\r\n     */ compareElements: function(a, b) {\n        let aNode = a, bNode = b;\n        while(aNode && bNode && aNode.parentNode !== bNode.parentNode){\n            aNode = aNode.parentNode;\n            bNode = bNode.parentNode;\n        }\n        if (!aNode || !bNode) return {\n            ancestor: null,\n            a: a,\n            b: b,\n            result: 0\n        };\n        const children = aNode.parentNode.childNodes;\n        const aIndex = this.getArrayIndex(children, aNode);\n        const bIndex = this.getArrayIndex(children, bNode);\n        return {\n            ancestor: aNode.parentNode,\n            a: aNode,\n            b: bNode,\n            result: aIndex > bIndex ? 1 : aIndex < bIndex ? -1 : 0\n        };\n    },\n    /**\r\n     * @description Get the parent element of the argument value.\r\n     * A tag that satisfies the query condition is imported.\r\n     * Returns null if not found.\r\n     * @param {Node} element Reference element\r\n     * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n     * Not use it like jquery.\r\n     * Only one condition can be entered at a time.\r\n     * @returns {Element|null}\r\n     */ getParentElement: function(element, query) {\n        let check;\n        if (typeof query === \"function\") {\n            check = query;\n        } else {\n            let attr;\n            if (/^\\./.test(query)) {\n                attr = \"className\";\n                query = query.split(\".\")[1];\n            } else if (/^#/.test(query)) {\n                attr = \"id\";\n                query = \"^\" + query.split(\"#\")[1] + \"$\";\n            } else if (/^:/.test(query)) {\n                attr = \"name\";\n                query = \"^\" + query.split(\":\")[1] + \"$\";\n            } else {\n                attr = \"nodeName\";\n                query = \"^\" + query + \"$\";\n            }\n            const regExp = new this._w.RegExp(query, \"i\");\n            check = function(el) {\n                return regExp.test(el[attr]);\n            };\n        }\n        while(element && !check(element)){\n            if (this.isWysiwygDiv(element)) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return element;\n    },\n    /**\r\n     * @description Gets the previous sibling last child. If there is no sibling, then it'll take it from the closest ancestor with child\r\n     * Returns null if not found.\r\n     * @param {Node} node Reference element\r\n     * @param {Node|null} ceiling Highest boundary allowed\r\n     * @returns {Node|null}\r\n     */ getPreviousDeepestNode: function(node, ceiling) {\n        let previousNode = node.previousSibling;\n        if (!previousNode) {\n            for(let parentNode = node.parentNode; parentNode; parentNode = parentNode.parentNode){\n                if (parentNode === ceiling) return null;\n                if (parentNode.previousSibling) {\n                    previousNode = parentNode.previousSibling;\n                    break;\n                }\n            }\n            if (!previousNode) return null;\n        }\n        while(previousNode.lastChild)previousNode = previousNode.lastChild;\n        return previousNode;\n    },\n    /**\r\n     * @description Gets the next sibling first child. If there is no sibling, then it'll take it from the closest ancestor with child\r\n     * Returns null if not found.\r\n     * @param {Node} node Reference element\r\n     * @param {Node|null} ceiling Highest boundary allowed\r\n     * @returns {Node|null}\r\n     */ getNextDeepestNode: function(node, ceiling) {\n        let nextNode = node.nextSibling;\n        if (!nextNode) {\n            for(let parentNode = node.parentNode; parentNode; parentNode = parentNode.parentNode){\n                if (parentNode === ceiling) return null;\n                if (parentNode.nextSibling) {\n                    nextNode = parentNode.nextSibling;\n                    break;\n                }\n            }\n            if (!nextNode) return null;\n        }\n        while(nextNode.firstChild)nextNode = nextNode.firstChild;\n        return nextNode;\n    },\n    /**\r\n     * @description Get the child element of the argument value.\r\n     * A tag that satisfies the query condition is imported.\r\n     * Returns null if not found.\r\n     * @param {Node} element Reference element\r\n     * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n     * @param {Boolean} last If true returns the last node among the found child nodes. (default: first node)\r\n     * Not use it like jquery.\r\n     * Only one condition can be entered at a time.\r\n     * @returns {Element|null}\r\n     */ getChildElement: function(element, query, last) {\n        let check;\n        if (typeof query === \"function\") {\n            check = query;\n        } else {\n            let attr;\n            if (/^\\./.test(query)) {\n                attr = \"className\";\n                query = query.split(\".\")[1];\n            } else if (/^#/.test(query)) {\n                attr = \"id\";\n                query = \"^\" + query.split(\"#\")[1] + \"$\";\n            } else if (/^:/.test(query)) {\n                attr = \"name\";\n                query = \"^\" + query.split(\":\")[1] + \"$\";\n            } else {\n                attr = \"nodeName\";\n                query = \"^\" + (query === \"text\" ? \"#\" + query : query) + \"$\";\n            }\n            const regExp = new this._w.RegExp(query, \"i\");\n            check = function(el) {\n                return regExp.test(el[attr]);\n            };\n        }\n        const childList = this.getListChildNodes(element, function(current) {\n            return check(current);\n        });\n        return childList[last ? childList.length - 1 : 0];\n    },\n    /**\r\n     * @description 1. The first node of all the child nodes of the \"first\" element is returned.\r\n     * 2. The last node of all the child nodes of the \"last\" element is returned.\r\n     * 3. When there is no \"last\" element, the first and last nodes of all the children of the \"first\" element are returned.\r\n     * { sc: \"first\", ec: \"last\" }\r\n     * @param {Node} first First element\r\n     * @param {Node|null} last Last element\r\n     * @returns {Object}\r\n     */ getEdgeChildNodes: function(first, last) {\n        if (!first) return;\n        if (!last) last = first;\n        while(first && first.nodeType === 1 && first.childNodes.length > 0 && !this.isBreak(first))first = first.firstChild;\n        while(last && last.nodeType === 1 && last.childNodes.length > 0 && !this.isBreak(last))last = last.lastChild;\n        return {\n            sc: first,\n            ec: last || first\n        };\n    },\n    /**\r\n     * @description Returns the position of the left and top of argument. {left:0, top:0}\r\n     * @param {Node} element Target node\r\n     * @param {Element|null} wysiwygFrame When use iframe option, iframe object should be sent (context.element.wysiwygFrame)\r\n     * @returns {Object}\r\n     */ getOffset: function(element, wysiwygFrame) {\n        let offsetLeft = 0;\n        let offsetTop = 0;\n        let offsetElement = element.nodeType === 3 ? element.parentElement : element;\n        const wysiwyg = this.getParentElement(element, this.isWysiwygDiv.bind(this));\n        while(offsetElement && !this.hasClass(offsetElement, \"se-container\") && offsetElement !== wysiwyg){\n            offsetLeft += offsetElement.offsetLeft;\n            offsetTop += offsetElement.offsetTop;\n            offsetElement = offsetElement.offsetParent;\n        }\n        const iframe = wysiwygFrame && /iframe/i.test(wysiwygFrame.nodeName);\n        return {\n            left: offsetLeft + (iframe ? wysiwygFrame.parentElement.offsetLeft : 0),\n            top: offsetTop - (wysiwyg ? wysiwyg.scrollTop : 0) + (iframe ? wysiwygFrame.parentElement.offsetTop : 0)\n        };\n    },\n    /**\r\n     * @description It compares the start and end indexes of \"a\" and \"b\" and returns the number of overlapping indexes in the range.\r\n     * ex) 1, 5, 4, 6 => \"2\" (4 ~ 5)\r\n     * @param {Number} aStart Start index of \"a\"\r\n     * @param {Number} aEnd End index of \"a\"\r\n     * @param {Number} bStart Start index of \"b\"\r\n     * @param {Number} bEnd Start index of \"b\"\r\n     * @returns {Number}\r\n     */ getOverlapRangeAtIndex: function(aStart, aEnd, bStart, bEnd) {\n        if (aStart <= bEnd ? aEnd < bStart : aEnd > bStart) return 0;\n        const overlap = (aStart > bStart ? aStart : bStart) - (aEnd < bEnd ? aEnd : bEnd);\n        return (overlap < 0 ? overlap * -1 : overlap) + 1;\n    },\n    /**\r\n     * @description Set the text content value of the argument value element\r\n     * @param {Node} element Element to replace text content\r\n     * @param {String} txt Text to be applied\r\n     */ changeTxt: function(element, txt) {\n        if (!element || !txt) return;\n        element.textContent = txt;\n    },\n    /**\r\n     * @description Replace element\r\n     * @param {Element} element Target element\r\n     * @param {String|Element} newElement String or element of the new element to apply\r\n     */ changeElement: function(element, newElement) {\n        if (typeof newElement === \"string\") {\n            if (element.outerHTML) {\n                element.outerHTML = newElement;\n            } else {\n                const doc = this.createElement(\"DIV\");\n                doc.innerHTML = newElement;\n                newElement = doc.firstChild;\n                element.parentNode.replaceChild(newElement, element);\n            }\n        } else if (newElement.nodeType === 1) {\n            element.parentNode.replaceChild(newElement, element);\n        }\n    },\n    /**\r\n     * @description Set style, if all styles are deleted, the style properties are deleted.\r\n     * @param {Element} element Element to set style\r\n     * @param {String} styleName Style attribute name (marginLeft, textAlign...)\r\n     * @param {String|Number} value Style value\r\n     */ setStyle: function(element, styleName, value) {\n        element.style[styleName] = value;\n        if (!value && !element.style.cssText) {\n            element.removeAttribute(\"style\");\n        }\n    },\n    /**\r\n     * @description Determine whether any of the matched elements are assigned the given class\r\n     * @param {Element} element Elements to search class name\r\n     * @param {String} className Class name to search for\r\n     * @returns {Boolean}\r\n     */ hasClass: function(element, className) {\n        if (!element) return;\n        return new this._w.RegExp(className).test(element.className);\n    },\n    /**\r\n     * @description Append the className value of the argument value element\r\n     * @param {Element} element Elements to add class name\r\n     * @param {String} className Class name to be add\r\n     */ addClass: function(element, className) {\n        if (!element) return;\n        const check = new this._w.RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        if (check.test(element.className)) return;\n        element.className += (element.className.length > 0 ? \" \" : \"\") + className;\n    },\n    /**\r\n     * @description Delete the className value of the argument value element\r\n     * @param {Element} element Elements to remove class name\r\n     * @param {String} className Class name to be remove\r\n     */ removeClass: function(element, className) {\n        if (!element) return;\n        const check = new this._w.RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        element.className = element.className.replace(check, \" \").trim();\n        if (!element.className.trim()) element.removeAttribute(\"class\");\n    },\n    /**\r\n     * @description Argument value If there is no class name, insert it and delete the class name if it exists\r\n     * @param {Element} element Elements to replace class name\r\n     * @param {String} className Class name to be change\r\n     * @returns {Boolean|undefined}\r\n     */ toggleClass: function(element, className) {\n        if (!element) return;\n        let result = false;\n        const check = new this._w.RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        if (check.test(element.className)) {\n            element.className = element.className.replace(check, \" \").trim();\n        } else {\n            element.className += \" \" + className;\n            result = true;\n        }\n        if (!element.className.trim()) element.removeAttribute(\"class\");\n        return result;\n    },\n    /**\r\n     * @description Checks if element can't be easily enabled\r\n     * @param {Element} element Element to check for\r\n     */ isImportantDisabled: function(element) {\n        return element.hasAttribute(\"data-important-disabled\");\n    },\n    /**\r\n     * @description In the predefined code view mode, the buttons except the executable button are changed to the 'disabled' state.\r\n     * core.codeViewDisabledButtons (An array of buttons whose class name is not \"se-code-view-enabled\")\r\n     * core.resizingDisabledButtons (An array of buttons whose class name is not \"se-resizing-enabled\")\r\n     * @param {Boolean} disabled Disabled value\r\n     * @param {Array|HTMLCollection|NodeList} buttonList Button array\r\n     * @param {Boolean} important If priveleged mode should be used (Necessary to switch importantDisabled buttons)\r\n     */ setDisabledButtons: function(disabled, buttonList, important) {\n        for(let i = 0, len = buttonList.length; i < len; i++){\n            let button = buttonList[i];\n            if (important || !this.isImportantDisabled(button)) button.disabled = disabled;\n            if (important) {\n                if (disabled) {\n                    button.setAttribute(\"data-important-disabled\", \"\");\n                } else {\n                    button.removeAttribute(\"data-important-disabled\");\n                }\n            }\n        }\n    },\n    /**\r\n     * @description Delete argumenu value element\r\n     * @param {Node} item Node to be remove\r\n     */ removeItem: function(item) {\n        if (!item) return;\n        if (typeof item.remove === \"function\") item.remove();\n        else if (item.parentNode) item.parentNode.removeChild(item);\n    },\n    /**\r\n     * @description Delete all parent nodes that match the condition.\r\n     * Returns an {sc: previousSibling, ec: nextSibling}(the deleted node reference) or null.\r\n     * @param {Node} item Node to be remove\r\n     * @param {Function|null} validation Validation function. default(Deleted if it only have breakLine and blanks)\r\n     * @param {Element|null} stopParent Stop when the parent node reaches stopParent\r\n     * @returns {Object|null} {sc: previousSibling, ec: nextSibling}\r\n     */ removeItemAllParents: function(item, validation, stopParent) {\n        if (!item) return null;\n        let cc = null;\n        if (!validation) {\n            validation = (function(current) {\n                if (current === stopParent || this.isComponent(current)) return false;\n                const text = current.textContent.trim();\n                return text.length === 0 || /^(\\n|\\u200B)+$/.test(text);\n            }).bind(this);\n        }\n        (function recursionFunc(element) {\n            if (!util.isWysiwygDiv(element)) {\n                const parent = element.parentNode;\n                if (parent && validation(element)) {\n                    cc = {\n                        sc: element.previousElementSibling,\n                        ec: element.nextElementSibling\n                    };\n                    util.removeItem(element);\n                    recursionFunc(parent);\n                }\n            }\n        })(item);\n        return cc;\n    },\n    /**\r\n     * @description Detach Nested all nested lists under the \"baseNode\".\r\n     * Returns a list with nested removed.\r\n     * @param {Node} baseNode Element on which to base.\r\n     * @param {Boolean} all If true, it also detach all nested lists of a returned list.\r\n     * @returns {Element}\r\n     */ detachNestedList: function(baseNode, all) {\n        const rNode = this._deleteNestedList(baseNode);\n        let rangeElement, cNodes;\n        if (rNode) {\n            rangeElement = rNode.cloneNode(false);\n            cNodes = rNode.childNodes;\n            const index = this.getPositionIndex(baseNode);\n            while(cNodes[index]){\n                rangeElement.appendChild(cNodes[index]);\n            }\n        } else {\n            rangeElement = baseNode;\n        }\n        let rChildren;\n        if (!all) {\n            const depth = this.getElementDepth(baseNode) + 2;\n            rChildren = this.getListChildren(baseNode, (function(current) {\n                return this.isListCell(current) && !current.previousElementSibling && this.getElementDepth(current) === depth;\n            }).bind(this));\n        } else {\n            rChildren = this.getListChildren(rangeElement, (function(current) {\n                return this.isListCell(current) && !current.previousElementSibling;\n            }).bind(this));\n        }\n        for(let i = 0, len = rChildren.length; i < len; i++){\n            this._deleteNestedList(rChildren[i]);\n        }\n        if (rNode) {\n            rNode.parentNode.insertBefore(rangeElement, rNode.nextSibling);\n            if (cNodes && cNodes.length === 0) this.removeItem(rNode);\n        }\n        return rangeElement === baseNode ? rangeElement.parentNode : rangeElement;\n    },\n    /**\r\n     * @description Sub function of util.detachNestedList method.\r\n     * @private\r\n     */ _deleteNestedList: function(baseNode) {\n        const baseParent = baseNode.parentNode;\n        let sibling = baseParent;\n        let parent = sibling.parentNode;\n        let liSibling, liParent, child, index, c;\n        while(this.isListCell(parent)){\n            index = this.getPositionIndex(baseNode);\n            liSibling = parent.nextElementSibling;\n            liParent = parent.parentNode;\n            child = sibling;\n            while(child){\n                sibling = sibling.nextSibling;\n                if (this.isList(child)) {\n                    c = child.childNodes;\n                    while(c[index]){\n                        liParent.insertBefore(c[index], liSibling);\n                    }\n                    if (c.length === 0) this.removeItem(child);\n                } else {\n                    liParent.appendChild(child);\n                }\n                child = sibling;\n            }\n            sibling = liParent;\n            parent = liParent.parentNode;\n        }\n        if (baseParent.children.length === 0) this.removeItem(baseParent);\n        return liParent;\n    },\n    /**\r\n     * @description Split all tags based on \"baseNode\"\r\n     * Returns the last element of the splited tag.\r\n     * @param {Node} baseNode Element or text node on which to base\r\n     * @param {Number|Node|null} offset Text offset of \"baseNode\" (Only valid when \"baseNode\" is a text node)\r\n     * @param {Number} depth The nesting depth of the element being split. (default: 0)\r\n     * @returns {Element}\r\n     */ splitElement: function(baseNode, offset, depth) {\n        if (this.isWysiwygDiv(baseNode)) return baseNode;\n        if (offset && !this.isNumber(offset)) {\n            const children = baseNode.childNodes;\n            let index = this.getPositionIndex(offset);\n            const prev = baseNode.cloneNode(false);\n            const next = baseNode.cloneNode(false);\n            for(let i = 0, len = children.length; i < len; i++){\n                if (i < index) prev.appendChild(children[i]);\n                else if (i > index) next.appendChild(children[i]);\n                else continue;\n                i--;\n                len--;\n                index--;\n            }\n            if (prev.childNodes.length > 0) baseNode.parentNode.insertBefore(prev, baseNode);\n            if (next.childNodes.length > 0) baseNode.parentNode.insertBefore(next, baseNode.nextElementSibling);\n            return baseNode;\n        }\n        const bp = baseNode.parentNode;\n        let index = 0;\n        let suffixIndex = 1;\n        let next = true;\n        let newEl, children, temp;\n        if (!depth || depth < 0) depth = 0;\n        if (baseNode.nodeType === 3) {\n            index = this.getPositionIndex(baseNode);\n            if (offset >= 0 && baseNode.length !== offset) {\n                baseNode.splitText(offset);\n                const after = this.getNodeFromPath([\n                    index + 1\n                ], bp);\n                if (this.onlyZeroWidthSpace(after)) after.data = this.zeroWidthSpace;\n            }\n        } else if (baseNode.nodeType === 1) {\n            if (offset === 0) {\n                while(baseNode.firstChild){\n                    baseNode = baseNode.firstChild;\n                }\n                if (baseNode.nodeType === 3) {\n                    const after = this.createTextNode(this.zeroWidthSpace);\n                    baseNode.parentNode.insertBefore(after, baseNode);\n                    baseNode = after;\n                }\n            }\n            if (!baseNode.previousSibling) {\n                if (this.getElementDepth(baseNode) === depth) next = false;\n            } else {\n                baseNode = baseNode.previousSibling;\n            }\n        }\n        if (baseNode.nodeType === 1) suffixIndex = 0;\n        let depthEl = baseNode;\n        while(this.getElementDepth(depthEl) > depth){\n            index = this.getPositionIndex(depthEl) + suffixIndex;\n            depthEl = depthEl.parentNode;\n            temp = newEl;\n            newEl = depthEl.cloneNode(false);\n            children = depthEl.childNodes;\n            if (temp) {\n                if (this.isListCell(newEl) && this.isList(temp) && temp.firstElementChild) {\n                    newEl.innerHTML = temp.firstElementChild.innerHTML;\n                    util.removeItem(temp.firstElementChild);\n                    if (temp.children.length > 0) newEl.appendChild(temp);\n                } else {\n                    newEl.appendChild(temp);\n                }\n            }\n            while(children[index]){\n                newEl.appendChild(children[index]);\n            }\n        }\n        if (depthEl.childNodes.length <= 1 && (!depthEl.firstChild || depthEl.firstChild.textContent.length === 0)) depthEl.innerHTML = \"<br>\";\n        const pElement = depthEl.parentNode;\n        if (next) depthEl = depthEl.nextSibling;\n        if (!newEl) return depthEl;\n        this.mergeSameTags(newEl, null, false);\n        this.mergeNestedTags(newEl, (function(current) {\n            return this.isList(current);\n        }).bind(this));\n        if (newEl.childNodes.length > 0) pElement.insertBefore(newEl, depthEl);\n        else newEl = depthEl;\n        if (this.isListCell(newEl) && newEl.children && this.isList(newEl.children[0])) {\n            newEl.insertBefore(this.createElement(\"BR\"), newEl.children[0]);\n        }\n        if (bp.childNodes.length === 0) this.removeItem(bp);\n        return newEl;\n    },\n    /**\r\n     * @description Use with \"npdePath (util.getNodePath)\" to merge the same attributes and tags if they are present and modify the nodepath.\r\n     * If \"offset\" has been changed, it will return as much \"offset\" as it has been modified.\r\n     * An array containing change offsets is returned in the order of the \"nodePathArray\" array.\r\n     * @param {Element} element Element\r\n     * @param {Array|null} nodePathArray Array of NodePath object ([util.getNodePath(), ..])\r\n     * @param {Boolean} onlyText If true, non-text nodes(!util._isIgnoreNodeChange) like 'span', 'strong'.. are ignored.\r\n     * @returns {Array} [offset, ..]\r\n     */ mergeSameTags: function(element, nodePathArray, onlyText) {\n        const inst = this;\n        const nodePathLen = nodePathArray ? nodePathArray.length : 0;\n        let offsets = null;\n        if (nodePathLen) {\n            offsets = this._w.Array.apply(null, new this._w.Array(nodePathLen)).map(this._w.Number.prototype.valueOf, 0);\n        }\n        (function recursionFunc(current, depth, depthIndex) {\n            const children = current.childNodes;\n            for(let i = 0, len = children.length, child, next; i < len; i++){\n                child = children[i];\n                next = children[i + 1];\n                if (!child) break;\n                if (onlyText && inst._isIgnoreNodeChange(child) || !onlyText && (inst.isTable(child) || inst.isListCell(child) || inst.isFormatElement(child) && !inst.isFreeFormatElement(child))) {\n                    if (inst.isTable(child) || inst.isListCell(child)) {\n                        recursionFunc(child, depth + 1, i);\n                    }\n                    continue;\n                }\n                if (len === 1 && current.nodeName === child.nodeName && current.parentNode) {\n                    // update nodePath\n                    if (nodePathLen) {\n                        let path, c, p, cDepth, spliceDepth;\n                        for(let n = 0; n < nodePathLen; n++){\n                            path = nodePathArray[n];\n                            if (path && path[depth] === i) {\n                                c = child, p = current, cDepth = depth, spliceDepth = true;\n                                while(cDepth >= 0){\n                                    if (inst.getArrayIndex(p.childNodes, c) !== path[cDepth]) {\n                                        spliceDepth = false;\n                                        break;\n                                    }\n                                    c = child.parentNode;\n                                    p = c.parentNode;\n                                    cDepth--;\n                                }\n                                if (spliceDepth) {\n                                    path.splice(depth, 1);\n                                    path[depth] = i;\n                                }\n                            }\n                        }\n                    }\n                    // merge tag\n                    inst.copyTagAttributes(child, current);\n                    current.parentNode.insertBefore(child, current);\n                    inst.removeItem(current);\n                }\n                if (!next) {\n                    if (child.nodeType === 1) recursionFunc(child, depth + 1, i);\n                    break;\n                }\n                if (child.nodeName === next.nodeName && inst.isSameAttributes(child, next) && child.href === next.href) {\n                    const childs = child.childNodes;\n                    let childLength = 0;\n                    for(let n = 0, nLen = childs.length; n < nLen; n++){\n                        if (childs[n].textContent.length > 0) childLength++;\n                    }\n                    const l = child.lastChild;\n                    const r = next.firstChild;\n                    let addOffset = 0;\n                    if (l && r) {\n                        const textOffset = l.nodeType === 3 && r.nodeType === 3;\n                        addOffset = l.textContent.length;\n                        let tempL = l.previousSibling;\n                        while(tempL && tempL.nodeType === 3){\n                            addOffset += tempL.textContent.length;\n                            tempL = tempL.previousSibling;\n                        }\n                        if (childLength > 0 && l.nodeType === 3 && r.nodeType === 3 && (l.textContent.length > 0 || r.textContent.length > 0)) childLength--;\n                        if (nodePathLen) {\n                            let path = null;\n                            for(let n = 0; n < nodePathLen; n++){\n                                path = nodePathArray[n];\n                                if (path && path[depth] > i) {\n                                    if (depth > 0 && path[depth - 1] !== depthIndex) continue;\n                                    path[depth] -= 1;\n                                    if (path[depth + 1] >= 0 && path[depth] === i) {\n                                        path[depth + 1] += childLength;\n                                        if (textOffset) {\n                                            if (l && l.nodeType === 3 && r && r.nodeType === 3) {\n                                                offsets[n] += addOffset;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (child.nodeType === 3) {\n                        addOffset = child.textContent.length;\n                        child.textContent += next.textContent;\n                        if (nodePathLen) {\n                            let path = null;\n                            for(let n = 0; n < nodePathLen; n++){\n                                path = nodePathArray[n];\n                                if (path && path[depth] > i) {\n                                    if (depth > 0 && path[depth - 1] !== depthIndex) continue;\n                                    path[depth] -= 1;\n                                    if (path[depth + 1] >= 0 && path[depth] === i) {\n                                        path[depth + 1] += childLength;\n                                        offsets[n] += addOffset;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        child.innerHTML += next.innerHTML;\n                    }\n                    inst.removeItem(next);\n                    i--;\n                } else if (child.nodeType === 1) {\n                    recursionFunc(child, depth + 1, i);\n                }\n            }\n        })(element, 0, 0);\n        return offsets;\n    },\n    /**\r\n     * @description Remove nested tags without other child nodes.\r\n     * @param {Element} element Element object\r\n     * @param {Function|String|null} validation Validation function / String(\"tag1|tag2..\") / If null, all tags are applicable.\r\n     */ mergeNestedTags: function(element, validation) {\n        if (typeof validation === \"string\") {\n            validation = (function(current) {\n                return this.test(current.tagName);\n            }).bind(new this._w.RegExp(\"^(\" + (validation ? validation : \".+\") + \")$\", \"i\"));\n        } else if (typeof validation !== \"function\") {\n            validation = function() {\n                return true;\n            };\n        }\n        (function recursionFunc(current) {\n            let children = current.children;\n            if (children.length === 1 && children[0].nodeName === current.nodeName && validation(current)) {\n                const temp = children[0];\n                children = temp.children;\n                while(children[0]){\n                    current.appendChild(children[0]);\n                }\n                current.removeChild(temp);\n            }\n            for(let i = 0, len = current.children.length; i < len; i++){\n                recursionFunc(current.children[i]);\n            }\n        })(element);\n    },\n    /**\r\n     * @description Delete a empty child node of argument element.\r\n     * @param {Element} element Element node\r\n     * @param {Node|null} notRemoveNode Do not remove node\r\n     * @param {boolean} forceDelete When all child nodes are deleted, the parent node is also deleted.\r\n     */ removeEmptyNode: function(element, notRemoveNode, forceDelete) {\n        const inst = this;\n        if (notRemoveNode) {\n            notRemoveNode = inst.getParentElement(notRemoveNode, function(current) {\n                return element === current.parentElement;\n            });\n        }\n        (function recursionFunc(current) {\n            if (inst._notTextNode(current) || current === notRemoveNode || inst.isNonEditable(current)) return 0;\n            if (current !== element && inst.onlyZeroWidthSpace(current.textContent) && (!current.firstChild || !inst.isBreak(current.firstChild)) && !current.querySelector(inst._allowedEmptyNodeList)) {\n                if (current.parentNode) {\n                    current.parentNode.removeChild(current);\n                    return -1;\n                }\n            } else {\n                const children = current.children;\n                for(let i = 0, len = children.length, r = 0; i < len; i++){\n                    if (!children[i + r] || inst.isComponent(children[i + r])) continue;\n                    r += recursionFunc(children[i + r]);\n                }\n            }\n            return 0;\n        })(element);\n        if (element.childNodes.length === 0) {\n            if (forceDelete) {\n                this.removeItem(element);\n            } else {\n                element.innerHTML = \"<br>\";\n            }\n        }\n    },\n    /**\r\n     * @description Remove whitespace between tags in HTML string.\r\n     * @param {String} html HTML string\r\n     * @returns {String}\r\n     */ htmlRemoveWhiteSpace: function(html) {\n        if (!html) return \"\";\n        return html.trim().replace(/<\\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\\s+(?=<)/ig, function(m) {\n            return m.replace(/\\n/g, \"\").replace(/\\s+/, \" \");\n        });\n    },\n    /**\r\n     * @description HTML code compression\r\n     * @param {string} html HTML string\r\n     * @returns {string} HTML string\r\n     */ htmlCompress: function(html) {\n        return html.replace(/\\n/g, \"\").replace(/(>)(?:\\s+)(<)/g, \"$1$2\");\n    },\n    /**\r\n     * @description Sort a element array by depth of element.\r\n     * @param {Array} array Array object\r\n     * @param {Boolean} des true: descending order / false: ascending order\r\n     */ sortByDepth: function(array, des) {\n        const t = !des ? -1 : 1;\n        const f = t * -1;\n        array.sort((function(a, b) {\n            if (!this.isListCell(a) || !this.isListCell(b)) return 0;\n            a = this.getElementDepth(a);\n            b = this.getElementDepth(b);\n            return a > b ? t : a < b ? f : 0;\n        }).bind(this));\n    },\n    /**\r\n     * @description Escape a string for safe use in regular expressions.\r\n     * @param {String} string String to escape\r\n     * @returns {String}\r\n     */ escapeStringRegexp: function(string) {\n        if (typeof string !== \"string\") {\n            throw new TypeError(\"Expected a string\");\n        }\n        // Escape characters with special meaning either inside or outside character sets.\n        // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n        return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n    },\n    _isExcludeSelectionElement: function(element) {\n        return !/FIGCAPTION/i.test(element.nodeName) && (this.isComponent(element) || /FIGURE/i.test(element.nodeName));\n    },\n    /**\r\n     * @description Nodes that need to be added without modification when changing text nodes\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _isIgnoreNodeChange: function(element) {\n        return element && element.nodeType !== 3 && (this.isNonEditable(element) || !this.isTextStyleElement(element));\n    },\n    /**\r\n     * @description Nodes that must remain undetached when changing text nodes (A, Label, Code, Span:font-size)\r\n     * @param {Node|String} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _isMaintainedNode: function(element) {\n        return element && element.nodeType !== 3 && /^(a|label|code|summary)$/i.test(typeof element === \"string\" ? element : element.nodeName);\n    },\n    /**\r\n     * @description Node with font-size style\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _isSizeNode: function(element) {\n        return element && element.nodeType !== 3 && this.isTextStyleElement(element) && !!element.style.fontSize;\n    },\n    /**\r\n     * @description Nodes without text\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _notTextNode: function(element) {\n        return element && element.nodeType !== 3 && (this.isComponent(element) || /^(br|input|select|canvas|img|iframe|audio|video)$/i.test(typeof element === \"string\" ? element : element.nodeName));\n    },\n    /**\r\n     * @deprecated\r\n     * @description Check disallowed tags\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _disallowedTags: function(element) {\n        return /^(meta|script|link|style|[a-z]+\\:[a-z]+)$/i.test(element.nodeName);\n    },\n    /**\r\n     * @description Create whitelist RegExp object.\r\n     * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?!\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n     * @param {String} list Tags list (\"br|p|div|pre...\")\r\n     * @returns {RegExp}\r\n     */ createTagsWhitelist: function(list) {\n        return new RegExp(\"<\\\\/?\\\\b(?!\\\\b\" + (list || \"\").replace(/\\|/g, \"\\\\b|\\\\b\") + \"\\\\b)[^>]*>\", \"gi\");\n    },\n    /**\r\n     * @description Create blacklist RegExp object.\r\n     * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?:\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n     * @param {String} list Tags list (\"br|p|div|pre...\")\r\n     * @returns {RegExp}\r\n     */ createTagsBlacklist: function(list) {\n        return new RegExp(\"<\\\\/?\\\\b(?:\\\\b\" + (list || \"^\").replace(/\\|/g, \"\\\\b|\\\\b\") + \"\\\\b)[^>]*>\", \"gi\");\n    },\n    /**\r\n     * @description Fix tags that do not fit the editor format.\r\n     * @param {Element} documentFragment Document fragment \"DOCUMENT_FRAGMENT_NODE\" (nodeType === 11)\r\n     * @param {RegExp} htmlCheckWhitelistRegExp Editor tags whitelist (core._htmlCheckWhitelistRegExp)\r\n     * @param {RegExp} htmlCheckBlacklistRegExp Editor tags blacklist (core._htmlCheckBlacklistRegExp)\r\n     * @param {Function} classNameFilter Class name filter function\r\n     * @private\r\n     */ _consistencyCheckOfHTML: function(documentFragment, htmlCheckWhitelistRegExp, htmlCheckBlacklistRegExp, classNameFilter) {\n        /**\r\n         * It is can use \".children(util.getListChildren)\" to exclude text nodes, but \"documentFragment.children\" is not supported in IE.\r\n         * So check the node type and exclude the text no (current.nodeType !== 1)\r\n         */ const removeTags = [], emptyTags = [], wrongList = [], withoutFormatCells = [];\n        // wrong position\n        const wrongTags = this.getListChildNodes(documentFragment, (function(current) {\n            if (current.nodeType !== 1) {\n                if (this.isList(current.parentElement)) removeTags.push(current);\n                return false;\n            }\n            // white list\n            if (htmlCheckBlacklistRegExp.test(current.nodeName) || !htmlCheckWhitelistRegExp.test(current.nodeName) && current.childNodes.length === 0 && this.isNotCheckingNode(current)) {\n                removeTags.push(current);\n                return false;\n            }\n            // empty tags\n            const nrtag = !this.getParentElement(current, this.isNotCheckingNode);\n            if (!this.isTable(current) && !this.isListCell(current) && !this.isAnchor(current) && (this.isFormatElement(current) || this.isRangeFormatElement(current) || this.isTextStyleElement(current)) && current.childNodes.length === 0 && nrtag) {\n                emptyTags.push(current);\n                return false;\n            }\n            // wrong list\n            if (this.isList(current.parentNode) && !this.isList(current) && !this.isListCell(current)) {\n                wrongList.push(current);\n                return false;\n            }\n            // table cells\n            if (this.isCell(current)) {\n                const fel = current.firstElementChild;\n                if (!this.isFormatElement(fel) && !this.isRangeFormatElement(fel) && !this.isComponent(fel)) {\n                    withoutFormatCells.push(current);\n                    return false;\n                }\n            }\n            // class filter\n            if (nrtag && current.className) {\n                const className = new this._w.Array(current.classList).map(classNameFilter).join(\" \").trim();\n                if (className) current.className = className;\n                else current.removeAttribute(\"class\");\n            }\n            const result = current.parentNode !== documentFragment && nrtag && (this.isListCell(current) && !this.isList(current.parentNode) || (this.isFormatElement(current) || this.isComponent(current)) && !this.isRangeFormatElement(current.parentNode) && !this.getParentElement(current, this.isComponent));\n            return result;\n        }).bind(this));\n        for(let i = 0, len = removeTags.length; i < len; i++){\n            this.removeItem(removeTags[i]);\n        }\n        const checkTags = [];\n        for(let i = 0, len = wrongTags.length, t, p; i < len; i++){\n            t = wrongTags[i];\n            p = t.parentNode;\n            if (!p || !p.parentNode) continue;\n            if (this.getParentElement(t, this.isListCell)) {\n                const cellChildren = t.childNodes;\n                for(let j = cellChildren.length - 1; len >= 0; j--){\n                    p.insertBefore(t, cellChildren[j]);\n                }\n                checkTags.push(t);\n            } else {\n                p.parentNode.insertBefore(t, p);\n                checkTags.push(p);\n            }\n        }\n        for(let i = 0, len = checkTags.length, t; i < len; i++){\n            t = checkTags[i];\n            if (this.onlyZeroWidthSpace(t.textContent.trim())) {\n                this.removeItem(t);\n            }\n        }\n        for(let i = 0, len = emptyTags.length; i < len; i++){\n            this.removeItem(emptyTags[i]);\n        }\n        for(let i = 0, len = wrongList.length, t, tp, children, p; i < len; i++){\n            t = wrongList[i];\n            p = t.parentNode;\n            if (!p) continue;\n            tp = this.createElement(\"LI\");\n            if (this.isFormatElement(t)) {\n                children = t.childNodes;\n                while(children[0]){\n                    tp.appendChild(children[0]);\n                }\n                p.insertBefore(tp, t);\n                this.removeItem(t);\n            } else {\n                t = t.nextSibling;\n                tp.appendChild(wrongList[i]);\n                p.insertBefore(tp, t);\n            }\n        }\n        for(let i = 0, len = withoutFormatCells.length, t, f; i < len; i++){\n            t = withoutFormatCells[i];\n            f = this.createElement(\"DIV\");\n            f.innerHTML = t.textContent.trim().length === 0 && t.children.length === 0 ? \"<br>\" : t.innerHTML;\n            t.innerHTML = f.outerHTML;\n        }\n    },\n    _setDefaultOptionStyle: function(options, defaultStyle) {\n        let optionStyle = \"\";\n        if (options.height) optionStyle += \"height:\" + options.height + \";\";\n        if (options.minHeight) optionStyle += \"min-height:\" + options.minHeight + \";\";\n        if (options.maxHeight) optionStyle += \"max-height:\" + options.maxHeight + \";\";\n        if (options.position) optionStyle += \"position:\" + options.position + \";\";\n        if (options.width) optionStyle += \"width:\" + options.width + \";\";\n        if (options.minWidth) optionStyle += \"min-width:\" + options.minWidth + \";\";\n        if (options.maxWidth) optionStyle += \"max-width:\" + options.maxWidth + \";\";\n        let top = \"\", frame = \"\", editor = \"\";\n        defaultStyle = optionStyle + defaultStyle;\n        const styleArr = defaultStyle.split(\";\");\n        for(let i = 0, len = styleArr.length, s; i < len; i++){\n            s = styleArr[i].trim();\n            if (!s) continue;\n            if (/^(min-|max-)?width\\s*:/.test(s) || /^(z-index|position)\\s*:/.test(s)) {\n                top += s + \";\";\n                continue;\n            }\n            if (/^(min-|max-)?height\\s*:/.test(s)) {\n                if (/^height/.test(s) && s.split(\":\")[1].trim() === \"auto\") {\n                    options.height = \"auto\";\n                }\n                frame += s + \";\";\n                continue;\n            }\n            editor += s + \";\";\n        }\n        return {\n            top: top,\n            frame: frame,\n            editor: editor\n        };\n    },\n    _setIframeDocument: function(frame, options) {\n        frame.setAttribute(\"scrolling\", \"auto\");\n        frame.contentDocument.head.innerHTML = \"\" + '<meta charset=\"utf-8\" />' + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">' + this._setIframeCssTags(options);\n        frame.contentDocument.body.className = options._editableClass;\n        frame.contentDocument.body.setAttribute(\"contenteditable\", true);\n        frame.contentDocument.body.setAttribute(\"autocorrect\", \"off\");\n    },\n    _setIframeCssTags: function(options) {\n        const linkNames = options.iframeCSSFileName;\n        const wRegExp = this._w.RegExp;\n        let tagString = \"\";\n        for(let f = 0, len = linkNames.length, path; f < len; f++){\n            path = [];\n            if (/(^https?:\\/\\/)|(^data:text\\/css,)/.test(linkNames[f])) {\n                path.push(linkNames[f]);\n            } else {\n                const CSSFileName = new wRegExp(\"(^|.*[\\\\/])\" + linkNames[f] + \"(\\\\..+)?\\\\.css(?:\\\\?.*|;.*)?$\", \"i\");\n                for(let c = document.getElementsByTagName(\"link\"), i = 0, len = c.length, styleTag; i < len; i++){\n                    styleTag = c[i].href.match(CSSFileName);\n                    if (styleTag) path.push(styleTag[0]);\n                }\n            }\n            if (!path || path.length === 0) throw '[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property \"iframeCSSFileName\" before creating editor instances.';\n            for(let i = 0, len = path.length; i < len; i++){\n                tagString += '<link href=\"' + path[i] + '\" rel=\"stylesheet\">';\n            }\n        }\n        return tagString + (options.height === \"auto\" ? \"<style>\\n/** Iframe height auto */\\nbody{height: min-content; overflow: hidden;}\\n</style>\" : \"\");\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (util);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/lib/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/command/blockquote.js":
/*!******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/command/blockquote.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"blockquote\",\n    display: \"command\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.blockquote = {\n            targetButton: targetElement,\n            tag: core.util.createElement(\"BLOCKQUOTE\")\n        };\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        if (!element) {\n            this.util.removeClass(this.context.blockquote.targetButton, \"active\");\n        } else if (/blockquote/i.test(element.nodeName)) {\n            this.util.addClass(this.context.blockquote.targetButton, \"active\");\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override core\n     */ action: function() {\n        const currentBlockquote = this.util.getParentElement(this.getSelectionNode(), \"blockquote\");\n        if (currentBlockquote) {\n            this.detachRangeFormatElement(currentBlockquote, null, null, false, false);\n        } else {\n            this.applyRangeFormatElement(this.context.blockquote.tag.cloneNode(false));\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL2NvbW1hbmQvYmxvY2txdW90ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQSxpRUFBZTtJQUNYQSxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsS0FBSyxTQUFVQyxJQUFJLEVBQUVDLGFBQWE7UUFDOUIsTUFBTUMsVUFBVUYsS0FBS0UsT0FBTztRQUM1QkEsUUFBUUMsVUFBVSxHQUFHO1lBQ2pCQyxjQUFjSDtZQUNkSSxLQUFLTCxLQUFLTSxJQUFJLENBQUNDLGFBQWEsQ0FBQztRQUNqQztJQUNKO0lBRUE7O0tBRUMsR0FDREMsUUFBUSxTQUFVQyxPQUFPO1FBQ3JCLElBQUksQ0FBQ0EsU0FBUztZQUNWLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxXQUFXLENBQUMsSUFBSSxDQUFDUixPQUFPLENBQUNDLFVBQVUsQ0FBQ0MsWUFBWSxFQUFFO1FBQ2hFLE9BQU8sSUFBSSxjQUFjTyxJQUFJLENBQUNGLFFBQVFHLFFBQVEsR0FBRztZQUM3QyxJQUFJLENBQUNOLElBQUksQ0FBQ08sUUFBUSxDQUFDLElBQUksQ0FBQ1gsT0FBTyxDQUFDQyxVQUFVLENBQUNDLFlBQVksRUFBRTtZQUN6RCxPQUFPO1FBQ1g7UUFFQSxPQUFPO0lBQ1g7SUFFQTs7S0FFQyxHQUNEVSxRQUFRO1FBQ0osTUFBTUMsb0JBQW9CLElBQUksQ0FBQ1QsSUFBSSxDQUFDVSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNDLGdCQUFnQixJQUFJO1FBRTlFLElBQUlGLG1CQUFtQjtZQUNuQixJQUFJLENBQUNHLHdCQUF3QixDQUFDSCxtQkFBbUIsTUFBTSxNQUFNLE9BQU87UUFDeEUsT0FBTztZQUNILElBQUksQ0FBQ0ksdUJBQXVCLENBQUMsSUFBSSxDQUFDakIsT0FBTyxDQUFDQyxVQUFVLENBQUNFLEdBQUcsQ0FBQ2UsU0FBUyxDQUFDO1FBQ3ZFO0lBQ0o7QUFDSixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGhlLWZsZXhpb24vcGtnLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvcGx1Z2lucy9jb21tYW5kL2Jsb2NrcXVvdGUuanM/YTk5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXG4gKlxuICogc3VuZWRpdG9yLmpzXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxuICogTUlUIGxpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdibG9ja3F1b3RlJyxcbiAgICBkaXNwbGF5OiAnY29tbWFuZCcsXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xuICAgICAgICBjb250ZXh0LmJsb2NrcXVvdGUgPSB7XG4gICAgICAgICAgICB0YXJnZXRCdXR0b246IHRhcmdldEVsZW1lbnQsXG4gICAgICAgICAgICB0YWc6IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdCTE9DS1FVT1RFJylcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQE92ZXJyaWRlIGNvcmVcbiAgICAgKi9cbiAgICBhY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHRoaXMuY29udGV4dC5ibG9ja3F1b3RlLnRhcmdldEJ1dHRvbiwgJ2FjdGl2ZScpO1xuICAgICAgICB9IGVsc2UgaWYgKC9ibG9ja3F1b3RlL2kudGVzdChlbGVtZW50Lm5vZGVOYW1lKSkge1xuICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHRoaXMuY29udGV4dC5ibG9ja3F1b3RlLnRhcmdldEJ1dHRvbiwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQE92ZXJyaWRlIGNvcmVcbiAgICAgKi9cbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEJsb2NrcXVvdGUgPSB0aGlzLnV0aWwuZ2V0UGFyZW50RWxlbWVudCh0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSwgJ2Jsb2NrcXVvdGUnKTtcblxuICAgICAgICBpZiAoY3VycmVudEJsb2NrcXVvdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50KGN1cnJlbnRCbG9ja3F1b3RlLCBudWxsLCBudWxsLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBseVJhbmdlRm9ybWF0RWxlbWVudCh0aGlzLmNvbnRleHQuYmxvY2txdW90ZS50YWcuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICB9XG59OyJdLCJuYW1lcyI6WyJuYW1lIiwiZGlzcGxheSIsImFkZCIsImNvcmUiLCJ0YXJnZXRFbGVtZW50IiwiY29udGV4dCIsImJsb2NrcXVvdGUiLCJ0YXJnZXRCdXR0b24iLCJ0YWciLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsImFjdGl2ZSIsImVsZW1lbnQiLCJyZW1vdmVDbGFzcyIsInRlc3QiLCJub2RlTmFtZSIsImFkZENsYXNzIiwiYWN0aW9uIiwiY3VycmVudEJsb2NrcXVvdGUiLCJnZXRQYXJlbnRFbGVtZW50IiwiZ2V0U2VsZWN0aW9uTm9kZSIsImRldGFjaFJhbmdlRm9ybWF0RWxlbWVudCIsImFwcGx5UmFuZ2VGb3JtYXRFbGVtZW50IiwiY2xvbmVOb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/command/blockquote.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/dialog/image.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/dialog/image.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/dialog */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/dialog.js\");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/_anchor */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/_anchor.js\");\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/component */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/component.js\");\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_modules_component__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/resizing */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/resizing.js\");\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_modules_resizing__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/fileManager */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/fileManager.js\");\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_modules_fileManager__WEBPACK_IMPORTED_MODULE_4__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"image\",\n    display: \"dialog\",\n    add: function(core) {\n        core.addModule([\n            (_modules_dialog__WEBPACK_IMPORTED_MODULE_0___default()),\n            _modules_anchor__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n            (_modules_component__WEBPACK_IMPORTED_MODULE_2___default()),\n            (_modules_resizing__WEBPACK_IMPORTED_MODULE_3___default()),\n            (_modules_fileManager__WEBPACK_IMPORTED_MODULE_4___default())\n        ]);\n        const options = core.options;\n        const context = core.context;\n        const contextImage = context.image = {\n            _infoList: [],\n            _infoIndex: 0,\n            _uploadFileLength: 0,\n            focusElement: null,\n            sizeUnit: options._imageSizeUnit,\n            _linkElement: \"\",\n            _altText: \"\",\n            _align: \"none\",\n            _floatClassRegExp: \"__se__float\\\\-[a-z]+\",\n            _v_src: {\n                _linkValue: \"\"\n            },\n            svgDefaultSize: \"30%\",\n            base64RenderIndex: 0,\n            // @require @Override component\n            _element: null,\n            _cover: null,\n            _container: null,\n            // @Override resizing properties\n            inputX: null,\n            inputY: null,\n            _element_w: 1,\n            _element_h: 1,\n            _element_l: 0,\n            _element_t: 0,\n            _defaultSizeX: \"auto\",\n            _defaultSizeY: \"auto\",\n            _origin_w: options.imageWidth === \"auto\" ? \"\" : options.imageWidth,\n            _origin_h: options.imageHeight === \"auto\" ? \"\" : options.imageHeight,\n            _proportionChecked: true,\n            _resizing: options.imageResizing,\n            _resizeDotHide: !options.imageHeightShow,\n            _rotation: options.imageRotation,\n            _alignHide: !options.imageAlignShow,\n            _onlyPercentage: options.imageSizeOnlyPercentage,\n            _ratio: false,\n            _ratioX: 1,\n            _ratioY: 1,\n            _captionShow: true,\n            _captionChecked: false,\n            _caption: null,\n            captionCheckEl: null\n        };\n        /** image dialog */ let image_dialog = this.setDialog(core);\n        contextImage.modal = image_dialog;\n        contextImage.imgInputFile = image_dialog.querySelector(\"._se_image_file\");\n        contextImage.imgUrlFile = image_dialog.querySelector(\"._se_image_url\");\n        contextImage.focusElement = contextImage.imgInputFile || contextImage.imgUrlFile;\n        contextImage.altText = image_dialog.querySelector(\"._se_image_alt\");\n        contextImage.captionCheckEl = image_dialog.querySelector(\"._se_image_check_caption\");\n        contextImage.previewSrc = image_dialog.querySelector(\"._se_tab_content_image .se-link-preview\");\n        /** add event listeners */ image_dialog.querySelector(\".se-dialog-tabs\").addEventListener(\"click\", this.openTab.bind(core));\n        image_dialog.querySelector(\"form\").addEventListener(\"submit\", this.submit.bind(core));\n        if (contextImage.imgInputFile) image_dialog.querySelector(\".se-file-remove\").addEventListener(\"click\", this._removeSelectedFiles.bind(contextImage.imgInputFile, contextImage.imgUrlFile, contextImage.previewSrc));\n        if (contextImage.imgUrlFile) contextImage.imgUrlFile.addEventListener(\"input\", this._onLinkPreview.bind(contextImage.previewSrc, contextImage._v_src, options.linkProtocol));\n        if (contextImage.imgInputFile && contextImage.imgUrlFile) contextImage.imgInputFile.addEventListener(\"change\", this._fileInputChange.bind(contextImage));\n        const imageGalleryButton = image_dialog.querySelector(\".__se__gallery\");\n        if (imageGalleryButton) imageGalleryButton.addEventListener(\"click\", this._openGallery.bind(core));\n        contextImage.proportion = {};\n        contextImage.inputX = {};\n        contextImage.inputY = {};\n        if (options.imageResizing) {\n            contextImage.proportion = image_dialog.querySelector(\"._se_image_check_proportion\");\n            contextImage.inputX = image_dialog.querySelector(\"._se_image_size_x\");\n            contextImage.inputY = image_dialog.querySelector(\"._se_image_size_y\");\n            contextImage.inputX.value = options.imageWidth;\n            contextImage.inputY.value = options.imageHeight;\n            contextImage.inputX.addEventListener(\"keyup\", this.setInputSize.bind(core, \"x\"));\n            contextImage.inputY.addEventListener(\"keyup\", this.setInputSize.bind(core, \"y\"));\n            contextImage.inputX.addEventListener(\"change\", this.setRatio.bind(core));\n            contextImage.inputY.addEventListener(\"change\", this.setRatio.bind(core));\n            contextImage.proportion.addEventListener(\"change\", this.setRatio.bind(core));\n            image_dialog.querySelector(\".se-dialog-btn-revert\").addEventListener(\"click\", this.sizeRevert.bind(core));\n        }\n        /** append html */ context.dialog.modal.appendChild(image_dialog);\n        /** link event */ core.plugins.anchor.initEvent.call(core, \"image\", image_dialog.querySelector(\"._se_tab_content_url\"));\n        contextImage.anchorCtx = core.context.anchor.caller.image;\n        /** empty memory */ image_dialog = null;\n    },\n    /** dialog */ setDialog: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const dialog = core.util.createElement(\"DIV\");\n        dialog.className = \"se-dialog-content se-dialog-image\";\n        dialog.style.display = \"none\";\n        let html = \"\" + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" class=\"close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + \"</button>\" + '<span class=\"se-modal-title\">' + lang.dialogBox.imageBox.title + \"</span>\" + \"</div>\" + '<div class=\"se-dialog-tabs\">' + '<button type=\"button\" class=\"_se_tab_link active\" data-tab-link=\"image\">' + lang.toolbar.image + \"</button>\" + '<button type=\"button\" class=\"_se_tab_link\" data-tab-link=\"url\">' + lang.toolbar.link + \"</button>\" + \"</div>\" + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"_se_tab_content _se_tab_content_image\">' + '<div class=\"se-dialog-body\"><div style=\"border-bottom: 1px dashed #ccc;\">';\n        if (option.imageFileInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.imageBox.file + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_image_file\" type=\"file\" accept=\"' + option.imageAccept + '\"' + (option.imageMultipleFile ? ' multiple=\"multiple\"' : \"\") + \"/>\" + '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + \"</button>\" + \"</div>\" + \"</div>\";\n        }\n        if (option.imageUrlInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.imageBox.url + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form se-input-url _se_image_url\" type=\"text\" />' + (option.imageGalleryUrl && core.plugins.imageGallery ? '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button __se__gallery\" title=\"' + lang.toolbar.imageGallery + '\" aria-label=\"' + lang.toolbar.imageGallery + '\">' + core.icons.image_gallery + \"</button>\" : \"\") + \"</div>\" + '<pre class=\"se-link-preview\"></pre>' + \"</div>\";\n        }\n        html += \"</div>\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.imageBox.altText + '</label><input class=\"se-input-form _se_image_alt\" type=\"text\" />' + \"</div>\";\n        if (option.imageResizing) {\n            const onlyPercentage = option.imageSizeOnlyPercentage;\n            const onlyPercentDisplay = onlyPercentage ? ' style=\"display: none !important;\"' : \"\";\n            const heightDisplay = !option.imageHeightShow ? ' style=\"display: none !important;\"' : \"\";\n            html += '<div class=\"se-dialog-form\">';\n            if (onlyPercentage || !option.imageHeightShow) {\n                html += \"\" + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.size + \"</label>\" + \"</div>\";\n            } else {\n                html += \"\" + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.width + \"</label>\" + '<label class=\"se-dialog-size-x\">&nbsp;</label>' + '<label class=\"size-h\">' + lang.dialogBox.height + \"</label>\" + \"</div>\";\n            }\n            html += \"\" + '<input class=\"se-input-control _se_image_size_x\" placeholder=\"auto\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : \"\") + \" />\" + '<label class=\"se-dialog-size-x\"' + heightDisplay + \">\" + (onlyPercentage ? \"%\" : \"x\") + \"</label>\" + '<input type=\"text\" class=\"se-input-control _se_image_size_y\" placeholder=\"auto\"' + onlyPercentDisplay + (onlyPercentage ? ' max=\"100\"' : \"\") + heightDisplay + \"/>\" + \"<label\" + onlyPercentDisplay + heightDisplay + '><input type=\"checkbox\" class=\"se-dialog-btn-check _se_image_check_proportion\" checked/>&nbsp;' + lang.dialogBox.proportion + \"</label>\" + '<button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" aria-label=\"' + lang.dialogBox.revertButton + '\" class=\"se-btn se-dialog-btn-revert\" style=\"float: right;\">' + core.icons.revert + \"</button>\" + \"</div>\";\n        }\n        html += \"\" + '<div class=\"se-dialog-form se-dialog-form-footer\">' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_image_check_caption\" />&nbsp;' + lang.dialogBox.caption + \"</label>\" + \"</div>\" + \"</div>\" + \"</div>\" + '<div class=\"_se_tab_content _se_tab_content_url\" style=\"display: none\">' + core.context.anchor.forms.innerHTML + \"</div>\" + '<div class=\"se-dialog-footer\">' + \"<div\" + (option.imageAlignShow ? \"\" : ' style=\"display: none\"') + \">\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"none\" checked>' + lang.dialogBox.basic + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"left\">' + lang.dialogBox.left + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"center\">' + lang.dialogBox.center + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"right\">' + lang.dialogBox.right + \"</label>\" + \"</div>\" + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + \"</span></button>\" + \"</div>\" + \"</form>\";\n        dialog.innerHTML = html;\n        return dialog;\n    },\n    _fileInputChange: function() {\n        if (!this.imgInputFile.value) {\n            this.imgUrlFile.removeAttribute(\"disabled\");\n            this.previewSrc.style.textDecoration = \"\";\n        } else {\n            this.imgUrlFile.setAttribute(\"disabled\", true);\n            this.previewSrc.style.textDecoration = \"line-through\";\n        }\n    },\n    _removeSelectedFiles: function(urlInput, previewSrc) {\n        this.value = \"\";\n        if (urlInput) {\n            urlInput.removeAttribute(\"disabled\");\n            previewSrc.style.textDecoration = \"\";\n        }\n    },\n    _openGallery: function() {\n        this.callPlugin(\"imageGallery\", this.plugins.imageGallery.open.bind(this, this.plugins.image._setUrlInput.bind(this.context.image)), null);\n    },\n    _setUrlInput: function(target) {\n        this.altText.value = target.alt;\n        this._v_src._linkValue = this.previewSrc.textContent = this.imgUrlFile.value = target.getAttribute(\"data-value\") || target.src;\n        this.imgUrlFile.focus();\n    },\n    _onLinkPreview: function(context, protocol, e) {\n        const value = e.target.value.trim();\n        context._linkValue = this.textContent = !value ? \"\" : protocol && value.indexOf(\"://\") === -1 && value.indexOf(\"#\") !== 0 ? protocol + value : value.indexOf(\"://\") === -1 ? \"/\" + value : value;\n    },\n    /**\n     * @Override @Required fileManager\n     */ fileTags: [\n        \"img\"\n    ],\n    /**\n     * @Override core, fileManager, resizing\n     * @description It is called from core.selectComponent.\n     * @param {Element} element Target element\n     */ select: function(element) {\n        this.plugins.image.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, \"image\"));\n    },\n    /**\n     * @Override fileManager, resizing\n     */ destroy: function(element) {\n        const imageEl = element || this.context.image._element;\n        const imageContainer = this.util.getParentElement(imageEl, this.util.isMediaComponent) || imageEl;\n        const dataIndex = imageEl.getAttribute(\"data-index\") * 1;\n        // event\n        if (typeof this.functions.onImageDeleteBefore === \"function\" && this.functions.onImageDeleteBefore(imageEl, imageContainer, dataIndex, this) === false) return;\n        let focusEl = imageContainer.previousElementSibling || imageContainer.nextElementSibling;\n        const emptyDiv = imageContainer.parentNode;\n        this.util.removeItem(imageContainer);\n        this.plugins.image.init.call(this);\n        this.controllersOff();\n        if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function(current) {\n            return current.childNodes.length === 0;\n        }, null);\n        // focus\n        this.focusEdge(focusEl);\n        // event\n        this.plugins.fileManager.deleteInfo.call(this, \"image\", dataIndex, this.functions.onImageUpload);\n        // history stack\n        this.history.push(false);\n    },\n    /**\n     * @Required @Override dialog\n     */ on: function(update) {\n        const contextImage = this.context.image;\n        if (!update) {\n            contextImage.inputX.value = contextImage._origin_w = this.options.imageWidth === contextImage._defaultSizeX ? \"\" : this.options.imageWidth;\n            contextImage.inputY.value = contextImage._origin_h = this.options.imageHeight === contextImage._defaultSizeY ? \"\" : this.options.imageHeight;\n            if (contextImage.imgInputFile && this.options.imageMultipleFile) contextImage.imgInputFile.setAttribute(\"multiple\", \"multiple\");\n        } else {\n            if (contextImage.imgInputFile && this.options.imageMultipleFile) contextImage.imgInputFile.removeAttribute(\"multiple\");\n        }\n        this.plugins.anchor.on.call(this, contextImage.anchorCtx, update);\n    },\n    /**\n     * @Required @Override dialog\n     */ open: function() {\n        this.plugins.dialog.open.call(this, \"image\", \"image\" === this.currentControllerName);\n    },\n    openTab: function(e) {\n        const modal = this.context.image.modal;\n        const targetElement = e === \"init\" ? modal.querySelector(\"._se_tab_link\") : e.target;\n        if (!/^BUTTON$/i.test(targetElement.tagName)) {\n            return false;\n        }\n        // Declare all variables\n        const tabName = targetElement.getAttribute(\"data-tab-link\");\n        const contentClassName = \"_se_tab_content\";\n        let i, tabContent, tabLinks;\n        // Get all elements with class=\"tabcontent\" and hide them\n        tabContent = modal.getElementsByClassName(contentClassName);\n        for(i = 0; i < tabContent.length; i++){\n            tabContent[i].style.display = \"none\";\n        }\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\n        tabLinks = modal.getElementsByClassName(\"_se_tab_link\");\n        for(i = 0; i < tabLinks.length; i++){\n            this.util.removeClass(tabLinks[i], \"active\");\n        }\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\n        modal.querySelector(\".\" + contentClassName + \"_\" + tabName).style.display = \"block\";\n        this.util.addClass(targetElement, \"active\");\n        // focus\n        if (tabName === \"image\" && this.context.image.focusElement) {\n            this.context.image.focusElement.focus();\n        } else if (tabName === \"url\") {\n            this.context.anchor.caller.image.urlInput.focus();\n        }\n        return false;\n    },\n    submit: function(e) {\n        const contextImage = this.context.image;\n        const imagePlugin = this.plugins.image;\n        e.preventDefault();\n        e.stopPropagation();\n        contextImage._altText = contextImage.altText.value;\n        contextImage._align = contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\n        contextImage._captionChecked = contextImage.captionCheckEl.checked;\n        if (contextImage._resizing) contextImage._proportionChecked = contextImage.proportion.checked;\n        try {\n            if (this.context.dialog.updateModal) {\n                imagePlugin.update_image.call(this, false, true, false);\n            }\n            if (contextImage.imgInputFile && contextImage.imgInputFile.files.length > 0) {\n                this.showLoading();\n                imagePlugin.submitAction.call(this, this.context.image.imgInputFile.files);\n            } else if (contextImage.imgUrlFile && contextImage._v_src._linkValue.length > 0) {\n                this.showLoading();\n                imagePlugin.onRender_imgUrl.call(this, contextImage._v_src._linkValue);\n            }\n        } catch (error) {\n            this.closeLoading();\n            throw Error('[SUNEDITOR.image.submit.fail] cause : \"' + error.message + '\"');\n        } finally{\n            this.plugins.dialog.close.call(this);\n        }\n        return false;\n    },\n    submitAction: function(fileList) {\n        if (fileList.length === 0) return;\n        let fileSize = 0;\n        let files = [];\n        for(let i = 0, len = fileList.length; i < len; i++){\n            if (/image/i.test(fileList[i].type)) {\n                files.push(fileList[i]);\n                fileSize += fileList[i].size;\n            }\n        }\n        const limitSize = this.options.imageUploadSizeLimit;\n        if (limitSize > 0) {\n            let infoSize = 0;\n            const imagesInfo = this.context.image._infoList;\n            for(let i = 0, len = imagesInfo.length; i < len; i++){\n                infoSize += imagesInfo[i].size * 1;\n            }\n            if (fileSize + infoSize > limitSize) {\n                this.closeLoading();\n                const err = \"[SUNEDITOR.imageUpload.fail] Size of uploadable total images: \" + limitSize / 1000 + \"KB\";\n                if (typeof this.functions.onImageUploadError !== \"function\" || this.functions.onImageUploadError(err, {\n                    \"limitSize\": limitSize,\n                    \"currentSize\": infoSize,\n                    \"uploadSize\": fileSize\n                }, this)) {\n                    this.functions.noticeOpen(err);\n                }\n                return;\n            }\n        }\n        const contextImage = this.context.image;\n        contextImage._uploadFileLength = files.length;\n        const anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);\n        const info = {\n            anchor: anchor,\n            inputWidth: contextImage.inputX.value,\n            inputHeight: contextImage.inputY.value,\n            align: contextImage._align,\n            isUpdate: this.context.dialog.updateModal,\n            alt: contextImage._altText,\n            element: contextImage._element\n        };\n        if (typeof this.functions.onImageUploadBefore === \"function\") {\n            const result = this.functions.onImageUploadBefore(files, info, this, (function(data) {\n                if (data && this._w.Array.isArray(data.result)) {\n                    this.plugins.image.register.call(this, info, data);\n                } else {\n                    this.plugins.image.upload.call(this, info, data);\n                }\n            }).bind(this));\n            if (typeof result === \"undefined\") return;\n            if (!result) {\n                this.closeLoading();\n                return;\n            }\n            if (this._w.Array.isArray(result) && result.length > 0) files = result;\n        }\n        this.plugins.image.upload.call(this, info, files);\n    },\n    error: function(message, response) {\n        this.closeLoading();\n        if (typeof this.functions.onImageUploadError !== \"function\" || this.functions.onImageUploadError(message, response, this)) {\n            this.functions.noticeOpen(message);\n            throw Error(\"[SUNEDITOR.plugin.image.error] response: \" + message);\n        }\n    },\n    upload: function(info, files) {\n        if (!files) {\n            this.closeLoading();\n            return;\n        }\n        if (typeof files === \"string\") {\n            this.plugins.image.error.call(this, files, null);\n            return;\n        }\n        const imageUploadUrl = this.options.imageUploadUrl;\n        const filesLen = this.context.dialog.updateModal ? 1 : files.length;\n        // server upload\n        if (typeof imageUploadUrl === \"string\" && imageUploadUrl.length > 0) {\n            const formData = new FormData();\n            for(let i = 0; i < filesLen; i++){\n                formData.append(\"file-\" + i, files[i]);\n            }\n            this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);\n        } else {\n            this.plugins.image.setup_reader.call(this, files, info.anchor, info.inputWidth, info.inputHeight, info.align, info.alt, filesLen, info.isUpdate);\n        }\n    },\n    callBack_imgUpload: function(info, xmlHttp) {\n        if (typeof this.functions.imageUploadHandler === \"function\") {\n            this.functions.imageUploadHandler(xmlHttp, info, this);\n        } else {\n            const response = JSON.parse(xmlHttp.responseText);\n            if (response.errorMessage) {\n                this.plugins.image.error.call(this, response.errorMessage, response);\n            } else {\n                this.plugins.image.register.call(this, info, response);\n            }\n        }\n    },\n    register: function(info, response) {\n        const fileList = response.result;\n        for(let i = 0, len = fileList.length, file; i < len; i++){\n            file = {\n                name: fileList[i].name,\n                size: fileList[i].size\n            };\n            if (info.isUpdate) {\n                this.plugins.image.update_src.call(this, fileList[i].url, info.element, file);\n                break;\n            } else {\n                this.plugins.image.create_image.call(this, fileList[i].url, info.anchor, info.inputWidth, info.inputHeight, info.align, file, info.alt);\n            }\n        }\n        this.closeLoading();\n    },\n    setup_reader: function(files, anchor, width, height, align, alt, filesLen, isUpdate) {\n        try {\n            if (filesLen === 0) {\n                this.closeLoading();\n                console.warn(\"[SUNEDITOR.image.base64.fail] cause : No applicable files\");\n                return;\n            }\n            this.context.image.base64RenderIndex = filesLen;\n            const wFileReader = this._w.FileReader;\n            const filesStack = [\n                filesLen\n            ];\n            this.context.image.inputX.value = width;\n            this.context.image.inputY.value = height;\n            for(let i = 0, reader, file; i < filesLen; i++){\n                reader = new wFileReader();\n                file = files[i];\n                reader.onload = (function(reader, update, updateElement, file, index) {\n                    filesStack[index] = {\n                        result: reader.result,\n                        file: file\n                    };\n                    if (--this.context.image.base64RenderIndex === 0) {\n                        this.plugins.image.onRender_imgBase64.call(this, update, filesStack, updateElement, anchor, width, height, align, alt);\n                        this.closeLoading();\n                    }\n                }).bind(this, reader, isUpdate, this.context.image._element, file, i);\n                reader.readAsDataURL(file);\n            }\n        } catch (e) {\n            this.closeLoading();\n            throw Error('[SUNEDITOR.image.setup_reader.fail] cause : \"' + e.message + '\"');\n        }\n    },\n    onRender_imgBase64: function(update, filesStack, updateElement, anchor, width, height, align, alt) {\n        const updateMethod = this.plugins.image.update_src;\n        const createMethod = this.plugins.image.create_image;\n        for(let i = 0, len = filesStack.length; i < len; i++){\n            if (update) {\n                this.context.image._element.setAttribute(\"data-file-name\", filesStack[i].file.name);\n                this.context.image._element.setAttribute(\"data-file-size\", filesStack[i].file.size);\n                updateMethod.call(this, filesStack[i].result, updateElement, filesStack[i].file);\n            } else {\n                createMethod.call(this, filesStack[i].result, anchor, width, height, align, filesStack[i].file, alt);\n            }\n        }\n    },\n    onRender_imgUrl: function(url) {\n        if (!url) url = this.context.image._v_src._linkValue;\n        if (!url) return false;\n        const contextImage = this.context.image;\n        try {\n            const file = {\n                name: url.split(\"/\").pop(),\n                size: 0\n            };\n            if (this.context.dialog.updateModal) this.plugins.image.update_src.call(this, url, contextImage._element, file);\n            else this.plugins.image.create_image.call(this, url, this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true), contextImage.inputX.value, contextImage.inputY.value, contextImage._align, file, contextImage._altText);\n        } catch (e) {\n            throw Error('[SUNEDITOR.image.URLRendering.fail] cause : \"' + e.message + '\"');\n        } finally{\n            this.closeLoading();\n        }\n    },\n    onRender_link: function(imgTag, anchor) {\n        if (anchor) {\n            anchor.setAttribute(\"data-image-link\", \"image\");\n            imgTag.setAttribute(\"data-image-link\", anchor.href);\n            anchor.appendChild(imgTag);\n            return anchor;\n        }\n        return imgTag;\n    },\n    /**\n     * @Override resizing\n     * @param {String} xy 'x': width, 'y': height\n     * @param {KeyboardEvent} e Event object\n     */ setInputSize: function(xy, e) {\n        if (e && e.keyCode === 32) {\n            e.preventDefault();\n            return;\n        }\n        this.plugins.resizing._module_setInputSize.call(this, this.context.image, xy);\n    },\n    /**\n     * @Override resizing\n     */ setRatio: function() {\n        this.plugins.resizing._module_setRatio.call(this, this.context.image);\n    },\n    /**\n     * @Override fileManager\n     */ checkFileInfo: function() {\n        const imagePlugin = this.plugins.image;\n        const contextImage = this.context.image;\n        const modifyHandler = (function(tag) {\n            imagePlugin.onModifyMode.call(this, tag, null);\n            imagePlugin.openModify.call(this, true);\n            // get size\n            contextImage.inputX.value = contextImage._origin_w;\n            contextImage.inputY.value = contextImage._origin_h;\n            // get align\n            const format = this.util.getFormatElement(tag);\n            if (format) contextImage._align = format.style.textAlign || format.style.float;\n            // link\n            if (this.util.isAnchor(tag.parentNode) && !contextImage.anchorCtx.linkValue) contextImage.anchorCtx.linkValue = \" \";\n            imagePlugin.update_image.call(this, true, false, true);\n            imagePlugin.init.call(this);\n        }).bind(this);\n        this.plugins.fileManager.checkInfo.call(this, \"image\", [\n            \"img\"\n        ], this.functions.onImageUpload, modifyHandler, true);\n    },\n    /**\n     * @Override fileManager\n     */ resetFileInfo: function() {\n        this.plugins.fileManager.resetInfo.call(this, \"image\", this.functions.onImageUpload);\n    },\n    create_image: function(src, anchor, width, height, align, file, alt) {\n        const imagePlugin = this.plugins.image;\n        const contextImage = this.context.image;\n        this.context.resizing._resize_plugin = \"image\";\n        let oImg = this.util.createElement(\"IMG\");\n        oImg.src = src;\n        oImg.alt = alt;\n        oImg.setAttribute(\"data-rotate\", \"0\");\n        anchor = imagePlugin.onRender_link.call(this, oImg, anchor ? anchor.cloneNode(false) : null);\n        if (contextImage._resizing) {\n            oImg.setAttribute(\"data-proportion\", contextImage._proportionChecked);\n        }\n        const cover = this.plugins.component.set_cover.call(this, anchor);\n        const container = this.plugins.component.set_container.call(this, cover, \"se-image-container\");\n        // caption\n        if (contextImage._captionChecked) {\n            contextImage._caption = this.plugins.component.create_caption.call(this);\n            cover.appendChild(contextImage._caption);\n        }\n        contextImage._element = oImg;\n        contextImage._cover = cover;\n        contextImage._container = container;\n        // set size\n        imagePlugin.applySize.call(this, width, height);\n        // align\n        imagePlugin.setAlign.call(this, align, oImg, cover, container);\n        oImg.onload = imagePlugin._image_create_onload.bind(this, oImg, contextImage.svgDefaultSize, container);\n        if (this.insertComponent(container, true, true, true)) this.plugins.fileManager.setInfo.call(this, \"image\", oImg, this.functions.onImageUpload, file, true);\n        this.context.resizing._resize_plugin = \"\";\n    },\n    _image_create_onload: function(oImg, svgDefaultSize, container) {\n        // svg exception handling\n        if (oImg.offsetWidth === 0) this.plugins.image.applySize.call(this, svgDefaultSize, \"\");\n        if (this.options.mediaAutoSelect) {\n            this.selectComponent(oImg, \"image\");\n        } else {\n            const line = this.appendFormatTag(container, null);\n            if (line) this.setRange(line, 0, line, 0);\n        }\n    },\n    update_image: function(init, openController, notHistoryPush) {\n        const contextImage = this.context.image;\n        let imageEl = contextImage._element;\n        let cover = contextImage._cover;\n        let container = contextImage._container;\n        let isNewContainer = false;\n        if (cover === null) {\n            isNewContainer = true;\n            imageEl = contextImage._element.cloneNode(true);\n            cover = this.plugins.component.set_cover.call(this, imageEl);\n        }\n        if (container === null) {\n            cover = cover.cloneNode(true);\n            imageEl = cover.querySelector(\"img\");\n            isNewContainer = true;\n            container = this.plugins.component.set_container.call(this, cover, \"se-image-container\");\n        } else if (isNewContainer) {\n            container.innerHTML = \"\";\n            container.appendChild(cover);\n            contextImage._cover = cover;\n            contextImage._element = imageEl;\n            isNewContainer = false;\n        }\n        // check size\n        let changeSize;\n        const x = this.util.isNumber(contextImage.inputX.value) ? contextImage.inputX.value + contextImage.sizeUnit : contextImage.inputX.value;\n        const y = this.util.isNumber(contextImage.inputY.value) ? contextImage.inputY.value + contextImage.sizeUnit : contextImage.inputY.value;\n        if (/%$/.test(imageEl.style.width)) {\n            changeSize = x !== container.style.width || y !== container.style.height;\n        } else {\n            changeSize = x !== imageEl.style.width || y !== imageEl.style.height;\n        }\n        // alt\n        imageEl.alt = contextImage._altText;\n        // caption\n        let modifiedCaption = false;\n        if (contextImage._captionChecked) {\n            if (!contextImage._caption) {\n                contextImage._caption = this.plugins.component.create_caption.call(this);\n                cover.appendChild(contextImage._caption);\n                modifiedCaption = true;\n            }\n        } else {\n            if (contextImage._caption) {\n                this.util.removeItem(contextImage._caption);\n                contextImage._caption = null;\n                modifiedCaption = true;\n            }\n        }\n        // link\n        let isNewAnchor = null;\n        const anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);\n        if (anchor) {\n            if (contextImage._linkElement !== anchor || isNewContainer && !container.contains(anchor)) {\n                contextImage._linkElement = anchor.cloneNode(false);\n                cover.insertBefore(this.plugins.image.onRender_link.call(this, imageEl, contextImage._linkElement), contextImage._caption);\n                isNewAnchor = contextImage._element;\n            } else {\n                contextImage._linkElement.setAttribute(\"data-image-link\", \"image\");\n            }\n        } else if (contextImage._linkElement !== null) {\n            const imageElement = imageEl;\n            imageElement.setAttribute(\"data-image-link\", \"\");\n            if (cover.contains(contextImage._linkElement)) {\n                const newEl = imageElement.cloneNode(true);\n                cover.removeChild(contextImage._linkElement);\n                cover.insertBefore(newEl, contextImage._caption);\n                contextImage._element = imageEl = newEl;\n            }\n        }\n        let existElement = null;\n        if (isNewContainer) {\n            existElement = this.util.isRangeFormatElement(contextImage._element.parentNode) || this.util.isWysiwygDiv(contextImage._element.parentNode) ? contextImage._element : this.util.isAnchor(contextImage._element.parentNode) ? contextImage._element.parentNode : this.util.getFormatElement(contextImage._element) || contextImage._element;\n            if (this.util.getParentElement(contextImage._element, this.util.isNotCheckingNode)) {\n                existElement = isNewAnchor ? anchor : contextImage._element;\n                existElement.parentNode.replaceChild(container, existElement);\n            } else if (this.util.isListCell(existElement)) {\n                const refer = this.util.getParentElement(contextImage._element, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement.insertBefore(container, refer);\n                this.util.removeItem(contextImage._element);\n                this.util.removeEmptyNode(refer, null, true);\n            } else if (this.util.isFormatElement(existElement)) {\n                const refer = this.util.getParentElement(contextImage._element, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement = this.util.splitElement(existElement, refer);\n                existElement.parentNode.insertBefore(container, existElement);\n                this.util.removeItem(contextImage._element);\n                this.util.removeEmptyNode(existElement, null, true);\n                if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n            } else {\n                if (this.util.isFormatElement(existElement.parentNode)) {\n                    const formats = existElement.parentNode;\n                    formats.parentNode.insertBefore(container, existElement.previousSibling ? formats.nextElementSibling : formats);\n                    if (contextImage.__updateTags.map(function(current) {\n                        return existElement.contains(current);\n                    }).length === 0) this.util.removeItem(existElement);\n                } else {\n                    existElement = this.util.isFigures(existElement.parentNode) ? existElement.parentNode : existElement;\n                    existElement.parentNode.replaceChild(container, existElement);\n                }\n            }\n            imageEl = container.querySelector(\"img\");\n            contextImage._element = imageEl;\n            contextImage._cover = cover;\n            contextImage._container = container;\n        }\n        if (isNewAnchor) {\n            if (!isNewContainer) {\n                this.util.removeItem(anchor);\n            } else {\n                this.util.removeItem(isNewAnchor);\n                if (this.util.getListChildren(anchor, function(current) {\n                    return /IMG/i.test(current.tagName);\n                }).length === 0) {\n                    this.util.removeItem(anchor);\n                }\n            }\n        }\n        // transform\n        if (modifiedCaption || !contextImage._onlyPercentage && changeSize) {\n            if (!init && (/\\d+/.test(imageEl.style.height) || this.context.resizing._rotateVertical && contextImage._captionChecked)) {\n                if (/%$/.test(contextImage.inputX.value) || /%$/.test(contextImage.inputY.value)) {\n                    this.plugins.resizing.resetTransform.call(this, imageEl);\n                } else {\n                    this.plugins.resizing.setTransformSize.call(this, imageEl, this.util.getNumber(contextImage.inputX.value, 0), this.util.getNumber(contextImage.inputY.value, 0));\n                }\n            }\n        }\n        // size\n        if (contextImage._resizing) {\n            imageEl.setAttribute(\"data-proportion\", contextImage._proportionChecked);\n            if (changeSize) {\n                this.plugins.image.applySize.call(this);\n            }\n        }\n        // align\n        this.plugins.image.setAlign.call(this, null, imageEl, null, null);\n        // set imagesInfo\n        if (init) {\n            this.plugins.fileManager.setInfo.call(this, \"image\", imageEl, this.functions.onImageUpload, null, true);\n        }\n        if (openController) {\n            this.selectComponent(imageEl, \"image\");\n        }\n        // history stack\n        if (!notHistoryPush) this.history.push(false);\n    },\n    update_src: function(src, element, file) {\n        element.src = src;\n        this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this, \"image\", element, this.functions.onImageUpload, file, true));\n        this.selectComponent(element, \"image\");\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ onModifyMode: function(element, size) {\n        if (!element) return;\n        const contextImage = this.context.image;\n        contextImage._linkElement = contextImage.anchorCtx.linkAnchor = this.util.isAnchor(element.parentNode) ? element.parentNode : null;\n        contextImage._element = element;\n        contextImage._cover = this.util.getParentElement(element, \"FIGURE\");\n        contextImage._container = this.util.getParentElement(element, this.util.isMediaComponent);\n        contextImage._caption = this.util.getChildElement(contextImage._cover, \"FIGCAPTION\");\n        contextImage._align = element.getAttribute(\"data-align\") || element.style.float || \"none\";\n        element.style.float = \"\";\n        this.plugins.anchor.setCtx(contextImage._linkElement, contextImage.anchorCtx);\n        if (size) {\n            contextImage._element_w = size.w;\n            contextImage._element_h = size.h;\n            contextImage._element_t = size.t;\n            contextImage._element_l = size.l;\n        }\n        let userSize = contextImage._element.getAttribute(\"data-size\") || contextImage._element.getAttribute(\"data-origin\");\n        let w, h;\n        if (userSize) {\n            userSize = userSize.split(\",\");\n            w = userSize[0];\n            h = userSize[1];\n        } else if (size) {\n            w = size.w;\n            h = size.h;\n        }\n        contextImage._origin_w = w || element.style.width || element.width || \"\";\n        contextImage._origin_h = h || element.style.height || element.height || \"\";\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ openModify: function(notOpen) {\n        const contextImage = this.context.image;\n        if (contextImage.imgUrlFile) {\n            contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = contextImage._element.src;\n        }\n        contextImage._altText = contextImage.altText.value = contextImage._element.alt;\n        (contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"' + contextImage._align + '\"]') || contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"none\"]')).checked = true;\n        contextImage._align = contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\n        contextImage._captionChecked = contextImage.captionCheckEl.checked = !!contextImage._caption;\n        if (contextImage._resizing) {\n            this.plugins.resizing._module_setModifyInputSize.call(this, contextImage, this.plugins.image);\n        }\n        if (!notOpen) this.plugins.dialog.open.call(this, \"image\", true);\n    },\n    /**\n     * @Override fileManager\n     */ applySize: function(w, h) {\n        const contextImage = this.context.image;\n        if (!w) w = contextImage.inputX.value || this.options.imageWidth;\n        if (!h) h = contextImage.inputY.value || this.options.imageHeight;\n        if (contextImage._onlyPercentage && !!w || /%$/.test(w)) {\n            this.plugins.image.setPercentSize.call(this, w, h);\n            return true;\n        } else if ((!w || w === \"auto\") && (!h || h === \"auto\")) {\n            this.plugins.image.setAutoSize.call(this);\n        } else {\n            this.plugins.image.setSize.call(this, w, h, false);\n        }\n        return false;\n    },\n    /**\n     * @Override resizing\n     */ sizeRevert: function() {\n        this.plugins.resizing._module_sizeRevert.call(this, this.context.image);\n    },\n    /**\n     * @Override resizing\n     */ setSize: function(w, h, notResetPercentage, direction) {\n        const contextImage = this.context.image;\n        const onlyW = /^(rw|lw)$/.test(direction) && /\\d+/.test(contextImage._element.style.height);\n        const onlyH = /^(th|bh)$/.test(direction) && /\\d+/.test(contextImage._element.style.width);\n        if (!onlyH) {\n            contextImage._element.style.width = this.util.isNumber(w) ? w + contextImage.sizeUnit : w;\n            this.plugins.image.cancelPercentAttr.call(this);\n        }\n        if (!onlyW) {\n            contextImage._element.style.height = this.util.isNumber(h) ? h + contextImage.sizeUnit : /%$/.test(h) ? \"\" : h;\n        }\n        if (contextImage._align === \"center\") this.plugins.image.setAlign.call(this, null, null, null, null);\n        if (!notResetPercentage) contextImage._element.removeAttribute(\"data-percentage\");\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    },\n    /**\n     * @Override resizing\n     */ setAutoSize: function() {\n        const contextImage = this.context.image;\n        if (contextImage._caption) contextImage._caption.style.marginTop = \"\";\n        this.plugins.resizing.resetTransform.call(this, contextImage._element);\n        this.plugins.image.cancelPercentAttr.call(this);\n        contextImage._element.style.maxWidth = \"\";\n        contextImage._element.style.width = \"\";\n        contextImage._element.style.height = \"\";\n        contextImage._cover.style.width = \"\";\n        contextImage._cover.style.height = \"\";\n        this.plugins.image.setAlign.call(this, null, null, null, null);\n        contextImage._element.setAttribute(\"data-percentage\", \"auto,auto\");\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    },\n    /**\n     * @Override resizing\n     */ setOriginSize: function() {\n        const contextImage = this.context.image;\n        contextImage._element.removeAttribute(\"data-percentage\");\n        this.plugins.resizing.resetTransform.call(this, contextImage._element);\n        this.plugins.image.cancelPercentAttr.call(this);\n        const originSize = (contextImage._element.getAttribute(\"data-origin\") || \"\").split(\",\");\n        const w = originSize[0];\n        const h = originSize[1];\n        if (originSize) {\n            if (contextImage._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\\d/.test(h))) {\n                this.plugins.image.setPercentSize.call(this, w, h);\n            } else {\n                this.plugins.image.setSize.call(this, w, h);\n            }\n            // save current size\n            this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n        }\n    },\n    /**\n     * @Override resizing\n     */ setPercentSize: function(w, h) {\n        const contextImage = this.context.image;\n        h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + \"%\" : h : this.util.isNumber(h) ? h + contextImage.sizeUnit : h || \"\";\n        const heightPercentage = /%$/.test(h);\n        contextImage._container.style.width = this.util.isNumber(w) ? w + \"%\" : w;\n        contextImage._container.style.height = \"\";\n        contextImage._cover.style.width = \"100%\";\n        contextImage._cover.style.height = !heightPercentage ? \"\" : h;\n        contextImage._element.style.width = \"100%\";\n        contextImage._element.style.height = heightPercentage ? \"\" : h;\n        contextImage._element.style.maxWidth = \"\";\n        if (contextImage._align === \"center\") this.plugins.image.setAlign.call(this, null, null, null, null);\n        contextImage._element.setAttribute(\"data-percentage\", w + \",\" + h);\n        this.plugins.resizing.setCaptionPosition.call(this, contextImage._element);\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    },\n    /**\n     * @Override resizing\n     */ cancelPercentAttr: function() {\n        const contextImage = this.context.image;\n        contextImage._cover.style.width = \"\";\n        contextImage._cover.style.height = \"\";\n        contextImage._container.style.width = \"\";\n        contextImage._container.style.height = \"\";\n        this.util.removeClass(contextImage._container, this.context.image._floatClassRegExp);\n        this.util.addClass(contextImage._container, \"__se__float-\" + contextImage._align);\n        if (contextImage._align === \"center\") this.plugins.image.setAlign.call(this, null, null, null, null);\n    },\n    /**\n     * @Override resizing\n     */ setAlign: function(align, element, cover, container) {\n        const contextImage = this.context.image;\n        if (!align) align = contextImage._align;\n        if (!element) element = contextImage._element;\n        if (!cover) cover = contextImage._cover;\n        if (!container) container = contextImage._container;\n        if (/%$/.test(element.style.width) && align === \"center\") {\n            container.style.minWidth = \"100%\";\n            cover.style.width = container.style.width;\n        } else {\n            container.style.minWidth = \"\";\n            cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : !element.style.width || element.style.width === \"auto\" ? \"\" : element.style.width || \"100%\";\n        }\n        if (!this.util.hasClass(container, \"__se__float-\" + align)) {\n            this.util.removeClass(container, contextImage._floatClassRegExp);\n            this.util.addClass(container, \"__se__float-\" + align);\n        }\n        element.setAttribute(\"data-align\", align);\n    },\n    /**\n     * @Override dialog\n     */ init: function() {\n        const contextImage = this.context.image;\n        if (contextImage.imgInputFile) contextImage.imgInputFile.value = \"\";\n        if (contextImage.imgUrlFile) contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = \"\";\n        if (contextImage.imgInputFile && contextImage.imgUrlFile) {\n            contextImage.imgUrlFile.removeAttribute(\"disabled\");\n            contextImage.previewSrc.style.textDecoration = \"\";\n        }\n        contextImage.altText.value = \"\";\n        contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"none\"]').checked = true;\n        contextImage.captionCheckEl.checked = false;\n        contextImage._element = null;\n        this.plugins.image.openTab.call(this, \"init\");\n        if (contextImage._resizing) {\n            contextImage.inputX.value = this.options.imageWidth === contextImage._defaultSizeX ? \"\" : this.options.imageWidth;\n            contextImage.inputY.value = this.options.imageHeight === contextImage._defaultSizeY ? \"\" : this.options.imageHeight;\n            contextImage.proportion.checked = true;\n            contextImage._ratio = false;\n            contextImage._ratioX = 1;\n            contextImage._ratioY = 1;\n        }\n        this.plugins.anchor.init.call(this, contextImage.anchorCtx);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/dialog/image.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/dialog/link.js":
/*!***********************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/dialog/link.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/dialog */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/dialog.js\");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/_anchor */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/_anchor.js\");\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"link\",\n    display: \"dialog\",\n    add: function(core) {\n        core.addModule([\n            (_modules_dialog__WEBPACK_IMPORTED_MODULE_0___default()),\n            _modules_anchor__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n        ]);\n        const context = core.context;\n        const contextLink = context.link = {\n            focusElement: null,\n            _linkAnchor: null,\n            anchorCtx: null\n        };\n        /** link dialog */ let link_dialog = this.setDialog(core);\n        contextLink.modal = link_dialog;\n        /** link controller */ let link_controller = this.setController_LinkButton(core);\n        contextLink.linkController = link_controller;\n        link_dialog.querySelector(\"form\").addEventListener(\"submit\", this.submit.bind(core));\n        link_controller.addEventListener(\"click\", this.onClick_linkController.bind(core));\n        /** append html */ context.dialog.modal.appendChild(link_dialog);\n        /** append controller */ context.element.relative.appendChild(link_controller);\n        /** link event */ core.plugins.anchor.initEvent.call(core, \"link\", link_dialog);\n        contextLink.focusElement = context.anchor.caller.link.urlInput;\n        /** empty memory */ link_dialog = null, link_controller = null;\n    },\n    /** dialog */ setDialog: function(core) {\n        const lang = core.lang;\n        const dialog = core.util.createElement(\"DIV\");\n        const icons = core.icons;\n        dialog.className = \"se-dialog-content\";\n        dialog.style.display = \"none\";\n        let html = \"\" + \"<form>\" + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + icons.cancel + \"</button>\" + '<span class=\"se-modal-title\">' + lang.dialogBox.linkBox.title + \"</span>\" + \"</div>\" + core.context.anchor.forms.innerHTML + '<div class=\"se-dialog-footer\">' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + \"</span></button>\" + \"</div>\" + \"</form>\";\n        dialog.innerHTML = html;\n        return dialog;\n    },\n    /** modify controller button */ setController_LinkButton: function(core) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const link_btn = core.util.createElement(\"DIV\");\n        link_btn.className = \"se-controller se-controller-link\";\n        link_btn.innerHTML = \"\" + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"link-content\"><span><a target=\"_blank\" href=\"\"></a>&nbsp;</span>' + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"update\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.edit + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"unlink\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.unlink + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.unlink + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + \"</span></span>\" + \"</button>\" + \"</div>\" + \"</div>\";\n        return link_btn;\n    },\n    /**\n     * @Override dialog\n     */ open: function() {\n        this.plugins.dialog.open.call(this, \"link\", \"link\" === this.currentControllerName);\n    },\n    submit: function(e) {\n        this.showLoading();\n        e.preventDefault();\n        e.stopPropagation();\n        try {\n            const oA = this.plugins.anchor.createAnchor.call(this, this.context.anchor.caller.link, false);\n            if (oA === null) return;\n            if (!this.context.dialog.updateModal) {\n                const selectedFormats = this.getSelectedElements();\n                if (selectedFormats.length > 1) {\n                    const oFormat = this.util.createElement(selectedFormats[0].nodeName);\n                    oFormat.appendChild(oA);\n                    if (!this.insertNode(oFormat, null, true)) return;\n                } else {\n                    if (!this.insertNode(oA, null, true)) return;\n                }\n                this.setRange(oA.childNodes[0], 0, oA.childNodes[0], oA.textContent.length);\n            } else {\n                // set range\n                const textNode = this.context.link._linkAnchor.childNodes[0];\n                this.setRange(textNode, 0, textNode, textNode.textContent.length);\n            }\n        } finally{\n            this.plugins.dialog.close.call(this);\n            this.closeLoading();\n            // history stack\n            this.history.push(false);\n        }\n        return false;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        if (!element) {\n            if (this.controllerArray.indexOf(this.context.link.linkController) > -1) {\n                this.controllersOff();\n            }\n        } else if (this.util.isAnchor(element) && element.getAttribute(\"data-image-link\") === null) {\n            if (this.controllerArray.indexOf(this.context.link.linkController) < 0) {\n                this.plugins.link.call_controller.call(this, element);\n            }\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override dialog\n     */ on: function(update) {\n        this.plugins.anchor.on.call(this, this.context.anchor.caller.link, update);\n    },\n    call_controller: function(selectionATag) {\n        this.editLink = this.context.link._linkAnchor = this.context.anchor.caller.link.linkAnchor = selectionATag;\n        const linkBtn = this.context.link.linkController;\n        const link = linkBtn.querySelector(\"a\");\n        link.href = selectionATag.href;\n        link.title = selectionATag.textContent;\n        link.textContent = selectionATag.textContent;\n        this.util.addClass(selectionATag, \"on\");\n        this.setControllerPosition(linkBtn, selectionATag, \"bottom\", {\n            left: 0,\n            top: 0\n        });\n        this.controllersOn(linkBtn, selectionATag, \"link\", this.util.removeClass.bind(this.util, this.context.link._linkAnchor, \"on\"));\n    },\n    onClick_linkController: function(e) {\n        e.stopPropagation();\n        const command = e.target.getAttribute(\"data-command\") || e.target.parentNode.getAttribute(\"data-command\");\n        if (!command) return;\n        e.preventDefault();\n        if (/update/.test(command)) {\n            this.plugins.dialog.open.call(this, \"link\", true);\n        } else if (/unlink/.test(command)) {\n            const sc = this.util.getChildElement(this.context.link._linkAnchor, function(current) {\n                return current.childNodes.length === 0 || current.nodeType === 3;\n            }, false);\n            const ec = this.util.getChildElement(this.context.link._linkAnchor, function(current) {\n                return current.childNodes.length === 0 || current.nodeType === 3;\n            }, true);\n            this.setRange(sc, 0, ec, ec.textContent.length);\n            this.nodeChange(null, null, [\n                \"A\"\n            ], false);\n        } else {\n            /** delete */ this.util.removeItem(this.context.link._linkAnchor);\n            this.context.anchor.caller.link.linkAnchor = null;\n            this.focus();\n            // history stack\n            this.history.push(false);\n        }\n        this.controllersOff();\n    },\n    /**\n     * @Override dialog\n     */ init: function() {\n        this.context.link.linkController.style.display = \"none\";\n        this.plugins.anchor.init.call(this, this.context.anchor.caller.link);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/dialog/link.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/dialog/video.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/dialog/video.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/dialog */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/dialog.js\");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/component */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/component.js\");\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modules_component__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/resizing */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/resizing.js\");\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_modules_resizing__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/fileManager */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/fileManager.js\");\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_modules_fileManager__WEBPACK_IMPORTED_MODULE_3__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"video\",\n    display: \"dialog\",\n    add: function(core) {\n        core.addModule([\n            (_modules_dialog__WEBPACK_IMPORTED_MODULE_0___default()),\n            (_modules_component__WEBPACK_IMPORTED_MODULE_1___default()),\n            (_modules_resizing__WEBPACK_IMPORTED_MODULE_2___default()),\n            (_modules_fileManager__WEBPACK_IMPORTED_MODULE_3___default())\n        ]);\n        const options = core.options;\n        const context = core.context;\n        const contextVideo = context.video = {\n            _infoList: [],\n            _infoIndex: 0,\n            _uploadFileLength: 0,\n            focusElement: null,\n            sizeUnit: options._videoSizeUnit,\n            _align: \"none\",\n            _floatClassRegExp: \"__se__float\\\\-[a-z]+\",\n            _youtubeQuery: options.youtubeQuery,\n            _vimeoQuery: options.vimeoQuery,\n            _videoRatio: options.videoRatio * 100 + \"%\",\n            _defaultRatio: options.videoRatio * 100 + \"%\",\n            _linkValue: \"\",\n            // @require @Override component\n            _element: null,\n            _cover: null,\n            _container: null,\n            // @Override resizing properties\n            inputX: null,\n            inputY: null,\n            _element_w: 1,\n            _element_h: 1,\n            _element_l: 0,\n            _element_t: 0,\n            _defaultSizeX: \"100%\",\n            _defaultSizeY: options.videoRatio * 100 + \"%\",\n            _origin_w: options.videoWidth === \"100%\" ? \"\" : options.videoWidth,\n            _origin_h: options.videoHeight === \"56.25%\" ? \"\" : options.videoHeight,\n            _proportionChecked: true,\n            _resizing: options.videoResizing,\n            _resizeDotHide: !options.videoHeightShow,\n            _rotation: options.videoRotation,\n            _alignHide: !options.videoAlignShow,\n            _onlyPercentage: options.videoSizeOnlyPercentage,\n            _ratio: false,\n            _ratioX: 1,\n            _ratioY: 1,\n            _captionShow: false\n        };\n        /** video dialog */ let video_dialog = this.setDialog(core);\n        contextVideo.modal = video_dialog;\n        contextVideo.videoInputFile = video_dialog.querySelector(\"._se_video_file\");\n        contextVideo.videoUrlFile = video_dialog.querySelector(\".se-input-url\");\n        contextVideo.focusElement = contextVideo.videoUrlFile || contextVideo.videoInputFile;\n        contextVideo.preview = video_dialog.querySelector(\".se-link-preview\");\n        /** add event listeners */ video_dialog.querySelector(\"form\").addEventListener(\"submit\", this.submit.bind(core));\n        if (contextVideo.videoInputFile) video_dialog.querySelector(\".se-dialog-files-edge-button\").addEventListener(\"click\", this._removeSelectedFiles.bind(contextVideo.videoInputFile, contextVideo.videoUrlFile, contextVideo.preview));\n        if (contextVideo.videoInputFile && contextVideo.videoUrlFile) contextVideo.videoInputFile.addEventListener(\"change\", this._fileInputChange.bind(contextVideo));\n        if (contextVideo.videoUrlFile) contextVideo.videoUrlFile.addEventListener(\"input\", this._onLinkPreview.bind(contextVideo.preview, contextVideo, options.linkProtocol));\n        contextVideo.proportion = {};\n        contextVideo.videoRatioOption = {};\n        contextVideo.inputX = {};\n        contextVideo.inputY = {};\n        if (options.videoResizing) {\n            contextVideo.proportion = video_dialog.querySelector(\"._se_video_check_proportion\");\n            contextVideo.videoRatioOption = video_dialog.querySelector(\".se-video-ratio\");\n            contextVideo.inputX = video_dialog.querySelector(\"._se_video_size_x\");\n            contextVideo.inputY = video_dialog.querySelector(\"._se_video_size_y\");\n            contextVideo.inputX.value = options.videoWidth;\n            contextVideo.inputY.value = options.videoHeight;\n            contextVideo.inputX.addEventListener(\"keyup\", this.setInputSize.bind(core, \"x\"));\n            contextVideo.inputY.addEventListener(\"keyup\", this.setInputSize.bind(core, \"y\"));\n            contextVideo.inputX.addEventListener(\"change\", this.setRatio.bind(core));\n            contextVideo.inputY.addEventListener(\"change\", this.setRatio.bind(core));\n            contextVideo.proportion.addEventListener(\"change\", this.setRatio.bind(core));\n            contextVideo.videoRatioOption.addEventListener(\"change\", this.setVideoRatio.bind(core));\n            video_dialog.querySelector(\".se-dialog-btn-revert\").addEventListener(\"click\", this.sizeRevert.bind(core));\n        }\n        /** append html */ context.dialog.modal.appendChild(video_dialog);\n        /** empty memory */ video_dialog = null;\n    },\n    /** dialog */ setDialog: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const dialog = core.util.createElement(\"DIV\");\n        dialog.className = \"se-dialog-content\";\n        dialog.style.display = \"none\";\n        let html = \"\" + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + \"</button>\" + '<span class=\"se-modal-title\">' + lang.dialogBox.videoBox.title + \"</span>\" + \"</div>\" + '<div class=\"se-dialog-body\">';\n        if (option.videoFileInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.videoBox.file + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_video_file\" type=\"file\" accept=\"' + option.videoAccept + '\"' + (option.videoMultipleFile ? ' multiple=\"multiple\"' : \"\") + \"/>\" + '<button type=\"button\" data-command=\"filesRemove\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + \"</button>\" + \"</div>\" + \"</div>\";\n        }\n        if (option.videoUrlInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.videoBox.url + \"</label>\" + '<input class=\"se-input-form se-input-url\" type=\"text\" />' + '<pre class=\"se-link-preview\"></pre>' + \"</div>\";\n        }\n        if (option.videoResizing) {\n            const ratioList = option.videoRatioList || [\n                {\n                    name: \"16:9\",\n                    value: 0.5625\n                },\n                {\n                    name: \"4:3\",\n                    value: 0.75\n                },\n                {\n                    name: \"21:9\",\n                    value: 0.4285\n                }\n            ];\n            const ratio = option.videoRatio;\n            const onlyPercentage = option.videoSizeOnlyPercentage;\n            const onlyPercentDisplay = onlyPercentage ? ' style=\"display: none !important;\"' : \"\";\n            const heightDisplay = !option.videoHeightShow ? ' style=\"display: none !important;\"' : \"\";\n            const ratioDisplay = !option.videoRatioShow ? ' style=\"display: none !important;\"' : \"\";\n            const onlyWidthDisplay = !onlyPercentage && !option.videoHeightShow && !option.videoRatioShow ? ' style=\"display: none !important;\"' : \"\";\n            html += \"\" + '<div class=\"se-dialog-form\">' + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.width + \"</label>\" + '<label class=\"se-dialog-size-x\">&nbsp;</label>' + '<label class=\"size-h\"' + heightDisplay + \">\" + lang.dialogBox.height + \"</label>\" + '<label class=\"size-h\"' + ratioDisplay + \">(\" + lang.dialogBox.ratio + \")</label>\" + \"</div>\" + '<input class=\"se-input-control _se_video_size_x\" placeholder=\"100%\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : \"\") + \"/>\" + '<label class=\"se-dialog-size-x\"' + onlyWidthDisplay + \">\" + (onlyPercentage ? \"%\" : \"x\") + \"</label>\" + '<input class=\"se-input-control _se_video_size_y\" placeholder=\"' + option.videoRatio * 100 + '%\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : \"\") + heightDisplay + \"/>\" + '<select class=\"se-input-select se-video-ratio\" title=\"' + lang.dialogBox.ratio + '\" aria-label=\"' + lang.dialogBox.ratio + '\"' + ratioDisplay + \">\";\n            if (!heightDisplay) html += '<option value=\"\"> - </option>';\n            for(let i = 0, len = ratioList.length; i < len; i++){\n                html += '<option value=\"' + ratioList[i].value + '\"' + (ratio.toString() === ratioList[i].value.toString() ? \" selected\" : \"\") + \">\" + ratioList[i].name + \"</option>\";\n            }\n            html += \"</select>\" + '<button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" aria-label=\"' + lang.dialogBox.revertButton + '\" class=\"se-btn se-dialog-btn-revert\" style=\"float: right;\">' + core.icons.revert + \"</button>\" + \"</div>\" + '<div class=\"se-dialog-form se-dialog-form-footer\"' + onlyPercentDisplay + onlyWidthDisplay + \">\" + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_video_check_proportion\" checked/>&nbsp;' + lang.dialogBox.proportion + \"</label>\" + \"</div>\";\n        }\n        html += \"\" + \"</div>\" + '<div class=\"se-dialog-footer\">' + \"<div\" + (option.videoAlignShow ? \"\" : ' style=\"display: none\"') + \">\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"none\" checked>' + lang.dialogBox.basic + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"left\">' + lang.dialogBox.left + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"center\">' + lang.dialogBox.center + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"right\">' + lang.dialogBox.right + \"</label>\" + \"</div>\" + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + \"</span></button>\" + \"</div>\" + \"</form>\";\n        dialog.innerHTML = html;\n        return dialog;\n    },\n    _fileInputChange: function() {\n        if (!this.videoInputFile.value) {\n            this.videoUrlFile.removeAttribute(\"disabled\");\n            this.preview.style.textDecoration = \"\";\n        } else {\n            this.videoUrlFile.setAttribute(\"disabled\", true);\n            this.preview.style.textDecoration = \"line-through\";\n        }\n    },\n    _removeSelectedFiles: function(urlInput, preview) {\n        this.value = \"\";\n        if (urlInput) {\n            urlInput.removeAttribute(\"disabled\");\n            preview.style.textDecoration = \"\";\n        }\n    },\n    _onLinkPreview: function(context, protocol, e) {\n        const value = e.target.value.trim();\n        if (/^<iframe.*\\/iframe>$/.test(value)) {\n            context._linkValue = value;\n            this.textContent = '<IFrame :src=\"..\"></IFrame>';\n        } else {\n            context._linkValue = this.textContent = !value ? \"\" : protocol && value.indexOf(\"://\") === -1 && value.indexOf(\"#\") !== 0 ? protocol + value : value.indexOf(\"://\") === -1 ? \"/\" + value : value;\n        }\n    },\n    _setTagAttrs: function(element) {\n        element.setAttribute(\"controls\", true);\n        const attrs = this.options.videoTagAttrs;\n        if (!attrs) return;\n        for(let key in attrs){\n            if (!this.util.hasOwn(attrs, key)) continue;\n            element.setAttribute(key, attrs[key]);\n        }\n    },\n    createVideoTag: function() {\n        const videoTag = this.util.createElement(\"VIDEO\");\n        this.plugins.video._setTagAttrs.call(this, videoTag);\n        return videoTag;\n    },\n    _setIframeAttrs: function(element) {\n        element.frameBorder = \"0\";\n        element.allowFullscreen = true;\n        const attrs = this.options.videoIframeAttrs;\n        if (!attrs) return;\n        for(let key in attrs){\n            if (!this.util.hasOwn(attrs, key)) continue;\n            element.setAttribute(key, attrs[key]);\n        }\n    },\n    createIframeTag: function() {\n        const iframeTag = this.util.createElement(\"IFRAME\");\n        this.plugins.video._setIframeAttrs.call(this, iframeTag);\n        return iframeTag;\n    },\n    /**\n     * @Override @Required fileManager\n     */ fileTags: [\n        \"iframe\",\n        \"video\"\n    ],\n    /**\n     * @Override core, resizing, fileManager\n     * @description It is called from core.selectComponent.\n     * @param {Element} element Target element\n     */ select: function(element) {\n        this.plugins.video.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, \"video\"));\n    },\n    /**\n     * @Override fileManager, resizing\n     */ destroy: function(element) {\n        const frame = element || this.context.video._element;\n        const container = this.context.video._container;\n        const dataIndex = frame.getAttribute(\"data-index\") * 1;\n        if (typeof this.functions.onVideoDeleteBefore === \"function\" && this.functions.onVideoDeleteBefore(frame, container, dataIndex, this) === false) return;\n        let focusEl = container.previousElementSibling || container.nextElementSibling;\n        const emptyDiv = container.parentNode;\n        this.util.removeItem(container);\n        this.plugins.video.init.call(this);\n        this.controllersOff();\n        if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function(current) {\n            return current.childNodes.length === 0;\n        }, null);\n        // focus\n        this.focusEdge(focusEl);\n        // event\n        this.plugins.fileManager.deleteInfo.call(this, \"video\", dataIndex, this.functions.onVideoUpload);\n        // history stack\n        this.history.push(false);\n    },\n    /**\n     * @Required @Override dialog\n     */ on: function(update) {\n        const contextVideo = this.context.video;\n        if (!update) {\n            contextVideo.inputX.value = contextVideo._origin_w = this.options.videoWidth === contextVideo._defaultSizeX ? \"\" : this.options.videoWidth;\n            contextVideo.inputY.value = contextVideo._origin_h = this.options.videoHeight === contextVideo._defaultSizeY ? \"\" : this.options.videoHeight;\n            contextVideo.proportion.disabled = true;\n            if (contextVideo.videoInputFile && this.options.videoMultipleFile) contextVideo.videoInputFile.setAttribute(\"multiple\", \"multiple\");\n        } else {\n            if (contextVideo.videoInputFile && this.options.videoMultipleFile) contextVideo.videoInputFile.removeAttribute(\"multiple\");\n        }\n        if (contextVideo._resizing) {\n            this.plugins.video.setVideoRatioSelect.call(this, contextVideo._origin_h || contextVideo._defaultRatio);\n        }\n    },\n    /**\n     * @Required @Override dialog\n     */ open: function() {\n        this.plugins.dialog.open.call(this, \"video\", \"video\" === this.currentControllerName);\n    },\n    setVideoRatio: function(e) {\n        const contextVideo = this.context.video;\n        const value = e.target.options[e.target.selectedIndex].value;\n        contextVideo._defaultSizeY = contextVideo._videoRatio = !value ? contextVideo._defaultSizeY : value * 100 + \"%\";\n        contextVideo.inputY.placeholder = !value ? \"\" : value * 100 + \"%\";\n        contextVideo.inputY.value = \"\";\n    },\n    /**\n     * @Override resizing\n     * @param {String} xy 'x': width, 'y': height\n     * @param {KeyboardEvent} e Event object\n     */ setInputSize: function(xy, e) {\n        if (e && e.keyCode === 32) {\n            e.preventDefault();\n            return;\n        }\n        const contextVideo = this.context.video;\n        this.plugins.resizing._module_setInputSize.call(this, contextVideo, xy);\n        if (xy === \"y\") {\n            this.plugins.video.setVideoRatioSelect.call(this, e.target.value || contextVideo._defaultRatio);\n        }\n    },\n    /**\n     * @Override resizing\n     */ setRatio: function() {\n        this.plugins.resizing._module_setRatio.call(this, this.context.video);\n    },\n    submit: function(e) {\n        const contextVideo = this.context.video;\n        const videoPlugin = this.plugins.video;\n        e.preventDefault();\n        e.stopPropagation();\n        contextVideo._align = contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"]:checked').value;\n        try {\n            if (contextVideo.videoInputFile && contextVideo.videoInputFile.files.length > 0) {\n                this.showLoading();\n                videoPlugin.submitAction.call(this, this.context.video.videoInputFile.files);\n            } else if (contextVideo.videoUrlFile && contextVideo._linkValue.length > 0) {\n                this.showLoading();\n                videoPlugin.setup_url.call(this, contextVideo._linkValue);\n            }\n        } catch (error) {\n            this.closeLoading();\n            throw Error('[SUNEDITOR.video.submit.fail] cause : \"' + error.message + '\"');\n        } finally{\n            this.plugins.dialog.close.call(this);\n        }\n        return false;\n    },\n    submitAction: function(fileList) {\n        if (fileList.length === 0) return;\n        let fileSize = 0;\n        let files = [];\n        for(let i = 0, len = fileList.length; i < len; i++){\n            if (/video/i.test(fileList[i].type)) {\n                files.push(fileList[i]);\n                fileSize += fileList[i].size;\n            }\n        }\n        const limitSize = this.options.videoUploadSizeLimit;\n        if (limitSize > 0) {\n            let infoSize = 0;\n            const videosInfo = this.context.video._infoList;\n            for(let i = 0, len = videosInfo.length; i < len; i++){\n                infoSize += videosInfo[i].size * 1;\n            }\n            if (fileSize + infoSize > limitSize) {\n                this.closeLoading();\n                const err = \"[SUNEDITOR.videoUpload.fail] Size of uploadable total videos: \" + limitSize / 1000 + \"KB\";\n                if (typeof this.functions.onVideoUploadError !== \"function\" || this.functions.onVideoUploadError(err, {\n                    \"limitSize\": limitSize,\n                    \"currentSize\": infoSize,\n                    \"uploadSize\": fileSize\n                }, this)) {\n                    this.functions.noticeOpen(err);\n                }\n                return;\n            }\n        }\n        const contextVideo = this.context.video;\n        contextVideo._uploadFileLength = files.length;\n        const info = {\n            inputWidth: contextVideo.inputX.value,\n            inputHeight: contextVideo.inputY.value,\n            align: contextVideo._align,\n            isUpdate: this.context.dialog.updateModal,\n            element: contextVideo._element\n        };\n        if (typeof this.functions.onVideoUploadBefore === \"function\") {\n            const result = this.functions.onVideoUploadBefore(files, info, this, (function(data) {\n                if (data && this._w.Array.isArray(data.result)) {\n                    this.plugins.video.register.call(this, info, data);\n                } else {\n                    this.plugins.video.upload.call(this, info, data);\n                }\n            }).bind(this));\n            if (typeof result === \"undefined\") return;\n            if (!result) {\n                this.closeLoading();\n                return;\n            }\n            if (typeof result === \"object\" && result.length > 0) files = result;\n        }\n        this.plugins.video.upload.call(this, info, files);\n    },\n    error: function(message, response) {\n        this.closeLoading();\n        if (typeof this.functions.onVideoUploadError !== \"function\" || this.functions.onVideoUploadError(message, response, this)) {\n            this.functions.noticeOpen(message);\n            throw Error(\"[SUNEDITOR.plugin.video.error] response: \" + message);\n        }\n    },\n    upload: function(info, files) {\n        if (!files) {\n            this.closeLoading();\n            return;\n        }\n        if (typeof files === \"string\") {\n            this.plugins.video.error.call(this, files, null);\n            return;\n        }\n        const videoUploadUrl = this.options.videoUploadUrl;\n        const filesLen = this.context.dialog.updateModal ? 1 : files.length;\n        // server upload\n        if (typeof videoUploadUrl === \"string\" && videoUploadUrl.length > 0) {\n            const formData = new FormData();\n            for(let i = 0; i < filesLen; i++){\n                formData.append(\"file-\" + i, files[i]);\n            }\n            this.plugins.fileManager.upload.call(this, videoUploadUrl, this.options.videoUploadHeader, formData, this.plugins.video.callBack_videoUpload.bind(this, info), this.functions.onVideoUploadError);\n        } else {\n            throw Error('[SUNEDITOR.videoUpload.fail] cause : There is no \"videoUploadUrl\" option.');\n        }\n    },\n    callBack_videoUpload: function(info, xmlHttp) {\n        if (typeof this.functions.videoUploadHandler === \"function\") {\n            this.functions.videoUploadHandler(xmlHttp, info, this);\n        } else {\n            const response = JSON.parse(xmlHttp.responseText);\n            if (response.errorMessage) {\n                this.plugins.video.error.call(this, response.errorMessage, response);\n            } else {\n                this.plugins.video.register.call(this, info, response);\n            }\n        }\n    },\n    register: function(info, response) {\n        const fileList = response.result;\n        const videoTag = this.plugins.video.createVideoTag.call(this);\n        for(let i = 0, len = fileList.length, file; i < len; i++){\n            file = {\n                name: fileList[i].name,\n                size: fileList[i].size\n            };\n            this.plugins.video.create_video.call(this, info.isUpdate ? info.element : videoTag.cloneNode(false), fileList[i].url, info.inputWidth, info.inputHeight, info.align, file, info.isUpdate);\n        }\n        this.closeLoading();\n    },\n    setup_url: function(url) {\n        try {\n            const contextVideo = this.context.video;\n            if (!url) url = contextVideo._linkValue;\n            if (!url) return false;\n            /** iframe source */ if (/^<iframe.*\\/iframe>$/.test(url)) {\n                const oIframe = new this._w.DOMParser().parseFromString(url, \"text/html\").querySelector(\"iframe\");\n                url = oIframe.src;\n                if (url.length === 0) return false;\n            }\n            /** youtube */ if (/youtu\\.?be/.test(url)) {\n                if (!/^http/.test(url)) url = \"https://\" + url;\n                url = url.replace(\"watch?v=\", \"\");\n                if (!/^\\/\\/.+\\/embed\\//.test(url)) {\n                    url = url.replace(url.match(/\\/\\/.+\\//)[0], \"//www.youtube.com/embed/\").replace(\"&\", \"?&\");\n                }\n                if (contextVideo._youtubeQuery.length > 0) {\n                    if (/\\?/.test(url)) {\n                        const splitUrl = url.split(\"?\");\n                        url = splitUrl[0] + \"?\" + contextVideo._youtubeQuery + \"&\" + splitUrl[1];\n                    } else {\n                        url += \"?\" + contextVideo._youtubeQuery;\n                    }\n                }\n            } else if (/vimeo\\.com/.test(url)) {\n                if (url.endsWith(\"/\")) {\n                    url = url.slice(0, -1);\n                }\n                url = \"https://player.vimeo.com/video/\" + url.slice(url.lastIndexOf(\"/\") + 1);\n                if (contextVideo._vimeoQuery.length > 0) {\n                    if (/\\?/.test(url)) {\n                        const splitUrl = url.split(\"?\");\n                        url = splitUrl[0] + \"?\" + contextVideo._vimeoQuery + \"&\" + splitUrl[1];\n                    } else {\n                        url += \"?\" + contextVideo._vimeoQuery;\n                    }\n                }\n            }\n            this.plugins.video.create_video.call(this, this.plugins.video[!/embed|iframe|player|\\/e\\/|\\.php|\\.html?/.test(url) && !/vimeo\\.com/.test(url) ? \"createVideoTag\" : \"createIframeTag\"].call(this), url, contextVideo.inputX.value, contextVideo.inputY.value, contextVideo._align, null, this.context.dialog.updateModal);\n        } catch (error) {\n            throw Error('[SUNEDITOR.video.upload.fail] cause : \"' + error.message + '\"');\n        } finally{\n            this.closeLoading();\n        }\n    },\n    create_video: function(oFrame, src, width, height, align, file, isUpdate) {\n        this.context.resizing._resize_plugin = \"video\";\n        const contextVideo = this.context.video;\n        let cover = null;\n        let container = null;\n        let init = false;\n        /** update */ if (isUpdate) {\n            oFrame = contextVideo._element;\n            if (oFrame.src !== src) {\n                init = true;\n                const isYoutube = /youtu\\.?be/.test(src);\n                const isVimeo = /vimeo\\.com/.test(src);\n                if ((isYoutube || isVimeo) && !/^iframe$/i.test(oFrame.nodeName)) {\n                    const newTag = this.plugins.video.createIframeTag.call(this);\n                    newTag.src = src;\n                    oFrame.parentNode.replaceChild(newTag, oFrame);\n                    contextVideo._element = oFrame = newTag;\n                } else if (!isYoutube && !isVimeo && !/^video$/i.test(oFrame.nodeName)) {\n                    const newTag = this.plugins.video.createVideoTag.call(this);\n                    newTag.src = src;\n                    oFrame.parentNode.replaceChild(newTag, oFrame);\n                    contextVideo._element = oFrame = newTag;\n                } else {\n                    oFrame.src = src;\n                }\n            }\n            container = contextVideo._container;\n            cover = this.util.getParentElement(oFrame, \"FIGURE\");\n        } else {\n            init = true;\n            oFrame.src = src;\n            contextVideo._element = oFrame;\n            cover = this.plugins.component.set_cover.call(this, oFrame);\n            container = this.plugins.component.set_container.call(this, cover, \"se-video-container\");\n        }\n        /** rendering */ contextVideo._cover = cover;\n        contextVideo._container = container;\n        const inputUpdate = this.plugins.resizing._module_getSizeX.call(this, contextVideo) !== (width || contextVideo._defaultSizeX) || this.plugins.resizing._module_getSizeY.call(this, contextVideo) !== (height || contextVideo._videoRatio);\n        const changeSize = !isUpdate || inputUpdate;\n        if (contextVideo._resizing) {\n            this.context.video._proportionChecked = contextVideo.proportion.checked;\n            oFrame.setAttribute(\"data-proportion\", contextVideo._proportionChecked);\n        }\n        // size\n        let isPercent = false;\n        if (changeSize) {\n            isPercent = this.plugins.video.applySize.call(this);\n        }\n        // align\n        if (!(isPercent && align === \"center\")) {\n            this.plugins.video.setAlign.call(this, null, oFrame, cover, container);\n        }\n        let changed = true;\n        if (!isUpdate) {\n            changed = this.insertComponent(container, false, true, !this.options.mediaAutoSelect);\n            if (!this.options.mediaAutoSelect) {\n                const line = this.appendFormatTag(container, null);\n                if (line) this.setRange(line, 0, line, 0);\n            }\n        } else if (contextVideo._resizing && this.context.resizing._rotateVertical && changeSize) {\n            this.plugins.resizing.setTransformSize.call(this, oFrame, null, null);\n        }\n        if (changed) {\n            if (init) {\n                this.plugins.fileManager.setInfo.call(this, \"video\", oFrame, this.functions.onVideoUpload, file, true);\n            }\n            if (isUpdate) {\n                this.selectComponent(oFrame, \"video\");\n                // history stack\n                this.history.push(false);\n            }\n        }\n        this.context.resizing._resize_plugin = \"\";\n    },\n    _update_videoCover: function(oFrame) {\n        if (!oFrame) return;\n        const contextVideo = this.context.video;\n        if (/^video$/i.test(oFrame.nodeName)) this.plugins.video._setTagAttrs.call(this, oFrame);\n        else this.plugins.video._setIframeAttrs.call(this, oFrame);\n        let existElement = this.util.isRangeFormatElement(oFrame.parentNode) || this.util.isWysiwygDiv(oFrame.parentNode) ? oFrame : this.util.getFormatElement(oFrame) || oFrame;\n        const prevFrame = oFrame;\n        contextVideo._element = oFrame = oFrame.cloneNode(true);\n        const cover = contextVideo._cover = this.plugins.component.set_cover.call(this, oFrame);\n        const container = contextVideo._container = this.plugins.component.set_container.call(this, cover, \"se-video-container\");\n        try {\n            const figcaption = existElement.querySelector(\"figcaption\");\n            let caption = null;\n            if (!!figcaption) {\n                caption = this.util.createElement(\"DIV\");\n                caption.innerHTML = figcaption.innerHTML;\n                this.util.removeItem(figcaption);\n            }\n            // size\n            const size = (oFrame.getAttribute(\"data-size\") || oFrame.getAttribute(\"data-origin\") || \"\").split(\",\");\n            this.plugins.video.applySize.call(this, size[0] || prevFrame.style.width || prevFrame.width || \"\", size[1] || prevFrame.style.height || prevFrame.height || \"\");\n            // align\n            const format = this.util.getFormatElement(prevFrame);\n            if (format) contextVideo._align = format.style.textAlign || format.style.float;\n            this.plugins.video.setAlign.call(this, null, oFrame, cover, container);\n            if (this.util.getParentElement(prevFrame, this.util.isNotCheckingNode)) {\n                prevFrame.parentNode.replaceChild(container, prevFrame);\n            } else if (this.util.isListCell(existElement)) {\n                const refer = this.util.getParentElement(prevFrame, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement.insertBefore(container, refer);\n                this.util.removeItem(prevFrame);\n                this.util.removeEmptyNode(refer, null, true);\n            } else if (this.util.isFormatElement(existElement)) {\n                const refer = this.util.getParentElement(prevFrame, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement = this.util.splitElement(existElement, refer);\n                existElement.parentNode.insertBefore(container, existElement);\n                this.util.removeItem(prevFrame);\n                this.util.removeEmptyNode(existElement, null, true);\n                if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n            } else {\n                existElement.parentNode.replaceChild(container, existElement);\n            }\n            if (!!caption) existElement.parentNode.insertBefore(caption, container.nextElementSibling);\n        } catch (error) {\n            console.warn(\"[SUNEDITOR.video.error] Maybe the video tag is nested.\", error);\n        }\n        this.plugins.fileManager.setInfo.call(this, \"video\", oFrame, this.functions.onVideoUpload, null, true);\n        this.plugins.video.init.call(this);\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ onModifyMode: function(element, size) {\n        const contextVideo = this.context.video;\n        contextVideo._element = element;\n        contextVideo._cover = this.util.getParentElement(element, \"FIGURE\");\n        contextVideo._container = this.util.getParentElement(element, this.util.isMediaComponent);\n        contextVideo._align = element.style.float || element.getAttribute(\"data-align\") || \"none\";\n        element.style.float = \"\";\n        if (size) {\n            contextVideo._element_w = size.w;\n            contextVideo._element_h = size.h;\n            contextVideo._element_t = size.t;\n            contextVideo._element_l = size.l;\n        }\n        let origin = contextVideo._element.getAttribute(\"data-size\") || contextVideo._element.getAttribute(\"data-origin\");\n        let w, h;\n        if (origin) {\n            origin = origin.split(\",\");\n            w = origin[0];\n            h = origin[1];\n        } else if (size) {\n            w = size.w;\n            h = size.h;\n        }\n        contextVideo._origin_w = w || element.style.width || element.width || \"\";\n        contextVideo._origin_h = h || element.style.height || element.height || \"\";\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ openModify: function(notOpen) {\n        const contextVideo = this.context.video;\n        if (contextVideo.videoUrlFile) contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = contextVideo._element.src || (contextVideo._element.querySelector(\"source\") || \"\").src || \"\";\n        (contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"' + contextVideo._align + '\"]') || contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"none\"]')).checked = true;\n        if (contextVideo._resizing) {\n            this.plugins.resizing._module_setModifyInputSize.call(this, contextVideo, this.plugins.video);\n            const y = contextVideo._videoRatio = this.plugins.resizing._module_getSizeY.call(this, contextVideo);\n            const ratioSelected = this.plugins.video.setVideoRatioSelect.call(this, y);\n            if (!ratioSelected) contextVideo.inputY.value = contextVideo._onlyPercentage ? this.util.getNumber(y, 2) : y;\n        }\n        if (!notOpen) this.plugins.dialog.open.call(this, \"video\", true);\n    },\n    setVideoRatioSelect: function(value) {\n        let ratioSelected = false;\n        const contextVideo = this.context.video;\n        const ratioOptions = contextVideo.videoRatioOption.options;\n        if (/%$/.test(value) || contextVideo._onlyPercentage) value = this.util.getNumber(value, 2) / 100 + \"\";\n        else if (!this.util.isNumber(value) || value * 1 >= 1) value = \"\";\n        contextVideo.inputY.placeholder = \"\";\n        for(let i = 0, len = ratioOptions.length; i < len; i++){\n            if (ratioOptions[i].value === value) {\n                ratioSelected = ratioOptions[i].selected = true;\n                contextVideo.inputY.placeholder = !value ? \"\" : value * 100 + \"%\";\n            } else ratioOptions[i].selected = false;\n        }\n        return ratioSelected;\n    },\n    /**\n     * @Override fileManager\n     */ checkFileInfo: function() {\n        this.plugins.fileManager.checkInfo.call(this, \"video\", [\n            \"iframe\",\n            \"video\"\n        ], this.functions.onVideoUpload, this.plugins.video._update_videoCover.bind(this), true);\n    },\n    /**\n     * @Override fileManager\n     */ resetFileInfo: function() {\n        this.plugins.fileManager.resetInfo.call(this, \"video\", this.functions.onVideoUpload);\n    },\n    /**\n     * @Override fileManager\n     */ applySize: function(w, h) {\n        const contextVideo = this.context.video;\n        if (!w) w = contextVideo.inputX.value || this.options.videoWidth;\n        if (!h) h = contextVideo.inputY.value || this.options.videoHeight;\n        if (contextVideo._onlyPercentage || /%$/.test(w) || !w) {\n            this.plugins.video.setPercentSize.call(this, w || \"100%\", h || (/%$/.test(contextVideo._videoRatio) ? contextVideo._videoRatio : contextVideo._defaultRatio));\n            return true;\n        } else if ((!w || w === \"auto\") && (!h || h === \"auto\")) {\n            this.plugins.video.setAutoSize.call(this);\n        } else {\n            this.plugins.video.setSize.call(this, w, h || contextVideo._videoRatio || contextVideo._defaultRatio, false);\n        }\n        return false;\n    },\n    /**\n     * @Override resizing\n     */ sizeRevert: function() {\n        this.plugins.resizing._module_sizeRevert.call(this, this.context.video);\n    },\n    /**\n     * @Override resizing\n     */ setSize: function(w, h, notResetPercentage, direction) {\n        const contextVideo = this.context.video;\n        const onlyW = /^(rw|lw)$/.test(direction);\n        const onlyH = /^(th|bh)$/.test(direction);\n        if (!onlyH) w = this.util.getNumber(w, 0);\n        if (!onlyW) h = this.util.isNumber(h) ? h + contextVideo.sizeUnit : !h ? \"\" : h;\n        w = w ? w + contextVideo.sizeUnit : \"\";\n        if (!onlyH) contextVideo._element.style.width = w;\n        if (!onlyW) contextVideo._cover.style.paddingBottom = contextVideo._cover.style.height = h;\n        if (!onlyH && !/%$/.test(w)) {\n            contextVideo._cover.style.width = w;\n            contextVideo._container.style.width = \"\";\n        }\n        if (!onlyW && !/%$/.test(h)) {\n            contextVideo._element.style.height = h;\n        } else {\n            contextVideo._element.style.height = \"\";\n        }\n        if (!notResetPercentage) contextVideo._element.removeAttribute(\"data-percentage\");\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n    },\n    /**\n     * @Override resizing\n     */ setAutoSize: function() {\n        this.plugins.video.setPercentSize.call(this, 100, this.context.video._defaultRatio);\n    },\n    /**\n     * @Override resizing\n     */ setOriginSize: function(dataSize) {\n        const contextVideo = this.context.video;\n        contextVideo._element.removeAttribute(\"data-percentage\");\n        this.plugins.resizing.resetTransform.call(this, contextVideo._element);\n        this.plugins.video.cancelPercentAttr.call(this);\n        const originSize = ((dataSize ? contextVideo._element.getAttribute(\"data-size\") : \"\") || contextVideo._element.getAttribute(\"data-origin\") || \"\").split(\",\");\n        if (originSize) {\n            const w = originSize[0];\n            const h = originSize[1];\n            if (contextVideo._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\\d/.test(h))) {\n                this.plugins.video.setPercentSize.call(this, w, h);\n            } else {\n                this.plugins.video.setSize.call(this, w, h);\n            }\n            // save current size\n            this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n        }\n    },\n    /**\n     * @Override resizing\n     */ setPercentSize: function(w, h) {\n        const contextVideo = this.context.video;\n        h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + \"%\" : h : this.util.isNumber(h) ? h + contextVideo.sizeUnit : h || contextVideo._defaultRatio;\n        contextVideo._container.style.width = this.util.isNumber(w) ? w + \"%\" : w;\n        contextVideo._container.style.height = \"\";\n        contextVideo._cover.style.width = \"100%\";\n        contextVideo._cover.style.height = h;\n        contextVideo._cover.style.paddingBottom = h;\n        contextVideo._element.style.width = \"100%\";\n        contextVideo._element.style.height = \"100%\";\n        contextVideo._element.style.maxWidth = \"\";\n        if (contextVideo._align === \"center\") this.plugins.video.setAlign.call(this, null, null, null, null);\n        contextVideo._element.setAttribute(\"data-percentage\", w + \",\" + h);\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n    },\n    /**\n     * @Override resizing\n     */ cancelPercentAttr: function() {\n        const contextVideo = this.context.video;\n        contextVideo._cover.style.width = \"\";\n        contextVideo._cover.style.height = \"\";\n        contextVideo._cover.style.paddingBottom = \"\";\n        contextVideo._container.style.width = \"\";\n        contextVideo._container.style.height = \"\";\n        this.util.removeClass(contextVideo._container, this.context.video._floatClassRegExp);\n        this.util.addClass(contextVideo._container, \"__se__float-\" + contextVideo._align);\n        if (contextVideo._align === \"center\") this.plugins.video.setAlign.call(this, null, null, null, null);\n    },\n    /**\n     * @Override resizing\n     */ setAlign: function(align, element, cover, container) {\n        const contextVideo = this.context.video;\n        if (!align) align = contextVideo._align;\n        if (!element) element = contextVideo._element;\n        if (!cover) cover = contextVideo._cover;\n        if (!container) container = contextVideo._container;\n        if (/%$/.test(element.style.width) && align === \"center\") {\n            container.style.minWidth = \"100%\";\n            cover.style.width = container.style.width;\n            cover.style.height = cover.style.height;\n            cover.style.paddingBottom = !/%$/.test(cover.style.height) ? cover.style.height : this.util.getNumber(this.util.getNumber(cover.style.height, 2) / 100 * this.util.getNumber(cover.style.width, 2), 2) + \"%\";\n        } else {\n            container.style.minWidth = \"\";\n            cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : element.style.width || \"100%\";\n            cover.style.paddingBottom = cover.style.height;\n        }\n        if (!this.util.hasClass(container, \"__se__float-\" + align)) {\n            this.util.removeClass(container, contextVideo._floatClassRegExp);\n            this.util.addClass(container, \"__se__float-\" + align);\n        }\n        element.setAttribute(\"data-align\", align);\n    },\n    /**\n     * @Override dialog\n     */ init: function() {\n        const contextVideo = this.context.video;\n        if (contextVideo.videoInputFile) contextVideo.videoInputFile.value = \"\";\n        if (contextVideo.videoUrlFile) contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = \"\";\n        if (contextVideo.videoInputFile && contextVideo.videoUrlFile) {\n            contextVideo.videoUrlFile.removeAttribute(\"disabled\");\n            contextVideo.preview.style.textDecoration = \"\";\n        }\n        contextVideo._origin_w = this.options.videoWidth;\n        contextVideo._origin_h = this.options.videoHeight;\n        contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"none\"]').checked = true;\n        if (contextVideo._resizing) {\n            contextVideo.inputX.value = this.options.videoWidth === contextVideo._defaultSizeX ? \"\" : this.options.videoWidth;\n            contextVideo.inputY.value = this.options.videoHeight === contextVideo._defaultSizeY ? \"\" : this.options.videoHeight;\n            contextVideo.proportion.checked = true;\n            contextVideo.proportion.disabled = true;\n            this.plugins.video.setVideoRatioSelect.call(this, contextVideo._defaultRatio);\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/dialog/video.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/_anchor.js":
/*!***************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_anchor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _selectMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_selectMenu */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/_selectMenu.js\");\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"anchor\",\n    add: function(core) {\n        core.addModule([\n            _selectMenu__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n        ]);\n        core.context.anchor = {\n            caller: {},\n            forms: this.setDialogForm(core),\n            host: (core._w.location.origin + core._w.location.pathname).replace(/\\/$/, \"\"),\n            callerContext: null\n        };\n    },\n    /** dialog */ setDialogForm: function(core) {\n        const lang = core.lang;\n        const relList = core.options.linkRel;\n        const defaultRel = (core.options.linkRelDefault.default || \"\").split(\" \");\n        const icons = core.icons;\n        const forms = core.util.createElement(\"DIV\");\n        let html = '<div class=\"se-dialog-body\">' + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.linkBox.url + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form se-input-url\" type=\"text\" placeholder=\"' + (core.options.protocol || \"\") + '\" />' + '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button _se_bookmark_button\" title=\"' + lang.dialogBox.linkBox.bookmark + '\" aria-label=\"' + lang.dialogBox.linkBox.bookmark + '\">' + icons.bookmark + \"</button>\" + core.plugins.selectMenu.setForm() + \"</div>\" + '<div class=\"se-anchor-preview-form\">' + '<span class=\"se-svg se-anchor-preview-icon _se_anchor_bookmark_icon\">' + icons.bookmark + \"</span>\" + '<span class=\"se-svg se-anchor-preview-icon _se_anchor_download_icon\">' + icons.download + \"</span>\" + '<pre class=\"se-link-preview\"></pre>' + \"</div>\" + \"</div>\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.linkBox.text + '</label><input class=\"se-input-form _se_anchor_text\" type=\"text\" />' + \"</div>\" + '<div class=\"se-dialog-form-footer\">' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_anchor_check\" />&nbsp;' + lang.dialogBox.linkBox.newWindowCheck + \"</label>\" + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_anchor_download\" />&nbsp;' + lang.dialogBox.linkBox.downloadLinkCheck + \"</label>\";\n        if (relList.length > 0) {\n            html += '<div class=\"se-anchor-rel\"><button type=\"button\" class=\"se-btn se-btn-select se-anchor-rel-btn\">&lt;rel&gt;</button>' + '<div class=\"se-anchor-rel-wrapper\"><pre class=\"se-link-preview se-anchor-rel-preview\"></pre></div>' + '<div class=\"se-list-layer\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic se-list-checked\">';\n            for(let i = 0, len = relList.length, rel; i < len; i++){\n                rel = relList[i];\n                html += '<li><button type=\"button\" class=\"se-btn-list' + (defaultRel.indexOf(rel) > -1 ? \" se-checked\" : \"\") + '\" data-command=\"' + rel + '\" title=\"' + rel + '\" aria-label=\"' + rel + '\"><span class=\"se-svg\">' + icons.checked + \"</span>\" + rel + \"</button></li>\";\n            }\n            html += \"</ul></div></div></div>\";\n        }\n        html += \"</div></div>\";\n        forms.innerHTML = html;\n        return forms;\n    },\n    initEvent: function(pluginName, forms) {\n        const anchorPlugin = this.plugins.anchor;\n        const context = this.context.anchor.caller[pluginName] = {\n            modal: forms,\n            urlInput: null,\n            linkDefaultRel: this.options.linkRelDefault,\n            defaultRel: this.options.linkRelDefault.default || \"\",\n            currentRel: [],\n            linkAnchor: null,\n            linkValue: \"\",\n            _change: false,\n            callerName: pluginName\n        };\n        if (typeof context.linkDefaultRel.default === \"string\") context.linkDefaultRel.default = context.linkDefaultRel.default.trim();\n        if (typeof context.linkDefaultRel.check_new_window === \"string\") context.linkDefaultRel.check_new_window = context.linkDefaultRel.check_new_window.trim();\n        if (typeof context.linkDefaultRel.check_bookmark === \"string\") context.linkDefaultRel.check_bookmark = context.linkDefaultRel.check_bookmark.trim();\n        context.urlInput = forms.querySelector(\".se-input-url\");\n        context.anchorText = forms.querySelector(\"._se_anchor_text\");\n        context.newWindowCheck = forms.querySelector(\"._se_anchor_check\");\n        context.downloadCheck = forms.querySelector(\"._se_anchor_download\");\n        context.download = forms.querySelector(\"._se_anchor_download_icon\");\n        context.preview = forms.querySelector(\".se-link-preview\");\n        context.bookmark = forms.querySelector(\"._se_anchor_bookmark_icon\");\n        context.bookmarkButton = forms.querySelector(\"._se_bookmark_button\");\n        this.plugins.selectMenu.initEvent.call(this, pluginName, forms);\n        const listContext = this.context.selectMenu.caller[pluginName];\n        /** rel */ if (this.options.linkRel.length > 0) {\n            context.relButton = forms.querySelector(\".se-anchor-rel-btn\");\n            context.relList = forms.querySelector(\".se-list-layer\");\n            context.relPreview = forms.querySelector(\".se-anchor-rel-preview\");\n            context.relButton.addEventListener(\"click\", anchorPlugin.onClick_relButton.bind(this, context));\n            context.relList.addEventListener(\"click\", anchorPlugin.onClick_relList.bind(this, context));\n        }\n        context.newWindowCheck.addEventListener(\"change\", anchorPlugin.onChange_newWindowCheck.bind(this, context));\n        context.downloadCheck.addEventListener(\"change\", anchorPlugin.onChange_downloadCheck.bind(this, context));\n        context.anchorText.addEventListener(\"input\", anchorPlugin.onChangeAnchorText.bind(this, context));\n        context.urlInput.addEventListener(\"input\", anchorPlugin.onChangeUrlInput.bind(this, context));\n        context.urlInput.addEventListener(\"keydown\", anchorPlugin.onKeyDownUrlInput.bind(this, listContext));\n        context.urlInput.addEventListener(\"focus\", anchorPlugin.onFocusUrlInput.bind(this, context, listContext));\n        context.urlInput.addEventListener(\"blur\", anchorPlugin.onBlurUrlInput.bind(this, listContext));\n        context.bookmarkButton.addEventListener(\"click\", anchorPlugin.onClick_bookmarkButton.bind(this, context));\n    },\n    on: function(contextAnchor, update) {\n        const anchorPlugin = this.plugins.anchor;\n        if (!update) {\n            anchorPlugin.init.call(this, contextAnchor);\n            contextAnchor.anchorText.value = this.getSelection().toString().trim();\n            contextAnchor.newWindowCheck.checked = this.options.linkTargetNewWindow;\n        } else if (contextAnchor.linkAnchor) {\n            this.context.dialog.updateModal = true;\n            const href = contextAnchor.linkAnchor.getAttribute(\"href\");\n            contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = anchorPlugin.selfPathBookmark.call(this, href) ? href.substr(href.lastIndexOf(\"#\")) : href;\n            contextAnchor.anchorText.value = contextAnchor.linkAnchor.textContent;\n            contextAnchor.newWindowCheck.checked = /_blank/i.test(contextAnchor.linkAnchor.target) ? true : false;\n            contextAnchor.downloadCheck.checked = contextAnchor.linkAnchor.download;\n        }\n        this.context.anchor.callerContext = contextAnchor;\n        anchorPlugin.setRel.call(this, contextAnchor, update && contextAnchor.linkAnchor ? contextAnchor.linkAnchor.rel : contextAnchor.defaultRel);\n        anchorPlugin.setLinkPreview.call(this, contextAnchor, contextAnchor.linkValue);\n        this.plugins.selectMenu.on.call(this, contextAnchor.callerName, this.plugins.anchor.setHeaderBookmark);\n    },\n    selfPathBookmark: function(path) {\n        const href = this._w.location.href.replace(/\\/$/, \"\");\n        return path.indexOf(\"#\") === 0 || path.indexOf(href) === 0 && path.indexOf(\"#\") === (href.indexOf(\"#\") === -1 ? href.length : href.substr(0, href.indexOf(\"#\")).length);\n    },\n    _closeRelMenu: null,\n    toggleRelList: function(contextAnchor, show) {\n        if (!show) {\n            if (this.plugins.anchor._closeRelMenu) this.plugins.anchor._closeRelMenu();\n        } else {\n            const target = contextAnchor.relButton;\n            const relList = contextAnchor.relList;\n            this.util.addClass(target, \"active\");\n            relList.style.visibility = \"hidden\";\n            relList.style.display = \"block\";\n            if (!this.options.rtl) relList.style.left = target.offsetLeft + target.offsetWidth + 1 + \"px\";\n            else relList.style.left = target.offsetLeft - relList.offsetWidth - 1 + \"px\";\n            relList.style.top = target.offsetTop + target.offsetHeight / 2 - relList.offsetHeight / 2 + \"px\";\n            relList.style.visibility = \"\";\n            this.plugins.anchor._closeRelMenu = (function(context, target, e) {\n                if (e && (context.relButton.contains(e.target) || context.relList.contains(e.target))) return;\n                this.util.removeClass(target, \"active\");\n                context.relList.style.display = \"none\";\n                this.modalForm.removeEventListener(\"click\", this.plugins.anchor._closeRelMenu);\n                this.plugins.anchor._closeRelMenu = null;\n            }).bind(this, contextAnchor, target);\n            this.modalForm.addEventListener(\"click\", this.plugins.anchor._closeRelMenu);\n        }\n    },\n    onClick_relButton: function(contextAnchor, e) {\n        this.plugins.anchor.toggleRelList.call(this, contextAnchor, !this.util.hasClass(e.target, \"active\"));\n    },\n    onClick_relList: function(contextAnchor, e) {\n        const target = e.target;\n        const cmd = target.getAttribute(\"data-command\");\n        if (!cmd) return;\n        const current = contextAnchor.currentRel;\n        const checked = this.util.toggleClass(target, \"se-checked\");\n        const index = current.indexOf(cmd);\n        if (checked) {\n            if (index === -1) current.push(cmd);\n        } else {\n            if (index > -1) current.splice(index, 1);\n        }\n        contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = current.join(\" \");\n    },\n    setRel: function(contextAnchor, relAttr) {\n        const relListEl = contextAnchor.relList;\n        const rels = contextAnchor.currentRel = !relAttr ? [] : relAttr.split(\" \");\n        if (!relListEl) return;\n        const checkedRel = relListEl.querySelectorAll(\"button\");\n        for(let i = 0, len = checkedRel.length, cmd; i < len; i++){\n            cmd = checkedRel[i].getAttribute(\"data-command\");\n            if (rels.indexOf(cmd) > -1) {\n                this.util.addClass(checkedRel[i], \"se-checked\");\n            } else {\n                this.util.removeClass(checkedRel[i], \"se-checked\");\n            }\n        }\n        contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = rels.join(\" \");\n    },\n    createHeaderList: function(contextAnchor, contextList, urlValue) {\n        const headers = this.util.getListChildren(this.context.element.wysiwyg, function(current) {\n            return /h[1-6]/i.test(current.nodeName);\n        });\n        if (headers.length === 0) return;\n        const valueRegExp = new this._w.RegExp(\"^\" + urlValue.replace(/^#/, \"\"), \"i\");\n        const list = [];\n        let html = \"\";\n        for(let i = 0, len = headers.length, h; i < len; i++){\n            h = headers[i];\n            if (!valueRegExp.test(h.textContent)) continue;\n            list.push(h);\n            html += '<li class=\"se-select-item\" data-index=\"' + i + '\">' + h.textContent + \"</li>\";\n        }\n        if (list.length === 0) {\n            this.plugins.selectMenu.close.call(this, contextList);\n        } else {\n            this.plugins.selectMenu.createList(contextList, list, html);\n            this.plugins.selectMenu.open.call(this, contextList, this.plugins.anchor._setMenuListPosition.bind(this, contextAnchor));\n        }\n    },\n    _setMenuListPosition: function(contextAnchor, list) {\n        list.style.top = contextAnchor.urlInput.offsetHeight + 1 + \"px\";\n    },\n    onKeyDownUrlInput: function(contextList, e) {\n        const keyCode = e.keyCode;\n        switch(keyCode){\n            case 38:\n                e.preventDefault();\n                e.stopPropagation();\n                this.plugins.selectMenu.moveItem.call(this, contextList, -1);\n                break;\n            case 40:\n                e.preventDefault();\n                e.stopPropagation();\n                this.plugins.selectMenu.moveItem.call(this, contextList, 1);\n                break;\n            case 13:\n                if (contextList.index > -1) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.plugins.anchor.setHeaderBookmark.call(this, this.plugins.selectMenu.getItem(contextList, null));\n                }\n                break;\n        }\n    },\n    setHeaderBookmark: function(header) {\n        const contextAnchor = this.context.anchor.callerContext;\n        const id = header.id || \"h_\" + this._w.Math.random().toString().replace(/.+\\./, \"\");\n        header.id = id;\n        contextAnchor.urlInput.value = \"#\" + id;\n        if (!contextAnchor.anchorText.value.trim() || !contextAnchor._change) {\n            contextAnchor.anchorText.value = header.textContent;\n        }\n        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, contextAnchor.urlInput.value);\n        this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n        this.context.anchor.callerContext.urlInput.focus();\n    },\n    onChangeAnchorText: function(contextAnchor, e) {\n        contextAnchor._change = !!e.target.value.trim();\n    },\n    onChangeUrlInput: function(contextAnchor, e) {\n        const value = e.target.value.trim();\n        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, value);\n        if (this.plugins.anchor.selfPathBookmark.call(this, value)) this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, value);\n        else this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n    },\n    onFocusUrlInput: function(contextAnchor, contextLink) {\n        const value = contextAnchor.urlInput.value;\n        if (this.plugins.anchor.selfPathBookmark.call(this, value)) this.plugins.anchor.createHeaderList.call(this, contextAnchor, contextLink, value);\n    },\n    onBlurUrlInput: function(contextList) {\n        this.plugins.selectMenu.close.call(this, contextList);\n    },\n    setLinkPreview: function(context, value) {\n        const preview = context.preview;\n        const protocol = this.options.linkProtocol;\n        const noPrefix = this.options.linkNoPrefix;\n        const reservedProtocol = /^(mailto\\:|tel\\:|sms\\:|https*\\:\\/\\/|#)/.test(value) || value.indexOf(protocol) === 0;\n        const sameProtocol = !protocol ? false : this._w.RegExp(\"^\" + this.util.escapeStringRegexp(value.substr(0, protocol.length))).test(protocol);\n        value = context.linkValue = preview.textContent = !value ? \"\" : noPrefix ? value : protocol && !reservedProtocol && !sameProtocol ? protocol + value : reservedProtocol ? value : /^www\\./.test(value) ? \"http://\" + value : this.context.anchor.host + (/^\\//.test(value) ? \"\" : \"/\") + value;\n        if (this.plugins.anchor.selfPathBookmark.call(this, value)) {\n            context.bookmark.style.display = \"block\";\n            this.util.addClass(context.bookmarkButton, \"active\");\n        } else {\n            context.bookmark.style.display = \"none\";\n            this.util.removeClass(context.bookmarkButton, \"active\");\n        }\n        if (!this.plugins.anchor.selfPathBookmark.call(this, value) && context.downloadCheck.checked) {\n            context.download.style.display = \"block\";\n        } else {\n            context.download.style.display = \"none\";\n        }\n    },\n    setCtx: function(anchor, contextAnchor) {\n        if (!anchor) return;\n        contextAnchor.linkAnchor = anchor;\n        contextAnchor.linkValue = anchor.href;\n        contextAnchor.currentRel = anchor.rel.split(\" \");\n    },\n    updateAnchor: function(anchor, url, displayText, contextAnchor, notText) {\n        // download\n        if (!this.plugins.anchor.selfPathBookmark.call(this, url) && contextAnchor.downloadCheck.checked) {\n            anchor.setAttribute(\"download\", displayText || url);\n        } else {\n            anchor.removeAttribute(\"download\");\n        }\n        // new window\n        if (contextAnchor.newWindowCheck.checked) anchor.target = \"_blank\";\n        else anchor.removeAttribute(\"target\");\n        // rel\n        const rel = contextAnchor.currentRel.join(\" \");\n        if (!rel) anchor.removeAttribute(\"rel\");\n        else anchor.rel = rel;\n        // set url\n        anchor.href = url;\n        if (notText) {\n            if (anchor.children.length === 0) anchor.textContent = \"\";\n        } else {\n            anchor.textContent = displayText;\n        }\n    },\n    createAnchor: function(contextAnchor, notText) {\n        if (contextAnchor.linkValue.length === 0) return null;\n        const url = contextAnchor.linkValue;\n        const anchor = contextAnchor.anchorText;\n        const displayText = anchor.value.length === 0 ? url : anchor.value;\n        const oA = contextAnchor.linkAnchor || this.util.createElement(\"A\");\n        this.plugins.anchor.updateAnchor.call(this, oA, url, displayText, contextAnchor, notText);\n        contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.anchorText.value = \"\";\n        return oA;\n    },\n    onClick_bookmarkButton: function(contextAnchor) {\n        let url = contextAnchor.urlInput.value;\n        if (this.plugins.anchor.selfPathBookmark.call(this, url)) {\n            url = url.substr(1);\n            contextAnchor.bookmark.style.display = \"none\";\n            this.util.removeClass(contextAnchor.bookmarkButton, \"active\");\n            this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n        } else {\n            url = \"#\" + url;\n            contextAnchor.bookmark.style.display = \"block\";\n            this.util.addClass(contextAnchor.bookmarkButton, \"active\");\n            contextAnchor.downloadCheck.checked = false;\n            contextAnchor.download.style.display = \"none\";\n            this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, url);\n        }\n        contextAnchor.urlInput.value = url;\n        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, url);\n        contextAnchor.urlInput.focus();\n    },\n    onChange_newWindowCheck: function(contextAnchor, e) {\n        if (typeof contextAnchor.linkDefaultRel.check_new_window !== \"string\") return;\n        if (e.target.checked) {\n            this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));\n        } else {\n            this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));\n        }\n    },\n    onChange_downloadCheck: function(contextAnchor, e) {\n        if (e.target.checked) {\n            contextAnchor.download.style.display = \"block\";\n            contextAnchor.bookmark.style.display = \"none\";\n            this.util.removeClass(contextAnchor.bookmarkButton, \"active\");\n            contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.urlInput.value.replace(/^\\#+/, \"\");\n            if (typeof contextAnchor.linkDefaultRel.check_bookmark === \"string\") {\n                this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));\n            }\n        } else {\n            contextAnchor.download.style.display = \"none\";\n            if (typeof contextAnchor.linkDefaultRel.check_bookmark === \"string\") {\n                this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));\n            }\n        }\n    },\n    _relMerge: function(contextAnchor, relAttr) {\n        const current = contextAnchor.currentRel;\n        if (!relAttr) return current.join(\" \");\n        if (/^only\\:/.test(relAttr)) {\n            relAttr = relAttr.replace(/^only\\:/, \"\").trim();\n            contextAnchor.currentRel = relAttr.split(\" \");\n            return relAttr;\n        }\n        const rels = relAttr.split(\" \");\n        for(let i = 0, len = rels.length, index; i < len; i++){\n            index = current.indexOf(rels[i]);\n            if (index === -1) current.push(rels[i]);\n        }\n        return current.join(\" \");\n    },\n    _relDelete: function(contextAnchor, relAttr) {\n        if (!relAttr) return contextAnchor.currentRel.join(\" \");\n        if (/^only\\:/.test(relAttr)) relAttr = relAttr.replace(/^only\\:/, \"\").trim();\n        const rels = contextAnchor.currentRel.join(\" \").replace(this._w.RegExp(relAttr + \"\\\\s*\"), \"\");\n        contextAnchor.currentRel = rels.split(\" \");\n        return rels;\n    },\n    init: function(contextAnchor) {\n        contextAnchor.linkAnchor = null;\n        contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = \"\";\n        contextAnchor.anchorText.value = \"\";\n        contextAnchor.newWindowCheck.checked = false;\n        contextAnchor.downloadCheck.checked = false;\n        contextAnchor._change = false;\n        this.plugins.anchor.setRel.call(this, contextAnchor, contextAnchor.defaultRel);\n        if (contextAnchor.relList) {\n            this.plugins.anchor.toggleRelList.call(this, contextAnchor, false);\n        }\n        this.context.anchor.callerContext = null;\n        this.plugins.selectMenu.init.call(this, this.context.selectMenu.callerContext);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/_anchor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js":
/*!********************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_colorPicker.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2018 JiHong Lee.\r\n * MIT license.\r\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"colorPicker\",\n    /**\r\n     * @description Constructor\r\n     * @param {Object} core Core object \r\n     */ add: function(core) {\n        const context = core.context;\n        context.colorPicker = {\n            colorListHTML: \"\",\n            _colorInput: \"\",\n            _defaultColor: \"#000\",\n            _styleProperty: \"color\",\n            _currentColor: \"\",\n            _colorList: []\n        };\n        /** set submenu */ context.colorPicker.colorListHTML = this.createColorList(core, this._makeColorList);\n    },\n    /**\r\n     * @description Create color list\r\n     * @param {Object} core Core object \r\n     * @param {Function} makeColor this._makeColorList\r\n     * @returns {String} HTML string\r\n     */ createColorList: function(core, makeColor) {\n        const option = core.options;\n        const lang = core.lang;\n        const colorList = !option.colorList || option.colorList.length === 0 ? [\n            \"#ff0000\",\n            \"#ff5e00\",\n            \"#ffe400\",\n            \"#abf200\",\n            \"#00d8ff\",\n            \"#0055ff\",\n            \"#6600ff\",\n            \"#ff00dd\",\n            \"#000000\",\n            \"#ffd8d8\",\n            \"#fae0d4\",\n            \"#faf4c0\",\n            \"#e4f7ba\",\n            \"#d4f4fa\",\n            \"#d9e5ff\",\n            \"#e8d9ff\",\n            \"#ffd9fa\",\n            \"#f1f1f1\",\n            \"#ffa7a7\",\n            \"#ffc19e\",\n            \"#faed7d\",\n            \"#cef279\",\n            \"#b2ebf4\",\n            \"#b2ccff\",\n            \"#d1b2ff\",\n            \"#ffb2f5\",\n            \"#bdbdbd\",\n            \"#f15f5f\",\n            \"#f29661\",\n            \"#e5d85c\",\n            \"#bce55c\",\n            \"#5cd1e5\",\n            \"#6699ff\",\n            \"#a366ff\",\n            \"#f261df\",\n            \"#8c8c8c\",\n            \"#980000\",\n            \"#993800\",\n            \"#998a00\",\n            \"#6b9900\",\n            \"#008299\",\n            \"#003399\",\n            \"#3d0099\",\n            \"#990085\",\n            \"#353535\",\n            \"#670000\",\n            \"#662500\",\n            \"#665c00\",\n            \"#476600\",\n            \"#005766\",\n            \"#002266\",\n            \"#290066\",\n            \"#660058\",\n            \"#222222\"\n        ] : option.colorList;\n        let colorArr = [];\n        let list = '<div class=\"se-list-inner\">';\n        for(let i = 0, len = colorList.length, color; i < len; i++){\n            color = colorList[i];\n            if (!color) continue;\n            if (typeof color === \"string\") {\n                colorArr.push(color);\n                if (i < len - 1) continue;\n            }\n            if (colorArr.length > 0) {\n                list += '<div class=\"se-selector-color\">' + makeColor(colorArr) + \"</div>\";\n                colorArr = [];\n            }\n            if (typeof color === \"object\") {\n                list += '<div class=\"se-selector-color\">' + makeColor(color) + \"</div>\";\n            }\n        }\n        list += \"\" + '<form class=\"se-form-group\">' + '<input type=\"text\" maxlength=\"9\" class=\"_se_color_picker_input se-color-input\"/>' + '<button type=\"submit\" class=\"se-btn-primary _se_color_picker_submit\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\">' + core.icons.checked + \"</button>\" + '<button type=\"button\" class=\"se-btn _se_color_picker_remove\" title=\"' + lang.toolbar.removeFormat + '\" aria-label=\"' + lang.toolbar.removeFormat + '\">' + core.icons.erase + \"</button>\" + \"</form>\" + \"</div>\";\n        return list;\n    },\n    /**\r\n     * @description Internal function used by this.createColorList\r\n     * @param {Array} colorList Color list\r\n     * @private\r\n     */ _makeColorList: function(colorList) {\n        let list = \"\";\n        list += '<ul class=\"se-color-pallet\">';\n        for(let i = 0, len = colorList.length, color; i < len; i++){\n            color = colorList[i];\n            if (typeof color === \"string\") {\n                list += \"<li>\" + '<button type=\"button\" data-value=\"' + color + '\" title=\"' + color + '\" aria-label=\"' + color + '\" style=\"background-color:' + color + ';\"></button>' + \"</li>\";\n            }\n        }\n        list += \"</ul>\";\n        return list;\n    },\n    /**\r\n     * @description Displays or resets the currently selected color at color list.\r\n     * @param {Node} node Current Selected node\r\n     * @param {String|null} color Color value\r\n     */ init: function(node, color) {\n        const colorPicker = this.plugins.colorPicker;\n        let fillColor = color ? color : colorPicker.getColorInNode.call(this, node) || this.context.colorPicker._defaultColor;\n        fillColor = colorPicker.isHexColor(fillColor) ? fillColor : colorPicker.rgb2hex(fillColor) || fillColor;\n        const colorList = this.context.colorPicker._colorList;\n        if (colorList) {\n            for(let i = 0, len = colorList.length; i < len; i++){\n                if (fillColor.toLowerCase() === colorList[i].getAttribute(\"data-value\").toLowerCase()) {\n                    this.util.addClass(colorList[i], \"active\");\n                } else {\n                    this.util.removeClass(colorList[i], \"active\");\n                }\n            }\n        }\n        colorPicker.setInputText.call(this, colorPicker.colorName2hex.call(this, fillColor));\n    },\n    /**\r\n     * @description Store color values\r\n     * @param {String} hexColorStr Hax color value\r\n     */ setCurrentColor: function(hexColorStr) {\n        this.context.colorPicker._currentColor = hexColorStr;\n        this.context.colorPicker._colorInput.style.borderColor = hexColorStr;\n    },\n    /**\r\n     * @description Set color at input element\r\n     * @param {String} hexColorStr Hax color value\r\n     */ setInputText: function(hexColorStr) {\n        hexColorStr = /^#/.test(hexColorStr) ? hexColorStr : \"#\" + hexColorStr;\n        this.context.colorPicker._colorInput.value = hexColorStr;\n        this.plugins.colorPicker.setCurrentColor.call(this, hexColorStr);\n    },\n    /**\r\n     * @description Gets color value at color property of node\r\n     * @param {Node} node Selected node \r\n     * @returns {String}\r\n     */ getColorInNode: function(node) {\n        let findColor = \"\";\n        const styleProperty = this.context.colorPicker._styleProperty;\n        while(node && !this.util.isWysiwygDiv(node) && findColor.length === 0){\n            if (node.nodeType === 1 && node.style[styleProperty]) findColor = node.style[styleProperty];\n            node = node.parentNode;\n        }\n        return findColor;\n    },\n    /**\r\n     * @description Function to check hex format color\r\n     * @param {String} str Color value\r\n     */ isHexColor: function(str) {\n        return /^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(str);\n    },\n    /**\r\n     * @description Function to convert hex format to a rgb color\r\n     * @param {String} rgb RGB color format\r\n     * @returns {String}\r\n     */ rgb2hex: function(rgb) {\n        const rgbMatch = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n        return rgbMatch && rgbMatch.length === 4 ? \"#\" + (\"0\" + parseInt(rgbMatch[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(rgbMatch[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(rgbMatch[3], 10).toString(16)).slice(-2) : \"\";\n    },\n    /**\r\n     * @description Converts color values of other formats to hex color values and returns.\r\n     * @param {String} colorName Color value\r\n     * @returns {String}\r\n     */ colorName2hex: function(colorName) {\n        if (/^#/.test(colorName)) return colorName;\n        var temp = this.util.createElement(\"div\");\n        temp.style.display = \"none\";\n        temp.style.color = colorName;\n        var colors = this._w.getComputedStyle(this._d.body.appendChild(temp)).color.match(/\\d+/g).map(function(a) {\n            return parseInt(a, 10);\n        });\n        this.util.removeItem(temp);\n        return colors.length >= 3 ? \"#\" + ((1 << 24) + (colors[0] << 16) + (colors[1] << 8) + colors[2]).toString(16).substr(1) : false;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/_notice.js":
/*!***************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_notice.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"notice\",\n    /**\n     * @description Constructor\n     * @param {Object} core Core object \n     */ add: function(core) {\n        const context = core.context;\n        context.notice = {};\n        /** dialog */ let notice_div = core.util.createElement(\"DIV\");\n        let notice_span = core.util.createElement(\"SPAN\");\n        let notice_button = core.util.createElement(\"BUTTON\");\n        notice_div.className = \"se-notice\";\n        notice_button.className = \"close\";\n        notice_button.setAttribute(\"aria-label\", \"Close\");\n        notice_button.setAttribute(\"title\", core.lang.dialogBox.close);\n        notice_button.innerHTML = core.icons.cancel;\n        notice_div.appendChild(notice_span);\n        notice_div.appendChild(notice_button);\n        context.notice.modal = notice_div;\n        context.notice.message = notice_span;\n        /** add event listeners */ notice_button.addEventListener(\"click\", this.onClick_cancel.bind(core));\n        /** append html */ context.element.editorArea.appendChild(notice_div);\n        /** empty memory */ notice_div = null;\n    },\n    /**\n     * @description Event when clicking the cancel button\n     * @param {MouseEvent} e Event object\n     */ onClick_cancel: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.notice.close.call(this);\n    },\n    /**\n     * @description  Open the notice panel\n     * @param {String} text Notice message\n     */ open: function(text) {\n        this.context.notice.message.textContent = text;\n        this.context.notice.modal.style.display = \"block\";\n    },\n    /**\n     * @description  Open the notice panel\n     */ close: function() {\n        this.context.notice.modal.style.display = \"none\";\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL21vZHVsZXMvX25vdGljZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQSxpRUFBZTtJQUNYQSxNQUFNO0lBQ047OztLQUdDLEdBQ0RDLEtBQUssU0FBVUMsSUFBSTtRQUNmLE1BQU1DLFVBQVVELEtBQUtDLE9BQU87UUFDNUJBLFFBQVFDLE1BQU0sR0FBRyxDQUFDO1FBRWxCLFdBQVcsR0FDWCxJQUFJQyxhQUFhSCxLQUFLSSxJQUFJLENBQUNDLGFBQWEsQ0FBQztRQUN6QyxJQUFJQyxjQUFjTixLQUFLSSxJQUFJLENBQUNDLGFBQWEsQ0FBQztRQUMxQyxJQUFJRSxnQkFBZ0JQLEtBQUtJLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1FBRTVDRixXQUFXSyxTQUFTLEdBQUc7UUFDdkJELGNBQWNDLFNBQVMsR0FBRztRQUMxQkQsY0FBY0UsWUFBWSxDQUFDLGNBQWM7UUFDekNGLGNBQWNFLFlBQVksQ0FBQyxTQUFTVCxLQUFLVSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSztRQUM3REwsY0FBY00sU0FBUyxHQUFHYixLQUFLYyxLQUFLLENBQUNDLE1BQU07UUFFM0NaLFdBQVdhLFdBQVcsQ0FBQ1Y7UUFDdkJILFdBQVdhLFdBQVcsQ0FBQ1Q7UUFFdkJOLFFBQVFDLE1BQU0sQ0FBQ2UsS0FBSyxHQUFHZDtRQUN2QkYsUUFBUUMsTUFBTSxDQUFDZ0IsT0FBTyxHQUFHWjtRQUV6Qix3QkFBd0IsR0FDeEJDLGNBQWNZLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3JCO1FBRWpFLGdCQUFnQixHQUNoQkMsUUFBUXFCLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDUCxXQUFXLENBQUNiO1FBRXZDLGlCQUFpQixHQUNqQkEsYUFBYTtJQUNqQjtJQUVBOzs7S0FHQyxHQUNEaUIsZ0JBQWdCLFNBQVVJLENBQUM7UUFDdkJBLEVBQUVDLGNBQWM7UUFDaEJELEVBQUVFLGVBQWU7UUFDakIsSUFBSSxDQUFDQyxPQUFPLENBQUN6QixNQUFNLENBQUNVLEtBQUssQ0FBQ2dCLElBQUksQ0FBQyxJQUFJO0lBQ3ZDO0lBRUE7OztLQUdDLEdBQ0RDLE1BQU0sU0FBVUMsSUFBSTtRQUNoQixJQUFJLENBQUM3QixPQUFPLENBQUNDLE1BQU0sQ0FBQ2dCLE9BQU8sQ0FBQ2EsV0FBVyxHQUFHRDtRQUMxQyxJQUFJLENBQUM3QixPQUFPLENBQUNDLE1BQU0sQ0FBQ2UsS0FBSyxDQUFDZSxLQUFLLENBQUNDLE9BQU8sR0FBRztJQUM5QztJQUVBOztLQUVDLEdBQ0RyQixPQUFPO1FBQ0gsSUFBSSxDQUFDWCxPQUFPLENBQUNDLE1BQU0sQ0FBQ2UsS0FBSyxDQUFDZSxLQUFLLENBQUNDLE9BQU8sR0FBRztJQUM5QztBQUNKLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B0aGUtZmxleGlvbi9wa2cvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL21vZHVsZXMvX25vdGljZS5qcz9lODc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ25vdGljZScsXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3QgXG4gICAgICovXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xuICAgICAgICBjb250ZXh0Lm5vdGljZSA9IHt9O1xuXG4gICAgICAgIC8qKiBkaWFsb2cgKi9cbiAgICAgICAgbGV0IG5vdGljZV9kaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XG4gICAgICAgIGxldCBub3RpY2Vfc3BhbiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XG4gICAgICAgIGxldCBub3RpY2VfYnV0dG9uID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0JVVFRPTicpO1xuXG4gICAgICAgIG5vdGljZV9kaXYuY2xhc3NOYW1lID0gJ3NlLW5vdGljZSc7XG4gICAgICAgIG5vdGljZV9idXR0b24uY2xhc3NOYW1lID0gJ2Nsb3NlJztcbiAgICAgICAgbm90aWNlX2J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnQ2xvc2UnKTtcbiAgICAgICAgbm90aWNlX2J1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgY29yZS5sYW5nLmRpYWxvZ0JveC5jbG9zZSk7XG4gICAgICAgIG5vdGljZV9idXR0b24uaW5uZXJIVE1MID0gY29yZS5pY29ucy5jYW5jZWw7XG4gICAgICAgIFxuICAgICAgICBub3RpY2VfZGl2LmFwcGVuZENoaWxkKG5vdGljZV9zcGFuKTtcbiAgICAgICAgbm90aWNlX2Rpdi5hcHBlbmRDaGlsZChub3RpY2VfYnV0dG9uKTtcblxuICAgICAgICBjb250ZXh0Lm5vdGljZS5tb2RhbCA9IG5vdGljZV9kaXY7XG4gICAgICAgIGNvbnRleHQubm90aWNlLm1lc3NhZ2UgPSBub3RpY2Vfc3BhbjtcblxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xuICAgICAgICBub3RpY2VfYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrX2NhbmNlbC5iaW5kKGNvcmUpKTtcbiAgICAgICAgXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xuICAgICAgICBjb250ZXh0LmVsZW1lbnQuZWRpdG9yQXJlYS5hcHBlbmRDaGlsZChub3RpY2VfZGl2KTtcbiAgICAgICAgXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cbiAgICAgICAgbm90aWNlX2RpdiA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCB3aGVuIGNsaWNraW5nIHRoZSBjYW5jZWwgYnV0dG9uXG4gICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIG9uQ2xpY2tfY2FuY2VsOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMucGx1Z2lucy5ub3RpY2UuY2xvc2UuY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uICBPcGVuIHRoZSBub3RpY2UgcGFuZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBOb3RpY2UgbWVzc2FnZVxuICAgICAqL1xuICAgIG9wZW46IGZ1bmN0aW9uICh0ZXh0KSAge1xuICAgICAgICB0aGlzLmNvbnRleHQubm90aWNlLm1lc3NhZ2UudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB0aGlzLmNvbnRleHQubm90aWNlLm1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gIE9wZW4gdGhlIG5vdGljZSBwYW5lbFxuICAgICAqL1xuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5ub3RpY2UubW9kYWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIm5hbWUiLCJhZGQiLCJjb3JlIiwiY29udGV4dCIsIm5vdGljZSIsIm5vdGljZV9kaXYiLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsIm5vdGljZV9zcGFuIiwibm90aWNlX2J1dHRvbiIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsImxhbmciLCJkaWFsb2dCb3giLCJjbG9zZSIsImlubmVySFRNTCIsImljb25zIiwiY2FuY2VsIiwiYXBwZW5kQ2hpbGQiLCJtb2RhbCIsIm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwib25DbGlja19jYW5jZWwiLCJiaW5kIiwiZWxlbWVudCIsImVkaXRvckFyZWEiLCJlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwbHVnaW5zIiwiY2FsbCIsIm9wZW4iLCJ0ZXh0IiwidGV4dENvbnRlbnQiLCJzdHlsZSIsImRpc3BsYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/_notice.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/_selectMenu.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_selectMenu.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2018 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"selectMenu\",\n    add: function(core) {\n        core.context.selectMenu = {\n            caller: {},\n            callerContext: null\n        };\n    },\n    setForm: function() {\n        return '<div class=\"se-select-list\"></div>';\n    },\n    createList: function(listContext, items, html) {\n        listContext.form.innerHTML = \"<ul>\" + html + \"</ul>\";\n        listContext.items = items;\n        listContext.menus = listContext.form.querySelectorAll(\"li\");\n    },\n    initEvent: function(pluginName, forms) {\n        const form = forms.querySelector(\".se-select-list\");\n        const context = this.context.selectMenu.caller[pluginName] = {\n            form: form,\n            items: [],\n            menus: [],\n            index: -1,\n            item: null,\n            clickMethod: null,\n            callerName: pluginName\n        };\n        form.addEventListener(\"mousedown\", this.plugins.selectMenu.onMousedown_list);\n        form.addEventListener(\"mousemove\", this.plugins.selectMenu.onMouseMove_list.bind(this, context));\n        form.addEventListener(\"click\", this.plugins.selectMenu.onClick_list.bind(this, context));\n    },\n    onMousedown_list: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    },\n    onMouseMove_list: function(context, e) {\n        this.util.addClass(context.form, \"__se_select-menu-mouse-move\");\n        const index = e.target.getAttribute(\"data-index\");\n        if (!index) return;\n        context.index = index * 1;\n    },\n    onClick_list: function(context, e) {\n        const index = e.target.getAttribute(\"data-index\");\n        if (!index) return;\n        context.clickMethod.call(this, context.items[index]);\n    },\n    moveItem: function(listContext, num) {\n        this.util.removeClass(listContext.form, \"__se_select-menu-mouse-move\");\n        num = listContext.index + num;\n        const menus = listContext.menus;\n        const len = menus.length;\n        const selectIndex = listContext.index = num >= len ? 0 : num < 0 ? len - 1 : num;\n        for(let i = 0; i < len; i++){\n            if (i === selectIndex) {\n                this.util.addClass(menus[i], \"active\");\n            } else {\n                this.util.removeClass(menus[i], \"active\");\n            }\n        }\n        listContext.item = listContext.items[selectIndex];\n    },\n    getItem: function(listContext, index) {\n        index = !index || index < 0 ? listContext.index : index;\n        return listContext.items[index];\n    },\n    on: function(callerName, clickMethod) {\n        const listContext = this.context.selectMenu.caller[callerName];\n        this.context.selectMenu.callerContext = listContext;\n        listContext.clickMethod = clickMethod;\n        listContext.callerName = callerName;\n    },\n    open: function(listContext, positionHandler) {\n        const form = listContext.form;\n        form.style.visibility = \"hidden\";\n        form.style.display = \"block\";\n        positionHandler(form);\n        form.style.visibility = \"\";\n    },\n    close: function(listContext) {\n        listContext.form.style.display = \"none\";\n        listContext.items = [];\n        listContext.menus = [];\n        listContext.index = -1;\n        listContext.item = null;\n    },\n    init: function(listContext) {\n        if (!listContext) return;\n        listContext.items = [];\n        listContext.menus = [];\n        listContext.index = -1;\n        listContext.item = null;\n        listContext.callerName = \"\";\n        this.context.selectMenu.callerContext = null;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/_selectMenu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/component.js":
/*!*****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/component.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const component = {\n        name: \"component\",\n        /**\n         * @description Create a container for the resizing component and insert the element.\n         * @param {Element} cover Cover element (FIGURE)\n         * @param {String} className Class name of container (fixed: se-component)\n         * @returns {Element} Created container element\n         */ set_container: function(cover, className) {\n            const container = this.util.createElement(\"DIV\");\n            container.className = \"se-component \" + className;\n            container.appendChild(cover);\n            return container;\n        },\n        /**\n         * @description Cover the target element with a FIGURE element.\n         * @param {Element} element Target element\n         */ set_cover: function(element) {\n            const cover = this.util.createElement(\"FIGURE\");\n            cover.appendChild(element);\n            return cover;\n        },\n        /**\n         * @description Return HTML string of caption(FIGCAPTION) element\n         * @returns {String}\n         */ create_caption: function() {\n            const caption = this.util.createElement(\"FIGCAPTION\");\n            caption.innerHTML = \"<div>\" + this.lang.dialogBox.caption + \"</div>\";\n            return caption;\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"component\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: component\n        });\n    }\n    return component;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL21vZHVsZXMvY29tcG9uZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRUMsVUFBVUEsTUFBTSxFQUFFQyxPQUFPO0lBQ3RCLElBQUksS0FBa0IsSUFBWSxPQUFPQyxPQUFPQyxPQUFPLEtBQUssVUFBVTtRQUNsRUQsT0FBT0MsT0FBTyxHQUFHSCxPQUFPSSxRQUFRLEdBQzVCSCxRQUFRRCxRQUFRLFFBQ2hCLFNBQVVLLENBQUM7WUFDUCxJQUFJLENBQUNBLEVBQUVELFFBQVEsRUFBRTtnQkFDYixNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxPQUFPTCxRQUFRSTtRQUNuQjtJQUNSLE9BQU87UUFDSEosUUFBUUQ7SUFDWjtBQUNKLEdBQUUsTUFBa0IsR0FBY08sQ0FBTUEsR0FBRyxRQUFNLFNBQVVBLE9BQU0sRUFBRUMsUUFBUTtJQUN2RSxNQUFNQyxZQUFZO1FBQ2RDLE1BQU07UUFDTjs7Ozs7U0FLQyxHQUNEQyxlQUFlLFNBQVVDLEtBQUssRUFBRUMsU0FBUztZQUNyQyxNQUFNQyxZQUFZLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUM7WUFDMUNGLFVBQVVELFNBQVMsR0FBRyxrQkFBa0JBO1lBQ3hDQyxVQUFVRyxXQUFXLENBQUNMO1lBRXRCLE9BQU9FO1FBQ1g7UUFFQTs7O1NBR0MsR0FDREksV0FBVyxTQUFVQyxPQUFPO1lBQ3hCLE1BQU1QLFFBQVEsSUFBSSxDQUFDRyxJQUFJLENBQUNDLGFBQWEsQ0FBQztZQUN0Q0osTUFBTUssV0FBVyxDQUFDRTtZQUVsQixPQUFPUDtRQUNYO1FBRUE7OztTQUdDLEdBQ0RRLGdCQUFnQjtZQUNaLE1BQU1DLFVBQVUsSUFBSSxDQUFDTixJQUFJLENBQUNDLGFBQWEsQ0FBQztZQUN4Q0ssUUFBUUMsU0FBUyxHQUFHLFVBQVUsSUFBSSxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsT0FBTyxHQUFHO1lBQzVELE9BQU9BO1FBQ1g7SUFDSjtJQUVBLElBQUksT0FBT2IsYUFBYSxPQUFPaUIsV0FBVztRQUN0QyxJQUFJLENBQUNsQixRQUFPbUIsaUJBQWlCLEVBQUU7WUFDM0JDLE9BQU9DLGNBQWMsQ0FBQ3JCLFNBQVEscUJBQXFCO2dCQUMvQ3NCLFlBQVk7Z0JBQ1pDLFVBQVU7Z0JBQ1ZDLGNBQWM7Z0JBQ2RDLE9BQU8sQ0FBQztZQUNaO1FBQ0o7UUFFQUwsT0FBT0MsY0FBYyxDQUFDckIsUUFBT21CLGlCQUFpQixFQUFFLGFBQWE7WUFDekRHLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLE9BQU92QjtRQUNYO0lBQ0o7SUFFQSxPQUFPQTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvbW9kdWxlcy9jb21wb25lbnQuanM/YjYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXG4gKlxuICogc3VuZWRpdG9yLmpzXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxuICogTUlUIGxpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG4gICAgICAgICAgICBmYWN0b3J5KGdsb2JhbCwgdHJ1ZSkgOlxuICAgICAgICAgICAgZnVuY3Rpb24gKHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVU5FRElUT1JfTU9EVUxFUyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnkodyk7XG4gICAgICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoZ2xvYmFsKTtcbiAgICB9XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKHdpbmRvdywgbm9HbG9iYWwpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSB7XG4gICAgICAgIG5hbWU6ICdjb21wb25lbnQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSBhIGNvbnRhaW5lciBmb3IgdGhlIHJlc2l6aW5nIGNvbXBvbmVudCBhbmQgaW5zZXJ0IHRoZSBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvdmVyIENvdmVyIGVsZW1lbnQgKEZJR1VSRSlcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyBuYW1lIG9mIGNvbnRhaW5lciAoZml4ZWQ6IHNlLWNvbXBvbmVudClcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9IENyZWF0ZWQgY29udGFpbmVyIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHNldF9jb250YWluZXI6IGZ1bmN0aW9uIChjb3ZlciwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ3NlLWNvbXBvbmVudCAnICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvdmVyKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb3ZlciB0aGUgdGFyZ2V0IGVsZW1lbnQgd2l0aCBhIEZJR1VSRSBlbGVtZW50LlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHNldF9jb3ZlcjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0ZJR1VSRScpO1xuICAgICAgICAgICAgY292ZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gY292ZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm4gSFRNTCBzdHJpbmcgb2YgY2FwdGlvbihGSUdDQVBUSU9OKSBlbGVtZW50XG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVfY2FwdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgY2FwdGlvbiA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdGSUdDQVBUSU9OJyk7XG4gICAgICAgICAgICBjYXB0aW9uLmlubmVySFRNTCA9ICc8ZGl2PicgKyB0aGlzLmxhbmcuZGlhbG9nQm94LmNhcHRpb24gKyAnPC9kaXY+JztcbiAgICAgICAgICAgIHJldHVybiBjYXB0aW9uO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygbm9HbG9iYWwgPT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX01PRFVMRVMpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTU9EVUxFUycsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9NT0RVTEVTLCAnY29tcG9uZW50Jywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogY29tcG9uZW50XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnQ7XG59KSk7Il0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImNvbXBvbmVudCIsIm5hbWUiLCJzZXRfY29udGFpbmVyIiwiY292ZXIiLCJjbGFzc05hbWUiLCJjb250YWluZXIiLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwic2V0X2NvdmVyIiwiZWxlbWVudCIsImNyZWF0ZV9jYXB0aW9uIiwiY2FwdGlvbiIsImlubmVySFRNTCIsImxhbmciLCJkaWFsb2dCb3giLCJ1bmRlZmluZWQiLCJTVU5FRElUT1JfTU9EVUxFUyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/component.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/dialog.js":
/*!**************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/dialog.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const dialog = {\n        name: \"dialog\",\n        /**\n         * @description Constructor\n         * @param {Object} core Core object \n         */ add: function(core) {\n            const context = core.context;\n            context.dialog = {\n                kind: \"\",\n                updateModal: false,\n                _closeSignal: false\n            };\n            /** dialog */ let dialog_div = core.util.createElement(\"DIV\");\n            dialog_div.className = \"se-dialog sun-editor-common\";\n            let dialog_back = core.util.createElement(\"DIV\");\n            dialog_back.className = \"se-dialog-back\";\n            dialog_back.style.display = \"none\";\n            let dialog_area = core.util.createElement(\"DIV\");\n            dialog_area.className = \"se-dialog-inner\";\n            dialog_area.style.display = \"none\";\n            dialog_div.appendChild(dialog_back);\n            dialog_div.appendChild(dialog_area);\n            context.dialog.modalArea = dialog_div;\n            context.dialog.back = dialog_back;\n            context.dialog.modal = dialog_area;\n            /** add event listeners */ context.dialog.modal.addEventListener(\"mousedown\", this._onMouseDown_dialog.bind(core));\n            context.dialog.modal.addEventListener(\"click\", this._onClick_dialog.bind(core));\n            /** append html */ context.element.relative.appendChild(dialog_div);\n            /** empty memory */ dialog_div = null, dialog_back = null, dialog_area = null;\n        },\n        /**\n         * @description Event to control the behavior of closing the dialog\n         * @param {MouseEvent} e Event object\n         * @private\n         */ _onMouseDown_dialog: function(e) {\n            if (/se-dialog-inner/.test(e.target.className)) {\n                this.context.dialog._closeSignal = true;\n            } else {\n                this.context.dialog._closeSignal = false;\n            }\n        },\n        /**\n         * @description Event to close the window when the outside area of the dialog or close button is click\n         * @param {MouseEvent} e Event object\n         * @private\n         */ _onClick_dialog: function(e) {\n            if (/close/.test(e.target.getAttribute(\"data-command\")) || this.context.dialog._closeSignal) {\n                this.plugins.dialog.close.call(this);\n            }\n        },\n        /**\n         * @description Open a Dialog plugin\n         * @param {String} kind Dialog plugin name\n         * @param {Boolean} update Whether it will open for update ('image' === this.currentControllerName)\n         */ open: function(kind, update) {\n            if (this.modalForm) return false;\n            if (this.plugins.dialog._bindClose) {\n                this._d.removeEventListener(\"keydown\", this.plugins.dialog._bindClose);\n                this.plugins.dialog._bindClose = null;\n            }\n            this.plugins.dialog._bindClose = (function(e) {\n                if (!/27/.test(e.keyCode)) return;\n                this.plugins.dialog.close.call(this);\n            }).bind(this);\n            this._d.addEventListener(\"keydown\", this.plugins.dialog._bindClose);\n            this.context.dialog.updateModal = update;\n            if (this.options.popupDisplay === \"full\") {\n                this.context.dialog.modalArea.style.position = \"fixed\";\n            } else {\n                this.context.dialog.modalArea.style.position = \"absolute\";\n            }\n            this.context.dialog.kind = kind;\n            this.modalForm = this.context[kind].modal;\n            const focusElement = this.context[kind].focusElement;\n            if (typeof this.plugins[kind].on === \"function\") this.plugins[kind].on.call(this, update);\n            this.context.dialog.modalArea.style.display = \"block\";\n            this.context.dialog.back.style.display = \"block\";\n            this.context.dialog.modal.style.display = \"block\";\n            this.modalForm.style.display = \"block\";\n            if (focusElement) focusElement.focus();\n        },\n        _bindClose: null,\n        /**\n         * @description Close a Dialog plugin\n         * The plugin's \"init\" method is called.\n         */ close: function() {\n            if (this.plugins.dialog._bindClose) {\n                this._d.removeEventListener(\"keydown\", this.plugins.dialog._bindClose);\n                this.plugins.dialog._bindClose = null;\n            }\n            const kind = this.context.dialog.kind;\n            this.modalForm.style.display = \"none\";\n            this.context.dialog.back.style.display = \"none\";\n            this.context.dialog.modalArea.style.display = \"none\";\n            this.context.dialog.updateModal = false;\n            if (typeof this.plugins[kind].init === \"function\") this.plugins[kind].init.call(this);\n            this.context.dialog.kind = \"\";\n            this.modalForm = null;\n            this.focus();\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"dialog\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: dialog\n        });\n    }\n    return dialog;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/dialog.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/fileManager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/fileManager.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const fileManager = {\n        name: \"fileManager\",\n        _xmlHttp: null,\n        _checkMediaComponent: function(tag) {\n            if (/IMG/i.test(tag)) {\n                return !/FIGURE/i.test(tag.parentElement.nodeName) || !/FIGURE/i.test(tag.parentElement.parentElement.nodeName);\n            }\n            return true;\n        },\n        /**\n         * @description Upload the file to the server.\n         * @param {String} uploadUrl Upload server url\n         * @param {Object|null} uploadHeader Request header\n         * @param {FormData} formData FormData in body\n         * @param {Function|null} callBack Success call back function\n         * @param {Function|null} errorCallBack Error call back function\n         * @example this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);\n         */ upload: function(uploadUrl, uploadHeader, formData, callBack, errorCallBack) {\n            this.showLoading();\n            const filePlugin = this.plugins.fileManager;\n            const xmlHttp = filePlugin._xmlHttp = this.util.getXMLHttpRequest();\n            xmlHttp.onreadystatechange = filePlugin._callBackUpload.bind(this, xmlHttp, callBack, errorCallBack);\n            xmlHttp.open(\"post\", uploadUrl, true);\n            if (uploadHeader !== null && typeof uploadHeader === \"object\" && this._w.Object.keys(uploadHeader).length > 0) {\n                for(let key in uploadHeader){\n                    xmlHttp.setRequestHeader(key, uploadHeader[key]);\n                }\n            }\n            xmlHttp.send(formData);\n        },\n        _callBackUpload: function(xmlHttp, callBack, errorCallBack) {\n            if (xmlHttp.readyState === 4) {\n                if (xmlHttp.status === 200) {\n                    try {\n                        callBack(xmlHttp);\n                    } catch (e) {\n                        throw Error('[SUNEDITOR.fileManager.upload.callBack.fail] cause : \"' + e.message + '\"');\n                    } finally{\n                        this.closeLoading();\n                    }\n                } else {\n                    this.closeLoading();\n                    const res = !xmlHttp.responseText ? xmlHttp : JSON.parse(xmlHttp.responseText);\n                    if (typeof errorCallBack !== \"function\" || errorCallBack(\"\", res, this)) {\n                        const err = \"[SUNEDITOR.fileManager.upload.serverException] status: \" + xmlHttp.status + \", response: \" + (res.errorMessage || xmlHttp.responseText);\n                        this.functions.noticeOpen(err);\n                        throw Error(err);\n                    }\n                }\n            }\n        },\n        /**\n         * @description Checke the file's information and modify the tag that does not fit the format.\n         * @param {String} pluginName Plugin name\n         * @param {Array} tagNames Tag array to check\n         * @param {Function|null} uploadEventHandler Event handler to process updated file info after checking (used in \"setInfo\")\n         * @param {Function} modifyHandler A function to modify a tag that does not fit the format (Argument value: Tag element)\n         * @param {Boolean} resizing True if the plugin is using a resizing module\n         * @example \n         * const modifyHandler = function (tag) {\n         *      imagePlugin.onModifyMode.call(this, tag, null);\n         *      imagePlugin.openModify.call(this, true);\n         *      imagePlugin.update_image.call(this, true, false, true);\n         *  }.bind(this);\n         *  this.plugins.fileManager.checkInfo.call(this, 'image', ['img'], this.functions.onImageUpload, modifyHandler, true);\n         */ checkInfo: function(pluginName, tagNames, uploadEventHandler, modifyHandler, resizing) {\n            let tags = [];\n            for(let i = 0, len = tagNames.length; i < len; i++){\n                tags = tags.concat([].slice.call(this.context.element.wysiwyg.querySelectorAll(tagNames[i] + ':not([data-se-embed=\"true\"])')));\n            }\n            const fileManagerPlugin = this.plugins.fileManager;\n            const context = this.context[pluginName];\n            const infoList = context._infoList;\n            const setFileInfo = fileManagerPlugin.setInfo.bind(this);\n            if (tags.length === infoList.length) {\n                // reset\n                if (this._componentsInfoReset) {\n                    for(let i = 0, len = tags.length; i < len; i++){\n                        setFileInfo(pluginName, tags[i], uploadEventHandler, null, resizing);\n                    }\n                    return;\n                } else {\n                    let infoUpdate = false;\n                    for(let i = 0, len = infoList.length, info; i < len; i++){\n                        info = infoList[i];\n                        if (tags.filter(function(t) {\n                            return info.src === t.src && info.index.toString() === t.getAttribute(\"data-index\");\n                        }).length === 0) {\n                            infoUpdate = true;\n                            break;\n                        }\n                    }\n                    // pass\n                    if (!infoUpdate) return;\n                }\n            }\n            // check\n            const _resize_plugin = resizing ? this.context.resizing._resize_plugin : \"\";\n            if (resizing) this.context.resizing._resize_plugin = pluginName;\n            const currentTags = [];\n            const infoIndex = [];\n            for(let i = 0, len = infoList.length; i < len; i++){\n                infoIndex[i] = infoList[i].index;\n            }\n            context.__updateTags = tags;\n            while(tags.length > 0){\n                const tag = tags.shift();\n                if (!this.util.getParentElement(tag, this.util.isMediaComponent) || !fileManagerPlugin._checkMediaComponent(tag)) {\n                    currentTags.push(context._infoIndex);\n                    modifyHandler(tag);\n                } else if (!tag.getAttribute(\"data-index\") || infoIndex.indexOf(tag.getAttribute(\"data-index\") * 1) < 0) {\n                    currentTags.push(context._infoIndex);\n                    tag.removeAttribute(\"data-index\");\n                    setFileInfo(pluginName, tag, uploadEventHandler, null, resizing);\n                } else {\n                    currentTags.push(tag.getAttribute(\"data-index\") * 1);\n                }\n            }\n            for(let i = 0, dataIndex; i < infoList.length; i++){\n                dataIndex = infoList[i].index;\n                if (currentTags.indexOf(dataIndex) > -1) continue;\n                infoList.splice(i, 1);\n                if (typeof uploadEventHandler === \"function\") uploadEventHandler(null, dataIndex, \"delete\", null, 0, this);\n                i--;\n            }\n            if (resizing) this.context.resizing._resize_plugin = _resize_plugin;\n        },\n        /**\n         * @description Create info object of file and add it to \"_infoList\" (this.context[pluginName]._infoList[])\n         * @param {String} pluginName Plugin name \n         * @param {Element} element \n         * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n         * @param {Object|null} file \n         * @param {Boolean} resizing True if the plugin is using a resizing module\n         * @example \n         * uploadCallBack {.. file = { name: fileList[i].name, size: fileList[i].size };\n         * this.plugins.fileManager.setInfo.call(this, 'image', oImg, this.functions.onImageUpload, file, true);\n         */ setInfo: function(pluginName, element, uploadEventHandler, file, resizing) {\n            const _resize_plugin = resizing ? this.context.resizing._resize_plugin : \"\";\n            if (resizing) this.context.resizing._resize_plugin = pluginName;\n            const plguin = this.plugins[pluginName];\n            const context = this.context[pluginName];\n            const infoList = context._infoList;\n            let dataIndex = element.getAttribute(\"data-index\");\n            let info = null;\n            let state = \"\";\n            if (!file) {\n                file = {\n                    \"name\": element.getAttribute(\"data-file-name\") || (typeof element.src === \"string\" ? element.src.split(\"/\").pop() : \"\"),\n                    \"size\": element.getAttribute(\"data-file-size\") || 0\n                };\n            }\n            // create\n            if (!dataIndex || this._componentsInfoInit) {\n                state = \"create\";\n                dataIndex = context._infoIndex++;\n                element.setAttribute(\"data-index\", dataIndex);\n                element.setAttribute(\"data-file-name\", file.name);\n                element.setAttribute(\"data-file-size\", file.size);\n                info = {\n                    src: element.src,\n                    index: dataIndex * 1,\n                    name: file.name,\n                    size: file.size\n                };\n                infoList.push(info);\n            } else {\n                state = \"update\";\n                dataIndex *= 1;\n                for(let i = 0, len = infoList.length; i < len; i++){\n                    if (dataIndex === infoList[i].index) {\n                        info = infoList[i];\n                        break;\n                    }\n                }\n                if (!info) {\n                    dataIndex = context._infoIndex++;\n                    info = {\n                        index: dataIndex\n                    };\n                    infoList.push(info);\n                }\n                info.src = element.src;\n                info.name = element.getAttribute(\"data-file-name\");\n                info.size = element.getAttribute(\"data-file-size\") * 1;\n            }\n            // method bind\n            info.element = element;\n            info.delete = plguin.destroy.bind(this, element);\n            info.select = (function(element) {\n                element.scrollIntoView(true);\n                this._w.setTimeout(plguin.select.bind(this, element));\n            }).bind(this, element);\n            if (resizing) {\n                if (!element.getAttribute(\"origin-size\") && element.naturalWidth) {\n                    element.setAttribute(\"origin-size\", element.naturalWidth + \",\" + element.naturalHeight);\n                }\n                if (!element.getAttribute(\"data-origin\")) {\n                    const container = this.util.getParentElement(element, this.util.isMediaComponent);\n                    const cover = this.util.getParentElement(element, \"FIGURE\");\n                    const w = this.plugins.resizing._module_getSizeX.call(this, context, element, cover, container);\n                    const h = this.plugins.resizing._module_getSizeY.call(this, context, element, cover, container);\n                    element.setAttribute(\"data-origin\", w + \",\" + h);\n                    element.setAttribute(\"data-size\", w + \",\" + h);\n                }\n                if (!element.style.width) {\n                    const size = (element.getAttribute(\"data-size\") || element.getAttribute(\"data-origin\") || \"\").split(\",\");\n                    plguin.onModifyMode.call(this, element, null);\n                    plguin.applySize.call(this, size[0], size[1]);\n                }\n                this.context.resizing._resize_plugin = _resize_plugin;\n            }\n            if (typeof uploadEventHandler === \"function\") uploadEventHandler(element, dataIndex, state, info, --context._uploadFileLength < 0 ? 0 : context._uploadFileLength, this);\n        },\n        /**\n         * @description Delete info object at \"_infoList\"\n         * @param {String} pluginName Plugin name \n         * @param {Number} index index of info object (this.context[pluginName]._infoList[].index)\n         * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n         */ deleteInfo: function(pluginName, index, uploadEventHandler) {\n            if (index >= 0) {\n                const infoList = this.context[pluginName]._infoList;\n                for(let i = 0, len = infoList.length; i < len; i++){\n                    if (index === infoList[i].index) {\n                        infoList.splice(i, 1);\n                        if (typeof uploadEventHandler === \"function\") uploadEventHandler(null, index, \"delete\", null, 0, this);\n                        return;\n                    }\n                }\n            }\n        },\n        /**\n         * @description Reset info object and \"_infoList = []\", \"_infoIndex = 0\"\n         * @param {String} pluginName Plugin name \n         * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n         */ resetInfo: function(pluginName, uploadEventHandler) {\n            const context = this.context[pluginName];\n            if (typeof uploadEventHandler === \"function\") {\n                const infoList = context._infoList;\n                for(let i = 0, len = infoList.length; i < len; i++){\n                    uploadEventHandler(null, infoList[i].index, \"delete\", null, 0, this);\n                }\n            }\n            context._infoList = [];\n            context._infoIndex = 0;\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"fileManager\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: fileManager\n        });\n    }\n    return fileManager;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/fileManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/modules/resizing.js":
/*!****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/resizing.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( false ? 0 : void 0, function(window1, noGlobal) {\n    const resizing = {\n        name: \"resizing\",\n        /**\n         * @description Constructor\n         * Require context properties when resizing module\n            inputX: Element,\n            inputY: Element,\n            _container: null,\n            _cover: null,\n            _element: null,\n            _element_w: 1,\n            _element_h: 1,\n            _element_l: 0,\n            _element_t: 0,\n            _defaultSizeX: 'auto',\n            _defaultSizeY: 'auto',\n            _origin_w: core.options.imageWidth === 'auto' ? '' : core.options.imageWidth,\n            _origin_h: core.options.imageHeight === 'auto' ? '' : core.options.imageHeight,\n            _proportionChecked: true,\n            // -- select function --\n            _resizing: core.options.imageResizing,\n            _resizeDotHide: !core.options.imageHeightShow,\n            _rotation: core.options.imageRotation,\n            _onlyPercentage: core.options.imageSizeOnlyPercentage,\n            _ratio: false,\n            _ratioX: 1,\n            _ratioY: 1\n            _captionShow: true,\n            // -- when used caption (_captionShow: true) --\n            _caption: null,\n            _captionChecked: false,\n            captionCheckEl: null,\n         * @param {Object} core Core object \n         */ add: function(core) {\n            const icons = core.icons;\n            const context = core.context;\n            context.resizing = {\n                _resizeClientX: 0,\n                _resizeClientY: 0,\n                _resize_plugin: \"\",\n                _resize_w: 0,\n                _resize_h: 0,\n                _origin_w: 0,\n                _origin_h: 0,\n                _rotateVertical: false,\n                _resize_direction: \"\",\n                _move_path: null,\n                _isChange: false,\n                alignIcons: {\n                    basic: icons.align_justify,\n                    left: icons.align_left,\n                    right: icons.align_right,\n                    center: icons.align_center\n                }\n            };\n            /** resize controller, button */ let resize_div_container = this.setController_resize(core);\n            context.resizing.resizeContainer = resize_div_container;\n            context.resizing.resizeDiv = resize_div_container.querySelector(\".se-modal-resize\");\n            context.resizing.resizeDot = resize_div_container.querySelector(\".se-resize-dot\");\n            context.resizing.resizeDisplay = resize_div_container.querySelector(\".se-resize-display\");\n            let resize_button = this.setController_button(core);\n            context.resizing.resizeButton = resize_button;\n            let resize_handles = context.resizing.resizeHandles = context.resizing.resizeDot.querySelectorAll(\"span\");\n            context.resizing.resizeButtonGroup = resize_button.querySelector(\"._se_resizing_btn_group\");\n            context.resizing.rotationButtons = resize_button.querySelectorAll(\"._se_resizing_btn_group ._se_rotation\");\n            context.resizing.percentageButtons = resize_button.querySelectorAll(\"._se_resizing_btn_group ._se_percentage\");\n            context.resizing.alignMenu = resize_button.querySelector(\".se-resizing-align-list\");\n            context.resizing.alignMenuList = context.resizing.alignMenu.querySelectorAll(\"button\");\n            context.resizing.alignButton = resize_button.querySelector(\"._se_resizing_align_button\");\n            context.resizing.autoSizeButton = resize_button.querySelector(\"._se_resizing_btn_group ._se_auto_size\");\n            context.resizing.captionButton = resize_button.querySelector(\"._se_resizing_caption_button\");\n            /** add event listeners */ resize_div_container.addEventListener(\"mousedown\", function(e) {\n                e.preventDefault();\n            });\n            resize_handles[0].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[1].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[2].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[3].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[4].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[5].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[6].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[7].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_button.addEventListener(\"click\", this.onClick_resizeButton.bind(core));\n            /** append html */ context.element.relative.appendChild(resize_div_container);\n            context.element.relative.appendChild(resize_button);\n            /** empty memory */ resize_div_container = null, resize_button = null, resize_handles = null;\n        },\n        /** resize controller, button (image, iframe, video) */ setController_resize: function(core) {\n            const resize_container = core.util.createElement(\"DIV\");\n            resize_container.className = \"se-controller se-resizing-container\";\n            resize_container.style.display = \"none\";\n            resize_container.innerHTML = \"\" + '<div class=\"se-modal-resize\"></div>' + '<div class=\"se-resize-dot\">' + '<span class=\"tl\"></span>' + '<span class=\"tr\"></span>' + '<span class=\"bl\"></span>' + '<span class=\"br\"></span>' + '<span class=\"lw\"></span>' + '<span class=\"th\"></span>' + '<span class=\"rw\"></span>' + '<span class=\"bh\"></span>' + '<div class=\"se-resize-display\"></div>' + \"</div>\";\n            return resize_container;\n        },\n        setController_button: function(core) {\n            const lang = core.lang;\n            const icons = core.icons;\n            const resize_button = core.util.createElement(\"DIV\");\n            resize_button.className = \"se-controller se-controller-resizing\";\n            resize_button.innerHTML = \"\" + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"se-btn-group _se_resizing_btn_group\">' + '<button type=\"button\" data-command=\"percent\" data-value=\"1\" class=\"se-tooltip _se_percentage\">' + \"<span>100%</span>\" + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize100 + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"percent\" data-value=\"0.75\" class=\"se-tooltip _se_percentage\">' + \"<span>75%</span>\" + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize75 + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"percent\" data-value=\"0.5\" class=\"se-tooltip _se_percentage\">' + \"<span>50%</span>\" + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize50 + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"auto\" class=\"se-btn se-tooltip _se_auto_size\">' + icons.auto_size + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.autoSize + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"rotate\" data-value=\"-90\" class=\"se-btn se-tooltip _se_rotation\">' + icons.rotate_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.rotateLeft + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"rotate\" data-value=\"90\" class=\"se-btn se-tooltip _se_rotation\">' + icons.rotate_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.rotateRight + \"</span></span>\" + \"</button>\" + \"</div>\" + '<div class=\"se-btn-group\" style=\"padding-top: 0;\">' + '<button type=\"button\" data-command=\"mirror\" data-value=\"h\" class=\"se-btn se-tooltip\">' + icons.mirror_horizontal + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mirrorHorizontal + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"mirror\" data-value=\"v\" class=\"se-btn se-tooltip\">' + icons.mirror_vertical + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mirrorVertical + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"onalign\" class=\"se-btn se-tooltip _se_resizing_align_button\">' + icons.align_justify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.toolbar.align + \"</span></span>\" + \"</button>\" + '<div class=\"se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"basic\">' + icons.align_justify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.basic + \"</span></span>\" + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"left\">' + icons.align_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.left + \"</span></span>\" + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"center\">' + icons.align_center + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.center + \"</span></span>\" + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"right\">' + icons.align_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.right + \"</span></span>\" + \"</button></li>\" + \"</ul>\" + \"</div>\" + \"</div>\" + '<button type=\"button\" data-command=\"caption\" class=\"se-btn se-tooltip _se_resizing_caption_button\">' + icons.caption + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.caption + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"revert\" class=\"se-btn se-tooltip\">' + icons.revert + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.revertButton + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"update\" class=\"se-btn se-tooltip\">' + icons.modify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + \"</span></span>\" + \"</button>\" + \"</div>\";\n            return resize_button;\n        },\n        /**\n         * @description Gets the width size\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {Element} element Target element\n         * @param {Element} cover Cover element (FIGURE)\n         * @param {Element} container Container element (DIV.se-component)\n         * @returns {String}\n         */ _module_getSizeX: function(contextPlugin, element, cover, container) {\n            if (!element) element = contextPlugin._element;\n            if (!cover) cover = contextPlugin._cover;\n            if (!container) container = contextPlugin._container;\n            if (!element) return \"\";\n            return !/%$/.test(element.style.width) ? element.style.width : (container && this.util.getNumber(container.style.width, 2) || 100) + \"%\";\n        },\n        /**\n         * @description Gets the height size\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {Element} element Target element\n         * @param {Element} cover Cover element (FIGURE)\n         * @param {Element} container Container element (DIV.se-component)\n         * @returns {String}\n         */ _module_getSizeY: function(contextPlugin, element, cover, container) {\n            if (!element) element = contextPlugin._element;\n            if (!cover) cover = contextPlugin._cover;\n            if (!container) container = contextPlugin._container;\n            if (!container || !cover) return element && element.style.height || \"\";\n            return this.util.getNumber(cover.style.paddingBottom, 0) > 0 && !this.context.resizing._rotateVertical ? cover.style.height : !/%$/.test(element.style.height) || !/%$/.test(element.style.width) ? element.style.height : (container && this.util.getNumber(container.style.height, 2) || 100) + \"%\";\n        },\n        /**\n         * @description Called at the \"openModify\" to put the size of the current target into the size input element.\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {Object} pluginObj Plugin object\n         */ _module_setModifyInputSize: function(contextPlugin, pluginObj) {\n            const percentageRotation = contextPlugin._onlyPercentage && this.context.resizing._rotateVertical;\n            contextPlugin.proportion.checked = contextPlugin._proportionChecked = contextPlugin._element.getAttribute(\"data-proportion\") !== \"false\";\n            let x = percentageRotation ? \"\" : this.plugins.resizing._module_getSizeX.call(this, contextPlugin);\n            if (x === contextPlugin._defaultSizeX) x = \"\";\n            if (contextPlugin._onlyPercentage) x = this.util.getNumber(x, 2);\n            contextPlugin.inputX.value = x;\n            pluginObj.setInputSize.call(this, \"x\");\n            if (!contextPlugin._onlyPercentage) {\n                let y = percentageRotation ? \"\" : this.plugins.resizing._module_getSizeY.call(this, contextPlugin);\n                if (y === contextPlugin._defaultSizeY) y = \"\";\n                if (contextPlugin._onlyPercentage) y = this.util.getNumber(y, 2);\n                contextPlugin.inputY.value = y;\n            }\n            contextPlugin.inputX.disabled = percentageRotation ? true : false;\n            contextPlugin.inputY.disabled = percentageRotation ? true : false;\n            contextPlugin.proportion.disabled = percentageRotation ? true : false;\n            pluginObj.setRatio.call(this);\n        },\n        /**\n         * @description It is called in \"setInputSize\" (input tag keyupEvent), \n         * checks the value entered in the input tag, \n         * calculates the ratio, and sets the calculated value in the input tag of the opposite size.\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {String} xy 'x': width, 'y': height\n         */ _module_setInputSize: function(contextPlugin, xy) {\n            if (contextPlugin._onlyPercentage) {\n                if (xy === \"x\" && contextPlugin.inputX.value > 100) contextPlugin.inputX.value = 100;\n                return;\n            }\n            if (contextPlugin.proportion.checked && contextPlugin._ratio && /\\d/.test(contextPlugin.inputX.value) && /\\d/.test(contextPlugin.inputY.value)) {\n                const xUnit = contextPlugin.inputX.value.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                const yUnit = contextPlugin.inputY.value.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                if (xUnit !== yUnit) return;\n                const dec = xUnit === \"%\" ? 2 : 0;\n                if (xy === \"x\") {\n                    contextPlugin.inputY.value = this.util.getNumber(contextPlugin._ratioY * this.util.getNumber(contextPlugin.inputX.value, dec), dec) + yUnit;\n                } else {\n                    contextPlugin.inputX.value = this.util.getNumber(contextPlugin._ratioX * this.util.getNumber(contextPlugin.inputY.value, dec), dec) + xUnit;\n                }\n            }\n        },\n        /**\n         * @description It is called in \"setRatio\" (input and proportionCheck tags changeEvent), \n         * checks the value of the input tag, calculates the ratio, and resets it in the input tag.\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         */ _module_setRatio: function(contextPlugin) {\n            const xValue = contextPlugin.inputX.value;\n            const yValue = contextPlugin.inputY.value;\n            if (contextPlugin.proportion.checked && /\\d+/.test(xValue) && /\\d+/.test(yValue)) {\n                const xUnit = xValue.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                const yUnit = yValue.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                if (xUnit !== yUnit) {\n                    contextPlugin._ratio = false;\n                } else if (!contextPlugin._ratio) {\n                    const x = this.util.getNumber(xValue, 0);\n                    const y = this.util.getNumber(yValue, 0);\n                    contextPlugin._ratio = true;\n                    contextPlugin._ratioX = x / y;\n                    contextPlugin._ratioY = y / x;\n                }\n            } else {\n                contextPlugin._ratio = false;\n            }\n        },\n        /**\n         * @description Revert size of element to origin size (plugin._origin_w, plugin._origin_h)\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         */ _module_sizeRevert: function(contextPlugin) {\n            if (contextPlugin._onlyPercentage) {\n                contextPlugin.inputX.value = contextPlugin._origin_w > 100 ? 100 : contextPlugin._origin_w;\n            } else {\n                contextPlugin.inputX.value = contextPlugin._origin_w;\n                contextPlugin.inputY.value = contextPlugin._origin_h;\n            }\n        },\n        /**\n         * @description Save the size data (element.setAttribute(\"data-size\"))\n         * Used at the \"setSize\" method\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         */ _module_saveCurrentSize: function(contextPlugin) {\n            const x = this.plugins.resizing._module_getSizeX.call(this, contextPlugin);\n            const y = this.plugins.resizing._module_getSizeY.call(this, contextPlugin);\n            // add too width, height attribute\n            contextPlugin._element.setAttribute(\"width\", x.replace(\"px\", \"\"));\n            contextPlugin._element.setAttribute(\"height\", y.replace(\"px\", \"\"));\n            contextPlugin._element.setAttribute(\"data-size\", x + \",\" + y);\n            if (!!contextPlugin._videoRatio) contextPlugin._videoRatio = y;\n        },\n        /**\n         * @description Call the resizing module\n         * @param {Element} targetElement Resizing target element\n         * @param {string} plugin Plugin name\n         * @returns {Object} Size of resizing div {w, h, t, l}\n         */ call_controller_resize: function(targetElement, plugin) {\n            const contextResizing = this.context.resizing;\n            const contextPlugin = this.context[plugin];\n            contextResizing._resize_plugin = plugin;\n            const resizeContainer = contextResizing.resizeContainer;\n            const resizeDiv = contextResizing.resizeDiv;\n            const offset = this.util.getOffset(targetElement, this.context.element.wysiwygFrame);\n            const isVertical = contextResizing._rotateVertical = /^(90|270)$/.test(Math.abs(targetElement.getAttribute(\"data-rotate\")).toString());\n            const w = isVertical ? targetElement.offsetHeight : targetElement.offsetWidth;\n            const h = isVertical ? targetElement.offsetWidth : targetElement.offsetHeight;\n            const t = offset.top;\n            const l = offset.left - this.context.element.wysiwygFrame.scrollLeft;\n            resizeContainer.style.top = t + \"px\";\n            resizeContainer.style.left = l + \"px\";\n            resizeContainer.style.width = w + \"px\";\n            resizeContainer.style.height = h + \"px\";\n            resizeDiv.style.top = \"0px\";\n            resizeDiv.style.left = \"0px\";\n            resizeDiv.style.width = w + \"px\";\n            resizeDiv.style.height = h + \"px\";\n            let align = targetElement.getAttribute(\"data-align\") || \"basic\";\n            align = align === \"none\" ? \"basic\" : align;\n            // text\n            const container = this.util.getParentElement(targetElement, this.util.isComponent);\n            const cover = this.util.getParentElement(targetElement, \"FIGURE\");\n            const displayX = this.plugins.resizing._module_getSizeX.call(this, contextPlugin, targetElement, cover, container) || \"auto\";\n            const displayY = contextPlugin._onlyPercentage && plugin === \"image\" ? \"\" : \", \" + (this.plugins.resizing._module_getSizeY.call(this, contextPlugin, targetElement, cover, container) || \"auto\");\n            this.util.changeTxt(contextResizing.resizeDisplay, this.lang.dialogBox[align] + \" (\" + displayX + displayY + \")\");\n            // resizing display\n            contextResizing.resizeButtonGroup.style.display = contextPlugin._resizing ? \"\" : \"none\";\n            const resizeDotShow = contextPlugin._resizing && !contextPlugin._resizeDotHide && !contextPlugin._onlyPercentage ? \"flex\" : \"none\";\n            const resizeHandles = contextResizing.resizeHandles;\n            for(let i = 0, len = resizeHandles.length; i < len; i++){\n                resizeHandles[i].style.display = resizeDotShow;\n            }\n            if (contextPlugin._resizing) {\n                const rotations = contextResizing.rotationButtons;\n                rotations[0].style.display = rotations[1].style.display = contextPlugin._rotation ? \"\" : \"none\";\n            }\n            // align icon\n            if (contextPlugin._alignHide) {\n                contextResizing.alignButton.style.display = \"none\";\n            } else {\n                contextResizing.alignButton.style.display = \"\";\n                const alignList = contextResizing.alignMenuList;\n                this.util.changeElement(contextResizing.alignButton.firstElementChild, contextResizing.alignIcons[align]);\n                for(let i = 0, len = alignList.length; i < len; i++){\n                    if (alignList[i].getAttribute(\"data-value\") === align) this.util.addClass(alignList[i], \"on\");\n                    else this.util.removeClass(alignList[i], \"on\");\n                }\n            }\n            // percentage active\n            const pButtons = contextResizing.percentageButtons;\n            const value = /%$/.test(targetElement.style.width) && /%$/.test(container.style.width) ? this.util.getNumber(container.style.width, 0) / 100 + \"\" : \"\";\n            for(let i = 0, len = pButtons.length; i < len; i++){\n                if (pButtons[i].getAttribute(\"data-value\") === value) {\n                    this.util.addClass(pButtons[i], \"active\");\n                } else {\n                    this.util.removeClass(pButtons[i], \"active\");\n                }\n            }\n            // caption display, active\n            if (!contextPlugin._captionShow) {\n                contextResizing.captionButton.style.display = \"none\";\n            } else {\n                contextResizing.captionButton.style.display = \"\";\n                if (this.util.getChildElement(targetElement.parentNode, \"figcaption\")) {\n                    this.util.addClass(contextResizing.captionButton, \"active\");\n                    contextPlugin._captionChecked = true;\n                } else {\n                    this.util.removeClass(contextResizing.captionButton, \"active\");\n                    contextPlugin._captionChecked = false;\n                }\n            }\n            resizeContainer.style.display = \"block\";\n            const addOffset = {\n                left: 0,\n                top: 50\n            };\n            if (this.options.iframe) {\n                addOffset.left -= this.context.element.wysiwygFrame.parentElement.offsetLeft;\n                addOffset.top -= this.context.element.wysiwygFrame.parentElement.offsetTop;\n            }\n            this.setControllerPosition(contextResizing.resizeButton, resizeContainer, \"bottom\", addOffset);\n            const onControlsOff = function() {\n                this.util.setDisabledButtons.call(this.util, false, this.resizingDisabledButtons);\n                this.history._resetCachingButton();\n            };\n            this.controllersOn(resizeContainer, contextResizing.resizeButton, onControlsOff.bind(this), targetElement, plugin);\n            this.util.setDisabledButtons(true, this.resizingDisabledButtons);\n            contextResizing._resize_w = w;\n            contextResizing._resize_h = h;\n            const originSize = (targetElement.getAttribute(\"origin-size\") || \"\").split(\",\");\n            contextResizing._origin_w = originSize[0] || targetElement.naturalWidth;\n            contextResizing._origin_h = originSize[1] || targetElement.naturalHeight;\n            return {\n                w: w,\n                h: h,\n                t: t,\n                l: l\n            };\n        },\n        _closeAlignMenu: null,\n        /**\n         * @description Open align submenu of module\n         */ openAlignMenu: function() {\n            const alignButton = this.context.resizing.alignButton;\n            this.util.addClass(alignButton, \"on\");\n            this.context.resizing.alignMenu.style.top = alignButton.offsetTop + alignButton.offsetHeight + \"px\";\n            this.context.resizing.alignMenu.style.left = alignButton.offsetLeft - alignButton.offsetWidth / 2 + \"px\";\n            this.context.resizing.alignMenu.style.display = \"block\";\n            this.plugins.resizing._closeAlignMenu = (function() {\n                this.util.removeClass(this.context.resizing.alignButton, \"on\");\n                this.context.resizing.alignMenu.style.display = \"none\";\n                this.removeDocEvent(\"click\", this.plugins.resizing._closeAlignMenu);\n                this.plugins.resizing._closeAlignMenu = null;\n            }).bind(this);\n            this.addDocEvent(\"click\", this.plugins.resizing._closeAlignMenu);\n        },\n        /**\n         * @description Click event of resizing toolbar\n         * Performs the action of the clicked toolbar button.\n         * @param {MouseEvent} e Event object\n         */ onClick_resizeButton: function(e) {\n            e.stopPropagation();\n            const target = e.target;\n            const command = target.getAttribute(\"data-command\") || target.parentNode.getAttribute(\"data-command\");\n            if (!command) return;\n            const value = target.getAttribute(\"data-value\") || target.parentNode.getAttribute(\"data-value\");\n            const pluginName = this.context.resizing._resize_plugin;\n            const currentContext = this.context[pluginName];\n            const contextEl = currentContext._element;\n            const currentModule = this.plugins[pluginName];\n            e.preventDefault();\n            if (typeof this.plugins.resizing._closeAlignMenu === \"function\") {\n                this.plugins.resizing._closeAlignMenu();\n                if (command === \"onalign\") return;\n            }\n            switch(command){\n                case \"auto\":\n                    this.plugins.resizing.resetTransform.call(this, contextEl);\n                    currentModule.setAutoSize.call(this);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"percent\":\n                    let percentY = this.plugins.resizing._module_getSizeY.call(this, currentContext);\n                    if (this.context.resizing._rotateVertical) {\n                        const percentage = contextEl.getAttribute(\"data-percentage\");\n                        if (percentage) percentY = percentage.split(\",\")[1];\n                    }\n                    this.plugins.resizing.resetTransform.call(this, contextEl);\n                    currentModule.setPercentSize.call(this, value * 100, this.util.getNumber(percentY, 0) === null || !/%$/.test(percentY) ? \"\" : percentY);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"mirror\":\n                    const r = contextEl.getAttribute(\"data-rotate\") || \"0\";\n                    let x = contextEl.getAttribute(\"data-rotateX\") || \"\";\n                    let y = contextEl.getAttribute(\"data-rotateY\") || \"\";\n                    if (value === \"h\" && !this.context.resizing._rotateVertical || value === \"v\" && this.context.resizing._rotateVertical) {\n                        y = y ? \"\" : \"180\";\n                    } else {\n                        x = x ? \"\" : \"180\";\n                    }\n                    contextEl.setAttribute(\"data-rotateX\", x);\n                    contextEl.setAttribute(\"data-rotateY\", y);\n                    this.plugins.resizing._setTransForm(contextEl, r, x, y);\n                    break;\n                case \"rotate\":\n                    const contextResizing = this.context.resizing;\n                    const slope = contextEl.getAttribute(\"data-rotate\") * 1 + value * 1;\n                    const deg = this._w.Math.abs(slope) >= 360 ? 0 : slope;\n                    contextEl.setAttribute(\"data-rotate\", deg);\n                    contextResizing._rotateVertical = /^(90|270)$/.test(this._w.Math.abs(deg).toString());\n                    this.plugins.resizing.setTransformSize.call(this, contextEl, null, null);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"onalign\":\n                    this.plugins.resizing.openAlignMenu.call(this);\n                    return;\n                case \"align\":\n                    const alignValue = value === \"basic\" ? \"none\" : value;\n                    currentModule.setAlign.call(this, alignValue, null, null, null);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"caption\":\n                    const caption = !currentContext._captionChecked;\n                    currentModule.openModify.call(this, true);\n                    currentContext._captionChecked = currentContext.captionCheckEl.checked = caption;\n                    currentModule.update_image.call(this, false, false, false);\n                    if (caption) {\n                        const captionText = this.util.getChildElement(currentContext._caption, function(current) {\n                            return current.nodeType === 3;\n                        });\n                        if (!captionText) {\n                            currentContext._caption.focus();\n                        } else {\n                            this.setRange(captionText, 0, captionText, captionText.textContent.length);\n                        }\n                        this.controllersOff();\n                    } else {\n                        this.selectComponent(contextEl, pluginName);\n                        currentModule.openModify.call(this, true);\n                    }\n                    break;\n                case \"revert\":\n                    currentModule.setOriginSize.call(this);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"update\":\n                    currentModule.openModify.call(this);\n                    this.controllersOff();\n                    break;\n                case \"delete\":\n                    currentModule.destroy.call(this);\n                    break;\n            }\n            // history stack\n            this.history.push(false);\n        },\n        /**\n         * @description Initialize the transform style (rotation) of the element.\n         * @param {Element} element Target element\n         */ resetTransform: function(element) {\n            const size = (element.getAttribute(\"data-size\") || element.getAttribute(\"data-origin\") || \"\").split(\",\");\n            this.context.resizing._rotateVertical = false;\n            element.style.maxWidth = \"\";\n            element.style.transform = \"\";\n            element.style.transformOrigin = \"\";\n            element.setAttribute(\"data-rotate\", \"\");\n            element.setAttribute(\"data-rotateX\", \"\");\n            element.setAttribute(\"data-rotateY\", \"\");\n            this.plugins[this.context.resizing._resize_plugin].setSize.call(this, size[0] ? size[0] : \"auto\", size[1] ? size[1] : \"\", true);\n        },\n        /**\n         * @description Set the transform style (rotation) of the element.\n         * @param {Element} element Target element\n         * @param {Number|null} width Element's width size\n         * @param {Number|null} height Element's height size\n         */ setTransformSize: function(element, width, height) {\n            let percentage = element.getAttribute(\"data-percentage\");\n            const isVertical = this.context.resizing._rotateVertical;\n            const deg = element.getAttribute(\"data-rotate\") * 1;\n            let transOrigin = \"\";\n            if (percentage && !isVertical) {\n                percentage = percentage.split(\",\");\n                if (percentage[0] === \"auto\" && percentage[1] === \"auto\") {\n                    this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this);\n                } else {\n                    this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this, percentage[0], percentage[1]);\n                }\n            } else {\n                const cover = this.util.getParentElement(element, \"FIGURE\");\n                const offsetW = width || element.offsetWidth;\n                const offsetH = height || element.offsetHeight;\n                const w = (isVertical ? offsetH : offsetW) + \"px\";\n                const h = (isVertical ? offsetW : offsetH) + \"px\";\n                this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this);\n                this.plugins[this.context.resizing._resize_plugin].setSize.call(this, offsetW + \"px\", offsetH + \"px\", true);\n                cover.style.width = w;\n                cover.style.height = !!this.context[this.context.resizing._resize_plugin]._caption ? \"\" : h;\n                if (isVertical) {\n                    let transW = offsetW / 2 + \"px \" + offsetW / 2 + \"px 0\";\n                    let transH = offsetH / 2 + \"px \" + offsetH / 2 + \"px 0\";\n                    transOrigin = deg === 90 || deg === -270 ? transH : transW;\n                }\n            }\n            element.style.transformOrigin = transOrigin;\n            this.plugins.resizing._setTransForm(element, deg.toString(), element.getAttribute(\"data-rotateX\") || \"\", element.getAttribute(\"data-rotateY\") || \"\");\n            if (isVertical) element.style.maxWidth = \"none\";\n            else element.style.maxWidth = \"\";\n            this.plugins.resizing.setCaptionPosition.call(this, element);\n        },\n        _setTransForm: function(element, r, x, y) {\n            let width = (element.offsetWidth - element.offsetHeight) * (/-/.test(r) ? 1 : -1);\n            let translate = \"\";\n            if (/[1-9]/.test(r) && (x || y)) {\n                translate = x ? \"Y\" : \"X\";\n                switch(r){\n                    case \"90\":\n                        translate = x && y ? \"X\" : y ? translate : \"\";\n                        break;\n                    case \"270\":\n                        width *= -1;\n                        translate = x && y ? \"Y\" : x ? translate : \"\";\n                        break;\n                    case \"-90\":\n                        translate = x && y ? \"Y\" : x ? translate : \"\";\n                        break;\n                    case \"-270\":\n                        width *= -1;\n                        translate = x && y ? \"X\" : y ? translate : \"\";\n                        break;\n                    default:\n                        translate = \"\";\n                }\n            }\n            if (r % 180 === 0) {\n                element.style.maxWidth = \"\";\n            }\n            element.style.transform = \"rotate(\" + r + \"deg)\" + (x ? \" rotateX(\" + x + \"deg)\" : \"\") + (y ? \" rotateY(\" + y + \"deg)\" : \"\") + (translate ? \" translate\" + translate + \"(\" + width + \"px)\" : \"\");\n        },\n        /**\n         * @description The position of the caption is set automatically.\n         * @param {Element} element Target element (not caption element)\n         */ setCaptionPosition: function(element) {\n            const figcaption = this.util.getChildElement(this.util.getParentElement(element, \"FIGURE\"), \"FIGCAPTION\");\n            if (figcaption) {\n                figcaption.style.marginTop = (this.context.resizing._rotateVertical ? element.offsetWidth - element.offsetHeight : 0) + \"px\";\n            }\n        },\n        /**\n         * @description Mouse down event of resize handles\n         * @param {MouseEvent} e Event object \n         */ onMouseDown_resize_handle: function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            const contextResizing = this.context.resizing;\n            const direction = contextResizing._resize_direction = e.target.classList[0];\n            contextResizing._resizeClientX = e.clientX;\n            contextResizing._resizeClientY = e.clientY;\n            this.context.element.resizeBackground.style.display = \"block\";\n            contextResizing.resizeButton.style.display = \"none\";\n            contextResizing.resizeDiv.style.float = /l/.test(direction) ? \"right\" : /r/.test(direction) ? \"left\" : \"none\";\n            const closureFunc_bind = (function closureFunc(e) {\n                if (e.type === \"keydown\" && e.keyCode !== 27) return;\n                const change = contextResizing._isChange;\n                contextResizing._isChange = false;\n                this.removeDocEvent(\"mousemove\", resizing_element_bind);\n                this.removeDocEvent(\"mouseup\", closureFunc_bind);\n                this.removeDocEvent(\"keydown\", closureFunc_bind);\n                if (e.type === \"keydown\") {\n                    this.controllersOff();\n                    this.context.element.resizeBackground.style.display = \"none\";\n                    this.plugins[this.context.resizing._resize_plugin].init.call(this);\n                } else {\n                    // element resize\n                    this.plugins.resizing.cancel_controller_resize.call(this, direction);\n                    // history stack\n                    if (change) this.history.push(false);\n                }\n            }).bind(this);\n            const resizing_element_bind = this.plugins.resizing.resizing_element.bind(this, contextResizing, direction, this.context[contextResizing._resize_plugin]);\n            this.addDocEvent(\"mousemove\", resizing_element_bind);\n            this.addDocEvent(\"mouseup\", closureFunc_bind);\n            this.addDocEvent(\"keydown\", closureFunc_bind);\n        },\n        /**\n         * @description Mouse move event after call \"onMouseDown_resize_handle\" of resize handles\n         * The size of the module's \"div\" is adjusted according to the mouse move event.\n         * @param {Object} contextResizing \"core.context.resizing\" object (binding argument)\n         * @param {String} direction Direction (\"tl\", \"tr\", \"bl\", \"br\", \"lw\", \"th\", \"rw\", \"bh\") (binding argument)\n         * @param {Object} plugin \"core.context[currentPlugin]\" object (binding argument)\n         * @param {MouseEvent} e Event object\n         */ resizing_element: function(contextResizing, direction, plugin, e) {\n            const clientX = e.clientX;\n            const clientY = e.clientY;\n            let resultW = plugin._element_w;\n            let resultH = plugin._element_h;\n            const w = plugin._element_w + (/r/.test(direction) ? clientX - contextResizing._resizeClientX : contextResizing._resizeClientX - clientX);\n            const h = plugin._element_h + (/b/.test(direction) ? clientY - contextResizing._resizeClientY : contextResizing._resizeClientY - clientY);\n            const wh = plugin._element_h / plugin._element_w * w;\n            if (/t/.test(direction)) contextResizing.resizeDiv.style.top = plugin._element_h - (/h/.test(direction) ? h : wh) + \"px\";\n            if (/l/.test(direction)) contextResizing.resizeDiv.style.left = plugin._element_w - w + \"px\";\n            if (/r|l/.test(direction)) {\n                contextResizing.resizeDiv.style.width = w + \"px\";\n                resultW = w;\n            }\n            if (/^(t|b)[^h]$/.test(direction)) {\n                contextResizing.resizeDiv.style.height = wh + \"px\";\n                resultH = wh;\n            } else if (/^(t|b)h$/.test(direction)) {\n                contextResizing.resizeDiv.style.height = h + \"px\";\n                resultH = h;\n            }\n            contextResizing._resize_w = resultW;\n            contextResizing._resize_h = resultH;\n            this.util.changeTxt(contextResizing.resizeDisplay, this._w.Math.round(resultW) + \" x \" + this._w.Math.round(resultH));\n            contextResizing._isChange = true;\n        },\n        /**\n         * @description Resize the element to the size of the \"div\" adjusted in the \"resizing_element\" method.\n         * Called at the mouse-up event registered in \"onMouseDown_resize_handle\".\n         * @param {String} direction Direction (\"tl\", \"tr\", \"bl\", \"br\", \"lw\", \"th\", \"rw\", \"bh\")\n         */ cancel_controller_resize: function(direction) {\n            const isVertical = this.context.resizing._rotateVertical;\n            this.controllersOff();\n            this.context.element.resizeBackground.style.display = \"none\";\n            let w = this._w.Math.round(isVertical ? this.context.resizing._resize_h : this.context.resizing._resize_w);\n            let h = this._w.Math.round(isVertical ? this.context.resizing._resize_w : this.context.resizing._resize_h);\n            if (!isVertical && !/%$/.test(w)) {\n                const padding = 16;\n                const limit = this.context.element.wysiwygFrame.clientWidth - padding * 2 - 2;\n                if (this.util.getNumber(w, 0) > limit) {\n                    h = this._w.Math.round(h / w * limit);\n                    w = limit;\n                }\n            }\n            const pluginName = this.context.resizing._resize_plugin;\n            this.plugins[pluginName].setSize.call(this, w, h, false, direction);\n            if (isVertical) this.plugins.resizing.setTransformSize.call(this, this.context[this.context.resizing._resize_plugin]._element, w, h);\n            this.selectComponent(this.context[pluginName]._element, pluginName);\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"resizing\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: resizing\n        });\n    }\n    return resizing;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/modules/resizing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/align.js":
/*!*************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/align.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"align\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const icons = core.icons;\n        const context = core.context;\n        context.align = {\n            targetButton: targetElement,\n            _itemMenu: null,\n            _alignList: null,\n            currentAlign: \"\",\n            defaultDir: core.options.rtl ? \"right\" : \"left\",\n            icons: {\n                justify: icons.align_justify,\n                left: icons.align_left,\n                right: icons.align_right,\n                center: icons.align_center\n            }\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = context.align._itemMenu = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.align._alignList = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const listDiv = core.util.createElement(\"DIV\");\n        const alignItems = core.options.alignItems;\n        let html = \"\";\n        for(let i = 0, item, text; i < alignItems.length; i++){\n            item = alignItems[i];\n            text = lang.toolbar[\"align\" + item.charAt(0).toUpperCase() + item.slice(1)];\n            html += \"<li>\" + '<button type=\"button\" class=\"se-btn-list se-btn-align\" data-value=\"' + item + '\" title=\"' + text + '\" aria-label=\"' + text + '\">' + '<span class=\"se-list-icon\">' + icons[\"align_\" + item] + \"</span>\" + text + \"</button>\" + \"</li>\";\n        }\n        listDiv.className = \"se-submenu se-list-layer se-list-align\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + html + \"</ul>\" + \"</div>\";\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        const alignContext = this.context.align;\n        const targetButton = alignContext.targetButton;\n        const target = targetButton.firstElementChild;\n        if (!element) {\n            this.util.changeElement(target, alignContext.icons[alignContext.defaultDir]);\n            targetButton.removeAttribute(\"data-focus\");\n        } else if (this.util.isFormatElement(element)) {\n            const textAlign = element.style.textAlign;\n            if (textAlign) {\n                this.util.changeElement(target, alignContext.icons[textAlign] || alignContext.icons[alignContext.defaultDir]);\n                targetButton.setAttribute(\"data-focus\", textAlign);\n                return true;\n            }\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const alignContext = this.context.align;\n        const alignList = alignContext._alignList;\n        const currentAlign = alignContext.targetButton.getAttribute(\"data-focus\") || alignContext.defaultDir;\n        if (currentAlign !== alignContext.currentAlign) {\n            for(let i = 0, len = alignList.length; i < len; i++){\n                if (currentAlign === alignList[i].getAttribute(\"data-value\")) {\n                    this.util.addClass(alignList[i], \"active\");\n                } else {\n                    this.util.removeClass(alignList[i], \"active\");\n                }\n            }\n            alignContext.currentAlign = currentAlign;\n        }\n    },\n    exchangeDir: function() {\n        const dir = this.options.rtl ? \"right\" : \"left\";\n        if (!this.context.align || this.context.align.defaultDir === dir) return;\n        this.context.align.defaultDir = dir;\n        let menu = this.context.align._itemMenu;\n        let leftBtn = menu.querySelector('[data-value=\"left\"]');\n        let rightBtn = menu.querySelector('[data-value=\"right\"]');\n        if (leftBtn && rightBtn) {\n            const lp = leftBtn.parentElement;\n            const rp = rightBtn.parentElement;\n            lp.appendChild(rightBtn);\n            rp.appendChild(leftBtn);\n        }\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let value = null;\n        while(!value && !/UL/i.test(target.tagName)){\n            value = target.getAttribute(\"data-value\");\n            target = target.parentNode;\n        }\n        if (!value) return;\n        const defaultDir = this.context.align.defaultDir;\n        const selectedFormsts = this.getSelectedElements();\n        for(let i = 0, len = selectedFormsts.length; i < len; i++){\n            this.util.setStyle(selectedFormsts[i], \"textAlign\", value === defaultDir ? \"\" : value);\n        }\n        this.effectNode = null;\n        this.submenuOff();\n        this.focus();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/align.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/font.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/font.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"font\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.font = {\n            targetText: targetElement.querySelector(\".txt\"),\n            targetTooltip: targetElement.parentNode.querySelector(\".se-tooltip-text\"),\n            _fontList: null,\n            currentFont: \"\"\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\".se-list-inner\").addEventListener(\"click\", this.pickup.bind(core));\n        context.font._fontList = listDiv.querySelectorAll(\"ul li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-font-family\";\n        let font, text, i, len;\n        let fontList = core.options.font;\n        let list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + \")</button></li>\";\n        for(i = 0, len = fontList.length; i < len; i++){\n            font = fontList[i];\n            text = font.split(\",\")[0];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + font + '\" data-txt=\"' + text + '\" title=\"' + text + '\" aria-label=\"' + text + '\" style=\"font-family:' + font + ';\">' + text + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        const target = this.context.font.targetText;\n        const tooltip = this.context.font.targetTooltip;\n        if (!element) {\n            const font = this.hasFocus ? this.wwComputedStyle.fontFamily : this.lang.toolbar.font;\n            this.util.changeTxt(target, font);\n            this.util.changeTxt(tooltip, this.hasFocus ? this.lang.toolbar.font + (font ? \" (\" + font + \")\" : \"\") : font);\n        } else if (element.style && element.style.fontFamily.length > 0) {\n            const selectFont = element.style.fontFamily.replace(/[\"']/g, \"\");\n            this.util.changeTxt(target, selectFont);\n            this.util.changeTxt(tooltip, this.lang.toolbar.font + \" (\" + selectFont + \")\");\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const fontContext = this.context.font;\n        const fontList = fontContext._fontList;\n        const currentFont = fontContext.targetText.textContent;\n        if (currentFont !== fontContext.currentFont) {\n            for(let i = 0, len = fontList.length; i < len; i++){\n                if (currentFont === (fontList[i].getAttribute(\"data-value\") || \"\").replace(/'|\"/g, \"\")) {\n                    this.util.addClass(fontList[i], \"active\");\n                } else {\n                    this.util.removeClass(fontList[i], \"active\");\n                }\n            }\n            fontContext.currentFont = currentFont;\n        }\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        let value = e.target.getAttribute(\"data-value\");\n        if (value) {\n            const newNode = this.util.createElement(\"SPAN\");\n            if (/[\\s\\d\\W]/.test(value) && !/^['\"].*['\"]$/.test(value)) {\n                value = '\"' + value + '\"';\n            }\n            newNode.style.fontFamily = value;\n            this.nodeChange(newNode, [\n                \"font-family\"\n            ], null, null);\n        } else {\n            this.nodeChange(null, [\n                \"font-family\"\n            ], [\n                \"span\"\n            ], true);\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/font.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/fontColor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/fontColor.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/_colorPicker */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"fontColor\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        core.addModule([\n            _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n        ]);\n        const context = core.context;\n        context.fontColor = {\n            previewEl: null,\n            colorInput: null,\n            colorList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        context.fontColor.colorInput = listDiv.querySelector(\"._se_color_picker_input\");\n        /** add event listeners */ context.fontColor.colorInput.addEventListener(\"keyup\", this.onChangeInput.bind(core));\n        listDiv.querySelector(\"._se_color_picker_submit\").addEventListener(\"click\", this.submit.bind(core));\n        listDiv.querySelector(\"._se_color_picker_remove\").addEventListener(\"click\", this.remove.bind(core));\n        listDiv.addEventListener(\"click\", this.pickup.bind(core));\n        context.fontColor.colorList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const colorArea = core.context.colorPicker.colorListHTML;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        listDiv.innerHTML = colorArea;\n        return listDiv;\n    },\n    /**\r\n     * @Override submenu\r\n     */ on: function() {\n        const contextPicker = this.context.colorPicker;\n        const contextFontColor = this.context.fontColor;\n        contextPicker._colorInput = contextFontColor.colorInput;\n        const color = this.wwComputedStyle.color;\n        contextPicker._defaultColor = color ? this.plugins.colorPicker.isHexColor(color) ? color : this.plugins.colorPicker.rgb2hex(color) : \"#333333\";\n        contextPicker._styleProperty = \"color\";\n        contextPicker._colorList = contextFontColor.colorList;\n        this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);\n    },\n    /**\r\n     * @Override _colorPicker\r\n     */ onChangeInput: function(e) {\n        this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);\n    },\n    submit: function() {\n        this.plugins.fontColor.applyColor.call(this, this.context.colorPicker._currentColor);\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.fontColor.applyColor.call(this, e.target.getAttribute(\"data-value\"));\n    },\n    remove: function() {\n        this.nodeChange(null, [\n            \"color\"\n        ], [\n            \"span\"\n        ], true);\n        this.submenuOff();\n    },\n    applyColor: function(color) {\n        if (!color) return;\n        const newNode = this.util.createElement(\"SPAN\");\n        newNode.style.color = color;\n        this.nodeChange(newNode, [\n            \"color\"\n        ], null, null);\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/fontColor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/fontSize.js":
/*!****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/fontSize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"fontSize\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.fontSize = {\n            targetText: targetElement.querySelector(\".txt\"),\n            _sizeList: null,\n            currentSize: \"\"\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.fontSize._sizeList = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-font-size\";\n        const sizeList = !option.fontSize ? [\n            8,\n            9,\n            10,\n            11,\n            12,\n            14,\n            16,\n            18,\n            20,\n            22,\n            24,\n            26,\n            28,\n            36,\n            48,\n            72\n        ] : option.fontSize;\n        let list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + \")</button></li>\";\n        for(let i = 0, unit = option.fontSizeUnit, len = sizeList.length, size; i < len; i++){\n            size = sizeList[i];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + size + unit + '\" title=\"' + size + unit + '\" aria-label=\"' + size + unit + '\" style=\"font-size:' + size + unit + ';\">' + size + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        if (!element) {\n            this.util.changeTxt(this.context.fontSize.targetText, this.hasFocus ? this._convertFontSize.call(this, this.options.fontSizeUnit, this.wwComputedStyle.fontSize) : this.lang.toolbar.fontSize);\n        } else if (element.style && element.style.fontSize.length > 0) {\n            this.util.changeTxt(this.context.fontSize.targetText, this._convertFontSize.call(this, this.options.fontSizeUnit, element.style.fontSize));\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const fontSizeContext = this.context.fontSize;\n        const sizeList = fontSizeContext._sizeList;\n        const currentSize = fontSizeContext.targetText.textContent;\n        if (currentSize !== fontSizeContext.currentSize) {\n            for(let i = 0, len = sizeList.length; i < len; i++){\n                if (currentSize === sizeList[i].getAttribute(\"data-value\")) {\n                    this.util.addClass(sizeList[i], \"active\");\n                } else {\n                    this.util.removeClass(sizeList[i], \"active\");\n                }\n            }\n            fontSizeContext.currentSize = currentSize;\n        }\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        const value = e.target.getAttribute(\"data-value\");\n        if (value) {\n            const newNode = this.util.createElement(\"SPAN\");\n            newNode.style.fontSize = value;\n            this.nodeChange(newNode, [\n                \"font-size\"\n            ], null, null);\n        } else {\n            this.nodeChange(null, [\n                \"font-size\"\n            ], [\n                \"span\"\n            ], true);\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/fontSize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/formatBlock.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/formatBlock.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"formatBlock\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.formatBlock = {\n            targetText: targetElement.querySelector(\".txt\"),\n            targetTooltip: targetElement.parentNode.querySelector(\".se-tooltip-text\"),\n            _formatList: null,\n            currentFormat: \"\"\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\"ul\").addEventListener(\"click\", this.pickUp.bind(core));\n        context.formatBlock._formatList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const lang_toolbar = core.lang.toolbar;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-format\";\n        const defaultFormats = [\n            \"p\",\n            \"div\",\n            \"blockquote\",\n            \"pre\",\n            \"h1\",\n            \"h2\",\n            \"h3\",\n            \"h4\",\n            \"h5\",\n            \"h6\"\n        ];\n        const formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for(let i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++){\n            format = formatList[i];\n            if (typeof format === \"string\" && defaultFormats.indexOf(format) > -1) {\n                tagName = format.toLowerCase();\n                command = tagName === \"blockquote\" ? \"range\" : tagName === \"pre\" ? \"free\" : \"replace\";\n                h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : \"\";\n                name = lang_toolbar[\"tag_\" + (h ? \"h\" : tagName)] + h;\n                className = \"\";\n                attrs = \"\";\n            } else {\n                tagName = format.tag.toLowerCase();\n                command = format.command;\n                name = format.name || tagName;\n                className = format.class;\n                attrs = className ? ' class=\"' + className + '\"' : \"\";\n            }\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + \"<\" + tagName + attrs + \">\" + name + \"</\" + tagName + \">\" + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        let formatTitle = this.lang.toolbar.formats;\n        const target = this.context.formatBlock.targetText;\n        if (!element) {\n            this.util.changeTxt(target, formatTitle);\n        } else if (this.util.isFormatElement(element)) {\n            const formatContext = this.context.formatBlock;\n            const formatList = formatContext._formatList;\n            const nodeName = element.nodeName.toLowerCase();\n            const className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [\n                \"\"\n            ])[0].trim();\n            for(let i = 0, len = formatList.length, f; i < len; i++){\n                f = formatList[i];\n                if (nodeName === f.getAttribute(\"data-value\") && className === f.getAttribute(\"data-class\")) {\n                    formatTitle = f.title;\n                    break;\n                }\n            }\n            this.util.changeTxt(target, formatTitle);\n            target.setAttribute(\"data-value\", nodeName);\n            target.setAttribute(\"data-class\", className);\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const formatContext = this.context.formatBlock;\n        const formatList = formatContext._formatList;\n        const target = formatContext.targetText;\n        const currentFormat = (target.getAttribute(\"data-value\") || \"\") + (target.getAttribute(\"data-class\") || \"\");\n        if (currentFormat !== formatContext.currentFormat) {\n            for(let i = 0, len = formatList.length, f; i < len; i++){\n                f = formatList[i];\n                if (currentFormat === f.getAttribute(\"data-value\") + f.getAttribute(\"data-class\")) {\n                    this.util.addClass(f, \"active\");\n                } else {\n                    this.util.removeClass(f, \"active\");\n                }\n            }\n            formatContext.currentFormat = currentFormat;\n        }\n    },\n    pickUp: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = null, value = null, tag = null, className = \"\";\n        while(!command && !/UL/i.test(target.tagName)){\n            command = target.getAttribute(\"data-command\");\n            value = target.getAttribute(\"data-value\");\n            className = target.getAttribute(\"data-class\");\n            if (command) {\n                tag = target.firstChild;\n                break;\n            }\n            target = target.parentNode;\n        }\n        if (!command) return;\n        // blockquote\n        if (command === \"range\") {\n            const rangeElement = tag.cloneNode(false);\n            this.applyRangeFormatElement(rangeElement);\n        } else {\n            let range = this.getRange();\n            let selectedFormsts = this.getSelectedElementsAndComponents(false);\n            if (selectedFormsts.length === 0) {\n                range = this.getRange_addLine(range, null);\n                selectedFormsts = this.getSelectedElementsAndComponents(false);\n                if (selectedFormsts.length === 0) return;\n            }\n            const startOffset = range.startOffset;\n            const endOffset = range.endOffset;\n            const util = this.util;\n            let first = selectedFormsts[0];\n            let last = selectedFormsts[selectedFormsts.length - 1];\n            const firstPath = util.getNodePath(range.startContainer, first, null, null);\n            const lastPath = util.getNodePath(range.endContainer, last, null, null);\n            // remove selected list\n            const rlist = this.detachList(selectedFormsts, false);\n            if (rlist.sc) first = rlist.sc;\n            if (rlist.ec) last = rlist.ec;\n            // change format tag\n            this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            const modifiedFormsts = this.getSelectedElementsAndComponents(false);\n            // free format\n            if (command === \"free\") {\n                const len = modifiedFormsts.length - 1;\n                let parentNode = modifiedFormsts[len].parentNode;\n                let freeElement = tag.cloneNode(false);\n                const focusElement = freeElement;\n                for(let i = len, f, html, before, next, inner, isComp, first = true; i >= 0; i--){\n                    f = modifiedFormsts[i];\n                    if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n                    isComp = util.isComponent(f);\n                    html = isComp ? \"\" : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, \" \");\n                    before = util.getParentElement(f, function(current) {\n                        return current.parentNode === parentNode;\n                    });\n                    if (parentNode !== f.parentNode || isComp) {\n                        if (util.isFormatElement(parentNode)) {\n                            parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n                            parentNode = parentNode.parentNode;\n                        } else {\n                            parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n                            parentNode = f.parentNode;\n                        }\n                        next = freeElement.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += \"<BR>\" + next.innerHTML;\n                            util.removeItem(next);\n                        }\n                        freeElement = tag.cloneNode(false);\n                        first = true;\n                    }\n                    inner = freeElement.innerHTML;\n                    freeElement.innerHTML = (first || !html || !inner || /<br>$/i.test(html) ? html : html + \"<BR>\") + inner;\n                    if (i === 0) {\n                        parentNode.insertBefore(freeElement, f);\n                        next = f.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += \"<BR>\" + next.innerHTML;\n                            util.removeItem(next);\n                        }\n                        const prev = freeElement.previousSibling;\n                        if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n                            prev.innerHTML += \"<BR>\" + freeElement.innerHTML;\n                            util.removeItem(freeElement);\n                        }\n                    }\n                    if (!isComp) util.removeItem(f);\n                    if (!!html) first = false;\n                }\n                this.setRange(focusElement, 0, focusElement, 0);\n            } else {\n                for(let i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++){\n                    node = modifiedFormsts[i];\n                    if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [\n                        \"\"\n                    ])[0].trim() !== className) && !util.isComponent(node)) {\n                        newFormat = tag.cloneNode(false);\n                        util.copyFormatAttributes(newFormat, node);\n                        newFormat.innerHTML = node.innerHTML;\n                        node.parentNode.replaceChild(newFormat, node);\n                    }\n                    if (i === 0) first = newFormat || node;\n                    if (i === len - 1) last = newFormat || node;\n                    newFormat = null;\n                }\n                this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            }\n            // history stack\n            this.history.push(false);\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/formatBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/hiliteColor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/hiliteColor.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/_colorPicker */ \"(ssr)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"hiliteColor\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        core.addModule([\n            _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n        ]);\n        const context = core.context;\n        context.hiliteColor = {\n            previewEl: null,\n            colorInput: null,\n            colorList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        context.hiliteColor.colorInput = listDiv.querySelector(\"._se_color_picker_input\");\n        /** add event listeners */ context.hiliteColor.colorInput.addEventListener(\"keyup\", this.onChangeInput.bind(core));\n        listDiv.querySelector(\"._se_color_picker_submit\").addEventListener(\"click\", this.submit.bind(core));\n        listDiv.querySelector(\"._se_color_picker_remove\").addEventListener(\"click\", this.remove.bind(core));\n        listDiv.addEventListener(\"click\", this.pickup.bind(core));\n        context.hiliteColor.colorList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const colorArea = core.context.colorPicker.colorListHTML;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        listDiv.innerHTML = colorArea;\n        return listDiv;\n    },\n    /**\r\n     * @Override submenu\r\n     */ on: function() {\n        const contextPicker = this.context.colorPicker;\n        const contextHiliteColor = this.context.hiliteColor;\n        contextPicker._colorInput = contextHiliteColor.colorInput;\n        const color = this.wwComputedStyle.backgroundColor;\n        contextPicker._defaultColor = color ? this.plugins.colorPicker.isHexColor(color) ? color : this.plugins.colorPicker.rgb2hex(color) : \"#ffffff\";\n        contextPicker._styleProperty = \"backgroundColor\";\n        contextPicker._colorList = contextHiliteColor.colorList;\n        this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);\n    },\n    /**\r\n     * @Override _colorPicker\r\n     */ onChangeInput: function(e) {\n        this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);\n    },\n    submit: function() {\n        this.plugins.hiliteColor.applyColor.call(this, this.context.colorPicker._currentColor);\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.hiliteColor.applyColor.call(this, e.target.getAttribute(\"data-value\"));\n    },\n    remove: function() {\n        this.nodeChange(null, [\n            \"background-color\"\n        ], [\n            \"span\"\n        ], true);\n        this.submenuOff();\n    },\n    applyColor: function(color) {\n        if (!color) return;\n        const newNode = this.util.createElement(\"SPAN\");\n        newNode.style.backgroundColor = color;\n        this.nodeChange(newNode, [\n            \"background-color\"\n        ], null, null);\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/hiliteColor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/horizontalRule.js":
/*!**********************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/horizontalRule.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"horizontalRule\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        core.context.horizontalRule = {\n            currentHR: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\"ul\").addEventListener(\"click\", this.horizontalRulePick.bind(core));\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        const items = core.options.hrItems || [\n            {\n                name: lang.toolbar.hr_solid,\n                class: \"__se__solid\"\n            },\n            {\n                name: lang.toolbar.hr_dashed,\n                class: \"__se__dashed\"\n            },\n            {\n                name: lang.toolbar.hr_dotted,\n                class: \"__se__dotted\"\n            }\n        ];\n        let list = \"\";\n        for(let i = 0, len = items.length; i < len; i++){\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list btn_line\" data-command=\"horizontalRule\" data-value=\"' + items[i].class + '\" title=\"' + items[i].name + '\" aria-label=\"' + items[i].name + '\">' + \"<hr\" + (items[i].class ? ' class=\"' + items[i].class + '\"' : \"\") + (items[i].style ? ' style=\"' + items[i].style + '\"' : \"\") + \"/>\" + \"</button>\" + \"</li>\";\n        }\n        listDiv.className = \"se-submenu se-list-layer se-list-line\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + list + \"</ul>\" + \"</div>\";\n        return listDiv;\n    },\n    active: function(element) {\n        if (!element) {\n            if (this.util.hasClass(this.context.horizontalRule.currentHR, \"on\")) {\n                this.controllersOff();\n            }\n        } else if (/HR/i.test(element.nodeName)) {\n            this.context.horizontalRule.currentHR = element;\n            if (!this.util.hasClass(element, \"on\")) {\n                this.util.addClass(element, \"on\");\n                this.controllersOn(\"hr\", this.util.removeClass.bind(this.util, element, \"on\"));\n            }\n            return true;\n        }\n        return false;\n    },\n    appendHr: function(hrTemp) {\n        this.focus();\n        return this.insertComponent(hrTemp.cloneNode(false), false, true, false);\n    },\n    horizontalRulePick: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = target.getAttribute(\"data-command\");\n        while(!command && !/UL/i.test(target.tagName)){\n            target = target.parentNode;\n            command = target.getAttribute(\"data-command\");\n        }\n        if (!command) return;\n        const oNode = this.plugins.horizontalRule.appendHr.call(this, target.firstElementChild);\n        if (oNode) {\n            this.setRange(oNode, 0, oNode, 0);\n            this.submenuOff();\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/horizontalRule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/lineHeight.js":
/*!******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/lineHeight.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 20197 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"lineHeight\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.lineHeight = {\n            _sizeList: null,\n            currentSize: -1\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.lineHeight._sizeList = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        const sizeList = !option.lineHeights ? [\n            {\n                text: \"1\",\n                value: 1\n            },\n            {\n                text: \"1.15\",\n                value: 1.15\n            },\n            {\n                text: \"1.5\",\n                value: 1.5\n            },\n            {\n                text: \"2\",\n                value: 2\n            }\n        ] : option.lineHeights;\n        let list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + \")</button></li>\";\n        for(let i = 0, len = sizeList.length, size; i < len; i++){\n            size = sizeList[i];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + size.value + '\" title=\"' + size.text + '\" aria-label=\"' + size.text + '\">' + size.text + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const lineHeightContext = this.context.lineHeight;\n        const sizeList = lineHeightContext._sizeList;\n        const format = this.util.getFormatElement(this.getSelectionNode());\n        const currentSize = !format ? \"\" : format.style.lineHeight + \"\";\n        if (currentSize !== lineHeightContext.currentSize) {\n            for(let i = 0, len = sizeList.length; i < len; i++){\n                if (currentSize === sizeList[i].getAttribute(\"data-value\")) {\n                    this.util.addClass(sizeList[i], \"active\");\n                } else {\n                    this.util.removeClass(sizeList[i], \"active\");\n                }\n            }\n            lineHeightContext.currentSize = currentSize;\n        }\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        const value = e.target.getAttribute(\"data-value\") || \"\";\n        const formats = this.getSelectedElements();\n        for(let i = 0, len = formats.length; i < len; i++){\n            formats[i].style.lineHeight = value;\n        }\n        this.submenuOff();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/lineHeight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/list.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/list.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"list\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.list = {\n            targetButton: targetElement,\n            _list: null,\n            currentList: \"\",\n            icons: {\n                bullets: core.icons.list_bullets,\n                number: core.icons.list_number\n            }\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.list._list = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"OL\" title=\"' + lang.toolbar.orderList + '\" aria-label=\"' + lang.toolbar.orderList + '\">' + core.icons.list_number + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"UL\" title=\"' + lang.toolbar.unorderList + '\" aria-label=\"' + lang.toolbar.unorderList + '\">' + core.icons.list_bullets + \"</button></li>\" + \"</ul>\" + \"</div>\";\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        const button = this.context.list.targetButton;\n        const icon = button.firstElementChild;\n        const util = this.util;\n        if (util.isList(element)) {\n            const nodeName = element.nodeName;\n            button.setAttribute(\"data-focus\", nodeName);\n            util.addClass(button, \"active\");\n            if (/UL/i.test(nodeName)) {\n                util.changeElement(icon, this.context.list.icons.bullets);\n            } else {\n                util.changeElement(icon, this.context.list.icons.number);\n            }\n            return true;\n        } else {\n            button.removeAttribute(\"data-focus\");\n            util.changeElement(icon, this.context.list.icons.number);\n            util.removeClass(button, \"active\");\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const listContext = this.context.list;\n        const list = listContext._list;\n        const currentList = listContext.targetButton.getAttribute(\"data-focus\") || \"\";\n        if (currentList !== listContext.currentList) {\n            for(let i = 0, len = list.length; i < len; i++){\n                if (currentList === list[i].getAttribute(\"data-command\")) {\n                    this.util.addClass(list[i], \"active\");\n                } else {\n                    this.util.removeClass(list[i], \"active\");\n                }\n            }\n            listContext.currentList = currentList;\n        }\n    },\n    editList: function(command, selectedCells, detach) {\n        let range = this.getRange();\n        let selectedFormats = !selectedCells ? this.getSelectedElementsAndComponents(false) : selectedCells;\n        if (selectedFormats.length === 0) {\n            if (selectedCells) return;\n            range = this.getRange_addLine(range, null);\n            selectedFormats = this.getSelectedElementsAndComponents(false);\n            if (selectedFormats.length === 0) return;\n        }\n        const util = this.util;\n        util.sortByDepth(selectedFormats, true);\n        // merge\n        let firstSel = selectedFormats[0];\n        let lastSel = selectedFormats[selectedFormats.length - 1];\n        let topEl = (util.isListCell(firstSel) || util.isComponent(firstSel)) && !firstSel.previousElementSibling ? firstSel.parentNode.previousElementSibling : firstSel.previousElementSibling;\n        let bottomEl = (util.isListCell(lastSel) || util.isComponent(lastSel)) && !lastSel.nextElementSibling ? lastSel.parentNode.nextElementSibling : lastSel.nextElementSibling;\n        const isCollapsed = range.collapsed;\n        const originRange = {\n            sc: range.startContainer,\n            so: range.startContainer === range.endContainer && util.onlyZeroWidthSpace(range.startContainer) && range.startOffset === 0 && range.endOffset === 1 ? range.endOffset : range.startOffset,\n            ec: range.endContainer,\n            eo: range.endOffset\n        };\n        let afterRange = null;\n        let isRemove = true;\n        for(let i = 0, len = selectedFormats.length; i < len; i++){\n            if (!util.isList(util.getRangeFormatElement(selectedFormats[i], (function(current) {\n                return this.getRangeFormatElement(current) && current !== selectedFormats[i];\n            }).bind(util)))) {\n                isRemove = false;\n                break;\n            }\n        }\n        if (isRemove && (!topEl || firstSel.tagName !== topEl.tagName || command !== topEl.tagName.toUpperCase()) && (!bottomEl || lastSel.tagName !== bottomEl.tagName || command !== bottomEl.tagName.toUpperCase())) {\n            if (detach) {\n                for(let i = 0, len = selectedFormats.length; i < len; i++){\n                    for(let j = i - 1; j >= 0; j--){\n                        if (selectedFormats[j].contains(selectedFormats[i])) {\n                            selectedFormats.splice(i, 1);\n                            i--;\n                            len--;\n                            break;\n                        }\n                    }\n                }\n            }\n            const currentFormat = util.getRangeFormatElement(firstSel);\n            const cancel = currentFormat && currentFormat.tagName === command;\n            let rangeArr, tempList;\n            const passComponent = (function(current) {\n                return !this.isComponent(current);\n            }).bind(util);\n            if (!cancel) tempList = util.createElement(command);\n            for(let i = 0, len = selectedFormats.length, r, o; i < len; i++){\n                o = util.getRangeFormatElement(selectedFormats[i], passComponent);\n                if (!o || !util.isList(o)) continue;\n                if (!r) {\n                    r = o;\n                    rangeArr = {\n                        r: r,\n                        f: [\n                            util.getParentElement(selectedFormats[i], \"LI\")\n                        ]\n                    };\n                } else {\n                    if (r !== o) {\n                        if (detach && util.isListCell(o.parentNode)) {\n                            this.plugins.list._detachNested.call(this, rangeArr.f);\n                        } else {\n                            afterRange = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);\n                        }\n                        o = selectedFormats[i].parentNode;\n                        if (!cancel) tempList = util.createElement(command);\n                        r = o;\n                        rangeArr = {\n                            r: r,\n                            f: [\n                                util.getParentElement(selectedFormats[i], \"LI\")\n                            ]\n                        };\n                    } else {\n                        rangeArr.f.push(util.getParentElement(selectedFormats[i], \"LI\"));\n                    }\n                }\n                if (i === len - 1) {\n                    if (detach && util.isListCell(o.parentNode)) {\n                        this.plugins.list._detachNested.call(this, rangeArr.f);\n                    } else {\n                        afterRange = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);\n                    }\n                }\n            }\n        } else {\n            const topElParent = topEl ? topEl.parentNode : topEl;\n            const bottomElParent = bottomEl ? bottomEl.parentNode : bottomEl;\n            topEl = topElParent && !util.isWysiwygDiv(topElParent) && topElParent.nodeName === command ? topElParent : topEl;\n            bottomEl = bottomElParent && !util.isWysiwygDiv(bottomElParent) && bottomElParent.nodeName === command ? bottomElParent : bottomEl;\n            const mergeTop = topEl && topEl.tagName === command;\n            const mergeBottom = bottomEl && bottomEl.tagName === command;\n            let list = mergeTop ? topEl : util.createElement(command);\n            let firstList = null;\n            let lastList = null;\n            let topNumber = null;\n            let bottomNumber = null;\n            const passComponent = (function(current) {\n                return !this.isComponent(current) && !this.isList(current);\n            }).bind(util);\n            for(let i = 0, len = selectedFormats.length, newCell, fTag, isCell, next, originParent, nextParent, parentTag, siblingTag, rangeTag; i < len; i++){\n                fTag = selectedFormats[i];\n                if (fTag.childNodes.length === 0 && !util._isIgnoreNodeChange(fTag)) {\n                    util.removeItem(fTag);\n                    continue;\n                }\n                next = selectedFormats[i + 1];\n                originParent = fTag.parentNode;\n                nextParent = next ? next.parentNode : null;\n                isCell = util.isListCell(fTag);\n                rangeTag = util.isRangeFormatElement(originParent) ? originParent : null;\n                parentTag = isCell && !util.isWysiwygDiv(originParent) ? originParent.parentNode : originParent;\n                siblingTag = isCell && !util.isWysiwygDiv(originParent) ? !next || util.isListCell(parentTag) ? originParent : originParent.nextSibling : fTag.nextSibling;\n                newCell = util.createElement(\"LI\");\n                util.copyFormatAttributes(newCell, fTag);\n                if (i === 0 && originRange.sc === fTag) {\n                    originRange.sc = newCell;\n                }\n                if (i === len - 1 && originRange.ec === fTag) {\n                    originRange.ec = newCell;\n                }\n                if (util.isComponent(fTag)) {\n                    const isHR = /^HR$/i.test(fTag.nodeName);\n                    if (!isHR) newCell.innerHTML = \"<br>\";\n                    newCell.innerHTML += fTag.outerHTML;\n                    if (isHR) newCell.innerHTML += \"<br>\";\n                } else {\n                    const fChildren = fTag.childNodes;\n                    while(fChildren[0]){\n                        newCell.appendChild(fChildren[0]);\n                    }\n                }\n                list.appendChild(newCell);\n                if (!next) lastList = list;\n                if (!next || parentTag !== nextParent || util.isRangeFormatElement(siblingTag)) {\n                    if (!firstList) firstList = list;\n                    if ((!mergeTop || !next || parentTag !== nextParent) && !(next && util.isList(nextParent) && nextParent === originParent)) {\n                        if (list.parentNode !== parentTag) parentTag.insertBefore(list, siblingTag);\n                    }\n                }\n                util.removeItem(fTag);\n                if (mergeTop && topNumber === null) topNumber = list.children.length - 1;\n                if (next && (util.getRangeFormatElement(nextParent, passComponent) !== util.getRangeFormatElement(originParent, passComponent) || util.isList(nextParent) && util.isList(originParent) && util.getElementDepth(nextParent) !== util.getElementDepth(originParent))) {\n                    list = util.createElement(command);\n                }\n                if (rangeTag && rangeTag.children.length === 0) util.removeItem(rangeTag);\n            }\n            if (topNumber) {\n                firstList = firstList.children[topNumber];\n            }\n            if (mergeBottom) {\n                bottomNumber = list.children.length - 1;\n                list.innerHTML += bottomEl.innerHTML;\n                lastList = list.children[bottomNumber];\n                util.removeItem(bottomEl);\n            }\n        }\n        this.effectNode = null;\n        return !isCollapsed ? originRange : afterRange;\n    },\n    _detachNested: function(cells) {\n        const first = cells[0];\n        const last = cells[cells.length - 1];\n        const next = last.nextElementSibling;\n        const originList = first.parentNode;\n        const sibling = originList.parentNode.nextElementSibling;\n        const parentNode = originList.parentNode.parentNode;\n        for(let c = 0, cLen = cells.length; c < cLen; c++){\n            parentNode.insertBefore(cells[c], sibling);\n        }\n        if (next && originList.children.length > 0) {\n            const newList = originList.cloneNode(false);\n            const children = originList.childNodes;\n            const index = this.util.getPositionIndex(next);\n            while(children[index]){\n                newList.appendChild(children[index]);\n            }\n            last.appendChild(newList);\n        }\n        if (originList.children.length === 0) this.util.removeItem(originList);\n        this.util.mergeSameTags(parentNode);\n        const edge = this.util.getEdgeChildNodes(first, last);\n        return {\n            cc: first.parentNode,\n            sc: edge.sc,\n            ec: edge.ec\n        };\n    },\n    editInsideList: function(remove, selectedCells) {\n        selectedCells = !selectedCells ? this.getSelectedElements().filter((function(el) {\n            return this.isListCell(el);\n        }).bind(this.util)) : selectedCells;\n        const cellsLen = selectedCells.length;\n        if (cellsLen === 0 || !remove && !this.util.isListCell(selectedCells[0].previousElementSibling) && !this.util.isListCell(selectedCells[cellsLen - 1].nextElementSibling)) {\n            return {\n                sc: selectedCells[0],\n                so: 0,\n                ec: selectedCells[cellsLen - 1],\n                eo: 1\n            };\n        }\n        let originList = selectedCells[0].parentNode;\n        let lastCell = selectedCells[cellsLen - 1];\n        let range = null;\n        if (remove) {\n            if (originList !== lastCell.parentNode && this.util.isList(lastCell.parentNode.parentNode) && lastCell.nextElementSibling) {\n                lastCell = lastCell.nextElementSibling;\n                while(lastCell){\n                    selectedCells.push(lastCell);\n                    lastCell = lastCell.nextElementSibling;\n                }\n            }\n            range = this.plugins.list.editList.call(this, originList.nodeName.toUpperCase(), selectedCells, true);\n        } else {\n            let innerList = this.util.createElement(originList.nodeName);\n            let prev = selectedCells[0].previousElementSibling;\n            let next = lastCell.nextElementSibling;\n            const nodePath = {\n                s: null,\n                e: null,\n                sl: originList,\n                el: originList\n            };\n            for(let i = 0, len = cellsLen, c; i < len; i++){\n                c = selectedCells[i];\n                if (c.parentNode !== originList) {\n                    this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);\n                    originList = c.parentNode;\n                    innerList = this.util.createElement(originList.nodeName);\n                }\n                prev = c.previousElementSibling;\n                next = c.nextElementSibling;\n                innerList.appendChild(c);\n            }\n            this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);\n            const sc = this.util.getNodeFromPath(nodePath.s, nodePath.sl);\n            const ec = this.util.getNodeFromPath(nodePath.e, nodePath.el);\n            range = {\n                sc: sc,\n                so: 0,\n                ec: ec,\n                eo: ec.textContent.length\n            };\n        }\n        return range;\n    },\n    _insiedList: function(originList, innerList, prev, next, nodePath) {\n        let insertPrev = false;\n        if (prev && innerList.tagName === prev.tagName) {\n            const children = innerList.children;\n            while(children[0]){\n                prev.appendChild(children[0]);\n            }\n            innerList = prev;\n            insertPrev = true;\n        }\n        if (next && innerList.tagName === next.tagName) {\n            const children = next.children;\n            while(children[0]){\n                innerList.appendChild(children[0]);\n            }\n            const temp = next.nextElementSibling;\n            next.parentNode.removeChild(next);\n            next = temp;\n        }\n        if (!insertPrev) {\n            if (this.util.isListCell(prev)) {\n                originList = prev;\n                next = null;\n            }\n            originList.insertBefore(innerList, next);\n            if (!nodePath.s) {\n                nodePath.s = this.util.getNodePath(innerList.firstElementChild.firstChild, originList, null);\n                nodePath.sl = originList;\n            }\n            const slPath = originList.contains(nodePath.sl) ? this.util.getNodePath(nodePath.sl, originList) : null;\n            nodePath.e = this.util.getNodePath(innerList.lastElementChild.firstChild, originList, null);\n            nodePath.el = originList;\n            this.util.mergeSameTags(originList, [\n                nodePath.s,\n                nodePath.e,\n                slPath\n            ], false);\n            this.util.mergeNestedTags(originList);\n            if (slPath) nodePath.sl = this.util.getNodeFromPath(slPath, originList);\n        }\n        return innerList;\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = \"\";\n        while(!command && !/^UL$/i.test(target.tagName)){\n            command = target.getAttribute(\"data-command\");\n            target = target.parentNode;\n        }\n        if (!command) return;\n        const range = this.plugins.list.editList.call(this, command, null, false);\n        if (range) this.setRange(range.sc, range.so, range.ec, range.eo);\n        this.submenuOff();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL3N1Ym1lbnUvbGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQSxpRUFBZTtJQUNYQSxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsS0FBSyxTQUFVQyxJQUFJLEVBQUVDLGFBQWE7UUFDOUIsTUFBTUMsVUFBVUYsS0FBS0UsT0FBTztRQUM1QkEsUUFBUUMsSUFBSSxHQUFHO1lBQ1hDLGNBQWNIO1lBQ2RJLE9BQU87WUFDUEMsYUFBYTtZQUNiQyxPQUFPO2dCQUNIQyxTQUFTUixLQUFLTyxLQUFLLENBQUNFLFlBQVk7Z0JBQ2hDQyxRQUFRVixLQUFLTyxLQUFLLENBQUNJLFdBQVc7WUFDbEM7UUFDSjtRQUVBLGdCQUFnQixHQUNoQixJQUFJQyxVQUFVLElBQUksQ0FBQ0MsVUFBVSxDQUFDYjtRQUM5QixJQUFJYyxTQUFTRixRQUFRRyxhQUFhLENBQUM7UUFFbkMsd0JBQXdCLEdBQ3hCRCxPQUFPRSxnQkFBZ0IsQ0FBQyxTQUFTLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNsQjtRQUNsREUsUUFBUUMsSUFBSSxDQUFDRSxLQUFLLEdBQUdTLE9BQU9LLGdCQUFnQixDQUFDO1FBRTdDLDhCQUE4QixHQUM5Qm5CLEtBQUtvQixjQUFjLENBQUMsSUFBSSxDQUFDdkIsSUFBSSxFQUFFSSxlQUFlVztRQUU5QyxpQkFBaUIsR0FDakJBLFVBQVUsTUFBTUUsU0FBUztJQUM3QjtJQUVBRCxZQUFZLFNBQVViLElBQUk7UUFDdEIsTUFBTXFCLE9BQU9yQixLQUFLcUIsSUFBSTtRQUN0QixNQUFNVCxVQUFVWixLQUFLc0IsSUFBSSxDQUFDQyxhQUFhLENBQUM7UUFFeENYLFFBQVFZLFNBQVMsR0FBRztRQUNwQlosUUFBUWEsU0FBUyxHQUFHLEtBQ2hCLGdDQUNJLCtCQUNJLHVGQUF1RkosS0FBS0ssT0FBTyxDQUFDQyxTQUFTLEdBQUcsbUJBQW1CTixLQUFLSyxPQUFPLENBQUNDLFNBQVMsR0FBRyxPQUN4SjNCLEtBQUtPLEtBQUssQ0FBQ0ksV0FBVyxHQUMxQixtQkFDQSx1RkFBdUZVLEtBQUtLLE9BQU8sQ0FBQ0UsV0FBVyxHQUFHLG1CQUFtQlAsS0FBS0ssT0FBTyxDQUFDRSxXQUFXLEdBQUcsT0FDNUo1QixLQUFLTyxLQUFLLENBQUNFLFlBQVksR0FDM0IsbUJBQ0osVUFDSjtRQUVKLE9BQU9HO0lBQ1g7SUFFQzs7S0FFQSxHQUNEaUIsUUFBUSxTQUFVQyxPQUFPO1FBQ3JCLE1BQU1DLFNBQVMsSUFBSSxDQUFDN0IsT0FBTyxDQUFDQyxJQUFJLENBQUNDLFlBQVk7UUFDN0MsTUFBTTRCLE9BQU9ELE9BQU9FLGlCQUFpQjtRQUNyQyxNQUFNWCxPQUFPLElBQUksQ0FBQ0EsSUFBSTtRQUV0QixJQUFJQSxLQUFLWSxNQUFNLENBQUNKLFVBQVU7WUFDdEIsTUFBTUssV0FBV0wsUUFBUUssUUFBUTtZQUNqQ0osT0FBT0ssWUFBWSxDQUFDLGNBQWNEO1lBQ2xDYixLQUFLZSxRQUFRLENBQUNOLFFBQVE7WUFDdEIsSUFBSSxNQUFNTyxJQUFJLENBQUNILFdBQVc7Z0JBQ3RCYixLQUFLaUIsYUFBYSxDQUFDUCxNQUFNLElBQUksQ0FBQzlCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDSSxLQUFLLENBQUNDLE9BQU87WUFDNUQsT0FBTztnQkFDSGMsS0FBS2lCLGFBQWEsQ0FBQ1AsTUFBTSxJQUFJLENBQUM5QixPQUFPLENBQUNDLElBQUksQ0FBQ0ksS0FBSyxDQUFDRyxNQUFNO1lBQzNEO1lBRUEsT0FBTztRQUNYLE9BQU87WUFDSHFCLE9BQU9TLGVBQWUsQ0FBQztZQUN2QmxCLEtBQUtpQixhQUFhLENBQUNQLE1BQU0sSUFBSSxDQUFDOUIsT0FBTyxDQUFDQyxJQUFJLENBQUNJLEtBQUssQ0FBQ0csTUFBTTtZQUN2RFksS0FBS21CLFdBQVcsQ0FBQ1YsUUFBUTtRQUM3QjtRQUVBLE9BQU87SUFDWDtJQUVDOztLQUVBLEdBQ0RXLElBQUk7UUFDQSxNQUFNQyxjQUFjLElBQUksQ0FBQ3pDLE9BQU8sQ0FBQ0MsSUFBSTtRQUNyQyxNQUFNQSxPQUFPd0MsWUFBWXRDLEtBQUs7UUFDOUIsTUFBTUMsY0FBY3FDLFlBQVl2QyxZQUFZLENBQUN3QyxZQUFZLENBQUMsaUJBQWlCO1FBRTNFLElBQUl0QyxnQkFBZ0JxQyxZQUFZckMsV0FBVyxFQUFFO1lBQ3pDLElBQUssSUFBSXVDLElBQUksR0FBR0MsTUFBTTNDLEtBQUs0QyxNQUFNLEVBQUVGLElBQUlDLEtBQUtELElBQUs7Z0JBQzdDLElBQUl2QyxnQkFBZ0JILElBQUksQ0FBQzBDLEVBQUUsQ0FBQ0QsWUFBWSxDQUFDLGlCQUFpQjtvQkFDdEQsSUFBSSxDQUFDdEIsSUFBSSxDQUFDZSxRQUFRLENBQUNsQyxJQUFJLENBQUMwQyxFQUFFLEVBQUU7Z0JBQ2hDLE9BQU87b0JBQ0gsSUFBSSxDQUFDdkIsSUFBSSxDQUFDbUIsV0FBVyxDQUFDdEMsSUFBSSxDQUFDMEMsRUFBRSxFQUFFO2dCQUNuQztZQUNKO1lBRUFGLFlBQVlyQyxXQUFXLEdBQUdBO1FBQzlCO0lBQ0o7SUFFQTBDLFVBQVUsU0FBVUMsT0FBTyxFQUFFQyxhQUFhLEVBQUVDLE1BQU07UUFDOUMsSUFBSUMsUUFBUSxJQUFJLENBQUNDLFFBQVE7UUFDekIsSUFBSUMsa0JBQWtCLENBQUNKLGdCQUFnQixJQUFJLENBQUNLLGdDQUFnQyxDQUFDLFNBQVNMO1FBRXRGLElBQUlJLGdCQUFnQlAsTUFBTSxLQUFLLEdBQUc7WUFDOUIsSUFBSUcsZUFBZTtZQUNuQkUsUUFBUSxJQUFJLENBQUNJLGdCQUFnQixDQUFDSixPQUFPO1lBQ3JDRSxrQkFBa0IsSUFBSSxDQUFDQyxnQ0FBZ0MsQ0FBQztZQUN4RCxJQUFJRCxnQkFBZ0JQLE1BQU0sS0FBSyxHQUFHO1FBQ3RDO1FBRUEsTUFBTXpCLE9BQU8sSUFBSSxDQUFDQSxJQUFJO1FBQ3RCQSxLQUFLbUMsV0FBVyxDQUFDSCxpQkFBaUI7UUFFbEMsUUFBUTtRQUNSLElBQUlJLFdBQVdKLGVBQWUsQ0FBQyxFQUFFO1FBQ2pDLElBQUlLLFVBQVVMLGVBQWUsQ0FBQ0EsZ0JBQWdCUCxNQUFNLEdBQUcsRUFBRTtRQUN6RCxJQUFJYSxRQUFRLENBQUN0QyxLQUFLdUMsVUFBVSxDQUFDSCxhQUFhcEMsS0FBS3dDLFdBQVcsQ0FBQ0osU0FBUSxLQUFNLENBQUNBLFNBQVNLLHNCQUFzQixHQUFHTCxTQUFTTSxVQUFVLENBQUNELHNCQUFzQixHQUFHTCxTQUFTSyxzQkFBc0I7UUFDeEwsSUFBSUUsV0FBVyxDQUFDM0MsS0FBS3VDLFVBQVUsQ0FBQ0YsWUFBWXJDLEtBQUt3QyxXQUFXLENBQUNILFFBQU8sS0FBTSxDQUFDQSxRQUFRTyxrQkFBa0IsR0FBR1AsUUFBUUssVUFBVSxDQUFDRSxrQkFBa0IsR0FBR1AsUUFBUU8sa0JBQWtCO1FBRTFLLE1BQU1DLGNBQWNmLE1BQU1nQixTQUFTO1FBQ25DLE1BQU1DLGNBQWM7WUFDaEJDLElBQUlsQixNQUFNbUIsY0FBYztZQUN4QkMsSUFBSSxNQUFPRCxjQUFjLEtBQUtuQixNQUFNcUIsWUFBWSxJQUFJbkQsS0FBS29ELGtCQUFrQixDQUFDdEIsTUFBTW1CLGNBQWMsS0FBS25CLE1BQU11QixXQUFXLEtBQUssS0FBS3ZCLE1BQU13QixTQUFTLEtBQUssSUFBS3hCLE1BQU13QixTQUFTLEdBQUd4QixNQUFNdUIsV0FBVztZQUM1TEUsSUFBSXpCLE1BQU1xQixZQUFZO1lBQ3RCSyxJQUFJMUIsTUFBTXdCLFNBQVM7UUFDdkI7UUFDQSxJQUFJRyxhQUFhO1FBQ2pCLElBQUlDLFdBQVc7UUFFZixJQUFLLElBQUluQyxJQUFJLEdBQUdDLE1BQU1RLGdCQUFnQlAsTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQ3hELElBQUksQ0FBQ3ZCLEtBQUtZLE1BQU0sQ0FBQ1osS0FBSzJELHFCQUFxQixDQUFDM0IsZUFBZSxDQUFDVCxFQUFFLEVBQUUsVUFBVXFDLE9BQU87Z0JBQzdFLE9BQU8sSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ0MsWUFBWUEsWUFBWTVCLGVBQWUsQ0FBQ1QsRUFBRTtZQUNoRixHQUFFM0IsSUFBSSxDQUFDSSxTQUFTO2dCQUNaMEQsV0FBVztnQkFDWDtZQUNKO1FBQ0o7UUFFQSxJQUFJQSxZQUFhLEVBQUNwQixTQUFVRixTQUFTeUIsT0FBTyxLQUFLdkIsTUFBTXVCLE9BQU8sSUFBSWxDLFlBQVlXLE1BQU11QixPQUFPLENBQUNDLFdBQVcsRUFBRSxLQUFPLEVBQUNuQixZQUFhTixRQUFRd0IsT0FBTyxLQUFLbEIsU0FBU2tCLE9BQU8sSUFBSWxDLFlBQVlnQixTQUFTa0IsT0FBTyxDQUFDQyxXQUFXLEVBQUUsR0FBSTtZQUNoTixJQUFJakMsUUFBUTtnQkFDUixJQUFLLElBQUlOLElBQUksR0FBR0MsTUFBTVEsZ0JBQWdCUCxNQUFNLEVBQUVGLElBQUlDLEtBQUtELElBQUs7b0JBQ3hELElBQUssSUFBSXdDLElBQUl4QyxJQUFJLEdBQUd3QyxLQUFLLEdBQUdBLElBQUs7d0JBQzdCLElBQUkvQixlQUFlLENBQUMrQixFQUFFLENBQUNDLFFBQVEsQ0FBQ2hDLGVBQWUsQ0FBQ1QsRUFBRSxHQUFHOzRCQUNqRFMsZ0JBQWdCaUMsTUFBTSxDQUFDMUMsR0FBRzs0QkFDMUJBOzRCQUFLQzs0QkFDTDt3QkFDSjtvQkFDSjtnQkFDSjtZQUNKO1lBRUEsTUFBTTBDLGdCQUFnQmxFLEtBQUsyRCxxQkFBcUIsQ0FBQ3ZCO1lBQ2pELE1BQU0rQixTQUFTRCxpQkFBaUJBLGNBQWNMLE9BQU8sS0FBS2xDO1lBQzFELElBQUl5QyxVQUFVQztZQUNkLE1BQU1DLGdCQUFnQixVQUFVVixPQUFPO2dCQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDcEIsV0FBVyxDQUFDb0I7WUFDN0IsR0FBRWhFLElBQUksQ0FBQ0k7WUFFUCxJQUFJLENBQUNtRSxRQUFRRSxXQUFXckUsS0FBS0MsYUFBYSxDQUFDMEI7WUFFM0MsSUFBSyxJQUFJSixJQUFJLEdBQUdDLE1BQU1RLGdCQUFnQlAsTUFBTSxFQUFFOEMsR0FBR0MsR0FBR2pELElBQUlDLEtBQUtELElBQUs7Z0JBQzlEaUQsSUFBSXhFLEtBQUsyRCxxQkFBcUIsQ0FBQzNCLGVBQWUsQ0FBQ1QsRUFBRSxFQUFFK0M7Z0JBQ25ELElBQUksQ0FBQ0UsS0FBSyxDQUFDeEUsS0FBS1ksTUFBTSxDQUFDNEQsSUFBSTtnQkFFM0IsSUFBSSxDQUFDRCxHQUFHO29CQUNKQSxJQUFJQztvQkFDSkosV0FBVzt3QkFBQ0csR0FBR0E7d0JBQUdFLEdBQUc7NEJBQUN6RSxLQUFLMEUsZ0JBQWdCLENBQUMxQyxlQUFlLENBQUNULEVBQUUsRUFBRTt5QkFBTTtvQkFBQTtnQkFDMUUsT0FBTztvQkFDSCxJQUFJZ0QsTUFBTUMsR0FBRzt3QkFDVCxJQUFJM0MsVUFBVTdCLEtBQUt1QyxVQUFVLENBQUNpQyxFQUFFOUIsVUFBVSxHQUFHOzRCQUN6QyxJQUFJLENBQUNpQyxPQUFPLENBQUM5RixJQUFJLENBQUMrRixhQUFhLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUVULFNBQVNLLENBQUM7d0JBQ3pELE9BQU87NEJBQ0hoQixhQUFhLElBQUksQ0FBQ3FCLHdCQUF3QixDQUFDVixTQUFTSyxDQUFDLENBQUMsRUFBRSxDQUFDL0IsVUFBVSxFQUFFMEIsU0FBU0ssQ0FBQyxFQUFFSixVQUFVLE9BQU87d0JBQ3RHO3dCQUVBRyxJQUFJeEMsZUFBZSxDQUFDVCxFQUFFLENBQUNtQixVQUFVO3dCQUNqQyxJQUFJLENBQUN5QixRQUFRRSxXQUFXckUsS0FBS0MsYUFBYSxDQUFDMEI7d0JBRTNDNEMsSUFBSUM7d0JBQ0pKLFdBQVc7NEJBQUNHLEdBQUdBOzRCQUFHRSxHQUFHO2dDQUFDekUsS0FBSzBFLGdCQUFnQixDQUFDMUMsZUFBZSxDQUFDVCxFQUFFLEVBQUU7NkJBQU07d0JBQUE7b0JBQzFFLE9BQU87d0JBQ0g2QyxTQUFTSyxDQUFDLENBQUNNLElBQUksQ0FBQy9FLEtBQUswRSxnQkFBZ0IsQ0FBQzFDLGVBQWUsQ0FBQ1QsRUFBRSxFQUFFO29CQUM5RDtnQkFDSjtnQkFFQSxJQUFJQSxNQUFNQyxNQUFNLEdBQUc7b0JBQ2YsSUFBSUssVUFBVTdCLEtBQUt1QyxVQUFVLENBQUNpQyxFQUFFOUIsVUFBVSxHQUFHO3dCQUN6QyxJQUFJLENBQUNpQyxPQUFPLENBQUM5RixJQUFJLENBQUMrRixhQUFhLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUVULFNBQVNLLENBQUM7b0JBQ3pELE9BQU87d0JBQ0hoQixhQUFhLElBQUksQ0FBQ3FCLHdCQUF3QixDQUFDVixTQUFTSyxDQUFDLENBQUMsRUFBRSxDQUFDL0IsVUFBVSxFQUFFMEIsU0FBU0ssQ0FBQyxFQUFFSixVQUFVLE9BQU87b0JBQ3RHO2dCQUNKO1lBQ0o7UUFDSixPQUFPO1lBQ0gsTUFBTVcsY0FBYzFDLFFBQVFBLE1BQU1JLFVBQVUsR0FBR0o7WUFDL0MsTUFBTTJDLGlCQUFpQnRDLFdBQVdBLFNBQVNELFVBQVUsR0FBR0M7WUFDeERMLFFBQVEwQyxlQUFlLENBQUNoRixLQUFLa0YsWUFBWSxDQUFDRixnQkFBZ0JBLFlBQVluRSxRQUFRLEtBQUtjLFVBQVVxRCxjQUFjMUM7WUFDM0dLLFdBQVdzQyxrQkFBa0IsQ0FBQ2pGLEtBQUtrRixZQUFZLENBQUNELG1CQUFtQkEsZUFBZXBFLFFBQVEsS0FBS2MsVUFBVXNELGlCQUFpQnRDO1lBRTFILE1BQU13QyxXQUFXN0MsU0FBU0EsTUFBTXVCLE9BQU8sS0FBS2xDO1lBQzVDLE1BQU15RCxjQUFjekMsWUFBWUEsU0FBU2tCLE9BQU8sS0FBS2xDO1lBRXJELElBQUk5QyxPQUFPc0csV0FBVzdDLFFBQVF0QyxLQUFLQyxhQUFhLENBQUMwQjtZQUNqRCxJQUFJMEQsWUFBWTtZQUNoQixJQUFJQyxXQUFXO1lBQ2YsSUFBSUMsWUFBWTtZQUNoQixJQUFJQyxlQUFlO1lBRW5CLE1BQU1sQixnQkFBZ0IsVUFBVVYsT0FBTztnQkFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQ3BCLFdBQVcsQ0FBQ29CLFlBQVksQ0FBQyxJQUFJLENBQUNoRCxNQUFNLENBQUNnRDtZQUN0RCxHQUFFaEUsSUFBSSxDQUFDSTtZQUVQLElBQUssSUFBSXVCLElBQUksR0FBR0MsTUFBTVEsZ0JBQWdCUCxNQUFNLEVBQUVnRSxTQUFTQyxNQUFNQyxRQUFRQyxNQUFNQyxjQUFjQyxZQUFZQyxXQUFXQyxZQUFZQyxVQUFVMUUsSUFBSUMsS0FBS0QsSUFBSztnQkFDaEptRSxPQUFPMUQsZUFBZSxDQUFDVCxFQUFFO2dCQUN6QixJQUFJbUUsS0FBS1EsVUFBVSxDQUFDekUsTUFBTSxLQUFLLEtBQUssQ0FBQ3pCLEtBQUttRyxtQkFBbUIsQ0FBQ1QsT0FBTztvQkFDakUxRixLQUFLb0csVUFBVSxDQUFDVjtvQkFDaEI7Z0JBQ0o7Z0JBQ0FFLE9BQU81RCxlQUFlLENBQUNULElBQUksRUFBRTtnQkFDN0JzRSxlQUFlSCxLQUFLaEQsVUFBVTtnQkFDOUJvRCxhQUFhRixPQUFPQSxLQUFLbEQsVUFBVSxHQUFHO2dCQUN0Q2lELFNBQVMzRixLQUFLdUMsVUFBVSxDQUFDbUQ7Z0JBQ3pCTyxXQUFXakcsS0FBS3FHLG9CQUFvQixDQUFDUixnQkFBZ0JBLGVBQWU7Z0JBQ3BFRSxZQUFZSixVQUFVLENBQUMzRixLQUFLa0YsWUFBWSxDQUFDVyxnQkFBZ0JBLGFBQWFuRCxVQUFVLEdBQUdtRDtnQkFDbkZHLGFBQWFMLFVBQVUsQ0FBQzNGLEtBQUtrRixZQUFZLENBQUNXLGdCQUFnQixDQUFFRCxRQUFRNUYsS0FBS3VDLFVBQVUsQ0FBQ3dELGFBQWNGLGVBQWVBLGFBQWFTLFdBQVcsR0FBR1osS0FBS1ksV0FBVztnQkFFNUpiLFVBQVV6RixLQUFLQyxhQUFhLENBQUM7Z0JBQzdCRCxLQUFLdUcsb0JBQW9CLENBQUNkLFNBQVNDO2dCQUVuQyxJQUFJbkUsTUFBTyxLQUFLd0IsWUFBWUMsRUFBRSxLQUFLMEMsTUFBTTtvQkFDckMzQyxZQUFZQyxFQUFFLEdBQUd5QztnQkFDckI7Z0JBQ0EsSUFBSWxFLE1BQU1DLE1BQU0sS0FBS3VCLFlBQVlRLEVBQUUsS0FBS21DLE1BQU07b0JBQzFDM0MsWUFBWVEsRUFBRSxHQUFHa0M7Z0JBQ3JCO2dCQUVBLElBQUl6RixLQUFLd0MsV0FBVyxDQUFDa0QsT0FBTztvQkFDeEIsTUFBTWMsT0FBTyxRQUFReEYsSUFBSSxDQUFDMEUsS0FBSzdFLFFBQVE7b0JBQ3ZDLElBQUksQ0FBQzJGLE1BQU1mLFFBQVF0RixTQUFTLEdBQUc7b0JBQy9Cc0YsUUFBUXRGLFNBQVMsSUFBSXVGLEtBQUtlLFNBQVM7b0JBQ25DLElBQUlELE1BQU1mLFFBQVF0RixTQUFTLElBQUk7Z0JBQ25DLE9BQU87b0JBQ0gsTUFBTXVHLFlBQVloQixLQUFLUSxVQUFVO29CQUNqQyxNQUFPUSxTQUFTLENBQUMsRUFBRSxDQUFFO3dCQUNqQmpCLFFBQVFrQixXQUFXLENBQUNELFNBQVMsQ0FBQyxFQUFFO29CQUNwQztnQkFDSjtnQkFDQTdILEtBQUs4SCxXQUFXLENBQUNsQjtnQkFFakIsSUFBSSxDQUFDRyxNQUFNTixXQUFXekc7Z0JBQ3RCLElBQUksQ0FBQytHLFFBQVFHLGNBQWNELGNBQWM5RixLQUFLcUcsb0JBQW9CLENBQUNMLGFBQWE7b0JBQzVFLElBQUksQ0FBQ1gsV0FBV0EsWUFBWXhHO29CQUM1QixJQUFJLENBQUMsQ0FBQ3NHLFlBQVksQ0FBQ1MsUUFBUUcsY0FBY0QsVUFBUyxLQUFNLENBQUVGLENBQUFBLFFBQVE1RixLQUFLWSxNQUFNLENBQUNrRixlQUFlQSxlQUFlRCxZQUFXLEdBQUk7d0JBQ3ZILElBQUloSCxLQUFLNkQsVUFBVSxLQUFLcUQsV0FBV0EsVUFBVWEsWUFBWSxDQUFDL0gsTUFBTW1IO29CQUNwRTtnQkFDSjtnQkFFQWhHLEtBQUtvRyxVQUFVLENBQUNWO2dCQUNoQixJQUFJUCxZQUFZSSxjQUFjLE1BQU1BLFlBQVkxRyxLQUFLZ0ksUUFBUSxDQUFDcEYsTUFBTSxHQUFHO2dCQUN2RSxJQUFJbUUsUUFBUzVGLENBQUFBLEtBQUsyRCxxQkFBcUIsQ0FBQ21DLFlBQVl4QixtQkFBbUJ0RSxLQUFLMkQscUJBQXFCLENBQUNrQyxjQUFjdkIsa0JBQW1CdEUsS0FBS1ksTUFBTSxDQUFDa0YsZUFBZTlGLEtBQUtZLE1BQU0sQ0FBQ2lGLGlCQUFpQjdGLEtBQUs4RyxlQUFlLENBQUNoQixnQkFBZ0I5RixLQUFLOEcsZUFBZSxDQUFDakIsYUFBYSxHQUFJO29CQUNsUWhILE9BQU9tQixLQUFLQyxhQUFhLENBQUMwQjtnQkFDOUI7Z0JBRUEsSUFBSXNFLFlBQVlBLFNBQVNZLFFBQVEsQ0FBQ3BGLE1BQU0sS0FBSyxHQUFHekIsS0FBS29HLFVBQVUsQ0FBQ0g7WUFDcEU7WUFFQSxJQUFJVixXQUFXO2dCQUNYRixZQUFZQSxVQUFVd0IsUUFBUSxDQUFDdEIsVUFBVTtZQUM3QztZQUVBLElBQUlILGFBQWE7Z0JBQ2JJLGVBQWUzRyxLQUFLZ0ksUUFBUSxDQUFDcEYsTUFBTSxHQUFHO2dCQUN0QzVDLEtBQUtzQixTQUFTLElBQUl3QyxTQUFTeEMsU0FBUztnQkFDcENtRixXQUFXekcsS0FBS2dJLFFBQVEsQ0FBQ3JCLGFBQWE7Z0JBQ3RDeEYsS0FBS29HLFVBQVUsQ0FBQ3pEO1lBQ3BCO1FBQ0o7UUFFQSxJQUFJLENBQUNvRSxVQUFVLEdBQUc7UUFDbEIsT0FBTyxDQUFDbEUsY0FBY0UsY0FBY1U7SUFDeEM7SUFFQW1CLGVBQWUsU0FBVW9DLEtBQUs7UUFDMUIsTUFBTUMsUUFBUUQsS0FBSyxDQUFDLEVBQUU7UUFDdEIsTUFBTUUsT0FBT0YsS0FBSyxDQUFDQSxNQUFNdkYsTUFBTSxHQUFHLEVBQUU7UUFDcEMsTUFBTW1FLE9BQU9zQixLQUFLdEUsa0JBQWtCO1FBQ3BDLE1BQU11RSxhQUFhRixNQUFNdkUsVUFBVTtRQUNuQyxNQUFNMEUsVUFBVUQsV0FBV3pFLFVBQVUsQ0FBQ0Usa0JBQWtCO1FBQ3hELE1BQU1GLGFBQWF5RSxXQUFXekUsVUFBVSxDQUFDQSxVQUFVO1FBRW5ELElBQUssSUFBSTJFLElBQUksR0FBR0MsT0FBT04sTUFBTXZGLE1BQU0sRUFBRTRGLElBQUlDLE1BQU1ELElBQUs7WUFDaEQzRSxXQUFXa0UsWUFBWSxDQUFDSSxLQUFLLENBQUNLLEVBQUUsRUFBRUQ7UUFDdEM7UUFFQSxJQUFJeEIsUUFBUXVCLFdBQVdOLFFBQVEsQ0FBQ3BGLE1BQU0sR0FBRyxHQUFHO1lBQ3hDLE1BQU04RixVQUFVSixXQUFXSyxTQUFTLENBQUM7WUFDckMsTUFBTVgsV0FBV00sV0FBV2pCLFVBQVU7WUFDdEMsTUFBTXVCLFFBQVEsSUFBSSxDQUFDekgsSUFBSSxDQUFDMEgsZ0JBQWdCLENBQUM5QjtZQUN6QyxNQUFPaUIsUUFBUSxDQUFDWSxNQUFNLENBQUU7Z0JBQ3BCRixRQUFRWixXQUFXLENBQUNFLFFBQVEsQ0FBQ1ksTUFBTTtZQUN2QztZQUNBUCxLQUFLUCxXQUFXLENBQUNZO1FBQ3JCO1FBRUEsSUFBSUosV0FBV04sUUFBUSxDQUFDcEYsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDekIsSUFBSSxDQUFDb0csVUFBVSxDQUFDZTtRQUMzRCxJQUFJLENBQUNuSCxJQUFJLENBQUMySCxhQUFhLENBQUNqRjtRQUV4QixNQUFNa0YsT0FBTyxJQUFJLENBQUM1SCxJQUFJLENBQUM2SCxpQkFBaUIsQ0FBQ1osT0FBT0M7UUFFaEQsT0FBTztZQUNIWSxJQUFJYixNQUFNdkUsVUFBVTtZQUNwQk0sSUFBSTRFLEtBQUs1RSxFQUFFO1lBQ1hPLElBQUlxRSxLQUFLckUsRUFBRTtRQUNmO0lBQ0o7SUFFQXdFLGdCQUFnQixTQUFVQyxNQUFNLEVBQUVwRyxhQUFhO1FBQzNDQSxnQkFBZ0IsQ0FBQ0EsZ0JBQWdCLElBQUksQ0FBQ3FHLG1CQUFtQixHQUFHQyxNQUFNLENBQUMsVUFBVUMsRUFBRTtZQUFJLE9BQU8sSUFBSSxDQUFDNUYsVUFBVSxDQUFDNEY7UUFBSyxHQUFFdkksSUFBSSxDQUFDLElBQUksQ0FBQ0ksSUFBSSxLQUFLNEI7UUFDcEksTUFBTXdHLFdBQVd4RyxjQUFjSCxNQUFNO1FBQ3JDLElBQUkyRyxhQUFhLEtBQU0sQ0FBQ0osVUFBVyxDQUFDLElBQUksQ0FBQ2hJLElBQUksQ0FBQ3VDLFVBQVUsQ0FBQ1gsYUFBYSxDQUFDLEVBQUUsQ0FBQ2Esc0JBQXNCLEtBQUssQ0FBQyxJQUFJLENBQUN6QyxJQUFJLENBQUN1QyxVQUFVLENBQUNYLGFBQWEsQ0FBQ3dHLFdBQVcsRUFBRSxDQUFDeEYsa0JBQWtCLEdBQUs7WUFDMUssT0FBTztnQkFDSEksSUFBSXBCLGFBQWEsQ0FBQyxFQUFFO2dCQUNwQnNCLElBQUk7Z0JBQ0pLLElBQUkzQixhQUFhLENBQUN3RyxXQUFXLEVBQUU7Z0JBQy9CNUUsSUFBSTtZQUNSO1FBQ0o7UUFFQSxJQUFJMkQsYUFBYXZGLGFBQWEsQ0FBQyxFQUFFLENBQUNjLFVBQVU7UUFDNUMsSUFBSTJGLFdBQVd6RyxhQUFhLENBQUN3RyxXQUFXLEVBQUU7UUFDMUMsSUFBSXRHLFFBQVE7UUFFWixJQUFJa0csUUFBUTtZQUNSLElBQUliLGVBQWVrQixTQUFTM0YsVUFBVSxJQUFJLElBQUksQ0FBQzFDLElBQUksQ0FBQ1ksTUFBTSxDQUFDeUgsU0FBUzNGLFVBQVUsQ0FBQ0EsVUFBVSxLQUFLMkYsU0FBU3pGLGtCQUFrQixFQUFFO2dCQUN2SHlGLFdBQVdBLFNBQVN6RixrQkFBa0I7Z0JBQ3RDLE1BQU95RixTQUFVO29CQUNiekcsY0FBY21ELElBQUksQ0FBQ3NEO29CQUNuQkEsV0FBV0EsU0FBU3pGLGtCQUFrQjtnQkFDMUM7WUFDSjtZQUNBZCxRQUFRLElBQUksQ0FBQzZDLE9BQU8sQ0FBQzlGLElBQUksQ0FBQzZDLFFBQVEsQ0FBQ21ELElBQUksQ0FBQyxJQUFJLEVBQUVzQyxXQUFXdEcsUUFBUSxDQUFDaUQsV0FBVyxJQUFJbEMsZUFBZTtRQUNwRyxPQUFPO1lBQ0gsSUFBSTBHLFlBQVksSUFBSSxDQUFDdEksSUFBSSxDQUFDQyxhQUFhLENBQUNrSCxXQUFXdEcsUUFBUTtZQUMzRCxJQUFJMEgsT0FBTzNHLGFBQWEsQ0FBQyxFQUFFLENBQUNhLHNCQUFzQjtZQUNsRCxJQUFJbUQsT0FBT3lDLFNBQVN6RixrQkFBa0I7WUFDdEMsTUFBTTRGLFdBQVc7Z0JBQUVDLEdBQUc7Z0JBQU1DLEdBQUc7Z0JBQU1DLElBQUl4QjtnQkFBWWdCLElBQUloQjtZQUFXO1lBRXBFLElBQUssSUFBSTVGLElBQUksR0FBR0MsTUFBTTRHLFVBQVVmLEdBQUc5RixJQUFJQyxLQUFLRCxJQUFLO2dCQUM3QzhGLElBQUl6RixhQUFhLENBQUNMLEVBQUU7Z0JBQ3BCLElBQUk4RixFQUFFM0UsVUFBVSxLQUFLeUUsWUFBWTtvQkFDN0IsSUFBSSxDQUFDeEMsT0FBTyxDQUFDOUYsSUFBSSxDQUFDK0osV0FBVyxDQUFDL0QsSUFBSSxDQUFDLElBQUksRUFBRXNDLFlBQVltQixXQUFXQyxNQUFNM0MsTUFBTTRDO29CQUM1RXJCLGFBQWFFLEVBQUUzRSxVQUFVO29CQUN6QjRGLFlBQVksSUFBSSxDQUFDdEksSUFBSSxDQUFDQyxhQUFhLENBQUNrSCxXQUFXdEcsUUFBUTtnQkFDM0Q7Z0JBRUEwSCxPQUFPbEIsRUFBRTVFLHNCQUFzQjtnQkFDL0JtRCxPQUFPeUIsRUFBRXpFLGtCQUFrQjtnQkFDM0IwRixVQUFVM0IsV0FBVyxDQUFDVTtZQUMxQjtZQUVBLElBQUksQ0FBQzFDLE9BQU8sQ0FBQzlGLElBQUksQ0FBQytKLFdBQVcsQ0FBQy9ELElBQUksQ0FBQyxJQUFJLEVBQUVzQyxZQUFZbUIsV0FBV0MsTUFBTTNDLE1BQU00QztZQUU1RSxNQUFNeEYsS0FBSyxJQUFJLENBQUNoRCxJQUFJLENBQUM2SSxlQUFlLENBQUNMLFNBQVNDLENBQUMsRUFBRUQsU0FBU0csRUFBRTtZQUM1RCxNQUFNcEYsS0FBSyxJQUFJLENBQUN2RCxJQUFJLENBQUM2SSxlQUFlLENBQUNMLFNBQVNFLENBQUMsRUFBRUYsU0FBU0wsRUFBRTtZQUM1RHJHLFFBQVE7Z0JBQ0prQixJQUFJQTtnQkFDSkUsSUFBSTtnQkFDSkssSUFBSUE7Z0JBQ0pDLElBQUlELEdBQUd1RixXQUFXLENBQUNySCxNQUFNO1lBQzdCO1FBQ0o7UUFFQSxPQUFPSztJQUNYO0lBRUE4RyxhQUFhLFNBQVV6QixVQUFVLEVBQUVtQixTQUFTLEVBQUVDLElBQUksRUFBRTNDLElBQUksRUFBRTRDLFFBQVE7UUFDOUQsSUFBSU8sYUFBYTtRQUVqQixJQUFJUixRQUFRRCxVQUFVekUsT0FBTyxLQUFLMEUsS0FBSzFFLE9BQU8sRUFBRTtZQUM1QyxNQUFNZ0QsV0FBV3lCLFVBQVV6QixRQUFRO1lBQ25DLE1BQU9BLFFBQVEsQ0FBQyxFQUFFLENBQUU7Z0JBQ2hCMEIsS0FBSzVCLFdBQVcsQ0FBQ0UsUUFBUSxDQUFDLEVBQUU7WUFDaEM7WUFFQXlCLFlBQVlDO1lBQ1pRLGFBQWE7UUFDakI7UUFFQSxJQUFJbkQsUUFBUTBDLFVBQVV6RSxPQUFPLEtBQUsrQixLQUFLL0IsT0FBTyxFQUFFO1lBQzVDLE1BQU1nRCxXQUFXakIsS0FBS2lCLFFBQVE7WUFDOUIsTUFBT0EsUUFBUSxDQUFDLEVBQUUsQ0FBRTtnQkFDaEJ5QixVQUFVM0IsV0FBVyxDQUFDRSxRQUFRLENBQUMsRUFBRTtZQUNyQztZQUVBLE1BQU1tQyxPQUFPcEQsS0FBS2hELGtCQUFrQjtZQUNwQ2dELEtBQUtsRCxVQUFVLENBQUN1RyxXQUFXLENBQUNyRDtZQUM1QkEsT0FBT29EO1FBQ1g7UUFFQSxJQUFJLENBQUNELFlBQVk7WUFDYixJQUFJLElBQUksQ0FBQy9JLElBQUksQ0FBQ3VDLFVBQVUsQ0FBQ2dHLE9BQU87Z0JBQzVCcEIsYUFBYW9CO2dCQUNiM0MsT0FBTztZQUNYO1lBRUF1QixXQUFXUCxZQUFZLENBQUMwQixXQUFXMUM7WUFFbkMsSUFBSSxDQUFDNEMsU0FBU0MsQ0FBQyxFQUFFO2dCQUNiRCxTQUFTQyxDQUFDLEdBQUcsSUFBSSxDQUFDekksSUFBSSxDQUFDa0osV0FBVyxDQUFDWixVQUFVM0gsaUJBQWlCLENBQUN3SSxVQUFVLEVBQUVoQyxZQUFZO2dCQUN2RnFCLFNBQVNHLEVBQUUsR0FBR3hCO1lBQ2xCO1lBRUEsTUFBTWlDLFNBQVNqQyxXQUFXbkQsUUFBUSxDQUFDd0UsU0FBU0csRUFBRSxJQUFJLElBQUksQ0FBQzNJLElBQUksQ0FBQ2tKLFdBQVcsQ0FBQ1YsU0FBU0csRUFBRSxFQUFFeEIsY0FBYztZQUNuR3FCLFNBQVNFLENBQUMsR0FBRyxJQUFJLENBQUMxSSxJQUFJLENBQUNrSixXQUFXLENBQUNaLFVBQVVlLGdCQUFnQixDQUFDRixVQUFVLEVBQUVoQyxZQUFZO1lBQ3RGcUIsU0FBU0wsRUFBRSxHQUFHaEI7WUFFZCxJQUFJLENBQUNuSCxJQUFJLENBQUMySCxhQUFhLENBQUNSLFlBQVk7Z0JBQUNxQixTQUFTQyxDQUFDO2dCQUFFRCxTQUFTRSxDQUFDO2dCQUFFVTthQUFPLEVBQUU7WUFDdEUsSUFBSSxDQUFDcEosSUFBSSxDQUFDc0osZUFBZSxDQUFDbkM7WUFDMUIsSUFBSWlDLFFBQVFaLFNBQVNHLEVBQUUsR0FBRyxJQUFJLENBQUMzSSxJQUFJLENBQUM2SSxlQUFlLENBQUNPLFFBQVFqQztRQUNoRTtRQUVBLE9BQU9tQjtJQUNYO0lBRUEzSSxRQUFRLFNBQVUrSSxDQUFDO1FBQ2ZBLEVBQUVhLGNBQWM7UUFDaEJiLEVBQUVjLGVBQWU7UUFFakIsSUFBSUMsU0FBU2YsRUFBRWUsTUFBTTtRQUNyQixJQUFJOUgsVUFBVTtRQUVkLE1BQU8sQ0FBQ0EsV0FBVyxDQUFDLFFBQVFYLElBQUksQ0FBQ3lJLE9BQU81RixPQUFPLEVBQUc7WUFDOUNsQyxVQUFVOEgsT0FBT25JLFlBQVksQ0FBQztZQUM5Qm1JLFNBQVNBLE9BQU8vRyxVQUFVO1FBQzlCO1FBRUEsSUFBSSxDQUFDZixTQUFTO1FBRWQsTUFBTUcsUUFBUSxJQUFJLENBQUM2QyxPQUFPLENBQUM5RixJQUFJLENBQUM2QyxRQUFRLENBQUNtRCxJQUFJLENBQUMsSUFBSSxFQUFFbEQsU0FBUyxNQUFNO1FBQ25FLElBQUlHLE9BQU8sSUFBSSxDQUFDNEgsUUFBUSxDQUFDNUgsTUFBTWtCLEVBQUUsRUFBRWxCLE1BQU1vQixFQUFFLEVBQUVwQixNQUFNeUIsRUFBRSxFQUFFekIsTUFBTTBCLEVBQUU7UUFFL0QsSUFBSSxDQUFDbUcsVUFBVTtRQUVmLGdCQUFnQjtRQUNoQixJQUFJLENBQUNDLE9BQU8sQ0FBQzdFLElBQUksQ0FBQztJQUN0QjtBQUNKLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B0aGUtZmxleGlvbi9wa2cvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL3N1Ym1lbnUvbGlzdC5qcz9mYjAxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ2xpc3QnLFxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XG4gICAgICAgIGNvbnRleHQubGlzdCA9IHtcbiAgICAgICAgICAgIHRhcmdldEJ1dHRvbjogdGFyZ2V0RWxlbWVudCxcbiAgICAgICAgICAgIF9saXN0OiBudWxsLFxuICAgICAgICAgICAgY3VycmVudExpc3Q6ICcnLFxuICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgICBidWxsZXRzOiBjb3JlLmljb25zLmxpc3RfYnVsbGV0cyxcbiAgICAgICAgICAgICAgICBudW1iZXI6IGNvcmUuaWNvbnMubGlzdF9udW1iZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cbiAgICAgICAgbGV0IGxpc3REaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XG4gICAgICAgIGxldCBsaXN0VWwgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XG5cbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cbiAgICAgICAgbGlzdFVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5waWNrdXAuYmluZChjb3JlKSk7XG4gICAgICAgIGNvbnRleHQubGlzdC5fbGlzdCA9IGxpc3RVbC5xdWVyeVNlbGVjdG9yQWxsKCdsaSBidXR0b24nKTtcblxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgbGlzdERpdik7XG5cbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xuICAgICAgICBsaXN0RGl2ID0gbnVsbCwgbGlzdFVsID0gbnVsbDtcbiAgICB9LFxuXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGNvcmUpIHtcbiAgICAgICAgY29uc3QgbGFuZyA9IGNvcmUubGFuZztcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcblxuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1zdWJtZW51IHNlLWxpc3QtbGF5ZXInO1xuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9ICcnICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2UtbGlzdC1pbm5lclwiPicgK1xuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCBzZS10b29sdGlwXCIgZGF0YS1jb21tYW5kPVwiT0xcIiB0aXRsZT1cIicgKyBsYW5nLnRvb2xiYXIub3JkZXJMaXN0ICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgbGFuZy50b29sYmFyLm9yZGVyTGlzdCArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMubGlzdF9udW1iZXIgK1xuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxsaT48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0IHNlLXRvb2x0aXBcIiBkYXRhLWNvbW1hbmQ9XCJVTFwiIHRpdGxlPVwiJyArIGxhbmcudG9vbGJhci51bm9yZGVyTGlzdCArICdcIiBhcmlhLWxhYmVsPVwiJyArIGxhbmcudG9vbGJhci51bm9yZGVyTGlzdCArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaWNvbnMubGlzdF9idWxsZXRzICtcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JyArXG4gICAgICAgICAgICAgICAgJzwvdWw+JyArXG4gICAgICAgICAgICAnPC9kaXY+JztcblxuICAgICAgICByZXR1cm4gbGlzdERpdjtcbiAgICB9LFxuXG4gICAgIC8qKlxuICAgICAqIEBPdmVycmlkZSBjb3JlXG4gICAgICovXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmNvbnRleHQubGlzdC50YXJnZXRCdXR0b247XG4gICAgICAgIGNvbnN0IGljb24gPSBidXR0b24uZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIGNvbnN0IHV0aWwgPSB0aGlzLnV0aWw7XG5cbiAgICAgICAgaWYgKHV0aWwuaXNMaXN0KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzJywgbm9kZU5hbWUpO1xuICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhidXR0b24sICdhY3RpdmUnKTtcbiAgICAgICAgICAgIGlmICgvVUwvaS50ZXN0KG5vZGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHV0aWwuY2hhbmdlRWxlbWVudChpY29uLCB0aGlzLmNvbnRleHQubGlzdC5pY29ucy5idWxsZXRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGljb24sIHRoaXMuY29udGV4dC5saXN0Lmljb25zLm51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cycpO1xuICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGljb24sIHRoaXMuY29udGV4dC5saXN0Lmljb25zLm51bWJlcik7XG4gICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGJ1dHRvbiwgJ2FjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAgLyoqXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBsaXN0Q29udGV4dCA9IHRoaXMuY29udGV4dC5saXN0O1xuICAgICAgICBjb25zdCBsaXN0ID0gbGlzdENvbnRleHQuX2xpc3Q7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaXN0ID0gbGlzdENvbnRleHQudGFyZ2V0QnV0dG9uLmdldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cycpIHx8ICcnO1xuXG4gICAgICAgIGlmIChjdXJyZW50TGlzdCAhPT0gbGlzdENvbnRleHQuY3VycmVudExpc3QpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaXN0ID09PSBsaXN0W2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1jb21tYW5kJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKGxpc3RbaV0sICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MobGlzdFtpXSwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGlzdENvbnRleHQuY3VycmVudExpc3QgPSBjdXJyZW50TGlzdDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBlZGl0TGlzdDogZnVuY3Rpb24gKGNvbW1hbmQsIHNlbGVjdGVkQ2VsbHMsIGRldGFjaCkge1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XG4gICAgICAgIGxldCBzZWxlY3RlZEZvcm1hdHMgPSAhc2VsZWN0ZWRDZWxscyA/IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpIDogc2VsZWN0ZWRDZWxscztcblxuICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ2VsbHMpIHJldHVybjtcbiAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHJhbmdlLCBudWxsKTtcbiAgICAgICAgICAgIHNlbGVjdGVkRm9ybWF0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMoZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdXRpbCA9IHRoaXMudXRpbDtcbiAgICAgICAgdXRpbC5zb3J0QnlEZXB0aChzZWxlY3RlZEZvcm1hdHMsIHRydWUpO1xuXG4gICAgICAgIC8vIG1lcmdlXG4gICAgICAgIGxldCBmaXJzdFNlbCA9IHNlbGVjdGVkRm9ybWF0c1swXTtcbiAgICAgICAgbGV0IGxhc3RTZWwgPSBzZWxlY3RlZEZvcm1hdHNbc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgdG9wRWwgPSAodXRpbC5pc0xpc3RDZWxsKGZpcnN0U2VsKSB8fCB1dGlsLmlzQ29tcG9uZW50KGZpcnN0U2VsKSkgJiYgIWZpcnN0U2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPyBmaXJzdFNlbC5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgOiBmaXJzdFNlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBsZXQgYm90dG9tRWwgPSAodXRpbC5pc0xpc3RDZWxsKGxhc3RTZWwpIHx8IHV0aWwuaXNDb21wb25lbnQobGFzdFNlbCkpICYmICFsYXN0U2VsLm5leHRFbGVtZW50U2libGluZyA/IGxhc3RTZWwucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmcgOiBsYXN0U2VsLm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgICBjb25zdCBpc0NvbGxhcHNlZCA9IHJhbmdlLmNvbGxhcHNlZDtcbiAgICAgICAgY29uc3Qgb3JpZ2luUmFuZ2UgPSB7XG4gICAgICAgICAgICBzYzogcmFuZ2Uuc3RhcnRDb250YWluZXIsXG4gICAgICAgICAgICBzbzogKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocmFuZ2Uuc3RhcnRDb250YWluZXIpICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwICYmIHJhbmdlLmVuZE9mZnNldCA9PT0gMSkgPyByYW5nZS5lbmRPZmZzZXQgOiByYW5nZS5zdGFydE9mZnNldCxcbiAgICAgICAgICAgIGVjOiByYW5nZS5lbmRDb250YWluZXIsXG4gICAgICAgICAgICBlbzogcmFuZ2UuZW5kT2Zmc2V0XG4gICAgICAgIH07XG4gICAgICAgIGxldCBhZnRlclJhbmdlID0gbnVsbDtcbiAgICAgICAgbGV0IGlzUmVtb3ZlID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNMaXN0KHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudCkgJiYgY3VycmVudCAhPT0gc2VsZWN0ZWRGb3JtYXRzW2ldO1xuICAgICAgICAgICAgfS5iaW5kKHV0aWwpKSkpIHtcbiAgICAgICAgICAgICAgICBpc1JlbW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUmVtb3ZlICYmICghdG9wRWwgfHwgKGZpcnN0U2VsLnRhZ05hbWUgIT09IHRvcEVsLnRhZ05hbWUgfHwgY29tbWFuZCAhPT0gdG9wRWwudGFnTmFtZS50b1VwcGVyQ2FzZSgpKSkgJiYgKCFib3R0b21FbCB8fCAobGFzdFNlbC50YWdOYW1lICE9PSBib3R0b21FbC50YWdOYW1lIHx8IGNvbW1hbmQgIT09IGJvdHRvbUVsLnRhZ05hbWUudG9VcHBlckNhc2UoKSkpKSB7XG4gICAgICAgICAgICBpZiAoZGV0YWNoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzW2pdLmNvbnRhaW5zKHNlbGVjdGVkRm9ybWF0c1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEZvcm1hdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLTsgbGVuLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGb3JtYXQgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChmaXJzdFNlbCk7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWwgPSBjdXJyZW50Rm9ybWF0ICYmIGN1cnJlbnRGb3JtYXQudGFnTmFtZSA9PT0gY29tbWFuZDtcbiAgICAgICAgICAgIGxldCByYW5nZUFyciwgdGVtcExpc3Q7XG4gICAgICAgICAgICBjb25zdCBwYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNDb21wb25lbnQoY3VycmVudCk7XG4gICAgICAgICAgICB9LmJpbmQodXRpbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghY2FuY2VsKSB0ZW1wTGlzdCA9IHV0aWwuY3JlYXRlRWxlbWVudChjb21tYW5kKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGgsIHIsIG87IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIG8gPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sIHBhc3NDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIGlmICghbyB8fCAhdXRpbC5pc0xpc3QobykpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBvO1xuICAgICAgICAgICAgICAgICAgICByYW5nZUFyciA9IHtyOiByLCBmOiBbdXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgJ0xJJyldfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAociAhPT0gbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFjaCAmJiB1dGlsLmlzTGlzdENlbGwoby5wYXJlbnROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5saXN0Ll9kZXRhY2hOZXN0ZWQuY2FsbCh0aGlzLCByYW5nZUFyci5mKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJSYW5nZSA9IHRoaXMuZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlQXJyLmZbMF0ucGFyZW50Tm9kZSwgcmFuZ2VBcnIuZiwgdGVtcExpc3QsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHNlbGVjdGVkRm9ybWF0c1tpXS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWwpIHRlbXBMaXN0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gbztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VBcnIuZi5wdXNoKHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3RlZEZvcm1hdHNbaV0sICdMSScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWNoICYmIHV0aWwuaXNMaXN0Q2VsbChvLnBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5fZGV0YWNoTmVzdGVkLmNhbGwodGhpcywgcmFuZ2VBcnIuZik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlclJhbmdlID0gdGhpcy5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VBcnIuZlswXS5wYXJlbnROb2RlLCByYW5nZUFyci5mLCB0ZW1wTGlzdCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdG9wRWxQYXJlbnQgPSB0b3BFbCA/IHRvcEVsLnBhcmVudE5vZGUgOiB0b3BFbDtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbUVsUGFyZW50ID0gYm90dG9tRWwgPyBib3R0b21FbC5wYXJlbnROb2RlIDogYm90dG9tRWw7XG4gICAgICAgICAgICB0b3BFbCA9IHRvcEVsUGFyZW50ICYmICF1dGlsLmlzV3lzaXd5Z0Rpdih0b3BFbFBhcmVudCkgJiYgdG9wRWxQYXJlbnQubm9kZU5hbWUgPT09IGNvbW1hbmQgPyB0b3BFbFBhcmVudCA6IHRvcEVsO1xuICAgICAgICAgICAgYm90dG9tRWwgPSBib3R0b21FbFBhcmVudCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYoYm90dG9tRWxQYXJlbnQpICYmIGJvdHRvbUVsUGFyZW50Lm5vZGVOYW1lID09PSBjb21tYW5kID8gYm90dG9tRWxQYXJlbnQgOiBib3R0b21FbDtcblxuICAgICAgICAgICAgY29uc3QgbWVyZ2VUb3AgPSB0b3BFbCAmJiB0b3BFbC50YWdOYW1lID09PSBjb21tYW5kO1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VCb3R0b20gPSBib3R0b21FbCAmJiBib3R0b21FbC50YWdOYW1lID09PSBjb21tYW5kO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgbGlzdCA9IG1lcmdlVG9wID8gdG9wRWwgOiB1dGlsLmNyZWF0ZUVsZW1lbnQoY29tbWFuZCk7XG4gICAgICAgICAgICBsZXQgZmlyc3RMaXN0ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBsYXN0TGlzdCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgdG9wTnVtYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBib3R0b21OdW1iZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBwYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNDb21wb25lbnQoY3VycmVudCkgJiYgIXRoaXMuaXNMaXN0KGN1cnJlbnQpO1xuICAgICAgICAgICAgfS5iaW5kKHV0aWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCwgbmV3Q2VsbCwgZlRhZywgaXNDZWxsLCBuZXh0LCBvcmlnaW5QYXJlbnQsIG5leHRQYXJlbnQsIHBhcmVudFRhZywgc2libGluZ1RhZywgcmFuZ2VUYWc7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGZUYWcgPSBzZWxlY3RlZEZvcm1hdHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGZUYWcuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgJiYgIXV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShmVGFnKSkge1xuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZlRhZyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0ID0gc2VsZWN0ZWRGb3JtYXRzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBvcmlnaW5QYXJlbnQgPSBmVGFnLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgbmV4dFBhcmVudCA9IG5leHQgPyBuZXh0LnBhcmVudE5vZGUgOiBudWxsO1xuICAgICAgICAgICAgICAgIGlzQ2VsbCA9IHV0aWwuaXNMaXN0Q2VsbChmVGFnKTtcbiAgICAgICAgICAgICAgICByYW5nZVRhZyA9IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQob3JpZ2luUGFyZW50KSA/IG9yaWdpblBhcmVudCA6IG51bGw7XG4gICAgICAgICAgICAgICAgcGFyZW50VGFnID0gaXNDZWxsICYmICF1dGlsLmlzV3lzaXd5Z0RpdihvcmlnaW5QYXJlbnQpID8gb3JpZ2luUGFyZW50LnBhcmVudE5vZGUgOiBvcmlnaW5QYXJlbnQ7XG4gICAgICAgICAgICAgICAgc2libGluZ1RhZyA9IGlzQ2VsbCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYob3JpZ2luUGFyZW50KSA/ICghbmV4dCB8fCB1dGlsLmlzTGlzdENlbGwocGFyZW50VGFnKSkgPyBvcmlnaW5QYXJlbnQgOiBvcmlnaW5QYXJlbnQubmV4dFNpYmxpbmcgOiBmVGFnLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgbmV3Q2VsbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcbiAgICAgICAgICAgICAgICB1dGlsLmNvcHlGb3JtYXRBdHRyaWJ1dGVzKG5ld0NlbGwsIGZUYWcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09ICAwICYmIG9yaWdpblJhbmdlLnNjID09PSBmVGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpblJhbmdlLnNjID0gbmV3Q2VsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGxlbiAtIDEgJiYgb3JpZ2luUmFuZ2UuZWMgPT09IGZUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luUmFuZ2UuZWMgPSBuZXdDZWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQ29tcG9uZW50KGZUYWcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzSFIgPSAvXkhSJC9pLnRlc3QoZlRhZy5ub2RlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNIUikgbmV3Q2VsbC5pbm5lckhUTUwgPSAnPGJyPic7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbGwuaW5uZXJIVE1MICs9IGZUYWcub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIUikgbmV3Q2VsbC5pbm5lckhUTUwgKz0gJzxicj4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZDaGlsZHJlbiA9IGZUYWcuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGZDaGlsZHJlblswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChmQ2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobmV3Q2VsbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW5leHQpIGxhc3RMaXN0ID0gbGlzdDtcbiAgICAgICAgICAgICAgICBpZiAoIW5leHQgfHwgcGFyZW50VGFnICE9PSBuZXh0UGFyZW50IHx8IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoc2libGluZ1RhZykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdExpc3QpIGZpcnN0TGlzdCA9IGxpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoIW1lcmdlVG9wIHx8ICFuZXh0IHx8IHBhcmVudFRhZyAhPT0gbmV4dFBhcmVudCkgJiYgIShuZXh0ICYmIHV0aWwuaXNMaXN0KG5leHRQYXJlbnQpICYmIG5leHRQYXJlbnQgPT09IG9yaWdpblBhcmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXN0LnBhcmVudE5vZGUgIT09IHBhcmVudFRhZykgcGFyZW50VGFnLmluc2VydEJlZm9yZShsaXN0LCBzaWJsaW5nVGFnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmVGFnKTtcbiAgICAgICAgICAgICAgICBpZiAobWVyZ2VUb3AgJiYgdG9wTnVtYmVyID09PSBudWxsKSB0b3BOdW1iZXIgPSBsaXN0LmNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgKHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KG5leHRQYXJlbnQsIHBhc3NDb21wb25lbnQpICE9PSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChvcmlnaW5QYXJlbnQsIHBhc3NDb21wb25lbnQpIHx8ICh1dGlsLmlzTGlzdChuZXh0UGFyZW50KSAmJiB1dGlsLmlzTGlzdChvcmlnaW5QYXJlbnQpICYmIHV0aWwuZ2V0RWxlbWVudERlcHRoKG5leHRQYXJlbnQpICE9PSB1dGlsLmdldEVsZW1lbnREZXB0aChvcmlnaW5QYXJlbnQpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdCA9IHV0aWwuY3JlYXRlRWxlbWVudChjb21tYW5kKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VUYWcgJiYgcmFuZ2VUYWcuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB1dGlsLnJlbW92ZUl0ZW0ocmFuZ2VUYWcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9wTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RMaXN0ID0gZmlyc3RMaXN0LmNoaWxkcmVuW3RvcE51bWJlcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXJnZUJvdHRvbSkge1xuICAgICAgICAgICAgICAgIGJvdHRvbU51bWJlciA9IGxpc3QuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBsaXN0LmlubmVySFRNTCArPSBib3R0b21FbC5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgbGFzdExpc3QgPSBsaXN0LmNoaWxkcmVuW2JvdHRvbU51bWJlcl07XG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGJvdHRvbUVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuICFpc0NvbGxhcHNlZCA/IG9yaWdpblJhbmdlIDogYWZ0ZXJSYW5nZTtcbiAgICB9LFxuXG4gICAgX2RldGFjaE5lc3RlZDogZnVuY3Rpb24gKGNlbGxzKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gY2VsbHNbMF07XG4gICAgICAgIGNvbnN0IGxhc3QgPSBjZWxsc1tjZWxscy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGxhc3QubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBjb25zdCBvcmlnaW5MaXN0ID0gZmlyc3QucGFyZW50Tm9kZTtcbiAgICAgICAgY29uc3Qgc2libGluZyA9IG9yaWdpbkxpc3QucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBvcmlnaW5MaXN0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcblxuICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNlbGxzLmxlbmd0aDsgYyA8IGNMZW47IGMrKykge1xuICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2VsbHNbY10sIHNpYmxpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgJiYgb3JpZ2luTGlzdC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdMaXN0ID0gb3JpZ2luTGlzdC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBvcmlnaW5MaXN0LmNoaWxkTm9kZXM7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMudXRpbC5nZXRQb3NpdGlvbkluZGV4KG5leHQpO1xuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIG5ld0xpc3QuYXBwZW5kQ2hpbGQoY2hpbGRyZW5baW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3QuYXBwZW5kQ2hpbGQobmV3TGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luTGlzdC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHRoaXMudXRpbC5yZW1vdmVJdGVtKG9yaWdpbkxpc3QpO1xuICAgICAgICB0aGlzLnV0aWwubWVyZ2VTYW1lVGFncyhwYXJlbnROb2RlKTtcblxuICAgICAgICBjb25zdCBlZGdlID0gdGhpcy51dGlsLmdldEVkZ2VDaGlsZE5vZGVzKGZpcnN0LCBsYXN0KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2M6IGZpcnN0LnBhcmVudE5vZGUsXG4gICAgICAgICAgICBzYzogZWRnZS5zYyxcbiAgICAgICAgICAgIGVjOiBlZGdlLmVjXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGVkaXRJbnNpZGVMaXN0OiBmdW5jdGlvbiAocmVtb3ZlLCBzZWxlY3RlZENlbGxzKSB7XG4gICAgICAgIHNlbGVjdGVkQ2VsbHMgPSAhc2VsZWN0ZWRDZWxscyA/IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRoaXMuaXNMaXN0Q2VsbChlbCk7IH0uYmluZCh0aGlzLnV0aWwpKSA6IHNlbGVjdGVkQ2VsbHM7XG4gICAgICAgIGNvbnN0IGNlbGxzTGVuID0gc2VsZWN0ZWRDZWxscy5sZW5ndGg7XG4gICAgICAgIGlmIChjZWxsc0xlbiA9PT0gMCB8fCAoIXJlbW92ZSAmJiAoIXRoaXMudXRpbC5pc0xpc3RDZWxsKHNlbGVjdGVkQ2VsbHNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZykgJiYgIXRoaXMudXRpbC5pc0xpc3RDZWxsKHNlbGVjdGVkQ2VsbHNbY2VsbHNMZW4gLSAxXS5uZXh0RWxlbWVudFNpYmxpbmcpKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2M6IHNlbGVjdGVkQ2VsbHNbMF0sXG4gICAgICAgICAgICAgICAgc286IDAsXG4gICAgICAgICAgICAgICAgZWM6IHNlbGVjdGVkQ2VsbHNbY2VsbHNMZW4gLSAxXSxcbiAgICAgICAgICAgICAgICBlbzogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvcmlnaW5MaXN0ID0gc2VsZWN0ZWRDZWxsc1swXS5wYXJlbnROb2RlO1xuICAgICAgICBsZXQgbGFzdENlbGwgPSBzZWxlY3RlZENlbGxzW2NlbGxzTGVuIC0gMV07XG4gICAgICAgIGxldCByYW5nZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgICAgaWYgKG9yaWdpbkxpc3QgIT09IGxhc3RDZWxsLnBhcmVudE5vZGUgJiYgdGhpcy51dGlsLmlzTGlzdChsYXN0Q2VsbC5wYXJlbnROb2RlLnBhcmVudE5vZGUpICYmIGxhc3RDZWxsLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgICAgICAgICAgIGxhc3RDZWxsID0gbGFzdENlbGwubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIHdoaWxlIChsYXN0Q2VsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENlbGxzLnB1c2gobGFzdENlbGwpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0Q2VsbCA9IGxhc3RDZWxsLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYW5nZSA9IHRoaXMucGx1Z2lucy5saXN0LmVkaXRMaXN0LmNhbGwodGhpcywgb3JpZ2luTGlzdC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpLCBzZWxlY3RlZENlbGxzLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpbm5lckxpc3QgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudChvcmlnaW5MaXN0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gc2VsZWN0ZWRDZWxsc1swXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgbGV0IG5leHQgPSBsYXN0Q2VsbC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBjb25zdCBub2RlUGF0aCA9IHsgczogbnVsbCwgZTogbnVsbCwgc2w6IG9yaWdpbkxpc3QsIGVsOiBvcmlnaW5MaXN0IH07XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjZWxsc0xlbiwgYzsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYyA9IHNlbGVjdGVkQ2VsbHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGMucGFyZW50Tm9kZSAhPT0gb3JpZ2luTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5faW5zaWVkTGlzdC5jYWxsKHRoaXMsIG9yaWdpbkxpc3QsIGlubmVyTGlzdCwgcHJldiwgbmV4dCwgbm9kZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5MaXN0ID0gYy5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBpbm5lckxpc3QgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudChvcmlnaW5MaXN0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJldiA9IGMucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgICAgICAgICBuZXh0ID0gYy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgaW5uZXJMaXN0LmFwcGVuZENoaWxkKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5faW5zaWVkTGlzdC5jYWxsKHRoaXMsIG9yaWdpbkxpc3QsIGlubmVyTGlzdCwgcHJldiwgbmV4dCwgbm9kZVBhdGgpO1xuXG4gICAgICAgICAgICBjb25zdCBzYyA9IHRoaXMudXRpbC5nZXROb2RlRnJvbVBhdGgobm9kZVBhdGgucywgbm9kZVBhdGguc2wpO1xuICAgICAgICAgICAgY29uc3QgZWMgPSB0aGlzLnV0aWwuZ2V0Tm9kZUZyb21QYXRoKG5vZGVQYXRoLmUsIG5vZGVQYXRoLmVsKTtcbiAgICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHNjOiBzYyxcbiAgICAgICAgICAgICAgICBzbzogMCxcbiAgICAgICAgICAgICAgICBlYzogZWMsXG4gICAgICAgICAgICAgICAgZW86IGVjLnRleHRDb250ZW50Lmxlbmd0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICB9LFxuXG4gICAgX2luc2llZExpc3Q6IGZ1bmN0aW9uIChvcmlnaW5MaXN0LCBpbm5lckxpc3QsIHByZXYsIG5leHQsIG5vZGVQYXRoKSB7XG4gICAgICAgIGxldCBpbnNlcnRQcmV2ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHByZXYgJiYgaW5uZXJMaXN0LnRhZ05hbWUgPT09IHByZXYudGFnTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBpbm5lckxpc3QuY2hpbGRyZW47XG4gICAgICAgICAgICB3aGlsZSAoY2hpbGRyZW5bMF0pIHtcbiAgICAgICAgICAgICAgICBwcmV2LmFwcGVuZENoaWxkKGNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5uZXJMaXN0ID0gcHJldjtcbiAgICAgICAgICAgIGluc2VydFByZXYgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgJiYgaW5uZXJMaXN0LnRhZ05hbWUgPT09IG5leHQudGFnTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBuZXh0LmNoaWxkcmVuO1xuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJMaXN0LmFwcGVuZENoaWxkKGNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IG5leHQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgbmV4dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5leHQpO1xuICAgICAgICAgICAgbmV4dCA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWluc2VydFByZXYpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuaXNMaXN0Q2VsbChwcmV2KSkge1xuICAgICAgICAgICAgICAgIG9yaWdpbkxpc3QgPSBwcmV2O1xuICAgICAgICAgICAgICAgIG5leHQgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcmlnaW5MaXN0Lmluc2VydEJlZm9yZShpbm5lckxpc3QsIG5leHQpO1xuXG4gICAgICAgICAgICBpZiAoIW5vZGVQYXRoLnMpIHtcbiAgICAgICAgICAgICAgICBub2RlUGF0aC5zID0gdGhpcy51dGlsLmdldE5vZGVQYXRoKGlubmVyTGlzdC5maXJzdEVsZW1lbnRDaGlsZC5maXJzdENoaWxkLCBvcmlnaW5MaXN0LCBudWxsKTtcbiAgICAgICAgICAgICAgICBub2RlUGF0aC5zbCA9IG9yaWdpbkxpc3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNsUGF0aCA9IG9yaWdpbkxpc3QuY29udGFpbnMobm9kZVBhdGguc2wpID8gdGhpcy51dGlsLmdldE5vZGVQYXRoKG5vZGVQYXRoLnNsLCBvcmlnaW5MaXN0KSA6IG51bGw7XG4gICAgICAgICAgICBub2RlUGF0aC5lID0gdGhpcy51dGlsLmdldE5vZGVQYXRoKGlubmVyTGlzdC5sYXN0RWxlbWVudENoaWxkLmZpcnN0Q2hpbGQsIG9yaWdpbkxpc3QsIG51bGwpO1xuICAgICAgICAgICAgbm9kZVBhdGguZWwgPSBvcmlnaW5MaXN0O1xuXG4gICAgICAgICAgICB0aGlzLnV0aWwubWVyZ2VTYW1lVGFncyhvcmlnaW5MaXN0LCBbbm9kZVBhdGgucywgbm9kZVBhdGguZSwgc2xQYXRoXSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy51dGlsLm1lcmdlTmVzdGVkVGFncyhvcmlnaW5MaXN0KTtcbiAgICAgICAgICAgIGlmIChzbFBhdGgpIG5vZGVQYXRoLnNsID0gdGhpcy51dGlsLmdldE5vZGVGcm9tUGF0aChzbFBhdGgsIG9yaWdpbkxpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlubmVyTGlzdDtcbiAgICB9LFxuXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBsZXQgY29tbWFuZCA9ICcnO1xuXG4gICAgICAgIHdoaWxlICghY29tbWFuZCAmJiAhL15VTCQvaS50ZXN0KHRhcmdldC50YWdOYW1lKSkge1xuICAgICAgICAgICAgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcblxuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMucGx1Z2lucy5saXN0LmVkaXRMaXN0LmNhbGwodGhpcywgY29tbWFuZCwgbnVsbCwgZmFsc2UpO1xuICAgICAgICBpZiAocmFuZ2UpIHRoaXMuc2V0UmFuZ2UocmFuZ2Uuc2MsIHJhbmdlLnNvLCByYW5nZS5lYywgcmFuZ2UuZW8pO1xuXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xuXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsibmFtZSIsImRpc3BsYXkiLCJhZGQiLCJjb3JlIiwidGFyZ2V0RWxlbWVudCIsImNvbnRleHQiLCJsaXN0IiwidGFyZ2V0QnV0dG9uIiwiX2xpc3QiLCJjdXJyZW50TGlzdCIsImljb25zIiwiYnVsbGV0cyIsImxpc3RfYnVsbGV0cyIsIm51bWJlciIsImxpc3RfbnVtYmVyIiwibGlzdERpdiIsInNldFN1Ym1lbnUiLCJsaXN0VWwiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBpY2t1cCIsImJpbmQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5pdE1lbnVUYXJnZXQiLCJsYW5nIiwidXRpbCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJ0b29sYmFyIiwib3JkZXJMaXN0IiwidW5vcmRlckxpc3QiLCJhY3RpdmUiLCJlbGVtZW50IiwiYnV0dG9uIiwiaWNvbiIsImZpcnN0RWxlbWVudENoaWxkIiwiaXNMaXN0Iiwibm9kZU5hbWUiLCJzZXRBdHRyaWJ1dGUiLCJhZGRDbGFzcyIsInRlc3QiLCJjaGFuZ2VFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJvbiIsImxpc3RDb250ZXh0IiwiZ2V0QXR0cmlidXRlIiwiaSIsImxlbiIsImxlbmd0aCIsImVkaXRMaXN0IiwiY29tbWFuZCIsInNlbGVjdGVkQ2VsbHMiLCJkZXRhY2giLCJyYW5nZSIsImdldFJhbmdlIiwic2VsZWN0ZWRGb3JtYXRzIiwiZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMiLCJnZXRSYW5nZV9hZGRMaW5lIiwic29ydEJ5RGVwdGgiLCJmaXJzdFNlbCIsImxhc3RTZWwiLCJ0b3BFbCIsImlzTGlzdENlbGwiLCJpc0NvbXBvbmVudCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwYXJlbnROb2RlIiwiYm90dG9tRWwiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJpc0NvbGxhcHNlZCIsImNvbGxhcHNlZCIsIm9yaWdpblJhbmdlIiwic2MiLCJzdGFydENvbnRhaW5lciIsInNvIiwiZW5kQ29udGFpbmVyIiwib25seVplcm9XaWR0aFNwYWNlIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJlYyIsImVvIiwiYWZ0ZXJSYW5nZSIsImlzUmVtb3ZlIiwiZ2V0UmFuZ2VGb3JtYXRFbGVtZW50IiwiY3VycmVudCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsImoiLCJjb250YWlucyIsInNwbGljZSIsImN1cnJlbnRGb3JtYXQiLCJjYW5jZWwiLCJyYW5nZUFyciIsInRlbXBMaXN0IiwicGFzc0NvbXBvbmVudCIsInIiLCJvIiwiZiIsImdldFBhcmVudEVsZW1lbnQiLCJwbHVnaW5zIiwiX2RldGFjaE5lc3RlZCIsImNhbGwiLCJkZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQiLCJwdXNoIiwidG9wRWxQYXJlbnQiLCJib3R0b21FbFBhcmVudCIsImlzV3lzaXd5Z0RpdiIsIm1lcmdlVG9wIiwibWVyZ2VCb3R0b20iLCJmaXJzdExpc3QiLCJsYXN0TGlzdCIsInRvcE51bWJlciIsImJvdHRvbU51bWJlciIsIm5ld0NlbGwiLCJmVGFnIiwiaXNDZWxsIiwibmV4dCIsIm9yaWdpblBhcmVudCIsIm5leHRQYXJlbnQiLCJwYXJlbnRUYWciLCJzaWJsaW5nVGFnIiwicmFuZ2VUYWciLCJjaGlsZE5vZGVzIiwiX2lzSWdub3JlTm9kZUNoYW5nZSIsInJlbW92ZUl0ZW0iLCJpc1JhbmdlRm9ybWF0RWxlbWVudCIsIm5leHRTaWJsaW5nIiwiY29weUZvcm1hdEF0dHJpYnV0ZXMiLCJpc0hSIiwib3V0ZXJIVE1MIiwiZkNoaWxkcmVuIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZHJlbiIsImdldEVsZW1lbnREZXB0aCIsImVmZmVjdE5vZGUiLCJjZWxscyIsImZpcnN0IiwibGFzdCIsIm9yaWdpbkxpc3QiLCJzaWJsaW5nIiwiYyIsImNMZW4iLCJuZXdMaXN0IiwiY2xvbmVOb2RlIiwiaW5kZXgiLCJnZXRQb3NpdGlvbkluZGV4IiwibWVyZ2VTYW1lVGFncyIsImVkZ2UiLCJnZXRFZGdlQ2hpbGROb2RlcyIsImNjIiwiZWRpdEluc2lkZUxpc3QiLCJyZW1vdmUiLCJnZXRTZWxlY3RlZEVsZW1lbnRzIiwiZmlsdGVyIiwiZWwiLCJjZWxsc0xlbiIsImxhc3RDZWxsIiwiaW5uZXJMaXN0IiwicHJldiIsIm5vZGVQYXRoIiwicyIsImUiLCJzbCIsIl9pbnNpZWRMaXN0IiwiZ2V0Tm9kZUZyb21QYXRoIiwidGV4dENvbnRlbnQiLCJpbnNlcnRQcmV2IiwidGVtcCIsInJlbW92ZUNoaWxkIiwiZ2V0Tm9kZVBhdGgiLCJmaXJzdENoaWxkIiwic2xQYXRoIiwibGFzdEVsZW1lbnRDaGlsZCIsIm1lcmdlTmVzdGVkVGFncyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwidGFyZ2V0Iiwic2V0UmFuZ2UiLCJzdWJtZW51T2ZmIiwiaGlzdG9yeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/list.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js":
/*!**********************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"paragraphStyle\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.paragraphStyle = {\n            _classList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\"ul\").addEventListener(\"click\", this.pickUp.bind(core));\n        context.paragraphStyle._classList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-format\";\n        const menuLang = core.lang.menu;\n        const defaultList = {\n            spaced: {\n                name: menuLang.spaced,\n                class: \"__se__p-spaced\",\n                _class: \"\"\n            },\n            bordered: {\n                name: menuLang.bordered,\n                class: \"__se__p-bordered\",\n                _class: \"\"\n            },\n            neon: {\n                name: menuLang.neon,\n                class: \"__se__p-neon\",\n                _class: \"\"\n            }\n        };\n        const paragraphStyles = !option.paragraphStyles || option.paragraphStyles.length === 0 ? [\n            \"spaced\",\n            \"bordered\",\n            \"neon\"\n        ] : option.paragraphStyles;\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for(let i = 0, len = paragraphStyles.length, p, name, attrs, _class; i < len; i++){\n            p = paragraphStyles[i];\n            if (typeof p === \"string\") {\n                const defaultStyle = defaultList[p.toLowerCase()];\n                if (!defaultStyle) continue;\n                p = defaultStyle;\n            }\n            name = p.name;\n            attrs = p.class ? ' class=\"' + p.class + '\"' : \"\";\n            _class = p._class;\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list' + (_class ? \" \" + _class : \"\") + '\" data-value=\"' + p.class + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + \"<div\" + attrs + \">\" + name + \"</div>\" + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const paragraphContext = this.context.paragraphStyle;\n        const paragraphList = paragraphContext._classList;\n        const currentFormat = this.util.getFormatElement(this.getSelectionNode());\n        for(let i = 0, len = paragraphList.length; i < len; i++){\n            if (this.util.hasClass(currentFormat, paragraphList[i].getAttribute(\"data-value\"))) {\n                this.util.addClass(paragraphList[i], \"active\");\n            } else {\n                this.util.removeClass(paragraphList[i], \"active\");\n            }\n        }\n    },\n    pickUp: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let value = null;\n        while(!/^UL$/i.test(target.tagName)){\n            value = target.getAttribute(\"data-value\");\n            if (value) break;\n            target = target.parentNode;\n        }\n        if (!value) return;\n        let selectedFormsts = this.getSelectedElements();\n        if (selectedFormsts.length === 0) {\n            this.getRange_addLine(this.getRange(), null);\n            selectedFormsts = this.getSelectedElements();\n            if (selectedFormsts.length === 0) return;\n        }\n        // change format class\n        const toggleClass = this.util.hasClass(target, \"active\") ? this.util.removeClass.bind(this.util) : this.util.addClass.bind(this.util);\n        for(let i = 0, len = selectedFormsts.length; i < len; i++){\n            toggleClass(selectedFormsts[i], value);\n        }\n        this.submenuOff();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL3N1Ym1lbnUvcGFyYWdyYXBoU3R5bGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRUEsaUVBQWU7SUFDWEEsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLEtBQUssU0FBVUMsSUFBSSxFQUFFQyxhQUFhO1FBQzlCLE1BQU1DLFVBQVVGLEtBQUtFLE9BQU87UUFDNUJBLFFBQVFDLGNBQWMsR0FBRztZQUNyQkMsWUFBWTtRQUNoQjtRQUVBLGdCQUFnQixHQUNoQixJQUFJQyxVQUFVLElBQUksQ0FBQ0MsVUFBVSxDQUFDTjtRQUU5Qix3QkFBd0IsR0FDeEJLLFFBQVFFLGFBQWEsQ0FBQyxNQUFNQyxnQkFBZ0IsQ0FBQyxTQUFTLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNWO1FBRXZFRSxRQUFRQyxjQUFjLENBQUNDLFVBQVUsR0FBR0MsUUFBUU0sZ0JBQWdCLENBQUM7UUFFN0QsOEJBQThCLEdBQzlCWCxLQUFLWSxjQUFjLENBQUMsSUFBSSxDQUFDZixJQUFJLEVBQUVJLGVBQWVJO1FBRTlDLGlCQUFpQixHQUNqQkEsVUFBVTtJQUNkO0lBRUFDLFlBQVksU0FBVU4sSUFBSTtRQUN0QixNQUFNYSxTQUFTYixLQUFLYyxPQUFPO1FBQzNCLE1BQU1ULFVBQVVMLEtBQUtlLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1FBQ3hDWCxRQUFRWSxTQUFTLEdBQUc7UUFFcEIsTUFBTUMsV0FBV2xCLEtBQUttQixJQUFJLENBQUNDLElBQUk7UUFDL0IsTUFBTUMsY0FBYztZQUNoQkMsUUFBUTtnQkFDSnpCLE1BQU1xQixTQUFTSSxNQUFNO2dCQUNyQkMsT0FBTztnQkFDUEMsUUFBUTtZQUNaO1lBQ0FDLFVBQVU7Z0JBQ041QixNQUFNcUIsU0FBU08sUUFBUTtnQkFDdkJGLE9BQU87Z0JBQ1BDLFFBQVE7WUFDWjtZQUNBRSxNQUFNO2dCQUNGN0IsTUFBTXFCLFNBQVNRLElBQUk7Z0JBQ25CSCxPQUFPO2dCQUNQQyxRQUFRO1lBQ1o7UUFDSjtRQUNBLE1BQU1HLGtCQUFrQixDQUFDZCxPQUFPYyxlQUFlLElBQUlkLE9BQU9jLGVBQWUsQ0FBQ0MsTUFBTSxLQUFLLElBQUk7WUFBQztZQUFVO1lBQVk7U0FBTyxHQUFHZixPQUFPYyxlQUFlO1FBRWhKLElBQUlFLE9BQU87UUFDWCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTUosZ0JBQWdCQyxNQUFNLEVBQUVJLEdBQUduQyxNQUFNb0MsT0FBT1QsUUFBUU0sSUFBSUMsS0FBS0QsSUFBSztZQUNoRkUsSUFBSUwsZUFBZSxDQUFDRyxFQUFFO1lBRXRCLElBQUksT0FBT0UsTUFBTSxVQUFVO2dCQUN2QixNQUFNRSxlQUFlYixXQUFXLENBQUNXLEVBQUVHLFdBQVcsR0FBRztnQkFDakQsSUFBSSxDQUFDRCxjQUFjO2dCQUNuQkYsSUFBSUU7WUFDUjtZQUVBckMsT0FBT21DLEVBQUVuQyxJQUFJO1lBQ2JvQyxRQUFRRCxFQUFFVCxLQUFLLEdBQUcsYUFBYVMsRUFBRVQsS0FBSyxHQUFHLE1BQU07WUFDL0NDLFNBQVNRLEVBQUVSLE1BQU07WUFFakJLLFFBQVEsU0FDSiw2Q0FBOENMLENBQUFBLFNBQVMsTUFBTUEsU0FBUSxFQUFDLElBQUssbUJBQW1CUSxFQUFFVCxLQUFLLEdBQUcsY0FBYzFCLE9BQU8sbUJBQW1CQSxPQUFPLE9BQ25KLFNBQVNvQyxRQUFRLE1BQU1wQyxPQUFPLFdBQ2xDO1FBQ1I7UUFDQWdDLFFBQVE7UUFFUnhCLFFBQVErQixTQUFTLEdBQUdQO1FBRXBCLE9BQU94QjtJQUNYO0lBRUM7O0tBRUEsR0FDRGdDLElBQUk7UUFDQSxNQUFNQyxtQkFBbUIsSUFBSSxDQUFDcEMsT0FBTyxDQUFDQyxjQUFjO1FBQ3BELE1BQU1vQyxnQkFBZ0JELGlCQUFpQmxDLFVBQVU7UUFDakQsTUFBTW9DLGdCQUFnQixJQUFJLENBQUN6QixJQUFJLENBQUMwQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNDLGdCQUFnQjtRQUV0RSxJQUFLLElBQUlaLElBQUksR0FBR0MsTUFBTVEsY0FBY1gsTUFBTSxFQUFFRSxJQUFJQyxLQUFLRCxJQUFLO1lBQ3RELElBQUksSUFBSSxDQUFDZixJQUFJLENBQUM0QixRQUFRLENBQUNILGVBQWVELGFBQWEsQ0FBQ1QsRUFBRSxDQUFDYyxZQUFZLENBQUMsZ0JBQWdCO2dCQUNoRixJQUFJLENBQUM3QixJQUFJLENBQUM4QixRQUFRLENBQUNOLGFBQWEsQ0FBQ1QsRUFBRSxFQUFFO1lBQ3pDLE9BQU87Z0JBQ0gsSUFBSSxDQUFDZixJQUFJLENBQUMrQixXQUFXLENBQUNQLGFBQWEsQ0FBQ1QsRUFBRSxFQUFFO1lBQzVDO1FBQ0o7SUFDSjtJQUVBckIsUUFBUSxTQUFVc0MsQ0FBQztRQUNmQSxFQUFFQyxjQUFjO1FBQ2hCRCxFQUFFRSxlQUFlO1FBRWpCLElBQUlDLFNBQVNILEVBQUVHLE1BQU07UUFDckIsSUFBSUMsUUFBUTtRQUVaLE1BQU8sQ0FBQyxRQUFRQyxJQUFJLENBQUNGLE9BQU9HLE9BQU8sRUFBRztZQUNsQ0YsUUFBUUQsT0FBT04sWUFBWSxDQUFDO1lBQzVCLElBQUlPLE9BQU87WUFDWEQsU0FBU0EsT0FBT0ksVUFBVTtRQUM5QjtRQUVBLElBQUksQ0FBQ0gsT0FBTztRQUVaLElBQUlJLGtCQUFrQixJQUFJLENBQUNDLG1CQUFtQjtRQUM5QyxJQUFJRCxnQkFBZ0IzQixNQUFNLEtBQUssR0FBRztZQUM5QixJQUFJLENBQUM2QixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNDLFFBQVEsSUFBSTtZQUN2Q0gsa0JBQWtCLElBQUksQ0FBQ0MsbUJBQW1CO1lBQzFDLElBQUlELGdCQUFnQjNCLE1BQU0sS0FBSyxHQUFHO1FBQ3RDO1FBRUEsc0JBQXNCO1FBQ3RCLE1BQU0rQixjQUFjLElBQUksQ0FBQzVDLElBQUksQ0FBQzRCLFFBQVEsQ0FBQ08sUUFBUSxZQUFZLElBQUksQ0FBQ25DLElBQUksQ0FBQytCLFdBQVcsQ0FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUNLLElBQUksSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQzhCLFFBQVEsQ0FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUNLLElBQUk7UUFDcEksSUFBSyxJQUFJZSxJQUFJLEdBQUdDLE1BQU13QixnQkFBZ0IzQixNQUFNLEVBQUVFLElBQUlDLEtBQUtELElBQUs7WUFDeEQ2QixZQUFZSixlQUFlLENBQUN6QixFQUFFLEVBQUVxQjtRQUNwQztRQUVBLElBQUksQ0FBQ1MsVUFBVTtRQUVmLGdCQUFnQjtRQUNoQixJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO0lBQ3RCO0FBQ0osQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvc3VibWVudS9wYXJhZ3JhcGhTdHlsZS5qcz81NTdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ3BhcmFncmFwaFN0eWxlJyxcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xuICAgICAgICBjb250ZXh0LnBhcmFncmFwaFN0eWxlID0ge1xuICAgICAgICAgICAgX2NsYXNzTGlzdDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xuICAgICAgICBsZXQgbGlzdERpdiA9IHRoaXMuc2V0U3VibWVudShjb3JlKTtcblxuICAgICAgICAvKiogYWRkIGV2ZW50IGxpc3RlbmVycyAqL1xuICAgICAgICBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2tVcC5iaW5kKGNvcmUpKTtcblxuICAgICAgICBjb250ZXh0LnBhcmFncmFwaFN0eWxlLl9jbGFzc0xpc3QgPSBsaXN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGJ1dHRvbicpO1xuXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCBsaXN0RGl2KTtcblxuICAgICAgICAvKiogZW1wdHkgbWVtb3J5ICovXG4gICAgICAgIGxpc3REaXYgPSBudWxsO1xuICAgIH0sXG5cbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBjb3JlLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLXN1Ym1lbnUgc2UtbGlzdC1sYXllciBzZS1saXN0LWZvcm1hdCc7XG5cbiAgICAgICAgY29uc3QgbWVudUxhbmcgPSBjb3JlLmxhbmcubWVudTtcbiAgICAgICAgY29uc3QgZGVmYXVsdExpc3QgPSB7XG4gICAgICAgICAgICBzcGFjZWQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBtZW51TGFuZy5zcGFjZWQsXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX19wLXNwYWNlZCcsXG4gICAgICAgICAgICAgICAgX2NsYXNzOiAnJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvcmRlcmVkOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbWVudUxhbmcuYm9yZGVyZWQsXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX19wLWJvcmRlcmVkJyxcbiAgICAgICAgICAgICAgICBfY2xhc3M6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmVvbjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG1lbnVMYW5nLm5lb24sXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdfX3NlX19wLW5lb24nLFxuICAgICAgICAgICAgICAgIF9jbGFzczogJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoU3R5bGVzID0gIW9wdGlvbi5wYXJhZ3JhcGhTdHlsZXMgfHwgb3B0aW9uLnBhcmFncmFwaFN0eWxlcy5sZW5ndGggPT09IDAgPyBbJ3NwYWNlZCcsICdib3JkZXJlZCcsICduZW9uJ10gOiBvcHRpb24ucGFyYWdyYXBoU3R5bGVzO1xuXG4gICAgICAgIGxldCBsaXN0ID0gJzxkaXYgY2xhc3M9XCJzZS1saXN0LWlubmVyXCI+PHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPic7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJhZ3JhcGhTdHlsZXMubGVuZ3RoLCBwLCBuYW1lLCBhdHRycywgX2NsYXNzOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHAgPSBwYXJhZ3JhcGhTdHlsZXNbaV07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0U3R5bGUgPSBkZWZhdWx0TGlzdFtwLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFN0eWxlKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBwID0gZGVmYXVsdFN0eWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuYW1lID0gcC5uYW1lO1xuICAgICAgICAgICAgYXR0cnMgPSBwLmNsYXNzID8gJyBjbGFzcz1cIicgKyBwLmNsYXNzICsgJ1wiJyA6ICcnO1xuICAgICAgICAgICAgX2NsYXNzID0gcC5fY2xhc3M7XG5cbiAgICAgICAgICAgIGxpc3QgKz0gJzxsaT4nICtcbiAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdCcgKyAoX2NsYXNzID8gJyAnICsgX2NsYXNzOiAnJykgKyAnXCIgZGF0YS12YWx1ZT1cIicgKyBwLmNsYXNzICsgJ1wiIHRpdGxlPVwiJyArIG5hbWUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyBuYW1lICsgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdicgKyBhdHRycyArICc+JyArIG5hbWUgKyAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPjwvbGk+JztcbiAgICAgICAgfVxuICAgICAgICBsaXN0ICs9ICc8L3VsPjwvZGl2Pic7XG5cbiAgICAgICAgbGlzdERpdi5pbm5lckhUTUwgPSBsaXN0O1xuXG4gICAgICAgIHJldHVybiBsaXN0RGl2O1xuICAgIH0sXG5cbiAgICAgLyoqXG4gICAgICogQE92ZXJyaWRlIHN1Ym1lbnVcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBwYXJhZ3JhcGhDb250ZXh0ID0gdGhpcy5jb250ZXh0LnBhcmFncmFwaFN0eWxlO1xuICAgICAgICBjb25zdCBwYXJhZ3JhcGhMaXN0ID0gcGFyYWdyYXBoQ29udGV4dC5fY2xhc3NMaXN0O1xuICAgICAgICBjb25zdCBjdXJyZW50Rm9ybWF0ID0gdGhpcy51dGlsLmdldEZvcm1hdEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCkpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJhZ3JhcGhMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy51dGlsLmhhc0NsYXNzKGN1cnJlbnRGb3JtYXQsIHBhcmFncmFwaExpc3RbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLmFkZENsYXNzKHBhcmFncmFwaExpc3RbaV0sICdhY3RpdmUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnJlbW92ZUNsYXNzKHBhcmFncmFwaExpc3RbaV0sICdhY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwaWNrVXA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICB3aGlsZSAoIS9eVUwkL2kudGVzdCh0YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSBicmVhaztcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBzZWxlY3RlZEZvcm1zdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMoKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkRm9ybXN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UmFuZ2VfYWRkTGluZSh0aGlzLmdldFJhbmdlKCksIG51bGwpO1xuICAgICAgICAgICAgc2VsZWN0ZWRGb3Jtc3RzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3Jtc3RzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hhbmdlIGZvcm1hdCBjbGFzc1xuICAgICAgICBjb25zdCB0b2dnbGVDbGFzcyA9IHRoaXMudXRpbC5oYXNDbGFzcyh0YXJnZXQsICdhY3RpdmUnKSA/IHRoaXMudXRpbC5yZW1vdmVDbGFzcy5iaW5kKHRoaXMudXRpbCkgOiB0aGlzLnV0aWwuYWRkQ2xhc3MuYmluZCh0aGlzLnV0aWwpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRGb3Jtc3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxlY3RlZEZvcm1zdHNbaV0sIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3VibWVudU9mZigpO1xuXG4gICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsibmFtZSIsImRpc3BsYXkiLCJhZGQiLCJjb3JlIiwidGFyZ2V0RWxlbWVudCIsImNvbnRleHQiLCJwYXJhZ3JhcGhTdHlsZSIsIl9jbGFzc0xpc3QiLCJsaXN0RGl2Iiwic2V0U3VibWVudSIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwicGlja1VwIiwiYmluZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbml0TWVudVRhcmdldCIsIm9wdGlvbiIsIm9wdGlvbnMiLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIm1lbnVMYW5nIiwibGFuZyIsIm1lbnUiLCJkZWZhdWx0TGlzdCIsInNwYWNlZCIsImNsYXNzIiwiX2NsYXNzIiwiYm9yZGVyZWQiLCJuZW9uIiwicGFyYWdyYXBoU3R5bGVzIiwibGVuZ3RoIiwibGlzdCIsImkiLCJsZW4iLCJwIiwiYXR0cnMiLCJkZWZhdWx0U3R5bGUiLCJ0b0xvd2VyQ2FzZSIsImlubmVySFRNTCIsIm9uIiwicGFyYWdyYXBoQ29udGV4dCIsInBhcmFncmFwaExpc3QiLCJjdXJyZW50Rm9ybWF0IiwiZ2V0Rm9ybWF0RWxlbWVudCIsImdldFNlbGVjdGlvbk5vZGUiLCJoYXNDbGFzcyIsImdldEF0dHJpYnV0ZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0YXJnZXQiLCJ2YWx1ZSIsInRlc3QiLCJ0YWdOYW1lIiwicGFyZW50Tm9kZSIsInNlbGVjdGVkRm9ybXN0cyIsImdldFNlbGVjdGVkRWxlbWVudHMiLCJnZXRSYW5nZV9hZGRMaW5lIiwiZ2V0UmFuZ2UiLCJ0b2dnbGVDbGFzcyIsInN1Ym1lbnVPZmYiLCJoaXN0b3J5IiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/table.js":
/*!*************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/table.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"table\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        let contextTable = context.table = {\n            _element: null,\n            _tdElement: null,\n            _trElement: null,\n            _trElements: null,\n            _tableXY: [],\n            _maxWidth: true,\n            _fixedColumn: false,\n            _rtl: core.options.rtl,\n            cellControllerTop: core.options.tableCellControllerPosition === \"top\",\n            resizeText: null,\n            headerButton: null,\n            mergeButton: null,\n            splitButton: null,\n            splitMenu: null,\n            maxText: core.lang.controller.maxSize,\n            minText: core.lang.controller.minSize,\n            _physical_cellCnt: 0,\n            _logical_cellCnt: 0,\n            _rowCnt: 0,\n            _rowIndex: 0,\n            _physical_cellIndex: 0,\n            _logical_cellIndex: 0,\n            _current_colSpan: 0,\n            _current_rowSpan: 0,\n            icons: {\n                expansion: core.icons.expansion,\n                reduction: core.icons.reduction\n            }\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let tablePicker = listDiv.querySelector(\".se-controller-table-picker\");\n        contextTable.tableHighlight = listDiv.querySelector(\".se-table-size-highlighted\");\n        contextTable.tableUnHighlight = listDiv.querySelector(\".se-table-size-unhighlighted\");\n        contextTable.tableDisplay = listDiv.querySelector(\".se-table-size-display\");\n        if (core.options.rtl) contextTable.tableHighlight.style.left = 10 * 18 - 13 + \"px\";\n        /** set table controller */ let tableController = this.setController_table(core);\n        contextTable.tableController = tableController;\n        contextTable.resizeButton = tableController.querySelector(\"._se_table_resize\");\n        contextTable.resizeText = tableController.querySelector(\"._se_table_resize > span > span\");\n        contextTable.columnFixedButton = tableController.querySelector(\"._se_table_fixed_column\");\n        contextTable.headerButton = tableController.querySelector(\"._se_table_header\");\n        /** set resizing */ let resizeDiv = this.setController_tableEditor(core, contextTable.cellControllerTop);\n        contextTable.resizeDiv = resizeDiv;\n        contextTable.splitMenu = resizeDiv.querySelector(\".se-btn-group-sub\");\n        contextTable.mergeButton = resizeDiv.querySelector(\"._se_table_merge_button\");\n        contextTable.splitButton = resizeDiv.querySelector(\"._se_table_split_button\");\n        contextTable.insertRowAboveButton = resizeDiv.querySelector(\"._se_table_insert_row_a\");\n        contextTable.insertRowBelowButton = resizeDiv.querySelector(\"._se_table_insert_row_b\");\n        /** add event listeners */ tablePicker.addEventListener(\"mousemove\", this.onMouseMove_tablePicker.bind(core, contextTable));\n        tablePicker.addEventListener(\"click\", this.appendTable.bind(core));\n        resizeDiv.addEventListener(\"click\", this.onClick_tableController.bind(core));\n        tableController.addEventListener(\"click\", this.onClick_tableController.bind(core));\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** append controller */ context.element.relative.appendChild(resizeDiv);\n        context.element.relative.appendChild(tableController);\n        /** empty memory */ listDiv = null, tablePicker = null, resizeDiv = null, tableController = null, contextTable = null;\n    },\n    setSubmenu: function(core) {\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-selector-table\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-table-size\">' + '<div class=\"se-table-size-picker se-controller-table-picker\"></div>' + '<div class=\"se-table-size-highlighted\"></div>' + '<div class=\"se-table-size-unhighlighted\"></div>' + \"</div>\" + '<div class=\"se-table-size-display\">1 x 1</div>';\n        return listDiv;\n    },\n    setController_table: function(core) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const tableResize = core.util.createElement(\"DIV\");\n        tableResize.className = \"se-controller se-controller-table\";\n        tableResize.innerHTML = \"\" + \"<div>\" + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"resize\" class=\"se-btn se-tooltip _se_table_resize\">' + icons.expansion + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.maxSize + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"layout\" class=\"se-btn se-tooltip _se_table_fixed_column\">' + icons.fixed_column_width + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.fixedColumnWidth + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"header\" class=\"se-btn se-tooltip _se_table_header\">' + icons.table_header + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.tableHeader + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"remove\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + \"</span></span>\" + \"</button>\" + \"</div>\" + \"</div>\";\n        return tableResize;\n    },\n    setController_tableEditor: function(core, cellControllerTop) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const tableResize = core.util.createElement(\"DIV\");\n        tableResize.className = \"se-controller se-controller-table-cell\";\n        tableResize.innerHTML = (cellControllerTop ? \"\" : '<div class=\"se-arrow se-arrow-up\"></div>') + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"insert\" data-value=\"row\" data-option=\"up\" class=\"se-btn se-tooltip _se_table_insert_row_a\">' + icons.insert_row_above + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertRowAbove + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"insert\" data-value=\"row\" data-option=\"down\" class=\"se-btn se-tooltip _se_table_insert_row_b\">' + icons.insert_row_below + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertRowBelow + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" data-value=\"row\" class=\"se-btn se-tooltip\">' + icons.delete_row + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.deleteRow + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"merge\" class=\"_se_table_merge_button se-btn se-tooltip\" disabled>' + icons.merge_cell + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mergeCells + \"</span></span>\" + \"</button>\" + \"</div>\" + '<div class=\"se-btn-group\" style=\"padding-top: 0;\">' + '<button type=\"button\" data-command=\"insert\" data-value=\"cell\" data-option=\"left\" class=\"se-btn se-tooltip\">' + icons.insert_column_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertColumnBefore + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"insert\" data-value=\"cell\" data-option=\"right\" class=\"se-btn se-tooltip\">' + icons.insert_column_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertColumnAfter + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" data-value=\"cell\" class=\"se-btn se-tooltip\">' + icons.delete_column + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.deleteColumn + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"onsplit\" class=\"_se_table_split_button se-btn se-tooltip\">' + icons.split_cell + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.splitCells + \"</span></span>\" + \"</button>\" + '<div class=\"se-btn-group-sub sun-editor-common se-list-layer se-table-split\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li class=\"se-btn-list\" data-command=\"split\" data-value=\"vertical\" style=\"line-height:32px;\" title=\"' + lang.controller.VerticalSplit + '\" aria-label=\"' + lang.controller.VerticalSplit + '\">' + lang.controller.VerticalSplit + \"</li>\" + '<li class=\"se-btn-list\" data-command=\"split\" data-value=\"horizontal\" style=\"line-height:32px;\" title=\"' + lang.controller.HorizontalSplit + '\" aria-label=\"' + lang.controller.HorizontalSplit + '\">' + lang.controller.HorizontalSplit + \"</li>\" + \"</ul>\" + \"</div>\" + \"</div>\" + \"</div>\";\n        return tableResize;\n    },\n    appendTable: function() {\n        const oTable = this.util.createElement(\"TABLE\");\n        const createCells = this.plugins.table.createCells;\n        const x = this.context.table._tableXY[0];\n        let y = this.context.table._tableXY[1];\n        let tableHTML = \"<tbody>\";\n        while(y > 0){\n            tableHTML += \"<tr>\" + createCells.call(this, \"td\", x) + \"</tr>\";\n            --y;\n        }\n        tableHTML += \"</tbody>\";\n        oTable.innerHTML = tableHTML;\n        const changed = this.insertComponent(oTable, false, true, false);\n        if (changed) {\n            const firstTd = oTable.querySelector(\"td div\");\n            this.setRange(firstTd, 0, firstTd, 0);\n            this.plugins.table.reset_table_picker.call(this);\n        }\n    },\n    createCells: function(nodeName, cnt, returnElement) {\n        nodeName = nodeName.toLowerCase();\n        if (!returnElement) {\n            let cellsHTML = \"\";\n            while(cnt > 0){\n                cellsHTML += \"<\" + nodeName + \"><div><br></div></\" + nodeName + \">\";\n                cnt--;\n            }\n            return cellsHTML;\n        } else {\n            const cell = this.util.createElement(nodeName);\n            cell.innerHTML = \"<div><br></div>\";\n            return cell;\n        }\n    },\n    onMouseMove_tablePicker: function(contextTable, e) {\n        e.stopPropagation();\n        let x = this._w.Math.ceil(e.offsetX / 18);\n        let y = this._w.Math.ceil(e.offsetY / 18);\n        x = x < 1 ? 1 : x;\n        y = y < 1 ? 1 : y;\n        if (contextTable._rtl) {\n            contextTable.tableHighlight.style.left = x * 18 - 13 + \"px\";\n            x = 11 - x;\n        }\n        contextTable.tableHighlight.style.width = x + \"em\";\n        contextTable.tableHighlight.style.height = y + \"em\";\n        // let x_u = x < 5 ? 5 : (x > 9 ? 10 : x + 1);\n        // let y_u = y < 5 ? 5 : (y > 9 ? 10 : y + 1);\n        // contextTable.tableUnHighlight.style.width = x_u + 'em';\n        // contextTable.tableUnHighlight.style.height = y_u + 'em';\n        this.util.changeTxt(contextTable.tableDisplay, x + \" x \" + y);\n        contextTable._tableXY = [\n            x,\n            y\n        ];\n    },\n    reset_table_picker: function() {\n        if (!this.context.table.tableHighlight) return;\n        const highlight = this.context.table.tableHighlight.style;\n        const unHighlight = this.context.table.tableUnHighlight.style;\n        highlight.width = \"1em\";\n        highlight.height = \"1em\";\n        unHighlight.width = \"10em\";\n        unHighlight.height = \"10em\";\n        this.util.changeTxt(this.context.table.tableDisplay, \"1 x 1\");\n        this.submenuOff();\n    },\n    init: function() {\n        const contextTable = this.context.table;\n        const tablePlugin = this.plugins.table;\n        tablePlugin._removeEvents.call(this);\n        if (tablePlugin._selectedTable) {\n            const selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n            for(let i = 0, len = selectedCells.length; i < len; i++){\n                this.util.removeClass(selectedCells[i], \"se-table-selected-cell\");\n            }\n        }\n        tablePlugin._toggleEditor.call(this, true);\n        contextTable._element = null;\n        contextTable._tdElement = null;\n        contextTable._trElement = null;\n        contextTable._trElements = null;\n        contextTable._tableXY = [];\n        contextTable._maxWidth = true;\n        contextTable._fixedColumn = false;\n        contextTable._physical_cellCnt = 0;\n        contextTable._logical_cellCnt = 0;\n        contextTable._rowCnt = 0;\n        contextTable._rowIndex = 0;\n        contextTable._physical_cellIndex = 0;\n        contextTable._logical_cellIndex = 0;\n        contextTable._current_colSpan = 0;\n        contextTable._current_rowSpan = 0;\n        tablePlugin._shift = false;\n        tablePlugin._selectedCells = null;\n        tablePlugin._selectedTable = null;\n        tablePlugin._ref = null;\n        tablePlugin._fixedCell = null;\n        tablePlugin._selectedCell = null;\n        tablePlugin._fixedCellName = null;\n    },\n    /** table edit controller */ call_controller_tableEdit: function(tdElement) {\n        const tablePlugin = this.plugins.table;\n        const contextTable = this.context.table;\n        if (!this.getSelection().isCollapsed && !tablePlugin._selectedCell) {\n            this.controllersOff();\n            this.util.removeClass(tdElement, \"se-table-selected-cell\");\n            return;\n        }\n        const tableElement = contextTable._element || this.plugins.table._selectedTable || this.util.getParentElement(tdElement, \"TABLE\");\n        contextTable._maxWidth = this.util.hasClass(tableElement, \"se-table-size-100\") || tableElement.style.width === \"100%\" || !tableElement.style.width && !this.util.hasClass(tableElement, \"se-table-size-auto\");\n        contextTable._fixedColumn = this.util.hasClass(tableElement, \"se-table-layout-fixed\") || tableElement.style.tableLayout === \"fixed\";\n        tablePlugin.setTableStyle.call(this, contextTable._maxWidth ? \"width|column\" : \"width\");\n        tablePlugin.setPositionControllerTop.call(this, tableElement);\n        tablePlugin.setPositionControllerDiv.call(this, tdElement, tablePlugin._shift);\n        if (!tablePlugin._shift) this.controllersOn(contextTable.resizeDiv, contextTable.tableController, tablePlugin.init.bind(this), tdElement, \"table\");\n    },\n    setPositionControllerTop: function(tableElement) {\n        this.setControllerPosition(this.context.table.tableController, tableElement, \"top\", {\n            left: 0,\n            top: 0\n        });\n    },\n    setPositionControllerDiv: function(tdElement, reset) {\n        const contextTable = this.context.table;\n        const resizeDiv = contextTable.resizeDiv;\n        this.plugins.table.setCellInfo.call(this, tdElement, reset);\n        if (contextTable.cellControllerTop) {\n            this.setControllerPosition(resizeDiv, contextTable._element, \"top\", {\n                left: contextTable.tableController.offsetWidth,\n                top: 0\n            });\n        } else {\n            this.setControllerPosition(resizeDiv, tdElement, \"bottom\", {\n                left: 0,\n                top: 0\n            });\n        }\n    },\n    setCellInfo: function(tdElement, reset) {\n        const contextTable = this.context.table;\n        const table = contextTable._element = this.plugins.table._selectedTable || this.util.getParentElement(tdElement, \"TABLE\");\n        if (/THEAD/i.test(table.firstElementChild.nodeName)) {\n            this.util.addClass(contextTable.headerButton, \"active\");\n        } else {\n            this.util.removeClass(contextTable.headerButton, \"active\");\n        }\n        if (reset || contextTable._physical_cellCnt === 0) {\n            if (contextTable._tdElement !== tdElement) {\n                contextTable._tdElement = tdElement;\n                contextTable._trElement = tdElement.parentNode;\n            }\n            const rows = contextTable._trElements = table.rows;\n            const cellIndex = tdElement.cellIndex;\n            let cellCnt = 0;\n            for(let i = 0, cells = rows[0].cells, len = rows[0].cells.length; i < len; i++){\n                cellCnt += cells[i].colSpan;\n            }\n            // row cnt, row index\n            const rowIndex = contextTable._rowIndex = contextTable._trElement.rowIndex;\n            contextTable._rowCnt = rows.length;\n            // cell cnt, physical cell index\n            contextTable._physical_cellCnt = contextTable._trElement.cells.length;\n            contextTable._logical_cellCnt = cellCnt;\n            contextTable._physical_cellIndex = cellIndex;\n            // span\n            contextTable._current_colSpan = contextTable._tdElement.colSpan - 1;\n            contextTable._current_rowSpan - contextTable._trElement.cells[cellIndex].rowSpan - 1;\n            // find logcal cell index\n            let rowSpanArr = [];\n            let spanIndex = [];\n            for(let i = 0, cells, colSpan; i <= rowIndex; i++){\n                cells = rows[i].cells;\n                colSpan = 0;\n                for(let c = 0, cLen = cells.length, cell, cs, rs, logcalIndex; c < cLen; c++){\n                    cell = cells[c];\n                    cs = cell.colSpan - 1;\n                    rs = cell.rowSpan - 1;\n                    logcalIndex = c + colSpan;\n                    if (spanIndex.length > 0) {\n                        for(let r = 0, arr; r < spanIndex.length; r++){\n                            arr = spanIndex[r];\n                            if (arr.row > i) continue;\n                            if (logcalIndex >= arr.index) {\n                                colSpan += arr.cs;\n                                logcalIndex += arr.cs;\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            } else if (c === cLen - 1) {\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            }\n                        }\n                    }\n                    // logcal cell index\n                    if (i === rowIndex && c === cellIndex) {\n                        contextTable._logical_cellIndex = logcalIndex;\n                        break;\n                    }\n                    if (rs > 0) {\n                        rowSpanArr.push({\n                            index: logcalIndex,\n                            cs: cs + 1,\n                            rs: rs,\n                            row: -1\n                        });\n                    }\n                    colSpan += cs;\n                }\n                spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                    return a.index - b.index;\n                });\n                rowSpanArr = [];\n            }\n            rowSpanArr = null;\n            spanIndex = null;\n        }\n    },\n    editTable: function(type, option) {\n        const tablePlugin = this.plugins.table;\n        const contextTable = this.context.table;\n        const table = contextTable._element;\n        const isRow = type === \"row\";\n        if (isRow) {\n            const tableAttr = contextTable._trElement.parentNode;\n            if (/^THEAD$/i.test(tableAttr.nodeName)) {\n                if (option === \"up\") {\n                    return;\n                } else if (!tableAttr.nextElementSibling || !/^TBODY$/i.test(tableAttr.nextElementSibling.nodeName)) {\n                    table.innerHTML += \"<tbody><tr>\" + tablePlugin.createCells.call(this, \"td\", contextTable._logical_cellCnt, false) + \"</tr></tbody>\";\n                    return;\n                }\n            }\n        }\n        // multi\n        if (tablePlugin._ref) {\n            const positionCell = contextTable._tdElement;\n            const selectedCells = tablePlugin._selectedCells;\n            // multi - row\n            if (isRow) {\n                // remove row\n                if (!option) {\n                    let row = selectedCells[0].parentNode;\n                    const removeCells = [\n                        selectedCells[0]\n                    ];\n                    for(let i = 1, len = selectedCells.length, cell; i < len; i++){\n                        cell = selectedCells[i];\n                        if (row !== cell.parentNode) {\n                            removeCells.push(cell);\n                            row = cell.parentNode;\n                        }\n                    }\n                    for(let i = 0, len = removeCells.length; i < len; i++){\n                        tablePlugin.setCellInfo.call(this, removeCells[i], true);\n                        tablePlugin.editRow.call(this, option);\n                    }\n                } else {\n                    tablePlugin.setCellInfo.call(this, option === \"up\" ? selectedCells[0] : selectedCells[selectedCells.length - 1], true);\n                    tablePlugin.editRow.call(this, option, positionCell);\n                }\n            } else {\n                const firstRow = selectedCells[0].parentNode;\n                // remove cell\n                if (!option) {\n                    const removeCells = [\n                        selectedCells[0]\n                    ];\n                    for(let i = 1, len = selectedCells.length, cell; i < len; i++){\n                        cell = selectedCells[i];\n                        if (firstRow === cell.parentNode) {\n                            removeCells.push(cell);\n                        } else {\n                            break;\n                        }\n                    }\n                    for(let i = 0, len = removeCells.length; i < len; i++){\n                        tablePlugin.setCellInfo.call(this, removeCells[i], true);\n                        tablePlugin.editCell.call(this, option);\n                    }\n                } else {\n                    let rightCell = null;\n                    for(let i = 0, len = selectedCells.length - 1; i < len; i++){\n                        if (firstRow !== selectedCells[i + 1].parentNode) {\n                            rightCell = selectedCells[i];\n                            break;\n                        }\n                    }\n                    tablePlugin.setCellInfo.call(this, option === \"left\" ? selectedCells[0] : rightCell || selectedCells[0], true);\n                    tablePlugin.editCell.call(this, option, positionCell);\n                }\n            }\n            if (!option) tablePlugin.init.call(this);\n        } else {\n            tablePlugin[isRow ? \"editRow\" : \"editCell\"].call(this, option);\n        }\n        // after remove\n        if (!option) {\n            const children = table.children;\n            for(let i = 0; i < children.length; i++){\n                if (children[i].children.length === 0) {\n                    this.util.removeItem(children[i]);\n                    i--;\n                }\n            }\n            if (table.children.length === 0) this.util.removeItem(table);\n        }\n    },\n    editRow: function(option, positionResetElement) {\n        const contextTable = this.context.table;\n        const remove = !option;\n        const up = option === \"up\";\n        const originRowIndex = contextTable._rowIndex;\n        const rowIndex = remove || up ? originRowIndex : originRowIndex + contextTable._current_rowSpan + 1;\n        const sign = remove ? -1 : 1;\n        const rows = contextTable._trElements;\n        let cellCnt = contextTable._logical_cellCnt;\n        for(let i = 0, len = originRowIndex + (remove ? -1 : 0), cell; i <= len; i++){\n            cell = rows[i].cells;\n            if (cell.length === 0) return;\n            for(let c = 0, cLen = cell.length, rs, cs; c < cLen; c++){\n                rs = cell[c].rowSpan;\n                cs = cell[c].colSpan;\n                if (rs < 2 && cs < 2) continue;\n                if (rs + i > rowIndex && rowIndex > i) {\n                    cell[c].rowSpan = rs + sign;\n                    cellCnt -= cs;\n                }\n            }\n        }\n        if (remove) {\n            const next = rows[originRowIndex + 1];\n            if (next) {\n                const spanCells = [];\n                let cells = rows[originRowIndex].cells;\n                let colSpan = 0;\n                for(let i = 0, len = cells.length, cell, logcalIndex; i < len; i++){\n                    cell = cells[i];\n                    logcalIndex = i + colSpan;\n                    colSpan += cell.colSpan - 1;\n                    if (cell.rowSpan > 1) {\n                        cell.rowSpan -= 1;\n                        spanCells.push({\n                            cell: cell.cloneNode(false),\n                            index: logcalIndex\n                        });\n                    }\n                }\n                if (spanCells.length > 0) {\n                    let spanCell = spanCells.shift();\n                    cells = next.cells;\n                    colSpan = 0;\n                    for(let i = 0, len = cells.length, cell, logcalIndex; i < len; i++){\n                        cell = cells[i];\n                        logcalIndex = i + colSpan;\n                        colSpan += cell.colSpan - 1;\n                        if (logcalIndex >= spanCell.index) {\n                            i--, colSpan--;\n                            colSpan += spanCell.cell.colSpan - 1;\n                            next.insertBefore(spanCell.cell, cell);\n                            spanCell = spanCells.shift();\n                            if (!spanCell) break;\n                        }\n                    }\n                    if (spanCell) {\n                        next.appendChild(spanCell.cell);\n                        for(let i = 0, len = spanCells.length; i < len; i++){\n                            next.appendChild(spanCells[i].cell);\n                        }\n                    }\n                }\n            }\n            contextTable._element.deleteRow(rowIndex);\n        } else {\n            const newRow = contextTable._element.insertRow(rowIndex);\n            newRow.innerHTML = this.plugins.table.createCells.call(this, \"td\", cellCnt, false);\n        }\n        if (!remove) {\n            this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);\n        } else {\n            this.controllersOff();\n        }\n    },\n    editCell: function(option, positionResetElement) {\n        const contextTable = this.context.table;\n        const util = this.util;\n        const remove = !option;\n        const left = option === \"left\";\n        const colSpan = contextTable._current_colSpan;\n        const cellIndex = remove || left ? contextTable._logical_cellIndex : contextTable._logical_cellIndex + colSpan + 1;\n        const rows = contextTable._trElements;\n        let rowSpanArr = [];\n        let spanIndex = [];\n        let passCell = 0;\n        const removeCell = [];\n        const removeSpanArr = [];\n        for(let i = 0, len = contextTable._rowCnt, row, insertIndex, cells, newCell, applySpan, cellColSpan; i < len; i++){\n            row = rows[i];\n            insertIndex = cellIndex;\n            applySpan = false;\n            cells = row.cells;\n            cellColSpan = 0;\n            for(let c = 0, cell, cLen = cells.length, rs, cs, removeIndex; c < cLen; c++){\n                cell = cells[c];\n                if (!cell) break;\n                rs = cell.rowSpan - 1;\n                cs = cell.colSpan - 1;\n                if (!remove) {\n                    if (c >= insertIndex) break;\n                    if (cs > 0) {\n                        if (passCell < 1 && cs + c >= insertIndex) {\n                            cell.colSpan += 1;\n                            insertIndex = null;\n                            passCell = rs + 1;\n                            break;\n                        }\n                        insertIndex -= cs;\n                    }\n                    if (!applySpan) {\n                        for(let r = 0, arr; r < spanIndex.length; r++){\n                            arr = spanIndex[r];\n                            insertIndex -= arr.cs;\n                            arr.rs -= 1;\n                            if (arr.rs < 1) {\n                                spanIndex.splice(r, 1);\n                                r--;\n                            }\n                        }\n                        applySpan = true;\n                    }\n                } else {\n                    removeIndex = c + cellColSpan;\n                    if (spanIndex.length > 0) {\n                        const lastCell = !cells[c + 1];\n                        for(let r = 0, arr; r < spanIndex.length; r++){\n                            arr = spanIndex[r];\n                            if (arr.row > i) continue;\n                            if (removeIndex >= arr.index) {\n                                cellColSpan += arr.cs;\n                                removeIndex = c + cellColSpan;\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            } else if (lastCell) {\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            }\n                        }\n                    }\n                    if (rs > 0) {\n                        rowSpanArr.push({\n                            rs: rs,\n                            cs: cs + 1,\n                            index: removeIndex,\n                            row: -1\n                        });\n                    }\n                    if (removeIndex >= insertIndex && removeIndex + cs <= insertIndex + colSpan) {\n                        removeCell.push(cell);\n                    } else if (removeIndex <= insertIndex + colSpan && removeIndex + cs >= insertIndex) {\n                        cell.colSpan -= util.getOverlapRangeAtIndex(cellIndex, cellIndex + colSpan, removeIndex, removeIndex + cs);\n                    } else if (rs > 0 && (removeIndex < insertIndex || removeIndex + cs > insertIndex + colSpan)) {\n                        removeSpanArr.push({\n                            cell: cell,\n                            i: i,\n                            rs: i + rs\n                        });\n                    }\n                    cellColSpan += cs;\n                }\n            }\n            spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                return a.index - b.index;\n            });\n            rowSpanArr = [];\n            if (!remove) {\n                if (passCell > 0) {\n                    passCell -= 1;\n                    continue;\n                }\n                if (insertIndex !== null && cells.length > 0) {\n                    newCell = this.plugins.table.createCells.call(this, cells[0].nodeName, 0, true);\n                    newCell = row.insertBefore(newCell, cells[insertIndex]);\n                }\n            }\n        }\n        if (remove) {\n            let removeFirst, removeEnd;\n            for(let r = 0, rLen = removeCell.length, row; r < rLen; r++){\n                row = removeCell[r].parentNode;\n                util.removeItem(removeCell[r]);\n                if (row.cells.length === 0) {\n                    if (!removeFirst) removeFirst = util.getArrayIndex(rows, row);\n                    removeEnd = util.getArrayIndex(rows, row);\n                    util.removeItem(row);\n                }\n            }\n            for(let c = 0, cLen = removeSpanArr.length, rowSpanCell; c < cLen; c++){\n                rowSpanCell = removeSpanArr[c];\n                rowSpanCell.cell.rowSpan = util.getOverlapRangeAtIndex(removeFirst, removeEnd, rowSpanCell.i, rowSpanCell.rs);\n            }\n            this.controllersOff();\n        } else {\n            this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);\n        }\n    },\n    _closeSplitMenu: null,\n    openSplitMenu: function() {\n        this.util.addClass(this.context.table.splitButton, \"on\");\n        this.context.table.splitMenu.style.display = \"inline-table\";\n        this.plugins.table._closeSplitMenu = (function() {\n            this.util.removeClass(this.context.table.splitButton, \"on\");\n            this.context.table.splitMenu.style.display = \"none\";\n            this.removeDocEvent(\"click\", this.plugins.table._closeSplitMenu);\n            this.plugins.table._closeSplitMenu = null;\n        }).bind(this);\n        this.addDocEvent(\"click\", this.plugins.table._closeSplitMenu);\n    },\n    splitCells: function(direction) {\n        const util = this.util;\n        const vertical = direction === \"vertical\";\n        const contextTable = this.context.table;\n        const currentCell = contextTable._tdElement;\n        const rows = contextTable._trElements;\n        const currentRow = contextTable._trElement;\n        const index = contextTable._logical_cellIndex;\n        const rowIndex = contextTable._rowIndex;\n        const newCell = this.plugins.table.createCells.call(this, currentCell.nodeName, 0, true);\n        // vertical\n        if (vertical) {\n            const currentColSpan = currentCell.colSpan;\n            newCell.rowSpan = currentCell.rowSpan;\n            // colspan > 1\n            if (currentColSpan > 1) {\n                newCell.colSpan = this._w.Math.floor(currentColSpan / 2);\n                currentCell.colSpan = currentColSpan - newCell.colSpan;\n                currentRow.insertBefore(newCell, currentCell.nextElementSibling);\n            } else {\n                let rowSpanArr = [];\n                let spanIndex = [];\n                for(let i = 0, len = contextTable._rowCnt, cells, colSpan; i < len; i++){\n                    cells = rows[i].cells;\n                    colSpan = 0;\n                    for(let c = 0, cLen = cells.length, cell, cs, rs, logcalIndex; c < cLen; c++){\n                        cell = cells[c];\n                        cs = cell.colSpan - 1;\n                        rs = cell.rowSpan - 1;\n                        logcalIndex = c + colSpan;\n                        if (spanIndex.length > 0) {\n                            for(let r = 0, arr; r < spanIndex.length; r++){\n                                arr = spanIndex[r];\n                                if (arr.row > i) continue;\n                                if (logcalIndex >= arr.index) {\n                                    colSpan += arr.cs;\n                                    logcalIndex += arr.cs;\n                                    arr.rs -= 1;\n                                    arr.row = i + 1;\n                                    if (arr.rs < 1) {\n                                        spanIndex.splice(r, 1);\n                                        r--;\n                                    }\n                                } else if (c === cLen - 1) {\n                                    arr.rs -= 1;\n                                    arr.row = i + 1;\n                                    if (arr.rs < 1) {\n                                        spanIndex.splice(r, 1);\n                                        r--;\n                                    }\n                                }\n                            }\n                        }\n                        if (logcalIndex <= index && rs > 0) {\n                            rowSpanArr.push({\n                                index: logcalIndex,\n                                cs: cs + 1,\n                                rs: rs,\n                                row: -1\n                            });\n                        }\n                        if (cell !== currentCell && logcalIndex <= index && logcalIndex + cs >= index + currentColSpan - 1) {\n                            cell.colSpan += 1;\n                            break;\n                        }\n                        if (logcalIndex > index) break;\n                        colSpan += cs;\n                    }\n                    spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                        return a.index - b.index;\n                    });\n                    rowSpanArr = [];\n                }\n                currentRow.insertBefore(newCell, currentCell.nextElementSibling);\n            }\n        } else {\n            const currentRowSpan = currentCell.rowSpan;\n            newCell.colSpan = currentCell.colSpan;\n            // rowspan > 1\n            if (currentRowSpan > 1) {\n                newCell.rowSpan = this._w.Math.floor(currentRowSpan / 2);\n                const newRowSpan = currentRowSpan - newCell.rowSpan;\n                const rowSpanArr = [];\n                const nextRowIndex = util.getArrayIndex(rows, currentRow) + newRowSpan;\n                for(let i = 0, cells, colSpan; i < nextRowIndex; i++){\n                    cells = rows[i].cells;\n                    colSpan = 0;\n                    for(let c = 0, cLen = cells.length, cell, cs, logcalIndex; c < cLen; c++){\n                        logcalIndex = c + colSpan;\n                        if (logcalIndex >= index) break;\n                        cell = cells[c];\n                        cs = cell.rowSpan - 1;\n                        if (cs > 0 && cs + i >= nextRowIndex && logcalIndex < index) {\n                            rowSpanArr.push({\n                                index: logcalIndex,\n                                cs: cell.colSpan\n                            });\n                        }\n                        colSpan += cell.colSpan - 1;\n                    }\n                }\n                const nextRow = rows[nextRowIndex];\n                const nextCells = nextRow.cells;\n                let rs = rowSpanArr.shift();\n                for(let c = 0, cLen = nextCells.length, colSpan = 0, cell, cs, logcalIndex, insertIndex; c < cLen; c++){\n                    logcalIndex = c + colSpan;\n                    cell = nextCells[c];\n                    cs = cell.colSpan - 1;\n                    insertIndex = logcalIndex + cs + 1;\n                    if (rs && insertIndex >= rs.index) {\n                        colSpan += rs.cs;\n                        insertIndex += rs.cs;\n                        rs = rowSpanArr.shift();\n                    }\n                    if (insertIndex >= index || c === cLen - 1) {\n                        nextRow.insertBefore(newCell, cell.nextElementSibling);\n                        break;\n                    }\n                    colSpan += cs;\n                }\n                currentCell.rowSpan = newRowSpan;\n            } else {\n                newCell.rowSpan = currentCell.rowSpan;\n                const newRow = util.createElement(\"TR\");\n                newRow.appendChild(newCell);\n                for(let i = 0, cells; i < rowIndex; i++){\n                    cells = rows[i].cells;\n                    if (cells.length === 0) return;\n                    for(let c = 0, cLen = cells.length; c < cLen; c++){\n                        if (i + cells[c].rowSpan - 1 >= rowIndex) {\n                            cells[c].rowSpan += 1;\n                        }\n                    }\n                }\n                const physicalIndex = contextTable._physical_cellIndex;\n                const cells = currentRow.cells;\n                for(let c = 0, cLen = cells.length; c < cLen; c++){\n                    if (c === physicalIndex) continue;\n                    cells[c].rowSpan += 1;\n                }\n                currentRow.parentNode.insertBefore(newRow, currentRow.nextElementSibling);\n            }\n        }\n        this.focusEdge(currentCell);\n        this.plugins.table.setPositionControllerDiv.call(this, currentCell, true);\n    },\n    mergeCells: function() {\n        const tablePlugin = this.plugins.table;\n        const contextTable = this.context.table;\n        const util = this.util;\n        const ref = tablePlugin._ref;\n        const selectedCells = tablePlugin._selectedCells;\n        const mergeCell = selectedCells[0];\n        let emptyRowFirst = null;\n        let emptyRowLast = null;\n        let cs = ref.ce - ref.cs + 1;\n        let rs = ref.re - ref.rs + 1;\n        let mergeHTML = \"\";\n        let row = null;\n        for(let i = 1, len = selectedCells.length, cell, ch; i < len; i++){\n            cell = selectedCells[i];\n            if (row !== cell.parentNode) row = cell.parentNode;\n            ch = cell.children;\n            for(let c = 0, cLen = ch.length; c < cLen; c++){\n                if (util.isFormatElement(ch[c]) && util.onlyZeroWidthSpace(ch[c].textContent)) {\n                    util.removeItem(ch[c]);\n                }\n            }\n            mergeHTML += cell.innerHTML;\n            util.removeItem(cell);\n            if (row.cells.length === 0) {\n                if (!emptyRowFirst) emptyRowFirst = row;\n                else emptyRowLast = row;\n                rs -= 1;\n            }\n        }\n        if (emptyRowFirst) {\n            const rows = contextTable._trElements;\n            const rowIndexFirst = util.getArrayIndex(rows, emptyRowFirst);\n            const rowIndexLast = util.getArrayIndex(rows, emptyRowLast || emptyRowFirst);\n            const removeRows = [];\n            for(let i = 0, cells; i <= rowIndexLast; i++){\n                cells = rows[i].cells;\n                if (cells.length === 0) {\n                    removeRows.push(rows[i]);\n                    continue;\n                }\n                for(let c = 0, cLen = cells.length, cell, rs; c < cLen; c++){\n                    cell = cells[c];\n                    rs = cell.rowSpan - 1;\n                    if (rs > 0 && i + rs >= rowIndexFirst) {\n                        cell.rowSpan -= util.getOverlapRangeAtIndex(rowIndexFirst, rowIndexLast, i, i + rs);\n                    }\n                }\n            }\n            for(let i = 0, len = removeRows.length; i < len; i++){\n                util.removeItem(removeRows[i]);\n            }\n        }\n        mergeCell.innerHTML += mergeHTML;\n        mergeCell.colSpan = cs;\n        mergeCell.rowSpan = rs;\n        this.controllersOff();\n        tablePlugin.setActiveButton.call(this, true, false);\n        tablePlugin.call_controller_tableEdit.call(this, mergeCell);\n        util.addClass(mergeCell, \"se-table-selected-cell\");\n        this.focusEdge(mergeCell);\n    },\n    toggleHeader: function() {\n        const util = this.util;\n        const headerButton = this.context.table.headerButton;\n        const active = util.hasClass(headerButton, \"active\");\n        const table = this.context.table._element;\n        if (!active) {\n            const header = util.createElement(\"THEAD\");\n            header.innerHTML = \"<tr>\" + this.plugins.table.createCells.call(this, \"th\", this.context.table._logical_cellCnt, false) + \"</tr>\";\n            table.insertBefore(header, table.firstElementChild);\n        } else {\n            util.removeItem(table.querySelector(\"thead\"));\n        }\n        util.toggleClass(headerButton, \"active\");\n        if (/TH/i.test(this.context.table._tdElement.nodeName)) {\n            this.controllersOff();\n        } else {\n            this.plugins.table.setPositionControllerDiv.call(this, this.context.table._tdElement, false);\n        }\n    },\n    setTableStyle: function(styles) {\n        const contextTable = this.context.table;\n        const tableElement = contextTable._element;\n        let icon, span, sizeIcon, text;\n        if (styles.indexOf(\"width\") > -1) {\n            icon = contextTable.resizeButton.firstElementChild;\n            span = contextTable.resizeText;\n            if (!contextTable._maxWidth) {\n                sizeIcon = contextTable.icons.expansion;\n                text = contextTable.maxText;\n                contextTable.columnFixedButton.style.display = \"none\";\n                this.util.removeClass(tableElement, \"se-table-size-100\");\n                this.util.addClass(tableElement, \"se-table-size-auto\");\n            } else {\n                sizeIcon = contextTable.icons.reduction;\n                text = contextTable.minText;\n                contextTable.columnFixedButton.style.display = \"block\";\n                this.util.removeClass(tableElement, \"se-table-size-auto\");\n                this.util.addClass(tableElement, \"se-table-size-100\");\n            }\n            this.util.changeElement(icon, sizeIcon);\n            this.util.changeTxt(span, text);\n        }\n        if (styles.indexOf(\"column\") > -1) {\n            if (!contextTable._fixedColumn) {\n                this.util.removeClass(tableElement, \"se-table-layout-fixed\");\n                this.util.addClass(tableElement, \"se-table-layout-auto\");\n                this.util.removeClass(contextTable.columnFixedButton, \"active\");\n            } else {\n                this.util.removeClass(tableElement, \"se-table-layout-auto\");\n                this.util.addClass(tableElement, \"se-table-layout-fixed\");\n                this.util.addClass(contextTable.columnFixedButton, \"active\");\n            }\n        }\n    },\n    setActiveButton: function(fixedCell, selectedCell) {\n        const contextTable = this.context.table;\n        if (/^TH$/i.test(fixedCell.nodeName)) {\n            contextTable.insertRowAboveButton.setAttribute(\"disabled\", true);\n            contextTable.insertRowBelowButton.setAttribute(\"disabled\", true);\n        } else {\n            contextTable.insertRowAboveButton.removeAttribute(\"disabled\");\n            contextTable.insertRowBelowButton.removeAttribute(\"disabled\");\n        }\n        if (!selectedCell || fixedCell === selectedCell) {\n            contextTable.splitButton.removeAttribute(\"disabled\");\n            contextTable.mergeButton.setAttribute(\"disabled\", true);\n        } else {\n            contextTable.splitButton.setAttribute(\"disabled\", true);\n            contextTable.mergeButton.removeAttribute(\"disabled\");\n        }\n    },\n    // multi selecte\n    _bindOnSelect: null,\n    _bindOffSelect: null,\n    _bindOffShift: null,\n    _selectedCells: null,\n    _shift: false,\n    _fixedCell: null,\n    _fixedCellName: null,\n    _selectedCell: null,\n    _selectedTable: null,\n    _ref: null,\n    _toggleEditor: function(enabled) {\n        this.context.element.wysiwyg.setAttribute(\"contenteditable\", enabled);\n        if (enabled) this.util.removeClass(this.context.element.wysiwyg, \"se-disabled\");\n        else this.util.addClass(this.context.element.wysiwyg, \"se-disabled\");\n    },\n    _offCellMultiSelect: function(e) {\n        e.stopPropagation();\n        const tablePlugin = this.plugins.table;\n        if (!tablePlugin._shift) {\n            tablePlugin._removeEvents.call(this);\n            tablePlugin._toggleEditor.call(this, true);\n        } else if (tablePlugin._initBind) {\n            this._wd.removeEventListener(\"touchmove\", tablePlugin._initBind);\n            tablePlugin._initBind = null;\n        }\n        if (!tablePlugin._fixedCell || !tablePlugin._selectedTable) return;\n        tablePlugin.setActiveButton.call(this, tablePlugin._fixedCell, tablePlugin._selectedCell);\n        tablePlugin.call_controller_tableEdit.call(this, tablePlugin._selectedCell || tablePlugin._fixedCell);\n        tablePlugin._selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n        if (tablePlugin._selectedCell && tablePlugin._fixedCell) this.focusEdge(tablePlugin._selectedCell);\n        if (!tablePlugin._shift) {\n            tablePlugin._fixedCell = null;\n            tablePlugin._selectedCell = null;\n            tablePlugin._fixedCellName = null;\n        }\n    },\n    _onCellMultiSelect: function(e) {\n        this._antiBlur = true;\n        const tablePlugin = this.plugins.table;\n        const target = this.util.getParentElement(e.target, this.util.isCell);\n        if (tablePlugin._shift) {\n            if (target === tablePlugin._fixedCell) tablePlugin._toggleEditor.call(this, true);\n            else tablePlugin._toggleEditor.call(this, false);\n        } else if (!tablePlugin._ref) {\n            if (target === tablePlugin._fixedCell) return;\n            else tablePlugin._toggleEditor.call(this, false);\n        }\n        if (!target || target === tablePlugin._selectedCell || tablePlugin._fixedCellName !== target.nodeName || tablePlugin._selectedTable !== this.util.getParentElement(target, \"TABLE\")) {\n            return;\n        }\n        tablePlugin._selectedCell = target;\n        tablePlugin._setMultiCells.call(this, tablePlugin._fixedCell, target);\n    },\n    _setMultiCells: function(startCell, endCell) {\n        const tablePlugin = this.plugins.table;\n        const rows = tablePlugin._selectedTable.rows;\n        const util = this.util;\n        const selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n        for(let i = 0, len = selectedCells.length; i < len; i++){\n            util.removeClass(selectedCells[i], \"se-table-selected-cell\");\n        }\n        if (startCell === endCell) {\n            util.addClass(startCell, \"se-table-selected-cell\");\n            if (!tablePlugin._shift) return;\n        }\n        let findSelectedCell = true;\n        let spanIndex = [];\n        let rowSpanArr = [];\n        const ref = tablePlugin._ref = {\n            _i: 0,\n            cs: null,\n            ce: null,\n            rs: null,\n            re: null\n        };\n        for(let i = 0, len = rows.length, cells, colSpan; i < len; i++){\n            cells = rows[i].cells;\n            colSpan = 0;\n            for(let c = 0, cLen = cells.length, cell, logcalIndex, cs, rs; c < cLen; c++){\n                cell = cells[c];\n                cs = cell.colSpan - 1;\n                rs = cell.rowSpan - 1;\n                logcalIndex = c + colSpan;\n                if (spanIndex.length > 0) {\n                    for(let r = 0, arr; r < spanIndex.length; r++){\n                        arr = spanIndex[r];\n                        if (arr.row > i) continue;\n                        if (logcalIndex >= arr.index) {\n                            colSpan += arr.cs;\n                            logcalIndex += arr.cs;\n                            arr.rs -= 1;\n                            arr.row = i + 1;\n                            if (arr.rs < 1) {\n                                spanIndex.splice(r, 1);\n                                r--;\n                            }\n                        } else if (c === cLen - 1) {\n                            arr.rs -= 1;\n                            arr.row = i + 1;\n                            if (arr.rs < 1) {\n                                spanIndex.splice(r, 1);\n                                r--;\n                            }\n                        }\n                    }\n                }\n                if (findSelectedCell) {\n                    if (cell === startCell || cell === endCell) {\n                        ref.cs = ref.cs !== null && ref.cs < logcalIndex ? ref.cs : logcalIndex;\n                        ref.ce = ref.ce !== null && ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;\n                        ref.rs = ref.rs !== null && ref.rs < i ? ref.rs : i;\n                        ref.re = ref.re !== null && ref.re > i + rs ? ref.re : i + rs;\n                        ref._i += 1;\n                    }\n                    if (ref._i === 2) {\n                        findSelectedCell = false;\n                        spanIndex = [];\n                        rowSpanArr = [];\n                        i = -1;\n                        break;\n                    }\n                } else if (util.getOverlapRangeAtIndex(ref.cs, ref.ce, logcalIndex, logcalIndex + cs) && util.getOverlapRangeAtIndex(ref.rs, ref.re, i, i + rs)) {\n                    const newCs = ref.cs < logcalIndex ? ref.cs : logcalIndex;\n                    const newCe = ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;\n                    const newRs = ref.rs < i ? ref.rs : i;\n                    const newRe = ref.re > i + rs ? ref.re : i + rs;\n                    if (ref.cs !== newCs || ref.ce !== newCe || ref.rs !== newRs || ref.re !== newRe) {\n                        ref.cs = newCs;\n                        ref.ce = newCe;\n                        ref.rs = newRs;\n                        ref.re = newRe;\n                        i = -1;\n                        spanIndex = [];\n                        rowSpanArr = [];\n                        break;\n                    }\n                    util.addClass(cell, \"se-table-selected-cell\");\n                }\n                if (rs > 0) {\n                    rowSpanArr.push({\n                        index: logcalIndex,\n                        cs: cs + 1,\n                        rs: rs,\n                        row: -1\n                    });\n                }\n                colSpan += cell.colSpan - 1;\n            }\n            spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                return a.index - b.index;\n            });\n            rowSpanArr = [];\n        }\n    },\n    _removeEvents: function() {\n        const tablePlugin = this.plugins.table;\n        if (tablePlugin._initBind) {\n            this._wd.removeEventListener(\"touchmove\", tablePlugin._initBind);\n            tablePlugin._initBind = null;\n        }\n        if (tablePlugin._bindOnSelect) {\n            this._wd.removeEventListener(\"mousedown\", tablePlugin._bindOnSelect);\n            this._wd.removeEventListener(\"mousemove\", tablePlugin._bindOnSelect);\n            tablePlugin._bindOnSelect = null;\n        }\n        if (tablePlugin._bindOffSelect) {\n            this._wd.removeEventListener(\"mouseup\", tablePlugin._bindOffSelect);\n            tablePlugin._bindOffSelect = null;\n        }\n        if (tablePlugin._bindOffShift) {\n            this._wd.removeEventListener(\"keyup\", tablePlugin._bindOffShift);\n            tablePlugin._bindOffShift = null;\n        }\n    },\n    _initBind: null,\n    onTableCellMultiSelect: function(tdElement, shift) {\n        const tablePlugin = this.plugins.table;\n        tablePlugin._removeEvents.call(this);\n        this.controllersOff();\n        tablePlugin._shift = shift;\n        tablePlugin._fixedCell = tdElement;\n        tablePlugin._fixedCellName = tdElement.nodeName;\n        tablePlugin._selectedTable = this.util.getParentElement(tdElement, \"TABLE\");\n        const selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n        for(let i = 0, len = selectedCells.length; i < len; i++){\n            this.util.removeClass(selectedCells[i], \"se-table-selected-cell\");\n        }\n        this.util.addClass(tdElement, \"se-table-selected-cell\");\n        tablePlugin._bindOnSelect = tablePlugin._onCellMultiSelect.bind(this);\n        tablePlugin._bindOffSelect = tablePlugin._offCellMultiSelect.bind(this);\n        if (!shift) {\n            this._wd.addEventListener(\"mousemove\", tablePlugin._bindOnSelect, false);\n        } else {\n            tablePlugin._bindOffShift = (function() {\n                this.controllersOn(this.context.table.resizeDiv, this.context.table.tableController, this.plugins.table.init.bind(this), tdElement, \"table\");\n                if (!tablePlugin._ref) this.controllersOff();\n            }).bind(this);\n            this._wd.addEventListener(\"keyup\", tablePlugin._bindOffShift, false);\n            this._wd.addEventListener(\"mousedown\", tablePlugin._bindOnSelect, false);\n        }\n        this._wd.addEventListener(\"mouseup\", tablePlugin._bindOffSelect, false);\n        tablePlugin._initBind = tablePlugin.init.bind(this);\n        this._wd.addEventListener(\"touchmove\", tablePlugin._initBind, false);\n    },\n    onClick_tableController: function(e) {\n        e.stopPropagation();\n        const target = e.target.getAttribute(\"data-command\") ? e.target : e.target.parentNode;\n        if (target.getAttribute(\"disabled\")) return;\n        const command = target.getAttribute(\"data-command\");\n        const value = target.getAttribute(\"data-value\");\n        const option = target.getAttribute(\"data-option\");\n        const tablePlugin = this.plugins.table;\n        if (typeof tablePlugin._closeSplitMenu === \"function\") {\n            tablePlugin._closeSplitMenu();\n            if (command === \"onsplit\") return;\n        }\n        if (!command) return;\n        e.preventDefault();\n        const contextTable = this.context.table;\n        switch(command){\n            case \"insert\":\n            case \"delete\":\n                tablePlugin.editTable.call(this, value, option);\n                break;\n            case \"header\":\n                tablePlugin.toggleHeader.call(this);\n                break;\n            case \"onsplit\":\n                tablePlugin.openSplitMenu.call(this);\n                break;\n            case \"split\":\n                tablePlugin.splitCells.call(this, value);\n                break;\n            case \"merge\":\n                tablePlugin.mergeCells.call(this);\n                break;\n            case \"resize\":\n                contextTable._maxWidth = !contextTable._maxWidth;\n                tablePlugin.setTableStyle.call(this, \"width\");\n                tablePlugin.setPositionControllerTop.call(this, contextTable._element);\n                tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);\n                break;\n            case \"layout\":\n                contextTable._fixedColumn = !contextTable._fixedColumn;\n                tablePlugin.setTableStyle.call(this, \"column\");\n                tablePlugin.setPositionControllerTop.call(this, contextTable._element);\n                tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);\n                break;\n            case \"remove\":\n                const emptyDiv = contextTable._element.parentNode;\n                this.util.removeItem(contextTable._element);\n                this.controllersOff();\n                if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function(current) {\n                    return current.childNodes.length === 0;\n                }, null);\n                this.focus();\n        }\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/table.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/template.js":
/*!****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/template.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"template\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.template = {\n            selectedIndex: -1\n        };\n        /** set submenu */ let templateDiv = this.setSubmenu(core);\n        /** add event listeners */ templateDiv.querySelector(\"ul\").addEventListener(\"click\", this.pickup.bind(core));\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, templateDiv);\n        /** empty memory */ templateDiv = null;\n    },\n    setSubmenu: function(core) {\n        const templateList = core.options.templates;\n        if (!templateList || templateList.length === 0) {\n            throw Error('[SUNEDITOR.plugins.template.fail] To use the \"template\" plugin, please define the \"templates\" option.');\n        }\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-list-layer\";\n        let list = '<div class=\"se-submenu se-list-inner\">' + '<ul class=\"se-list-basic\">';\n        for(let i = 0, len = templateList.length, t; i < len; i++){\n            t = templateList[i];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + i + '\" title=\"' + t.name + '\" aria-label=\"' + t.name + '\">' + t.name + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        this.context.template.selectedIndex = e.target.getAttribute(\"data-value\") * 1;\n        const temp = this.options.templates[this.context.template.selectedIndex];\n        if (temp.html) {\n            this.setContents(temp.html);\n        } else {\n            this.submenuOff();\n            throw Error('[SUNEDITOR.template.fail] cause : \"templates[i].html not found\"');\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL3N1Ym1lbnUvdGVtcGxhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRUEsaUVBQWU7SUFDWEEsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLEtBQUssU0FBVUMsSUFBSSxFQUFFQyxhQUFhO1FBQzlCLE1BQU1DLFVBQVVGLEtBQUtFLE9BQU87UUFDNUJBLFFBQVFDLFFBQVEsR0FBRztZQUNmQyxlQUFlLENBQUM7UUFDcEI7UUFFQSxnQkFBZ0IsR0FDaEIsSUFBSUMsY0FBYyxJQUFJLENBQUNDLFVBQVUsQ0FBQ047UUFFbEMsd0JBQXdCLEdBQ3hCSyxZQUFZRSxhQUFhLENBQUMsTUFBTUMsZ0JBQWdCLENBQUMsU0FBUyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDVjtRQUUzRSw4QkFBOEIsR0FDOUJBLEtBQUtXLGNBQWMsQ0FBQyxJQUFJLENBQUNkLElBQUksRUFBRUksZUFBZUk7UUFFOUMsaUJBQWlCLEdBQ2pCQSxjQUFjO0lBQ2xCO0lBRUFDLFlBQVksU0FBVU4sSUFBSTtRQUN0QixNQUFNWSxlQUFlWixLQUFLYSxPQUFPLENBQUNDLFNBQVM7UUFDM0MsSUFBSSxDQUFDRixnQkFBZ0JBLGFBQWFHLE1BQU0sS0FBSyxHQUFHO1lBQzVDLE1BQU1DLE1BQU07UUFDaEI7UUFFQSxNQUFNQyxVQUFVakIsS0FBS2tCLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1FBQ3hDRixRQUFRRyxTQUFTLEdBQUc7UUFFcEIsSUFBSUMsT0FBTywyQ0FDSDtRQUNSLElBQUssSUFBSUMsSUFBSSxHQUFHQyxNQUFNWCxhQUFhRyxNQUFNLEVBQUVTLEdBQUdGLElBQUlDLEtBQUtELElBQUs7WUFDeERFLElBQUlaLFlBQVksQ0FBQ1UsRUFBRTtZQUNuQkQsUUFBUSwrREFBK0RDLElBQUksY0FBY0UsRUFBRTNCLElBQUksR0FBRyxtQkFBbUIyQixFQUFFM0IsSUFBSSxHQUFHLE9BQU8yQixFQUFFM0IsSUFBSSxHQUFHO1FBQ2xKO1FBQ0F3QixRQUFRO1FBRVJKLFFBQVFRLFNBQVMsR0FBR0o7UUFFcEIsT0FBT0o7SUFDWDtJQUVBUixRQUFRLFNBQVVpQixDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVlDLElBQUksQ0FBQ0QsRUFBRUUsTUFBTSxDQUFDQyxPQUFPLEdBQUcsT0FBTztRQUVoREgsRUFBRUksY0FBYztRQUNoQkosRUFBRUssZUFBZTtRQUVqQixJQUFJLENBQUM3QixPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsYUFBYSxHQUFHc0IsRUFBRUUsTUFBTSxDQUFDSSxZQUFZLENBQUMsZ0JBQWdCO1FBQzVFLE1BQU1DLE9BQU8sSUFBSSxDQUFDcEIsT0FBTyxDQUFDQyxTQUFTLENBQUMsSUFBSSxDQUFDWixPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDO1FBRXhFLElBQUk2QixLQUFLQyxJQUFJLEVBQUU7WUFDWCxJQUFJLENBQUNDLFdBQVcsQ0FBQ0YsS0FBS0MsSUFBSTtRQUM5QixPQUFPO1lBQ0gsSUFBSSxDQUFDRSxVQUFVO1lBQ2YsTUFBTXBCLE1BQU07UUFDaEI7UUFFQSxJQUFJLENBQUNvQixVQUFVO0lBQ25CO0FBQ0osQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvc3VibWVudS90ZW1wbGF0ZS5qcz85NjBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ3RlbXBsYXRlJyxcbiAgICBkaXNwbGF5OiAnc3VibWVudScsXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY29yZS5jb250ZXh0O1xuICAgICAgICBjb250ZXh0LnRlbXBsYXRlID0ge1xuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogLTFcbiAgICAgICAgfTtcblxuICAgICAgICAvKiogc2V0IHN1Ym1lbnUgKi9cbiAgICAgICAgbGV0IHRlbXBsYXRlRGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xuXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXG4gICAgICAgIHRlbXBsYXRlRGl2LnF1ZXJ5U2VsZWN0b3IoJ3VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBpY2t1cC5iaW5kKGNvcmUpKTtcblxuICAgICAgICAvKiogYXBwZW5kIHRhcmdldCBidXR0b24gbWVudSAqL1xuICAgICAgICBjb3JlLmluaXRNZW51VGFyZ2V0KHRoaXMubmFtZSwgdGFyZ2V0RWxlbWVudCwgdGVtcGxhdGVEaXYpO1xuXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cbiAgICAgICAgdGVtcGxhdGVEaXYgPSBudWxsO1xuICAgIH0sXG5cbiAgICBzZXRTdWJtZW51OiBmdW5jdGlvbiAoY29yZSkge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZUxpc3QgPSBjb3JlLm9wdGlvbnMudGVtcGxhdGVzO1xuICAgICAgICBpZiAoIXRlbXBsYXRlTGlzdCB8fCB0ZW1wbGF0ZUxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5wbHVnaW5zLnRlbXBsYXRlLmZhaWxdIFRvIHVzZSB0aGUgXCJ0ZW1wbGF0ZVwiIHBsdWdpbiwgcGxlYXNlIGRlZmluZSB0aGUgXCJ0ZW1wbGF0ZXNcIiBvcHRpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICAgICAgICBsaXN0RGl2LmNsYXNzTmFtZSA9ICdzZS1saXN0LWxheWVyJztcblxuICAgICAgICBsZXQgbGlzdCA9ICc8ZGl2IGNsYXNzPVwic2Utc3VibWVudSBzZS1saXN0LWlubmVyXCI+JyArXG4gICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cInNlLWxpc3QtYmFzaWNcIj4nO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGVtcGxhdGVMaXN0Lmxlbmd0aCwgdDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0ID0gdGVtcGxhdGVMaXN0W2ldO1xuICAgICAgICAgICAgbGlzdCArPSAnPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2UtYnRuLWxpc3RcIiBkYXRhLXZhbHVlPVwiJyArIGkgKyAnXCIgdGl0bGU9XCInICsgdC5uYW1lICsgJ1wiIGFyaWEtbGFiZWw9XCInICsgdC5uYW1lICsgJ1wiPicgKyB0Lm5hbWUgKyAnPC9idXR0b24+PC9saT4nO1xuICAgICAgICB9XG4gICAgICAgIGxpc3QgKz0gJzwvdWw+PC9kaXY+JztcblxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XG5cbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XG4gICAgfSxcblxuICAgIHBpY2t1cDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCEvXkJVVFRPTiQvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHRoaXMuY29udGV4dC50ZW1wbGF0ZS5zZWxlY3RlZEluZGV4ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgKiAxO1xuICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlc1t0aGlzLmNvbnRleHQudGVtcGxhdGUuc2VsZWN0ZWRJbmRleF07XG5cbiAgICAgICAgaWYgKHRlbXAuaHRtbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb250ZW50cyh0ZW1wLmh0bWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi50ZW1wbGF0ZS5mYWlsXSBjYXVzZSA6IFwidGVtcGxhdGVzW2ldLmh0bWwgbm90IGZvdW5kXCInKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XG4gICAgfVxufTsiXSwibmFtZXMiOlsibmFtZSIsImRpc3BsYXkiLCJhZGQiLCJjb3JlIiwidGFyZ2V0RWxlbWVudCIsImNvbnRleHQiLCJ0ZW1wbGF0ZSIsInNlbGVjdGVkSW5kZXgiLCJ0ZW1wbGF0ZURpdiIsInNldFN1Ym1lbnUiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBpY2t1cCIsImJpbmQiLCJpbml0TWVudVRhcmdldCIsInRlbXBsYXRlTGlzdCIsIm9wdGlvbnMiLCJ0ZW1wbGF0ZXMiLCJsZW5ndGgiLCJFcnJvciIsImxpc3REaXYiLCJ1dGlsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImxpc3QiLCJpIiwibGVuIiwidCIsImlubmVySFRNTCIsImUiLCJ0ZXN0IiwidGFyZ2V0IiwidGFnTmFtZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZ2V0QXR0cmlidXRlIiwidGVtcCIsImh0bWwiLCJzZXRDb250ZW50cyIsInN1Ym1lbnVPZmYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/template.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/plugins/submenu/textStyle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/textStyle.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    name: \"textStyle\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.textStyle = {\n            _styleList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.textStyle._styleList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-format\";\n        const defaultList = {\n            code: {\n                name: core.lang.menu.code,\n                class: \"__se__t-code\",\n                tag: \"code\"\n            },\n            translucent: {\n                name: core.lang.menu.translucent,\n                style: \"opacity: 0.5;\",\n                tag: \"span\"\n            },\n            shadow: {\n                name: core.lang.menu.shadow,\n                class: \"__se__t-shadow\",\n                tag: \"span\"\n            }\n        };\n        const styleList = !option.textStyles ? core._w.Object.keys(defaultList) : option.textStyles;\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for(let i = 0, len = styleList.length, t, tag, name, attrs, command, value, _class; i < len; i++){\n            t = styleList[i];\n            attrs = \"\", value = \"\", command = [];\n            if (typeof t === \"string\") {\n                const defaultStyle = defaultList[t.toLowerCase()];\n                if (!defaultStyle) continue;\n                t = defaultStyle;\n            }\n            name = t.name;\n            tag = t.tag || \"span\";\n            _class = t._class;\n            if (t.style) {\n                attrs += ' style=\"' + t.style + '\"';\n                value += t.style.replace(/:[^;]+(;|$)\\s*/g, \",\");\n                command.push(\"style\");\n            }\n            if (t.class) {\n                attrs += ' class=\"' + t.class + '\"';\n                value += \".\" + t.class.trim().replace(/\\s+/g, \",.\");\n                command.push(\"class\");\n            }\n            value = value.replace(/,$/, \"\");\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list' + (_class ? \" \" + _class : \"\") + '\" data-command=\"' + tag + '\" data-value=\"' + value + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + \"<\" + tag + attrs + \">\" + name + \"</\" + tag + \">\" + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const util = this.util;\n        const textStyleContext = this.context.textStyle;\n        const styleButtonList = textStyleContext._styleList;\n        const selectionNode = this.getSelectionNode();\n        for(let i = 0, len = styleButtonList.length, btn, data, active; i < len; i++){\n            btn = styleButtonList[i];\n            data = btn.getAttribute(\"data-value\").split(\",\");\n            for(let v = 0, node, value; v < data.length; v++){\n                node = selectionNode;\n                active = false;\n                while(node && !util.isFormatElement(node) && !util.isComponent(node)){\n                    if (node.nodeName.toLowerCase() === btn.getAttribute(\"data-command\").toLowerCase()) {\n                        value = data[v];\n                        if (/^\\./.test(value) ? util.hasClass(node, value.replace(/^\\./, \"\")) : !!node.style[value]) {\n                            active = true;\n                            break;\n                        }\n                    }\n                    node = node.parentNode;\n                }\n                if (!active) break;\n            }\n            active ? util.addClass(btn, \"active\") : util.removeClass(btn, \"active\");\n        }\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = null, tag = null;\n        while(!command && !/UL/i.test(target.tagName)){\n            command = target.getAttribute(\"data-command\");\n            if (command) {\n                tag = target.firstChild;\n                break;\n            }\n            target = target.parentNode;\n        }\n        if (!command) return;\n        const checkStyles = tag.style.cssText.replace(/:.+(;|$)/g, \",\").split(\",\");\n        checkStyles.pop();\n        const classes = tag.classList;\n        for(let i = 0, len = classes.length; i < len; i++){\n            checkStyles.push(\".\" + classes[i]);\n        }\n        const newNode = this.util.hasClass(target, \"active\") ? null : tag.cloneNode(false);\n        const removeNodes = newNode ? null : [\n            tag.nodeName\n        ];\n        this.nodeChange(newNode, checkStyles, removeNodes, true);\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/plugins/submenu/textStyle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/src/suneditor.js":
/*!*************************************************!*\
  !*** ./node_modules/suneditor/src/suneditor.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/core */ \"(ssr)/./node_modules/suneditor/src/lib/core.js\");\n/* harmony import */ var _lib_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/util */ \"(ssr)/./node_modules/suneditor/src/lib/util.js\");\n/* harmony import */ var _lib_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/constructor */ \"(ssr)/./node_modules/suneditor/src/lib/constructor.js\");\n/* harmony import */ var _lib_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/context */ \"(ssr)/./node_modules/suneditor/src/lib/context.js\");\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    /**\n     * @description Returns the create function with preset options.\n     * If the options overlap, the options of the 'create' function take precedence.\n     * @param {Json} options Initialization options\n     * @returns {Object}\n     */ init: function(init_options) {\n        return {\n            create: (function(idOrElement, options) {\n                return this.create(idOrElement, options, init_options);\n            }).bind(this)\n        };\n    },\n    /**\n     * @description Create the suneditor\n     * @param {String|Element} idOrElement textarea Id or textarea element\n     * @param {JSON|Object} options user options\n     * @returns {Object}\n     */ create: function(idOrElement, options, _init_options) {\n        _lib_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._propertiesInit();\n        if (typeof options !== \"object\") options = {};\n        if (_init_options) {\n            options = [\n                _init_options,\n                options\n            ].reduce(function(init, option) {\n                for(let key in option){\n                    if (!_lib_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(option, key)) continue;\n                    if (key === \"plugins\" && option[key] && init[key]) {\n                        let i = init[key], o = option[key];\n                        i = i.length ? i : Object.keys(i).map(function(name) {\n                            return i[name];\n                        });\n                        o = o.length ? o : Object.keys(o).map(function(name) {\n                            return o[name];\n                        });\n                        init[key] = o.filter(function(val) {\n                            return i.indexOf(val) === -1;\n                        }).concat(i);\n                    } else {\n                        init[key] = option[key];\n                    }\n                }\n                return init;\n            }, {});\n        }\n        const element = typeof idOrElement === \"string\" ? document.getElementById(idOrElement) : idOrElement;\n        if (!element) {\n            if (typeof idOrElement === \"string\") {\n                throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:\"' + idOrElement + '\")');\n            }\n            throw Error(\"[SUNEDITOR.create.fail] suneditor requires textarea's element or id value\");\n        }\n        const cons = _lib_constructor__WEBPACK_IMPORTED_MODULE_1__[\"default\"].init(element, options);\n        if (cons.constructed._top.id && document.getElementById(cons.constructed._top.id)) {\n            throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:\"' + cons.constructed._top.id + '\")');\n        }\n        return (0,_lib_core__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_lib_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element, cons.constructed, cons.options), cons.pluginCallButtons, cons.plugins, cons.options.lang, options, cons._responsiveButtons);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9zdW5lZGl0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDRDtBQUU4QjtBQUNBO0FBQ2U7QUFDUjtBQUVyQyxpRUFBZTtJQUNYOzs7OztLQUtDLEdBQ0RJLE1BQU0sU0FBVUMsWUFBWTtRQUN4QixPQUFPO1lBQ0hDLFFBQVEsVUFBVUMsV0FBVyxFQUFFQyxPQUFPO2dCQUNsQyxPQUFPLElBQUksQ0FBQ0YsTUFBTSxDQUFDQyxhQUFhQyxTQUFTSDtZQUM3QyxHQUFFSSxJQUFJLENBQUMsSUFBSTtRQUNmO0lBQ0o7SUFFQTs7Ozs7S0FLQyxHQUNESCxRQUFRLFNBQVVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFRSxhQUFhO1FBQ2pEVCxpREFBSUEsQ0FBQ1UsZUFBZTtRQUVwQixJQUFJLE9BQU9ILFlBQVksVUFBVUEsVUFBVSxDQUFDO1FBQzVDLElBQUlFLGVBQWU7WUFDZkYsVUFBVztnQkFBQ0U7Z0JBQWVGO2FBQVEsQ0FBQ0ksTUFBTSxDQUFDLFNBQVVSLElBQUksRUFBRVMsTUFBTTtnQkFDakQsSUFBSyxJQUFJQyxPQUFPRCxPQUFRO29CQUNwQixJQUFJLENBQUNaLGlEQUFJQSxDQUFDYyxNQUFNLENBQUNGLFFBQVFDLE1BQU07b0JBQy9CLElBQUlBLFFBQVEsYUFBYUQsTUFBTSxDQUFDQyxJQUFJLElBQUlWLElBQUksQ0FBQ1UsSUFBSSxFQUFFO3dCQUMvQyxJQUFJRSxJQUFJWixJQUFJLENBQUNVLElBQUksRUFBRUcsSUFBSUosTUFBTSxDQUFDQyxJQUFJO3dCQUNsQ0UsSUFBSUEsRUFBRUUsTUFBTSxHQUFHRixJQUFJRyxPQUFPQyxJQUFJLENBQUNKLEdBQUdLLEdBQUcsQ0FBQyxTQUFTQyxJQUFJOzRCQUFJLE9BQU9OLENBQUMsQ0FBQ00sS0FBSzt3QkFBRTt3QkFDdkVMLElBQUlBLEVBQUVDLE1BQU0sR0FBR0QsSUFBSUUsT0FBT0MsSUFBSSxDQUFDSCxHQUFHSSxHQUFHLENBQUMsU0FBU0MsSUFBSTs0QkFBSSxPQUFPTCxDQUFDLENBQUNLLEtBQUs7d0JBQUU7d0JBQ3ZFbEIsSUFBSSxDQUFDVSxJQUFJLEdBQUcsRUFBR1MsTUFBTSxDQUFDLFNBQVNDLEdBQUc7NEJBQUksT0FBT1IsRUFBRVMsT0FBTyxDQUFDRCxTQUFTLENBQUM7d0JBQUcsR0FBSUUsTUFBTSxDQUFDVjtvQkFDbkYsT0FBTzt3QkFDSFosSUFBSSxDQUFDVSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtvQkFDM0I7Z0JBQ0o7Z0JBQ0EsT0FBT1Y7WUFDWCxHQUFHLENBQUM7UUFDcEI7UUFFQSxNQUFNdUIsVUFBVSxPQUFPcEIsZ0JBQWdCLFdBQVdxQixTQUFTQyxjQUFjLENBQUN0QixlQUFlQTtRQUV6RixJQUFJLENBQUNvQixTQUFTO1lBQ1YsSUFBSSxPQUFPcEIsZ0JBQWdCLFVBQVU7Z0JBQ2pDLE1BQU11QixNQUFNLHdFQUF3RXZCLGNBQWM7WUFDdEc7WUFFQSxNQUFNdUIsTUFBTTtRQUNoQjtRQUVBLE1BQU1DLE9BQU83Qix3REFBWUEsQ0FBQ0UsSUFBSSxDQUFDdUIsU0FBU25CO1FBRXhDLElBQUl1QixLQUFLQyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsRUFBRSxJQUFJTixTQUFTQyxjQUFjLENBQUNFLEtBQUtDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxFQUFFLEdBQUc7WUFDL0UsTUFBTUosTUFBTSxrR0FBa0dDLEtBQUtDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxFQUFFLEdBQUc7UUFDN0k7UUFFQSxPQUFPbEMscURBQUlBLENBQUNHLHdEQUFRQSxDQUFDd0IsU0FBU0ksS0FBS0MsV0FBVyxFQUFFRCxLQUFLdkIsT0FBTyxHQUFHdUIsS0FBS0ksaUJBQWlCLEVBQUVKLEtBQUtLLE9BQU8sRUFBRUwsS0FBS3ZCLE9BQU8sQ0FBQzZCLElBQUksRUFBRTdCLFNBQVN1QixLQUFLTyxrQkFBa0I7SUFDNUo7QUFDSixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdGhlLWZsZXhpb24vcGtnLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvc3VuZWRpdG9yLmpzPzllYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxuICpcbiAqIHN1bmVkaXRvci5qc1xuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cbiAqIE1JVCBsaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBjb3JlIGZyb20gJy4vbGliL2NvcmUnO1xuaW1wb3J0IHV0aWwgZnJvbSAnLi9saWIvdXRpbCc7XG5pbXBvcnQgX0NvbnN0cnVjdG9yIGZyb20gJy4vbGliL2NvbnN0cnVjdG9yJztcbmltcG9ydCBfQ29udGV4dCBmcm9tICcuL2xpYi9jb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBjcmVhdGUgZnVuY3Rpb24gd2l0aCBwcmVzZXQgb3B0aW9ucy5cbiAgICAgKiBJZiB0aGUgb3B0aW9ucyBvdmVybGFwLCB0aGUgb3B0aW9ucyBvZiB0aGUgJ2NyZWF0ZScgZnVuY3Rpb24gdGFrZSBwcmVjZWRlbmNlLlxuICAgICAqIEBwYXJhbSB7SnNvbn0gb3B0aW9ucyBJbml0aWFsaXphdGlvbiBvcHRpb25zXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoaW5pdF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChpZE9yRWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShpZE9yRWxlbWVudCwgb3B0aW9ucywgaW5pdF9vcHRpb25zKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIHRoZSBzdW5lZGl0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fSBpZE9yRWxlbWVudCB0ZXh0YXJlYSBJZCBvciB0ZXh0YXJlYSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtKU09OfE9iamVjdH0gb3B0aW9ucyB1c2VyIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKGlkT3JFbGVtZW50LCBvcHRpb25zLCBfaW5pdF9vcHRpb25zKSB7XG4gICAgICAgIHV0aWwuX3Byb3BlcnRpZXNJbml0KCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykgb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAoX2luaXRfb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9ICBbX2luaXRfb3B0aW9ucywgb3B0aW9uc10ucmVkdWNlKGZ1bmN0aW9uIChpbml0LCBvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24ob3B0aW9uLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3BsdWdpbnMnICYmIG9wdGlvbltrZXldICYmIGluaXRba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBpbml0W2tleV0sIG8gPSBvcHRpb25ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLmxlbmd0aCA/IGkgOiBPYmplY3Qua2V5cyhpKS5tYXAoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gaVtuYW1lXTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gby5sZW5ndGggPyBvIDogT2JqZWN0LmtleXMobykubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG9bbmFtZV07IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFtrZXldID0gKG8uZmlsdGVyKGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gaS5pbmRleE9mKHZhbCkgPT09IC0xOyB9KSkuY29uY2F0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFtrZXldID0gb3B0aW9uW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0eXBlb2YgaWRPckVsZW1lbnQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRPckVsZW1lbnQpIDogaWRPckVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkT3JFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmNyZWF0ZS5mYWlsXSBUaGUgZWxlbWVudCBmb3IgdGhhdCBpZCB3YXMgbm90IGZvdW5kIChJRDpcIicgKyBpZE9yRWxlbWVudCArICdcIiknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY3JlYXRlLmZhaWxdIHN1bmVkaXRvciByZXF1aXJlcyB0ZXh0YXJlYVxcJ3MgZWxlbWVudCBvciBpZCB2YWx1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29ucyA9IF9Db25zdHJ1Y3Rvci5pbml0KGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29ucy5jb25zdHJ1Y3RlZC5fdG9wLmlkKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY3JlYXRlLmZhaWxdIFRoZSBJRCBvZiB0aGUgc3VuZWRpdG9yIHlvdSBhcmUgdHJ5aW5nIHRvIGNyZWF0ZSBhbHJlYWR5IGV4aXN0cyAoSUQ6XCInICsgY29ucy5jb25zdHJ1Y3RlZC5fdG9wLmlkICsgJ1wiKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvcmUoX0NvbnRleHQoZWxlbWVudCwgY29ucy5jb25zdHJ1Y3RlZCwgY29ucy5vcHRpb25zKSwgY29ucy5wbHVnaW5DYWxsQnV0dG9ucywgY29ucy5wbHVnaW5zLCBjb25zLm9wdGlvbnMubGFuZywgb3B0aW9ucywgY29ucy5fcmVzcG9uc2l2ZUJ1dHRvbnMpO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiY29yZSIsInV0aWwiLCJfQ29uc3RydWN0b3IiLCJfQ29udGV4dCIsImluaXQiLCJpbml0X29wdGlvbnMiLCJjcmVhdGUiLCJpZE9yRWxlbWVudCIsIm9wdGlvbnMiLCJiaW5kIiwiX2luaXRfb3B0aW9ucyIsIl9wcm9wZXJ0aWVzSW5pdCIsInJlZHVjZSIsIm9wdGlvbiIsImtleSIsImhhc093biIsImkiLCJvIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsIm5hbWUiLCJmaWx0ZXIiLCJ2YWwiLCJpbmRleE9mIiwiY29uY2F0IiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJFcnJvciIsImNvbnMiLCJjb25zdHJ1Y3RlZCIsIl90b3AiLCJpZCIsInBsdWdpbkNhbGxCdXR0b25zIiwicGx1Z2lucyIsImxhbmciLCJfcmVzcG9uc2l2ZUJ1dHRvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/src/suneditor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/suneditor/dist/css/suneditor.min.css":
/*!***********************************************************!*\
  !*** ./node_modules/suneditor/dist/css/suneditor.min.css ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"f03c5310557a\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL2Rpc3QvY3NzL3N1bmVkaXRvci5taW4uY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRoZS1mbGV4aW9uL3BrZy8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3IvZGlzdC9jc3Mvc3VuZWRpdG9yLm1pbi5jc3M/ZWVhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImYwM2M1MzEwNTU3YVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/suneditor/dist/css/suneditor.min.css\n");

/***/ })

};
;