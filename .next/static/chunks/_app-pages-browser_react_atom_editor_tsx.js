/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_react_atom_editor_tsx"],{

/***/ "(app-pages-browser)/./node_modules/suneditor/src/assets/defaultIcons.js":
/*!***********************************************************!*\
  !*** ./node_modules/suneditor/src/assets/defaultIcons.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2020 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    // rtl icon\n    rtl: {\n        italic: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10.5 15.8\" xml:space=\"preserve\"><g><path d=\"M0.3,0.1c0.3,0,0.5,0,0.7,0c1,0.1,1.7,0.1,2.2,0.1H4L7.2,0l0.2,1.1H7c-0.5,0-1,0.1-1.5,0.3v0.4l0.3,1.9L6,4.4L6.3,6 l0.1,0.4l0.1,0.5c0.1,0.2,0.1,0.4,0.2,0.7s0.1,0.6,0.2,0.9L7,9.1l0.6,2.8l0.3,1.4c0.1,0.4,0.2,0.7,0.4,1c0.4,0.2,0.8,0.3,1.2,0.4 l0.8,0.2l0.2,0.9l-1.1,0c-0.9-0.1-1.5-0.1-1.8-0.1h-2c-0.9,0.1-1.4,0.2-1.5,0.2c-0.1,0-0.2,0-0.3,0H3.4c-0.1,0-0.2,0-0.2,0 l-0.1-0.4c0-0.2-0.1-0.4-0.1-0.6l0.7-0.1c0.4,0,0.8-0.1,1.2-0.2c0-0.1,0-0.2,0-0.3l-0.1-0.5l-0.4-2.4L4,9.6L3.4,6.4 C3.2,5.7,3,4.7,2.7,3.3c0-0.3-0.1-0.5-0.1-0.8C2.5,2.1,2.4,1.9,2.3,1.6C2,1.4,1.6,1.3,1.3,1.2C0.9,1.2,0.5,1.1,0.2,0.9L0,0.4L0,0 L0.3,0.1L0.3,0.1z\"/></g></svg>',\n        indent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 12.4\" xml:space=\"preserve\"><g><g><path d=\"M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z\"/></g><path d=\"M13.1,3.5L15.7,6c0.1,0.1,0.1,0.3,0,0.4l-2.5,2.5C13.1,9,13,9,12.9,9c-0.1,0-0.1,0-0.2-0.1c-0.1-0.1-0.1-0.1-0.1-0.2V3.7 c0-0.1,0-0.2,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C13,3.4,13.1,3.4,13.1,3.5z\"/></g></svg>',\n        outdent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 12.4\" xml:space=\"preserve\"><g><g><path d=\"M15.5,10.1L15.5,10.1c0.1,0,0.3,0.1,0.3,0.3v1.7c0,0.1,0,0.1-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1l-15.2,0 c-0.1,0-0.1,0-0.2-0.1C0,12.2,0,12.2,0,12.1l0-1.7c0-0.1,0-0.1,0.1-0.2c0.1-0.1,0.1-0.1,0.2-0.1C0.3,10.1,15.5,10.1,15.5,10.1z M9.8,6.7c0.1,0,0.1,0,0.2,0.1C10.1,6.9,10.1,7,10.1,7v1.7c0,0.1,0,0.2-0.1,0.2C10,9,9.9,9,9.8,9L0.3,9C0.2,9,0.1,9,0.1,8.9 C0,8.9,0,8.8,0,8.7V7C0,7,0,6.9,0.1,6.8c0.1-0.1,0.1-0.1,0.2-0.1C0.3,6.7,9.8,6.7,9.8,6.7z M0.3,3.4h9.6h0c0.1,0,0.3,0.1,0.3,0.3 v1.7v0c0,0.1-0.1,0.3-0.3,0.3H0.3c-0.1,0-0.1,0-0.2-0.1C0,5.5,0,5.4,0,5.3V3.6c0-0.1,0-0.1,0.1-0.2C0.1,3.4,0.2,3.4,0.3,3.4 L0.3,3.4z M0.3,0l15.2,0c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2V2c0,0.1,0,0.2-0.1,0.2c-0.1,0.1-0.1,0.1-0.2,0.1H0.3 c-0.1,0-0.1,0-0.2-0.1C0,2.1,0,2,0,2l0-1.7c0-0.1,0-0.1,0.1-0.2C0.1,0,0.2,0,0.3,0z\"/></g><path d=\"M15.5,3.4c0.1,0,0.1,0,0.2,0.1c0.1,0.1,0.1,0.1,0.1,0.2v5.1c0,0.1,0,0.1-0.1,0.2C15.6,9,15.5,9,15.5,9 c-0.1,0-0.1,0-0.2-0.1l-2.5-2.5c-0.1-0.1-0.1-0.3,0-0.4l2.5-2.5C15.3,3.4,15.4,3.4,15.5,3.4z\"/></g></svg>',\n        list_bullets: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 12.4\" xml:space=\"preserve\"><g><path d=\"M12.4,10.7c0,0.9,0.8,1.7,1.7,1.7c0.9,0,1.7-0.8,1.7-1.7C15.7,9.8,15,9,14.1,9c-0.4,0-0.9,0.2-1.2,0.5 C12.5,9.8,12.4,10.2,12.4,10.7C12.4,10.7,12.4,10.7,12.4,10.7z M12.4,6.2c0,0.9,0.8,1.7,1.7,1.7c0.4,0,0.9-0.2,1.2-0.5 c0.3-0.3,0.4-0.7,0.4-1.1c0-0.9-0.7-1.7-1.6-1.7C13.1,4.6,12.4,5.3,12.4,6.2C12.4,6.2,12.4,6.2,12.4,6.2z M0,9.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1l10.7,0c0,0,0,0,0,0c0.1,0,0.3-0.1,0.3-0.3V9.8c0-0.1,0-0.1-0.1-0.2 C11.1,9.6,11,9.6,11,9.6l-10.7,0c-0.1,0-0.1,0-0.2,0.1C0,9.7,0,9.8,0,9.8L0,9.8z M12.9,2.9c0.3,0.3,0.7,0.5,1.2,0.5 c0.4,0,0.9-0.2,1.2-0.5c0.7-0.7,0.7-1.7,0-2.4C14.9,0.2,14.5,0,14.1,0c-0.4,0-0.9,0.2-1.2,0.5c-0.3,0.3-0.5,0.7-0.5,1.2 C12.4,2.1,12.5,2.6,12.9,2.9z M0,5.3V7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.1,0,0.2-0.1 c0.1-0.1,0.1-0.1,0.1-0.2V5.3c0,0,0,0,0,0c0-0.1-0.1-0.3-0.3-0.3H0.3c-0.1,0-0.1,0-0.2,0.1C0,5.2,0,5.3,0,5.3L0,5.3z M0,0.8v1.7 c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1h10.7c0.1,0,0.1,0,0.2-0.1c0,0,0.1-0.1,0.1-0.2V0.8c0-0.1,0-0.1-0.1-0.2 c0-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.1,0-0.2,0.1C0,0.7,0,0.8,0,0.8L0,0.8z\"/></g></svg>',\n        list_number: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.7\" xml:space=\"preserve\"><g><path d=\"M0,11.5l0,1.7c0,0.1,0,0.1,0.1,0.2c0.1,0.1,0.1,0.1,0.2,0.1H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2v-1.7 c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1H0.3c-0.1,0-0.2,0-0.2,0.1C0,11.4,0,11.4,0,11.5L0,11.5z M0,8.7c0,0.1,0,0.1,0.1,0.2 C0.1,8.9,0.2,9,0.3,9H11c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V7c0-0.1,0-0.1-0.1-0.2c-0.1-0.1-0.1-0.1-0.2-0.1l-10.7,0 c-0.1,0-0.2,0-0.2,0.1C0,6.8,0,6.9,0,7C0,7,0,8.7,0,8.7z M0,2.5v1.7c0,0.1,0,0.1,0.1,0.2c0,0,0.1,0.1,0.2,0.1l10.7,0 c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.1,0.1-0.2V2.4c0-0.1,0-0.1-0.1-0.2c-0.1,0-0.1,0-0.2,0H0.3c-0.1,0-0.1,0-0.2,0 C0,2.3,0,2.4,0,2.5L0,2.5z\"/></g><path d=\"M15.6,14.2c0-0.3-0.1-0.6-0.3-0.8c-0.2-0.2-0.4-0.4-0.7-0.4l0.9-1v-0.8h-2.9v1.3h0.9v-0.5h0.9l0,0c-0.1,0.1-0.2,0.2-0.3,0.3 s-0.2,0.3-0.4,0.5l-0.3,0.3l0.2,0.5c0.6,0,0.9,0.1,0.9,0.5c0,0.1-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.4,0.1c-0.3,0-0.7-0.1-0.9-0.3 l-0.5,0.8c0.4,0.4,0.9,0.6,1.5,0.6c0.4,0,0.9-0.1,1.2-0.4C15.5,15.1,15.6,14.7,15.6,14.2z\"/><path d=\"M15.6,8.7h-0.9v0.5h-1.1c0-0.2,0.2-0.4,0.4-0.5c0.2-0.2,0.4-0.3,0.7-0.4c0.3-0.2,0.5-0.3,0.7-0.6c0.2-0.2,0.3-0.5,0.3-0.8 c0-0.4-0.2-0.8-0.5-1c-0.6-0.4-1.4-0.5-2-0.1c-0.3,0.2-0.5,0.4-0.6,0.7L13.3,7c0.1-0.3,0.4-0.5,0.7-0.5c0.1,0,0.3,0,0.3,0.1 c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.2,0.1-0.3,0.3-0.5,0.4c-0.2,0.1-0.4,0.3-0.6,0.4c-0.2,0.2-0.4,0.4-0.5,0.6 c-0.1,0.2-0.2,0.5-0.2,0.8c0,0.2,0,0.3,0,0.5h3.2L15.6,8.7L15.6,8.7z\"/><path d=\"M15.6,3.6h-1V0h-0.9l-1.2,1.1l0.6,0.7c0.2-0.1,0.3-0.3,0.4-0.5l0,0v2.2h-0.9v0.9h3L15.6,3.6L15.6,3.6z\"/></svg>',\n        link: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.7\" xml:space=\"preserve\"><g><path d=\"M7.4,9.9l3.1,3.1c0.3,0.3,0.8,0.5,1.3,0.5c0.5,0,0.9-0.2,1.3-0.5c0,0,0,0,0,0c0.7-0.7,0.7-1.9,0-2.6L9.9,7.3 c0-0.1,0-0.2,0-0.3C9.9,7,10,7,10.1,7l2.2-0.2c0.1,0,0.1,0,0.2,0.1l2.1,2.1c0.4,0.4,0.7,0.8,0.9,1.3c0.2,0.5,0.3,1,0.3,1.5 c0,0.5-0.1,1-0.3,1.5c-0.8,2-3.2,3-5.2,2.2c-0.5-0.2-0.9-0.5-1.3-0.9l-2.1-2.1c-0.1,0-0.1-0.1-0.1-0.2L7,10.1C7,10,7,9.9,7.1,9.9 C7.2,9.8,7.3,9.9,7.4,9.9z M1.2,1.1C1.6,0.7,2,0.4,2.5,0.3c1-0.4,2.1-0.4,3.1,0C6,0.4,6.5,0.7,6.8,1.1L9,3.2C9,3.3,9.1,3.3,9,3.4 L8.8,5.6c0,0.1-0.1,0.2-0.2,0.2c-0.1,0.1-0.2,0.1-0.3,0L5.3,2.7C5,2.3,4.5,2.1,4,2.1c-0.5,0-0.9,0.2-1.3,0.5c0,0,0,0,0,0 C2,3.4,2,4.5,2.7,5.2l3.1,3.2c0.1,0.1,0.1,0.2,0,0.3c0,0.1-0.1,0.1-0.2,0.1L3.5,9C3.4,9,3.4,9,3.3,8.9L1.2,6.8c0,0,0,0,0,0 C-0.4,5.2-0.4,2.7,1.2,1.1L1.2,1.1z M14.3,6h-2.6c0,0,0,0,0,0c-0.1,0-0.2-0.1-0.2-0.2c0-0.1,0-0.2,0.1-0.3l2.5-0.7 c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0.1,0.1,0.2l0.1,0.8c0,0.1,0,0.1-0.1,0.2C14.5,6,14.4,6,14.3,6L14.3,6z M10.2,4.1 c0,0.1-0.1,0.2-0.2,0.2l0,0c0,0,0,0,0,0C9.8,4.2,9.7,4.1,9.8,4L9.7,1.4c0-0.1,0-0.1,0.1-0.2c0.1,0,0.1,0,0.2,0h0.8 c0.1,0,0.1,0,0.2,0.1c0,0.1,0,0.1,0,0.2L10.2,4.1L10.2,4.1z M1.5,9.7h1.3h1.3c0.1,0,0.2,0.1,0.2,0.2c0,0.1,0,0.2-0.1,0.3l-2.5,0.6 H1.6c0,0-0.1,0-0.1,0c-0.1,0-0.1-0.1-0.1-0.2L1.2,9.9c0-0.1,0-0.1,0.1-0.2c0-0.1,0.1-0.1,0.2-0.1L1.5,9.7z M5.6,11.6 C5.6,11.6,5.6,11.6,5.6,11.6c0-0.1,0.1-0.2,0.3-0.1c0,0,0,0,0,0c0.1,0,0.2,0.1,0.2,0.2v2.6c0,0.1,0,0.1-0.1,0.2 c0,0-0.1,0.1-0.2,0.1L5,14.5c-0.1,0-0.1,0-0.2-0.1c0-0.1,0-0.1,0-0.2L5.6,11.6L5.6,11.6z\"/></g></svg>',\n        unlink: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.7\" xml:space=\"preserve\"><g><path d=\"M14.6,14.6c1.6-1.6,1.6-4.1,0-5.7l0,0l-3.1-3.1l-1.2,1.6l2.9,2.9c0.4,0.4,0.6,0.9,0.6,1.5c0,1.1-0.9,2.1-2.1,2.1l0,0 c-0.6,0-1.1-0.2-1.5-0.6l-0.4-0.4l-1.7,1l0.8,0.8C10.4,16.2,13,16.2,14.6,14.6L14.6,14.6L14.6,14.6z M3.6,6C3,5.9,2.6,5.5,2.3,5 S1.9,4,2.1,3.4C2.3,2.9,2.6,2.5,3,2.2C3.5,2,4.1,1.9,4.6,2l3.3,1.4l0.5-2L5.1,0.1C4-0.1,2.9,0,2,0.5C1.1,1.1,0.4,1.9,0.2,3 C-0.1,4,0,5.1,0.6,6C1.1,6.9,1.9,7.6,3,7.8l5.4,2l0.5-2L6.2,6.9L3.6,6z\"/></g></svg>'\n    },\n    // common, ltr icon\n    redo: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.59 14.18\"><g><path d=\"M11.58,18.48a6.84,6.84,0,1,1,6.85-6.85s0,.26,0,.67a8,8,0,0,1-.22,1.44l.91-.55a.51.51,0,0,1,.36,0,.45.45,0,0,1,.29.22.47.47,0,0,1,.06.36.45.45,0,0,1-.22.29L17.42,15.3l-.12,0h-.25l-.12-.06-.09-.09-.06-.07,0-.06-.87-2.12a.43.43,0,0,1,0-.37.49.49,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26l.44,1.09a6.51,6.51,0,0,0,.24-1.36,4.58,4.58,0,0,0,0-.64,5.83,5.83,0,0,0-1.73-4.17,5.88,5.88,0,0,0-8.34,0,5.9,5.9,0,0,0,4.17,10.06.51.51,0,0,1,.33.15.48.48,0,0,1,0,.68.53.53,0,0,1-.33.12Z\" transform=\"translate(-4.48 -4.54)\"/></g></svg>',\n    undo: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.59 14.18\"><g><path d=\"M5,14a.43.43,0,0,1-.22-.29.46.46,0,0,1,.06-.36.43.43,0,0,1,.29-.22.56.56,0,0,1,.36,0l.91.55a8.27,8.27,0,0,1-.22-1.45,5.07,5.07,0,0,1,0-.67A6.85,6.85,0,1,1,13,18.47a.44.44,0,0,1-.33-.13.48.48,0,0,1,0-.68.51.51,0,0,1,.33-.15A5.89,5.89,0,0,0,17.15,7.45a5.88,5.88,0,0,0-8.33,0,5.84,5.84,0,0,0-1.73,4.17s0,.25,0,.65a6.49,6.49,0,0,0,.24,1.37l.44-1.09a.57.57,0,0,1,.27-.26.41.41,0,0,1,.36,0,.53.53,0,0,1,.27.26.43.43,0,0,1,0,.37L7.82,15l0,.09-.09.09-.1.07-.06,0H7.28l-.13,0-1.09-.63c-.65-.36-1-.57-1.1-.63Z\" transform=\"translate(-4.49 -4.53)\"/></g></svg>',\n    bold: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.76 15.75\"><g><path d=\"M6.4,3.76V19.5h6.76a5.55,5.55,0,0,0,2-.32,4.93,4.93,0,0,0,1.52-1,4.27,4.27,0,0,0,1.48-3.34,3.87,3.87,0,0,0-.69-2.37,5.74,5.74,0,0,0-.71-.83,3.44,3.44,0,0,0-1.1-.65,3.6,3.6,0,0,0,1.58-1.36,3.66,3.66,0,0,0,.53-1.93,3.7,3.7,0,0,0-1.21-2.87,4.65,4.65,0,0,0-3.25-1.1H6.4Zm2.46,6.65V5.57h3.52a4.91,4.91,0,0,1,1.36.15,2.3,2.3,0,0,1,.85.45,2.06,2.06,0,0,1,.74,1.71,2.3,2.3,0,0,1-.78,1.92,2.54,2.54,0,0,1-.86.46,4.7,4.7,0,0,1-1.32.15H8.86Zm0,7.27V12.15H12.7a4.56,4.56,0,0,1,1.38.17,3.43,3.43,0,0,1,.95.49,2.29,2.29,0,0,1,.92,2,2.73,2.73,0,0,1-.83,2.1,2.66,2.66,0,0,1-.83.58,3.25,3.25,0,0,1-1.26.2H8.86Z\" transform=\"translate(-6.4 -3.75)\"/></g></svg>',\n    underline: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 9.78 15.74\"><g><path d=\"M14.64,3.76h2.52v7.72a4.51,4.51,0,0,1-.59,2.31,3.76,3.76,0,0,1-1.71,1.53,6.12,6.12,0,0,1-2.64.53,5,5,0,0,1-3.57-1.18,4.17,4.17,0,0,1-1.27-3.24V3.76H9.9v7.3a3,3,0,0,0,.55,2,2.3,2.3,0,0,0,1.83.65,2.26,2.26,0,0,0,1.8-.65,3.09,3.09,0,0,0,.55-2V3.76Zm2.52,13.31V19.5H7.39V17.08h9.77Z\" transform=\"translate(-7.38 -3.76)\"/></g></svg>',\n    italic: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10.49 15.76\"><g><path d=\"M17.16,3.79l.37,0-.06.38-.14.52A10,10,0,0,1,16.21,5a9.37,9.37,0,0,0-1,.32,6.68,6.68,0,0,0-.25.89c-.06.31-.11.59-.14.85-.3,1.36-.52,2.41-.68,3.14l-.61,3.18L13.1,15l-.43,2.4-.12.46a.62.62,0,0,0,0,.28c.44.1.85.17,1.23.22l.68.11a4.51,4.51,0,0,1-.08.6l-.09.42a.92.92,0,0,0-.23,0l-.43,0a1.37,1.37,0,0,1-.29,0c-.13,0-.63-.08-1.49-.16l-2,0c-.28,0-.87,0-1.78.12L7,19.5l.17-.88.8-.2A6.61,6.61,0,0,0,9.19,18,2.62,2.62,0,0,0,9.61,17l.28-1.41.58-2.75.12-.66c.05-.3.11-.58.17-.86s.12-.51.17-.69l.12-.48.12-.43.31-1.6.15-.65.31-1.91V5.14a3.86,3.86,0,0,0-1.48-.29l-.38,0,.2-1.06,3.24.14.75,0c.45,0,1.18,0,2.18-.09.23,0,.46,0,.71,0Z\" transform=\"translate(-7.04 -3.76)\"/></g></svg>',\n    strike: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.9\"><g><path d=\"M12.94,13a4.27,4.27,0,0,1,1.32.58,1.46,1.46,0,0,1,.55,1.2,1.87,1.87,0,0,1-.88,1.64,4.17,4.17,0,0,1-2.35.59,4.44,4.44,0,0,1-2.74-.71,2.72,2.72,0,0,1-1-2.17H5.57a4.56,4.56,0,0,0,1.55,3.7,7,7,0,0,0,4.47,1.23,6,6,0,0,0,4.07-1.3,4.24,4.24,0,0,0,1.52-3.37,4,4,0,0,0-.26-1.4h-4ZM6.37,10.24A3.27,3.27,0,0,1,6,8.68a4,4,0,0,1,1.48-3.3,5.92,5.92,0,0,1,3.88-1.21,5.58,5.58,0,0,1,3.91,1.24,4.36,4.36,0,0,1,1.45,3.17H14.44a2.12,2.12,0,0,0-.91-1.81,4.45,4.45,0,0,0-2.44-.55,3.69,3.69,0,0,0-2,.51A1.64,1.64,0,0,0,8.3,8.22a1.3,1.3,0,0,0,.48,1.11,7,7,0,0,0,2.1.78l.28.06.28.08H6.37Zm13.09.68a.73.73,0,0,1,.49.21.66.66,0,0,1,.2.48.64.64,0,0,1-.2.48.71.71,0,0,1-.49.19H5.1a.67.67,0,0,1-.49-.19.66.66,0,0,1-.2-.48.64.64,0,0,1,.2-.48.73.73,0,0,1,.49-.21H19.46Z\" transform=\"translate(-4.41 -4.17)\"/></g></svg>',\n    subscript: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 14.61\"><g><path d=\"M15.38,4.33H12.74L11.19,7c-.28.46-.51.87-.69,1.21L10.07,9h0l-.44-.8c-.22-.4-.45-.81-.71-1.23L7.34,4.33H4.68L8.26,10,4.4,16.08H7.1l1.69-2.83c.38-.63.72-1.22,1-1.78l.25-.46h0l.49.92c.24.45.48.89.74,1.32L13,16.08h2.61L11.84,10l1.77-2.84,1.77-2.85Zm4.77,13.75H17v-.15c0-.4.05-.64.16-.72a4.42,4.42,0,0,1,1.16-.31,3.3,3.3,0,0,0,1.54-.56A1.84,1.84,0,0,0,20.15,15a1.78,1.78,0,0,0-.44-1.41A2.8,2.8,0,0,0,18,13.25a2.71,2.71,0,0,0-1.69.37,1.83,1.83,0,0,0-.44,1.43v.23H17v-.23q0-.63.18-.78a1.62,1.62,0,0,1,.88-.15,1.59,1.59,0,0,1,.88.15q.18.15.18.75t-.18.75a3.58,3.58,0,0,1-1.18.33,3.33,3.33,0,0,0-1.52.51,1.57,1.57,0,0,0-.32,1.18v1.15h4.27v-.86Z\" transform=\"translate(-4.4 -4.33)\"/></g></svg>',\n    superscript: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.42\"><g><path d=\"M12,13.14l3.61-5.81H12.94L11.33,10c-.28.46-.51.88-.69,1.25l-.45.83h0l-.45-.85c-.22-.41-.45-.82-.71-1.24L7.4,7.33H4.68l3.66,5.81L4.4,19.33H7.14l1.74-2.87q.58-1,1-1.83l.25-.48h0l.51.94.75,1.37,1.72,2.87h2.67l-1.92-3.09c-1.12-1.8-1.76-2.83-1.92-3.1Zm4.84-4.41h0l0,.15h3.27v.86H15.77V8.58a1.66,1.66,0,0,1,.33-1.22,3.51,3.51,0,0,1,1.56-.51,3.68,3.68,0,0,0,1.21-.34c.13-.1.19-.36.19-.77S19,5.07,18.87,5A1.63,1.63,0,0,0,18,4.8a1.58,1.58,0,0,0-.91.17c-.13.11-.19.38-.19.8V6H15.78V5.76a1.87,1.87,0,0,1,.45-1.47A2.84,2.84,0,0,1,18,3.91a2.8,2.8,0,0,1,1.72.38,1.84,1.84,0,0,1,.45,1.44,1.91,1.91,0,0,1-.34,1.35,3.24,3.24,0,0,1-1.58.57A3.69,3.69,0,0,0,17,8c-.12.1-.17.35-.17.76Z\" transform=\"translate(-4.4 -3.91)\"/></g></svg>',\n    erase: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.76\"><g><path d=\"M13.69,17.2h6.46v1.31H8.56L4.41,14.37,14,4.75l6.06,6.06L16.89,14l-3.2,3.19Zm-4.61,0h2.77L14.09,15,9.88,10.75,6.25,14.38l1.41,1.41c.84.82,1.31,1.29,1.42,1.41Z\" transform=\"translate(-4.41 -4.75)\"/></g></svg>',\n    indent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 12.36\"><g><path d=\"M4.68,14.45a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V9.1a.27.27,0,0,1,.08-.19.28.28,0,0,1,.2-.08.25.25,0,0,1,.19.07l2.54,2.54a.29.29,0,0,1,0,.4L4.88,14.36a.24.24,0,0,1-.2.09Zm15.19,1.12a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87Zm0-3.38a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm0-3.37a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm.2-3.29a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z\" transform=\"translate(-4.41 -5.44)\"/></g></svg>',\n    outdent: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 12.36\"><g><path d=\"M19.87,15.57a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.25.25,0,0,1-.08-.19V15.84a.27.27,0,0,1,.27-.27H19.87ZM7.5,14.45a.25.25,0,0,1-.2-.09L4.76,11.84a.29.29,0,0,1,0-.4L7.3,8.9a.29.29,0,0,1,.4,0,.31.31,0,0,1,.07.2v5.06a.32.32,0,0,1-.08.21.26.26,0,0,1-.19.08ZM19.87,8.82a.27.27,0,0,1,.19.08.25.25,0,0,1,.08.19v1.69a.27.27,0,0,1-.08.19.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.27-.27V9.1a.27.27,0,0,1,.27-.27h9.56Zm0,3.37a.27.27,0,0,1,.19.08.28.28,0,0,1,.08.21v1.68a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H10.31a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V12.48a.32.32,0,0,1,.08-.21.24.24,0,0,1,.19-.08h9.56Zm.2-6.66a.28.28,0,0,1,.08.2V7.41a.32.32,0,0,1-.08.21.25.25,0,0,1-.19.08H4.68a.27.27,0,0,1-.19-.08.3.3,0,0,1-.08-.21V5.73a.32.32,0,0,1,.08-.21.25.25,0,0,1,.19-.08H19.87a.28.28,0,0,1,.2.09Z\" transform=\"translate(-4.41 -5.44)\"/></g></svg>',\n    expansion: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M11.8,13.06l-5.1,5.1H9.51V19.5H4.41V14.4H5.75v2.81L8.3,14.66q2.25-2.23,2.55-2.55Zm8.35-9.3v5.1H18.81V6.05l-5.1,5.1-1-1,5.1-5.1H15.05V3.76Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    reduction: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M14.91,10h2.87v1.38H12.55V6.12h1.38V9l5.24-5.24.48.49.49.48ZM6.77,11.92H12v5.23H10.62V14.26L5.37,19.5l-1-1L9.63,13.3H6.77Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    code_view: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 11.8\"><g><path d=\"M8.09,7.94a.76.76,0,0,1,.53.22.72.72,0,0,1,.21.52.76.76,0,0,1-.22.54L6.18,11.63l2.43,2.44a.69.69,0,0,1,.2.51.66.66,0,0,1-.21.51.75.75,0,0,1-.51.22.63.63,0,0,1-.51-.21h0L4.63,12.15a.7.7,0,0,1-.22-.53.67.67,0,0,1,.25-.55L7.57,8.16a.82.82,0,0,1,.52-.22Zm12.05,3.69a.7.7,0,0,1-.23.52L17,15.1h0a.66.66,0,0,1-.51.21.73.73,0,0,1-.51-.22.75.75,0,0,1-.22-.51.63.63,0,0,1,.21-.51l2.43-2.44L15.92,9.22a.73.73,0,0,1-.22-.53A.74.74,0,0,1,17,8.18h0l2.91,2.91a.67.67,0,0,1,.27.54Zm-5.9-5.9a.73.73,0,0,1,.61.32.71.71,0,0,1,.07.68L11,17a1,1,0,0,1-.22.32.6.6,0,0,1-.35.16.75.75,0,0,1-.69-.26.69.69,0,0,1-.12-.72L13.56,6.23a.75.75,0,0,1,.26-.35.74.74,0,0,1,.42-.15Z\" transform=\"translate(-4.41 -5.73)\"/></g></svg>',\n    preview: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.65 15.66\"><g><path d=\"M16.19,14.43l2.49,2.49a.73.73,0,0,1,.21.52.67.67,0,0,1-.22.51.7.7,0,0,1-.52.22.69.69,0,0,1-.51-.21l-2.49-2.48a5.17,5.17,0,0,1-1.34.69,4.64,4.64,0,0,1-1.48.24,4.78,4.78,0,1,1,0-9.56,4.79,4.79,0,0,1,1.84.36,4.9,4.9,0,0,1,1.56,1,4.77,4.77,0,0,1,.46,6.18ZM10,14a3.3,3.3,0,0,0,2.34.93A3.37,3.37,0,0,0,14.7,14a3.3,3.3,0,0,0-1.08-5.41,3.47,3.47,0,0,0-2.56,0A3,3,0,0,0,10,9.28,3.31,3.31,0,0,0,10,14ZM16,4a3.86,3.86,0,0,1,2.77,1.14A3.9,3.9,0,0,1,20,7.85v4a.77.77,0,0,1-.22.53.7.7,0,0,1-.52.21.72.72,0,0,1-.74-.74v-4a2.46,2.46,0,0,0-.72-1.73A2.37,2.37,0,0,0,16,5.45H8.53A2.42,2.42,0,0,0,6.08,7.89v7.52a2.41,2.41,0,0,0,.71,1.73,2.46,2.46,0,0,0,1.74.72h4.08a.73.73,0,0,1,0,1.46H8.53a3.85,3.85,0,0,1-2.78-1.14A3.93,3.93,0,0,1,4.6,15.4V7.87A3.94,3.94,0,0,1,5.76,5.09,3.88,3.88,0,0,1,8.54,4H16Z\" transform=\"translate(-4.45 -3.8)\"/></g></svg>',\n    print: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16.05 16.04\"><g><path d=\"M19.76,15.84a1.29,1.29,0,0,0,.39-.92V8.35A2.05,2.05,0,0,0,19.57,7a1.93,1.93,0,0,0-1.38-.57H6.37a1.95,1.95,0,0,0-2,2v6.56a1.23,1.23,0,0,0,.38.92,1.35,1.35,0,0,0,.93.38h2V14.9l-2,0V8.35a.67.67,0,0,1,.18-.47.62.62,0,0,1,.48-.19H18.18a.6.6,0,0,1,.46.19.66.66,0,0,1,.18.47V14.9h-2v1.32h2A1.35,1.35,0,0,0,19.76,15.84ZM17.52,7.69V5.06a1.31,1.31,0,0,0-.38-.92,1.34,1.34,0,0,0-.94-.38H8.34A1.3,1.3,0,0,0,7,5.06V7.69H8.34V5.06h7.87V7.69h1.31ZM8.34,12.93h7.87l0,5.26H8.34V12.93Zm7.87,5.26v0Zm.65,1.31a.6.6,0,0,0,.46-.19.72.72,0,0,0,.2-.47V12.29a.74.74,0,0,0-.2-.47.6.6,0,0,0-.46-.19H7.68a.6.6,0,0,0-.46.19.72.72,0,0,0-.2.47v6.55a.74.74,0,0,0,.2.47.6.6,0,0,0,.46.19h9.18ZM16.67,9.28a.7.7,0,0,0-.94,0,.63.63,0,0,0-.18.46.67.67,0,0,0,.18.47.68.68,0,0,0,.94,0,.66.66,0,0,0,.18-.47A.58.58,0,0,0,16.67,9.28Z\" transform=\"translate(-4.25 -3.61)\"/></g></svg>',\n    template: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14.27 15.64\"><g><path d=\"M18.18,19.16a1,1,0,0,0,1-1V5.73a1,1,0,0,0-1-1h-2v1h2V18.19H6.37V5.73h2v-1h-2A.94.94,0,0,0,5.68,5a1,1,0,0,0-.29.7V18.18a.94.94,0,0,0,.29.69,1,1,0,0,0,.69.29H18.18ZM9.82,10.31h4.92a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H9.82a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15Zm5.9,4.92H8.83a.49.49,0,0,0-.35.15.47.47,0,0,0-.15.35.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h6.89a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.51.51,0,0,0-.5-.5ZM7.36,12.77a.49.49,0,0,0,.15.35.47.47,0,0,0,.35.15h8.85a.49.49,0,0,0,.35-.15.47.47,0,0,0,.15-.35.49.49,0,0,0-.15-.35.47.47,0,0,0-.35-.15H7.85a.49.49,0,0,0-.35.15.52.52,0,0,0-.14.35Z\" transform=\"translate(-5.14 -3.77)\"/><path d=\"M14.24,6.71a1,1,0,0,0,1-1,1,1,0,0,0-1-1,1,1,0,0,0-1-1h-2a.94.94,0,0,0-.69.28,1,1,0,0,0-.29.7A.94.94,0,0,0,9.62,5a.91.91,0,0,0-.29.69,1,1,0,0,0,.29.7,1,1,0,0,0,.69.29h3.93Z\" transform=\"translate(-5.14 -3.77)\"/></g></svg>',\n    line_height: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 13.56\"><g><path d=\"M4.4,4.88V8.26a2,2,0,0,0,.5.39s.1,0,.18-.12a.62.62,0,0,0,.17-.28c.06-.19.13-.44.21-.74s.14-.52.19-.66a.58.58,0,0,1,.21-.3,2.41,2.41,0,0,1,.63-.21,3.83,3.83,0,0,1,.88-.12,9.15,9.15,0,0,1,1.31.06.16.16,0,0,1,.11,0,.26.26,0,0,1,.06.14,4,4,0,0,1,0,.49v2l.05,3.77c0,1.41,0,2.68-.05,3.81a1.79,1.79,0,0,1-.11.49,10.68,10.68,0,0,1-1.4.45,1.12,1.12,0,0,0-.69.43v.31l0,.22.61,0c.85-.08,1.54-.12,2.06-.12a19.76,19.76,0,0,1,2.09.08,15.08,15.08,0,0,0,1.64.08,1.4,1.4,0,0,0,.29,0,1.58,1.58,0,0,0,0-.26l-.05-.43a2.26,2.26,0,0,0-.43-.17l-.77-.22-.15,0a2.55,2.55,0,0,1-.78-.28,2.56,2.56,0,0,1-.11-.75l0-1.29,0-3.15V7.53a10.51,10.51,0,0,1,.06-1.2,3.83,3.83,0,0,1,.6,0l1.88,0a2.18,2.18,0,0,1,.38,0,.45.45,0,0,1,.23.17.9.9,0,0,1,.05.25c0,.16.06.35.1.58a3.33,3.33,0,0,0,.14.55A6.39,6.39,0,0,0,15,9a2.91,2.91,0,0,0,.6-.15,2.77,2.77,0,0,0,0-.46l0-.51,0-2.95-.25,0-.38,0L15,4.94a.71.71,0,0,1-.18.15.45.45,0,0,1-.25.07l-.29,0H8.75l-.15,0H7.45a17,17,0,0,1-1.86,0L5.36,5l-.25-.13ZM19.75,16.14h-.69v-9h.69A.4.4,0,0,0,20.13,7c.06-.11,0-.24-.1-.39L18.92,5.15a.52.52,0,0,0-.86,0L17,6.58c-.12.15-.16.28-.1.39s.18.16.38.16h.69v9h-.69a.4.4,0,0,0-.38.16c-.06.11,0,.24.1.39l1.11,1.43a.52.52,0,0,0,.86,0L20,16.69c.12-.15.16-.28.1-.39a.4.4,0,0,0-.38-.16Z\" transform=\"translate(-4.4 -4.86)\"/></g></svg>',\n    paragraph_style: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.81 15.74\"><g><path d=\"M18.18,3.76v2h-2V19.5h-2V5.73h-2V19.5h-2V11.63a3.94,3.94,0,0,1,0-7.87h7.87Z\" transform=\"translate(-6.37 -3.76)\"/></g></svg>',\n    text_style: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 13.76 15.74\"><g><path d=\"M17.68,6.71a2.22,2.22,0,0,0,1.06-.22.74.74,0,0,0,.42-.7.73.73,0,0,0-.08-.33.67.67,0,0,0-.17-.22,1,1,0,0,0-.31-.15L18.26,5l-.45-.09A15.27,15.27,0,0,0,13.26,5V4.74c0-.66-.63-1-1.92-1-.24,0-.43.15-.59.46a4,4,0,0,0-.36,1.14h0v0a26.45,26.45,0,0,1-3.5.35A2,2,0,0,0,5.77,6a.84.84,0,0,0-.37.79,2.14,2.14,0,0,0,.41,1.29,1.23,1.23,0,0,0,1.05.63,16.62,16.62,0,0,0,3.29-.45l-.34,3.35c-.16,1.61-.29,2.9-.37,3.86s-.12,1.66-.12,2.09l0,.65a5.15,5.15,0,0,0,.05.6,1.28,1.28,0,0,0,.16.54.34.34,0,0,0,.28.18,1.16,1.16,0,0,0,.79-.46,3.66,3.66,0,0,0,.68-1,22.08,22.08,0,0,0,1-4.33q.49-3.1.78-6.15a24.69,24.69,0,0,1,4.62-.84Z\" transform=\"translate(-5.4 -3.76)\"/></g></svg>',\n    save: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M18.53,19.5l.2-.05A1.78,1.78,0,0,0,20.13,18l0-.09V7.14a2,2,0,0,0-.28-.64A3.18,3.18,0,0,0,19.43,6c-.5-.52-1-1-1.55-1.54A2.59,2.59,0,0,0,17.37,4a1.83,1.83,0,0,0-.61-.25H6l-.21,0a1.78,1.78,0,0,0-1.4,1.49l0,.1V17.87a2.49,2.49,0,0,0,.09.37,1.79,1.79,0,0,0,1.44,1.23l.09,0Zm-6.25-.6H6.92a.61.61,0,0,1-.68-.48.78.78,0,0,1,0-.22V12.3a.62.62,0,0,1,.69-.68H17.64a.62.62,0,0,1,.69.69V18.2a.64.64,0,0,1-.71.69H12.28ZM12,9.81H8.15a.63.63,0,0,1-.72-.71v-4a.64.64,0,0,1,.72-.72h7.66a.64.64,0,0,1,.72.72v4a.65.65,0,0,1-.74.72ZM13.5,5V9.18h1.78V5Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    blockquote: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 475.082 475.081\"><g><path d=\"M164.45,219.27h-63.954c-7.614,0-14.087-2.664-19.417-7.994c-5.327-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.416-51.678c14.276-14.272,31.503-21.411,51.678-21.411h18.271c4.948,0,9.229-1.809,12.847-5.424c3.616-3.617,5.424-7.898,5.424-12.847V54.819c0-4.948-1.809-9.233-5.424-12.85c-3.617-3.612-7.898-5.424-12.847-5.424h-18.271c-19.797,0-38.684,3.858-56.673,11.563c-17.987,7.71-33.545,18.132-46.68,31.267c-13.134,13.129-23.553,28.688-31.262,46.677C3.855,144.039,0,162.931,0,182.726v200.991c0,15.235,5.327,28.171,15.986,38.834c10.66,10.657,23.606,15.985,38.832,15.985h109.639c15.225,0,28.167-5.328,38.828-15.985c10.657-10.663,15.987-23.599,15.987-38.834V274.088c0-15.232-5.33-28.168-15.994-38.832C192.622,224.6,179.675,219.27,164.45,219.27z\"/><path d=\"M459.103,235.256c-10.656-10.656-23.599-15.986-38.828-15.986h-63.953c-7.61,0-14.089-2.664-19.41-7.994c-5.332-5.33-7.994-11.801-7.994-19.417v-9.132c0-20.177,7.139-37.401,21.409-51.678c14.271-14.272,31.497-21.411,51.682-21.411h18.267c4.949,0,9.233-1.809,12.848-5.424c3.613-3.617,5.428-7.898,5.428-12.847V54.819c0-4.948-1.814-9.233-5.428-12.85c-3.614-3.612-7.898-5.424-12.848-5.424h-18.267c-19.808,0-38.691,3.858-56.685,11.563c-17.984,7.71-33.537,18.132-46.672,31.267c-13.135,13.129-23.559,28.688-31.265,46.677c-7.707,17.987-11.567,36.879-11.567,56.674v200.991c0,15.235,5.332,28.171,15.988,38.834c10.657,10.657,23.6,15.985,38.828,15.985h109.633c15.229,0,28.171-5.328,38.827-15.985c10.664-10.663,15.985-23.599,15.985-38.834V274.088C475.082,258.855,469.76,245.92,459.103,235.256z\"/></g></svg>',\n    arrow_down: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 8.67\"><g><path d=\"M18.79,7.52a.8.8,0,0,1,.56-.23.82.82,0,0,1,.79.79.8.8,0,0,1-.23.56l-7.07,7.07a.79.79,0,0,1-.57.25.77.77,0,0,1-.57-.25h0L4.64,8.65a.8.8,0,0,1-.23-.57.82.82,0,0,1,.79-.79.8.8,0,0,1,.56.23L12.28,14l3.26-3.26,3.25-3.26Z\" transform=\"translate(-4.41 -7.29)\"/></g></svg>',\n    align_justify: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm0,5.9H20.15v-2H4.41v2Zm0,3.94H20.15v-2H4.41v2Zm0,3.93h7.87v-2H4.41v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    align_left: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm11.8,3.94H4.41v2H16.22v-2Zm-11.8,5.9H18.18v-2H4.41v2Zm0,3.93h9.84v-2H4.41v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    align_right: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm3.93,5.9H20.15v-2H8.34v2Zm-2,3.94H20.14v-2H6.37v2Zm3.94,3.93h9.84v-2H10.31v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    align_center: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.77\"><g><path d=\"M4.41,4.74v2H20.15v-2H4.41Zm2,3.94v2H18.18v-2H6.37Zm-1,5.9H19.16v-2H5.39v2Zm2,3.93H17.2v-2H7.36v2Z\" transform=\"translate(-4.41 -4.74)\"/></g></svg>',\n    font_color: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.61\"><g><path d=\"M18.5,15.57,14.28,4.32h-3.4L6.65,15.57h3l.8-2.26h4.23l.8,2.26h3ZM14,11.07H11.14L12.54,7,13.25,9c.41,1.18.64,1.86.7,2ZM4.41,16.69v2.24H20.15V16.69H4.41Z\" transform=\"translate(-4.41 -4.32)\"/></g></svg>',\n    highlight_color: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.66 15.74\"><g><path d=\"M12.32,9.31,13.38,13H11.21l.52-1.83q.46-1.61.54-1.83ZM4.44,3.76H20.1V19.5H4.44V3.76ZM14.71,17.32h2.63L13.7,6H10.89L7.26,17.32H9.89l.63-2.24h3.55l.32,1.12c.18.65.29,1,.32,1.12Z\" transform=\"translate(-4.44 -3.76)\"/></g></svg>',\n    list_bullets: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 12.37\"><g><path d=\"M7.77,16.12a1.59,1.59,0,0,0-.49-1.18,1.62,1.62,0,0,0-1.19-.49,1.68,1.68,0,1,0,0,3.36,1.67,1.67,0,0,0,1.68-1.69Zm0-4.48A1.67,1.67,0,0,0,6.09,10,1.68,1.68,0,0,0,4.9,12.82a1.62,1.62,0,0,0,1.19.49,1.67,1.67,0,0,0,1.68-1.67Zm12.38,3.64a.27.27,0,0,0-.08-.19.28.28,0,0,0-.2-.09H9.19a.28.28,0,0,0-.2.08.29.29,0,0,0-.08.19V17a.27.27,0,0,0,.28.28H19.87a.27.27,0,0,0,.19-.08.24.24,0,0,0,.08-.2V15.28ZM7.77,7.13a1.63,1.63,0,0,0-.49-1.2,1.61,1.61,0,0,0-1.19-.49,1.61,1.61,0,0,0-1.19.49,1.71,1.71,0,0,0,0,2.4,1.62,1.62,0,0,0,1.19.49,1.61,1.61,0,0,0,1.19-.49,1.63,1.63,0,0,0,.49-1.2Zm12.38,3.66a.28.28,0,0,0-.08-.2.29.29,0,0,0-.19-.08H9.19a.27.27,0,0,0-.28.28v1.69a.27.27,0,0,0,.08.19.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08.25.25,0,0,0,.08-.19V10.79Zm0-4.5a.27.27,0,0,0-.08-.19A.25.25,0,0,0,19.88,6H9.19A.28.28,0,0,0,9,6.1a.26.26,0,0,0-.08.19V8A.27.27,0,0,0,9,8.17a.24.24,0,0,0,.2.08H19.87a.27.27,0,0,0,.19-.08A.25.25,0,0,0,20.14,8V6.29Z\" transform=\"translate(-4.41 -5.44)\"/></g></svg>',\n    list_number: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.69 15.74\"><g><path d=\"M7.66,18a1.24,1.24,0,0,0-.26-.78,1.17,1.17,0,0,0-.72-.42l.85-1V15H4.58v1.34h.94v-.46l.85,0h0c-.11.11-.22.23-.32.35s-.23.27-.37.47L5.39,17l.23.51c.61-.05.92.11.92.49a.42.42,0,0,1-.18.37.79.79,0,0,1-.45.12A1.41,1.41,0,0,1,5,18.15l-.51.77A2.06,2.06,0,0,0,6,19.5a1.8,1.8,0,0,0,1.2-.41A1.38,1.38,0,0,0,7.66,18Zm0-5.54H6.75V13H5.63A.72.72,0,0,1,6,12.51a5.45,5.45,0,0,1,.66-.45,2.71,2.71,0,0,0,.67-.57,1.19,1.19,0,0,0,.31-.81,1.29,1.29,0,0,0-.45-1,1.86,1.86,0,0,0-2-.11,1.51,1.51,0,0,0-.62.7l.74.52A.87.87,0,0,1,6,10.28a.51.51,0,0,1,.35.12.42.42,0,0,1,.13.33.55.55,0,0,1-.21.4,3,3,0,0,1-.5.38c-.19.13-.39.27-.58.42a2,2,0,0,0-.5.6,1.63,1.63,0,0,0-.21.81,3.89,3.89,0,0,0,.05.48h3.2V12.44Zm12.45,2.82a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2V17a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V15.26ZM7.69,7.32h-1V3.76H5.8L4.6,4.88l.63.68a1.85,1.85,0,0,0,.43-.48h0l0,2.24H4.74V8.2h3V7.32Zm12.43,3.42a.27.27,0,0,0-.08-.19.28.28,0,0,0-.21-.08H9.1a.32.32,0,0,0-.21.08.24.24,0,0,0-.08.2v1.71a.27.27,0,0,0,.08.19.3.3,0,0,0,.21.08H19.83a.32.32,0,0,0,.21-.08.25.25,0,0,0,.08-.19V10.74Zm0-4.52A.27.27,0,0,0,20,6,.28.28,0,0,0,19.83,6H9.1A.32.32,0,0,0,8.89,6a.24.24,0,0,0-.08.19V7.93a.27.27,0,0,0,.08.19.32.32,0,0,0,.21.08H19.83A.32.32,0,0,0,20,8.12a.26.26,0,0,0,.08-.2V6.22Z\" transform=\"translate(-4.43 -3.76)\"/></g></svg>',\n    table: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M4.41,8.05V3.76H8.7V8.05H4.41Zm5.71,0V3.76h4.3V8.05h-4.3Zm5.74-4.29h4.29V8.05H15.86V3.76Zm-11.45,10V9.48H8.7v4.3H4.41Zm5.71,0V9.48h4.3v4.3h-4.3Zm5.74,0V9.48h4.29v4.3H15.86ZM4.41,19.5V15.21H8.7V19.5H4.41Zm5.71,0V15.21h4.3V19.5h-4.3Zm5.74,0V15.21h4.29V19.5H15.86Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    horizontal_rule: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 2.24\"><g><path d=\"M20.15,12.75V10.51H4.41v2.24H20.15Z\" transform=\"translate(-4.41 -10.51)\"/></g></svg>',\n    show_blocks: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.66 15.67\"><g><path d=\"M19.72,5.58a1.64,1.64,0,0,0-1.64-1.64H6.23a1.62,1.62,0,0,0-1.16.48,1.63,1.63,0,0,0-.48,1.16V9.63a1.6,1.6,0,0,0,.48,1.16,1.62,1.62,0,0,0,1.16.47H18.09a1.67,1.67,0,0,0,1.16-.47,1.62,1.62,0,0,0,.48-1.16V5.58Zm-.94,4.05a.68.68,0,0,1-.7.7H6.23a.66.66,0,0,1-.48-.2.74.74,0,0,1-.21-.5V5.58a.66.66,0,0,1,.2-.48.71.71,0,0,1,.48-.21H18.08a.74.74,0,0,1,.5.21.66.66,0,0,1,.2.48ZM6.48,7.72a.21.21,0,0,0,.17-.07.22.22,0,0,0,.07-.17V7.06a1.27,1.27,0,0,1,.11-.52.37.37,0,0,1,.36-.23H8.77A.25.25,0,0,0,9,6.17a.19.19,0,0,0,0-.23.27.27,0,0,0-.2-.12H7.19a.88.88,0,0,0-.72.39,1.51,1.51,0,0,0-.23.85v.42a.24.24,0,0,0,.24.24Zm-.19.81a.21.21,0,0,0,.17-.07.26.26,0,0,0,.07-.17.24.24,0,0,0-.24-.24.2.2,0,0,0-.16.09.2.2,0,0,0-.07.16.22.22,0,0,0,.07.17.23.23,0,0,0,.16.06Zm8.46,5.1a1.63,1.63,0,0,0-.47-1.16A1.61,1.61,0,0,0,13.12,12H6.23a1.6,1.6,0,0,0-1.16.46,1.62,1.62,0,0,0-.48,1.16v4.05a1.64,1.64,0,0,0,1.64,1.64h6.89a1.6,1.6,0,0,0,1.16-.48,1.62,1.62,0,0,0,.47-1.16Zm-.94,4a.7.7,0,0,1-.2.49.65.65,0,0,1-.5.2H6.23a.66.66,0,0,1-.48-.2.75.75,0,0,1-.21-.49v-4a.74.74,0,0,1,.21-.5.66.66,0,0,1,.48-.2h6.89a.68.68,0,0,1,.7.7v4Zm6.15,0v-4a1.6,1.6,0,0,0-.48-1.16A1.67,1.67,0,0,0,18.32,12H17.1a1.63,1.63,0,0,0-1.16.47,1.61,1.61,0,0,0-.47,1.16v4a1.67,1.67,0,0,0,.47,1.16,1.62,1.62,0,0,0,1.16.48h1.22A1.64,1.64,0,0,0,20,17.68Zm-.94-4v4a.75.75,0,0,1-.21.49.62.62,0,0,1-.48.2H17.11a.69.69,0,0,1-.5-.2.7.7,0,0,1-.2-.49v-4a.68.68,0,0,1,.7-.7h1.22a.66.66,0,0,1,.48.2.72.72,0,0,1,.21.5Z\" transform=\"translate(-4.44 -3.79)\"/></g></svg>',\n    cancel: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M14.15,11.63l5.61,5.61a1.29,1.29,0,0,1,.38.93,1.27,1.27,0,0,1-.4.93,1.25,1.25,0,0,1-.92.4,1.31,1.31,0,0,1-.94-.4l-5.61-5.61L6.67,19.1a1.31,1.31,0,0,1-.94.4,1.24,1.24,0,0,1-.92-.4,1.27,1.27,0,0,1-.4-.93,1.33,1.33,0,0,1,.38-.93l5.61-5.63L4.79,6a1.26,1.26,0,0,1-.38-.93,1.22,1.22,0,0,1,.4-.92,1.28,1.28,0,0,1,.92-.39,1.38,1.38,0,0,1,.94.38l5.61,5.61,5.61-5.61a1.33,1.33,0,0,1,.94-.38,1.26,1.26,0,0,1,.92.39,1.24,1.24,0,0,1,.4.92,1.29,1.29,0,0,1-.39.93L17,8.81l-2.8,2.82Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    image: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.77\"><g><path d=\"M8.77,8.72a.88.88,0,0,1-.61-.27.82.82,0,0,1-.25-.61.89.89,0,0,1,.25-.62A.82.82,0,0,1,8.77,7a.81.81,0,0,1,.61.25.83.83,0,0,1,.27.62.81.81,0,0,1-.25.61.91.91,0,0,1-.63.27Zm9.62-5a1.74,1.74,0,0,1,1.76,1.76V17.76a1.74,1.74,0,0,1-1.76,1.76H6.16A1.74,1.74,0,0,1,4.4,17.76V5.51A1.74,1.74,0,0,1,6.16,3.75H18.39Zm0,1.75H6.16v8L8.53,11.8a.94.94,0,0,1,.54-.17.86.86,0,0,1,.54.2L11.09,13l3.64-4.55a.78.78,0,0,1,.34-.25.85.85,0,0,1,.42-.07.89.89,0,0,1,.39.12.78.78,0,0,1,.28.29l2.24,3.67V5.51Zm0,12.24V15.6L15.3,10.53,11.89,14.8a.89.89,0,0,1-.59.32.82.82,0,0,1-.64-.18L9,13.62,6.16,15.74v2Z\" transform=\"translate(-4.4 -3.75)\"/></g></svg>',\n    video: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.55\"><g><path d=\"M20.15,10.26V18.9l-3.94-1.57v1.2H4.41V10.66H16.22v1.23l2-.81,2-.82ZM14.64,17h0V12.54h0v-.31H6V17h8.67Zm3.94-.37v-4l-2.37,1v2l1.18.48,1.19.48ZM7.94,9.86A2.77,2.77,0,0,1,5.19,7.11a2.76,2.76,0,0,1,5.51,0A2.78,2.78,0,0,1,7.94,9.86Zm0-3.93a1.21,1.21,0,0,0-.83.35,1.15,1.15,0,0,0-.34.84A1.09,1.09,0,0,0,7.11,8,1.15,1.15,0,0,0,8,8.28,1.13,1.13,0,0,0,9.11,7.12,1.16,1.16,0,0,0,7.94,5.93Zm5.9,3.93a2.34,2.34,0,0,1-1.67-.68,2.3,2.3,0,0,1-.68-1.67,2.35,2.35,0,0,1,4-1.67,2.37,2.37,0,0,1,0,3.34,2.33,2.33,0,0,1-1.68.68Zm0-3.14a.75.75,0,1,0,.55.22.73.73,0,0,0-.55-.22Z\" transform=\"translate(-4.41 -4.35)\"/></g></svg>',\n    link: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.72\"><g><path d=\"M13.05,13.63a.24.24,0,0,1,.15.22L13.42,16a.19.19,0,0,1-.08.18l-2.12,2.14a4.08,4.08,0,0,1-1.29.85A4,4,0,0,1,4.71,17a3.92,3.92,0,0,1-.3-1.52A4,4,0,0,1,4.71,14a3.91,3.91,0,0,1,.87-1.3L7.7,10.56a.25.25,0,0,1,.2-.06l2.17.22a.21.21,0,0,1,.19.15.24.24,0,0,1,0,.25L7.12,14.23a1.81,1.81,0,0,0,0,2.58,1.78,1.78,0,0,0,1.29.52,1.74,1.74,0,0,0,1.28-.52L12.8,13.7a.24.24,0,0,1,.25-.07ZM19,4.92a4,4,0,0,1,0,5.66L16.86,12.7a.25.25,0,0,1-.17.08l-2.2-.23a.21.21,0,0,1-.19-.15.22.22,0,0,1,0-.25L17.44,9a1.81,1.81,0,0,0,0-2.58,1.78,1.78,0,0,0-1.29-.52,1.74,1.74,0,0,0-1.28.52L11.76,9.57a.21.21,0,0,1-.25,0,.24.24,0,0,1-.16-.21l-.22-2.17a.19.19,0,0,1,.08-.18l2.12-2.14a4.08,4.08,0,0,1,1.29-.85,4.05,4.05,0,0,1,3.06,0,3.85,3.85,0,0,1,1.3.85ZM5.84,9.82a.25.25,0,0,1-.18-.08.19.19,0,0,1-.07-.19l.11-.77a.2.2,0,0,1,.11-.17.24.24,0,0,1,.2,0l2.5.72a.25.25,0,0,1,.15.27.22.22,0,0,1-.23.21l-2.59,0Zm4.12-2-.73-2.5a.27.27,0,0,1,0-.2A.21.21,0,0,1,9.41,5L10.19,5a.25.25,0,0,1,.19,0,.23.23,0,0,1,.08.18l-.05,2.61a.2.2,0,0,1-.19.23h0A.22.22,0,0,1,10,7.85Zm8.76,5.58a.25.25,0,0,1,.18.08.23.23,0,0,1,.06.2l-.11.77a.25.25,0,0,1-.11.17.21.21,0,0,1-.12,0l-.08,0L16,14a.25.25,0,0,1-.15-.27.22.22,0,0,1,.22-.21l1.29,0,1.33,0Zm-4.12,2,.74,2.51a.28.28,0,0,1,0,.2.23.23,0,0,1-.18.11l-.8.11a.23.23,0,0,1-.17-.07.25.25,0,0,1-.08-.18l0-2.61a.22.22,0,0,1,.22-.22.21.21,0,0,1,.26.15Z\" transform=\"translate(-4.41 -3.77)\"/></g></svg>',\n    math: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.81 15.73\"><g><path d=\"M17.19,5.73a1,1,0,0,0,.71-.29,1,1,0,0,0,.28-.7,1,1,0,0,0-1-1H7.35a1,1,0,0,0-1,1,.77.77,0,0,0,.13.47h0l4.58,6.43L6.68,17.81a1.25,1.25,0,0,0-.29.71.94.94,0,0,0,.28.7.92.92,0,0,0,.69.28H17.2a1,1,0,0,0,.71-.28,1,1,0,0,0,0-1.39.92.92,0,0,0-.71-.29H9.26l3.87-5.43a.86.86,0,0,0,0-.95L9.26,5.73h7.93Z\" transform=\"translate(-6.38 -3.77)\"/></g></svg>',\n    unlink: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.72\"><g><path d=\"M19,18.32a4,4,0,0,0,0-5.68L15.85,9.5l-1.17,1.55L17.57,14a2,2,0,0,1,.61,1.47,2.08,2.08,0,0,1-2.09,2.09,2,2,0,0,1-1.47-.61l-.38-.37-1.74,1,.8.78a4,4,0,0,0,5.68,0ZM8,9.77a2,2,0,0,1-1.27-1,1.89,1.89,0,0,1-.21-1.57A2.1,2.1,0,0,1,7.45,6,2,2,0,0,1,9,5.76L12.27,7.2l.49-2L9.48,3.9a4,4,0,0,0-3.06.41A3.82,3.82,0,0,0,4.56,6.73a3.8,3.8,0,0,0,.4,3A3.78,3.78,0,0,0,7.39,11.6l5.38,2,.49-2-2.64-.94L8,9.77Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    table_header: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.74\"><g><path d=\"M17,19.5v-.78H15.5v.78H17Zm-3,0v-.78H12.5v.78H14Zm-3,0v-.78H9.53v.78H11Zm-3,0v-.78H6.53v.78H8Zm10.55,0a1.73,1.73,0,0,0,.85-.35,1.67,1.67,0,0,0,.56-.76l-.71-.31a1.21,1.21,0,0,1-.35.4,1.34,1.34,0,0,1-.53.23l.08.38c.06.24.09.38.1.41Zm-13.7-.63.55-.55A.77.77,0,0,1,5.25,18a1.31,1.31,0,0,1-.06-.38v-.38H4.41v.38a2,2,0,0,0,.12.68,1.6,1.6,0,0,0,.35.57Zm15.27-2.12V15.26h-.78v1.49h.78Zm-15-1V14.23H4.41v1.49h.78Zm15-2V12.26h-.78v1.49h.78Zm-15-1V11.22H4.41v1.51h.78Zm15-2V9.26h-.78v1.51h.78Zm-15-1V8.17H4.41V9.74h.78Zm15-2V6.28h-.78V7.77h.78Zm-15-1.11V5.33L4.48,5.1a.77.77,0,0,0-.07.27,2.72,2.72,0,0,0,0,.28v1h.79ZM19.21,5l.63-.4A1.62,1.62,0,0,0,19.16,4a1.94,1.94,0,0,0-.91-.22v.78a1.31,1.31,0,0,1,.56.12.88.88,0,0,1,.4.36ZM6,4.54H7.78V3.76H6a.82.82,0,0,0-.28.06l.12.35c.07.21.1.33.11.36Zm10.8,0V3.76H15.28v.78h1.49Zm-3,0V3.76H12.28v.78h1.49Zm-3,0V3.76H9.28v.78h1.51ZM6,10.84h12.6V6.91H6Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    merge_cell: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 15.74\"><g><path d=\"M18.92,13.5h1.23v4.15A1.84,1.84,0,0,1,18.3,19.5H14V18.27H18.3a.6.6,0,0,0,.44-.18.59.59,0,0,0,.18-.44V13.5ZM18.3,3.76a1.84,1.84,0,0,1,1.85,1.85V9.82H18.92V5.6a.6.6,0,0,0-.18-.44A.59.59,0,0,0,18.3,5H14V3.76H18.3Zm1.85,8.51H15.6L17.26,14l-.86.86-3.14-3.17L16.4,8.51l.86.86L15.62,11h4.54v1.24Zm-13.9,6h4.27V19.5H6.25A1.84,1.84,0,0,1,4.4,17.65V13.5H5.63v4.15a.61.61,0,0,0,.62.62Zm0-14.51h4.27V5H6.25a.6.6,0,0,0-.44.18.57.57,0,0,0-.17.43V9.81H4.41V5.6A1.83,1.83,0,0,1,6.25,3.76Zm5,7.9L8.15,14.83,7.3,14,9,12.27H4.41V11H8.94L7.3,9.38,7.73,9l.43-.43Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    split_cell: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 15.74\"><g><path d=\"M10.37,12.25H6.74L8.4,13.94l-.87.86L4.41,11.63,7.53,8.5l.87.86L6.74,11h3.62v1.23Zm9.78-.61L17,14.81,16.13,14l1.66-1.69H14.16V11h3.63L16.13,9.37l.43-.43A5.24,5.24,0,0,1,17,8.51ZM18.9,8.22V5.61a.57.57,0,0,0-.18-.43A.65.65,0,0,0,18.29,5H12.88V18.28h5.41a.7.7,0,0,0,.44-.18.57.57,0,0,0,.18-.43V15h1.23v2.64a1.84,1.84,0,0,1-1.85,1.83h-12A1.84,1.84,0,0,1,4.94,19a1.81,1.81,0,0,1-.54-1.29V15H5.63v2.64a.57.57,0,0,0,.18.43.67.67,0,0,0,.44.18h5.41V5H6.25a.7.7,0,0,0-.44.18.56.56,0,0,0-.17.43V8.22H4.41V5.61A1.8,1.8,0,0,1,5,4.31a1.91,1.91,0,0,1,1.31-.55h12a1.89,1.89,0,0,1,1.31.55,1.8,1.8,0,0,1,.54,1.3V8.23H18.9Z\" transform=\"translate(-4.4 -3.76)\"/></g></svg>',\n    caption: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 13.79\"><g><path d=\"M4.41,18.52H20.15v-2H4.41ZM20,4.73H18.07V6h.65v.65H20V4.73ZM17,6V4.73H14.55V6H17ZM13.49,6V4.73H11V6h2.47ZM10,6V4.73H7.5V6H10ZM5.79,6h.65V4.73H4.5V6.67H5.8V6ZM4.5,11.34H5.79V8.48H4.5ZM6.44,13.8H5.79v-.65H4.5v1.94H6.44ZM17,15.09V13.8H14.55v1.29H17Zm-3.52,0V13.8H11v1.29h2.47Zm-3.53,0V13.8H7.5v1.29H10ZM20,13.16H18.72v.65h-.65V15.1H20Zm-1.29-1.82H20V8.48h-1.3v2.86Z\" transform=\"translate(-4.41 -4.73)\"/></g></svg>',\n    edit: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.73\"><g><path d=\"M7.51,5.68h6l1.52-1.57H6.94a2.4,2.4,0,0,0-1.79.82A2.8,2.8,0,0,0,4.41,6.8V17a2.55,2.55,0,0,0,.75,1.8A2.48,2.48,0,0,0,7,19.5H17.22a2.57,2.57,0,0,0,1.83-.74,2.52,2.52,0,0,0,.77-1.8V8.83l-1.58,1.54v6a1.54,1.54,0,0,1-1.53,1.53H7.51A1.54,1.54,0,0,1,6,16.41V7.21A1.52,1.52,0,0,1,7.51,5.68Zm5.63,7.47h0L10.7,10.74l-1,3.38,1.71-.48,1.7-.49Zm.34-.34h0l5.36-5.32L16.4,5.08,11,10.4l1.23,1.21,1.21,1.2ZM19.93,6.4a.82.82,0,0,0,.22-.48A.54.54,0,0,0,20,5.47L18.45,4A.67.67,0,0,0,18,3.77a.7.7,0,0,0-.48.21l-.74.72,2.44,2.43.37-.37.35-.36Z\" transform=\"translate(-4.41 -3.77)\"/></g></svg>',\n    delete: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 15.74\"><g><path d=\"M19.16,6.71a.94.94,0,0,0,.69-.28.91.91,0,0,0,.29-.68A1,1,0,0,0,19.85,5a.93.93,0,0,0-.69-.3H14.24A.94.94,0,0,0,14,4.06a.92.92,0,0,0-.7-.3h-2a1,1,0,0,0-.7.3.93.93,0,0,0-.28.68H5.39A.92.92,0,0,0,4.7,5a1,1,0,0,0-.29.71.91.91,0,0,0,.29.68,1,1,0,0,0,.69.28H19.16Zm-12.79,1a1,1,0,0,0-.7.3.94.94,0,0,0-.28.69v8.85A1.88,1.88,0,0,0,6,18.93a1.9,1.9,0,0,0,1.39.57H17.2a1.87,1.87,0,0,0,1.39-.58,1.91,1.91,0,0,0,.58-1.39V8.68A1,1,0,0,0,18.88,8a.89.89,0,0,0-.7-.29,1,1,0,0,0-.69.29.92.92,0,0,0-.29.68v7.87a1,1,0,0,1-1,1H8.34a.94.94,0,0,1-.69-.28,1,1,0,0,1-.29-.71V8.68a1,1,0,0,0-1-1Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    modify: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.7 15.74\"><g><path d=\"M19.79,15.23a.66.66,0,0,1,.3.38.59.59,0,0,1-.07.48l-.8,1.38a.66.66,0,0,1-.38.3.59.59,0,0,1-.48-.07l-.68-.38a4.55,4.55,0,0,1-1.34.77v.78a.64.64,0,0,1-.18.45.61.61,0,0,1-.45.18h-1.6a.6.6,0,0,1-.44-.18.66.66,0,0,1-.19-.45v-.78a4.36,4.36,0,0,1-1.32-.77l-.69.38a.58.58,0,0,1-.48.07.66.66,0,0,1-.38-.3l-.38-.66h.83a1.77,1.77,0,0,0,1.23-.52,1.72,1.72,0,0,0,.51-1.23v-.18a3,3,0,0,0,.49-.28l.15.09a1.83,1.83,0,0,0,.88.23A1.75,1.75,0,0,0,15.84,14l.88-1.52a1.7,1.7,0,0,0,.17-1.32,1.66,1.66,0,0,0-.3-.61,1.84,1.84,0,0,0-.51-.45l-.15-.09,0-.29,0-.28.15-.09a1,1,0,0,0,.26-.18l0,.06v.78a4.34,4.34,0,0,1,1.34.77l.68-.38a.68.68,0,0,1,.48-.06.64.64,0,0,1,.38.29l.8,1.38a.58.58,0,0,1,.07.48.63.63,0,0,1-.3.38l-.68.4a3.84,3.84,0,0,1,.08.76,4.13,4.13,0,0,1-.08.78l.34.18.32.2ZM10.17,7.86a1.9,1.9,0,0,1,1.35,3.23,1.85,1.85,0,0,1-1.35.55A1.9,1.9,0,0,1,8.83,8.41a1.92,1.92,0,0,1,1.34-.55Zm1.58,7.2a.73.73,0,0,1-.21.49.66.66,0,0,1-.48.2H9.29a.68.68,0,0,1-.69-.69V14.2a4.75,4.75,0,0,1-1.48-.86l-.75.45a.73.73,0,0,1-.7,0,.63.63,0,0,1-.25-.26L4.54,12a.67.67,0,0,1-.08-.53.71.71,0,0,1,.32-.42l.75-.43a4.8,4.8,0,0,1-.08-.85,4.71,4.71,0,0,1,.08-.85l-.74-.44a.71.71,0,0,1-.32-.42.65.65,0,0,1,.07-.54L5.42,6a.66.66,0,0,1,.42-.32l.18,0a.73.73,0,0,1,.35.09l.75.43A4.68,4.68,0,0,1,8.6,5.33V4.45a.68.68,0,0,1,.69-.69h1.77a.64.64,0,0,1,.48.2.73.73,0,0,1,.21.49v.88a4.75,4.75,0,0,1,1.48.85L14,5.75a.67.67,0,0,1,.34-.09l.18,0a.71.71,0,0,1,.42.32l.89,1.54a.67.67,0,0,1,.06.52.73.73,0,0,1-.32.43l-.75.42a4.8,4.8,0,0,1,.08.85,4.71,4.71,0,0,1-.08.85l.75.43a.66.66,0,0,1,.32.42.73.73,0,0,1-.06.54l-.89,1.52a.69.69,0,0,1-.25.26.7.7,0,0,1-.35.09.64.64,0,0,1-.34-.09l-.75-.45a4.87,4.87,0,0,1-1.48.86v.87ZM7.23,9.75a3,3,0,0,0,.86,2.08,2.94,2.94,0,1,0,4.16-4.16,3,3,0,0,0-2.08-.85A2.94,2.94,0,0,0,7.23,9.75Z\" transform=\"translate(-4.44 -3.76)\"/></g></svg>',\n    revert: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 14.69\"><g><path d=\"M18.26,15V12.3l1.89-2V15a2.58,2.58,0,0,1-.24,1c-.2.58-.75.92-1.65,1H7.56v2L4.41,15.63,7.56,13v2h10.7ZM6.3,8.28V11L4.41,13V8.28a2.58,2.58,0,0,1,.24-1c.2-.58.75-.92,1.65-1H17v-2l3.15,3.34L17,10.3v-2H6.3Z\" transform=\"translate(-4.4 -4.28)\"/></g></svg>',\n    auto_size: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 15.74\"><g><path d=\"M6.71,17.19,6.89,16l1.21-.15A6,6,0,0,1,6.81,13.9a5.78,5.78,0,0,1-.45-2.27A6,6,0,0,1,8.1,7.45a5.83,5.83,0,0,1,4.17-1.73l1-1-1-1A7.89,7.89,0,0,0,5,14.64a7.73,7.73,0,0,0,1.71,2.55Zm5.57,2.31h0A7.86,7.86,0,0,0,17.85,6.07L17.67,7.3l-1.21.15a5.9,5.9,0,0,1,1.29,1.92,5.81,5.81,0,0,1,.45,2.26,5.91,5.91,0,0,1-5.9,5.9l-1,1,.49.49.47.5Z\" transform=\"translate(-4.41 -3.76)\"/></g></svg>',\n    insert_row_below: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M15.7,1.3c-0.1-0.1-0.1-0.2-0.2-0.2L15.3,1H0.4L0.3,1.1c0,0-0.1,0.1-0.1,0.1c0,0-0.1,0.1-0.1,0.1L0,1.4v7.7l0.1,0.1c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h2.3V9.3l0.1-0.5L3,8.5l0.1-0.2c-0.1,0-0.2,0-0.3,0H1.2v-6h13.3v6h-1.6c-0.1,0-0.2,0-0.3,0l0.1,0.2l0.2,0.4C12.9,9,13,9.2,13,9.3v0.1h2.3l0.2-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1V1.4L15.7,1.3z\"/><path d=\"M10.5,7.5C9.9,7.1,9.3,6.8,8.6,6.7c-0.2,0-0.5-0.1-0.7,0c-0.2,0-0.5,0-0.7,0C6.6,6.7,6.1,6.9,5.6,7.3C5.2,7.6,4.7,8,4.4,8.4C4.3,8.6,4.2,8.8,4.2,8.9C4.1,9.1,4,9.3,3.9,9.4C3.9,9.6,3.8,9.7,3.8,9.9c0,0.2-0.1,0.3-0.1,0.5v-0.1c-0.1,0.8,0.1,1.6,0.5,2.4c0.4,0.7,1,1.3,1.7,1.7c0.3,0.2,0.6,0.3,0.9,0.3c0.3,0.1,0.7,0.1,1,0.1c0.3,0,0.7,0,1-0.1c0.3-0.1,0.6-0.2,0.9-0.3c0.5-0.3,0.9-0.6,1.3-1c0.3-0.4,0.6-0.8,0.8-1.3c0.1-0.4,0.2-0.9,0.2-1.4c0-0.5-0.1-1-0.3-1.4C11.5,8.6,11.1,8,10.5,7.5z M10.1,11.3H8.5v1.6H8H7.9H7.3v0v-0.1v-1.4H5.7v-0.4v-0.2v-0.6h0h1.5V8.5h1.2v1.6h1.6V11.3z\"/></g></svg>',\n    insert_row_above: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M0.1,14.5c0.1,0.1,0.1,0.2,0.2,0.2l0.1,0.1h14.9l0.1-0.1c0,0,0.1-0.1,0.1-0.1c0,0,0.1-0.1,0.1-0.1l0.1-0.1V6.7l-0.1-0.1c0-0.1-0.1-0.1-0.2-0.2l-0.1-0.1h-2.3v0.1l-0.1,0.5l-0.2,0.4l-0.1,0.2c0.1,0,0.2,0,0.3,0h1.6v6H1.3v-6h1.6c0.1,0,0.2,0,0.3,0L3.1,7.3L2.9,6.9C2.8,6.8,2.8,6.6,2.7,6.5V6.3H0.4L0.3,6.4c-0.1,0-0.1,0.1-0.2,0.2L0,6.7v7.7L0.1,14.5z\"/><path d=\"M5.3,8.3c0.6,0.5,1.2,0.8,1.9,0.9c0.2,0,0.5,0.1,0.7,0c0.2,0,0.5,0,0.7,0c0.6-0.1,1.1-0.3,1.6-0.6c0.5-0.3,0.9-0.7,1.2-1.2c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.2,0.2-0.4,0.2-0.5c0.1-0.1,0.1-0.3,0.1-0.4C12,5.8,12,5.6,12,5.4v0.1c0.1-0.8-0.1-1.6-0.5-2.4c-0.4-0.7-1-1.3-1.7-1.7C9.5,1.3,9.2,1.2,8.9,1.1C8.5,1,8.2,1,7.9,1c-0.3,0-0.7,0-1,0.1C6.6,1.2,6.3,1.3,6,1.4C5.5,1.7,5.1,2,4.7,2.4C4.4,2.8,4.1,3.3,3.9,3.8C3.8,4.2,3.7,4.7,3.7,5.2c0,0.5,0.1,1,0.3,1.4C4.3,7.2,4.7,7.8,5.3,8.3z M5.7,4.5h1.6V2.9h0.5h0.1h0.6v0v0.1v1.4H10v0.4v0.2v0.6h0H8.5v1.6H7.3V5.7H5.7V4.5z\"/></g></svg>',\n    insert_column_left: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M14.5,15.7c0.1-0.1,0.2-0.1,0.2-0.2l0.1-0.1V0.4l-0.1-0.1c0,0-0.1-0.1-0.1-0.1c0,0-0.1-0.1-0.1-0.1L14.4,0H6.7L6.6,0.1c-0.1,0-0.1,0.1-0.2,0.2L6.3,0.4v2.3h0.1l0.5,0.1L7.3,3l0.2,0.1c0-0.1,0-0.2,0-0.3V1.2h6v13.3h-6v-1.6c0-0.1,0-0.2,0-0.3l-0.2,0.1l-0.4,0.2C6.7,12.9,6.6,13,6.4,13H6.3v2.3l0.1,0.2c0,0.1,0.1,0.1,0.2,0.2l0.1,0.1h7.7L14.5,15.7z\"/><path d=\"M8.3,10.5C8.7,10,9,9.3,9.1,8.6c0-0.2,0.1-0.5,0-0.7c0-0.2,0-0.5,0-0.7C9,6.7,8.8,6.1,8.5,5.7C8.2,5.2,7.8,4.8,7.3,4.5C7.2,4.4,7,4.3,6.9,4.2C6.7,4.1,6.5,4,6.4,4C6.2,3.9,6.1,3.9,5.9,3.8c-0.2,0-0.3-0.1-0.5-0.1h0.1C4.7,3.7,3.8,3.9,3.1,4.3C2.4,4.7,1.8,5.3,1.4,6C1.3,6.3,1.2,6.6,1.1,6.9C1,7.2,1,7.6,1,7.9c0,0.3,0,0.7,0.1,1c0.1,0.3,0.2,0.6,0.3,0.9c0.3,0.5,0.6,0.9,1,1.3c0.4,0.3,0.8,0.6,1.3,0.8C4.2,12,4.7,12.1,5.1,12c0.5,0,1-0.1,1.4-0.3C7.2,11.5,7.8,11.1,8.3,10.5zM4.5,10.1V8.5H2.9V8V7.9V7.3h0H3h1.4V5.7h0.4h0.2h0.6v0v1.5h1.6v1.2H5.7v1.6H4.5z\"/></g></svg>',\n    insert_column_right: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M1.3,0.1C1.2,0.2,1.1,0.2,1.1,0.3L1,0.4v14.9l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0,0,0.1,0.1,0.1,0.1l0.1,0.1h7.7l0.1-0.1c0.1,0,0.1-0.1,0.2-0.2l0.1-0.1v-2.3H9.3l-0.5-0.1l-0.4-0.2l-0.2-0.1c0,0.1,0,0.2,0,0.3v1.6h-6V1.3h6v1.6c0,0.1,0,0.2,0,0.3l0.2-0.1l0.4-0.2C9,2.9,9.2,2.8,9.3,2.8h0.1V0.5L9.4,0.3c0-0.1-0.1-0.1-0.2-0.2L9.1,0H1.4L1.3,0.1z\"/><path d=\"M7.5,5.3C7,5.8,6.7,6.5,6.6,7.2c0,0.2-0.1,0.5,0,0.7c0,0.2,0,0.5,0,0.7c0.1,0.6,0.3,1.1,0.6,1.6c0.3,0.5,0.7,0.9,1.2,1.2c0.2,0.1,0.3,0.2,0.5,0.3c0.2,0.1,0.4,0.2,0.5,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0.1,0.5,0.1h-0.1c0.8,0.1,1.6-0.1,2.4-0.5c0.7-0.4,1.3-1,1.7-1.7c0.2-0.3,0.3-0.6,0.3-0.9c0.1-0.3,0.1-0.7,0.1-1c0-0.3,0-0.7-0.1-1c-0.1-0.3-0.2-0.6-0.3-0.9c-0.3-0.5-0.6-0.9-1-1.3C13,4.4,12.5,4.2,12,4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1,0.1-1.4,0.2C8.5,4.3,7.9,4.7,7.5,5.3z M11.3,5.7v1.6h1.6v0.5v0.1v0.6h0h-0.1h-1.4v1.6h-0.4h-0.2h-0.6v0V8.5H8.5V7.3h1.6V5.7H11.3z\"/></g></svg>',\n    delete_row: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 13.83\"><g><path d=\"M4.7,18.46l.12.08H19.73l.12-.08a.58.58,0,0,0,.22-.22l.08-.12,0-7.69-.08-.11a.77.77,0,0,0-.18-.18l-.11-.08-2.31,0-.08.28-.1.29a1.58,1.58,0,0,1-.12.29l-.14.34s0,0,.18,0H18.9v6H5.64v-6H7.35c.14,0,.2,0,.18,0l-.14-.34a2.85,2.85,0,0,1-.12-.29l-.1-.29-.07-.27-2.31,0-.11.08a.77.77,0,0,0-.18.18l-.08.11,0,7.69.08.12a.47.47,0,0,0,.09.12l.13.09ZM12.11,13a4,4,0,0,0,1.46-.21,4.51,4.51,0,0,0,1.31-.71A4,4,0,0,0,16.26,10a4.32,4.32,0,0,0-.08-2.54,4.34,4.34,0,0,0-1-1.52,4.15,4.15,0,0,0-1.54-1,4.34,4.34,0,0,0-1.35-.22A4.07,4.07,0,0,0,11,4.93,3.94,3.94,0,0,0,9.24,6.07,3.92,3.92,0,0,0,8.15,8.88a3.91,3.91,0,0,0,.12.95A4.16,4.16,0,0,0,12.11,13Zm2.35-4.14v.58H10.09V8.27h4.37v.58Z\" transform=\"translate(-4.4 -4.71)\"/></g></svg>',\n    delete_column: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 13.81 15.74\"><g><path d=\"M5.66,19.42l.12.08,7.69,0,.11-.08a.77.77,0,0,0,.18-.18l.08-.11,0-2.32-.15,0-.45-.15-.42-.18-.17-.07a1,1,0,0,0,0,.27v1.63h-6V5h6V6.62a.9.9,0,0,0,0,.26l.17-.07.42-.17a3.91,3.91,0,0,1,.45-.15l.15,0,0-2.32L13.75,4a.77.77,0,0,0-.18-.18l-.11-.08H5.79l-.13.07a.63.63,0,0,0-.21.22l-.08.12V19.08l.08.12a.47.47,0,0,0,.09.12.35.35,0,0,0,.12.1Zm9-3.67a4.16,4.16,0,0,0,2.36-.51,4.08,4.08,0,0,0,1.67-1.72,4,4,0,0,0,.35-.91,3.79,3.79,0,0,0,.1-1,4.71,4.71,0,0,0-.11-1,5,5,0,0,0-.3-.87,4.25,4.25,0,0,0-1-1.25,4.49,4.49,0,0,0-1.34-.81A4.26,4.26,0,0,0,15,7.48a3.88,3.88,0,0,0-1.41.25A4.32,4.32,0,0,0,11.86,9,4,4,0,0,0,11,10.94a4.4,4.4,0,0,0-.05.68,4.5,4.5,0,0,0,.05.68,3.93,3.93,0,0,0,.61,1.57,4.22,4.22,0,0,0,1.18,1.2,4.59,4.59,0,0,0,.48.27c.2.1.37.17.5.22a2.44,2.44,0,0,0,.45.12,4.61,4.61,0,0,0,.5.07Zm2.54-4.12v.58H12.87V11h4.37v.59Z\" transform=\"translate(-5.37 -3.76)\"/></g></svg>',\n    fixed_column_width: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6,5H18A1,1 0 0,1 19,6A1,1 0 0,1 18,7H6A1,1 0 0,1 5,6A1,1 0 0,1 6,5M21,2V4H3V2H21M15,8H17V22H15V8M7,8H9V22H7V8M11,8H13V22H11V8Z\" /></svg>',\n    rotate_left: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M0.5,10.2c0,0.1,0,0.2,0,0.3v0.2l0,0c0.1,0.3,0.3,0.6,0.4,0.9l0,0C1,11.8,1.3,12,1.5,11.9h0.1h0.2h0.1c0.1-0.1,0.3-0.3,0.4-0.5v-0.2c0-0.1,0-0.2-0.1-0.3l0,0c-0.2-0.2-0.3-0.4-0.3-0.7l0,0C1.8,10,1.7,9.9,1.5,9.8c-0.1,0-0.2,0-0.3,0H0.9C0.7,9.9,0.6,10,0.5,10.2L0.5,10.2z\"/><path d=\"M2.2,11.5L2.2,11.5L2.2,11.5z\"/><path d=\"M5.9,3.6L5.9,3.6L5.9,3.6z\"/><path d=\"M0.1,7.9c0,0.3,0,0.6,0,0.9l0,0l0,0l0,0l0,0c0,0.2,0.1,0.3,0.2,0.4l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0l0,0c0.2,0,0.4-0.1,0.5-0.3l0,0c0-0.1,0.1-0.3,0.1-0.4V8.6l0,0c0-0.2,0-0.5,0-0.7l0,0c0-0.2-0.1-0.4-0.2-0.5C1.1,7.3,0.9,7.2,0.7,7.2S0.3,7.3,0.2,7.4C0.1,7.5,0,7.7,0.1,7.9z\"/><path d=\"M1.9,12.7L1.9,12.7c0,0.2,0,0.4,0.2,0.5l0,0l0.2,0.3l0,0c0.2,0.1,0.3,0.2,0.5,0.4l0,0l0,0l0,0l0,0C2.9,14,3,14.1,3.2,14.1s0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5v-0.1c0-0.2-0.1-0.4-0.2-0.5l0,0l-0.4-0.4l-0.2-0.2l0,0C3,12.1,2.8,12,2.6,12l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0C2,12.3,1.9,12.5,1.9,12.7z\"/><path d=\"M6.6,15c0,0.2,0.1,0.4,0.2,0.5c0.1,0.1,0.2,0.2,0.4,0.3l0,0c0.3,0,0.5,0,0.7,0h0.3l0,0c0.2,0,0.4-0.1,0.5-0.2c0.1-0.2,0.2-0.3,0.2-0.5l0,0l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0H7.9c-0.1,0-0.3,0-0.5,0l0,0H7.3c-0.2-0.1-0.3,0-0.5,0.1l0,0C6.7,14.6,6.6,14.8,6.6,15L6.6,15L6.6,15L6.6,15z\"/><path d=\"M4.2,7.4C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.1,0.1,0.3,0.2,0.5,0.2s0.3-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0C11.5,7.3,11,6.7,10,5.8l0,0L8.4,4.2l0,0C8.3,4.1,8.1,4,7.9,4S7.5,4.1,7.4,4.2L4.2,7.4L4.2,7.4z M6.8,9L5.7,7.9l2.2-2.2l2.3,2.2l-2.3,2.2C7.7,9.9,7.3,9.5,6.8,9L6.8,9z\"/><path d=\"M4.1,14.1C4,14.2,4,14.3,4,14.4v0.2l0,0c0.1,0.1,0.2,0.3,0.4,0.4l0,0c0.3,0.1,0.6,0.2,0.9,0.4h0.1h0.1l0,0c0.2,0,0.3-0.1,0.5-0.1l0,0c0.2-0.1,0.3-0.3,0.3-0.4l0,0l0,0l0,0l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3l0,0C6.1,14.2,6,14.1,5.8,14l0,0c-0.3-0.1-0.5-0.2-0.8-0.2l0,0c-0.1-0.1-0.2-0.1-0.3-0.1H4.5C4.3,13.7,4.2,13.9,4.1,14.1z\"/><path d=\"M9.3,14.4c0,0.1-0.1,0.3,0,0.4V15l0,0c0,0.1,0.1,0.3,0.5,0.4c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1l0,0c0.3-0.1,0.6-0.2,0.9-0.3l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0.1-0.3c0-0.1-0.1-0.2-0.1-0.3l0,0c-0.1-0.2-0.2-0.3-0.4-0.4l0,0h-0.3c-0.1,0-0.2,0-0.3,0l0,0c-0.2,0.1-0.5,0.2-0.8,0.3l0,0C9.5,14.1,9.4,14.2,9.3,14.4L9.3,14.4z\"/><path d=\"M11.4,14.7L11.4,14.7L11.4,14.7z\"/><path d=\"M9.5,15.3L9.5,15.3L9.5,15.3z\"/><path d=\"M15.9,7.9c0-1-0.2-2-0.6-3l0,0c-0.4-1-1-1.9-1.7-2.6C12.8,1.6,12,1,11,0.6l0,0C10.1,0.2,9,0,8,0C7.3,0,6.5,0.1,5.8,0.3l0,0C5.2,0.5,4.6,0.8,4,1.1L3.1,0.2l0,0C2.9,0.1,2.8,0,2.6,0H2.4l0,0C2.2,0,2,0.2,1.9,0.4l0,0L0.1,4.9l0,0C0,5,0,5.1,0,5.2c0,0.2,0.1,0.4,0.2,0.5l0,0c0.2,0.1,0.3,0.2,0.5,0.2h0.1H1l0,0l4.7-1.8l0,0C5.9,4,6.1,3.8,6.1,3.6V3.4C6.1,3.2,6,3,5.9,2.9l0,0L5.1,2.1c0.4-0.2,0.8-0.4,1.3-0.5c0.5-0.1,1.1-0.2,1.7-0.2c0.9,0,1.7,0.2,2.5,0.5l0,0c0.8,0.3,1.5,0.8,2.1,1.4c0.6,0.6,1.1,1.3,1.4,2.1l0,0c0.3,0.8,0.5,1.6,0.5,2.5s-0.2,1.7-0.5,2.5l0,0c-0.3,0.8-0.8,1.5-1.4,2.1c-0.2,0.2-0.4,0.3-0.6,0.5l0,0c-0.2,0.1-0.3,0.3-0.3,0.5v0.1c0,0.1,0,0.3,0.1,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0c0.1,0,0.3-0.1,0.4-0.2l0,0l0,0l0,0l0,0c0.2-0.2,0.5-0.4,0.7-0.6l0,0l0,0l0,0l0,0c0.7-0.8,1.3-1.6,1.7-2.6C15.6,10,15.8,9,15.9,7.9z M1.9,4C2,3.8,2.1,3.5,2.3,3.1l0,0L2.7,2l1.2,1.2L1.9,4z\"/><path d=\"M6.8,15.5L6.8,15.5L6.8,15.5z\"/></g></svg>',\n    rotate_right: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.8 15.8\"><g><path d=\"M9.9,15.3L9.9,15.3L9.9,15.3z\"/><path d=\"M6.9,15.1L6.9,15.1c0,0.1,0.1,0.3,0.2,0.4l0,0c0.1,0.2,0.3,0.3,0.5,0.3l0,0h0.3c0.2,0,0.4,0,0.7,0l0,0c0.2-0.1,0.3-0.2,0.4-0.3c0.1-0.1,0.2-0.2,0.2-0.4V15c0-0.2-0.1-0.4-0.2-0.4c-0.2-0.1-0.3-0.2-0.5-0.2H8.4l0,0c-0.1,0-0.3,0-0.5,0H7.6l0,0c-0.2,0-0.4,0.1-0.5,0.2C7,14.7,6.9,14.9,6.9,15.1z\"/><path d=\"M6.5,14.4L6.5,14.4L6.5,14.4z\"/><path d=\"M5.8,5.8L5.8,5.8c-1,0.9-1.5,1.5-1.7,1.6l0,0C4,7.5,4,7.7,4,7.9c0,0.2,0,0.4,0.2,0.5l0,0l3.2,3.2l0,0c0.2,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l3.2-3.2l0,0c0.1-0.1,0.2-0.3,0.2-0.5c0-0.2-0.1-0.4-0.2-0.5l0,0L8.4,4.2C8.3,4.1,8.1,4,7.9,4C7.7,4,7.5,4.1,7.4,4.2l0,0L5.8,5.8z M5.6,7.9l2.3-2.2l2.2,2.2L9,9l0,0l0,0l0,0l0,0c-0.5,0.6-0.9,0.9-1.1,1.1L5.6,7.9z\"/><path d=\"M9,15.5L9,15.5L9,15.5z\"/><path d=\"M9.6,14.7v0.2l0,0l0,0l0,0l0,0c0.1,0.2,0.1,0.3,0.3,0.3c0.1,0.1,0.3,0.1,0.4,0.1l0,0h0.1h0.1c0.3-0.1,0.6-0.3,0.9-0.4l0,0c0.1-0.1,0.2-0.2,0.3-0.4l0,0v-0.2c0-0.1,0-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4H11c-0.1,0-0.2,0.1-0.3,0.1l0,0c-0.2,0.1-0.4,0.2-0.7,0.3l0,0l0,0c-0.1,0.1-0.3,0.2-0.4,0.4C9.6,14.5,9.6,14.6,9.6,14.7z\"/><path d=\"M9,14.5L9,14.5L9,14.5z\"/><path d=\"M9.6,14.4L9.6,14.4L9.6,14.4z\"/><path d=\"M11.7,14L11.7,14L11.7,14z\"/><path d=\"M15.6,7.4L15.6,7.4L15.6,7.4z\"/><path d=\"M15,9.4c0.2,0,0.4,0,0.6-0.2l0,0c0.1-0.1,0.2-0.2,0.2-0.4l0,0l0,0l0,0l0,0c0-0.3,0-0.6,0-0.9c0-0.2-0.1-0.4-0.2-0.5c-0.1-0.1-0.3-0.2-0.5-0.2s-0.4,0.1-0.5,0.2c-0.1,0.1-0.2,0.3-0.2,0.5l0,0c0,0.2,0,0.4,0,0.7l0,0v0.1c0,0.1,0,0.3,0.1,0.4l0,0C14.6,9.3,14.8,9.4,15,9.4L15,9.4L15,9.4z\"/><path d=\"M14,12h0.1h0.2h0.1c0.2,0,0.5-0.2,0.6-0.4l0,0c0.2-0.3,0.3-0.6,0.4-0.9l0,0v-0.2c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.2-0.2-0.3-0.4-0.4h-0.3c-0.1,0-0.2,0-0.3,0C14.2,9.9,14,10,14,10.3l0,0c-0.1,0.2-0.2,0.5-0.3,0.7l0,0c-0.1,0.1-0.1,0.2-0.1,0.3v0.2l0,0l0,0C13.6,11.6,13.8,11.8,14,12z\"/><path d=\"M14.6,7.4L14.6,7.4L14.6,7.4z\"/><path d=\"M4.4,14.2c-0.1,0.1-0.1,0.2-0.1,0.3l0.1,0.2c0,0.2,0.2,0.3,0.3,0.4l0,0c0.3,0.1,0.6,0.3,1.1,0.4l0,0h0.1l0,0c0.1,0,0.2-0.1,0.4-0.2c0.1,0,0.2-0.2,0.3-0.3l0,0v-0.2c0-0.1-0.1-0.3-0.2-0.4c-0.1-0.1-0.2-0.2-0.4-0.3l0,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-0.1,0-0.2,0-0.3,0H4.7l0,0C4.6,13.9,4.4,14,4.4,14.2L4.4,14.2z\"/><path d=\"M11.9,13.3c0,0.2,0.1,0.4,0.2,0.6c0.1,0.1,0.3,0.2,0.5,0.2s0.4-0.1,0.5-0.2l0,0l0,0l0,0l0,0c0.1-0.1,0.3-0.3,0.4-0.4l0,0l0.2-0.3l0,0c0.1-0.2,0.2-0.3,0.2-0.5l0,0c0-0.2-0.1-0.4-0.2-0.5l0,0c-0.1-0.1-0.3-0.2-0.5-0.2l0,0c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.2,0.2l-0.4,0.4l0,0C12,13,11.9,13.1,11.9,13.3L11.9,13.3z\"/><path d=\"M12.1,13.8L12.1,13.8L12.1,13.8z\"/><path d=\"M11.9,13.3L11.9,13.3L11.9,13.3z\"/><path d=\"M15.9,5.2c0-0.1-0.1-0.2-0.1-0.3l0,0L14,0.4l0,0C13.9,0.2,13.7,0,13.5,0l0,0l0,0h-0.2c-0.2,0-0.4,0.1-0.5,0.2l0,0l-0.9,0.9c-0.5-0.3-1.1-0.6-1.8-0.8l0,0C9.4,0.1,8.7,0,7.9,0c-1,0-2,0.2-3,0.6S3,1.6,2.3,2.3C1.6,3.1,1,3.9,0.6,4.9l0,0C0.2,5.8,0,6.8,0,7.9c0,1,0.2,2,0.6,3s0.9,1.8,1.7,2.6l0,0l0,0l0,0l0,0c0.2,0.2,0.5,0.4,0.7,0.6l0,0l0,0l0,0l0,0c0.2,0.1,0.3,0.2,0.5,0.2l0,0c0.2,0,0.4-0.1,0.6-0.3l0,0c0.1-0.1,0.1-0.3,0.1-0.4v-0.1l0,0C4.1,13.3,4,13.1,3.9,13l0,0c-0.2-0.1-0.4-0.3-0.6-0.5c-0.6-0.6-1.1-1.3-1.4-2.1l0,0C1.6,9.6,1.4,8.8,1.4,7.9s0.2-1.7,0.5-2.5l0,0c0.3-0.8,0.8-1.5,1.4-2.1c0.6-0.6,1.3-1.1,2.1-1.4l0,0C6.2,1.6,7,1.4,7.9,1.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.5l-0.8,0.8l0,0C10,3.1,9.9,3.2,9.9,3.4v0.2l0,0l0,0c0,0.2,0.2,0.4,0.4,0.5l0,0l4.5,1.8l0,0H15h0.1c0.2,0,0.4-0.1,0.5-0.2l0,0C15.7,5.6,15.8,5.4,15.9,5.2z M11.8,3.2L13,2l0.4,1.1l0,0c0.2,0.4,0.3,0.7,0.4,0.9L11.8,3.2z\"/></g></svg>',\n    mirror_horizontal: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14.75 15.74\"><g><path d=\"M13.75,3.76l5.9,15.74h-5.9V3.76ZM4.9,19.5,10.8,3.76V19.5H4.9Z\" transform=\"translate(-4.9 -3.76)\"/></g></svg>',\n    mirror_vertical: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.74 14.75\"><g><path d=\"M20.15,13.1,4.41,19V13.1H20.15ZM4.41,4.25l15.74,5.9H4.41V4.25Z\" transform=\"translate(-4.41 -4.25)\"/></g></svg>',\n    checked: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.75 12.1\"><g><path d=\"M4.59,12.23l.12.18L9.43,17.5a.58.58,0,0,0,.84,0L20,7.45h0a.58.58,0,0,0,0-.84l-.85-.85a.58.58,0,0,0-.84,0H18.2l-8.12,8.41a.29.29,0,0,1-.42,0l-3.4-3.63a.58.58,0,0,0-.84,0l-.85.85a.6.6,0,0,0-.14.21.51.51,0,0,0,0,.44c.05.06.1.13.16.19Z\" transform=\"translate(-4.38 -5.58)\"/></g></svg>',\n    line_break: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19,6a1,1,0,0,0-1,1v4a1,1,0,0,1-1,1H7.41l1.3-1.29A1,1,0,0,0,7.29,9.29l-3,3a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l3,3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L7.41,14H17a3,3,0,0,0,3-3V7A1,1,0,0,0,19,6Z\"/></svg>',\n    audio: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z\" /></svg>',\n    image_gallery: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"30 30 150 150\"><g><path d=\"M152.775,120.548V51.651c0-12.271-9.984-22.254-22.254-22.254H43.727c-12.271,0-22.254,9.983-22.254,22.254v68.896c0,12.27,9.983,22.254,22.254,22.254h86.795C142.791,142.802,152.775,132.817,152.775,120.548z M36.394,51.651c0-4.042,3.291-7.333,7.333-7.333h86.795c4.042,0,7.332,3.291,7.332,7.333v23.917l-14.938-17.767c-1.41-1.678-3.487-2.649-5.68-2.658h-0.029c-2.184,0-4.255,0.954-5.674,2.613L76.709,98.519l-9.096-9.398c-1.427-1.474-3.392-2.291-5.448-2.273c-2.052,0.025-4.004,0.893-5.396,2.4L36.394,111.32V51.651z M41.684,127.585l20.697-22.416l9.312,9.622c1.461,1.511,3.489,2.334,5.592,2.27c2.101-0.066,4.075-1.013,5.44-2.612l34.436-40.308l20.693,24.613v21.794c0,4.042-3.29,7.332-7.332,7.332H43.727C43.018,127.88,42.334,127.775,41.684,127.585z M182.616,152.5V75.657c0-4.12-3.34-7.46-7.461-7.46c-4.119,0-7.46,3.34-7.46,7.46V152.5c0,4.112-3.347,7.46-7.461,7.46h-94c-4.119,0-7.46,3.339-7.46,7.459c0,4.123,3.341,7.462,7.46,7.462h94C172.576,174.881,182.616,164.841,182.616,152.5z\"/></g></svg>',\n    bookmark: '<svg viewBox=\"0 0 24 24\"><path d=\"M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z\" /></svg>',\n    download: '<svg viewBox=\"0 0 24 24\"><path d=\"M2 12H4V17H20V12H22V17C22 18.11 21.11 19 20 19H4C2.9 19 2 18.11 2 17V12M12 15L17.55 9.54L16.13 8.13L13 11.25V2H11V11.25L7.88 8.13L6.46 9.55L12 15Z\" /></svg>',\n    dir_ltr: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M9 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2H9C6.79 2 5 3.79 5 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zm0 12v3H5v2h12v3l4-4-4-4z\"/></svg>',\n    dir_rtl: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M10 4v4c-1.1 0-2-.9-2-2s.9-2 2-2m8-2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4v5h2V4h2v11h2V4h2V2zM8 14l-4 4 4 4v-3h12v-2H8v-3z\"/></svg>',\n    // Error\n    alert_outline: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11,15H13V17H11V15M11,7H13V13H11V7M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20Z\" /></svg>',\n    // More icons\n    more_text: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 180 180\"><g><path d=\"M49.711,142.188h49.027c2.328,0.002,4.394,1.492,5.129,3.699l9.742,29.252c0.363,1.092,1.385,1.828,2.537,1.83l15.883,0.01c0.859,0,1.667-0.412,2.17-1.109s0.641-1.594,0.37-2.41l-16.625-50.045L86.503,28.953c-0.36-1.097-1.383-1.839-2.537-1.842H64.532c-1.153-0.001-2.178,0.736-2.542,1.831L13.847,173.457c-0.271,0.816-0.135,1.713,0.369,2.412c0.503,0.697,1.311,1.109,2.171,1.109h15.872c1.151,0,2.173-0.736,2.537-1.828l9.793-29.287C45.325,143.66,47.39,142.18,49.711,142.188L49.711,142.188z M53.493,119.098l15.607-46.9c0.744-2.196,2.806-3.674,5.125-3.674s4.381,1.478,5.125,3.674l15.607,46.904c0.537,1.621,0.263,3.402-0.736,4.789c-1.018,1.408-2.649,2.24-4.386,2.24H58.615c-1.736,0-3.368-0.832-4.386-2.24C53.23,122.504,52.956,120.721,53.493,119.098L53.493,119.098z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z\"/></g></svg>',\n    more_paragraph: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 180 180\"><g><path d=\"M128.39,28.499H63.493c-25.558,0-46.354,20.796-46.354,46.354c0,25.559,20.796,46.353,46.354,46.353h9.271v55.625h18.542V47.04h9.271V176.83h18.543V47.04h9.271V28.499z M72.764,102.664h-9.271c-15.337,0-27.813-12.475-27.813-27.812c0-15.336,12.476-27.813,27.813-27.813h9.271V102.664z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.633,190.465,66.178,190.465,63.32L190.465,63.32z M190.465,101.994c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.887,1.026,5.352,3.056,7.395c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.994L190.465,101.994z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z\"/></g></svg>',\n    more_plus: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"35 30 140 140\"><g><path d=\"M137.215,102.045c0,3.498-2.835,6.332-6.333,6.332H24.549c-3.498,0-6.334-2.834-6.334-6.332l0,0c0-3.498,2.836-6.333,6.334-6.333h106.333C134.38,95.711,137.215,98.547,137.215,102.045L137.215,102.045z M77.715,161.545c-3.498,0-6.333-2.836-6.333-6.334V48.878c0-3.498,2.836-6.333,6.333-6.333l0,0c3.498,0,6.334,2.835,6.334,6.333v106.333C84.049,158.709,81.213,161.545,77.715,161.545L77.715,161.545z M190.465,63.32c0-2.919-1.015-5.396-3.059-7.428c-2.029-2.031-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.016-7.388,3.047c-2.029,2.032-3.056,4.498-3.056,7.386c0,2.889,1.026,5.354,3.056,7.385c2.032,2.032,4.499,3.059,7.388,3.059c2.887,0,5.354-1.026,7.383-3.059C189.45,68.632,190.465,66.177,190.465,63.32L190.465,63.32z M190.465,101.993c0-2.858-1.015-5.313-3.059-7.333c-2.029-2.042-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.005-7.388,3.047c-2.029,2.021-3.056,4.486-3.056,7.376c0,2.888,1.026,5.353,3.056,7.396c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,107.389,190.465,104.914,190.465,101.993L190.465,101.993z M190.465,140.76c0-2.918-1.015-5.395-3.059-7.438c-2.029-2.041-4.496-3.047-7.383-3.047c-2.889,0-5.355,1.006-7.388,3.047c-2.029,2.043-3.056,4.52-3.056,7.438c0,2.922,1.026,5.398,3.056,7.439c2.032,2.021,4.499,3.047,7.388,3.047c2.887,0,5.354-1.025,7.383-3.047C189.45,146.158,190.465,143.682,190.465,140.76L190.465,140.76z\"/></g></svg>',\n    more_horizontal: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.76 3.58\"><g><path d=\"M4.64,10.73a1.84,1.84,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0A1.79,1.79,0,0,1,8,11.63a1.84,1.84,0,0,1-.25.9,1.69,1.69,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2.08,2.08,0,0,1,4.64,10.73Zm6.09,0a1.84,1.84,0,0,1,.65-.65,1.78,1.78,0,0,1,2.67,1.55,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.76,1.76,0,0,1-1.79,0,1.79,1.79,0,0,1-.64-2.44Zm6.08,0a1.69,1.69,0,0,1,.65-.65,1.76,1.76,0,0,1,1.79,0,1.79,1.79,0,0,1,.9,1.54,1.73,1.73,0,0,1-.24.9,1.84,1.84,0,0,1-.65.65,1.8,1.8,0,0,1-2.69-1.55A2,2,0,0,1,16.81,10.73Z\" transform=\"translate(-4.39 -9.84)\"/></g></svg>',\n    more_vertical: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 3.94 15.75\"><g><path d=\"M12.28,7.69a1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,2,2,0,0,1,1.39-.58,1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58Zm0,2a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39A1.92,1.92,0,0,1,13.67,13a2,2,0,0,1-1.39.58A1.92,1.92,0,0,1,10.89,13a2,2,0,0,1-.58-1.39,2,2,0,0,1,2-2Zm0,5.9a1.92,1.92,0,0,1,1.39.58,2,2,0,0,1,.58,1.39,1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39,1.92,1.92,0,0,1,.58-1.39,1.94,1.94,0,0,1,1.39-.58Z\" transform=\"translate(-10.31 -3.75)\"/></g></svg>',\n    // Not currently used\n    attachment: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8.38 15.68\"><g><path d=\"M15.23,6h1v9.78a3.88,3.88,0,0,1-1.31,2.45,4,4,0,0,1-6.57-2.45V7A3,3,0,0,1,9.2,4.89a3,3,0,0,1,5,2.09v8.31a1.92,1.92,0,0,1-.58,1.39,2,2,0,0,1-1.39.58,1.92,1.92,0,0,1-1.39-.58,2,2,0,0,1-.58-1.39V8h1v7.32a1,1,0,0,0,.29.69,1,1,0,0,0,.69.28A.9.9,0,0,0,13,16a1,1,0,0,0,.29-.69V7a1.92,1.92,0,0,0-.58-1.39A2,2,0,0,0,11.27,5a1.92,1.92,0,0,0-1.39.58A2,2,0,0,0,9.33,7v8.31a3,3,0,1,0,5.9,0V6Z\" transform=\"translate(-8.08 -3.78)\"/></g></svg>',\n    map: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11.7 15.62\"><g><path d=\"M12.05,12.42a2.93,2.93,0,1,1,2.07-5A2.88,2.88,0,0,1,15,9.49a3,3,0,0,1-.86,2.07,2.89,2.89,0,0,1-2.07.86Zm0-5.36a2.43,2.43,0,0,0-1.72,4.16,2.48,2.48,0,0,0,1.72.72,2.44,2.44,0,0,0,0-4.88Zm0-3.3A5.84,5.84,0,0,1,17.9,9.62a9.94,9.94,0,0,1-1.73,5A33.59,33.59,0,0,1,12.84,19a1.52,1.52,0,0,1-.23.2,1,1,0,0,1-.55.2h0a1,1,0,0,1-.55-.2,1.52,1.52,0,0,1-.23-.2,33.59,33.59,0,0,1-3.33-4.32,9.93,9.93,0,0,1-1.72-5,5.84,5.84,0,0,1,5.85-5.86ZM12,18.34l.08.05.06-.06a35.58,35.58,0,0,0,3.06-3.93,9.35,9.35,0,0,0,1.74-4.77,4.88,4.88,0,0,0-4.88-4.88A4.79,4.79,0,0,0,8.6,6.17,4.84,4.84,0,0,0,7.17,9.62,9.29,9.29,0,0,0,8.91,14.4,36,36,0,0,0,12,18.34Z\" transform=\"translate(-6.2 -3.76)\"/></g></svg>',\n    magic_stick: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15.73 15.75\"><g><path d=\"M19.86,19.21a1,1,0,0,0,.28-.68,1,1,0,0,0-.28-.7L13,10.93a1,1,0,0,0-.7-.28,1,1,0,0,0-.68,1.65l6.9,6.9a1,1,0,0,0,.69.29.93.93,0,0,0,.69-.28ZM9.19,8.55a3,3,0,0,0,1.68,0,14.12,14.12,0,0,0,1.41-.32A11.26,11.26,0,0,0,10.8,7.06c-.56-.36-.86-.56-.91-.58S10,5.91,10,5.11s0-1.26-.15-1.37a4.35,4.35,0,0,0-1.19.71c-.53.4-.81.62-.87.68a9,9,0,0,0-2-.6,6.84,6.84,0,0,0-.76-.09s0,.27.08.77a8.6,8.6,0,0,0,.61,2q-.09.09-.69.87a3.59,3.59,0,0,0-.68,1.17c.12.17.57.23,1.36.15S7,9.26,7.15,9.23s.21.36.57.91a10.49,10.49,0,0,0,1.14,1.48c0-.1.14-.57.31-1.4a3,3,0,0,0,0-1.67Z\" transform=\"translate(-4.41 -3.74)\"/></g></svg>',\n    empty_file: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12.78 15.75\"><g><path d=\"M14.73,3.76,18.67,7.7v9.84a2,2,0,0,1-2,2H7.84a1.89,1.89,0,0,1-1.38-.58,2,2,0,0,1-.57-1.39V5.73a1.93,1.93,0,0,1,.57-1.38,2,2,0,0,1,1.38-.58h6.62l.26,0v0Zm2.95,4.92h-2a1.93,1.93,0,0,1-1.38-.57,2,2,0,0,1-.58-1.4V6.17c0-.36,0-.84,0-1.43H7.85a1,1,0,0,0-.7.29,1,1,0,0,0-.29.7V17.54a1,1,0,0,0,.29.69,1,1,0,0,0,.69.29h8.85a1,1,0,0,0,.71-.29.92.92,0,0,0,.28-.69Zm0-1L14.73,4.74v2A1,1,0,0,0,15,7.4a1,1,0,0,0,.69.29Z\" transform=\"translate(-5.89 -3.76)\"/></g></svg>'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/assets/defaultIcons.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ckb.js":
/*!************************************************!*\
  !*** ./node_modules/suneditor/src/lang/ckb.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ckb\",\n        toolbar: {\n            default: \"بنه‌ڕه‌ت\",\n            save: \"پاشه‌كه‌وتكردن\",\n            font: \"فۆنت\",\n            formats: \"Formats\",\n            fontSize: \"قه‌باره‌\",\n            bold: \"تۆخكردن\",\n            underline: \"هێڵ به‌ژێردا بێنه‌\",\n            italic: \"لار\",\n            strike: \"هێڵ به‌ناودا بێنه‌\",\n            subscript: \"ژێرسکریپت\",\n            superscript: \"سەرنووس\",\n            removeFormat: \"لابردنی فۆرمات\",\n            fontColor: \"ره‌نگی فۆنت\",\n            hiliteColor: \"ره‌نگی دیاركراو\",\n            indent: \"بۆشایی بەجێهێشتن\",\n            outdent: \"لابردنی بۆشایی\",\n            align: \"ئاراسته‌\",\n            alignLeft: \"لای چه‌پ\",\n            alignRight: \"لای راست\",\n            alignCenter: \"ناوه‌ند\",\n            alignJustify: \"به‌رێكی دابه‌ش بكه‌\",\n            list: \"لیست\",\n            orderList: \"لیستی ریزكراو\",\n            unorderList: \"لیستی ریزنه‌كراو\",\n            horizontalRule: \"هێڵی ئاسۆیی\",\n            hr_solid: \"پته‌و\",\n            hr_dotted: \"نوكته‌ نوكته‌\",\n            hr_dashed: \"داش داش\",\n            table: \"خشته‌\",\n            link: \"به‌سته‌ر\",\n            math: \"بیركاری\",\n            image: \"وێنه‌\",\n            video: \"ڤیدیۆ\",\n            audio: \"ده‌نگ\",\n            fullScreen: \"پڕ به‌ شاشه‌\",\n            showBlocks: \"بڵۆك نیشانبده\",\n            codeView: \"بینینی كۆده‌كان\",\n            undo: \"وەک خۆی لێ بکەوە\",\n            redo: \"هەڵگەڕاندنەوە\",\n            preview: \"پێشبینین\",\n            print: \"پرینت\",\n            tag_p: \"په‌ره‌گراف\",\n            tag_div: \"ی ئاسایی (DIV)\",\n            tag_h: \"سەرپەڕە\",\n            tag_blockquote: \"ده‌ق\",\n            tag_pre: \"كۆد\",\n            template: \"قاڵب\",\n            lineHeight: \"بڵندی دێر\",\n            paragraphStyle: \"ستایلی په‌ره‌گراف\",\n            textStyle: \"ستایلی نوسین\",\n            imageGallery: \"گاله‌ری وێنه‌كان\",\n            dir_ltr: \"من اليسار إلى اليمين\",\n            dir_rtl: \"من اليمين الى اليسار\",\n            mention: \"تنويه ب\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"به‌سته‌ر دابنێ\",\n                url: \"به‌سته‌ر\",\n                text: \"تێكستی به‌سته‌ر\",\n                newWindowCheck: \"له‌ په‌نجه‌ره‌یه‌كی نوێ بكه‌ره‌وه‌\",\n                downloadLinkCheck: \"رابط التحميل\",\n                bookmark: \"المرجعية\"\n            },\n            mathBox: {\n                title: \"بیركاری\",\n                inputLabel: \"نیشانه‌كانی بیركاری\",\n                fontSizeLabel: \"قه‌باره‌ی فۆنت\",\n                previewLabel: \"پێشبینین\"\n            },\n            imageBox: {\n                title: \"وێنه‌یه‌ك دابنێ\",\n                file: \"فایلێك هه‌ڵبژێره‌\",\n                url: \"به‌سته‌ری وێنه‌\",\n                altText: \"نوسینی جێگره‌وه‌\"\n            },\n            videoBox: {\n                title: \"ڤیدیۆیه‌ك دابنێ\",\n                file: \"فایلێك هه‌ڵبژێره‌\",\n                url: \"YouTube/Vimeo به‌سته‌ری له‌ناودانان وه‌ك \"\n            },\n            audioBox: {\n                title: \"ده‌نگێك دابنێ\",\n                file: \"فایلێك هه‌ڵبژێره‌\",\n                url: \"به‌سته‌ری ده‌نگ\"\n            },\n            browser: {\n                tags: \"تاگه‌كان\",\n                search: \"گه‌ران\"\n            },\n            caption: \"پێناسه‌یه‌ك دابنێ\",\n            close: \"داخستن\",\n            submitButton: \"ناردن\",\n            revertButton: \"بیگەڕێنەوە سەر باری سەرەتایی\",\n            proportion: \"رێژه‌كان وه‌ك خۆی بهێڵه‌وه‌\",\n            basic: \"سه‌ره‌تایی\",\n            left: \"چه‌پ\",\n            right: \"راست\",\n            center: \"ناوەڕاست\",\n            width: \"پانی\",\n            height: \"به‌رزی\",\n            size: \"قه‌باره‌\",\n            ratio: \"رێژه‌\"\n        },\n        controller: {\n            edit: \"دەسکاریکردن\",\n            unlink: \"سڕینەوەی بەستەر\",\n            remove: \"سڕینه‌وه‌\",\n            insertRowAbove: \"ریزك له‌ سه‌ره‌وه‌ زیادبكه‌\",\n            insertRowBelow: \"ریزێك له‌ خواره‌وه‌ زیادبكه‌\",\n            deleteRow: \"ریز بسره‌وه‌\",\n            insertColumnBefore: \"ستونێك له‌ پێشه‌وه‌ زیادبكه‌\",\n            insertColumnAfter: \"ستونێك له‌ دواوه‌ زیادبكه‌\",\n            deleteColumn: \"ستونێك بسره‌وه‌\",\n            fixedColumnWidth: \"پانی ستون نه‌گۆربكه‌\",\n            resize100: \"قه‌باره‌ بگۆره‌ بۆ ١٠٠%\",\n            resize75: \"قه‌باره‌ بگۆره‌ بۆ ٧٥%\",\n            resize50: \"قه‌باره‌ بگۆره‌ بۆ ٥٠%\",\n            resize25: \"قه‌باره‌ بگۆره‌ بۆ ٢٥%\",\n            autoSize: \"قه‌باره‌ی خۆكارانه‌\",\n            mirrorHorizontal: \"هه‌ڵگه‌رێنه‌وه‌ به‌ده‌وری ته‌وه‌ره‌ی ئاسۆیی\",\n            mirrorVertical: \"هه‌ڵگه‌رێنه‌وه‌ به‌ده‌وری ته‌وه‌ره‌ی ستونی\",\n            rotateLeft: \"بسوڕێنه‌ به‌لای چه‌پدا\",\n            rotateRight: \"بسورێنه‌ به‌لای راستدا\",\n            maxSize: \"گه‌وره‌ترین قه‌باره‌\",\n            minSize: \"بچوكترین قه‌باره‌\",\n            tableHeader: \"سه‌ردێری خشته‌ك\",\n            mergeCells: \"خانه‌كان تێكه‌ڵبكه‌\",\n            splitCells: \"خانه‌كان لێك جیابكه‌وه‌\",\n            HorizontalSplit: \"جیاكردنه‌وه‌ی ئاسۆیی\",\n            VerticalSplit: \"جیاكردنه‌وه‌ی ستونی\"\n        },\n        menu: {\n            spaced: \"بۆشای هه‌بێت\",\n            bordered: \"لێواری هه‌بێت\",\n            neon: \"نیۆن\",\n            translucent: \"كه‌مێك وه‌ك شووشه‌\",\n            shadow: \"سێبه‌ر\",\n            code: \"كۆد\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ckb\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ckb.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/cs.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/cs.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"cs\",\n        toolbar: {\n            default: \"V\\xfdchoz\\xed\",\n            save: \"Uložit\",\n            font: \"P\\xedsmo\",\n            formats: \"Form\\xe1ty\",\n            fontSize: \"Velikost\",\n            bold: \"Tučn\\xe9\",\n            underline: \"Podtržen\\xed\",\n            italic: \"Kurz\\xedva\",\n            strike: \"Přeškrtnut\\xed\",\n            subscript: \"Doln\\xed index\",\n            superscript: \"Horn\\xed index\",\n            removeFormat: \"Odebrat form\\xe1t\",\n            fontColor: \"Barva p\\xedsma\",\n            hiliteColor: \"Barva zv\\xfdrazněn\\xed\",\n            indent: \"Odsadit\",\n            outdent: \"Předsadit\",\n            align: \"Zarovnat\",\n            alignLeft: \"Zarovnat vlevo\",\n            alignRight: \"Zarovnat vpravo\",\n            alignCenter: \"Zarovnat na střed\",\n            alignJustify: \"Zarovnat do bloku\",\n            list: \"Seznam\",\n            orderList: \"Seřazen\\xfd seznam\",\n            unorderList: \"Neřazen\\xfd seznam\",\n            horizontalRule: \"Vodorovn\\xe1 č\\xe1ra\",\n            hr_solid: \"Nepřerušovan\\xe1\",\n            hr_dotted: \"Tečkovan\\xe1\",\n            hr_dashed: \"Č\\xe1rkovan\\xe1\",\n            table: \"Tabulka\",\n            link: \"Odkaz\",\n            math: \"Matematika\",\n            image: \"Obr\\xe1zek\",\n            video: \"Video\",\n            audio: \"Zvuk\",\n            fullScreen: \"Cel\\xe1 obrazovka\",\n            showBlocks: \"Zobrazit bloky\",\n            codeView: \"Zobrazen\\xed k\\xf3du\",\n            undo: \"Zpět\",\n            redo: \"Opakovat\",\n            preview: \"N\\xe1hled\",\n            print: \"tisk\",\n            tag_p: \"Odstavec\",\n            tag_div: \"Norm\\xe1ln\\xed (DIV)\",\n            tag_h: \"Z\\xe1hlav\\xed\",\n            tag_blockquote: \"Citovat\",\n            tag_pre: \"K\\xf3d\",\n            template: \"Šablona\",\n            lineHeight: \"V\\xfdška ř\\xe1dku\",\n            paragraphStyle: \"Styl odstavce\",\n            textStyle: \"Styl textu\",\n            imageGallery: \"Obr\\xe1zkov\\xe1 galerie\",\n            dir_ltr: \"Zleva doprava\",\n            dir_rtl: \"Zprava doleva\",\n            mention: \"Zm\\xednka\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Vložit odkaz\",\n                url: \"URL pro odkaz\",\n                text: \"Text k zobrazen\\xed\",\n                newWindowCheck: \"Otevř\\xedt v nov\\xe9m okně\",\n                downloadLinkCheck: \"Odkaz ke stažen\\xed\",\n                bookmark: \"Z\\xe1ložka\"\n            },\n            mathBox: {\n                title: \"Matematika\",\n                inputLabel: \"Matematick\\xe1 notace\",\n                fontSizeLabel: \"Velikost p\\xedsma\",\n                previewLabel: \"N\\xe1hled\"\n            },\n            imageBox: {\n                title: \"Vložit obr\\xe1zek\",\n                file: \"Vybrat ze souborů\",\n                url: \"URL obr\\xe1zku\",\n                altText: \"Alternativn\\xed text\"\n            },\n            videoBox: {\n                title: \"Vložit video\",\n                file: \"Vybrat ze souborů\",\n                url: \"URL pro vložen\\xed m\\xe9di\\xed, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Vložit zvuk\",\n                file: \"Vybrat ze souborů\",\n                url: \"Adresa URL zvuku\"\n            },\n            browser: {\n                tags: \"Št\\xedtky\",\n                search: \"Hledat\"\n            },\n            caption: \"Vložit popis\",\n            close: \"Zavř\\xedt\",\n            submitButton: \"Odeslat\",\n            revertButton: \"Vr\\xe1tit zpět\",\n            proportion: \"Omezen\\xed proporc\\xed\",\n            basic: \"Z\\xe1kladn\\xed\",\n            left: \"Vlevo\",\n            right: \"Vpravo\",\n            center: \"Střed\",\n            width: \"Š\\xedřka\",\n            height: \"V\\xfdška\",\n            size: \"Velikost\",\n            ratio: \"Poměr\"\n        },\n        controller: {\n            edit: \"Upravit\",\n            unlink: \"Odpojit\",\n            remove: \"Odebrat\",\n            insertRowAbove: \"Vložit ř\\xe1dek v\\xfdše\",\n            insertRowBelow: \"Vložit ř\\xe1dek n\\xedže\",\n            deleteRow: \"Smazat ř\\xe1dek\",\n            insertColumnBefore: \"Vložit sloupec před\",\n            insertColumnAfter: \"Vložit sloupec za\",\n            deleteColumn: \"Smazat sloupec\",\n            fixedColumnWidth: \"Pevn\\xe1 š\\xedřka sloupce\",\n            resize100: \"Změnit velikost 100%\",\n            resize75: \"Změnit velikost 75%\",\n            resize50: \"Změnit velikost 50%\",\n            resize25: \"Změnit velikost 25%\",\n            autoSize: \"Automatick\\xe1 velikost\",\n            mirrorHorizontal: \"Zrcadlo, horizont\\xe1ln\\xed\",\n            mirrorVertical: \"Zrcadlo, vertik\\xe1ln\\xed\",\n            rotateLeft: \"Otočit doleva\",\n            rotateRight: \"Otočit doprava\",\n            maxSize: \"Max. velikost\",\n            minSize: \"Min. velikost\",\n            tableHeader: \"Z\\xe1hlav\\xed tabulky\",\n            mergeCells: \"Spojit buňky\",\n            splitCells: \"Rozdělit buňky\",\n            HorizontalSplit: \"Vodorovn\\xe9 rozdělen\\xed\",\n            VerticalSplit: \"Svisl\\xe9 rozdělen\\xed\"\n        },\n        menu: {\n            spaced: \"Rozložen\\xe9\",\n            bordered: \"Ohraničen\\xe9\",\n            neon: \"Neon\",\n            translucent: \"Průsvitn\\xe9\",\n            shadow: \"St\\xedn\",\n            code: \"K\\xf3d\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"cs\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/cs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/da.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/da.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * \n * Danish translation by davidkonrad at github or gmail\n *\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"da\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Gem\",\n            font: \"Skrifttype\",\n            formats: \"Format\",\n            fontSize: \"Skriftst\\xf8rrelse\",\n            bold: \"Fed\",\n            underline: \"Understreget\",\n            italic: \"Skr\\xe5skrift\",\n            strike: \"Overstreget\",\n            subscript: \"S\\xe6nket skrift\",\n            superscript: \"H\\xe6vet skrift\",\n            removeFormat: \"Fjern formatering\",\n            fontColor: \"Skriftfarve\",\n            hiliteColor: \"Baggrundsfarve\",\n            indent: \"Ryk ind\",\n            outdent: \"Ryk ud\",\n            align: \"Justering\",\n            alignLeft: \"Venstrejustering\",\n            alignRight: \"H\\xf8jrejustering\",\n            alignCenter: \"Midterjustering\",\n            alignJustify: \"Tilpas margin\",\n            list: \"Lister\",\n            orderList: \"Nummereret liste\",\n            unorderList: \"Uordnet liste\",\n            horizontalRule: \"Horisontal linie\",\n            hr_solid: \"Almindelig\",\n            hr_dotted: \"Punkteret\",\n            hr_dashed: \"Streget\",\n            table: \"Tabel\",\n            link: \"Link\",\n            math: \"Math\",\n            image: \"Billede\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Fuld sk\\xe6rm\",\n            showBlocks: \"Vis blokke\",\n            codeView: \"Vis koder\",\n            undo: \"Undo\",\n            redo: \"Redo\",\n            preview: \"Preview\",\n            print: \"Print\",\n            tag_p: \"Paragraph\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Overskrift\",\n            tag_blockquote: \"Citer\",\n            tag_pre: \"Code\",\n            template: \"Schablone\",\n            lineHeight: \"Linjeh\\xf8jde\",\n            paragraphStyle: \"Afsnitstil\",\n            textStyle: \"Tekststil\",\n            imageGallery: \"Billedgalleri\",\n            dir_ltr: \"Venstre til h\\xf8jre\",\n            dir_rtl: \"H\\xf8jre til venstre\",\n            mention: \"N\\xe6vne\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inds\\xe6t link\",\n                url: \"URL til link\",\n                text: \"Tekst for link\",\n                newWindowCheck: \"\\xc5ben i nyt faneblad\",\n                downloadLinkCheck: \"Download link\",\n                bookmark: \"Bogm\\xe6rke\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Matematisk notation\",\n                fontSizeLabel: \"Skriftst\\xf8rrelse\",\n                previewLabel: \"Preview\"\n            },\n            imageBox: {\n                title: \"Inds\\xe6t billede\",\n                file: \"Inds\\xe6t fra fil\",\n                url: \"Inds\\xe6t fra URL\",\n                altText: \"Alternativ tekst\"\n            },\n            videoBox: {\n                title: \"Inds\\xe6t Video\",\n                file: \"Inds\\xe6t fra fil\",\n                url: \"Indlejr video / YouTube,Vimeo\"\n            },\n            audioBox: {\n                title: \"Inds\\xe6t Audio\",\n                file: \"Inds\\xe6t fra fil\",\n                url: \"Inds\\xe6t fra URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"S\\xf8g\"\n            },\n            caption: \"Inds\\xe6t beskrivelse\",\n            close: \"Luk\",\n            submitButton: \"Gennemf\\xf8r\",\n            revertButton: \"Gendan\",\n            proportion: \"Bevar proportioner\",\n            basic: \"Basis\",\n            left: \"Venstre\",\n            right: \"H\\xf8jre\",\n            center: \"Center\",\n            width: \"Bredde\",\n            height: \"H\\xf8jde\",\n            size: \"St\\xf8rrelse\",\n            ratio: \"Forhold\"\n        },\n        controller: {\n            edit: \"Rediger\",\n            unlink: \"Fjern link\",\n            remove: \"Fjern\",\n            insertRowAbove: \"Inds\\xe6t r\\xe6kke foroven\",\n            insertRowBelow: \"Inds\\xe6t r\\xe6kke nedenfor\",\n            deleteRow: \"Slet r\\xe6kke\",\n            insertColumnBefore: \"Inds\\xe6t kolonne f\\xf8r\",\n            insertColumnAfter: \"Inds\\xe6t kolonne efter\",\n            deleteColumn: \"Slet kolonne\",\n            fixedColumnWidth: \"Fast s\\xf8jlebredde\",\n            resize100: \"Forst\\xf8r 100%\",\n            resize75: \"Forst\\xf8r 75%\",\n            resize50: \"Forst\\xf8r 50%\",\n            resize25: \"Forst\\xf8r 25%\",\n            autoSize: \"Auto st\\xf8rrelse\",\n            mirrorHorizontal: \"Spejling, horisontal\",\n            mirrorVertical: \"Spejling, vertikal\",\n            rotateLeft: \"Roter til venstre\",\n            rotateRight: \"Toter til h\\xf8jre\",\n            maxSize: \"Max st\\xf8rrelse\",\n            minSize: \"Min st\\xf8rrelse\",\n            tableHeader: \"Tabel overskrift\",\n            mergeCells: \"Sammenl\\xe6g celler (merge)\",\n            splitCells: \"Opdel celler\",\n            HorizontalSplit: \"Opdel horisontalt\",\n            VerticalSplit: \"Opdel vertikalt\"\n        },\n        menu: {\n            spaced: \"Brev Afstand\",\n            bordered: \"Afgr\\xe6nsningslinje\",\n            neon: \"Neon\",\n            translucent: \"Gennemsigtig\",\n            shadow: \"Skygge\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"da\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/da.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/de.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/de.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 @Gundolf68\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"de\",\n        toolbar: {\n            default: \"Standard\",\n            save: \"Speichern\",\n            font: \"Schriftart\",\n            formats: \"Format\",\n            fontSize: \"Schriftgr\\xf6\\xdfe\",\n            bold: \"Fett\",\n            underline: \"Unterstrichen\",\n            italic: \"Kursiv\",\n            strike: \"Durchgestrichen\",\n            subscript: \"Tiefgestellt\",\n            superscript: \"Hochgestellt\",\n            removeFormat: \"Format entfernen\",\n            fontColor: \"Schriftfarbe\",\n            hiliteColor: \"Farbe f\\xfcr Hervorhebungen\",\n            indent: \"Einzug vergr\\xf6\\xdfern\",\n            outdent: \"Einzug verkleinern\",\n            align: \"Ausrichtung\",\n            alignLeft: \"Links ausrichten\",\n            alignRight: \"Rechts ausrichten\",\n            alignCenter: \"Zentriert ausrichten\",\n            alignJustify: \"Blocksatz\",\n            list: \"Liste\",\n            orderList: \"Nummerierte Liste\",\n            unorderList: \"Aufz\\xe4hlung\",\n            horizontalRule: \"Horizontale Linie\",\n            hr_solid: \"Strich\",\n            hr_dotted: \"Gepunktet\",\n            hr_dashed: \"Gestrichelt\",\n            table: \"Tabelle\",\n            link: \"Link\",\n            math: \"Mathematik\",\n            image: \"Bild\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Vollbild\",\n            showBlocks: \"Blockformatierungen anzeigen\",\n            codeView: \"Quelltext anzeigen\",\n            undo: \"R\\xfcckg\\xe4ngig\",\n            redo: \"Wiederholen\",\n            preview: \"Vorschau\",\n            print: \"Drucken\",\n            tag_p: \"Absatz\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Header\",\n            tag_blockquote: \"Zitat\",\n            tag_pre: \"Quellcode\",\n            template: \"Vorlage\",\n            lineHeight: \"Zeilenh\\xf6he\",\n            paragraphStyle: \"Absatzstil\",\n            textStyle: \"Textstil\",\n            imageGallery: \"Bildergalerie\",\n            dir_ltr: \"Links nach rechts\",\n            dir_rtl: \"Rechts nach links\",\n            mention: \"Erw\\xe4hnen\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Link einf\\xfcgen\",\n                url: \"Link-URL\",\n                text: \"Link-Text\",\n                newWindowCheck: \"In neuem Fenster anzeigen\",\n                downloadLinkCheck: \"Download-Link\",\n                bookmark: \"Lesezeichen\"\n            },\n            mathBox: {\n                title: \"Mathematik\",\n                inputLabel: \"Mathematische Notation\",\n                fontSizeLabel: \"Schriftgr\\xf6\\xdfe\",\n                previewLabel: \"Vorschau\"\n            },\n            imageBox: {\n                title: \"Bild einf\\xfcgen\",\n                file: \"Datei ausw\\xe4hlen\",\n                url: \"Bild-URL\",\n                altText: \"Alternativer Text\"\n            },\n            videoBox: {\n                title: \"Video einf\\xfcgen\",\n                file: \"Datei ausw\\xe4hlen\",\n                url: \"Video-URL, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Audio einf\\xfcgen\",\n                file: \"Datei ausw\\xe4hlen\",\n                url: \"Audio-URL\"\n            },\n            browser: {\n                tags: \"Stichworte\",\n                search: \"Suche\"\n            },\n            caption: \"Beschreibung eingeben\",\n            close: \"Schlie\\xdfen\",\n            submitButton: \"\\xdcbernehmen\",\n            revertButton: \"R\\xfcckg\\xe4ngig\",\n            proportion: \"Seitenverh\\xe4ltnis beibehalten\",\n            basic: \"Standard\",\n            left: \"Links\",\n            right: \"Rechts\",\n            center: \"Zentriert\",\n            width: \"Breite\",\n            height: \"H\\xf6he\",\n            size: \"Gr\\xf6\\xdfe\",\n            ratio: \"Verh\\xe4ltnis\"\n        },\n        controller: {\n            edit: \"Bearbeiten\",\n            unlink: \"Link entfernen\",\n            remove: \"L\\xf6schen\",\n            insertRowAbove: \"Zeile oberhalb einf\\xfcgen\",\n            insertRowBelow: \"Zeile unterhalb einf\\xfcgen\",\n            deleteRow: \"Zeile l\\xf6schen\",\n            insertColumnBefore: \"Spalte links einf\\xfcgen\",\n            insertColumnAfter: \"Spalte rechts einf\\xfcgen\",\n            deleteColumn: \"Spalte l\\xf6schen\",\n            fixedColumnWidth: \"Feste Spaltenbreite\",\n            resize100: \"Zoom 100%\",\n            resize75: \"Zoom 75%\",\n            resize50: \"Zoom 50%\",\n            resize25: \"Zoom 25%\",\n            autoSize: \"Automatische Gr\\xf6\\xdfenanpassung\",\n            mirrorHorizontal: \"Horizontal spiegeln\",\n            mirrorVertical: \"Vertikal spiegeln\",\n            rotateLeft: \"Nach links drehen\",\n            rotateRight: \"Nach rechts drehen\",\n            maxSize: \"Maximale Gr\\xf6\\xdfe\",\n            minSize: \"Mindestgr\\xf6\\xdfe\",\n            tableHeader: \"Tabellen\\xfcberschrift\",\n            mergeCells: \"Zellen verbinden\",\n            splitCells: \"Zellen teilen\",\n            HorizontalSplit: \"Horizontal teilen\",\n            VerticalSplit: \"Vertikal teilen\"\n        },\n        menu: {\n            spaced: \"Buchstabenabstand\",\n            bordered: \"Umrandet\",\n            neon: \"Neon\",\n            translucent: \"Durchscheinend\",\n            shadow: \"Schatten\",\n            code: \"Quellcode\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"de\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/de.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/en.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/en.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"en\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Save\",\n            font: \"Font\",\n            formats: \"Formats\",\n            fontSize: \"Size\",\n            bold: \"Bold\",\n            underline: \"Underline\",\n            italic: \"Italic\",\n            strike: \"Strike\",\n            subscript: \"Subscript\",\n            superscript: \"Superscript\",\n            removeFormat: \"Remove Format\",\n            fontColor: \"Font Color\",\n            hiliteColor: \"Highlight Color\",\n            indent: \"Indent\",\n            outdent: \"Outdent\",\n            align: \"Align\",\n            alignLeft: \"Align left\",\n            alignRight: \"Align right\",\n            alignCenter: \"Align center\",\n            alignJustify: \"Align justify\",\n            list: \"List\",\n            orderList: \"Ordered list\",\n            unorderList: \"Unordered list\",\n            horizontalRule: \"Horizontal line\",\n            hr_solid: \"Solid\",\n            hr_dotted: \"Dotted\",\n            hr_dashed: \"Dashed\",\n            table: \"Table\",\n            link: \"Link\",\n            math: \"Math\",\n            image: \"Image\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Full screen\",\n            showBlocks: \"Show blocks\",\n            codeView: \"Code view\",\n            undo: \"Undo\",\n            redo: \"Redo\",\n            preview: \"Preview\",\n            print: \"print\",\n            tag_p: \"Paragraph\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Header\",\n            tag_blockquote: \"Quote\",\n            tag_pre: \"Code\",\n            template: \"Template\",\n            lineHeight: \"Line height\",\n            paragraphStyle: \"Paragraph style\",\n            textStyle: \"Text style\",\n            imageGallery: \"Image gallery\",\n            dir_ltr: \"Left to right\",\n            dir_rtl: \"Right to left\",\n            mention: \"Mention\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Insert Link\",\n                url: \"URL to link\",\n                text: \"Text to display\",\n                newWindowCheck: \"Open in new window\",\n                downloadLinkCheck: \"Download link\",\n                bookmark: \"Bookmark\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Mathematical Notation\",\n                fontSizeLabel: \"Font Size\",\n                previewLabel: \"Preview\"\n            },\n            imageBox: {\n                title: \"Insert image\",\n                file: \"Select from files\",\n                url: \"Image URL\",\n                altText: \"Alternative text\"\n            },\n            videoBox: {\n                title: \"Insert Video\",\n                file: \"Select from files\",\n                url: \"Media embed URL, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Insert Audio\",\n                file: \"Select from files\",\n                url: \"Audio URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"Search\"\n            },\n            caption: \"Insert description\",\n            close: \"Close\",\n            submitButton: \"Submit\",\n            revertButton: \"Revert\",\n            proportion: \"Constrain proportions\",\n            basic: \"Basic\",\n            left: \"Left\",\n            right: \"Right\",\n            center: \"Center\",\n            width: \"Width\",\n            height: \"Height\",\n            size: \"Size\",\n            ratio: \"Ratio\"\n        },\n        controller: {\n            edit: \"Edit\",\n            unlink: \"Unlink\",\n            remove: \"Remove\",\n            insertRowAbove: \"Insert row above\",\n            insertRowBelow: \"Insert row below\",\n            deleteRow: \"Delete row\",\n            insertColumnBefore: \"Insert column before\",\n            insertColumnAfter: \"Insert column after\",\n            deleteColumn: \"Delete column\",\n            fixedColumnWidth: \"Fixed column width\",\n            resize100: \"Resize 100%\",\n            resize75: \"Resize 75%\",\n            resize50: \"Resize 50%\",\n            resize25: \"Resize 25%\",\n            autoSize: \"Auto size\",\n            mirrorHorizontal: \"Mirror, Horizontal\",\n            mirrorVertical: \"Mirror, Vertical\",\n            rotateLeft: \"Rotate left\",\n            rotateRight: \"Rotate right\",\n            maxSize: \"Max size\",\n            minSize: \"Min size\",\n            tableHeader: \"Table header\",\n            mergeCells: \"Merge cells\",\n            splitCells: \"Split Cells\",\n            HorizontalSplit: \"Horizontal split\",\n            VerticalSplit: \"Vertical split\"\n        },\n        menu: {\n            spaced: \"Spaced\",\n            bordered: \"Bordered\",\n            neon: \"Neon\",\n            translucent: \"Translucent\",\n            shadow: \"Shadow\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"en\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvZW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQyxVQUFVQSxNQUFNLEVBQUVDLE9BQU87SUFDdEIsSUFBSSxLQUFrQixJQUFZLE9BQU9DLE9BQU9DLE9BQU8sS0FBSyxVQUFVO1FBQ2xFRCxPQUFPQyxPQUFPLEdBQUdILE9BQU9JLFFBQVEsR0FDNUJILFFBQVFELFFBQVEsUUFDaEIsU0FBVUssQ0FBQztZQUNQLElBQUksQ0FBQ0EsRUFBRUQsUUFBUSxFQUFFO2dCQUNiLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBLE9BQU9MLFFBQVFJO1FBQ25CO0lBQ1IsT0FBTztRQUNISixRQUFRRDtJQUNaO0FBQ0osR0FBRSxLQUFrQixHQUFjTyxTQUFTLEdBQU0sU0FBVUEsT0FBTSxFQUFFQyxRQUFRO0lBQ3ZFLE1BQU1DLE9BQU87UUFDVEMsTUFBTTtRQUNOQyxTQUFTO1lBQ0xDLFNBQVM7WUFDVEMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxNQUFNO1lBQ05DLFdBQVc7WUFDWEMsUUFBUTtZQUNSQyxRQUFRO1lBQ1JDLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxjQUFjO1lBQ2RDLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxXQUFXO1lBQ1hDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxjQUFjO1lBQ2RDLE1BQU07WUFDTkMsV0FBVztZQUNYQyxhQUFhO1lBQ2JDLGdCQUFnQjtZQUNoQkMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLFdBQVc7WUFDWEMsT0FBTztZQUNQQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLE9BQU87WUFDUEMsWUFBWTtZQUNaQyxZQUFZO1lBQ1pDLFVBQVU7WUFDVkMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxnQkFBZ0I7WUFDaEJDLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxZQUFZO1lBQ1pDLGdCQUFnQjtZQUNoQkMsV0FBVztZQUNYQyxjQUFjO1lBQ2RDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxTQUFTO1FBQ2I7UUFDQUMsV0FBVztZQUNQQyxTQUFTO2dCQUNMQyxPQUFPO2dCQUNQQyxLQUFLO2dCQUNMQyxNQUFNO2dCQUNOQyxnQkFBZ0I7Z0JBQ2hCQyxtQkFBbUI7Z0JBQ25CQyxVQUFVO1lBQ2Q7WUFDQUMsU0FBUztnQkFDTE4sT0FBTztnQkFDUE8sWUFBWTtnQkFDWkMsZUFBZTtnQkFDZkMsY0FBYztZQUNsQjtZQUNBQyxVQUFVO2dCQUNOVixPQUFPO2dCQUNQVyxNQUFNO2dCQUNOVixLQUFLO2dCQUNMVyxTQUFTO1lBQ2I7WUFDQUMsVUFBVTtnQkFDTmIsT0FBTztnQkFDUFcsTUFBTTtnQkFDTlYsS0FBSztZQUNUO1lBQ0FhLFVBQVU7Z0JBQ05kLE9BQU87Z0JBQ1BXLE1BQU07Z0JBQ05WLEtBQUs7WUFDVDtZQUNBYyxTQUFTO2dCQUNMQyxNQUFNO2dCQUNOQyxRQUFRO1lBQ1o7WUFDQUMsU0FBUztZQUNUQyxPQUFPO1lBQ1BDLGNBQWM7WUFDZEMsY0FBYztZQUNkQyxZQUFZO1lBQ1pDLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkMsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLE1BQU07WUFDTkMsT0FBTztRQUNYO1FBQ0FDLFlBQVk7WUFDUkMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLFFBQVE7WUFDUkMsZ0JBQWdCO1lBQ2hCQyxnQkFBZ0I7WUFDaEJDLFdBQVc7WUFDWEMsb0JBQW9CO1lBQ3BCQyxtQkFBbUI7WUFDbkJDLGNBQWM7WUFDZEMsa0JBQWtCO1lBQ2xCQyxXQUFXO1lBQ1hDLFVBQVU7WUFDVkMsVUFBVTtZQUNWQyxVQUFVO1lBQ1ZDLFVBQVU7WUFDVkMsa0JBQWtCO1lBQ2xCQyxnQkFBZ0I7WUFDaEJDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxTQUFTO1lBQ1RDLFNBQVM7WUFDVEMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLFlBQVk7WUFDWkMsaUJBQWlCO1lBQ2pCQyxlQUFlO1FBQ25CO1FBQ0FDLE1BQU07WUFDRkMsUUFBUTtZQUNSQyxVQUFVO1lBQ1ZDLE1BQU07WUFDTkMsYUFBYTtZQUNiQyxRQUFRO1lBQ1J6SCxNQUFNO1FBQ1Y7SUFDSjtJQUVBLElBQUksT0FBT0YsYUFBYSxPQUFPNEgsV0FBVztRQUN0QyxJQUFJLENBQUM3SCxRQUFPOEgsY0FBYyxFQUFFO1lBQ3hCQyxPQUFPQyxjQUFjLENBQUNoSSxTQUFRLGtCQUFrQjtnQkFDNUNpSSxZQUFZO2dCQUNaQyxVQUFVO2dCQUNWQyxjQUFjO2dCQUNkQyxPQUFPLENBQUM7WUFDWjtRQUNKO1FBRUFMLE9BQU9DLGNBQWMsQ0FBQ2hJLFFBQU84SCxjQUFjLEVBQUUsTUFBTTtZQUMvQ0csWUFBWTtZQUNaQyxVQUFVO1lBQ1ZDLGNBQWM7WUFDZEMsT0FBT2xJO1FBQ1g7SUFDSjtJQUVBLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvbGFuZy9lbi5qcz9jNjc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xuICAgICAgICAgICAgICAgIGlmICghdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9MQU5HIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeSh3KTtcbiAgICAgICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShnbG9iYWwpO1xuICAgIH1cbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xuICAgIGNvbnN0IGxhbmcgPSB7XG4gICAgICAgIGNvZGU6ICdlbicsXG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdEZWZhdWx0JyxcbiAgICAgICAgICAgIHNhdmU6ICdTYXZlJyxcbiAgICAgICAgICAgIGZvbnQ6ICdGb250JyxcbiAgICAgICAgICAgIGZvcm1hdHM6ICdGb3JtYXRzJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnU2l6ZScsXG4gICAgICAgICAgICBib2xkOiAnQm9sZCcsXG4gICAgICAgICAgICB1bmRlcmxpbmU6ICdVbmRlcmxpbmUnLFxuICAgICAgICAgICAgaXRhbGljOiAnSXRhbGljJyxcbiAgICAgICAgICAgIHN0cmlrZTogJ1N0cmlrZScsXG4gICAgICAgICAgICBzdWJzY3JpcHQ6ICdTdWJzY3JpcHQnLFxuICAgICAgICAgICAgc3VwZXJzY3JpcHQ6ICdTdXBlcnNjcmlwdCcsXG4gICAgICAgICAgICByZW1vdmVGb3JtYXQ6ICdSZW1vdmUgRm9ybWF0JyxcbiAgICAgICAgICAgIGZvbnRDb2xvcjogJ0ZvbnQgQ29sb3InLFxuICAgICAgICAgICAgaGlsaXRlQ29sb3I6ICdIaWdobGlnaHQgQ29sb3InLFxuICAgICAgICAgICAgaW5kZW50OiAnSW5kZW50JyxcbiAgICAgICAgICAgIG91dGRlbnQ6ICdPdXRkZW50JyxcbiAgICAgICAgICAgIGFsaWduOiAnQWxpZ24nLFxuICAgICAgICAgICAgYWxpZ25MZWZ0OiAnQWxpZ24gbGVmdCcsXG4gICAgICAgICAgICBhbGlnblJpZ2h0OiAnQWxpZ24gcmlnaHQnLFxuICAgICAgICAgICAgYWxpZ25DZW50ZXI6ICdBbGlnbiBjZW50ZXInLFxuICAgICAgICAgICAgYWxpZ25KdXN0aWZ5OiAnQWxpZ24ganVzdGlmeScsXG4gICAgICAgICAgICBsaXN0OiAnTGlzdCcsXG4gICAgICAgICAgICBvcmRlckxpc3Q6ICdPcmRlcmVkIGxpc3QnLFxuICAgICAgICAgICAgdW5vcmRlckxpc3Q6ICdVbm9yZGVyZWQgbGlzdCcsXG4gICAgICAgICAgICBob3Jpem9udGFsUnVsZTogJ0hvcml6b250YWwgbGluZScsXG4gICAgICAgICAgICBocl9zb2xpZDogJ1NvbGlkJyxcbiAgICAgICAgICAgIGhyX2RvdHRlZDogJ0RvdHRlZCcsXG4gICAgICAgICAgICBocl9kYXNoZWQ6ICdEYXNoZWQnLFxuICAgICAgICAgICAgdGFibGU6ICdUYWJsZScsXG4gICAgICAgICAgICBsaW5rOiAnTGluaycsXG4gICAgICAgICAgICBtYXRoOiAnTWF0aCcsXG4gICAgICAgICAgICBpbWFnZTogJ0ltYWdlJyxcbiAgICAgICAgICAgIHZpZGVvOiAnVmlkZW8nLFxuICAgICAgICAgICAgYXVkaW86ICdBdWRpbycsXG4gICAgICAgICAgICBmdWxsU2NyZWVuOiAnRnVsbCBzY3JlZW4nLFxuICAgICAgICAgICAgc2hvd0Jsb2NrczogJ1Nob3cgYmxvY2tzJyxcbiAgICAgICAgICAgIGNvZGVWaWV3OiAnQ29kZSB2aWV3JyxcbiAgICAgICAgICAgIHVuZG86ICdVbmRvJyxcbiAgICAgICAgICAgIHJlZG86ICdSZWRvJyxcbiAgICAgICAgICAgIHByZXZpZXc6ICdQcmV2aWV3JyxcbiAgICAgICAgICAgIHByaW50OiAncHJpbnQnLFxuICAgICAgICAgICAgdGFnX3A6ICdQYXJhZ3JhcGgnLFxuICAgICAgICAgICAgdGFnX2RpdjogJ05vcm1hbCAoRElWKScsXG4gICAgICAgICAgICB0YWdfaDogJ0hlYWRlcicsXG4gICAgICAgICAgICB0YWdfYmxvY2txdW90ZTogJ1F1b3RlJyxcbiAgICAgICAgICAgIHRhZ19wcmU6ICdDb2RlJyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnVGVtcGxhdGUnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogJ0xpbmUgaGVpZ2h0JyxcbiAgICAgICAgICAgIHBhcmFncmFwaFN0eWxlOiAnUGFyYWdyYXBoIHN0eWxlJyxcbiAgICAgICAgICAgIHRleHRTdHlsZTogJ1RleHQgc3R5bGUnLFxuICAgICAgICAgICAgaW1hZ2VHYWxsZXJ5OiAnSW1hZ2UgZ2FsbGVyeScsXG4gICAgICAgICAgICBkaXJfbHRyOiAnTGVmdCB0byByaWdodCcsXG4gICAgICAgICAgICBkaXJfcnRsOiAnUmlnaHQgdG8gbGVmdCcsXG4gICAgICAgICAgICBtZW50aW9uOiAnTWVudGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgZGlhbG9nQm94OiB7XG4gICAgICAgICAgICBsaW5rQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdJbnNlcnQgTGluaycsXG4gICAgICAgICAgICAgICAgdXJsOiAnVVJMIHRvIGxpbmsnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdUZXh0IHRvIGRpc3BsYXknLFxuICAgICAgICAgICAgICAgIG5ld1dpbmRvd0NoZWNrOiAnT3BlbiBpbiBuZXcgd2luZG93JyxcbiAgICAgICAgICAgICAgICBkb3dubG9hZExpbmtDaGVjazogJ0Rvd25sb2FkIGxpbmsnLFxuICAgICAgICAgICAgICAgIGJvb2ttYXJrOiAnQm9va21hcmsnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF0aEJveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTWF0aCcsXG4gICAgICAgICAgICAgICAgaW5wdXRMYWJlbDogJ01hdGhlbWF0aWNhbCBOb3RhdGlvbicsXG4gICAgICAgICAgICAgICAgZm9udFNpemVMYWJlbDogJ0ZvbnQgU2l6ZScsXG4gICAgICAgICAgICAgICAgcHJldmlld0xhYmVsOiAnUHJldmlldydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZUJveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJ0IGltYWdlJyxcbiAgICAgICAgICAgICAgICBmaWxlOiAnU2VsZWN0IGZyb20gZmlsZXMnLFxuICAgICAgICAgICAgICAgIHVybDogJ0ltYWdlIFVSTCcsXG4gICAgICAgICAgICAgICAgYWx0VGV4dDogJ0FsdGVybmF0aXZlIHRleHQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlkZW9Cb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0luc2VydCBWaWRlbycsXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdCBmcm9tIGZpbGVzJyxcbiAgICAgICAgICAgICAgICB1cmw6ICdNZWRpYSBlbWJlZCBVUkwsIFlvdVR1YmUvVmltZW8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXVkaW9Cb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0luc2VydCBBdWRpbycsXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdCBmcm9tIGZpbGVzJyxcbiAgICAgICAgICAgICAgICB1cmw6ICdBdWRpbyBVUkwnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3Nlcjoge1xuICAgICAgICAgICAgICAgIHRhZ3M6ICdUYWdzJyxcbiAgICAgICAgICAgICAgICBzZWFyY2g6ICdTZWFyY2gnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcHRpb246ICdJbnNlcnQgZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgY2xvc2U6ICdDbG9zZScsXG4gICAgICAgICAgICBzdWJtaXRCdXR0b246ICdTdWJtaXQnLFxuICAgICAgICAgICAgcmV2ZXJ0QnV0dG9uOiAnUmV2ZXJ0JyxcbiAgICAgICAgICAgIHByb3BvcnRpb246ICdDb25zdHJhaW4gcHJvcG9ydGlvbnMnLFxuICAgICAgICAgICAgYmFzaWM6ICdCYXNpYycsXG4gICAgICAgICAgICBsZWZ0OiAnTGVmdCcsXG4gICAgICAgICAgICByaWdodDogJ1JpZ2h0JyxcbiAgICAgICAgICAgIGNlbnRlcjogJ0NlbnRlcicsXG4gICAgICAgICAgICB3aWR0aDogJ1dpZHRoJyxcbiAgICAgICAgICAgIGhlaWdodDogJ0hlaWdodCcsXG4gICAgICAgICAgICBzaXplOiAnU2l6ZScsXG4gICAgICAgICAgICByYXRpbzogJ1JhdGlvJ1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgICAgICBlZGl0OiAnRWRpdCcsXG4gICAgICAgICAgICB1bmxpbms6ICdVbmxpbmsnLFxuICAgICAgICAgICAgcmVtb3ZlOiAnUmVtb3ZlJyxcbiAgICAgICAgICAgIGluc2VydFJvd0Fib3ZlOiAnSW5zZXJ0IHJvdyBhYm92ZScsXG4gICAgICAgICAgICBpbnNlcnRSb3dCZWxvdzogJ0luc2VydCByb3cgYmVsb3cnLFxuICAgICAgICAgICAgZGVsZXRlUm93OiAnRGVsZXRlIHJvdycsXG4gICAgICAgICAgICBpbnNlcnRDb2x1bW5CZWZvcmU6ICdJbnNlcnQgY29sdW1uIGJlZm9yZScsXG4gICAgICAgICAgICBpbnNlcnRDb2x1bW5BZnRlcjogJ0luc2VydCBjb2x1bW4gYWZ0ZXInLFxuICAgICAgICAgICAgZGVsZXRlQ29sdW1uOiAnRGVsZXRlIGNvbHVtbicsXG4gICAgICAgICAgICBmaXhlZENvbHVtbldpZHRoOiAnRml4ZWQgY29sdW1uIHdpZHRoJyxcbiAgICAgICAgICAgIHJlc2l6ZTEwMDogJ1Jlc2l6ZSAxMDAlJyxcbiAgICAgICAgICAgIHJlc2l6ZTc1OiAnUmVzaXplIDc1JScsXG4gICAgICAgICAgICByZXNpemU1MDogJ1Jlc2l6ZSA1MCUnLFxuICAgICAgICAgICAgcmVzaXplMjU6ICdSZXNpemUgMjUlJyxcbiAgICAgICAgICAgIGF1dG9TaXplOiAnQXV0byBzaXplJyxcbiAgICAgICAgICAgIG1pcnJvckhvcml6b250YWw6ICdNaXJyb3IsIEhvcml6b250YWwnLFxuICAgICAgICAgICAgbWlycm9yVmVydGljYWw6ICdNaXJyb3IsIFZlcnRpY2FsJyxcbiAgICAgICAgICAgIHJvdGF0ZUxlZnQ6ICdSb3RhdGUgbGVmdCcsXG4gICAgICAgICAgICByb3RhdGVSaWdodDogJ1JvdGF0ZSByaWdodCcsXG4gICAgICAgICAgICBtYXhTaXplOiAnTWF4IHNpemUnLFxuICAgICAgICAgICAgbWluU2l6ZTogJ01pbiBzaXplJyxcbiAgICAgICAgICAgIHRhYmxlSGVhZGVyOiAnVGFibGUgaGVhZGVyJyxcbiAgICAgICAgICAgIG1lcmdlQ2VsbHM6ICdNZXJnZSBjZWxscycsXG4gICAgICAgICAgICBzcGxpdENlbGxzOiAnU3BsaXQgQ2VsbHMnLFxuICAgICAgICAgICAgSG9yaXpvbnRhbFNwbGl0OiAnSG9yaXpvbnRhbCBzcGxpdCcsXG4gICAgICAgICAgICBWZXJ0aWNhbFNwbGl0OiAnVmVydGljYWwgc3BsaXQnXG4gICAgICAgIH0sXG4gICAgICAgIG1lbnU6IHtcbiAgICAgICAgICAgIHNwYWNlZDogJ1NwYWNlZCcsXG4gICAgICAgICAgICBib3JkZXJlZDogJ0JvcmRlcmVkJyxcbiAgICAgICAgICAgIG5lb246ICdOZW9uJyxcbiAgICAgICAgICAgIHRyYW5zbHVjZW50OiAnVHJhbnNsdWNlbnQnLFxuICAgICAgICAgICAgc2hhZG93OiAnU2hhZG93JyxcbiAgICAgICAgICAgIGNvZGU6ICdDb2RlJ1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygbm9HbG9iYWwgPT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX0xBTkcpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTEFORycsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9MQU5HLCAnZW4nLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbGFuZ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGFuZztcbn0pKTsiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsIm5vR2xvYmFsIiwibGFuZyIsImNvZGUiLCJ0b29sYmFyIiwiZGVmYXVsdCIsInNhdmUiLCJmb250IiwiZm9ybWF0cyIsImZvbnRTaXplIiwiYm9sZCIsInVuZGVybGluZSIsIml0YWxpYyIsInN0cmlrZSIsInN1YnNjcmlwdCIsInN1cGVyc2NyaXB0IiwicmVtb3ZlRm9ybWF0IiwiZm9udENvbG9yIiwiaGlsaXRlQ29sb3IiLCJpbmRlbnQiLCJvdXRkZW50IiwiYWxpZ24iLCJhbGlnbkxlZnQiLCJhbGlnblJpZ2h0IiwiYWxpZ25DZW50ZXIiLCJhbGlnbkp1c3RpZnkiLCJsaXN0Iiwib3JkZXJMaXN0IiwidW5vcmRlckxpc3QiLCJob3Jpem9udGFsUnVsZSIsImhyX3NvbGlkIiwiaHJfZG90dGVkIiwiaHJfZGFzaGVkIiwidGFibGUiLCJsaW5rIiwibWF0aCIsImltYWdlIiwidmlkZW8iLCJhdWRpbyIsImZ1bGxTY3JlZW4iLCJzaG93QmxvY2tzIiwiY29kZVZpZXciLCJ1bmRvIiwicmVkbyIsInByZXZpZXciLCJwcmludCIsInRhZ19wIiwidGFnX2RpdiIsInRhZ19oIiwidGFnX2Jsb2NrcXVvdGUiLCJ0YWdfcHJlIiwidGVtcGxhdGUiLCJsaW5lSGVpZ2h0IiwicGFyYWdyYXBoU3R5bGUiLCJ0ZXh0U3R5bGUiLCJpbWFnZUdhbGxlcnkiLCJkaXJfbHRyIiwiZGlyX3J0bCIsIm1lbnRpb24iLCJkaWFsb2dCb3giLCJsaW5rQm94IiwidGl0bGUiLCJ1cmwiLCJ0ZXh0IiwibmV3V2luZG93Q2hlY2siLCJkb3dubG9hZExpbmtDaGVjayIsImJvb2ttYXJrIiwibWF0aEJveCIsImlucHV0TGFiZWwiLCJmb250U2l6ZUxhYmVsIiwicHJldmlld0xhYmVsIiwiaW1hZ2VCb3giLCJmaWxlIiwiYWx0VGV4dCIsInZpZGVvQm94IiwiYXVkaW9Cb3giLCJicm93c2VyIiwidGFncyIsInNlYXJjaCIsImNhcHRpb24iLCJjbG9zZSIsInN1Ym1pdEJ1dHRvbiIsInJldmVydEJ1dHRvbiIsInByb3BvcnRpb24iLCJiYXNpYyIsImxlZnQiLCJyaWdodCIsImNlbnRlciIsIndpZHRoIiwiaGVpZ2h0Iiwic2l6ZSIsInJhdGlvIiwiY29udHJvbGxlciIsImVkaXQiLCJ1bmxpbmsiLCJyZW1vdmUiLCJpbnNlcnRSb3dBYm92ZSIsImluc2VydFJvd0JlbG93IiwiZGVsZXRlUm93IiwiaW5zZXJ0Q29sdW1uQmVmb3JlIiwiaW5zZXJ0Q29sdW1uQWZ0ZXIiLCJkZWxldGVDb2x1bW4iLCJmaXhlZENvbHVtbldpZHRoIiwicmVzaXplMTAwIiwicmVzaXplNzUiLCJyZXNpemU1MCIsInJlc2l6ZTI1IiwiYXV0b1NpemUiLCJtaXJyb3JIb3Jpem9udGFsIiwibWlycm9yVmVydGljYWwiLCJyb3RhdGVMZWZ0Iiwicm90YXRlUmlnaHQiLCJtYXhTaXplIiwibWluU2l6ZSIsInRhYmxlSGVhZGVyIiwibWVyZ2VDZWxscyIsInNwbGl0Q2VsbHMiLCJIb3Jpem9udGFsU3BsaXQiLCJWZXJ0aWNhbFNwbGl0IiwibWVudSIsInNwYWNlZCIsImJvcmRlcmVkIiwibmVvbiIsInRyYW5zbHVjZW50Iiwic2hhZG93IiwidW5kZWZpbmVkIiwiU1VORURJVE9SX0xBTkciLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/es.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/es.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"es\",\n        toolbar: {\n            default: \"Valor por defecto\",\n            save: \"Guardar\",\n            font: \"Fuente\",\n            formats: \"Formato\",\n            fontSize: \"Tama\\xf1o de fuente\",\n            bold: \"Negrita\",\n            underline: \"Subrayado\",\n            italic: \"Cursiva\",\n            strike: \"Tachado\",\n            subscript: \"Sub\\xedndice\",\n            superscript: \"Super\\xedndice\",\n            removeFormat: \"Eliminar formato\",\n            fontColor: \"Color de fuente\",\n            hiliteColor: \"Color de resaltado\",\n            indent: \"M\\xe1s tabulaci\\xf3n\",\n            outdent: \"Menos tabulaci\\xf3n\",\n            align: \"Alinear\",\n            alignLeft: \"Alinear a la izquierda\",\n            alignRight: \"Alinear a la derecha\",\n            alignCenter: \"Alinear al centro\",\n            alignJustify: \"Justificar\",\n            list: \"Lista\",\n            orderList: \"Lista ordenada\",\n            unorderList: \"Lista desordenada\",\n            horizontalRule: \"Horizontal line\",\n            hr_solid: \"L\\xednea horizontal solida\",\n            hr_dotted: \"L\\xednea horizontal punteada\",\n            hr_dashed: \"L\\xednea horizontal discontinua\",\n            table: \"Tabla\",\n            link: \"Link\",\n            math: \"Matem\\xe1ticas\",\n            image: \"Imagen\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Pantalla completa\",\n            showBlocks: \"Ver bloques\",\n            codeView: \"Ver c\\xf3digo fuente\",\n            undo: \"UndoDeshacer \\xfaltima acci\\xf3n\",\n            redo: \"Rehacer \\xfaltima acci\\xf3n\",\n            preview: \"Vista previa\",\n            print: \"Imprimir\",\n            tag_p: \"P\\xe1rrafo\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Header\",\n            tag_blockquote: \"Cita\",\n            tag_pre: \"C\\xf3digo\",\n            template: \"Plantilla\",\n            lineHeight: \"Altura de la l\\xednea\",\n            paragraphStyle: \"Estilo del parrafo\",\n            textStyle: \"Estilo del texto\",\n            imageGallery: \"Galer\\xeda de im\\xe1genes\",\n            dir_ltr: \"De izquierda a derecha\",\n            dir_rtl: \"De derecha a izquierda\",\n            mention: \"Mencionar\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Insertar Link\",\n                url: \"\\xbfHacia que URL lleva el link?\",\n                text: \"Texto para mostrar\",\n                newWindowCheck: \"Abrir en una nueva ventana\",\n                downloadLinkCheck: \"Enlace de descarga\",\n                bookmark: \"Marcador\"\n            },\n            mathBox: {\n                title: \"Matem\\xe1ticas\",\n                inputLabel: \"Notaci\\xf3n Matem\\xe1tica\",\n                fontSizeLabel: \"Tama\\xf1o de fuente\",\n                previewLabel: \"Vista previa\"\n            },\n            imageBox: {\n                title: \"Insertar imagen\",\n                file: \"Seleccionar desde los archivos\",\n                url: \"URL de la imagen\",\n                altText: \"Texto alternativo\"\n            },\n            videoBox: {\n                title: \"Insertar Video\",\n                file: \"Seleccionar desde los archivos\",\n                url: \"\\xbfURL del v\\xeddeo? Youtube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Insertar Audio\",\n                file: \"Seleccionar desde los archivos\",\n                url: \"URL de la audio\"\n            },\n            browser: {\n                tags: \"Etiquetas\",\n                search: \"Buscar\"\n            },\n            caption: \"Insertar descripci\\xf3n\",\n            close: \"Cerrar\",\n            submitButton: \"Enviar\",\n            revertButton: \"revertir\",\n            proportion: \"Restringir las proporciones\",\n            basic: \"Basico\",\n            left: \"Izquierda\",\n            right: \"derecha\",\n            center: \"Centro\",\n            width: \"Ancho\",\n            height: \"Alto\",\n            size: \"Tama\\xf1o\",\n            ratio: \"Proporci\\xf3n\"\n        },\n        controller: {\n            edit: \"Editar\",\n            unlink: \"Desvincular\",\n            remove: \"RemoveQuitar\",\n            insertRowAbove: \"Insertar fila arriba\",\n            insertRowBelow: \"Insertar fila debajo\",\n            deleteRow: \"Eliminar fila\",\n            insertColumnBefore: \"Insertar columna antes\",\n            insertColumnAfter: \"Insertar columna despu\\xe9s\",\n            deleteColumn: \"Eliminar columna\",\n            fixedColumnWidth: \"Ancho de columna fijo\",\n            resize100: \"Redimensionar 100%\",\n            resize75: \"Redimensionar 75%\",\n            resize50: \"Redimensionar 50%\",\n            resize25: \"Redimensionar 25%\",\n            autoSize: \"Tama\\xf1o autom\\xe1tico\",\n            mirrorHorizontal: \"Espejo, Horizontal\",\n            mirrorVertical: \"Espejo, Vertical\",\n            rotateLeft: \"Girar a la izquierda\",\n            rotateRight: \"Girar a la derecha\",\n            maxSize: \"Tama\\xf1o m\\xe1ximo\",\n            minSize: \"Tama\\xf1o min\\xedmo\",\n            tableHeader: \"Encabezado de tabla\",\n            mergeCells: \"Combinar celdas\",\n            splitCells: \"Dividir celdas\",\n            HorizontalSplit: \"Divisi\\xf3n horizontal\",\n            VerticalSplit: \"Divisi\\xf3n vertical\"\n        },\n        menu: {\n            spaced: \"Espaciado\",\n            bordered: \"Bordeado\",\n            neon: \"Ne\\xf3n\",\n            translucent: \"Transl\\xfacido\",\n            shadow: \"Sombreado\",\n            code: \"C\\xf3digo\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"es\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/fr.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/fr.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"fr\",\n        toolbar: {\n            default: \"D\\xe9faut\",\n            save: \"Sauvegarder\",\n            font: \"Police\",\n            formats: \"Formats\",\n            fontSize: \"Taille\",\n            bold: \"Gras\",\n            underline: \"Soulign\\xe9\",\n            italic: \"Italique\",\n            strike: \"Barr\\xe9\",\n            subscript: \"Indice\",\n            superscript: \"Exposant\",\n            removeFormat: \"Effacer le formatage\",\n            fontColor: \"Couleur du texte\",\n            hiliteColor: \"Couleur en arri\\xe8re plan\",\n            indent: \"Indenter\",\n            outdent: \"D\\xe9sindenter\",\n            align: \"Alignement\",\n            alignLeft: \"\\xc0 gauche\",\n            alignRight: \"\\xc0 droite\",\n            alignCenter: \"Centr\\xe9\",\n            alignJustify: \"Justifi\\xe9\",\n            list: \"Liste\",\n            orderList: \"Ordonn\\xe9e\",\n            unorderList: \"Non-ordonn\\xe9e\",\n            horizontalRule: \"Ligne horizontale\",\n            hr_solid: \"Solide\",\n            hr_dotted: \"Points\",\n            hr_dashed: \"Tirets\",\n            table: \"Table\",\n            link: \"Lien\",\n            math: \"Math\",\n            image: \"Image\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Plein \\xe9cran\",\n            showBlocks: \"Voir les blocs\",\n            codeView: \"Voir le code\",\n            undo: \"Annuler\",\n            redo: \"R\\xe9tablir\",\n            preview: \"Pr\\xe9visualiser\",\n            print: \"Imprimer\",\n            tag_p: \"Paragraphe\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Titre\",\n            tag_blockquote: \"Citation\",\n            tag_pre: \"Code\",\n            template: \"Template\",\n            lineHeight: \"Hauteur de la ligne\",\n            paragraphStyle: \"Style de paragraphe\",\n            textStyle: \"Style de texte\",\n            imageGallery: \"Galerie d'images\",\n            dir_ltr: \"De gauche \\xe0 droite\",\n            dir_rtl: \"De droite \\xe0 gauche\",\n            mention: \"Mention\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Ins\\xe9rer un lien\",\n                url: \"Adresse URL du lien\",\n                text: \"Texte \\xe0 afficher\",\n                newWindowCheck: \"Ouvrir dans une nouvelle fen\\xeatre\",\n                downloadLinkCheck: \"Lien de t\\xe9l\\xe9chargement\",\n                bookmark: \"Signet\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Notation math\\xe9matique\",\n                fontSizeLabel: \"Taille\",\n                previewLabel: \"Pr\\xe9visualiser\"\n            },\n            imageBox: {\n                title: \"Ins\\xe9rer une image\",\n                file: \"S\\xe9lectionner le fichier\",\n                url: \"Adresse URL du fichier\",\n                altText: \"Texte Alternatif\"\n            },\n            videoBox: {\n                title: \"Ins\\xe9rer une vid\\xe9o\",\n                file: \"S\\xe9lectionner le fichier\",\n                url: \"URL d’int\\xe9gration du m\\xe9dia, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Ins\\xe9rer un fichier audio\",\n                file: \"S\\xe9lectionner le fichier\",\n                url: \"Adresse URL du fichier\"\n            },\n            browser: {\n                tags: \"Mots cl\\xe9s\",\n                search: \"Chercher\"\n            },\n            caption: \"Ins\\xe9rer une description\",\n            close: \"Fermer\",\n            submitButton: \"Appliquer\",\n            revertButton: \"Revenir en arri\\xe8re\",\n            proportion: \"Maintenir le rapport hauteur/largeur\",\n            basic: \"Basique\",\n            left: \"Gauche\",\n            right: \"Droite\",\n            center: \"Centr\\xe9\",\n            width: \"Largeur\",\n            height: \"Hauteur\",\n            size: \"Taille\",\n            ratio: \"Rapport\"\n        },\n        controller: {\n            edit: \"Modifier\",\n            unlink: \"Supprimer un lien\",\n            remove: \"Effacer\",\n            insertRowAbove: \"Ins\\xe9rer une ligne en dessous\",\n            insertRowBelow: \"Ins\\xe9rer une ligne au dessus\",\n            deleteRow: \"Effacer la ligne\",\n            insertColumnBefore: \"Ins\\xe9rer une colonne avant\",\n            insertColumnAfter: \"Ins\\xe9rer une colonne apr\\xe8s\",\n            deleteColumn: \"Effacer la colonne\",\n            fixedColumnWidth: \"Largeur de colonne fixe\",\n            resize100: \"Redimensionner \\xe0 100%\",\n            resize75: \"Redimensionner \\xe0 75%\",\n            resize50: \"Redimensionner \\xe0 50%\",\n            resize25: \"Redimensionner \\xe0 25%\",\n            autoSize: \"Taille automatique\",\n            mirrorHorizontal: \"Mirroir, Horizontal\",\n            mirrorVertical: \"Mirroir, Vertical\",\n            rotateLeft: \"Rotation \\xe0 gauche\",\n            rotateRight: \"Rotation \\xe0 droite\",\n            maxSize: \"Taille max\",\n            minSize: \"Taille min\",\n            tableHeader: \"En-t\\xeate de table\",\n            mergeCells: \"Fusionner les cellules\",\n            splitCells: \"Diviser les Cellules\",\n            HorizontalSplit: \"Scission horizontale\",\n            VerticalSplit: \"Scission verticale\"\n        },\n        menu: {\n            spaced: \"Espacement\",\n            bordered: \"Ligne de d\\xe9marcation\",\n            neon: \"N\\xe9on\",\n            translucent: \"Translucide\",\n            shadow: \"Ombre\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"fr\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/fr.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/he.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/he.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"he\",\n        toolbar: {\n            default: \"ברירת מחדל\",\n            save: \"שמור\",\n            font: \"גופן\",\n            formats: \"עיצוב\",\n            fontSize: \"גודל\",\n            bold: \"מודגש\",\n            underline: \"קו תחתון\",\n            italic: \"נטוי\",\n            strike: \"קו חוצה\",\n            subscript: \"עילי\",\n            superscript: \"תחתי\",\n            removeFormat: \"הסר עיצוב\",\n            fontColor: \"צבע גופן\",\n            hiliteColor: \"צבע קו תחתון\",\n            indent: \"הגדל כניסה\",\n            outdent: \"הקטן כניסה\",\n            align: \"יישור\",\n            alignLeft: \"יישר לשמאל\",\n            alignRight: \"יישר לימין\",\n            alignCenter: \"מרכז\",\n            alignJustify: \"יישר לשני הצדדים\",\n            list: \"רשימה\",\n            orderList: \"מספור\",\n            unorderList: \"תבליטים\",\n            horizontalRule: \"קו אופקי\",\n            hr_solid: \"קו\",\n            hr_dotted: \"נקודות\",\n            hr_dashed: \"מקפים\",\n            table: \"טבלה\",\n            link: \"קישור\",\n            math: \"מתמטיקה\",\n            image: \"תמונה\",\n            video: \"חוזי\",\n            audio: \"שמע\",\n            fullScreen: \"מסך מלא\",\n            showBlocks: \"הצג גושים\",\n            codeView: \"הצג קוד\",\n            undo: \"בטל\",\n            redo: \"חזור\",\n            preview: \"תצוגה מקדימה\",\n            print: \"הדפס\",\n            tag_p: \"פסקה\",\n            tag_div: \"רגילה (DIV)\",\n            tag_h: \"כותרת\",\n            tag_blockquote: \"ציטוט\",\n            tag_pre: \"קוד\",\n            template: \"תבנית\",\n            lineHeight: \"גובה השורה\",\n            paragraphStyle: \"סגנון פסקה\",\n            textStyle: \"סגנון גופן\",\n            imageGallery: \"גלרית תמונות\",\n            dir_ltr: \"משמאל לימין\",\n            dir_rtl: \"מימין לשמאל\",\n            mention: \"הזכר\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"הכנס קשור\",\n                url: \"כתובת קשור\",\n                text: \"תיאור\",\n                newWindowCheck: \"פתח בחלון חדש\",\n                downloadLinkCheck: \"קישור להורדה\",\n                bookmark: \"סמניה\"\n            },\n            mathBox: {\n                title: \"נוסחה\",\n                inputLabel: \"סימנים מתמטים\",\n                fontSizeLabel: \"גודל גופן\",\n                previewLabel: \"תצוגה מקדימה\"\n            },\n            imageBox: {\n                title: \"הכנס תמונה\",\n                file: \"בחר מקובץ\",\n                url: \"כתובת URL תמונה\",\n                altText: \"תיאור (תגית alt)\"\n            },\n            videoBox: {\n                title: \"הכנס סרטון\",\n                file: \"בחר מקובץ\",\n                url: \"כתובת הטמעה YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"הכנס שמע\",\n                file: \"בחר מקובץ\",\n                url: \"כתובת URL שמע\"\n            },\n            browser: {\n                tags: \"תג\",\n                search: \"חפש\"\n            },\n            caption: \"הכנס תיאור\",\n            close: \"סגור\",\n            submitButton: \"שלח\",\n            revertButton: \"בטל\",\n            proportion: \"שמר יחס\",\n            basic: \"בסיסי\",\n            left: \"שמאל\",\n            right: \"ימין\",\n            center: \"מרכז\",\n            width: \"רוחב\",\n            height: \"גובה\",\n            size: \"גודל\",\n            ratio: \"יחס\"\n        },\n        controller: {\n            edit: \"ערוך\",\n            unlink: \"הסר קישורים\",\n            remove: \"הסר\",\n            insertRowAbove: \"הכנס שורה מעל\",\n            insertRowBelow: \"הכנס שורה מתחת\",\n            deleteRow: \"מחק שורה\",\n            insertColumnBefore: \"הכנס עמודה לפני\",\n            insertColumnAfter: \"הכנס עמודה אחרי\",\n            deleteColumn: \"מחק עמודה\",\n            fixedColumnWidth: \"קבע רוחב עמודות\",\n            resize100: \"ללא הקטנה\",\n            resize75: \"הקטן 75%\",\n            resize50: \"הקטן 50%\",\n            resize25: \"הקטן 25%\",\n            autoSize: \"הקטן אוטומטית\",\n            mirrorHorizontal: \"הפוך לרוחב\",\n            mirrorVertical: \"הפוך לגובה\",\n            rotateLeft: \"סובב שמאלה\",\n            rotateRight: \"סובב ימינה\",\n            maxSize: \"גודל מרבי\",\n            minSize: \"גודל מזערי\",\n            tableHeader: \"כותרת טבלה\",\n            mergeCells: \"מזג תאים\",\n            splitCells: \"פצל תא\",\n            HorizontalSplit: \"פצל לגובה\",\n            VerticalSplit: \"פצל לרוחב\"\n        },\n        menu: {\n            spaced: \"מרווח\",\n            bordered: \"בעל מיתאר\",\n            neon: \"זוהר\",\n            translucent: \"שקוף למחצה\",\n            shadow: \"צל\",\n            code: \"קוד\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"he\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvaGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQyxVQUFVQSxNQUFNLEVBQUVDLE9BQU87SUFDdEIsSUFBSSxLQUFrQixJQUFZLE9BQU9DLE9BQU9DLE9BQU8sS0FBSyxVQUFVO1FBQ2xFRCxPQUFPQyxPQUFPLEdBQUdILE9BQU9JLFFBQVEsR0FDNUJILFFBQVFELFFBQVEsUUFDaEIsU0FBVUssQ0FBQztZQUNQLElBQUksQ0FBQ0EsRUFBRUQsUUFBUSxFQUFFO2dCQUNiLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBLE9BQU9MLFFBQVFJO1FBQ25CO0lBQ1IsT0FBTztRQUNISixRQUFRRDtJQUNaO0FBQ0osR0FBRSxLQUFrQixHQUFjTyxTQUFTLEdBQU0sU0FBVUEsT0FBTSxFQUFFQyxRQUFRO0lBQ3ZFLE1BQU1DLE9BQU87UUFDVEMsTUFBTTtRQUNOQyxTQUFTO1lBQ0xDLFNBQVM7WUFDVEMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxNQUFNO1lBQ05DLFdBQVc7WUFDWEMsUUFBUTtZQUNSQyxRQUFRO1lBQ1JDLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxjQUFjO1lBQ2RDLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxXQUFXO1lBQ1hDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxjQUFjO1lBQ2RDLE1BQU07WUFDTkMsV0FBVztZQUNYQyxhQUFhO1lBQ2JDLGdCQUFnQjtZQUNoQkMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLFdBQVc7WUFDWEMsT0FBTztZQUNQQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLE9BQU87WUFDUEMsWUFBWTtZQUNaQyxZQUFZO1lBQ1pDLFVBQVU7WUFDVkMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxnQkFBZ0I7WUFDaEJDLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxZQUFZO1lBQ1pDLGdCQUFnQjtZQUNoQkMsV0FBVztZQUNYQyxjQUFjO1lBQ2RDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxTQUFTO1FBQ2I7UUFDQUMsV0FBVztZQUNQQyxTQUFTO2dCQUNMQyxPQUFPO2dCQUNQQyxLQUFLO2dCQUNMQyxNQUFNO2dCQUNOQyxnQkFBZ0I7Z0JBQ2hCQyxtQkFBbUI7Z0JBQ25CQyxVQUFVO1lBQ2Q7WUFDQUMsU0FBUztnQkFDTE4sT0FBTztnQkFDUE8sWUFBWTtnQkFDWkMsZUFBZTtnQkFDZkMsY0FBYztZQUNsQjtZQUNBQyxVQUFVO2dCQUNOVixPQUFPO2dCQUNQVyxNQUFNO2dCQUNOVixLQUFLO2dCQUNMVyxTQUFTO1lBQ2I7WUFDQUMsVUFBVTtnQkFDTmIsT0FBTztnQkFDUFcsTUFBTTtnQkFDTlYsS0FBSztZQUNUO1lBQ0FhLFVBQVU7Z0JBQ05kLE9BQU87Z0JBQ1BXLE1BQU07Z0JBQ05WLEtBQUs7WUFDVDtZQUNBYyxTQUFTO2dCQUNMQyxNQUFNO2dCQUNOQyxRQUFRO1lBQ1o7WUFDQUMsU0FBUztZQUNUQyxPQUFPO1lBQ1BDLGNBQWM7WUFDZEMsY0FBYztZQUNkQyxZQUFZO1lBQ1pDLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkMsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLE1BQU07WUFDTkMsT0FBTztRQUNYO1FBQ0FDLFlBQVk7WUFDUkMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLFFBQVE7WUFDUkMsZ0JBQWdCO1lBQ2hCQyxnQkFBZ0I7WUFDaEJDLFdBQVc7WUFDWEMsb0JBQW9CO1lBQ3BCQyxtQkFBbUI7WUFDbkJDLGNBQWM7WUFDZEMsa0JBQWtCO1lBQ2xCQyxXQUFXO1lBQ1hDLFVBQVU7WUFDVkMsVUFBVTtZQUNWQyxVQUFVO1lBQ1ZDLFVBQVU7WUFDVkMsa0JBQWtCO1lBQ2xCQyxnQkFBZ0I7WUFDaEJDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxTQUFTO1lBQ1RDLFNBQVM7WUFDVEMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLFlBQVk7WUFDWkMsaUJBQWlCO1lBQ2pCQyxlQUFlO1FBQ25CO1FBQ0FDLE1BQU07WUFDRkMsUUFBUTtZQUNSQyxVQUFVO1lBQ1ZDLE1BQU07WUFDTkMsYUFBYTtZQUNiQyxRQUFRO1lBQ1J6SCxNQUFNO1FBQ1Y7SUFDSjtJQUVBLElBQUksT0FBT0YsYUFBYSxPQUFPNEgsV0FBVztRQUN0QyxJQUFJLENBQUM3SCxRQUFPOEgsY0FBYyxFQUFFO1lBQ3hCQyxPQUFPQyxjQUFjLENBQUNoSSxTQUFRLGtCQUFrQjtnQkFDNUNpSSxZQUFZO2dCQUNaQyxVQUFVO2dCQUNWQyxjQUFjO2dCQUNkQyxPQUFPLENBQUM7WUFDWjtRQUNKO1FBRUFMLE9BQU9DLGNBQWMsQ0FBQ2hJLFFBQU84SCxjQUFjLEVBQUUsTUFBTTtZQUMvQ0csWUFBWTtZQUNaQyxVQUFVO1lBQ1ZDLGNBQWM7WUFDZEMsT0FBT2xJO1FBQ1g7SUFDSjtJQUVBLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvbGFuZy9oZS5qcz9kYTNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xuICAgICAgICAgICAgICAgIGlmICghdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9MQU5HIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeSh3KTtcbiAgICAgICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShnbG9iYWwpO1xuICAgIH1cbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xuICAgIGNvbnN0IGxhbmcgPSB7XG4gICAgICAgIGNvZGU6ICdoZScsXG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICfXkdeo15nXqNeqINee15fXk9ecJyxcbiAgICAgICAgICAgIHNhdmU6ICfXqdee15XXqCcsXG4gICAgICAgICAgICBmb250OiAn15LXldek158nLFxuICAgICAgICAgICAgZm9ybWF0czogJ9ei15nXpteV15EnLFxuICAgICAgICAgICAgZm9udFNpemU6ICfXkteV15PXnCcsXG4gICAgICAgICAgICBib2xkOiAn157XldeT15LXqScsXG4gICAgICAgICAgICB1bmRlcmxpbmU6ICfXp9eVINeq15fXqteV158nLFxuICAgICAgICAgICAgaXRhbGljOiAn16DXmNeV15knLFxuICAgICAgICAgICAgc3RyaWtlOiAn16fXlSDXl9eV16bXlCcsXG4gICAgICAgICAgICBzdWJzY3JpcHQ6ICfXoteZ15zXmScsXG4gICAgICAgICAgICBzdXBlcnNjcmlwdDogJ9eq15fXqteZJyxcbiAgICAgICAgICAgIHJlbW92ZUZvcm1hdDogJ9eU16HXqCDXoteZ16bXldeRJyxcbiAgICAgICAgICAgIGZvbnRDb2xvcjogJ9em15HXoiDXkteV16TXnycsXG4gICAgICAgICAgICBoaWxpdGVDb2xvcjogJ9em15HXoiDXp9eVINeq15fXqteV158nLFxuICAgICAgICAgICAgaW5kZW50OiAn15TXkteT15wg15vXoNeZ16HXlCcsXG4gICAgICAgICAgICBvdXRkZW50OiAn15TXp9eY158g15vXoNeZ16HXlCcsXG4gICAgICAgICAgICBhbGlnbjogJ9eZ15nXqdeV16gnLFxuICAgICAgICAgICAgYWxpZ25MZWZ0OiAn15nXmdep16gg15zXqdee15DXnCcsXG4gICAgICAgICAgICBhbGlnblJpZ2h0OiAn15nXmdep16gg15zXmdee15nXnycsXG4gICAgICAgICAgICBhbGlnbkNlbnRlcjogJ9ee16jXm9eWJyxcbiAgICAgICAgICAgIGFsaWduSnVzdGlmeTogJ9eZ15nXqdeoINec16nXoNeZINeU16bXk9eT15nXnScsXG4gICAgICAgICAgICBsaXN0OiAn16jXqdeZ157XlCcsXG4gICAgICAgICAgICBvcmRlckxpc3Q6ICfXnteh16TXldeoJyxcbiAgICAgICAgICAgIHVub3JkZXJMaXN0OiAn16rXkdec15nXmNeZ150nLFxuICAgICAgICAgICAgaG9yaXpvbnRhbFJ1bGU6ICfXp9eVINeQ15XXpNen15knLFxuICAgICAgICAgICAgaHJfc29saWQ6ICfXp9eVJyxcbiAgICAgICAgICAgIGhyX2RvdHRlZDogJ9eg16fXldeT15XXqicsXG4gICAgICAgICAgICBocl9kYXNoZWQ6ICfXnten16TXmdedJyxcbiAgICAgICAgICAgIHRhYmxlOiAn15jXkdec15QnLFxuICAgICAgICAgICAgbGluazogJ9en15nXqdeV16gnLFxuICAgICAgICAgICAgbWF0aDogJ9ee16rXnteY15nXp9eUJyxcbiAgICAgICAgICAgIGltYWdlOiAn16rXnteV16DXlCcsXG4gICAgICAgICAgICB2aWRlbzogJ9eX15XXlteZJyxcbiAgICAgICAgICAgIGF1ZGlvOiAn16nXnteiJyxcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46ICfXnteh15og157XnNeQJyxcbiAgICAgICAgICAgIHNob3dCbG9ja3M6ICfXlNem15Ig15LXldep15nXnScsXG4gICAgICAgICAgICBjb2RlVmlldzogJ9eU16bXkiDXp9eV15MnLFxuICAgICAgICAgICAgdW5kbzogJ9eR15jXnCcsXG4gICAgICAgICAgICByZWRvOiAn15fXlteV16gnLFxuICAgICAgICAgICAgcHJldmlldzogJ9eq16bXldeS15Qg157Xp9eT15nXnteUJyxcbiAgICAgICAgICAgIHByaW50OiAn15TXk9ek16EnLFxuICAgICAgICAgICAgdGFnX3A6ICfXpNeh16fXlCcsXG4gICAgICAgICAgICB0YWdfZGl2OiAn16jXkteZ15zXlCAoRElWKScsXG4gICAgICAgICAgICB0YWdfaDogJ9eb15XXqteo16onLFxuICAgICAgICAgICAgdGFnX2Jsb2NrcXVvdGU6ICfXpteZ15jXldeYJyxcbiAgICAgICAgICAgIHRhZ19wcmU6ICfXp9eV15MnLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICfXqteR16DXmdeqJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICfXkteV15HXlCDXlNep15XXqNeUJyxcbiAgICAgICAgICAgIHBhcmFncmFwaFN0eWxlOiAn16HXkteg15XXnyDXpNeh16fXlCcsXG4gICAgICAgICAgICB0ZXh0U3R5bGU6ICfXodeS16DXldefINeS15XXpNefJyxcbiAgICAgICAgICAgIGltYWdlR2FsbGVyeTogJ9eS15zXqNeZ16og16rXnteV16DXldeqJyxcbiAgICAgICAgICAgIGRpcl9sdHI6ICfXntep157XkNecINec15nXnteZ158nLFxuICAgICAgICAgICAgZGlyX3J0bDogJ9ee15nXnteZ158g15zXqdee15DXnCcsXG4gICAgICAgICAgICBtZW50aW9uOiAn15TXlteb16gnXG4gICAgICAgIH0sXG4gICAgICAgIGRpYWxvZ0JveDoge1xuICAgICAgICAgICAgbGlua0JveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAn15TXm9eg16Eg16fXqdeV16gnLFxuICAgICAgICAgICAgICAgIHVybDogJ9eb16rXldeR16og16fXqdeV16gnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICfXqteZ15DXldeoJyxcbiAgICAgICAgICAgICAgICBuZXdXaW5kb3dDaGVjazogJ9ek16rXlyDXkdeX15zXldefINeX15PXqScsXG4gICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rQ2hlY2s6ICfXp9eZ16nXldeoINec15TXldeo15PXlCcsXG4gICAgICAgICAgICAgICAgYm9va21hcms6ICfXodee16DXmdeUJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdGhCb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9eg15XXodeX15QnLFxuICAgICAgICAgICAgICAgIGlucHV0TGFiZWw6ICfXodeZ157XoNeZ150g157Xqtee15jXmdedJyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZUxhYmVsOiAn15LXldeT15wg15LXldek158nLFxuICAgICAgICAgICAgICAgIHByZXZpZXdMYWJlbDogJ9eq16bXldeS15Qg157Xp9eT15nXnteUJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltYWdlQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfXlNeb16DXoSDXqtee15XXoNeUJyxcbiAgICAgICAgICAgICAgICBmaWxlOiAn15HXl9eoINee16fXldeR16UnLFxuICAgICAgICAgICAgICAgIHVybDogJ9eb16rXldeR16ogVVJMINeq157Xldeg15QnLFxuICAgICAgICAgICAgICAgIGFsdFRleHQ6ICfXqteZ15DXldeoICjXqteS15nXqiBhbHQpJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpZGVvQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfXlNeb16DXoSDXodeo15jXldefJyxcbiAgICAgICAgICAgICAgICBmaWxlOiAn15HXl9eoINee16fXldeR16UnLFxuICAgICAgICAgICAgICAgIHVybDogJ9eb16rXldeR16og15TXmNee16LXlCBZb3VUdWJlL1ZpbWVvJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1ZGlvQm94OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfXlNeb16DXoSDXqdee16InLFxuICAgICAgICAgICAgICAgIGZpbGU6ICfXkdeX16gg157Xp9eV15HXpScsXG4gICAgICAgICAgICAgICAgdXJsOiAn15vXqteV15HXqiBVUkwg16nXnteiJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyb3dzZXI6IHtcbiAgICAgICAgICAgICAgICB0YWdzOiAn16rXkicsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiAn15fXpNepJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0aW9uOiAn15TXm9eg16Eg16rXmdeQ15XXqCcsXG4gICAgICAgICAgICBjbG9zZTogJ9eh15LXldeoJyxcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbjogJ9ep15zXlycsXG4gICAgICAgICAgICByZXZlcnRCdXR0b246ICfXkdeY15wnLFxuICAgICAgICAgICAgcHJvcG9ydGlvbjogJ9ep157XqCDXmdeX16EnLFxuICAgICAgICAgICAgYmFzaWM6ICfXkdeh15nXodeZJyxcbiAgICAgICAgICAgIGxlZnQ6ICfXqdee15DXnCcsXG4gICAgICAgICAgICByaWdodDogJ9eZ157XmdefJyxcbiAgICAgICAgICAgIGNlbnRlcjogJ9ee16jXm9eWJyxcbiAgICAgICAgICAgIHdpZHRoOiAn16jXldeX15EnLFxuICAgICAgICAgICAgaGVpZ2h0OiAn15LXldeR15QnLFxuICAgICAgICAgICAgc2l6ZTogJ9eS15XXk9ecJyxcbiAgICAgICAgICAgIHJhdGlvOiAn15nXl9ehJ1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgICAgICBlZGl0OiAn16LXqNeV15onLFxuICAgICAgICAgICAgdW5saW5rOiAn15TXodeoINen15nXqdeV16jXmdedJyxcbiAgICAgICAgICAgIHJlbW92ZTogJ9eU16HXqCcsXG4gICAgICAgICAgICBpbnNlcnRSb3dBYm92ZTogJ9eU15vXoNehINep15XXqNeUINee16LXnCcsXG4gICAgICAgICAgICBpbnNlcnRSb3dCZWxvdzogJ9eU15vXoNehINep15XXqNeUINee16rXl9eqJyxcbiAgICAgICAgICAgIGRlbGV0ZVJvdzogJ9ee15fXpyDXqdeV16jXlCcsXG4gICAgICAgICAgICBpbnNlcnRDb2x1bW5CZWZvcmU6ICfXlNeb16DXoSDXotee15XXk9eUINec16TXoNeZJyxcbiAgICAgICAgICAgIGluc2VydENvbHVtbkFmdGVyOiAn15TXm9eg16Eg16LXnteV15PXlCDXkNeX16jXmScsXG4gICAgICAgICAgICBkZWxldGVDb2x1bW46ICfXnteX16cg16LXnteV15PXlCcsXG4gICAgICAgICAgICBmaXhlZENvbHVtbldpZHRoOiAn16fXkdeiINeo15XXl9eRINei157XldeT15XXqicsXG4gICAgICAgICAgICByZXNpemUxMDA6ICfXnNec15Ag15TXp9eY16DXlCcsXG4gICAgICAgICAgICByZXNpemU3NTogJ9eU16fXmNefIDc1JScsXG4gICAgICAgICAgICByZXNpemU1MDogJ9eU16fXmNefIDUwJScsXG4gICAgICAgICAgICByZXNpemUyNTogJ9eU16fXmNefIDI1JScsXG4gICAgICAgICAgICBhdXRvU2l6ZTogJ9eU16fXmNefINeQ15XXmNeV157XmNeZ16onLFxuICAgICAgICAgICAgbWlycm9ySG9yaXpvbnRhbDogJ9eU16TXldeaINec16jXldeX15EnLFxuICAgICAgICAgICAgbWlycm9yVmVydGljYWw6ICfXlNek15XXmiDXnNeS15XXkdeUJyxcbiAgICAgICAgICAgIHJvdGF0ZUxlZnQ6ICfXodeV15HXkSDXqdee15DXnNeUJyxcbiAgICAgICAgICAgIHJvdGF0ZVJpZ2h0OiAn16HXldeR15Eg15nXnteZ16DXlCcsXG4gICAgICAgICAgICBtYXhTaXplOiAn15LXldeT15wg157XqNeR15knLFxuICAgICAgICAgICAgbWluU2l6ZTogJ9eS15XXk9ecINee15bXoteo15knLFxuICAgICAgICAgICAgdGFibGVIZWFkZXI6ICfXm9eV16rXqNeqINeY15HXnNeUJyxcbiAgICAgICAgICAgIG1lcmdlQ2VsbHM6ICfXnteW15Ig16rXkNeZ150nLFxuICAgICAgICAgICAgc3BsaXRDZWxsczogJ9ek16bXnCDXqteQJyxcbiAgICAgICAgICAgIEhvcml6b250YWxTcGxpdDogJ9ek16bXnCDXnNeS15XXkdeUJyxcbiAgICAgICAgICAgIFZlcnRpY2FsU3BsaXQ6ICfXpNem15wg15zXqNeV15fXkSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVudToge1xuICAgICAgICAgICAgc3BhY2VkOiAn157XqNeV15XXlycsXG4gICAgICAgICAgICBib3JkZXJlZDogJ9eR16LXnCDXnteZ16rXkNeoJyxcbiAgICAgICAgICAgIG5lb246ICfXlteV15TXqCcsXG4gICAgICAgICAgICB0cmFuc2x1Y2VudDogJ9ep16fXldejINec157Xl9em15QnLFxuICAgICAgICAgICAgc2hhZG93OiAn16bXnCcsXG4gICAgICAgICAgICBjb2RlOiAn16fXldeTJ1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygbm9HbG9iYWwgPT09IHR5cGVvZiB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCF3aW5kb3cuU1VORURJVE9SX0xBTkcpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdTVU5FRElUT1JfTEFORycsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlNVTkVESVRPUl9MQU5HLCAnaGUnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbGFuZ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGFuZztcbn0pKTtcbiJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJsYW5nIiwiY29kZSIsInRvb2xiYXIiLCJkZWZhdWx0Iiwic2F2ZSIsImZvbnQiLCJmb3JtYXRzIiwiZm9udFNpemUiLCJib2xkIiwidW5kZXJsaW5lIiwiaXRhbGljIiwic3RyaWtlIiwic3Vic2NyaXB0Iiwic3VwZXJzY3JpcHQiLCJyZW1vdmVGb3JtYXQiLCJmb250Q29sb3IiLCJoaWxpdGVDb2xvciIsImluZGVudCIsIm91dGRlbnQiLCJhbGlnbiIsImFsaWduTGVmdCIsImFsaWduUmlnaHQiLCJhbGlnbkNlbnRlciIsImFsaWduSnVzdGlmeSIsImxpc3QiLCJvcmRlckxpc3QiLCJ1bm9yZGVyTGlzdCIsImhvcml6b250YWxSdWxlIiwiaHJfc29saWQiLCJocl9kb3R0ZWQiLCJocl9kYXNoZWQiLCJ0YWJsZSIsImxpbmsiLCJtYXRoIiwiaW1hZ2UiLCJ2aWRlbyIsImF1ZGlvIiwiZnVsbFNjcmVlbiIsInNob3dCbG9ja3MiLCJjb2RlVmlldyIsInVuZG8iLCJyZWRvIiwicHJldmlldyIsInByaW50IiwidGFnX3AiLCJ0YWdfZGl2IiwidGFnX2giLCJ0YWdfYmxvY2txdW90ZSIsInRhZ19wcmUiLCJ0ZW1wbGF0ZSIsImxpbmVIZWlnaHQiLCJwYXJhZ3JhcGhTdHlsZSIsInRleHRTdHlsZSIsImltYWdlR2FsbGVyeSIsImRpcl9sdHIiLCJkaXJfcnRsIiwibWVudGlvbiIsImRpYWxvZ0JveCIsImxpbmtCb3giLCJ0aXRsZSIsInVybCIsInRleHQiLCJuZXdXaW5kb3dDaGVjayIsImRvd25sb2FkTGlua0NoZWNrIiwiYm9va21hcmsiLCJtYXRoQm94IiwiaW5wdXRMYWJlbCIsImZvbnRTaXplTGFiZWwiLCJwcmV2aWV3TGFiZWwiLCJpbWFnZUJveCIsImZpbGUiLCJhbHRUZXh0IiwidmlkZW9Cb3giLCJhdWRpb0JveCIsImJyb3dzZXIiLCJ0YWdzIiwic2VhcmNoIiwiY2FwdGlvbiIsImNsb3NlIiwic3VibWl0QnV0dG9uIiwicmV2ZXJ0QnV0dG9uIiwicHJvcG9ydGlvbiIsImJhc2ljIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyIiwid2lkdGgiLCJoZWlnaHQiLCJzaXplIiwicmF0aW8iLCJjb250cm9sbGVyIiwiZWRpdCIsInVubGluayIsInJlbW92ZSIsImluc2VydFJvd0Fib3ZlIiwiaW5zZXJ0Um93QmVsb3ciLCJkZWxldGVSb3ciLCJpbnNlcnRDb2x1bW5CZWZvcmUiLCJpbnNlcnRDb2x1bW5BZnRlciIsImRlbGV0ZUNvbHVtbiIsImZpeGVkQ29sdW1uV2lkdGgiLCJyZXNpemUxMDAiLCJyZXNpemU3NSIsInJlc2l6ZTUwIiwicmVzaXplMjUiLCJhdXRvU2l6ZSIsIm1pcnJvckhvcml6b250YWwiLCJtaXJyb3JWZXJ0aWNhbCIsInJvdGF0ZUxlZnQiLCJyb3RhdGVSaWdodCIsIm1heFNpemUiLCJtaW5TaXplIiwidGFibGVIZWFkZXIiLCJtZXJnZUNlbGxzIiwic3BsaXRDZWxscyIsIkhvcml6b250YWxTcGxpdCIsIlZlcnRpY2FsU3BsaXQiLCJtZW51Iiwic3BhY2VkIiwiYm9yZGVyZWQiLCJuZW9uIiwidHJhbnNsdWNlbnQiLCJzaGFkb3ciLCJ1bmRlZmluZWQiLCJTVU5FRElUT1JfTEFORyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/he.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/index.js":
/*!**************************************************!*\
  !*** ./node_modules/suneditor/src/lang/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ckb: function() { return /* reexport default from dynamic */ _ckb__WEBPACK_IMPORTED_MODULE_0___default.a; },\n/* harmony export */   cs: function() { return /* reexport default from dynamic */ _cs__WEBPACK_IMPORTED_MODULE_1___default.a; },\n/* harmony export */   da: function() { return /* reexport default from dynamic */ _da__WEBPACK_IMPORTED_MODULE_2___default.a; },\n/* harmony export */   de: function() { return /* reexport default from dynamic */ _de__WEBPACK_IMPORTED_MODULE_3___default.a; },\n/* harmony export */   en: function() { return /* reexport default from dynamic */ _en__WEBPACK_IMPORTED_MODULE_4___default.a; },\n/* harmony export */   es: function() { return /* reexport default from dynamic */ _es__WEBPACK_IMPORTED_MODULE_5___default.a; },\n/* harmony export */   fr: function() { return /* reexport default from dynamic */ _fr__WEBPACK_IMPORTED_MODULE_6___default.a; },\n/* harmony export */   he: function() { return /* reexport default from dynamic */ _he__WEBPACK_IMPORTED_MODULE_7___default.a; },\n/* harmony export */   it: function() { return /* reexport default from dynamic */ _it__WEBPACK_IMPORTED_MODULE_8___default.a; },\n/* harmony export */   ja: function() { return /* reexport default from dynamic */ _ja__WEBPACK_IMPORTED_MODULE_9___default.a; },\n/* harmony export */   ko: function() { return /* reexport default from dynamic */ _ko__WEBPACK_IMPORTED_MODULE_10___default.a; },\n/* harmony export */   lv: function() { return /* reexport default from dynamic */ _lv__WEBPACK_IMPORTED_MODULE_11___default.a; },\n/* harmony export */   nl: function() { return /* reexport default from dynamic */ _nl__WEBPACK_IMPORTED_MODULE_12___default.a; },\n/* harmony export */   pl: function() { return /* reexport default from dynamic */ _pl__WEBPACK_IMPORTED_MODULE_13___default.a; },\n/* harmony export */   pt_br: function() { return /* reexport default from dynamic */ _pt_br__WEBPACK_IMPORTED_MODULE_14___default.a; },\n/* harmony export */   ro: function() { return /* reexport default from dynamic */ _ro__WEBPACK_IMPORTED_MODULE_15___default.a; },\n/* harmony export */   ru: function() { return /* reexport default from dynamic */ _ru__WEBPACK_IMPORTED_MODULE_16___default.a; },\n/* harmony export */   se: function() { return /* reexport default from dynamic */ _se__WEBPACK_IMPORTED_MODULE_17___default.a; },\n/* harmony export */   ua: function() { return /* reexport default from dynamic */ _ua__WEBPACK_IMPORTED_MODULE_18___default.a; },\n/* harmony export */   ur: function() { return /* reexport default from dynamic */ _ur__WEBPACK_IMPORTED_MODULE_19___default.a; },\n/* harmony export */   zh_cn: function() { return /* reexport default from dynamic */ _zh_cn__WEBPACK_IMPORTED_MODULE_20___default.a; }\n/* harmony export */ });\n/* harmony import */ var _ckb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ckb */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ckb.js\");\n/* harmony import */ var _ckb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ckb__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cs */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/cs.js\");\n/* harmony import */ var _cs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _da__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./da */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/da.js\");\n/* harmony import */ var _da__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_da__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _de__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./de */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/de.js\");\n/* harmony import */ var _de__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_de__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./en */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/en.js\");\n/* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_en__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _es__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./es */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/es.js\");\n/* harmony import */ var _es__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_es__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _fr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fr */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/fr.js\");\n/* harmony import */ var _fr__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_fr__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _he__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./he */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/he.js\");\n/* harmony import */ var _he__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_he__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _it__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./it */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/it.js\");\n/* harmony import */ var _it__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_it__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _ja__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ja */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ja.js\");\n/* harmony import */ var _ja__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_ja__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _ko__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ko */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ko.js\");\n/* harmony import */ var _ko__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_ko__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _lv__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lv */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/lv.js\");\n/* harmony import */ var _lv__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_lv__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _nl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./nl */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/nl.js\");\n/* harmony import */ var _nl__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_nl__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _pl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./pl */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/pl.js\");\n/* harmony import */ var _pl__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_pl__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _pt_br__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pt_br */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/pt_br.js\");\n/* harmony import */ var _pt_br__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_pt_br__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _ro__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ro */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ro.js\");\n/* harmony import */ var _ro__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_ro__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _ru__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ru */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ru.js\");\n/* harmony import */ var _ru__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_ru__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _se__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./se */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/se.js\");\n/* harmony import */ var _se__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_se__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _ua__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ua */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ua.js\");\n/* harmony import */ var _ua__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_ua__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _ur__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ur */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/ur.js\");\n/* harmony import */ var _ur__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_ur__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _zh_cn__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./zh_cn */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/zh_cn.js\");\n/* harmony import */ var _zh_cn__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_zh_cn__WEBPACK_IMPORTED_MODULE_20__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    ckb: (_ckb__WEBPACK_IMPORTED_MODULE_0___default()),\n    cs: (_cs__WEBPACK_IMPORTED_MODULE_1___default()),\n    da: (_da__WEBPACK_IMPORTED_MODULE_2___default()),\n    de: (_de__WEBPACK_IMPORTED_MODULE_3___default()),\n    en: (_en__WEBPACK_IMPORTED_MODULE_4___default()),\n    es: (_es__WEBPACK_IMPORTED_MODULE_5___default()),\n    fr: (_fr__WEBPACK_IMPORTED_MODULE_6___default()),\n    he: (_he__WEBPACK_IMPORTED_MODULE_7___default()),\n    it: (_it__WEBPACK_IMPORTED_MODULE_8___default()),\n    ja: (_ja__WEBPACK_IMPORTED_MODULE_9___default()),\n    ko: (_ko__WEBPACK_IMPORTED_MODULE_10___default()),\n    lv: (_lv__WEBPACK_IMPORTED_MODULE_11___default()),\n    nl: (_nl__WEBPACK_IMPORTED_MODULE_12___default()),\n    pl: (_pl__WEBPACK_IMPORTED_MODULE_13___default()),\n    pt_br: (_pt_br__WEBPACK_IMPORTED_MODULE_14___default()),\n    ro: (_ro__WEBPACK_IMPORTED_MODULE_15___default()),\n    ru: (_ru__WEBPACK_IMPORTED_MODULE_16___default()),\n    se: (_se__WEBPACK_IMPORTED_MODULE_17___default()),\n    ua: (_ua__WEBPACK_IMPORTED_MODULE_18___default()),\n    ur: (_ur__WEBPACK_IMPORTED_MODULE_19___default()),\n    zh_cn: (_zh_cn__WEBPACK_IMPORTED_MODULE_20___default())\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFd0I7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNNO0FBRXlFO0FBQ3JHLCtEQUFlO0lBQUVBLEdBQUdBLCtDQUFBQTtJQUFFQyxFQUFFQSw4Q0FBQUE7SUFBRUMsRUFBRUEsOENBQUFBO0lBQUVDLEVBQUVBLDhDQUFBQTtJQUFFQyxFQUFFQSw4Q0FBQUE7SUFBRUMsRUFBRUEsOENBQUFBO0lBQUVDLEVBQUVBLDhDQUFBQTtJQUFFQyxFQUFFQSw4Q0FBQUE7SUFBRUMsRUFBRUEsOENBQUFBO0lBQUVDLEVBQUVBLDhDQUFBQTtJQUFFQyxFQUFFQSwrQ0FBQUE7SUFBRUMsRUFBRUEsK0NBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxFQUFFQSwrQ0FBQUE7SUFBRUMsS0FBS0Esa0RBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxFQUFFQSwrQ0FBQUE7SUFBRUMsRUFBRUEsK0NBQUFBO0lBQUVDLEVBQUVBLCtDQUFBQTtJQUFFQyxFQUFFQSwrQ0FBQUE7SUFBRUMsS0FBS0Esa0RBQUFBO0FBQUMsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvaW5kZXguanM/MDQ5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBja2IgZnJvbSAnLi9ja2InO1xuaW1wb3J0IGNzIGZyb20gJy4vY3MnO1xuaW1wb3J0IGRhIGZyb20gJy4vZGEnO1xuaW1wb3J0IGRlIGZyb20gJy4vZGUnO1xuaW1wb3J0IGVuIGZyb20gJy4vZW4nO1xuaW1wb3J0IGVzIGZyb20gJy4vZXMnO1xuaW1wb3J0IGZyIGZyb20gJy4vZnInO1xuaW1wb3J0IGhlIGZyb20gJy4vaGUnO1xuaW1wb3J0IGl0IGZyb20gJy4vaXQnO1xuaW1wb3J0IGphIGZyb20gJy4vamEnO1xuaW1wb3J0IGtvIGZyb20gJy4va28nO1xuaW1wb3J0IGx2IGZyb20gJy4vbHYnO1xuaW1wb3J0IG5sIGZyb20gJy4vbmwnO1xuaW1wb3J0IHBsIGZyb20gJy4vcGwnO1xuaW1wb3J0IHB0X2JyIGZyb20gJy4vcHRfYnInO1xuaW1wb3J0IHJvIGZyb20gJy4vcm8nO1xuaW1wb3J0IHJ1IGZyb20gJy4vcnUnO1xuaW1wb3J0IHNlIGZyb20gJy4vc2UnO1xuaW1wb3J0IHVhIGZyb20gJy4vdWEnO1xuaW1wb3J0IHVyIGZyb20gJy4vdXInO1xuaW1wb3J0IHpoX2NuIGZyb20gJy4vemhfY24nO1xuXG5leHBvcnQgeyBja2IsIGNzLCBkYSwgZGUsIGVuLCBlcywgZnIsIGhlLCBpdCwgamEsIGtvLCBsdiwgbmwsIHBsLCBwdF9iciwgcm8sIHJ1LCBzZSwgdWEsIHVyLCB6aF9jbiB9O1xuZXhwb3J0IGRlZmF1bHQgeyBja2IsIGNzLCBkYSwgZGUsIGVuLCBlcywgZnIsIGhlLCBpdCwgamEsIGtvLCBsdiwgbmwsIHBsLCBwdF9iciwgcm8sIHJ1LCBzZSwgdWEsIHVyLCB6aF9jbiB9O1xuIl0sIm5hbWVzIjpbImNrYiIsImNzIiwiZGEiLCJkZSIsImVuIiwiZXMiLCJmciIsImhlIiwiaXQiLCJqYSIsImtvIiwibHYiLCJubCIsInBsIiwicHRfYnIiLCJybyIsInJ1Iiwic2UiLCJ1YSIsInVyIiwiemhfY24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/it.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/it.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG una finestra con un documento\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"it\",\n        toolbar: {\n            default: \"Predefinita\",\n            save: \"Salva\",\n            font: \"Font\",\n            formats: \"Formato\",\n            fontSize: \"Grandezza\",\n            bold: \"Grassetto\",\n            underline: \"Sottolineato\",\n            italic: \"Corsivo\",\n            strike: \"Barrato\",\n            subscript: \"Apice\",\n            superscript: \"Pedice\",\n            removeFormat: \"Rimuovi formattazione\",\n            fontColor: \"Colore testo\",\n            hiliteColor: \"Colore sottolineatura\",\n            indent: \"Aumenta rientro\",\n            outdent: \"Riduci rientro\",\n            align: \"Allinea\",\n            alignLeft: \"Allinea a sinistra\",\n            alignRight: \"Allinea a destra\",\n            alignCenter: \"Allinea al centro\",\n            alignJustify: \"Giustifica testo\",\n            list: \"Elenco\",\n            orderList: \"Elenco numerato\",\n            unorderList: \"Elenco puntato\",\n            horizontalRule: \"Linea orizzontale\",\n            hr_solid: \"Linea continua\",\n            hr_dotted: \"Puntini\",\n            hr_dashed: \"Trattini\",\n            table: \"Tabella\",\n            link: \"Collegamento ipertestuale\",\n            math: \"Formula matematica\",\n            image: \"Immagine\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"A tutto schermo\",\n            showBlocks: \"Visualizza blocchi\",\n            codeView: \"Visualizza codice\",\n            undo: \"Annulla\",\n            redo: \"Ripristina\",\n            preview: \"Anteprima\",\n            print: \"Stampa\",\n            tag_p: \"Paragrafo\",\n            tag_div: \"Normale (DIV)\",\n            tag_h: \"Titolo\",\n            tag_blockquote: \"Citazione\",\n            tag_pre: \"Codice\",\n            template: \"Modello\",\n            lineHeight: \"Interlinea\",\n            paragraphStyle: \"Stile paragrafo\",\n            textStyle: \"Stile testo\",\n            imageGallery: \"Galleria di immagini\",\n            dir_ltr: \"Da sinistra a destra\",\n            dir_rtl: \"Da destra a sinistra\",\n            mention: \"Menzione\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inserisci un link\",\n                url: \"Indirizzo\",\n                text: \"Testo da visualizzare\",\n                newWindowCheck: \"Apri in una nuova finestra\",\n                downloadLinkCheck: \"Link per scaricare\",\n                bookmark: \"Segnalibro\"\n            },\n            mathBox: {\n                title: \"Matematica\",\n                inputLabel: \"Notazione matematica\",\n                fontSizeLabel: \"Grandezza testo\",\n                previewLabel: \"Anteprima\"\n            },\n            imageBox: {\n                title: \"Inserisci immagine\",\n                file: \"Seleziona da file\",\n                url: \"Indirizzo immagine\",\n                altText: \"Testo alternativo (ALT)\"\n            },\n            videoBox: {\n                title: \"Inserisci video\",\n                file: \"Seleziona da file\",\n                url: \"Indirizzo video di embed, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Inserisci audio\",\n                file: \"Seleziona da file\",\n                url: \"Indirizzo audio\"\n            },\n            browser: {\n                tags: \"tag\",\n                search: \"Ricerca\"\n            },\n            caption: \"Inserisci didascalia\",\n            close: \"Chiudi\",\n            submitButton: \"Invia\",\n            revertButton: \"Annulla\",\n            proportion: \"Proporzionale\",\n            basic: \"Da impostazione\",\n            left: \"Sinistra\",\n            right: \"Destra\",\n            center: \"Centrato\",\n            width: \"Larghezza\",\n            height: \"Altezza\",\n            size: \"Dimensioni\",\n            ratio: \"Rapporto\"\n        },\n        controller: {\n            edit: \"Modifica\",\n            unlink: \"Elimina link\",\n            remove: \"Rimuovi\",\n            insertRowAbove: \"Inserisci riga sopra\",\n            insertRowBelow: \"Inserisci riga sotto\",\n            deleteRow: \"Cancella riga\",\n            insertColumnBefore: \"Inserisci colonna prima\",\n            insertColumnAfter: \"Inserisci colonna dopo\",\n            deleteColumn: \"Cancella colonna\",\n            fixedColumnWidth: \"Larghezza delle colonne fissa\",\n            resize100: \"Ridimensiona 100%\",\n            resize75: \"Ridimensiona 75%\",\n            resize50: \"Ridimensiona 50%\",\n            resize25: \"Ridimensiona 25%\",\n            autoSize: \"Ridimensione automatica\",\n            mirrorHorizontal: \"Capovolgi orizzontalmente\",\n            mirrorVertical: \"Capovolgi verticalmente\",\n            rotateLeft: \"Ruota a sinistra\",\n            rotateRight: \"Ruota a destra\",\n            maxSize: \"Dimensione massima\",\n            minSize: \"Dimensione minima\",\n            tableHeader: \"Intestazione tabella\",\n            mergeCells: \"Unisci celle\",\n            splitCells: \"Dividi celle\",\n            HorizontalSplit: \"Separa orizontalmente\",\n            VerticalSplit: \"Separa verticalmente\"\n        },\n        menu: {\n            spaced: \"Spaziato\",\n            bordered: \"Bordato\",\n            neon: \"Luminoso\",\n            translucent: \"Traslucido\",\n            shadow: \"Ombra\",\n            code: \"Codice\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"it\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/it.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ja.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ja.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ja\",\n        toolbar: {\n            default: \"デフォルト\",\n            save: \"保存\",\n            font: \"フォント\",\n            formats: \"段落形式\",\n            fontSize: \"サイズ\",\n            bold: \"太字\",\n            underline: \"下線\",\n            italic: \"イタリック\",\n            strike: \"取り消し線\",\n            subscript: \"下付き\",\n            superscript: \"上付き\",\n            removeFormat: \"形式を削除\",\n            fontColor: \"文字色\",\n            hiliteColor: \"文字の背景色\",\n            indent: \"インデント\",\n            outdent: \"インデント\",\n            align: \"ソート\",\n            alignLeft: \"左揃え\",\n            alignRight: \"右揃え\",\n            alignCenter: \"中央揃え\",\n            alignJustify: \"両端揃え\",\n            list: \"リスト\",\n            orderList: \"数値ブリット\",\n            unorderList: \"円形ブリット\",\n            horizontalRule: \"水平線を挿入\",\n            hr_solid: \"実線\",\n            hr_dotted: \"点線\",\n            hr_dashed: \"ダッシュ\",\n            table: \"テーブル\",\n            link: \"リンク\",\n            math: \"数学\",\n            image: \"画像\",\n            video: \"動画\",\n            audio: \"オーディオ\",\n            fullScreen: \"フルスクリーン\",\n            showBlocks: \"ブロック表示\",\n            codeView: \"HTMLの編集\",\n            undo: \"元に戻す\",\n            redo: \"再実行\",\n            preview: \"プレビュー\",\n            print: \"印刷\",\n            tag_p: \"本文\",\n            tag_div: \"基本（DIV）\",\n            tag_h: \"タイトル\",\n            tag_blockquote: \"引用\",\n            tag_pre: \"コード\",\n            template: \"テンプレート\",\n            lineHeight: \"行の高さ\",\n            paragraphStyle: \"段落スタイル\",\n            textStyle: \"テキストスタイル\",\n            imageGallery: \"イメージギャラリー\",\n            dir_ltr: \"左から右へ\",\n            dir_rtl: \"右から左に\",\n            mention: \"言及する\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"リンクの挿入\",\n                url: \"インターネットアドレス\",\n                text: \"画面のテキスト\",\n                newWindowCheck: \"別ウィンドウで開く\",\n                downloadLinkCheck: \"ダウンロードリンク\",\n                bookmark: \"ブックマーク\"\n            },\n            mathBox: {\n                title: \"数学\",\n                inputLabel: \"数学表記\",\n                fontSizeLabel: \"サイズ\",\n                previewLabel: \"プレビュー\"\n            },\n            imageBox: {\n                title: \"画像の挿入\",\n                file: \"ファイルの選択\",\n                url: \"イメージアドレス\",\n                altText: \"置換文字列\"\n            },\n            videoBox: {\n                title: \"動画を挿入\",\n                file: \"ファイルの選択\",\n                url: \"メディア埋め込みアドレス, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"オーディオを挿入\",\n                file: \"ファイルの選択\",\n                url: \"オーディオアドレス\"\n            },\n            browser: {\n                tags: \"タグ\",\n                search: \"探す\"\n            },\n            caption: \"説明付け\",\n            close: \"閉じる\",\n            submitButton: \"確認\",\n            revertButton: \"元に戻す\",\n            proportion: \"の割合カスタマイズ\",\n            basic: \"基本\",\n            left: \"左\",\n            right: \"右\",\n            center: \"中央\",\n            width: \"横\",\n            height: \"縦\",\n            size: \"サイズ\",\n            ratio: \"比率\"\n        },\n        controller: {\n            edit: \"編集\",\n            unlink: \"リンク解除\",\n            remove: \"削除\",\n            insertRowAbove: \"上に行を挿入\",\n            insertRowBelow: \"下に行を挿入\",\n            deleteRow: \"行の削除\",\n            insertColumnBefore: \"左に列を挿入\",\n            insertColumnAfter: \"右に列を挿入\",\n            deleteColumn: \"列を削除する\",\n            fixedColumnWidth: \"固定列幅\",\n            resize100: \"100％ サイズ\",\n            resize75: \"75％ サイズ\",\n            resize50: \"50％ サイズ\",\n            resize25: \"25％ サイズ\",\n            autoSize: \"自動サイズ\",\n            mirrorHorizontal: \"左右反転\",\n            mirrorVertical: \"上下反転\",\n            rotateLeft: \"左に回転\",\n            rotateRight: \"右に回転\",\n            maxSize: \"最大サイズ\",\n            minSize: \"最小サイズ\",\n            tableHeader: \"表のヘッダー\",\n            mergeCells: \"セルの結合\",\n            splitCells: \"セルを分割\",\n            HorizontalSplit: \"横分割\",\n            VerticalSplit: \"垂直分割\"\n        },\n        menu: {\n            spaced: \"文字間隔\",\n            bordered: \"境界線\",\n            neon: \"ネオン\",\n            translucent: \"半透明\",\n            shadow: \"影\",\n            code: \"コード\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ja\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ja.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ko.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ko.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ko\",\n        toolbar: {\n            default: \"기본값\",\n            save: \"저장\",\n            font: \"글꼴\",\n            formats: \"문단 형식\",\n            fontSize: \"크기\",\n            bold: \"굵게\",\n            underline: \"밑줄\",\n            italic: \"기울임\",\n            strike: \"취소선\",\n            subscript: \"아래 첨자\",\n            superscript: \"위 첨자\",\n            removeFormat: \"형식 제거\",\n            fontColor: \"글자색\",\n            hiliteColor: \"배경색\",\n            indent: \"들여쓰기\",\n            outdent: \"내어쓰기\",\n            align: \"정렬\",\n            alignLeft: \"왼쪽 정렬\",\n            alignRight: \"오른쪽 정렬\",\n            alignCenter: \"가운데 정렬\",\n            alignJustify: \"양쪽 정렬\",\n            list: \"리스트\",\n            orderList: \"숫자형 리스트\",\n            unorderList: \"원형 리스트\",\n            horizontalRule: \"가로 줄 삽입\",\n            hr_solid: \"실선\",\n            hr_dotted: \"점선\",\n            hr_dashed: \"대시\",\n            table: \"테이블\",\n            link: \"링크\",\n            math: \"수식\",\n            image: \"이미지\",\n            video: \"동영상\",\n            audio: \"오디오\",\n            fullScreen: \"전체 화면\",\n            showBlocks: \"블록 보기\",\n            codeView: \"HTML 편집\",\n            undo: \"실행 취소\",\n            redo: \"다시 실행\",\n            preview: \"미리보기\",\n            print: \"인쇄\",\n            tag_p: \"본문\",\n            tag_div: \"기본 (DIV)\",\n            tag_h: \"제목\",\n            tag_blockquote: \"인용문\",\n            tag_pre: \"코드\",\n            template: \"템플릿\",\n            lineHeight: \"줄 높이\",\n            paragraphStyle: \"문단 스타일\",\n            textStyle: \"글자 스타일\",\n            imageGallery: \"이미지 갤러리\",\n            dir_ltr: \"왼쪽에서 오른쪽\",\n            dir_rtl: \"오른쪽에서 왼쪽\",\n            mention: \"멘션\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"링크 삽입\",\n                url: \"인터넷 주소\",\n                text: \"화면 텍스트\",\n                newWindowCheck: \"새창으로 열기\",\n                downloadLinkCheck: \"다운로드 링크\",\n                bookmark: \"북마크\"\n            },\n            mathBox: {\n                title: \"수식\",\n                inputLabel: \"수학적 표기법\",\n                fontSizeLabel: \"글자 크기\",\n                previewLabel: \"미리보기\"\n            },\n            imageBox: {\n                title: \"이미지 삽입\",\n                file: \"파일 선택\",\n                url: \"이미지 주소\",\n                altText: \"대체 문자열\"\n            },\n            videoBox: {\n                title: \"동영상 삽입\",\n                file: \"파일 선택\",\n                url: \"미디어 임베드 주소, 유튜브/비메오\"\n            },\n            audioBox: {\n                title: \"오디오 삽입\",\n                file: \"파일 선택\",\n                url: \"오디오 파일 주소\"\n            },\n            browser: {\n                tags: \"태그\",\n                search: \"검색\"\n            },\n            caption: \"설명 넣기\",\n            close: \"닫기\",\n            submitButton: \"확인\",\n            revertButton: \"되돌리기\",\n            proportion: \"비율 맞춤\",\n            basic: \"기본\",\n            left: \"왼쪽\",\n            right: \"오른쪽\",\n            center: \"가운데\",\n            width: \"가로\",\n            height: \"세로\",\n            size: \"크기\",\n            ratio: \"비율\"\n        },\n        controller: {\n            edit: \"편집\",\n            unlink: \"링크 해제\",\n            remove: \"삭제\",\n            insertRowAbove: \"위에 행 삽입\",\n            insertRowBelow: \"아래에 행 삽입\",\n            deleteRow: \"행 삭제\",\n            insertColumnBefore: \"왼쪽에 열 삽입\",\n            insertColumnAfter: \"오른쪽에 열 삽입\",\n            deleteColumn: \"열 삭제\",\n            fixedColumnWidth: \"고정 된 열 너비\",\n            resize100: \"100% 크기\",\n            resize75: \"75% 크기\",\n            resize50: \"50% 크기\",\n            resize25: \"25% 크기\",\n            autoSize: \"자동 크기\",\n            mirrorHorizontal: \"좌우 반전\",\n            mirrorVertical: \"상하 반전\",\n            rotateLeft: \"왼쪽으로 회전\",\n            rotateRight: \"오른쪽으로 회전\",\n            maxSize: \"최대화\",\n            minSize: \"최소화\",\n            tableHeader: \"테이블 제목\",\n            mergeCells: \"셀 병합\",\n            splitCells: \"셀 분할\",\n            HorizontalSplit: \"가로 분할\",\n            VerticalSplit: \"세로 분할\"\n        },\n        menu: {\n            spaced: \"글자 간격\",\n            bordered: \"경계선\",\n            neon: \"네온\",\n            translucent: \"반투명\",\n            shadow: \"그림자\",\n            code: \"코드\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ko\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ko.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/lv.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/lv.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"lv\",\n        toolbar: {\n            default: \"Noklusējuma\",\n            save: \"Saglabāt\",\n            font: \"Fonts\",\n            formats: \"Formāti\",\n            fontSize: \"Fonta lielums\",\n            bold: \"Treknraksts\",\n            underline: \"Pasvītrot\",\n            italic: \"Slīpraksts\",\n            strike: \"Pārsvītrojums\",\n            subscript: \"Apakšraksts\",\n            superscript: \"Augšraksts\",\n            removeFormat: \"Noņemt formātu\",\n            fontColor: \"Fonta krāsa\",\n            hiliteColor: \"Teksta iezīmēšanas krāsa\",\n            indent: \"Palielināt atkāpi\",\n            outdent: \"Samazināt atkāpi\",\n            align: \"Izlīdzināt\",\n            alignLeft: \"Līdzināt pa kreisi\",\n            alignRight: \"Līdzināt pa labi\",\n            alignCenter: \"Centrēt\",\n            alignJustify: \"Taisnot\",\n            list: \"Saraksts\",\n            orderList: \"Numerācija\",\n            unorderList: \"Aizzimes\",\n            horizontalRule: \"Horizontāla līnija\",\n            hr_solid: \"Ciets\",\n            hr_dotted: \"Punktiņš\",\n            hr_dashed: \"Braša\",\n            table: \"Tabula\",\n            link: \"Saite\",\n            math: \"Matemātika\",\n            image: \"Attēls\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Pilnekrāna režīms\",\n            showBlocks: \"Parādit blokus\",\n            codeView: \"Koda skats\",\n            undo: \"Atsaukt\",\n            redo: \"Atkārtot\",\n            preview: \"Priekšskatījums\",\n            print: \"Drukāt\",\n            tag_p: \"Paragrāfs\",\n            tag_div: \"Normāli (DIV)\",\n            tag_h: \"Galvene\",\n            tag_blockquote: \"Citāts\",\n            tag_pre: \"Kods\",\n            template: \"Veidne\",\n            lineHeight: \"Līnijas augstums\",\n            paragraphStyle: \"Paragrāfa stils\",\n            textStyle: \"Teksta stils\",\n            imageGallery: \"Attēlu galerija\",\n            dir_ltr: \"No kreisās uz labo\",\n            dir_rtl: \"No labās uz kreiso\",\n            mention: \"Pieminēt\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Ievietot saiti\",\n                url: \"Saites URL\",\n                text: \"Parādāmais teksts\",\n                newWindowCheck: \"Atvērt jaunā logā\",\n                downloadLinkCheck: \"Lejupielādes saite\",\n                bookmark: \"Grāmatzīme\"\n            },\n            mathBox: {\n                title: \"Matemātika\",\n                inputLabel: \"Matemātiskā notācija\",\n                fontSizeLabel: \"Fonta lielums\",\n                previewLabel: \"Priekšskatījums\"\n            },\n            imageBox: {\n                title: \"Ievietot attēlu\",\n                file: \"Izvēlieties no failiem\",\n                url: \"Attēla URL\",\n                altText: \"Alternatīvs teksts\"\n            },\n            videoBox: {\n                title: \"Ievietot video\",\n                file: \"Izvēlieties no failiem\",\n                url: \"Multivides iegulšanas URL, YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Ievietot audio\",\n                file: \"Izvēlieties no failiem\",\n                url: \"Audio URL\"\n            },\n            browser: {\n                tags: \"Tagi\",\n                search: \"Meklēt\"\n            },\n            caption: \"Ievietot aprakstu\",\n            close: \"Aizvērt\",\n            submitButton: \"Iesniegt\",\n            revertButton: \"Atjaunot\",\n            proportion: \"Ierobežo proporcijas\",\n            basic: \"Nav iesaiņojuma\",\n            left: \"Pa kreisi\",\n            right: \"Labajā pusē\",\n            center: \"Centrs\",\n            width: \"Platums\",\n            height: \"Augstums\",\n            size: \"Izmērs\",\n            ratio: \"Attiecība\"\n        },\n        controller: {\n            edit: \"Rediģēt\",\n            unlink: \"Atsaistīt\",\n            remove: \"Noņemt\",\n            insertRowAbove: \"Ievietot rindu virs\",\n            insertRowBelow: \"Ievietot rindu zemāk\",\n            deleteRow: \"Dzēst rindu\",\n            insertColumnBefore: \"Ievietot kolonnu pirms\",\n            insertColumnAfter: \"Ievietot kolonnu aiz\",\n            deleteColumn: \"Dzēst kolonnu\",\n            fixColumnWidth: \"Fiksēts kolonnas platums\",\n            resize100: \"Mainīt izmēru 100%\",\n            resize75: \"Mainīt izmēru 75%\",\n            resize50: \"Mainīt izmēru 50%\",\n            resize25: \"Mainīt izmēru 25%\",\n            autoSize: \"Automātiskais izmērs\",\n            mirrorHorizontal: \"Spogulis, horizontāls\",\n            mirrorVertical: \"Spogulis, vertikāls\",\n            rotateLeft: \"Pagriezt pa kreisi\",\n            rotateRight: \"Pagriezt pa labi\",\n            maxSize: \"Maksimālais izmērs\",\n            minSize: \"Minimālais izmērs\",\n            tableHeader: \"Tabulas galvene\",\n            mergeCells: \"Apvienot šūnas\",\n            splitCells: \"Sadalīt šūnas\",\n            HorizontalSplit: \"Horizontāls sadalījums\",\n            VerticalSplit: \"Vertikāls sadalījums\"\n        },\n        menu: {\n            spaced: \"Ar atstarpi\",\n            bordered: \"Robežojās\",\n            neon: \"Neona\",\n            translucent: \"Caurspīdīgs\",\n            shadow: \"Ēna\",\n            code: \"Kods\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"lv\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/lv.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/nl.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/nl.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"nl\",\n        toolbar: {\n            default: \"Standaard\",\n            save: \"Opslaan\",\n            font: \"Lettertype\",\n            formats: \"Formaten\",\n            fontSize: \"Lettergrootte\",\n            bold: \"Vetgedrukt\",\n            underline: \"Onderstrepen\",\n            italic: \"Cursief\",\n            strike: \"Doorstrepen\",\n            subscript: \"Subscript\",\n            superscript: \"Superscript\",\n            removeFormat: \"Opmaak verwijderen\",\n            fontColor: \"Tekstkleur\",\n            hiliteColor: \"Tekst markeren\",\n            indent: \"Inspringen\",\n            outdent: \"Inspringen ongedaan maken\",\n            align: \"Uitlijnen\",\n            alignLeft: \"Links uitlijnen\",\n            alignRight: \"Rechts uitlijnen\",\n            alignCenter: \"In het midden uitlijnen\",\n            alignJustify: \"Uitvullen\",\n            list: \"Lijst\",\n            orderList: \"Geordende lijst\",\n            unorderList: \"Ongeordende lijst\",\n            horizontalRule: \"Horizontale regel\",\n            hr_solid: \"Standaard\",\n            hr_dotted: \"Gestippeld\",\n            hr_dashed: \"Gestreept\",\n            table: \"Tabel\",\n            link: \"Link\",\n            math: \"Wiskunde\",\n            image: \"Afbeelding\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Volledig scherm\",\n            showBlocks: \"Blokken tonen\",\n            codeView: \"Broncode weergeven\",\n            undo: \"Ongedaan maken\",\n            redo: \"Ongedaan maken herstellen\",\n            preview: \"Voorbeeldweergave\",\n            print: \"Printen\",\n            tag_p: \"Alinea\",\n            tag_div: \"Normaal (div)\",\n            tag_h: \"Kop\",\n            tag_blockquote: \"Citaat\",\n            tag_pre: \"Code\",\n            template: \"Sjabloon\",\n            lineHeight: \"Lijnhoogte\",\n            paragraphStyle: \"Alineastijl\",\n            textStyle: \"Tekststijl\",\n            imageGallery: \"Galerij\",\n            dir_ltr: \"Van links naar rechts\",\n            dir_rtl: \"Rechts naar links\",\n            mention: \"Vermelding\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Link invoegen\",\n                url: \"URL\",\n                text: \"Tekst van de link\",\n                newWindowCheck: \"In een nieuw tabblad openen\",\n                downloadLinkCheck: \"Downloadlink\",\n                bookmark: \"Bladwijzer\"\n            },\n            mathBox: {\n                title: \"Wiskunde\",\n                inputLabel: \"Wiskundige notatie\",\n                fontSizeLabel: \"Lettergrootte\",\n                previewLabel: \"Voorbeeld\"\n            },\n            imageBox: {\n                title: \"Afbeelding invoegen\",\n                file: \"Selecteer een bestand van uw apparaat\",\n                url: \"URL\",\n                altText: \"Alt-tekst\"\n            },\n            videoBox: {\n                title: \"Video invoegen\",\n                file: \"Selecteer een bestand van uw apparaat\",\n                url: \"Embedded URL (YouTube/Vimeo)\"\n            },\n            audioBox: {\n                title: \"Audio invoegen\",\n                file: \"Selecteer een bestand van uw apparaat\",\n                url: \"URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"Zoeken\"\n            },\n            caption: \"Omschrijving toevoegen\",\n            close: \"Sluiten\",\n            submitButton: \"Toepassen\",\n            revertButton: \"Standaardwaarden herstellen\",\n            proportion: \"Verhouding behouden\",\n            basic: \"Standaard\",\n            left: \"Links\",\n            right: \"Rechts\",\n            center: \"Midden\",\n            width: \"Breedte\",\n            height: \"Hoogte\",\n            size: \"Grootte\",\n            ratio: \"Verhouding\"\n        },\n        controller: {\n            edit: \"Bewerken\",\n            unlink: \"Ontkoppelen\",\n            remove: \"Verwijderen\",\n            insertRowAbove: \"Rij hierboven invoegen\",\n            insertRowBelow: \"Rij hieronder invoegen\",\n            deleteRow: \"Rij verwijderen\",\n            insertColumnBefore: \"Kolom links invoegen\",\n            insertColumnAfter: \"Kolom rechts invoegen\",\n            deleteColumn: \"Kolom verwijderen\",\n            fixedColumnWidth: \"Vaste kolombreedte\",\n            resize100: \"Formaat wijzigen: 100%\",\n            resize75: \"Formaat wijzigen: 75%\",\n            resize50: \"Formaat wijzigen: 50%\",\n            resize25: \"Formaat wijzigen: 25%\",\n            autoSize: \"Automatische grootte\",\n            mirrorHorizontal: \"Horizontaal spiegelen\",\n            mirrorVertical: \"Verticaal spiegelen\",\n            rotateLeft: \"Naar links draaien\",\n            rotateRight: \"Naar rechts draaien\",\n            maxSize: \"Maximale grootte\",\n            minSize: \"Minimale grootte\",\n            tableHeader: \"Tabelkoppen\",\n            mergeCells: \"Cellen samenvoegen\",\n            splitCells: \"Cellen splitsen\",\n            HorizontalSplit: \"Horizontaal splitsen\",\n            VerticalSplit: \"Verticaal splitsen\"\n        },\n        menu: {\n            spaced: \"Uit elkaar\",\n            bordered: \"Omlijnd\",\n            neon: \"Neon\",\n            translucent: \"Doorschijnend\",\n            shadow: \"Schaduw\",\n            code: \"Code\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"nl\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/nl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/pl.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/pl.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"pl\",\n        toolbar: {\n            default: \"Domyślne\",\n            save: \"Zapisz\",\n            font: \"Czcionka\",\n            formats: \"Formaty\",\n            fontSize: \"Rozmiar\",\n            bold: \"Pogrubienie\",\n            underline: \"Podkreślenie\",\n            italic: \"Kursywa\",\n            strike: \"Przekreślenie\",\n            subscript: \"Indeks dolny\",\n            superscript: \"Indeks g\\xf3rny\",\n            removeFormat: \"Wyczyść formatowanie\",\n            fontColor: \"Kolor tekstu\",\n            hiliteColor: \"Kolor tła tekstu\",\n            indent: \"Zwiększ wcięcie\",\n            outdent: \"Zmniejsz wcięcie\",\n            align: \"Wyr\\xf3wnaj\",\n            alignLeft: \"Do lewej\",\n            alignRight: \"Do prawej\",\n            alignCenter: \"Do środka\",\n            alignJustify: \"Wyjustuj\",\n            list: \"Lista\",\n            orderList: \"Lista numerowana\",\n            unorderList: \"Lista wypunktowana\",\n            horizontalRule: \"Pozioma linia\",\n            hr_solid: \"Ciągła\",\n            hr_dotted: \"Kropkowana\",\n            hr_dashed: \"Przerywana\",\n            table: \"Tabela\",\n            link: \"Odnośnik\",\n            math: \"Matematyczne\",\n            image: \"Obraz\",\n            video: \"Wideo\",\n            audio: \"Audio\",\n            fullScreen: \"Pełny ekran\",\n            showBlocks: \"Pokaż bloki\",\n            codeView: \"Widok kodu\",\n            undo: \"Cofnij\",\n            redo: \"Pon\\xf3w\",\n            preview: \"Podgląd\",\n            print: \"Drukuj\",\n            tag_p: \"Akapit\",\n            tag_div: \"Blok (DIV)\",\n            tag_h: \"Nagł\\xf3wek H\",\n            tag_blockquote: \"Cytat\",\n            tag_pre: \"Kod\",\n            template: \"Szablon\",\n            lineHeight: \"Odstęp między wierszami\",\n            paragraphStyle: \"Styl akapitu\",\n            textStyle: \"Styl tekstu\",\n            imageGallery: \"Galeria obraz\\xf3w\",\n            dir_ltr: \"Od lewej do prawej\",\n            dir_rtl: \"Od prawej do lewej\",\n            mention: \"Wzmianka\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Wstaw odnośnik\",\n                url: \"Adres URL\",\n                text: \"Tekst do wyświetlenia\",\n                newWindowCheck: \"Otw\\xf3rz w nowym oknie\",\n                downloadLinkCheck: \"Link do pobrania\",\n                bookmark: \"Zakładka\"\n            },\n            mathBox: {\n                title: \"Matematyczne\",\n                inputLabel: \"Zapis matematyczny\",\n                fontSizeLabel: \"Rozmiar czcionki\",\n                previewLabel: \"Podgląd\"\n            },\n            imageBox: {\n                title: \"Wstaw obraz\",\n                file: \"Wybierz plik\",\n                url: \"Adres URL obrazka\",\n                altText: \"Tekst alternatywny\"\n            },\n            videoBox: {\n                title: \"Wstaw wideo\",\n                file: \"Wybierz plik\",\n                url: \"Adres URL video, np. YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Wstaw audio\",\n                file: \"Wybierz plik\",\n                url: \"Adres URL audio\"\n            },\n            browser: {\n                tags: \"Tagi\",\n                search: \"Szukaj\"\n            },\n            caption: \"Wstaw opis\",\n            close: \"Zamknij\",\n            submitButton: \"Zatwierdź\",\n            revertButton: \"Cofnij zmiany\",\n            proportion: \"Ogranicz proporcje\",\n            basic: \"Bez wyr\\xf3wnania\",\n            left: \"Do lewej\",\n            right: \"Do prawej\",\n            center: \"Do środka\",\n            width: \"Szerokość\",\n            height: \"Wysokość\",\n            size: \"Rozmiar\",\n            ratio: \"Proporcje\"\n        },\n        controller: {\n            edit: \"Edycja\",\n            unlink: \"Usuń odnośnik\",\n            remove: \"Usuń\",\n            insertRowAbove: \"Wstaw wiersz powyżej\",\n            insertRowBelow: \"Wstaw wiersz poniżej\",\n            deleteRow: \"Usuń wiersz\",\n            insertColumnBefore: \"Wstaw kolumnę z lewej\",\n            insertColumnAfter: \"Wstaw kolumnę z prawej\",\n            deleteColumn: \"Usuń kolumnę\",\n            fixedColumnWidth: \"Stała szerokość kolumny\",\n            resize100: \"Zmień rozmiar - 100%\",\n            resize75: \"Zmień rozmiar - 75%\",\n            resize50: \"Zmień rozmiar - 50%\",\n            resize25: \"Zmień rozmiar - 25%\",\n            autoSize: \"Rozmiar automatyczny\",\n            mirrorHorizontal: \"Odbicie lustrzane w poziomie\",\n            mirrorVertical: \"Odbicie lustrzane w pionie\",\n            rotateLeft: \"Obr\\xf3ć w lewo\",\n            rotateRight: \"Obr\\xf3ć w prawo\",\n            maxSize: \"Maksymalny rozmiar\",\n            minSize: \"Minimalny rozmiar\",\n            tableHeader: \"Nagł\\xf3wek tabeli\",\n            mergeCells: \"Scal kom\\xf3rki\",\n            splitCells: \"Podziel kom\\xf3rki\",\n            HorizontalSplit: \"Podział poziomy\",\n            VerticalSplit: \"Podział pionowy\"\n        },\n        menu: {\n            spaced: \"Rozstawiony\",\n            bordered: \"Z obw\\xf3dką\",\n            neon: \"Neon\",\n            translucent: \"P\\xf3łprzezroczysty\",\n            shadow: \"Cień\",\n            code: \"Kod\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"pl\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/pl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/pt_br.js":
/*!**************************************************!*\
  !*** ./node_modules/suneditor/src/lang/pt_br.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * Brazilian Portuguese translation by lpeil github\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"pt_br\",\n        toolbar: {\n            default: \"Padr\\xe3o\",\n            save: \"Salvar\",\n            font: \"Fonte\",\n            formats: \"Formatos\",\n            fontSize: \"Tamanho\",\n            bold: \"Negrito\",\n            underline: \"Sublinhado\",\n            italic: \"It\\xe1lico\",\n            strike: \"Riscado\",\n            subscript: \"Subescrito\",\n            superscript: \"Sobrescrito\",\n            removeFormat: \"Remover Formata\\xe7\\xe3o\",\n            fontColor: \"Cor da Fonte\",\n            hiliteColor: \"Cor de destaque\",\n            indent: \"Recuo\",\n            outdent: \"Avan\\xe7ar\",\n            align: \"Alinhar\",\n            alignLeft: \"Alinhar \\xe0 esquerda\",\n            alignRight: \"Alinhar \\xe0 direita\",\n            alignCenter: \"Centralizar\",\n            alignJustify: \"Justificar\",\n            list: \"Lista\",\n            orderList: \"Lista ordenada\",\n            unorderList: \"Lista desordenada\",\n            horizontalRule: \"Linha horizontal\",\n            hr_solid: \"s\\xf3lida\",\n            hr_dotted: \"pontilhada\",\n            hr_dashed: \"tracejada\",\n            table: \"Tabela\",\n            link: \"Link\",\n            math: \"Matem\\xe1tica\",\n            image: \"Imagem\",\n            video: \"V\\xeddeo\",\n            audio: \"\\xc1udio\",\n            fullScreen: \"Tela cheia\",\n            showBlocks: \"Mostrar blocos\",\n            codeView: \"Mostrar c\\xf3digos\",\n            undo: \"Voltar\",\n            redo: \"Refazer\",\n            preview: \"Prever\",\n            print: \"Imprimir\",\n            tag_p: \"Paragr\\xe1fo\",\n            tag_div: \"(DIV) Normal\",\n            tag_h: \"Cabe\\xe7alho\",\n            tag_blockquote: \"Citar\",\n            tag_pre: \"C\\xf3digo\",\n            template: \"Modelo\",\n            lineHeight: \"Altura da linha\",\n            paragraphStyle: \"Estilo do par\\xe1grafo\",\n            textStyle: \"Estilo do texto\",\n            imageGallery: \"Galeria de imagens\",\n            dir_ltr: \"Esquerda para direita\",\n            dir_rtl: \"Direita para esquerda\",\n            mention: \"Men\\xe7\\xe3o\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inserir link\",\n                url: \"URL para link\",\n                text: \"Texto a mostrar\",\n                newWindowCheck: \"Abrir em nova guia\",\n                downloadLinkCheck: \"Link para Download\",\n                bookmark: \"marcar p\\xe1ginas\"\n            },\n            mathBox: {\n                title: \"Matem\\xe1tica\",\n                inputLabel: \"Nota\\xe7\\xe3o matem\\xe1tica\",\n                fontSizeLabel: \"Tamanho\",\n                previewLabel: \"Prever\"\n            },\n            imageBox: {\n                title: \"Inserir imagens\",\n                file: \"Selecionar arquivos\",\n                url: \"URL da imagem\",\n                altText: \"Texto alternativo\"\n            },\n            videoBox: {\n                title: \"Inserir v\\xeddeo\",\n                file: \"Selecionar arquivos\",\n                url: \"URL do YouTube/Vimeo\"\n            },\n            audioBox: {\n                title: \"Inserir \\xe1udio\",\n                file: \"Selecionar arquivos\",\n                url: \"URL da \\xe1udio\"\n            },\n            browser: {\n                tags: \"Tag\",\n                search: \"Procurar\"\n            },\n            caption: \"Inserir descri\\xe7\\xe3o\",\n            close: \"Fechar\",\n            submitButton: \"Enviar\",\n            revertButton: \"Reverter\",\n            proportion: \"Restringir propor\\xe7\\xf5es\",\n            basic: \"B\\xe1sico\",\n            left: \"Esquerda\",\n            right: \"Direita\",\n            center: \"Centro\",\n            width: \"Largura\",\n            height: \"Altura\",\n            size: \"Tamanho\",\n            ratio: \"Propor\\xe7\\xf5es\"\n        },\n        controller: {\n            edit: \"Editar\",\n            unlink: \"Remover link\",\n            remove: \"Remover\",\n            insertRowAbove: \"Inserir linha acima\",\n            insertRowBelow: \"Inserir linha abaixo\",\n            deleteRow: \"Deletar linha\",\n            insertColumnBefore: \"Inserir coluna antes\",\n            insertColumnAfter: \"Inserir coluna depois\",\n            deleteColumn: \"Deletar coluna\",\n            fixedColumnWidth: \"Largura fixa da coluna\",\n            resize100: \"Redimensionar para 100%\",\n            resize75: \"Redimensionar para 75%\",\n            resize50: \"Redimensionar para 50%\",\n            resize25: \"Redimensionar para 25%\",\n            autoSize: \"Tamanho autom\\xe1tico\",\n            mirrorHorizontal: \"Espelho, Horizontal\",\n            mirrorVertical: \"Espelho, Vertical\",\n            rotateLeft: \"Girar para esquerda\",\n            rotateRight: \"Girar para direita\",\n            maxSize: \"Tam m\\xe1x\",\n            minSize: \"Tam m\\xedn\",\n            tableHeader: \"Cabe\\xe7alho da tabela\",\n            mergeCells: \"Mesclar c\\xe9lulas\",\n            splitCells: \"Dividir c\\xe9lulas\",\n            HorizontalSplit: \"Divis\\xe3o horizontal\",\n            VerticalSplit: \"Divis\\xe3o vertical\"\n        },\n        menu: {\n            spaced: \"Espa\\xe7ado\",\n            bordered: \"Com borda\",\n            neon: \"Neon\",\n            translucent: \"Transl\\xfacido\",\n            shadow: \"Sombreado\",\n            code: \"C\\xf3digo\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"pt_br\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/pt_br.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ro.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ro.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ro\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Salvează\",\n            font: \"Font\",\n            formats: \"Format\",\n            fontSize: \"Dimensiune\",\n            bold: \"\\xcengroșat\",\n            underline: \"Subliniat\",\n            italic: \"\\xcenclinat\",\n            strike: \"Tăiat\",\n            subscript: \"Subscript\",\n            superscript: \"Superscript\",\n            removeFormat: \"Șterge formatare\",\n            fontColor: \"Culoare font\",\n            hiliteColor: \"Culoare de evidențiere\",\n            indent: \"Indentează\",\n            outdent: \"Fără indentare\",\n            align: \"Aliniere\",\n            alignLeft: \"Aliniere la st\\xe2nga\",\n            alignRight: \"Aliniere la dreapta\",\n            alignCenter: \"Aliniere la centru\",\n            alignJustify: \"Aliniere st\\xe2nga - dreapta\",\n            list: \"Listă\",\n            orderList: \"Listă ordonată\",\n            unorderList: \"Listă neordonată\",\n            horizontalRule: \"Linie orizontală\",\n            hr_solid: \"Solid\",\n            hr_dotted: \"Punctat\",\n            hr_dashed: \"Punctate\",\n            table: \"Tabel\",\n            link: \"Link\",\n            math: \"Matematică\",\n            image: \"Imagine\",\n            video: \"Video\",\n            audio: \"Audio\",\n            fullScreen: \"Tot ecranul\",\n            showBlocks: \"Arată blocuri\",\n            codeView: \"Vizualizare cod\",\n            undo: \"Anulează\",\n            redo: \"Refă\",\n            preview: \"Previzualizare\",\n            print: \"printează\",\n            tag_p: \"Paragraf\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Antet\",\n            tag_blockquote: \"Quote\",\n            tag_pre: \"Citat\",\n            template: \"Template\",\n            lineHeight: \"\\xcenălțime linie\",\n            paragraphStyle: \"Stil paragraf\",\n            textStyle: \"Stil text\",\n            imageGallery: \"Galerie de imagini\",\n            dir_ltr: \"De la st\\xe2nga la dreapta\",\n            dir_rtl: \"De la dreapta la stanga\",\n            mention: \"Mentiune\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Inserează Link\",\n                url: \"Adresă link\",\n                text: \"Text de afișat\",\n                newWindowCheck: \"Deschide \\xeen fereastră nouă\",\n                downloadLinkCheck: \"Link de descărcare\",\n                bookmark: \"Marcaj\"\n            },\n            mathBox: {\n                title: \"Matematică\",\n                inputLabel: \"Notație matematică\",\n                fontSizeLabel: \"Dimensiune font\",\n                previewLabel: \"Previzualizare\"\n            },\n            imageBox: {\n                title: \"Inserează imagine\",\n                file: \"Selectează\",\n                url: \"URL imagine\",\n                altText: \"text alternativ\"\n            },\n            videoBox: {\n                title: \"Inserează video\",\n                file: \"Selectează\",\n                url: \"Include URL, youtube/vimeo\"\n            },\n            audioBox: {\n                title: \"Inserează Audio\",\n                file: \"Selectează\",\n                url: \"URL Audio\"\n            },\n            browser: {\n                tags: \"Etichete\",\n                search: \"Căutareim\"\n            },\n            caption: \"Inserează descriere\",\n            close: \"\\xcenchide\",\n            submitButton: \"Salvează\",\n            revertButton: \"Revenire\",\n            proportion: \"Constr\\xe2nge proporțiile\",\n            basic: \"De bază\",\n            left: \"St\\xe2nga\",\n            right: \"Dreapta\",\n            center: \"Centru\",\n            width: \"Lățime\",\n            height: \"\\xcenălțime\",\n            size: \"Dimensiune\",\n            ratio: \"Ratie\"\n        },\n        controller: {\n            edit: \"Editează\",\n            unlink: \"Scoate link\",\n            remove: \"Elimină\",\n            insertRowAbove: \"Inserează r\\xe2nd deasupra\",\n            insertRowBelow: \"Inserează r\\xe2nd dedesupt\",\n            deleteRow: \"Șterge linie\",\n            insertColumnBefore: \"Inserează coloană \\xeenainte\",\n            insertColumnAfter: \"Inserează coloană după\",\n            deleteColumn: \"Șterge coloană\",\n            fixedColumnWidth: \"Lățime fixă coloană\",\n            resize100: \"Redimensionare 100%\",\n            resize75: \"Redimensionare 75%\",\n            resize50: \"Redimensionare 50%\",\n            resize25: \"Redimensionare 25%\",\n            autoSize: \"Dimensiune automată\",\n            mirrorHorizontal: \"Oglindă, orizontal\",\n            mirrorVertical: \"Oglindă, vertical\",\n            rotateLeft: \"Rotește la st\\xe2nga\",\n            rotateRight: \"Rotește la dreapta\",\n            maxSize: \"Dimensiune maximă\",\n            minSize: \"Dimensiune minimă\",\n            tableHeader: \"Antet tabel\",\n            mergeCells: \"\\xcembină celule\",\n            splitCells: \"Divizează celule\",\n            HorizontalSplit: \"Despicare orizontală\",\n            VerticalSplit: \"Despicare verticală\"\n        },\n        menu: {\n            spaced: \"Spațiat\",\n            bordered: \"Mărginit\",\n            neon: \"Neon\",\n            translucent: \"Translucent\",\n            shadow: \"Umbră\",\n            code: \"Citat\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ro\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xhbmcvcm8uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQyxVQUFVQSxNQUFNLEVBQUVDLE9BQU87SUFDdEIsSUFBSSxLQUFrQixJQUFZLE9BQU9DLE9BQU9DLE9BQU8sS0FBSyxVQUFVO1FBQ2xFRCxPQUFPQyxPQUFPLEdBQUdILE9BQU9JLFFBQVEsR0FDNUJILFFBQVFELFFBQVEsUUFDaEIsU0FBVUssQ0FBQztZQUNQLElBQUksQ0FBQ0EsRUFBRUQsUUFBUSxFQUFFO2dCQUNiLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBLE9BQU9MLFFBQVFJO1FBQ25CO0lBQ1IsT0FBTztRQUNISixRQUFRRDtJQUNaO0FBQ0osR0FBRSxLQUFrQixHQUFjTyxTQUFTLEdBQU0sU0FBVUEsT0FBTSxFQUFFQyxRQUFRO0lBQ3ZFLE1BQU1DLE9BQU87UUFDVEMsTUFBTTtRQUNOQyxTQUFTO1lBQ0xDLFNBQVM7WUFDVEMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxNQUFNO1lBQ05DLFdBQVc7WUFDWEMsUUFBUTtZQUNSQyxRQUFRO1lBQ1JDLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxjQUFjO1lBQ2RDLFdBQVc7WUFDWEMsYUFBYTtZQUNiQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxXQUFXO1lBQ1hDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxjQUFjO1lBQ2RDLE1BQU07WUFDTkMsV0FBVztZQUNYQyxhQUFhO1lBQ2JDLGdCQUFnQjtZQUNoQkMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLFdBQVc7WUFDWEMsT0FBTztZQUNQQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLE9BQU87WUFDUEMsWUFBWTtZQUNaQyxZQUFZO1lBQ1pDLFVBQVU7WUFDVkMsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxnQkFBZ0I7WUFDaEJDLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxZQUFZO1lBQ1pDLGdCQUFnQjtZQUNoQkMsV0FBVztZQUNYQyxjQUFjO1lBQ2RDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxTQUFTO1FBQ2I7UUFDQUMsV0FBVztZQUNQQyxTQUFTO2dCQUNMQyxPQUFPO2dCQUNQQyxLQUFLO2dCQUNMQyxNQUFNO2dCQUNOQyxnQkFBZ0I7Z0JBQ2hCQyxtQkFBbUI7Z0JBQ25CQyxVQUFVO1lBQ2Q7WUFDQUMsU0FBUztnQkFDTE4sT0FBTztnQkFDUE8sWUFBWTtnQkFDWkMsZUFBZTtnQkFDZkMsY0FBYztZQUNsQjtZQUNBQyxVQUFVO2dCQUNOVixPQUFPO2dCQUNQVyxNQUFNO2dCQUNOVixLQUFLO2dCQUNMVyxTQUFTO1lBQ2I7WUFDQUMsVUFBVTtnQkFDTmIsT0FBTztnQkFDUFcsTUFBTTtnQkFDTlYsS0FBSztZQUNUO1lBQ0FhLFVBQVU7Z0JBQ05kLE9BQU87Z0JBQ1BXLE1BQU07Z0JBQ05WLEtBQUs7WUFDVDtZQUNBYyxTQUFTO2dCQUNMQyxNQUFNO2dCQUNOQyxRQUFRO1lBQ1o7WUFDQUMsU0FBUztZQUNUQyxPQUFPO1lBQ1BDLGNBQWM7WUFDZEMsY0FBYztZQUNkQyxZQUFZO1lBQ1pDLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkMsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLE1BQU07WUFDTkMsT0FBTztRQUNYO1FBQ0FDLFlBQVk7WUFDUkMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLFFBQVE7WUFDUkMsZ0JBQWdCO1lBQ2hCQyxnQkFBZ0I7WUFDaEJDLFdBQVc7WUFDWEMsb0JBQW9CO1lBQ3BCQyxtQkFBbUI7WUFDbkJDLGNBQWM7WUFDZEMsa0JBQWtCO1lBQ2xCQyxXQUFXO1lBQ1hDLFVBQVU7WUFDVkMsVUFBVTtZQUNWQyxVQUFVO1lBQ1ZDLFVBQVU7WUFDVkMsa0JBQWtCO1lBQ2xCQyxnQkFBZ0I7WUFDaEJDLFlBQVk7WUFDWkMsYUFBYTtZQUNiQyxTQUFTO1lBQ1RDLFNBQVM7WUFDVEMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLFlBQVk7WUFDWkMsaUJBQWlCO1lBQ2pCQyxlQUFlO1FBQ25CO1FBQ0FDLE1BQU07WUFDRkMsUUFBUTtZQUNSQyxVQUFVO1lBQ1ZDLE1BQU07WUFDTkMsYUFBYTtZQUNiQyxRQUFRO1lBQ1J6SCxNQUFNO1FBQ1Y7SUFDSjtJQUVBLElBQUksT0FBT0YsYUFBYSxPQUFPNEgsV0FBVztRQUN0QyxJQUFJLENBQUM3SCxRQUFPOEgsY0FBYyxFQUFFO1lBQ3hCQyxPQUFPQyxjQUFjLENBQUNoSSxTQUFRLGtCQUFrQjtnQkFDNUNpSSxZQUFZO2dCQUNaQyxVQUFVO2dCQUNWQyxjQUFjO2dCQUNkQyxPQUFPLENBQUM7WUFDWjtRQUNKO1FBRUFMLE9BQU9DLGNBQWMsQ0FBQ2hJLFFBQU84SCxjQUFjLEVBQUUsTUFBTTtZQUMvQ0csWUFBWTtZQUNaQyxVQUFVO1lBQ1ZDLGNBQWM7WUFDZEMsT0FBT2xJO1FBQ1g7SUFDSjtJQUVBLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvbGFuZy9yby5qcz9jMWRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xuICAgICAgICAgICAgICAgIGlmICghdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9MQU5HIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeSh3KTtcbiAgICAgICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShnbG9iYWwpO1xuICAgIH1cbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xuICAgIGNvbnN0IGxhbmcgPSB7XG4gICAgICAgIGNvZGU6ICdybycsXG4gICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdEZWZhdWx0JyxcbiAgICAgICAgICAgIHNhdmU6ICdTYWx2ZWF6xIMnLFxuICAgICAgICAgICAgZm9udDogJ0ZvbnQnLFxuICAgICAgICAgICAgZm9ybWF0czogJ0Zvcm1hdCcsXG4gICAgICAgICAgICBmb250U2l6ZTogJ0RpbWVuc2l1bmUnLFxuICAgICAgICAgICAgYm9sZDogJ8OObmdyb8iZYXQnLFxuICAgICAgICAgICAgdW5kZXJsaW5lOiAnU3VibGluaWF0JyxcbiAgICAgICAgICAgIGl0YWxpYzogJ8OObmNsaW5hdCcsXG4gICAgICAgICAgICBzdHJpa2U6ICdUxINpYXQnLFxuICAgICAgICAgICAgc3Vic2NyaXB0OiAnU3Vic2NyaXB0JyxcbiAgICAgICAgICAgIHN1cGVyc2NyaXB0OiAnU3VwZXJzY3JpcHQnLFxuICAgICAgICAgICAgcmVtb3ZlRm9ybWF0OiAnyJh0ZXJnZSBmb3JtYXRhcmUnLFxuICAgICAgICAgICAgZm9udENvbG9yOiAnQ3Vsb2FyZSBmb250JyxcbiAgICAgICAgICAgIGhpbGl0ZUNvbG9yOiAnQ3Vsb2FyZSBkZSBldmlkZW7Im2llcmUnLFxuICAgICAgICAgICAgaW5kZW50OiAnSW5kZW50ZWF6xIMnLFxuICAgICAgICAgICAgb3V0ZGVudDogJ0bEg3LEgyBpbmRlbnRhcmUnLFxuICAgICAgICAgICAgYWxpZ246ICdBbGluaWVyZScsXG4gICAgICAgICAgICBhbGlnbkxlZnQ6ICdBbGluaWVyZSBsYSBzdMOibmdhJyxcbiAgICAgICAgICAgIGFsaWduUmlnaHQ6ICdBbGluaWVyZSBsYSBkcmVhcHRhJyxcbiAgICAgICAgICAgIGFsaWduQ2VudGVyOiAnQWxpbmllcmUgbGEgY2VudHJ1JyxcbiAgICAgICAgICAgIGFsaWduSnVzdGlmeTogJ0FsaW5pZXJlIHN0w6JuZ2EgLSBkcmVhcHRhJyxcbiAgICAgICAgICAgIGxpc3Q6ICdMaXN0xIMnLFxuICAgICAgICAgICAgb3JkZXJMaXN0OiAnTGlzdMSDIG9yZG9uYXTEgycsXG4gICAgICAgICAgICB1bm9yZGVyTGlzdDogJ0xpc3TEgyBuZW9yZG9uYXTEgycsXG4gICAgICAgICAgICBob3Jpem9udGFsUnVsZTogJ0xpbmllIG9yaXpvbnRhbMSDJyxcbiAgICAgICAgICAgIGhyX3NvbGlkOiAnU29saWQnLFxuICAgICAgICAgICAgaHJfZG90dGVkOiAnUHVuY3RhdCcsXG4gICAgICAgICAgICBocl9kYXNoZWQ6ICdQdW5jdGF0ZScsXG4gICAgICAgICAgICB0YWJsZTogJ1RhYmVsJyxcbiAgICAgICAgICAgIGxpbms6ICdMaW5rJyxcbiAgICAgICAgICAgIG1hdGg6ICdNYXRlbWF0aWPEgycsXG4gICAgICAgICAgICBpbWFnZTogJ0ltYWdpbmUnLFxuICAgICAgICAgICAgdmlkZW86ICdWaWRlbycsXG4gICAgICAgICAgICBhdWRpbzogJ0F1ZGlvJyxcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46ICdUb3QgZWNyYW51bCcsXG4gICAgICAgICAgICBzaG93QmxvY2tzOiAnQXJhdMSDIGJsb2N1cmknLFxuICAgICAgICAgICAgY29kZVZpZXc6ICdWaXp1YWxpemFyZSBjb2QnLFxuICAgICAgICAgICAgdW5kbzogJ0FudWxlYXrEgycsXG4gICAgICAgICAgICByZWRvOiAnUmVmxIMnLFxuICAgICAgICAgICAgcHJldmlldzogJ1ByZXZpenVhbGl6YXJlJyxcbiAgICAgICAgICAgIHByaW50OiAncHJpbnRlYXrEgycsXG4gICAgICAgICAgICB0YWdfcDogJ1BhcmFncmFmJyxcbiAgICAgICAgICAgIHRhZ19kaXY6ICdOb3JtYWwgKERJViknLFxuICAgICAgICAgICAgdGFnX2g6ICdBbnRldCcsXG4gICAgICAgICAgICB0YWdfYmxvY2txdW90ZTogJ1F1b3RlJyxcbiAgICAgICAgICAgIHRhZ19wcmU6ICdDaXRhdCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ1RlbXBsYXRlJyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICfDjm7Eg2zIm2ltZSBsaW5pZScsXG4gICAgICAgICAgICBwYXJhZ3JhcGhTdHlsZTogJ1N0aWwgcGFyYWdyYWYnLFxuICAgICAgICAgICAgdGV4dFN0eWxlOiAnU3RpbCB0ZXh0JyxcbiAgICAgICAgICAgIGltYWdlR2FsbGVyeTogJ0dhbGVyaWUgZGUgaW1hZ2luaScsXG4gICAgICAgICAgICBkaXJfbHRyOiAnRGUgbGEgc3TDom5nYSBsYSBkcmVhcHRhJyxcbiAgICAgICAgICAgIGRpcl9ydGw6ICdEZSBsYSBkcmVhcHRhIGxhIHN0YW5nYScsXG4gICAgICAgICAgICBtZW50aW9uOiAnTWVudGl1bmUnXG4gICAgICAgIH0sXG4gICAgICAgIGRpYWxvZ0JveDoge1xuICAgICAgICAgICAgbGlua0JveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJlYXrEgyBMaW5rJyxcbiAgICAgICAgICAgICAgICB1cmw6ICdBZHJlc8SDIGxpbmsnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdUZXh0IGRlIGFmaciZYXQnLFxuICAgICAgICAgICAgICAgIG5ld1dpbmRvd0NoZWNrOiAnRGVzY2hpZGUgw65uIGZlcmVhc3RyxIMgbm91xIMnLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkTGlua0NoZWNrOiAnTGluayBkZSBkZXNjxINyY2FyZScsXG4gICAgICAgICAgICAgICAgYm9va21hcms6ICdNYXJjYWonXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF0aEJveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTWF0ZW1hdGljxIMnLFxuICAgICAgICAgICAgICAgIGlucHV0TGFiZWw6ICdOb3RhyJtpZSBtYXRlbWF0aWPEgycsXG4gICAgICAgICAgICAgICAgZm9udFNpemVMYWJlbDogJ0RpbWVuc2l1bmUgZm9udCcsXG4gICAgICAgICAgICAgICAgcHJldmlld0xhYmVsOiAnUHJldml6dWFsaXphcmUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW1hZ2VCb3g6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0luc2VyZWF6xIMgaW1hZ2luZScsXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdGVhesSDJyxcbiAgICAgICAgICAgICAgICB1cmw6ICdVUkwgaW1hZ2luZScsXG4gICAgICAgICAgICAgICAgYWx0VGV4dDogJ3RleHQgYWx0ZXJuYXRpdidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aWRlb0JveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJlYXrEgyB2aWRlbycsXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdGVhesSDJyxcbiAgICAgICAgICAgICAgICB1cmw6ICdJbmNsdWRlIFVSTCwgeW91dHViZS92aW1lbydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdWRpb0JveDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJlYXrEgyBBdWRpbycsXG4gICAgICAgICAgICAgICAgZmlsZTogJ1NlbGVjdGVhesSDJyxcbiAgICAgICAgICAgICAgICB1cmw6ICdVUkwgQXVkaW8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3Nlcjoge1xuICAgICAgICAgICAgICAgIHRhZ3M6ICdFdGljaGV0ZScsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiAnQ8SDdXRhcmVpbScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FwdGlvbjogJ0luc2VyZWF6xIMgZGVzY3JpZXJlJyxcbiAgICAgICAgICAgIGNsb3NlOiAnw45uY2hpZGUnLFxuICAgICAgICAgICAgc3VibWl0QnV0dG9uOiAnU2FsdmVhesSDJyxcbiAgICAgICAgICAgIHJldmVydEJ1dHRvbjogJ1JldmVuaXJlJyxcbiAgICAgICAgICAgIHByb3BvcnRpb246ICdDb25zdHLDom5nZSBwcm9wb3LIm2lpbGUnLFxuICAgICAgICAgICAgYmFzaWM6ICdEZSBiYXrEgycsXG4gICAgICAgICAgICBsZWZ0OiAnU3TDom5nYScsXG4gICAgICAgICAgICByaWdodDogJ0RyZWFwdGEnLFxuICAgICAgICAgICAgY2VudGVyOiAnQ2VudHJ1JyxcbiAgICAgICAgICAgIHdpZHRoOiAnTMSDyJtpbWUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnw45uxINsyJtpbWUnLFxuICAgICAgICAgICAgc2l6ZTogJ0RpbWVuc2l1bmUnLFxuICAgICAgICAgICAgcmF0aW86ICdSYXRpZSdcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICAgICAgZWRpdDogJ0VkaXRlYXrEgycsXG4gICAgICAgICAgICB1bmxpbms6ICdTY29hdGUgbGluaycsXG4gICAgICAgICAgICByZW1vdmU6ICdFbGltaW7EgycsXG4gICAgICAgICAgICBpbnNlcnRSb3dBYm92ZTogJ0luc2VyZWF6xIMgcsOibmQgZGVhc3VwcmEnLFxuICAgICAgICAgICAgaW5zZXJ0Um93QmVsb3c6ICdJbnNlcmVhesSDIHLDom5kIGRlZGVzdXB0JyxcbiAgICAgICAgICAgIGRlbGV0ZVJvdzogJ8iYdGVyZ2UgbGluaWUnLFxuICAgICAgICAgICAgaW5zZXJ0Q29sdW1uQmVmb3JlOiAnSW5zZXJlYXrEgyBjb2xvYW7EgyDDrm5haW50ZScsXG4gICAgICAgICAgICBpbnNlcnRDb2x1bW5BZnRlcjogJ0luc2VyZWF6xIMgY29sb2FuxIMgZHVwxIMnLFxuICAgICAgICAgICAgZGVsZXRlQ29sdW1uOiAnyJh0ZXJnZSBjb2xvYW7EgycsXG4gICAgICAgICAgICBmaXhlZENvbHVtbldpZHRoOiAnTMSDyJtpbWUgZml4xIMgY29sb2FuxIMnLFxuICAgICAgICAgICAgcmVzaXplMTAwOiAnUmVkaW1lbnNpb25hcmUgMTAwJScsXG4gICAgICAgICAgICByZXNpemU3NTogJ1JlZGltZW5zaW9uYXJlIDc1JScsXG4gICAgICAgICAgICByZXNpemU1MDogJ1JlZGltZW5zaW9uYXJlIDUwJScsXG4gICAgICAgICAgICByZXNpemUyNTogJ1JlZGltZW5zaW9uYXJlIDI1JScsXG4gICAgICAgICAgICBhdXRvU2l6ZTogJ0RpbWVuc2l1bmUgYXV0b21hdMSDJyxcbiAgICAgICAgICAgIG1pcnJvckhvcml6b250YWw6ICdPZ2xpbmTEgywgb3Jpem9udGFsJyxcbiAgICAgICAgICAgIG1pcnJvclZlcnRpY2FsOiAnT2dsaW5kxIMsIHZlcnRpY2FsJyxcbiAgICAgICAgICAgIHJvdGF0ZUxlZnQ6ICdSb3RlyJl0ZSBsYSBzdMOibmdhJyxcbiAgICAgICAgICAgIHJvdGF0ZVJpZ2h0OiAnUm90ZciZdGUgbGEgZHJlYXB0YScsXG4gICAgICAgICAgICBtYXhTaXplOiAnRGltZW5zaXVuZSBtYXhpbcSDJyxcbiAgICAgICAgICAgIG1pblNpemU6ICdEaW1lbnNpdW5lIG1pbmltxIMnLFxuICAgICAgICAgICAgdGFibGVIZWFkZXI6ICdBbnRldCB0YWJlbCcsXG4gICAgICAgICAgICBtZXJnZUNlbGxzOiAnw45tYmluxIMgY2VsdWxlJyxcbiAgICAgICAgICAgIHNwbGl0Q2VsbHM6ICdEaXZpemVhesSDIGNlbHVsZScsXG4gICAgICAgICAgICBIb3Jpem9udGFsU3BsaXQ6ICdEZXNwaWNhcmUgb3Jpem9udGFsxIMnLFxuICAgICAgICAgICAgVmVydGljYWxTcGxpdDogJ0Rlc3BpY2FyZSB2ZXJ0aWNhbMSDJ1xuICAgICAgICB9LFxuICAgICAgICBtZW51OiB7XG4gICAgICAgICAgICBzcGFjZWQ6ICdTcGHIm2lhdCcsXG4gICAgICAgICAgICBib3JkZXJlZDogJ03Eg3JnaW5pdCcsXG4gICAgICAgICAgICBuZW9uOiAnTmVvbicsXG4gICAgICAgICAgICB0cmFuc2x1Y2VudDogJ1RyYW5zbHVjZW50JyxcbiAgICAgICAgICAgIHNoYWRvdzogJ1VtYnLEgycsXG4gICAgICAgICAgICBjb2RlOiAnQ2l0YXQnXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXdpbmRvdy5TVU5FRElUT1JfTEFORykge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9MQU5HJywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1VORURJVE9SX0xBTkcsICdybycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBsYW5nXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsYW5nO1xufSkpOyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJsYW5nIiwiY29kZSIsInRvb2xiYXIiLCJkZWZhdWx0Iiwic2F2ZSIsImZvbnQiLCJmb3JtYXRzIiwiZm9udFNpemUiLCJib2xkIiwidW5kZXJsaW5lIiwiaXRhbGljIiwic3RyaWtlIiwic3Vic2NyaXB0Iiwic3VwZXJzY3JpcHQiLCJyZW1vdmVGb3JtYXQiLCJmb250Q29sb3IiLCJoaWxpdGVDb2xvciIsImluZGVudCIsIm91dGRlbnQiLCJhbGlnbiIsImFsaWduTGVmdCIsImFsaWduUmlnaHQiLCJhbGlnbkNlbnRlciIsImFsaWduSnVzdGlmeSIsImxpc3QiLCJvcmRlckxpc3QiLCJ1bm9yZGVyTGlzdCIsImhvcml6b250YWxSdWxlIiwiaHJfc29saWQiLCJocl9kb3R0ZWQiLCJocl9kYXNoZWQiLCJ0YWJsZSIsImxpbmsiLCJtYXRoIiwiaW1hZ2UiLCJ2aWRlbyIsImF1ZGlvIiwiZnVsbFNjcmVlbiIsInNob3dCbG9ja3MiLCJjb2RlVmlldyIsInVuZG8iLCJyZWRvIiwicHJldmlldyIsInByaW50IiwidGFnX3AiLCJ0YWdfZGl2IiwidGFnX2giLCJ0YWdfYmxvY2txdW90ZSIsInRhZ19wcmUiLCJ0ZW1wbGF0ZSIsImxpbmVIZWlnaHQiLCJwYXJhZ3JhcGhTdHlsZSIsInRleHRTdHlsZSIsImltYWdlR2FsbGVyeSIsImRpcl9sdHIiLCJkaXJfcnRsIiwibWVudGlvbiIsImRpYWxvZ0JveCIsImxpbmtCb3giLCJ0aXRsZSIsInVybCIsInRleHQiLCJuZXdXaW5kb3dDaGVjayIsImRvd25sb2FkTGlua0NoZWNrIiwiYm9va21hcmsiLCJtYXRoQm94IiwiaW5wdXRMYWJlbCIsImZvbnRTaXplTGFiZWwiLCJwcmV2aWV3TGFiZWwiLCJpbWFnZUJveCIsImZpbGUiLCJhbHRUZXh0IiwidmlkZW9Cb3giLCJhdWRpb0JveCIsImJyb3dzZXIiLCJ0YWdzIiwic2VhcmNoIiwiY2FwdGlvbiIsImNsb3NlIiwic3VibWl0QnV0dG9uIiwicmV2ZXJ0QnV0dG9uIiwicHJvcG9ydGlvbiIsImJhc2ljIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyIiwid2lkdGgiLCJoZWlnaHQiLCJzaXplIiwicmF0aW8iLCJjb250cm9sbGVyIiwiZWRpdCIsInVubGluayIsInJlbW92ZSIsImluc2VydFJvd0Fib3ZlIiwiaW5zZXJ0Um93QmVsb3ciLCJkZWxldGVSb3ciLCJpbnNlcnRDb2x1bW5CZWZvcmUiLCJpbnNlcnRDb2x1bW5BZnRlciIsImRlbGV0ZUNvbHVtbiIsImZpeGVkQ29sdW1uV2lkdGgiLCJyZXNpemUxMDAiLCJyZXNpemU3NSIsInJlc2l6ZTUwIiwicmVzaXplMjUiLCJhdXRvU2l6ZSIsIm1pcnJvckhvcml6b250YWwiLCJtaXJyb3JWZXJ0aWNhbCIsInJvdGF0ZUxlZnQiLCJyb3RhdGVSaWdodCIsIm1heFNpemUiLCJtaW5TaXplIiwidGFibGVIZWFkZXIiLCJtZXJnZUNlbGxzIiwic3BsaXRDZWxscyIsIkhvcml6b250YWxTcGxpdCIsIlZlcnRpY2FsU3BsaXQiLCJtZW51Iiwic3BhY2VkIiwiYm9yZGVyZWQiLCJuZW9uIiwidHJhbnNsdWNlbnQiLCJzaGFkb3ciLCJ1bmRlZmluZWQiLCJTVU5FRElUT1JfTEFORyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ro.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ru.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ru.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ru\",\n        toolbar: {\n            default: \"По умолчанию\",\n            save: \"Сохранить\",\n            font: \"Шрифт\",\n            formats: \"Стиль абзаца\",\n            fontSize: \"Размер шрифта\",\n            bold: \"Полужирный\",\n            underline: \"Подчёркнутый\",\n            italic: \"Курсив\",\n            strike: \"Зачеркнутый\",\n            subscript: \"Нижний индекс\",\n            superscript: \"Верхний индекс\",\n            removeFormat: \"Очистить форматирование\",\n            fontColor: \"Цвет текста\",\n            hiliteColor: \"Цвет фона\",\n            indent: \"Увеличить отступ\",\n            outdent: \"Уменьшить отступ\",\n            align: \"Выравнивание\",\n            alignLeft: \"Слева\",\n            alignRight: \"Справа\",\n            alignCenter: \"По центру\",\n            alignJustify: \"По ширине\",\n            list: \"Списки\",\n            orderList: \"Нумерованный\",\n            unorderList: \"Маркированный\",\n            horizontalRule: \"Горизонтальная линия\",\n            hr_solid: \"Сплошная\",\n            hr_dotted: \"Пунктир\",\n            hr_dashed: \"Штриховая\",\n            table: \"Таблица\",\n            link: \"Ссылка\",\n            math: \"математический\",\n            image: \"Изображение\",\n            video: \"Видео\",\n            audio: \"Аудио\",\n            fullScreen: \"Полный экран\",\n            showBlocks: \"Блочный вид\",\n            codeView: \"Редактировать HTML\",\n            undo: \"Отменить\",\n            redo: \"Вернуть\",\n            preview: \"Предварительный просмотр\",\n            print: \"Печать\",\n            tag_p: \"Текст\",\n            tag_div: \"Базовый\",\n            tag_h: \"Заголовок\",\n            tag_blockquote: \"Цитата\",\n            tag_pre: \"Код\",\n            template: \"Шаблон\",\n            lineHeight: \"Высота линии\",\n            paragraphStyle: \"Стиль абзаца\",\n            textStyle: \"Стиль текста\",\n            imageGallery: \"Галерея\",\n            dir_ltr: \"Слева направо\",\n            dir_rtl: \"Справа налево\",\n            mention: \"Упоминание\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Вставить ссылку\",\n                url: \"Ссылка\",\n                text: \"Текст\",\n                newWindowCheck: \"Открывать в новом окне\",\n                downloadLinkCheck: \"Ссылка для скачивания\",\n                bookmark: \"Закладка\"\n            },\n            mathBox: {\n                title: \"математический\",\n                inputLabel: \"Математическая запись\",\n                fontSizeLabel: \"Кегль\",\n                previewLabel: \"Предварительный просмотр\"\n            },\n            imageBox: {\n                title: \"Вставить изображение\",\n                file: \"Выберите файл\",\n                url: \"Адрес изображения\",\n                altText: \"Текстовое описание изображения\"\n            },\n            videoBox: {\n                title: \"Вставить видео\",\n                file: \"Выберите файл\",\n                url: \"Ссылка на видео, Youtube,Vimeo\"\n            },\n            audioBox: {\n                title: \"Вставить аудио\",\n                file: \"Выберите файл\",\n                url: \"Адрес аудио\"\n            },\n            browser: {\n                tags: \"Теги\",\n                search: \"Поиск\"\n            },\n            caption: \"Добавить подпись\",\n            close: \"Закрыть\",\n            submitButton: \"Подтвердить\",\n            revertButton: \"Сбросить\",\n            proportion: \"Сохранить пропорции\",\n            basic: \"Без обтекания\",\n            left: \"Слева\",\n            right: \"Справа\",\n            center: \"По центру\",\n            width: \"Ширина\",\n            height: \"Высота\",\n            size: \"Размер\",\n            ratio: \"Соотношение\"\n        },\n        controller: {\n            edit: \"Изменить\",\n            unlink: \"Убрать ссылку\",\n            remove: \"Удалить\",\n            insertRowAbove: \"Вставить строку выше\",\n            insertRowBelow: \"Вставить строку ниже\",\n            deleteRow: \"Удалить строку\",\n            insertColumnBefore: \"Вставить столбец слева\",\n            insertColumnAfter: \"Вставить столбец справа\",\n            deleteColumn: \"Удалить столбец\",\n            fixedColumnWidth: \"Фиксированная ширина столбца\",\n            resize100: \"Размер 100%\",\n            resize75: \"Размер 75%\",\n            resize50: \"Размер 50%\",\n            resize25: \"Размер 25%\",\n            autoSize: \"Авто размер\",\n            mirrorHorizontal: \"Отразить по горизонтали\",\n            mirrorVertical: \"Отразить по вертикали\",\n            rotateLeft: \"Повернуть против часовой стрелки\",\n            rotateRight: \"Повернуть по часовой стрелке\",\n            maxSize: \"Ширина по размеру страницы\",\n            minSize: \"Ширина по содержимому\",\n            tableHeader: \"Строка заголовков\",\n            mergeCells: \"Объединить ячейки\",\n            splitCells: \"Разделить ячейку\",\n            HorizontalSplit: \"Разделить горизонтально\",\n            VerticalSplit: \"Разделить вертикально\"\n        },\n        menu: {\n            spaced: \"интервал\",\n            bordered: \"Граничная Линия\",\n            neon: \"неон\",\n            translucent: \"полупрозрачный\",\n            shadow: \"Тень\",\n            code: \"Код\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ru\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ru.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/se.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/se.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * \n * Swedish translation by olehrb at github or gmail\n *\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"se\",\n        toolbar: {\n            default: \"Default\",\n            save: \"Spara\",\n            font: \"Typsnitt\",\n            formats: \"Format\",\n            fontSize: \"Textstorlek\",\n            bold: \"Fet\",\n            underline: \"Understruket\",\n            italic: \"Kursiv\",\n            strike: \"\\xd6verstruket\",\n            subscript: \"S\\xe4nkt skrift\",\n            superscript: \"H\\xf6jd skrift\",\n            removeFormat: \"Ta bort formattering\",\n            fontColor: \"Textf\\xe4rg\",\n            hiliteColor: \"Bakgrundsf\\xe4rg\",\n            indent: \"Minska indrag\",\n            outdent: \"\\xd6ka indrag\",\n            align: \"Justering\",\n            alignLeft: \"V\\xe4nsterjustering\",\n            alignRight: \"H\\xf6gerjustering\",\n            alignCenter: \"Mittenjusteirng\",\n            alignJustify: \"Justera indrag\",\n            list: \"Listor\",\n            orderList: \"Numrerad lista\",\n            unorderList: \"Oordnad lista\",\n            horizontalRule: \"Horisontell linje\",\n            hr_solid: \"Solid\",\n            hr_dotted: \"Punkter\",\n            hr_dashed: \"Prickad\",\n            table: \"Tabell\",\n            link: \"L\\xe4nk\",\n            math: \"Math\",\n            image: \"Bild\",\n            video: \"Video\",\n            audio: \"Ljud\",\n            fullScreen: \"Helsk\\xe4rm\",\n            showBlocks: \"Visa block\",\n            codeView: \"Visa koder\",\n            undo: \"\\xc5ngra\",\n            redo: \"G\\xf6r om\",\n            preview: \"Preview\",\n            print: \"Print\",\n            tag_p: \"Paragraf\",\n            tag_div: \"Normal (DIV)\",\n            tag_h: \"Rubrik\",\n            tag_blockquote: \"Citer\",\n            tag_pre: \"Kod\",\n            template: \"Mall\",\n            lineHeight: \"Linjeh\\xf6jd\",\n            paragraphStyle: \"Stil p\\xe5 stycke\",\n            textStyle: \"Textstil\",\n            imageGallery: \"Bildgalleri\",\n            dir_ltr: \"V\\xe4nster till h\\xf6ger\",\n            dir_rtl: \"H\\xf6ger till v\\xe4nster\",\n            mention: \"Namn\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"L\\xe4gg till l\\xe4nk\",\n                url: \"URL till l\\xe4nk\",\n                text: \"L\\xe4nktext\",\n                newWindowCheck: \"\\xd6ppna i nytt f\\xf6nster\",\n                downloadLinkCheck: \"Nedladdningsl\\xe4nk\",\n                bookmark: \"Bokm\\xe4rke\"\n            },\n            mathBox: {\n                title: \"Math\",\n                inputLabel: \"Matematisk notation\",\n                fontSizeLabel: \"Textstorlek\",\n                previewLabel: \"Preview\"\n            },\n            imageBox: {\n                title: \"L\\xe4gg till bild\",\n                file: \"L\\xe4gg till fr\\xe5n fil\",\n                url: \"L\\xe4gg till fr\\xe5n URL\",\n                altText: \"Alternativ text\"\n            },\n            videoBox: {\n                title: \"L\\xe4gg till video\",\n                file: \"L\\xe4gg till fr\\xe5n fil\",\n                url: \"B\\xe4dda in video / YouTube,Vimeo\"\n            },\n            audioBox: {\n                title: \"L\\xe4gg till ljud\",\n                file: \"L\\xe4gg till fr\\xe5n fil\",\n                url: \"L\\xe4gg till fr\\xe5n URL\"\n            },\n            browser: {\n                tags: \"Tags\",\n                search: \"S\\xf6k\"\n            },\n            caption: \"L\\xe4gg till beskrivning\",\n            close: \"St\\xe4ng\",\n            submitButton: \"Skicka\",\n            revertButton: \"\\xc5terg\\xe5\",\n            proportion: \"Spara proportioner\",\n            basic: \"Basic\",\n            left: \"V\\xe4nster\",\n            right: \"H\\xf6ger\",\n            center: \"Center\",\n            width: \"Bredd\",\n            height: \"H\\xf6jd\",\n            size: \"Storlek\",\n            ratio: \"F\\xf6rh\\xe5llande\"\n        },\n        controller: {\n            edit: \"Redigera\",\n            unlink: \"Ta bort l\\xe4nk\",\n            remove: \"Ta bort\",\n            insertRowAbove: \"L\\xe4gg till rad \\xf6ver\",\n            insertRowBelow: \"L\\xe4gg till rad under\",\n            deleteRow: \"Ta bort rad\",\n            insertColumnBefore: \"L\\xe4gg till kolumn f\\xf6re\",\n            insertColumnAfter: \"L\\xe4gg till kolumn efter\",\n            deleteColumn: \"Ta bort kolumner\",\n            fixedColumnWidth: \"Fast kolumnbredd\",\n            resize100: \"F\\xf6rstora 100%\",\n            resize75: \"F\\xf6rstora 75%\",\n            resize50: \"F\\xf6rstora 50%\",\n            resize25: \"F\\xf6rstora 25%\",\n            autoSize: \"Autostorlek\",\n            mirrorHorizontal: \"Spegling, horisontell\",\n            mirrorVertical: \"Spegling, vertikal\",\n            rotateLeft: \"Rotera till v\\xe4nster\",\n            rotateRight: \"Rotera till h\\xf6ger\",\n            maxSize: \"Maxstorlek\",\n            minSize: \"Minsta storlek\",\n            tableHeader: \"Rubrik tabell\",\n            mergeCells: \"Sammanfoga celler (merge)\",\n            splitCells: \"Separera celler\",\n            HorizontalSplit: \"Separera horisontalt\",\n            VerticalSplit: \"Separera vertikalt\"\n        },\n        menu: {\n            spaced: \"Avst\\xe5nd\",\n            bordered: \"Avgr\\xe4nsningslinje\",\n            neon: \"Neon\",\n            translucent: \"Genomskinlig\",\n            shadow: \"Skugga\",\n            code: \"Kod\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"se\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/se.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ua.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ua.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ua\",\n        toolbar: {\n            default: \"По замовчуванням\",\n            save: \"Зберегти\",\n            font: \"Шрифт\",\n            formats: \"Стиль абзацу\",\n            fontSize: \"Розмір шрифту\",\n            bold: \"Жирний\",\n            underline: \"Підкреслений\",\n            italic: \"Курсив\",\n            strike: \"Перекреслити\",\n            subscript: \"Нижній індекс\",\n            superscript: \"Верхній індекс\",\n            removeFormat: \"Очистити форматування\",\n            fontColor: \"Колір тексту\",\n            hiliteColor: \"Колір виділення\",\n            indent: \"Збільшити відступ\",\n            outdent: \"Зменшити відступ\",\n            align: \"Вирівнювання\",\n            alignLeft: \"За лівим краєм\",\n            alignRight: \"За правим краєм\",\n            alignCenter: \"По центру\",\n            alignJustify: \"За шириною\",\n            list: \"Список\",\n            orderList: \"Нумерований\",\n            unorderList: \"Маркований\",\n            horizontalRule: \"Горизонтальна лінія\",\n            hr_solid: \"Суцільна\",\n            hr_dotted: \"Пунктирна\",\n            hr_dashed: \"Штрихова\",\n            table: \"Таблиця\",\n            link: \"Посилання\",\n            math: \"Формула\",\n            image: \"Зображення\",\n            video: \"Відео\",\n            audio: \"Аудіо\",\n            fullScreen: \"Повний екран\",\n            showBlocks: \"Показати блоки\",\n            codeView: \"Редагувати як HTML\",\n            undo: \"Скасувати\",\n            redo: \"Виконати знову\",\n            preview: \"Попередній перегляд\",\n            print: \"Друк\",\n            tag_p: \"Абзац\",\n            tag_div: \"Базовий\",\n            tag_h: \"Заголовок\",\n            tag_blockquote: \"Цитата\",\n            tag_pre: \"Код\",\n            template: \"Шаблон\",\n            lineHeight: \"Висота лінії\",\n            paragraphStyle: \"Стиль абзацу\",\n            textStyle: \"Стиль тексту\",\n            imageGallery: \"Галерея\",\n            dir_ltr: \"Зліва направо\",\n            dir_rtl: \"Справа наліво\",\n            mention: \"Згадати\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"Вставити посилання\",\n                url: \"Посилання\",\n                text: \"Текст\",\n                newWindowCheck: \"Відкривати в новому вікні\",\n                downloadLinkCheck: \"Посилання для завантаження\",\n                bookmark: \"Закладка\"\n            },\n            mathBox: {\n                title: \"Формула\",\n                inputLabel: \"Математична запис\",\n                fontSizeLabel: \"Розмір шрифту\",\n                previewLabel: \"Попередній перегляд\"\n            },\n            imageBox: {\n                title: \"Вставити зображення\",\n                file: \"Виберіть файл\",\n                url: \"Посилання на зображення\",\n                altText: \"Текстовий опис зображення\"\n            },\n            videoBox: {\n                title: \"Вставити відео\",\n                file: \"Виберіть файл\",\n                url: \"Посилання на відео, Youtube, Vimeo\"\n            },\n            audioBox: {\n                title: \"Вставити аудіо\",\n                file: \"Виберіть файл\",\n                url: \"Посилання на аудіо\"\n            },\n            browser: {\n                tags: \"Теги\",\n                search: \"Пошук\"\n            },\n            caption: \"Додати підпис\",\n            close: \"Закрити\",\n            submitButton: \"Підтвердити\",\n            revertButton: \"Скинути\",\n            proportion: \"Зберегти пропорції\",\n            basic: \"Без обтікання\",\n            left: \"Зліва\",\n            right: \"Справа\",\n            center: \"По центру\",\n            width: \"Ширина\",\n            height: \"Висота\",\n            size: \"Розмір\",\n            ratio: \"Співвідношення\"\n        },\n        controller: {\n            edit: \"Змінити\",\n            unlink: \"Прибрати посилання\",\n            remove: \"Видалити\",\n            insertRowAbove: \"Вставити рядок вище\",\n            insertRowBelow: \"Вставити рядок нижче\",\n            deleteRow: \"Видалити рядок\",\n            insertColumnBefore: \"Вставити стовпець зліва\",\n            insertColumnAfter: \"Вставити стовпець справа\",\n            deleteColumn: \"Видалити стовпець\",\n            fixedColumnWidth: \"Фіксована ширина стовпця\",\n            resize100: \"Розмір 100%\",\n            resize75: \"Розмір 75%\",\n            resize50: \"Розмір 50%\",\n            resize25: \"Розмір 25%\",\n            autoSize: \"Авто розмір\",\n            mirrorHorizontal: \"Відобразити по горизонталі\",\n            mirrorVertical: \"Відобразити по вертикалі\",\n            rotateLeft: \"Повернути проти годинникової стрілки\",\n            rotateRight: \"Повернути за годинниковою стрілкою\",\n            maxSize: \"Ширина за розміром сторінки\",\n            minSize: \"Ширина за вмістом\",\n            tableHeader: \"Заголовок таблиці\",\n            mergeCells: \"Об'єднати клітинки\",\n            splitCells: \"Розділити клітинку\",\n            HorizontalSplit: \"Розділити горизонтально\",\n            VerticalSplit: \"Розділити вертикально\"\n        },\n        menu: {\n            spaced: \"Інтервал\",\n            bordered: \"З лініями\",\n            neon: \"Неон\",\n            translucent: \"Напівпрозорий\",\n            shadow: \"Тінь\",\n            code: \"Код\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ua\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ua.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/ur.js":
/*!***********************************************!*\
  !*** ./node_modules/suneditor/src/lang/ur.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"ur\",\n        toolbar: {\n            default: \"طے شدہ\",\n            save: \"محفوظ کریں\",\n            font: \"فونٹ\",\n            formats: \"فارمیٹس\",\n            fontSize: \"سائز\",\n            bold: \"بولڈ\",\n            underline: \"انڈر لائن\",\n            italic: \"ترچھا\",\n            strike: \"لکیرہ کردہ\",\n            subscript: \"ذیلی\",\n            superscript: \"انتہائی\",\n            removeFormat: \"فارمیٹ کو حذف دیں\",\n            fontColor: \"لکھائی کا رنگ\",\n            hiliteColor: \"نمایاں رنگ\",\n            indent: \"حاشیہ\",\n            outdent: \"ہاشیہ واپس\",\n            align: \"رخ\",\n            alignLeft: \"بائیں طرف\",\n            alignRight: \"دائیں طرف\",\n            alignCenter: \"مرکز میں طرف\",\n            alignJustify: \"ہر طرف برابر\",\n            list: \"فہرست\",\n            orderList: \"ترتیب شدہ فہرست\",\n            unorderList: \"غیر ترتیب شدہ فہرست\",\n            horizontalRule: \"لکیر\",\n            hr_solid: \"ٹھوس\",\n            hr_dotted: \"نقطے دار\",\n            hr_dashed: \"ڈیشڈ\",\n            table: \"میز\",\n            link: \"لنک\",\n            math: \"ریاضی\",\n            image: \"تصویر\",\n            video: \"ویڈیو\",\n            audio: \"آواز\",\n            fullScreen: \"پوری اسکرین\",\n            showBlocks: \"ڈبے دکھائیں\",\n            codeView: \"کوڈ کا نظارہ\",\n            undo: \"واپس کریں\",\n            redo: \"دوبارہ کریں\",\n            preview: \"پیشنظر\",\n            print: \"پرنٹ کریں\",\n            tag_p: \"پیراگراف\",\n            tag_div: \"عام (div)\",\n            tag_h: \"ہیڈر\",\n            tag_blockquote: \"اقتباس\",\n            tag_pre: \"کوڈ\",\n            template: \"سانچہ\",\n            lineHeight: \"لکیر کی اونچائی\",\n            paragraphStyle: \"عبارت کا انداز\",\n            textStyle: \"متن کا انداز\",\n            imageGallery: \"تصویری نگارخانہ\",\n            dir_ltr: \"بائیں سے دائیں\",\n            dir_rtl: \"دائیں سے بائیں\",\n            mention: \"تذکرہ\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"لنک داخل کریں\",\n                url: \"لنک کرنے کے لیے URL\",\n                text: \"ظاہر کرنے کے لیے متن\",\n                newWindowCheck: \"نئی ونڈو میں کھولیں\",\n                downloadLinkCheck: \"ڈاؤن لوڈ لنک\",\n                bookmark: \"بک مارک\"\n            },\n            mathBox: {\n                title: \"ریاضی\",\n                inputLabel: \"ریاضیاتی اشارے\",\n                fontSizeLabel: \"حرف کا سائز\",\n                previewLabel: \"پیش نظارہ\"\n            },\n            imageBox: {\n                title: \"تصویر داخل کریں\",\n                file: \"فائلوں سے منتخب کریں\",\n                url: \"تصویری URL\",\n                altText: \"متبادل متن\"\n            },\n            videoBox: {\n                title: \"ویڈیو داخل کریں\",\n                file: \"فائلوں سے منتخب کریں\",\n                url: \"ذرائع ابلاغ کا یو آر ایل، یوٹیوب/ویمیو\"\n            },\n            audioBox: {\n                title: \"آواز داخل کریں\",\n                file: \"فائلوں سے منتخب کریں\",\n                url: \"آواز URL\"\n            },\n            browser: {\n                tags: \"ٹیگز\",\n                search: \"تلاش کریں\"\n            },\n            caption: \"عنوان\",\n            close: \"بند کریں\",\n            submitButton: \"بھیجیں\",\n            revertButton: \"واپس\",\n            proportion: \"تناسب کو محدود کریں\",\n            basic: \"بنیادی\",\n            left: \"بائیں\",\n            right: \"دائیں\",\n            center: \"مرکز\",\n            width: \"چوڑائی\",\n            height: \"اونچائی\",\n            size: \"حجم\",\n            ratio: \"تناسب\"\n        },\n        controller: {\n            edit: \"ترمیم\",\n            unlink: \"لنک ختم کریں\",\n            remove: \"حذف\",\n            insertRowAbove: \"اوپر قطار شامل کریں\",\n            insertRowBelow: \"نیچے قطار شامل کریں\",\n            deleteRow: \"قطار کو حذف کریں\",\n            insertColumnBefore: \"پہلے ستون شامل کریں\",\n            insertColumnAfter: \"اس کے بعد ستون شامل کریں\",\n            deleteColumn: \"ستون حذف کریں\",\n            fixedColumnWidth: \"مقررہ ستون کی چوڑائی\",\n            resize100: \"100% کا حجم تبدیل کریں\",\n            resize75: \"75% کا حجم تبدیل کریں\",\n            resize50: \"50% کا حجم تبدیل کریں\",\n            resize25: \"25% کا حجم تبدیل کریں\",\n            autoSize: \"ازخود حجم\",\n            mirrorHorizontal: \"آئینہ، افقی\",\n            mirrorVertical: \"آئینہ، عمودی\",\n            rotateLeft: \"بائیں گھومو\",\n            rotateRight: \"دائیں گھمائیں\",\n            maxSize: \"زیادہ سے زیادہ سائز\",\n            minSize: \"کم از کم سائز\",\n            tableHeader: \"میز کی سرخی\",\n            mergeCells: \"حجروں کو ضم کریں\",\n            splitCells: \"حجروں کو علیدہ کرو\",\n            HorizontalSplit: \"افقی تقسیم\",\n            VerticalSplit: \"عمودی تقسیم\"\n        },\n        menu: {\n            spaced: \"فاصلہ\",\n            bordered: \"سرحدی\",\n            neon: \"نیین\",\n            translucent: \"پارباسی\",\n            shadow: \"سایہ\",\n            code: \"کوڈ\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"ur\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/ur.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lang/zh_cn.js":
/*!**************************************************!*\
  !*** ./node_modules/suneditor/src/lang/zh_cn.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_LANG a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const lang = {\n        code: \"zh_cn\",\n        toolbar: {\n            default: \"默认\",\n            save: \"保存\",\n            font: \"字体\",\n            formats: \"格式\",\n            fontSize: \"字号\",\n            bold: \"粗体\",\n            underline: \"下划线\",\n            italic: \"斜体\",\n            strike: \"删除线\",\n            subscript: \"下标\",\n            superscript: \"上标\",\n            removeFormat: \"清除格式\",\n            fontColor: \"字体颜色\",\n            hiliteColor: \"背景颜色\",\n            indent: \"增加缩进\",\n            outdent: \"减少缩进\",\n            align: \"对齐方式\",\n            alignLeft: \"左对齐\",\n            alignRight: \"右对齐\",\n            alignCenter: \"居中\",\n            alignJustify: \"两端对齐\",\n            list: \"列表\",\n            orderList: \"有序列表\",\n            unorderList: \"无序列表\",\n            horizontalRule: \"水平线\",\n            hr_solid: \"实线\",\n            hr_dotted: \"点线\",\n            hr_dashed: \"虚线\",\n            table: \"表格\",\n            link: \"超链接\",\n            math: \"数学\",\n            image: \"图片\",\n            video: \"视频\",\n            audio: \"音讯\",\n            fullScreen: \"全屏\",\n            showBlocks: \"显示块区域\",\n            codeView: \"代码视图\",\n            undo: \"撤消\",\n            redo: \"恢复\",\n            preview: \"预览\",\n            print: \"打印\",\n            tag_p: \"段落\",\n            tag_div: \"正文 (DIV)\",\n            tag_h: \"标题\",\n            tag_blockquote: \"引用\",\n            tag_pre: \"代码\",\n            template: \"模板\",\n            lineHeight: \"行高\",\n            paragraphStyle: \"段落样式\",\n            textStyle: \"文字样式\",\n            imageGallery: \"图片库\",\n            dir_ltr: \"左到右\",\n            dir_rtl: \"右到左\",\n            mention: \"提到\"\n        },\n        dialogBox: {\n            linkBox: {\n                title: \"插入超链接\",\n                url: \"网址\",\n                text: \"要显示的文字\",\n                newWindowCheck: \"在新标签页中打开\",\n                downloadLinkCheck: \"下载链接\",\n                bookmark: \"书签\"\n            },\n            mathBox: {\n                title: \"数学\",\n                inputLabel: \"数学符号\",\n                fontSizeLabel: \"字号\",\n                previewLabel: \"预览\"\n            },\n            imageBox: {\n                title: \"插入图片\",\n                file: \"上传图片\",\n                url: \"图片网址\",\n                altText: \"替换文字\"\n            },\n            videoBox: {\n                title: \"插入视频\",\n                file: \"上传图片\",\n                url: \"嵌入网址, Youtube,Vimeo\"\n            },\n            audioBox: {\n                title: \"插入音频\",\n                file: \"上传图片\",\n                url: \"音频网址\"\n            },\n            browser: {\n                tags: \"标签\",\n                search: \"搜索\"\n            },\n            caption: \"标题\",\n            close: \"取消\",\n            submitButton: \"确定\",\n            revertButton: \"恢复\",\n            proportion: \"比例\",\n            basic: \"基本\",\n            left: \"左\",\n            right: \"右\",\n            center: \"居中\",\n            width: \"宽度\",\n            height: \"高度\",\n            size: \"尺寸\",\n            ratio: \"比\"\n        },\n        controller: {\n            edit: \"编辑\",\n            unlink: \"去除链接\",\n            remove: \"删除\",\n            insertRowAbove: \"在上方插入\",\n            insertRowBelow: \"在下方插入\",\n            deleteRow: \"删除行\",\n            insertColumnBefore: \"在左侧插入\",\n            insertColumnAfter: \"在右侧插入\",\n            deleteColumn: \"删除列\",\n            fixedColumnWidth: \"固定列宽\",\n            resize100: \"放大 100%\",\n            resize75: \"放大 75%\",\n            resize50: \"放大 50%\",\n            resize25: \"放大 25%\",\n            mirrorHorizontal: \"翻转左右\",\n            mirrorVertical: \"翻转上下\",\n            rotateLeft: \"向左旋转\",\n            rotateRight: \"向右旋转\",\n            maxSize: \"最大尺寸\",\n            minSize: \"最小尺寸\",\n            tableHeader: \"表格标题\",\n            mergeCells: \"合并单元格\",\n            splitCells: \"分割单元格\",\n            HorizontalSplit: \"水平分割\",\n            VerticalSplit: \"垂直分割\"\n        },\n        menu: {\n            spaced: \"间隔开\",\n            bordered: \"边界线\",\n            neon: \"霓虹灯\",\n            translucent: \"半透明\",\n            shadow: \"阴影\",\n            code: \"代码\"\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_LANG) {\n            Object.defineProperty(window1, \"SUNEDITOR_LANG\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_LANG, \"zh_cn\", {\n            enumerable: true,\n            writable: true,\n            configurable: true,\n            value: lang\n        });\n    }\n    return lang;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lang/zh_cn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lib/constructor.js":
/*!*******************************************************!*\
  !*** ./node_modules/suneditor/src/lib/constructor.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _assets_defaultIcons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assets/defaultIcons */ \"(app-pages-browser)/./node_modules/suneditor/src/assets/defaultIcons.js\");\n/* harmony import */ var _lang_en__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lang/en */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/en.js\");\n/* harmony import */ var _lang_en__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lang_en__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/util.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    /**\r\n     * @description document create\r\n     * @param {Element} element Textarea\r\n     * @param {Object} options Options\r\n     * @returns {Object}\r\n     */ init: function(element, options) {\n        if (typeof options !== \"object\") options = {};\n        const doc = document;\n        /** --- init options --- */ this._initOptions(element, options);\n        // suneditor div\n        const top_div = doc.createElement(\"DIV\");\n        top_div.className = \"sun-editor\" + (options.rtl ? \" se-rtl\" : \"\");\n        if (element.id) top_div.id = \"suneditor_\" + element.id;\n        // relative div\n        const relative = doc.createElement(\"DIV\");\n        relative.className = \"se-container\";\n        // toolbar\n        const tool_bar = this._createToolBar(doc, options.buttonList, options.plugins, options);\n        const toolbarShadow = tool_bar.element.cloneNode(false);\n        toolbarShadow.className += \" se-toolbar-shadow\";\n        tool_bar.element.style.visibility = \"hidden\";\n        if (tool_bar.pluginCallButtons.math) this._checkKatexMath(options.katex);\n        const arrow = doc.createElement(\"DIV\");\n        arrow.className = \"se-arrow\";\n        // sticky toolbar dummy\n        const sticky_dummy = doc.createElement(\"DIV\");\n        sticky_dummy.className = \"se-toolbar-sticky-dummy\";\n        // inner editor div\n        const editor_div = doc.createElement(\"DIV\");\n        editor_div.className = \"se-wrapper\";\n        /** --- init elements and create bottom bar --- */ const initElements = this._initElements(options, top_div, tool_bar.element, arrow);\n        const bottomBar = initElements.bottomBar;\n        const wysiwyg_div = initElements.wysiwygFrame;\n        const placeholder_span = initElements.placeholder;\n        let textarea = initElements.codeView;\n        // resizing bar\n        const resizing_bar = bottomBar.resizingBar;\n        const navigation = bottomBar.navigation;\n        const char_wrapper = bottomBar.charWrapper;\n        const char_counter = bottomBar.charCounter;\n        // loading box\n        const loading_box = doc.createElement(\"DIV\");\n        loading_box.className = \"se-loading-box sun-editor-common\";\n        loading_box.innerHTML = '<div class=\"se-loading-effect\"></div>';\n        // enter line\n        const line_breaker = doc.createElement(\"DIV\");\n        line_breaker.className = \"se-line-breaker\";\n        line_breaker.innerHTML = '<button class=\"se-btn\">' + options.icons.line_break + \"</button>\";\n        const line_breaker_t = doc.createElement(\"DIV\");\n        line_breaker_t.className += \"se-line-breaker-component\";\n        const line_breaker_b = line_breaker_t.cloneNode(true);\n        line_breaker_t.innerHTML = line_breaker_b.innerHTML = options.icons.line_break;\n        // resize operation background\n        const resize_back = doc.createElement(\"DIV\");\n        resize_back.className = \"se-resizing-back\";\n        /// focus temp\n        const focusTemp = doc.createElement(\"INPUT\");\n        focusTemp.tabIndex = -1;\n        focusTemp.style.cssText = \"position: fixed !important; top: -10000px !important; display: block !important; width: 0 !important; height: 0 !important; margin: 0 !important; padding: 0 !important;\";\n        // toolbar container\n        const toolbarContainer = options.toolbarContainer;\n        if (toolbarContainer) {\n            toolbarContainer.appendChild(tool_bar.element);\n            toolbarContainer.appendChild(toolbarShadow);\n        }\n        // resizingbar\n        const resizingBarContainer = options.resizingBarContainer;\n        if (resizing_bar && resizingBarContainer) resizingBarContainer.appendChild(resizing_bar);\n        /** append html */ editor_div.appendChild(textarea);\n        if (placeholder_span) editor_div.appendChild(placeholder_span);\n        if (!toolbarContainer) {\n            relative.appendChild(tool_bar.element);\n            relative.appendChild(toolbarShadow);\n        }\n        relative.appendChild(sticky_dummy);\n        relative.appendChild(editor_div);\n        relative.appendChild(resize_back);\n        relative.appendChild(loading_box);\n        relative.appendChild(line_breaker);\n        relative.appendChild(line_breaker_t);\n        relative.appendChild(line_breaker_b);\n        relative.appendChild(focusTemp);\n        if (resizing_bar && !resizingBarContainer) relative.appendChild(resizing_bar);\n        top_div.appendChild(relative);\n        textarea = this._checkCodeMirror(options, textarea);\n        return {\n            constructed: {\n                _top: top_div,\n                _relative: relative,\n                _toolBar: tool_bar.element,\n                _toolbarShadow: toolbarShadow,\n                _menuTray: tool_bar._menuTray,\n                _editorArea: editor_div,\n                _wysiwygArea: wysiwyg_div,\n                _codeArea: textarea,\n                _placeholder: placeholder_span,\n                _resizingBar: resizing_bar,\n                _navigation: navigation,\n                _charWrapper: char_wrapper,\n                _charCounter: char_counter,\n                _loading: loading_box,\n                _lineBreaker: line_breaker,\n                _lineBreaker_t: line_breaker_t,\n                _lineBreaker_b: line_breaker_b,\n                _resizeBack: resize_back,\n                _stickyDummy: sticky_dummy,\n                _arrow: arrow,\n                _focusTemp: focusTemp\n            },\n            options: options,\n            plugins: tool_bar.plugins,\n            pluginCallButtons: tool_bar.pluginCallButtons,\n            _responsiveButtons: tool_bar.responsiveButtons\n        };\n    },\n    /**\r\n     * @description Check the CodeMirror option to apply the CodeMirror and return the CodeMirror element.\r\n     * @param {Object} options options\r\n     * @param {Element} textarea textarea element\r\n     * @private\r\n     */ _checkCodeMirror: function(options, textarea) {\n        if (options.codeMirror) {\n            const cmOptions = [\n                {\n                    mode: \"htmlmixed\",\n                    htmlMode: true,\n                    lineNumbers: true,\n                    lineWrapping: true\n                },\n                options.codeMirror.options || {}\n            ].reduce(function(init, option) {\n                for(let key in option){\n                    if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(option, key)) init[key] = option[key];\n                }\n                return init;\n            }, {});\n            if (options.height === \"auto\") {\n                cmOptions.viewportMargin = Infinity;\n                cmOptions.height = \"auto\";\n            }\n            const cm = options.codeMirror.src.fromTextArea(textarea, cmOptions);\n            cm.display.wrapper.style.cssText = textarea.style.cssText;\n            options.codeMirrorEditor = cm;\n            textarea = cm.display.wrapper;\n            textarea.className += \" se-wrapper-code-mirror\";\n        }\n        return textarea;\n    },\n    /**\r\n     * @description Check for a katex object.\r\n     * @param {Object} katex katex object\r\n     * @private\r\n     */ _checkKatexMath: function(katex) {\n        if (!katex) throw Error('[SUNEDITOR.create.fail] To use the math button you need to add a \"katex\" object to the options.');\n        const katexOptions = [\n            {\n                throwOnError: false\n            },\n            katex.options || {}\n        ].reduce(function(init, option) {\n            for(let key in option){\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(option, key)) init[key] = option[key];\n            }\n            return init;\n        }, {});\n        katex.options = katexOptions;\n    },\n    /**\r\n     * @description Add or reset options\r\n     * @param {Object} mergeOptions New options property\r\n     * @param {Object} context Context object of core\r\n     * @param {Object} originOptions Origin options\r\n     * @returns {Object} pluginCallButtons\r\n     * @private\r\n     */ _setOptions: function(mergeOptions, context, originOptions) {\n        this._initOptions(context.element.originElement, mergeOptions);\n        const el = context.element;\n        const relative = el.relative;\n        const editorArea = el.editorArea;\n        const isNewToolbarContainer = mergeOptions.toolbarContainer && mergeOptions.toolbarContainer !== originOptions.toolbarContainer;\n        const isNewToolbar = mergeOptions.lang !== originOptions.lang || mergeOptions.buttonList !== originOptions.buttonList || mergeOptions.mode !== originOptions.mode || isNewToolbarContainer;\n        const tool_bar = this._createToolBar(document, isNewToolbar ? mergeOptions.buttonList : originOptions.buttonList, mergeOptions.plugins, mergeOptions);\n        if (tool_bar.pluginCallButtons.math) this._checkKatexMath(mergeOptions.katex);\n        const arrow = document.createElement(\"DIV\");\n        arrow.className = \"se-arrow\";\n        if (isNewToolbar) {\n            tool_bar.element.style.visibility = \"hidden\";\n            // toolbar container\n            if (isNewToolbarContainer) {\n                mergeOptions.toolbarContainer.appendChild(tool_bar.element);\n                el.toolbar.parentElement.removeChild(el.toolbar);\n            } else {\n                el.toolbar.parentElement.replaceChild(tool_bar.element, el.toolbar);\n            }\n            el.toolbar = tool_bar.element;\n            el._menuTray = tool_bar._menuTray;\n            el._arrow = arrow;\n        }\n        const initElements = this._initElements(mergeOptions, el.topArea, isNewToolbar ? tool_bar.element : el.toolbar, arrow);\n        const bottomBar = initElements.bottomBar;\n        const wysiwygFrame = initElements.wysiwygFrame;\n        const placeholder_span = initElements.placeholder;\n        let code = initElements.codeView;\n        if (el.resizingBar) _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeItem(el.resizingBar);\n        if (bottomBar.resizingBar) {\n            if (mergeOptions.resizingBarContainer && mergeOptions.resizingBarContainer !== originOptions.resizingBarContainer) {\n                mergeOptions.resizingBarContainer.appendChild(bottomBar.resizingBar);\n            } else {\n                relative.appendChild(bottomBar.resizingBar);\n            }\n        }\n        editorArea.innerHTML = \"\";\n        editorArea.appendChild(code);\n        if (placeholder_span) editorArea.appendChild(placeholder_span);\n        code = this._checkCodeMirror(mergeOptions, code);\n        el.resizingBar = bottomBar.resizingBar;\n        el.navigation = bottomBar.navigation;\n        el.charWrapper = bottomBar.charWrapper;\n        el.charCounter = bottomBar.charCounter;\n        el.wysiwygFrame = wysiwygFrame;\n        el.code = code;\n        el.placeholder = placeholder_span;\n        if (mergeOptions.rtl) _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addClass(el.topArea, \"se-rtl\");\n        else _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeClass(el.topArea, \"se-rtl\");\n        return {\n            callButtons: tool_bar.pluginCallButtons,\n            plugins: tool_bar.plugins,\n            toolbar: tool_bar\n        };\n    },\n    /**\r\n     * @description Initialize property of suneditor elements\r\n     * @param {Object} options Options\r\n     * @param {Element} topDiv Suneditor top div\r\n     * @param {Element} toolBar Tool bar\r\n     * @param {Element} toolBarArrow Tool bar arrow (balloon editor)\r\n     * @returns {Object} Bottom bar elements (resizingBar, navigation, charWrapper, charCounter)\r\n     * @private\r\n     */ _initElements: function(options, topDiv, toolBar, toolBarArrow) {\n        /** top div */ topDiv.style.cssText = options._editorStyles.top;\n        /** toolbar */ if (/inline/i.test(options.mode)) {\n            toolBar.className += \" se-toolbar-inline\";\n            toolBar.style.width = options.toolbarWidth;\n        } else if (/balloon/i.test(options.mode)) {\n            toolBar.className += \" se-toolbar-balloon\";\n            toolBar.style.width = options.toolbarWidth;\n            toolBar.appendChild(toolBarArrow);\n        }\n        /** editor */ // wysiwyg div or iframe\n        const wysiwygDiv = document.createElement(!options.iframe ? \"DIV\" : \"IFRAME\");\n        wysiwygDiv.className = \"se-wrapper-inner se-wrapper-wysiwyg\";\n        if (!options.iframe) {\n            wysiwygDiv.setAttribute(\"contenteditable\", true);\n            wysiwygDiv.setAttribute(\"autocorrect\", \"off\");\n            wysiwygDiv.setAttribute(\"scrolling\", \"auto\");\n            for(let key in options.iframeAttributes){\n                wysiwygDiv.setAttribute(key, options.iframeAttributes[key]);\n            }\n            wysiwygDiv.className += \" \" + options._editableClass;\n            wysiwygDiv.style.cssText = options._editorStyles.frame + options._editorStyles.editor;\n            wysiwygDiv.className += options.className;\n        } else {\n            wysiwygDiv.allowFullscreen = true;\n            wysiwygDiv.frameBorder = 0;\n            wysiwygDiv.style.cssText = options._editorStyles.frame;\n            wysiwygDiv.className += options.className;\n        }\n        // textarea for code view\n        const textarea = document.createElement(\"TEXTAREA\");\n        textarea.className = \"se-wrapper-inner se-wrapper-code\" + options.className;\n        textarea.style.cssText = options._editorStyles.frame;\n        textarea.style.display = \"none\";\n        if (options.height === \"auto\") textarea.style.overflow = \"hidden\";\n        /** resize bar */ let resizingBar = null;\n        let navigation = null;\n        let charWrapper = null;\n        let charCounter = null;\n        if (options.resizingBar) {\n            resizingBar = document.createElement(\"DIV\");\n            resizingBar.className = \"se-resizing-bar sun-editor-common\";\n            /** navigation */ navigation = document.createElement(\"DIV\");\n            navigation.className = \"se-navigation sun-editor-common\";\n            resizingBar.appendChild(navigation);\n            /** char counter */ if (options.charCounter) {\n                charWrapper = document.createElement(\"DIV\");\n                charWrapper.className = \"se-char-counter-wrapper\";\n                if (options.charCounterLabel) {\n                    const charLabel = document.createElement(\"SPAN\");\n                    charLabel.className = \"se-char-label\";\n                    charLabel.textContent = options.charCounterLabel;\n                    charWrapper.appendChild(charLabel);\n                }\n                charCounter = document.createElement(\"SPAN\");\n                charCounter.className = \"se-char-counter\";\n                charCounter.textContent = \"0\";\n                charWrapper.appendChild(charCounter);\n                if (options.maxCharCount > 0) {\n                    const char_max = document.createElement(\"SPAN\");\n                    char_max.textContent = \" / \" + options.maxCharCount;\n                    charWrapper.appendChild(char_max);\n                }\n                resizingBar.appendChild(charWrapper);\n            }\n        }\n        let placeholder = null;\n        if (options.placeholder) {\n            placeholder = document.createElement(\"SPAN\");\n            placeholder.className = \"se-placeholder\";\n            placeholder.innerText = options.placeholder;\n        }\n        return {\n            bottomBar: {\n                resizingBar: resizingBar,\n                navigation: navigation,\n                charWrapper: charWrapper,\n                charCounter: charCounter\n            },\n            wysiwygFrame: wysiwygDiv,\n            codeView: textarea,\n            placeholder: placeholder\n        };\n    },\n    /**\r\n     * @description Initialize options\r\n     * @param {Element} element Options object\r\n     * @param {Object} options Options object\r\n     * @private\r\n     */ _initOptions: function(element, options) {\n        const plugins = {};\n        if (options.plugins) {\n            const _plugins = options.plugins;\n            const pluginsValues = _plugins.length ? _plugins : Object.keys(_plugins).map(function(name) {\n                return _plugins[name];\n            });\n            for(let i = 0, len = pluginsValues.length, p; i < len; i++){\n                p = pluginsValues[i].default || pluginsValues[i];\n                plugins[p.name] = p;\n            }\n        }\n        options.plugins = plugins;\n        /** Values */ options.strictMode = options.strictMode !== false;\n        options.lang = options.lang || (_lang_en__WEBPACK_IMPORTED_MODULE_1___default());\n        options.value = typeof options.value === \"string\" ? options.value : null;\n        options.allowedClassNames = new _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._w.RegExp((options.allowedClassNames && typeof options.allowedClassNames === \"string\" ? options.allowedClassNames + \"|\" : \"\") + \"^__se__|se-|katex\");\n        options.historyStackDelayTime = typeof options.historyStackDelayTime === \"number\" ? options.historyStackDelayTime : 400;\n        options.frameAttrbutes = options.frameAttrbutes || {};\n        // tag style\n        options.defaultTag = typeof options.defaultTag === \"string\" && options.defaultTag.length > 0 ? options.defaultTag : \"p\";\n        const textTags = options.textTags = [\n            {\n                bold: \"STRONG\",\n                underline: \"U\",\n                italic: \"EM\",\n                strike: \"DEL\",\n                sub: \"SUB\",\n                sup: \"SUP\"\n            },\n            options.textTags || {}\n        ].reduce(function(_default, _new) {\n            for(let key in _new){\n                _default[key] = _new[key];\n            }\n            return _default;\n        }, {});\n        options._textTagsMap = {\n            \"strong\": textTags.bold.toLowerCase(),\n            \"b\": textTags.bold.toLowerCase(),\n            \"u\": textTags.underline.toLowerCase(),\n            \"ins\": textTags.underline.toLowerCase(),\n            \"em\": textTags.italic.toLowerCase(),\n            \"i\": textTags.italic.toLowerCase(),\n            \"del\": textTags.strike.toLowerCase(),\n            \"strike\": textTags.strike.toLowerCase(),\n            \"s\": textTags.strike.toLowerCase(),\n            \"sub\": textTags.sub.toLowerCase(),\n            \"sup\": textTags.sup.toLowerCase()\n        };\n        options._defaultCommand = {\n            bold: options.textTags.bold,\n            underline: options.textTags.underline,\n            italic: options.textTags.italic,\n            strike: options.textTags.strike,\n            subscript: options.textTags.sub,\n            superscript: options.textTags.sup\n        };\n        /** Whitelist, Blacklist */ options.__allowedScriptTag = options.__allowedScriptTag === true;\n        const whitelist = \"br|p|div|pre|blockquote|h1|h2|h3|h4|h5|h6|ol|ul|li|hr|figure|figcaption|img|iframe|audio|video|source|table|thead|tbody|tr|th|td|a|b|strong|var|i|em|u|ins|s|span|strike|del|sub|sup|code|svg|path|details|summary\";\n        // tags\n        options.tagsBlacklist = options.tagsBlacklist || \"\";\n        options._defaultTagsWhitelist = (typeof options._defaultTagsWhitelist === \"string\" ? options._defaultTagsWhitelist : whitelist) + (options.__allowedScriptTag ? \"|script\" : \"\");\n        options._editorTagsWhitelist = options.addTagsWhitelist === \"*\" ? \"*\" : this._setWhitelist(options._defaultTagsWhitelist + (typeof options.addTagsWhitelist === \"string\" && options.addTagsWhitelist.length > 0 ? \"|\" + options.addTagsWhitelist : \"\"), options.tagsBlacklist);\n        // paste tags\n        options.pasteTagsBlacklist = options.tagsBlacklist + (options.tagsBlacklist && options.pasteTagsBlacklist ? \"|\" + options.pasteTagsBlacklist : options.pasteTagsBlacklist || \"\");\n        options.pasteTagsWhitelist = options.pasteTagsWhitelist === \"*\" ? \"*\" : this._setWhitelist(typeof options.pasteTagsWhitelist === \"string\" ? options.pasteTagsWhitelist : options._editorTagsWhitelist, options.pasteTagsBlacklist);\n        // tag attributes\n        options.attributesWhitelist = !options.attributesWhitelist || typeof options.attributesWhitelist !== \"object\" ? null : options.attributesWhitelist;\n        options.attributesBlacklist = !options.attributesBlacklist || typeof options.attributesBlacklist !== \"object\" ? null : options.attributesBlacklist;\n        /** Layout */ options.mode = options.mode || \"classic\"; // classic, inline, balloon, balloon-always\n        options.rtl = !!options.rtl;\n        options.lineAttrReset = [\n            \"id\"\n        ].concat(options.lineAttrReset && typeof options.lineAttrReset === \"string\" ? options.lineAttrReset.toLowerCase().split(\"|\") : []);\n        options._editableClass = \"sun-editor-editable\" + (options.rtl ? \" se-rtl\" : \"\");\n        options._printClass = typeof options._printClass === \"string\" ? options._printClass : null;\n        options.toolbarWidth = options.toolbarWidth ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.toolbarWidth) ? options.toolbarWidth + \"px\" : options.toolbarWidth : \"auto\";\n        options.toolbarContainer = typeof options.toolbarContainer === \"string\" ? document.querySelector(options.toolbarContainer) : options.toolbarContainer;\n        options.stickyToolbar = /balloon/i.test(options.mode) || !!options.toolbarContainer ? -1 : options.stickyToolbar === undefined ? 0 : /^\\d+/.test(options.stickyToolbar) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.stickyToolbar, 0) : -1;\n        options.hideToolbar = !!options.hideToolbar;\n        options.fullScreenOffset = options.fullScreenOffset === undefined ? 0 : /^\\d+/.test(options.fullScreenOffset) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.fullScreenOffset, 0) : 0;\n        options.fullPage = !!options.fullPage;\n        options.iframe = options.fullPage || !!options.iframe;\n        options.iframeAttributes = options.iframeAttributes || {};\n        options.iframeCSSFileName = options.iframe ? typeof options.iframeCSSFileName === \"string\" ? [\n            options.iframeCSSFileName\n        ] : options.iframeCSSFileName || [\n            \"suneditor\"\n        ] : null;\n        options.previewTemplate = typeof options.previewTemplate === \"string\" ? options.previewTemplate : null;\n        options.printTemplate = typeof options.printTemplate === \"string\" ? options.printTemplate : null;\n        /** CodeMirror object */ options.codeMirror = options.codeMirror ? options.codeMirror.src ? options.codeMirror : {\n            src: options.codeMirror\n        } : null;\n        /** katex object (Math plugin) */ options.katex = options.katex ? options.katex.src ? options.katex : {\n            src: options.katex\n        } : null;\n        options.mathFontSize = !!options.mathFontSize ? options.mathFontSize : [\n            {\n                text: \"1\",\n                value: \"1em\"\n            },\n            {\n                text: \"1.5\",\n                value: \"1.5em\"\n            },\n            {\n                text: \"2\",\n                value: \"2em\"\n            },\n            {\n                text: \"2.5\",\n                value: \"2.5em\"\n            }\n        ];\n        /** Display */ options.position = typeof options.position === \"string\" ? options.position : null;\n        options.display = options.display || (element.style.display === \"none\" || !element.style.display ? \"block\" : element.style.display);\n        options.popupDisplay = options.popupDisplay || \"full\";\n        /** Bottom resizing bar */ options.resizingBar = options.resizingBar === undefined ? /inline|balloon/i.test(options.mode) ? false : true : options.resizingBar;\n        options.showPathLabel = !options.resizingBar ? false : typeof options.showPathLabel === \"boolean\" ? options.showPathLabel : true;\n        options.resizeEnable = options.resizeEnable === undefined ? true : !!options.resizeEnable;\n        options.resizingBarContainer = typeof options.resizingBarContainer === \"string\" ? document.querySelector(options.resizingBarContainer) : options.resizingBarContainer;\n        /** Character count */ options.charCounter = options.maxCharCount > 0 ? true : typeof options.charCounter === \"boolean\" ? options.charCounter : false;\n        options.charCounterType = typeof options.charCounterType === \"string\" ? options.charCounterType : \"char\";\n        options.charCounterLabel = typeof options.charCounterLabel === \"string\" ? options.charCounterLabel.trim() : null;\n        options.maxCharCount = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.maxCharCount) && options.maxCharCount > -1 ? options.maxCharCount * 1 : null;\n        /** Width size */ options.width = options.width ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.width) ? options.width + \"px\" : options.width : element.clientWidth ? element.clientWidth + \"px\" : \"100%\";\n        options.minWidth = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.minWidth) ? options.minWidth + \"px\" : options.minWidth) || \"\";\n        options.maxWidth = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.maxWidth) ? options.maxWidth + \"px\" : options.maxWidth) || \"\";\n        /** Height size */ options.height = options.height ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.height) ? options.height + \"px\" : options.height : element.clientHeight ? element.clientHeight + \"px\" : \"auto\";\n        options.minHeight = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.minHeight) ? options.minHeight + \"px\" : options.minHeight) || \"\";\n        options.maxHeight = (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.maxHeight) ? options.maxHeight + \"px\" : options.maxHeight) || \"\";\n        /** Editing area */ options.className = typeof options.className === \"string\" && options.className.length > 0 ? \" \" + options.className : \"\";\n        options.defaultStyle = typeof options.defaultStyle === \"string\" ? options.defaultStyle : \"\";\n        /** Defining menu items */ options.font = !options.font ? [\n            \"Arial\",\n            \"Comic Sans MS\",\n            \"Courier New\",\n            \"Impact\",\n            \"Georgia\",\n            \"tahoma\",\n            \"Trebuchet MS\",\n            \"Verdana\"\n        ] : options.font;\n        options.fontSize = !options.fontSize ? null : options.fontSize;\n        options.formats = !options.formats ? null : options.formats;\n        options.colorList = !options.colorList ? null : options.colorList;\n        options.lineHeights = !options.lineHeights ? null : options.lineHeights;\n        options.paragraphStyles = !options.paragraphStyles ? null : options.paragraphStyles;\n        options.textStyles = !options.textStyles ? null : options.textStyles;\n        options.fontSizeUnit = typeof options.fontSizeUnit === \"string\" ? options.fontSizeUnit.trim().toLowerCase() || \"px\" : \"px\";\n        options.alignItems = typeof options.alignItems === \"object\" ? options.alignItems : options.rtl ? [\n            \"right\",\n            \"center\",\n            \"left\",\n            \"justify\"\n        ] : [\n            \"left\",\n            \"center\",\n            \"right\",\n            \"justify\"\n        ];\n        /** Image */ options.imageResizing = options.imageResizing === undefined ? true : options.imageResizing;\n        options.imageHeightShow = options.imageHeightShow === undefined ? true : !!options.imageHeightShow;\n        options.imageAlignShow = options.imageAlignShow === undefined ? true : !!options.imageAlignShow;\n        options.imageWidth = !options.imageWidth ? \"auto\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.imageWidth) ? options.imageWidth + \"px\" : options.imageWidth;\n        options.imageHeight = !options.imageHeight ? \"auto\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.imageHeight) ? options.imageHeight + \"px\" : options.imageHeight;\n        options.imageSizeOnlyPercentage = !!options.imageSizeOnlyPercentage;\n        options._imageSizeUnit = options.imageSizeOnlyPercentage ? \"%\" : \"px\";\n        options.imageRotation = options.imageRotation !== undefined ? options.imageRotation : !(options.imageSizeOnlyPercentage || !options.imageHeightShow);\n        options.imageFileInput = options.imageFileInput === undefined ? true : options.imageFileInput;\n        options.imageUrlInput = options.imageUrlInput === undefined || !options.imageFileInput ? true : options.imageUrlInput;\n        options.imageUploadHeader = options.imageUploadHeader || null;\n        options.imageUploadUrl = typeof options.imageUploadUrl === \"string\" ? options.imageUploadUrl : null;\n        options.imageUploadSizeLimit = /\\d+/.test(options.imageUploadSizeLimit) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.imageUploadSizeLimit, 0) : null;\n        options.imageMultipleFile = !!options.imageMultipleFile;\n        options.imageAccept = typeof options.imageAccept !== \"string\" || options.imageAccept.trim() === \"*\" ? \"image/*\" : options.imageAccept.trim() || \"image/*\";\n        /** Image - image gallery */ options.imageGalleryUrl = typeof options.imageGalleryUrl === \"string\" ? options.imageGalleryUrl : null;\n        options.imageGalleryHeader = options.imageGalleryHeader || null;\n        /** Video */ options.videoResizing = options.videoResizing === undefined ? true : options.videoResizing;\n        options.videoHeightShow = options.videoHeightShow === undefined ? true : !!options.videoHeightShow;\n        options.videoAlignShow = options.videoAlignShow === undefined ? true : !!options.videoAlignShow;\n        options.videoRatioShow = options.videoRatioShow === undefined ? true : !!options.videoRatioShow;\n        options.videoWidth = !options.videoWidth || !_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoWidth, 0) ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.videoWidth) ? options.videoWidth + \"px\" : options.videoWidth;\n        options.videoHeight = !options.videoHeight || !_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoHeight, 0) ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.videoHeight) ? options.videoHeight + \"px\" : options.videoHeight;\n        options.videoSizeOnlyPercentage = !!options.videoSizeOnlyPercentage;\n        options._videoSizeUnit = options.videoSizeOnlyPercentage ? \"%\" : \"px\";\n        options.videoRotation = options.videoRotation !== undefined ? options.videoRotation : !(options.videoSizeOnlyPercentage || !options.videoHeightShow);\n        options.videoRatio = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoRatio, 4) || 0.5625;\n        options.videoRatioList = !options.videoRatioList ? null : options.videoRatioList;\n        options.youtubeQuery = (options.youtubeQuery || \"\").replace(\"?\", \"\");\n        options.vimeoQuery = (options.vimeoQuery || \"\").replace(\"?\", \"\");\n        options.videoFileInput = !!options.videoFileInput;\n        options.videoUrlInput = options.videoUrlInput === undefined || !options.videoFileInput ? true : options.videoUrlInput;\n        options.videoUploadHeader = options.videoUploadHeader || null;\n        options.videoUploadUrl = typeof options.videoUploadUrl === \"string\" ? options.videoUploadUrl : null;\n        options.videoUploadSizeLimit = /\\d+/.test(options.videoUploadSizeLimit) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.videoUploadSizeLimit, 0) : null;\n        options.videoMultipleFile = !!options.videoMultipleFile;\n        options.videoTagAttrs = options.videoTagAttrs || null;\n        options.videoIframeAttrs = options.videoIframeAttrs || null;\n        options.videoAccept = typeof options.videoAccept !== \"string\" || options.videoAccept.trim() === \"*\" ? \"video/*\" : options.videoAccept.trim() || \"video/*\";\n        /** Audio */ options.audioWidth = !options.audioWidth ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.audioWidth) ? options.audioWidth + \"px\" : options.audioWidth;\n        options.audioHeight = !options.audioHeight ? \"\" : _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isNumber(options.audioHeight) ? options.audioHeight + \"px\" : options.audioHeight;\n        options.audioFileInput = !!options.audioFileInput;\n        options.audioUrlInput = options.audioUrlInput === undefined || !options.audioFileInput ? true : options.audioUrlInput;\n        options.audioUploadHeader = options.audioUploadHeader || null;\n        options.audioUploadUrl = typeof options.audioUploadUrl === \"string\" ? options.audioUploadUrl : null;\n        options.audioUploadSizeLimit = /\\d+/.test(options.audioUploadSizeLimit) ? _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumber(options.audioUploadSizeLimit, 0) : null;\n        options.audioMultipleFile = !!options.audioMultipleFile;\n        options.audioTagAttrs = options.audioTagAttrs || null;\n        options.audioAccept = typeof options.audioAccept !== \"string\" || options.audioAccept.trim() === \"*\" ? \"audio/*\" : options.audioAccept.trim() || \"audio/*\";\n        /** Table */ options.tableCellControllerPosition = typeof options.tableCellControllerPosition === \"string\" ? options.tableCellControllerPosition.toLowerCase() : \"cell\";\n        /** Link */ options.linkTargetNewWindow = !!options.linkTargetNewWindow;\n        options.linkProtocol = typeof options.linkProtocol === \"string\" ? options.linkProtocol : null;\n        options.linkRel = Array.isArray(options.linkRel) ? options.linkRel : [];\n        options.linkRelDefault = options.linkRelDefault || {};\n        /** HR */ // options.hrItems = options.hrItems;\n        /** Key actions */ options.tabDisable = !!options.tabDisable;\n        options.shortcutsDisable = Array.isArray(options.shortcutsDisable) ? options.shortcutsDisable : [];\n        options.shortcutsHint = options.shortcutsHint === undefined ? true : !!options.shortcutsHint;\n        /** Defining save button */ options.callBackSave = !options.callBackSave ? null : options.callBackSave;\n        /** Templates Array */ options.templates = !options.templates ? null : options.templates;\n        /** ETC */ options.placeholder = typeof options.placeholder === \"string\" ? options.placeholder : null;\n        options.mediaAutoSelect = options.mediaAutoSelect === undefined ? true : !!options.mediaAutoSelect;\n        /** Buttons */ options.buttonList = !!options.buttonList ? options.buttonList : [\n            [\n                \"undo\",\n                \"redo\"\n            ],\n            [\n                \"bold\",\n                \"underline\",\n                \"italic\",\n                \"strike\",\n                \"subscript\",\n                \"superscript\"\n            ],\n            [\n                \"removeFormat\"\n            ],\n            [\n                \"outdent\",\n                \"indent\"\n            ],\n            [\n                \"fullScreen\",\n                \"showBlocks\",\n                \"codeView\"\n            ],\n            [\n                \"preview\",\n                \"print\"\n            ]\n        ];\n        /** RTL - buttons */ if (options.rtl) {\n            options.buttonList = options.buttonList.reverse();\n        }\n        /** --- Define icons --- */ // custom icons\n        options.icons = !options.icons || typeof options.icons !== \"object\" ? _assets_defaultIcons__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : [\n            _assets_defaultIcons__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n            options.icons\n        ].reduce(function(_default, _new) {\n            for(let key in _new){\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(_new, key)) _default[key] = _new[key];\n            }\n            return _default;\n        }, {});\n        // rtl icons\n        options.icons = !options.rtl ? options.icons : [\n            options.icons,\n            options.icons.rtl\n        ].reduce(function(_default, _new) {\n            for(let key in _new){\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(_new, key)) _default[key] = _new[key];\n            }\n            return _default;\n        }, {});\n        /** Private options */ options.__listCommonStyle = options.__listCommonStyle || [\n            \"fontSize\",\n            \"color\",\n            \"fontFamily\",\n            \"fontWeight\",\n            \"fontStyle\"\n        ];\n        /** _init options */ options._editorStyles = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._setDefaultOptionStyle(options, options.defaultStyle);\n    },\n    _setWhitelist: function(whitelist, blacklist) {\n        if (typeof blacklist !== \"string\") return whitelist;\n        blacklist = blacklist.split(\"|\");\n        whitelist = whitelist.split(\"|\");\n        for(let i = 0, len = blacklist.length, index; i < len; i++){\n            index = whitelist.indexOf(blacklist[i]);\n            if (index > -1) whitelist.splice(index, 1);\n        }\n        return whitelist.join(\"|\");\n    },\n    /**\r\n     * @description Suneditor's Default button list\r\n     * @param {Object} options options\r\n     * @private\r\n     */ _defaultButtons: function(options) {\n        const icons = options.icons;\n        const lang = options.lang;\n        const cmd = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isOSX_IOS ? \"⌘\" : \"CTRL\";\n        const addShift = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isOSX_IOS ? \"⇧\" : \"+SHIFT\";\n        const shortcutsDisable = !options.shortcutsHint ? [\n            \"bold\",\n            \"strike\",\n            \"underline\",\n            \"italic\",\n            \"undo\",\n            \"indent\",\n            \"save\"\n        ] : options.shortcutsDisable;\n        const indentKey = options.rtl ? [\n            \"[\",\n            \"]\"\n        ] : [\n            \"]\",\n            \"[\"\n        ];\n        const indentIcon = options.rtl ? [\n            icons.outdent,\n            icons.indent\n        ] : [\n            icons.indent,\n            icons.outdent\n        ];\n        return {\n            /** default command */ bold: [\n                \"\",\n                lang.toolbar.bold + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"bold\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">B</span>') + \"</span>\",\n                \"bold\",\n                \"\",\n                icons.bold\n            ],\n            underline: [\n                \"\",\n                lang.toolbar.underline + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"underline\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">U</span>') + \"</span>\",\n                \"underline\",\n                \"\",\n                icons.underline\n            ],\n            italic: [\n                \"\",\n                lang.toolbar.italic + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"italic\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">I</span>') + \"</span>\",\n                \"italic\",\n                \"\",\n                icons.italic\n            ],\n            strike: [\n                \"\",\n                lang.toolbar.strike + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"strike\") > -1 ? \"\" : cmd + addShift + '+<span class=\"se-shortcut-key\">S</span>') + \"</span>\",\n                \"strike\",\n                \"\",\n                icons.strike\n            ],\n            subscript: [\n                \"\",\n                lang.toolbar.subscript,\n                \"SUB\",\n                \"\",\n                icons.subscript\n            ],\n            superscript: [\n                \"\",\n                lang.toolbar.superscript,\n                \"SUP\",\n                \"\",\n                icons.superscript\n            ],\n            removeFormat: [\n                \"\",\n                lang.toolbar.removeFormat,\n                \"removeFormat\",\n                \"\",\n                icons.erase\n            ],\n            indent: [\n                \"\",\n                lang.toolbar.indent + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"indent\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">' + indentKey[0] + \"</span>\") + \"</span>\",\n                \"indent\",\n                \"\",\n                indentIcon[0]\n            ],\n            outdent: [\n                \"\",\n                lang.toolbar.outdent + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"indent\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">' + indentKey[1] + \"</span>\") + \"</span>\",\n                \"outdent\",\n                \"\",\n                indentIcon[1]\n            ],\n            fullScreen: [\n                \"se-code-view-enabled se-resizing-enabled\",\n                lang.toolbar.fullScreen,\n                \"fullScreen\",\n                \"\",\n                icons.expansion\n            ],\n            showBlocks: [\n                \"\",\n                lang.toolbar.showBlocks,\n                \"showBlocks\",\n                \"\",\n                icons.show_blocks\n            ],\n            codeView: [\n                \"se-code-view-enabled se-resizing-enabled\",\n                lang.toolbar.codeView,\n                \"codeView\",\n                \"\",\n                icons.code_view\n            ],\n            undo: [\n                \"\",\n                lang.toolbar.undo + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"undo\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">Z</span>') + \"</span>\",\n                \"undo\",\n                \"\",\n                icons.undo\n            ],\n            redo: [\n                \"\",\n                lang.toolbar.redo + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"undo\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">Y</span> / ' + cmd + addShift + '+<span class=\"se-shortcut-key\">Z</span>') + \"</span>\",\n                \"redo\",\n                \"\",\n                icons.redo\n            ],\n            preview: [\n                \"se-resizing-enabled\",\n                lang.toolbar.preview,\n                \"preview\",\n                \"\",\n                icons.preview\n            ],\n            print: [\n                \"se-resizing-enabled\",\n                lang.toolbar.print,\n                \"print\",\n                \"\",\n                icons.print\n            ],\n            dir: [\n                \"\",\n                lang.toolbar[options.rtl ? \"dir_ltr\" : \"dir_rtl\"],\n                \"dir\",\n                \"\",\n                icons[options.rtl ? \"dir_ltr\" : \"dir_rtl\"]\n            ],\n            dir_ltr: [\n                \"\",\n                lang.toolbar.dir_ltr,\n                \"dir_ltr\",\n                \"\",\n                icons.dir_ltr\n            ],\n            dir_rtl: [\n                \"\",\n                lang.toolbar.dir_rtl,\n                \"dir_rtl\",\n                \"\",\n                icons.dir_rtl\n            ],\n            save: [\n                \"se-resizing-enabled\",\n                lang.toolbar.save + '<span class=\"se-shortcut\">' + (shortcutsDisable.indexOf(\"save\") > -1 ? \"\" : cmd + '+<span class=\"se-shortcut-key\">S</span>') + \"</span>\",\n                \"save\",\n                \"\",\n                icons.save\n            ],\n            /** plugins - command */ blockquote: [\n                \"\",\n                lang.toolbar.tag_blockquote,\n                \"blockquote\",\n                \"command\",\n                icons.blockquote\n            ],\n            /** plugins - submenu */ font: [\n                \"se-btn-select se-btn-tool-font\",\n                lang.toolbar.font,\n                \"font\",\n                \"submenu\",\n                '<span class=\"txt\">' + lang.toolbar.font + \"</span>\" + icons.arrow_down\n            ],\n            formatBlock: [\n                \"se-btn-select se-btn-tool-format\",\n                lang.toolbar.formats,\n                \"formatBlock\",\n                \"submenu\",\n                '<span class=\"txt\">' + lang.toolbar.formats + \"</span>\" + icons.arrow_down\n            ],\n            fontSize: [\n                \"se-btn-select se-btn-tool-size\",\n                lang.toolbar.fontSize,\n                \"fontSize\",\n                \"submenu\",\n                '<span class=\"txt\">' + lang.toolbar.fontSize + \"</span>\" + icons.arrow_down\n            ],\n            fontColor: [\n                \"\",\n                lang.toolbar.fontColor,\n                \"fontColor\",\n                \"submenu\",\n                icons.font_color\n            ],\n            hiliteColor: [\n                \"\",\n                lang.toolbar.hiliteColor,\n                \"hiliteColor\",\n                \"submenu\",\n                icons.highlight_color\n            ],\n            align: [\n                \"se-btn-align\",\n                lang.toolbar.align,\n                \"align\",\n                \"submenu\",\n                options.rtl ? icons.align_right : icons.align_left\n            ],\n            list: [\n                \"\",\n                lang.toolbar.list,\n                \"list\",\n                \"submenu\",\n                icons.list_number\n            ],\n            horizontalRule: [\n                \"btn_line\",\n                lang.toolbar.horizontalRule,\n                \"horizontalRule\",\n                \"submenu\",\n                icons.horizontal_rule\n            ],\n            table: [\n                \"\",\n                lang.toolbar.table,\n                \"table\",\n                \"submenu\",\n                icons.table\n            ],\n            lineHeight: [\n                \"\",\n                lang.toolbar.lineHeight,\n                \"lineHeight\",\n                \"submenu\",\n                icons.line_height\n            ],\n            template: [\n                \"\",\n                lang.toolbar.template,\n                \"template\",\n                \"submenu\",\n                icons.template\n            ],\n            paragraphStyle: [\n                \"\",\n                lang.toolbar.paragraphStyle,\n                \"paragraphStyle\",\n                \"submenu\",\n                icons.paragraph_style\n            ],\n            textStyle: [\n                \"\",\n                lang.toolbar.textStyle,\n                \"textStyle\",\n                \"submenu\",\n                icons.text_style\n            ],\n            /** plugins - dialog */ link: [\n                \"\",\n                lang.toolbar.link,\n                \"link\",\n                \"dialog\",\n                icons.link\n            ],\n            image: [\n                \"\",\n                lang.toolbar.image,\n                \"image\",\n                \"dialog\",\n                icons.image\n            ],\n            video: [\n                \"\",\n                lang.toolbar.video,\n                \"video\",\n                \"dialog\",\n                icons.video\n            ],\n            audio: [\n                \"\",\n                lang.toolbar.audio,\n                \"audio\",\n                \"dialog\",\n                icons.audio\n            ],\n            math: [\n                \"\",\n                lang.toolbar.math,\n                \"math\",\n                \"dialog\",\n                icons.math\n            ],\n            /** plugins - fileBrowser */ imageGallery: [\n                \"\",\n                lang.toolbar.imageGallery,\n                \"imageGallery\",\n                \"fileBrowser\",\n                icons.image_gallery\n            ]\n        };\n    },\n    /**\r\n     * @description Create a group div containing each module\r\n     * @returns {Object}\r\n     * @private\r\n     */ _createModuleGroup: function() {\n        const oDiv = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"DIV\");\n        oDiv.className = \"se-btn-module se-btn-module-border\";\n        const oUl = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"UL\");\n        oUl.className = \"se-menu-list\";\n        oDiv.appendChild(oUl);\n        return {\n            \"div\": oDiv,\n            \"ul\": oUl\n        };\n    },\n    /**\r\n     * @description Create a button element\r\n     * @param {string} buttonClass className in button\r\n     * @param {string} title Title in button\r\n     * @param {string} dataCommand The data-command property of the button\r\n     * @param {string} dataDisplay The data-display property of the button ('dialog', 'submenu', 'command')\r\n     * @param {string} innerHTML Html in button\r\n     * @param {string} _disabled Button disabled\r\n     * @param {Object} _icons Icons\r\n     * @returns {Object}\r\n     * @private\r\n     */ _createButton: function(buttonClass, title, dataCommand, dataDisplay, innerHTML, _disabled, _icons) {\n        const oLi = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"LI\");\n        const oButton = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"BUTTON\");\n        const label = title || dataCommand;\n        oButton.setAttribute(\"type\", \"button\");\n        oButton.setAttribute(\"class\", \"se-btn\" + (buttonClass ? \" \" + buttonClass : \"\") + \" se-tooltip\");\n        oButton.setAttribute(\"data-command\", dataCommand);\n        oButton.setAttribute(\"data-display\", dataDisplay);\n        oButton.setAttribute(\"aria-label\", label.replace(/<span .+<\\/span>/, \"\"));\n        oButton.setAttribute(\"tabindex\", \"-1\");\n        if (!innerHTML) innerHTML = '<span class=\"se-icon-text\">!</span>';\n        if (/^default\\./i.test(innerHTML)) {\n            innerHTML = _icons[innerHTML.replace(/^default\\./i, \"\")];\n        }\n        if (/^text\\./i.test(innerHTML)) {\n            innerHTML = innerHTML.replace(/^text\\./i, \"\");\n            oButton.className += \" se-btn-more-text\";\n        }\n        innerHTML += '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + label + \"</span></span>\";\n        if (_disabled) oButton.setAttribute(\"disabled\", true);\n        oButton.innerHTML = innerHTML;\n        oLi.appendChild(oButton);\n        return {\n            \"li\": oLi,\n            \"button\": oButton\n        };\n    },\n    /**\r\n     * @description Create editor HTML\r\n     * @param {Array} doc document object\r\n     * @param {Array} buttonList option.buttonList\r\n     * @param {Object|null} plugins Plugins\r\n     * @param {Array} options options\r\n     * @returns {Object} { element: (Element) Toolbar element, plugins: (Array|null) Plugins Array, pluginCallButtons: (Object), responsiveButtons: (Array) }\r\n     * @private\r\n     */ _createToolBar: function(doc, buttonList, plugins, options) {\n        const separator_vertical = doc.createElement(\"DIV\");\n        separator_vertical.className = \"se-toolbar-separator-vertical\";\n        const tool_bar = doc.createElement(\"DIV\");\n        tool_bar.className = \"se-toolbar sun-editor-common\";\n        const _buttonTray = doc.createElement(\"DIV\");\n        _buttonTray.className = \"se-btn-tray\";\n        tool_bar.appendChild(_buttonTray);\n        /** create button list */ buttonList = JSON.parse(JSON.stringify(buttonList));\n        const icons = options.icons;\n        const defaultButtonList = this._defaultButtons(options);\n        const pluginCallButtons = {};\n        const responsiveButtons = [];\n        let module = null;\n        let button = null;\n        let moduleElement = null;\n        let buttonElement = null;\n        let pluginName = \"\";\n        let vertical = false;\n        const moreLayer = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"DIV\");\n        moreLayer.className = \"se-toolbar-more-layer\";\n        buttonGroupLoop: for(let i = 0, more, moreContainer, moreCommand, buttonGroup, align; i < buttonList.length; i++){\n            more = false;\n            align = \"\";\n            buttonGroup = buttonList[i];\n            moduleElement = this._createModuleGroup();\n            // button object\n            if (typeof buttonGroup === \"object\") {\n                // buttons loop\n                for(let j = 0, moreButton; j < buttonGroup.length; j++){\n                    button = buttonGroup[j];\n                    moreButton = false;\n                    if (/^\\%\\d+/.test(button) && j === 0) {\n                        buttonGroup[0] = button.replace(/[^\\d]/g, \"\");\n                        responsiveButtons.push(buttonGroup);\n                        buttonList.splice(i--, 1);\n                        continue buttonGroupLoop;\n                    }\n                    if (typeof button === \"object\") {\n                        if (typeof button.add === \"function\") {\n                            pluginName = button.name;\n                            module = defaultButtonList[pluginName];\n                            plugins[pluginName] = button;\n                        } else {\n                            pluginName = button.name;\n                            module = [\n                                button.buttonClass,\n                                button.title,\n                                button.name,\n                                button.dataDisplay,\n                                button.innerHTML,\n                                button._disabled\n                            ];\n                        }\n                    } else {\n                        // align\n                        if (/^\\-/.test(button)) {\n                            align = button.substr(1);\n                            moduleElement.div.className += \" module-float-\" + align;\n                            continue;\n                        }\n                        // rtl fix\n                        if (/^\\#/.test(button)) {\n                            const option = button.substr(1);\n                            if (option === \"fix\") moduleElement.ul.className += \" se-menu-dir-fix\";\n                            continue;\n                        }\n                        // more button\n                        if (/^\\:/.test(button)) {\n                            moreButton = true;\n                            const matched = button.match(/^\\:([^\\-]+)\\-([^\\-]+)\\-([^\\-]+)/);\n                            moreCommand = \"__se__\" + matched[1].trim();\n                            const title = matched[2].trim();\n                            const innerHTML = matched[3].trim();\n                            module = [\n                                \"se-btn-more\",\n                                title,\n                                moreCommand,\n                                \"MORE\",\n                                innerHTML\n                            ];\n                        } else {\n                            module = defaultButtonList[button];\n                        }\n                        pluginName = button;\n                        if (!module) {\n                            const custom = plugins[pluginName];\n                            if (!custom) throw Error(\"[SUNEDITOR.create.toolbar.fail] The button name of a plugin that does not exist. [\" + pluginName + \"]\");\n                            module = [\n                                custom.buttonClass,\n                                custom.title,\n                                custom.name,\n                                custom.display,\n                                custom.innerHTML,\n                                custom._disabled\n                            ];\n                        }\n                    }\n                    buttonElement = this._createButton(module[0], module[1], module[2], module[3], module[4], module[5], icons);\n                    (more ? moreContainer : moduleElement.ul).appendChild(buttonElement.li);\n                    if (plugins[pluginName]) {\n                        pluginCallButtons[pluginName] = buttonElement.button;\n                    }\n                    // more button\n                    if (moreButton) {\n                        more = true;\n                        moreContainer = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"DIV\");\n                        moreContainer.className = \"se-more-layer \" + moreCommand;\n                        moreContainer.innerHTML = '<div class=\"se-more-form\"><ul class=\"se-menu-list\"' + (align ? ' style=\"float: ' + align + ';\"' : \"\") + \"></ul></div>\";\n                        moreLayer.appendChild(moreContainer);\n                        moreContainer = moreContainer.firstElementChild.firstElementChild;\n                    }\n                }\n                if (vertical) {\n                    const sv = separator_vertical.cloneNode(false);\n                    _buttonTray.appendChild(sv);\n                }\n                _buttonTray.appendChild(moduleElement.div);\n                vertical = true;\n            } else if (/^\\/$/.test(buttonGroup)) {\n                const enterDiv = doc.createElement(\"DIV\");\n                enterDiv.className = \"se-btn-module-enter\";\n                _buttonTray.appendChild(enterDiv);\n                vertical = false;\n            }\n        }\n        switch(_buttonTray.children.length){\n            case 0:\n                _buttonTray.style.display = \"none\";\n                break;\n            case 1:\n                _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeClass(_buttonTray.firstElementChild, \"se-btn-module-border\");\n                break;\n            default:\n                if (options.rtl) {\n                    const sv = separator_vertical.cloneNode(false);\n                    sv.style.float = _buttonTray.lastElementChild.style.float;\n                    _buttonTray.appendChild(sv);\n                }\n        }\n        if (responsiveButtons.length > 0) responsiveButtons.unshift(buttonList);\n        if (moreLayer.children.length > 0) _buttonTray.appendChild(moreLayer);\n        // menu tray\n        const _menuTray = doc.createElement(\"DIV\");\n        _menuTray.className = \"se-menu-tray\";\n        tool_bar.appendChild(_menuTray);\n        // cover\n        const tool_cover = doc.createElement(\"DIV\");\n        tool_cover.className = \"se-toolbar-cover\";\n        tool_bar.appendChild(tool_cover);\n        if (options.hideToolbar) tool_bar.style.display = \"none\";\n        return {\n            \"element\": tool_bar,\n            \"plugins\": plugins,\n            \"pluginCallButtons\": pluginCallButtons,\n            \"responsiveButtons\": responsiveButtons,\n            \"_menuTray\": _menuTray,\n            \"_buttonTray\": _buttonTray\n        };\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lib/constructor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lib/context.js":
/*!***************************************************!*\
  !*** ./node_modules/suneditor/src/lib/context.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n/**\r\n * @description Elements and variables you should have\r\n * @param {Element} element textarea element\r\n * @param {object} cons Toolbar element you created\r\n * @param {JSON|Object} options Inserted options\r\n * @returns {Object} {Elements, variables of the editor, option}\r\n * @private\r\n */ const _Context = function(element, cons, options) {\n    return {\n        element: {\n            originElement: element,\n            topArea: cons._top,\n            relative: cons._relative,\n            toolbar: cons._toolBar,\n            _toolbarShadow: cons._toolbarShadow,\n            _buttonTray: cons._toolBar.querySelector(\".se-btn-tray\"),\n            _menuTray: cons._menuTray,\n            resizingBar: cons._resizingBar,\n            navigation: cons._navigation,\n            charWrapper: cons._charWrapper,\n            charCounter: cons._charCounter,\n            editorArea: cons._editorArea,\n            wysiwygFrame: cons._wysiwygArea,\n            wysiwyg: cons._wysiwygArea,\n            code: cons._codeArea,\n            placeholder: cons._placeholder,\n            loading: cons._loading,\n            lineBreaker: cons._lineBreaker,\n            lineBreaker_t: cons._lineBreaker_t,\n            lineBreaker_b: cons._lineBreaker_b,\n            resizeBackground: cons._resizeBack,\n            _stickyDummy: cons._stickyDummy,\n            _arrow: cons._arrow,\n            _focusTemp: cons._focusTemp\n        },\n        tool: {\n            cover: cons._toolBar.querySelector(\".se-toolbar-cover\"),\n            bold: cons._toolBar.querySelector('[data-command=\"bold\"]'),\n            underline: cons._toolBar.querySelector('[data-command=\"underline\"]'),\n            italic: cons._toolBar.querySelector('[data-command=\"italic\"]'),\n            strike: cons._toolBar.querySelector('[data-command=\"strike\"]'),\n            sub: cons._toolBar.querySelector('[data-command=\"SUB\"]'),\n            sup: cons._toolBar.querySelector('[data-command=\"SUP\"]'),\n            undo: cons._toolBar.querySelector('[data-command=\"undo\"]'),\n            redo: cons._toolBar.querySelector('[data-command=\"redo\"]'),\n            save: cons._toolBar.querySelector('[data-command=\"save\"]'),\n            outdent: cons._toolBar.querySelector('[data-command=\"outdent\"]'),\n            indent: cons._toolBar.querySelector('[data-command=\"indent\"]'),\n            fullScreen: cons._toolBar.querySelector('[data-command=\"fullScreen\"]'),\n            showBlocks: cons._toolBar.querySelector('[data-command=\"showBlocks\"]'),\n            codeView: cons._toolBar.querySelector('[data-command=\"codeView\"]'),\n            dir: cons._toolBar.querySelector('[data-command=\"dir\"]'),\n            dir_ltr: cons._toolBar.querySelector('[data-command=\"dir_ltr\"]'),\n            dir_rtl: cons._toolBar.querySelector('[data-command=\"dir_rtl\"]')\n        },\n        options: options,\n        option: options\n    };\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (_Context);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xpYi9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0NBTUMsR0FDRDtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxNQUFNQSxXQUFXLFNBQVVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxPQUFPO0lBQzdDLE9BQU87UUFDSEYsU0FBUztZQUNMRyxlQUFlSDtZQUNmSSxTQUFTSCxLQUFLSSxJQUFJO1lBQ2xCQyxVQUFVTCxLQUFLTSxTQUFTO1lBQ3hCQyxTQUFTUCxLQUFLUSxRQUFRO1lBQ3RCQyxnQkFBZ0JULEtBQUtTLGNBQWM7WUFDbkNDLGFBQWFWLEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3pDQyxXQUFXWixLQUFLWSxTQUFTO1lBQ3pCQyxhQUFhYixLQUFLYyxZQUFZO1lBQzlCQyxZQUFZZixLQUFLZ0IsV0FBVztZQUM1QkMsYUFBYWpCLEtBQUtrQixZQUFZO1lBQzlCQyxhQUFhbkIsS0FBS29CLFlBQVk7WUFDOUJDLFlBQVlyQixLQUFLc0IsV0FBVztZQUM1QkMsY0FBY3ZCLEtBQUt3QixZQUFZO1lBQy9CQyxTQUFTekIsS0FBS3dCLFlBQVk7WUFDMUJFLE1BQU0xQixLQUFLMkIsU0FBUztZQUNwQkMsYUFBYTVCLEtBQUs2QixZQUFZO1lBQzlCQyxTQUFTOUIsS0FBSytCLFFBQVE7WUFDdEJDLGFBQWFoQyxLQUFLaUMsWUFBWTtZQUM5QkMsZUFBZWxDLEtBQUttQyxjQUFjO1lBQ2xDQyxlQUFlcEMsS0FBS3FDLGNBQWM7WUFDbENDLGtCQUFrQnRDLEtBQUt1QyxXQUFXO1lBQ2xDQyxjQUFjeEMsS0FBS3dDLFlBQVk7WUFDL0JDLFFBQVF6QyxLQUFLeUMsTUFBTTtZQUNuQkMsWUFBWTFDLEtBQUswQyxVQUFVO1FBQy9CO1FBQ0FDLE1BQU07WUFDRkMsT0FBTzVDLEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ25Da0MsTUFBTTdDLEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2xDbUMsV0FBVzlDLEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3ZDb0MsUUFBUS9DLEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3BDcUMsUUFBUWhELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3BDc0MsS0FBS2pELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2pDdUMsS0FBS2xELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2pDd0MsTUFBTW5ELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2xDeUMsTUFBTXBELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2xDMEMsTUFBTXJELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2xDMkMsU0FBU3RELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3JDNEMsUUFBUXZELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3BDNkMsWUFBWXhELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3hDOEMsWUFBWXpELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3hDK0MsVUFBVTFELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3RDZ0QsS0FBSzNELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ2pDaUQsU0FBUzVELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1lBQ3JDa0QsU0FBUzdELEtBQUtRLFFBQVEsQ0FBQ0csYUFBYSxDQUFDO1FBQ3pDO1FBQ0FWLFNBQVNBO1FBQ1Q2RCxRQUFRN0Q7SUFDWjtBQUNKO0FBRUEsK0RBQWVILFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvbGliL2NvbnRleHQuanM/YjgwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvbiBFbGVtZW50cyBhbmQgdmFyaWFibGVzIHlvdSBzaG91bGQgaGF2ZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgdGV4dGFyZWEgZWxlbWVudFxyXG4gKiBAcGFyYW0ge29iamVjdH0gY29ucyBUb29sYmFyIGVsZW1lbnQgeW91IGNyZWF0ZWRcclxuICogQHBhcmFtIHtKU09OfE9iamVjdH0gb3B0aW9ucyBJbnNlcnRlZCBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHtFbGVtZW50cywgdmFyaWFibGVzIG9mIHRoZSBlZGl0b3IsIG9wdGlvbn1cclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IF9Db250ZXh0ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnMsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBvcmlnaW5FbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICAgICAgICB0b3BBcmVhOiBjb25zLl90b3AsXHJcbiAgICAgICAgICAgIHJlbGF0aXZlOiBjb25zLl9yZWxhdGl2ZSxcclxuICAgICAgICAgICAgdG9vbGJhcjogY29ucy5fdG9vbEJhcixcclxuICAgICAgICAgICAgX3Rvb2xiYXJTaGFkb3c6IGNvbnMuX3Rvb2xiYXJTaGFkb3csXHJcbiAgICAgICAgICAgIF9idXR0b25UcmF5OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJy5zZS1idG4tdHJheScpLFxyXG4gICAgICAgICAgICBfbWVudVRyYXk6IGNvbnMuX21lbnVUcmF5LFxyXG4gICAgICAgICAgICByZXNpemluZ0JhcjogY29ucy5fcmVzaXppbmdCYXIsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IGNvbnMuX25hdmlnYXRpb24sXHJcbiAgICAgICAgICAgIGNoYXJXcmFwcGVyOiBjb25zLl9jaGFyV3JhcHBlcixcclxuICAgICAgICAgICAgY2hhckNvdW50ZXI6IGNvbnMuX2NoYXJDb3VudGVyLFxyXG4gICAgICAgICAgICBlZGl0b3JBcmVhOiBjb25zLl9lZGl0b3JBcmVhLFxyXG4gICAgICAgICAgICB3eXNpd3lnRnJhbWU6IGNvbnMuX3d5c2l3eWdBcmVhLFxyXG4gICAgICAgICAgICB3eXNpd3lnOiBjb25zLl93eXNpd3lnQXJlYSwgLy8gaWYgKG9wdGlvbnMuaWZyYW1lKSBjb25zLl93eXNpd3lnQXJlYS5jb250ZW50RG9jdW1lbnQuYm9keVxyXG4gICAgICAgICAgICBjb2RlOiBjb25zLl9jb2RlQXJlYSxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGNvbnMuX3BsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICBsb2FkaW5nOiBjb25zLl9sb2FkaW5nLFxyXG4gICAgICAgICAgICBsaW5lQnJlYWtlcjogY29ucy5fbGluZUJyZWFrZXIsXHJcbiAgICAgICAgICAgIGxpbmVCcmVha2VyX3Q6IGNvbnMuX2xpbmVCcmVha2VyX3QsXHJcbiAgICAgICAgICAgIGxpbmVCcmVha2VyX2I6IGNvbnMuX2xpbmVCcmVha2VyX2IsXHJcbiAgICAgICAgICAgIHJlc2l6ZUJhY2tncm91bmQ6IGNvbnMuX3Jlc2l6ZUJhY2ssXHJcbiAgICAgICAgICAgIF9zdGlja3lEdW1teTogY29ucy5fc3RpY2t5RHVtbXksXHJcbiAgICAgICAgICAgIF9hcnJvdzogY29ucy5fYXJyb3csXHJcbiAgICAgICAgICAgIF9mb2N1c1RlbXA6IGNvbnMuX2ZvY3VzVGVtcFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9vbDoge1xyXG4gICAgICAgICAgICBjb3ZlcjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCcuc2UtdG9vbGJhci1jb3ZlcicpLFxyXG4gICAgICAgICAgICBib2xkOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJib2xkXCJdJyksXHJcbiAgICAgICAgICAgIHVuZGVybGluZTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwidW5kZXJsaW5lXCJdJyksXHJcbiAgICAgICAgICAgIGl0YWxpYzogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiaXRhbGljXCJdJyksXHJcbiAgICAgICAgICAgIHN0cmlrZTogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwic3RyaWtlXCJdJyksXHJcbiAgICAgICAgICAgIHN1YjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiU1VCXCJdJyksXHJcbiAgICAgICAgICAgIHN1cDogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiU1VQXCJdJyksXHJcbiAgICAgICAgICAgIHVuZG86IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cInVuZG9cIl0nKSxcclxuICAgICAgICAgICAgcmVkbzogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwicmVkb1wiXScpLFxyXG4gICAgICAgICAgICBzYXZlOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJzYXZlXCJdJyksXHJcbiAgICAgICAgICAgIG91dGRlbnQ6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cIm91dGRlbnRcIl0nKSxcclxuICAgICAgICAgICAgaW5kZW50OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJpbmRlbnRcIl0nKSxcclxuICAgICAgICAgICAgZnVsbFNjcmVlbjogY29ucy5fdG9vbEJhci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jb21tYW5kPVwiZnVsbFNjcmVlblwiXScpLFxyXG4gICAgICAgICAgICBzaG93QmxvY2tzOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJzaG93QmxvY2tzXCJdJyksXHJcbiAgICAgICAgICAgIGNvZGVWaWV3OiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJjb2RlVmlld1wiXScpLFxyXG4gICAgICAgICAgICBkaXI6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cImRpclwiXScpLFxyXG4gICAgICAgICAgICBkaXJfbHRyOiBjb25zLl90b29sQmFyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNvbW1hbmQ9XCJkaXJfbHRyXCJdJyksXHJcbiAgICAgICAgICAgIGRpcl9ydGw6IGNvbnMuX3Rvb2xCYXIucXVlcnlTZWxlY3RvcignW2RhdGEtY29tbWFuZD1cImRpcl9ydGxcIl0nKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICBvcHRpb246IG9wdGlvbnNcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBfQ29udGV4dDsiXSwibmFtZXMiOlsiX0NvbnRleHQiLCJlbGVtZW50IiwiY29ucyIsIm9wdGlvbnMiLCJvcmlnaW5FbGVtZW50IiwidG9wQXJlYSIsIl90b3AiLCJyZWxhdGl2ZSIsIl9yZWxhdGl2ZSIsInRvb2xiYXIiLCJfdG9vbEJhciIsIl90b29sYmFyU2hhZG93IiwiX2J1dHRvblRyYXkiLCJxdWVyeVNlbGVjdG9yIiwiX21lbnVUcmF5IiwicmVzaXppbmdCYXIiLCJfcmVzaXppbmdCYXIiLCJuYXZpZ2F0aW9uIiwiX25hdmlnYXRpb24iLCJjaGFyV3JhcHBlciIsIl9jaGFyV3JhcHBlciIsImNoYXJDb3VudGVyIiwiX2NoYXJDb3VudGVyIiwiZWRpdG9yQXJlYSIsIl9lZGl0b3JBcmVhIiwid3lzaXd5Z0ZyYW1lIiwiX3d5c2l3eWdBcmVhIiwid3lzaXd5ZyIsImNvZGUiLCJfY29kZUFyZWEiLCJwbGFjZWhvbGRlciIsIl9wbGFjZWhvbGRlciIsImxvYWRpbmciLCJfbG9hZGluZyIsImxpbmVCcmVha2VyIiwiX2xpbmVCcmVha2VyIiwibGluZUJyZWFrZXJfdCIsIl9saW5lQnJlYWtlcl90IiwibGluZUJyZWFrZXJfYiIsIl9saW5lQnJlYWtlcl9iIiwicmVzaXplQmFja2dyb3VuZCIsIl9yZXNpemVCYWNrIiwiX3N0aWNreUR1bW15IiwiX2Fycm93IiwiX2ZvY3VzVGVtcCIsInRvb2wiLCJjb3ZlciIsImJvbGQiLCJ1bmRlcmxpbmUiLCJpdGFsaWMiLCJzdHJpa2UiLCJzdWIiLCJzdXAiLCJ1bmRvIiwicmVkbyIsInNhdmUiLCJvdXRkZW50IiwiaW5kZW50IiwiZnVsbFNjcmVlbiIsInNob3dCbG9ja3MiLCJjb2RlVmlldyIsImRpciIsImRpcl9sdHIiLCJkaXJfcnRsIiwib3B0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lib/context.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lib/core.js":
/*!************************************************!*\
  !*** ./node_modules/suneditor/src/lib/core.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var _constructor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constructor */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/constructor.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/context.js\");\n/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./history */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/history.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/util.js\");\n/* harmony import */ var _plugins_modules_notice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/modules/_notice */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_notice.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n\n\n\n\n/**\r\n * @description SunEditor constuctor function.\r\n * create core object and event registration.\r\n * core, event, functions\r\n * @param {Object} context\r\n * @param {Object} pluginCallButtons\r\n * @param {Object} plugins \r\n * @param {Object} lang\r\n * @param {Object} options\r\n * @param {Object} _responsiveButtons\r\n * @returns {Object} functions Object\r\n */ /* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context, pluginCallButtons, plugins, lang, options, _responsiveButtons) {\n    const _d = context.element.originElement.ownerDocument || document;\n    const _w = _d.defaultView || window;\n    const util = _util__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    const icons = options.icons;\n    /**\r\n     * @description editor core object\r\n     * should always bind this object when registering an event in the plug-in.\r\n     */ const core = {\n        _d: _d,\n        _w: _w,\n        _parser: new _w.DOMParser(),\n        _prevRtl: options.rtl,\n        _editorHeight: 0,\n        _editorHeightPadding: 0,\n        _listCamel: options.__listCommonStyle,\n        _listKebab: util.camelToKebabCase(options.__listCommonStyle),\n        __focusTemp: context.element._focusTemp,\n        /**\r\n         * @description Document object of the iframe if created as an iframe || _d\r\n         * @private\r\n         */ _wd: null,\n        /**\r\n         * @description Window object of the iframe if created as an iframe || _w\r\n         * @private\r\n         */ _ww: null,\n        /**\r\n         * @description Closest ShadowRoot to editor if found\r\n         * @private\r\n         */ _shadowRoot: null,\n        /**\r\n         * @description Block controller mousedown events in \"shadowRoot\" environment\r\n         * @private\r\n         */ _shadowRootControllerEventTarget: null,\n        /**\r\n         * @description Util object\r\n         */ util: util,\n        /**\r\n         * @description Functions object\r\n         */ functions: null,\n        /**\r\n         * @description Editor options\r\n         */ options: null,\n        /**\r\n         * @description Computed style of the wysiwyg area (window.getComputedStyle(context.element.wysiwyg))\r\n         */ wwComputedStyle: null,\n        /**\r\n         * @description Notice object\r\n         */ notice: _plugins_modules_notice__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        /**\r\n         * @description Default icons object\r\n         */ icons: icons,\n        /**\r\n         * @description History object for undo, redo\r\n         */ history: null,\n        /**\r\n         * @description Elements and user options parameters of the suneditor\r\n         */ context: context,\n        /**\r\n         * @description Plugin buttons\r\n         */ pluginCallButtons: pluginCallButtons,\n        /**\r\n         * @description Loaded plugins\r\n         */ plugins: plugins || {},\n        /**\r\n         * @description Whether the plugin is initialized\r\n         */ initPlugins: {},\n        /**\r\n         * @description Object for managing submenu elements\r\n         * @private\r\n         */ _targetPlugins: {},\n        /**\r\n         * @description Save rendered submenus and containers\r\n         * @private\r\n         */ _menuTray: {},\n        /**\r\n         * @description loaded language\r\n         */ lang: lang,\n        /**\r\n         * @description The selection node (core.getSelectionNode()) to which the effect was last applied\r\n         */ effectNode: null,\n        /**\r\n         * @description submenu element\r\n         */ submenu: null,\n        /**\r\n         * @description container element\r\n         */ container: null,\n        /**\r\n         * @description current subment name\r\n         * @private\r\n         */ _submenuName: \"\",\n        /**\r\n         * @description binded submenuOff method\r\n         * @private\r\n         */ _bindedSubmenuOff: null,\n        /**\r\n         * @description binded containerOff method\r\n         * @private\r\n         */ _bindedContainerOff: null,\n        /**\r\n         * @description active button element in submenu\r\n         */ submenuActiveButton: null,\n        /**\r\n         * @description active button element in container\r\n         */ containerActiveButton: null,\n        /**\r\n         * @description The elements array to be processed unvisible when the controllersOff function is executed (resizing, link modified button, table controller)\r\n         */ controllerArray: [],\n        /**\r\n         * @description The name of the plugin that called the currently active controller\r\n         */ currentControllerName: \"\",\n        /**\r\n         * @description The target element of current controller\r\n         */ currentControllerTarget: null,\n        /**\r\n         * @description The file component object of current selected file tag (getFileComponent)\r\n         */ currentFileComponentInfo: null,\n        /**\r\n         * @description An array of buttons whose class name is not \"se-code-view-enabled\"\r\n         */ codeViewDisabledButtons: [],\n        /**\r\n         * @description An array of buttons whose class name is not \"se-resizing-enabled\"\r\n         */ resizingDisabledButtons: [],\n        /**\r\n         * @description active more layer element in submenu\r\n         * @private\r\n         */ _moreLayerActiveButton: null,\n        /**\r\n         * @description Tag whitelist RegExp object used in \"_consistencyCheckOfHTML\" method\r\n         * ^(options._editorTagsWhitelist)$\r\n         * @private\r\n         */ _htmlCheckWhitelistRegExp: null,\n        /**\r\n         * @description Tag blacklist RegExp object used in \"_consistencyCheckOfHTML\" method\r\n         * @private\r\n         */ _htmlCheckBlacklistRegExp: null,\n        /**\r\n         * @description RegExp when using check disallowd tags. (b, i, ins, strike, s)\r\n         * @private\r\n         */ _disallowedTextTagsRegExp: null,\n        /**\r\n         * @description Editor tags whitelist (RegExp object)\r\n         * util.createTagsWhitelist(options._editorTagsWhitelist)\r\n         */ editorTagsWhitelistRegExp: null,\n        /**\r\n         * @description Editor tags blacklist (RegExp object)\r\n         * util.createTagsBlacklist(options.tagsBlacklist)\r\n         */ editorTagsBlacklistRegExp: null,\n        /**\r\n         * @description Tag whitelist when pasting (RegExp object)\r\n         * util.createTagsWhitelist(options.pasteTagsWhitelist)\r\n         */ pasteTagsWhitelistRegExp: null,\n        /**\r\n         * @description Tag blacklist when pasting (RegExp object)\r\n         * util.createTagsBlacklist(options.pasteTagsBlacklist)\r\n         */ pasteTagsBlacklistRegExp: null,\n        /**\r\n         * @description Boolean value of whether the editor has focus\r\n         */ hasFocus: false,\n        /**\r\n         * @description Boolean value of whether the editor is disabled\r\n         */ isDisabled: false,\n        /**\r\n         * @description Boolean value of whether the editor is readOnly\r\n         */ isReadOnly: false,\n        /**\r\n         * @description Attributes whitelist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesWhitelistRegExp: null,\n        _attributesWhitelistRegExp_all_data: null,\n        /**\r\n         * @description Attributes blacklist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesBlacklistRegExp: null,\n        /**\r\n         * @description Attributes of tags whitelist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesTagsWhitelist: null,\n        /**\r\n         * @description Attributes of tags blacklist used by the cleanHTML method\r\n         * @private\r\n         */ _attributesTagsBlacklist: null,\n        /**\r\n         * @description binded controllersOff method\r\n         * @private\r\n         */ _bindControllersOff: null,\n        /**\r\n         * @description Is inline mode?\r\n         * @private\r\n         */ _isInline: null,\n        /**\r\n         * @description Is balloon|balloon-always mode?\r\n         * @private\r\n         */ _isBalloon: null,\n        /**\r\n         * @description Is balloon-always mode?\r\n         * @private\r\n         */ _isBalloonAlways: null,\n        /**\r\n         * @description Required value when using inline mode to sticky toolbar\r\n         * @private\r\n         */ _inlineToolbarAttr: {\n            top: \"\",\n            width: \"\",\n            isShow: false\n        },\n        /**\r\n         * @description Variable that controls the \"blur\" event in the editor of inline or balloon mode when the focus is moved to submenu\r\n         * @private\r\n         */ _notHideToolbar: false,\n        /**\r\n         * @description Variable value that sticky toolbar mode\r\n         * @private\r\n         */ _sticky: false,\n        /**\r\n         * @description Variables for controlling focus and blur events\r\n         * @private\r\n         */ _antiBlur: false,\n        /**\r\n         * @description Component line breaker element\r\n         * @private\r\n         */ _lineBreaker: null,\n        _lineBreakerButton: null,\n        /**\r\n         * @description If true, (initialize, reset) all indexes of image, video information\r\n         * @private\r\n         */ _componentsInfoInit: true,\n        _componentsInfoReset: false,\n        /**\r\n         * @description Plugins array with \"active\" method.\r\n         * \"activePlugins\" runs the \"add\" method when creating the editor.\r\n         */ activePlugins: null,\n        /**\r\n         * @description Information of tags that should maintain HTML structure, style, class name, etc. (In use by \"math\" plugin)\r\n         * When inserting \"html\" such as paste, it is executed on the \"html\" to be inserted. (core.cleanHTML)\r\n         * Basic Editor Actions:\r\n         * 1. All classes not starting with \"__se__\" or \"se-\" in the editor are removed.\r\n         * 2. The style of all tags except the \"span\" tag is removed from the editor.\r\n         * \"managedTagsInfo\" structure ex:\r\n         * managedTagsInfo: {\r\n         *   query: '.__se__xxx, se-xxx'\r\n         *   map: {\r\n         *     '__se__xxx': method.bind(core),\r\n         *     'se-xxx': method.bind(core),\r\n         *   }\r\n         * }\r\n         * @example\r\n         * Define in the following return format in the \"managedTagInfo\" function of the plugin.\r\n         * managedTagInfo() => {\r\n         *  return {\r\n         *    className: 'string', // Class name to identify the tag. (\"__se__xxx\", \"se-xxx\")\r\n         *    // Change the html of the \"element\". (\"element\" is the element found with \"className\".)\r\n         *    // \"method\" is executed by binding \"core\".\r\n         *    method: function (element) {\r\n         *      // this === core\r\n         *      element.innerHTML = // (rendered html);\r\n         *    }\r\n         *  }\r\n         * }\r\n         */ managedTagsInfo: null,\n        /**\r\n         * @description cashing: options.charCounterType === 'byte-html'\r\n         * @private\r\n         */ _charTypeHTML: false,\n        /**\r\n         * @description Array of \"checkFileInfo\" functions with the core bound\r\n         * (Plugins with \"checkFileInfo\" and \"resetFileInfo\" methods)\r\n         * \"fileInfoPlugins\" runs the \"add\" method when creating the editor.\r\n         * \"checkFileInfo\" method is always call just before the \"change\" event.\r\n         * @private\r\n         */ _fileInfoPluginsCheck: null,\n        /**\r\n         * @description Array of \"resetFileInfo\" functions with the core bound\r\n         * (Plugins with \"checkFileInfo\" and \"resetFileInfo\" methods)\r\n         * \"checkFileInfo\" method is always call just before the \"functions.setOptions\" method.\r\n         * @private\r\n         */ _fileInfoPluginsReset: null,\n        /**\r\n         * @description Variables for file component management\r\n         * @private\r\n         */ _fileManager: {\n            tags: null,\n            regExp: null,\n            queryString: null,\n            pluginRegExp: null,\n            pluginMap: null\n        },\n        /**\r\n         * @description Elements that need to change text or className for each selection change\r\n         * After creating the editor, \"activePlugins\" are added.\r\n         * @property {Element} STRONG bold button\r\n         * @property {Element} U underline button\r\n         * @property {Element} EM italic button\r\n         * @property {Element} DEL strike button\r\n         * @property {Element} SUB subscript button\r\n         * @property {Element} SUP superscript button\r\n         * @property {Element} OUTDENT outdent button\r\n         * @property {Element} INDENT indent button\r\n         */ commandMap: {},\n        /**\r\n         * @description CSS properties related to style tags \r\n         * @private\r\n         */ _commandMapStyles: {\n            STRONG: [\n                \"font-weight\"\n            ],\n            U: [\n                \"text-decoration\"\n            ],\n            EM: [\n                \"font-style\"\n            ],\n            DEL: [\n                \"text-decoration\"\n            ]\n        },\n        /**\r\n         * @description Style button related to edit area\r\n         * @property {Element} fullScreen fullScreen button element\r\n         * @property {Element} showBlocks showBlocks button element\r\n         * @property {Element} codeView codeView button element\r\n         * @private\r\n         */ _styleCommandMap: null,\n        /**\r\n         * @private\r\n         */ _cleanStyleRegExp: {\n            div: new _w.RegExp(\"\\\\s*[^-a-zA-Z](.+)\\\\s*:[^;]+(?!;)*\", \"ig\"),\n            span: new _w.RegExp(\"\\\\s*[^-a-zA-Z](font-family|font-size|color|background-color)\\\\s*:[^;]+(?!;)*\", \"ig\"),\n            format: new _w.RegExp(\"\\\\s*[^-a-zA-Z](text-align|margin-left|margin-right|width|height|line-height)\\\\s*:[^;]+(?!;)*\", \"ig\"),\n            fontSizeUnit: new _w.RegExp(\"\\\\d+\" + options.fontSizeUnit + \"$\", \"i\")\n        },\n        /**\r\n         * @description Variables used internally in editor operation\r\n         * @property {Boolean} isCodeView State of code view\r\n         * @property {Boolean} isFullScreen State of full screen\r\n         * @property {Number} innerHeight_fullScreen InnerHeight in editor when in full screen\r\n         * @property {Number} resizeClientY Remember the vertical size of the editor before resizing the editor (Used when calculating during resize operation)\r\n         * @property {Number} tabSize Indent size of tab (4)\r\n         * @property {Number} codeIndent Indent size of Code view mode (2)\r\n         * @property {Number} minResizingSize Minimum size of editing area when resized {Number} (.se-wrapper-inner {min-height: 65px;} || 65)\r\n         * @property {Array} currentNodes  An array of the current cursor's node structure\r\n         * @private\r\n         */ _variable: {\n            isChanged: false,\n            isCodeView: false,\n            isFullScreen: false,\n            innerHeight_fullScreen: 0,\n            resizeClientY: 0,\n            tabSize: 4,\n            codeIndent: 2,\n            minResizingSize: util.getNumber(context.element.wysiwygFrame.style.minHeight || \"65\", 0),\n            currentNodes: [],\n            currentNodesMap: [],\n            _range: null,\n            _selectionNode: null,\n            _originCssText: context.element.topArea.style.cssText,\n            _bodyOverflow: \"\",\n            _editorAreaOriginCssText: \"\",\n            _wysiwygOriginCssText: \"\",\n            _codeOriginCssText: \"\",\n            _fullScreenAttrs: {\n                sticky: false,\n                balloon: false,\n                inline: false\n            },\n            _lineBreakComp: null,\n            _lineBreakDir: \"\"\n        },\n        /**\r\n         * @description Temp variable for set line attrs\r\n         * @private\r\n         */ _formatAttrsTemp: null,\n        /**\r\n         * @description Save the current buttons states to \"allCommandButtons\" object\r\n         * @private\r\n         */ _saveButtonStates: function() {\n            if (!this.allCommandButtons) this.allCommandButtons = {};\n            const currentButtons = this.context.element._buttonTray.querySelectorAll(\".se-menu-list button[data-display]\");\n            for(let i = 0, element, command; i < currentButtons.length; i++){\n                element = currentButtons[i];\n                command = element.getAttribute(\"data-command\");\n                this.allCommandButtons[command] = element;\n            }\n        },\n        /**\r\n         * @description Recover the current buttons states from \"allCommandButtons\" object\r\n         * @private\r\n         */ _recoverButtonStates: function() {\n            if (this.allCommandButtons) {\n                const currentButtons = this.context.element._buttonTray.querySelectorAll(\".se-menu-list button[data-display]\");\n                for(let i = 0, button, command, oldButton; i < currentButtons.length; i++){\n                    button = currentButtons[i];\n                    command = button.getAttribute(\"data-command\");\n                    oldButton = this.allCommandButtons[command];\n                    if (oldButton) {\n                        button.parentElement.replaceChild(oldButton, button);\n                        if (this.context.tool[command]) this.context.tool[command] = oldButton;\n                    }\n                }\n            }\n        },\n        /**\r\n         * @description If the plugin is not added, add the plugin and call the 'add' function.\r\n         * If the plugin is added call callBack function.\r\n         * @param {String} pluginName The name of the plugin to call\r\n         * @param {function} callBackFunction Function to be executed immediately after module call\r\n         * @param {Element|null} _target Plugin target button (This is not necessary if you have a button list when creating the editor)\r\n         */ callPlugin: function(pluginName, callBackFunction, _target) {\n            _target = _target || pluginCallButtons[pluginName];\n            if (!this.plugins[pluginName]) {\n                throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:\"' + pluginName + '\")');\n            } else if (!this.initPlugins[pluginName]) {\n                this.plugins[pluginName].add(this, _target);\n                this.initPlugins[pluginName] = true;\n            } else if (typeof this._targetPlugins[pluginName] === \"object\" && !!_target) {\n                this.initMenuTarget(pluginName, _target, this._targetPlugins[pluginName]);\n            }\n            if (this.plugins[pluginName].active && !this.commandMap[pluginName] && !!_target) {\n                this.commandMap[pluginName] = _target;\n                this.activePlugins.push(pluginName);\n            }\n            if (typeof callBackFunction === \"function\") callBackFunction();\n        },\n        /**\r\n         * @description If the module is not added, add the module and call the 'add' function\r\n         * @param {Array} moduleArray module object's Array [dialog, resizing]\r\n         */ addModule: function(moduleArray) {\n            for(let i = 0, len = moduleArray.length, moduleName; i < len; i++){\n                moduleName = moduleArray[i].name;\n                if (!this.plugins[moduleName]) {\n                    this.plugins[moduleName] = moduleArray[i];\n                }\n                if (!this.initPlugins[moduleName]) {\n                    this.initPlugins[moduleName] = true;\n                    if (typeof this.plugins[moduleName].add === \"function\") this.plugins[moduleName].add(this);\n                }\n            }\n        },\n        /**\r\n         * @description Gets the current editor-relative scroll offset.\r\n         * @returns {Object} {top, left}\r\n         */ getGlobalScrollOffset: function() {\n            let t = 0, l = 0;\n            let el = context.element.topArea;\n            while(el){\n                t += el.scrollTop;\n                l += el.scrollLeft;\n                el = el.parentElement;\n            }\n            el = this._shadowRoot ? this._shadowRoot.host : null;\n            while(el){\n                t += el.scrollTop;\n                l += el.scrollLeft;\n                el = el.parentElement;\n            }\n            return {\n                top: t,\n                left: l\n            };\n        },\n        /**\r\n         * @description Method for managing submenu element.\r\n         * You must add the \"submenu\" element using the this method at custom plugin.\r\n         * @param {String} pluginName Plugin name\r\n         * @param {Element|null} target Target button\r\n         * @param {Element} menu Submenu element\r\n         */ initMenuTarget: function(pluginName, target, menu) {\n            if (!target) {\n                this._targetPlugins[pluginName] = menu;\n            } else {\n                context.element._menuTray.appendChild(menu);\n                this._targetPlugins[pluginName] = true;\n                this._menuTray[target.getAttribute(\"data-command\")] = menu;\n            }\n        },\n        /**\r\n         * @description Enable submenu\r\n         * @param {Element} element Submenu's button element to call\r\n         */ submenuOn: function(element) {\n            if (this._bindedSubmenuOff) this._bindedSubmenuOff();\n            if (this._bindControllersOff) this.controllersOff();\n            const submenuName = this._submenuName = element.getAttribute(\"data-command\");\n            const menu = this.submenu = this._menuTray[submenuName];\n            this.submenuActiveButton = element;\n            this._setMenuPosition(element, menu);\n            this._bindedSubmenuOff = this.submenuOff.bind(this);\n            this.addDocEvent(\"mousedown\", this._bindedSubmenuOff, false);\n            if (this.plugins[submenuName].on) this.plugins[submenuName].on.call(this);\n            this._antiBlur = true;\n        },\n        /**\r\n         * @description Disable submenu\r\n         */ submenuOff: function() {\n            this.removeDocEvent(\"mousedown\", this._bindedSubmenuOff);\n            this._bindedSubmenuOff = null;\n            if (this.submenu) {\n                this._submenuName = \"\";\n                this.submenu.style.display = \"none\";\n                this.submenu = null;\n                util.removeClass(this.submenuActiveButton, \"on\");\n                this.submenuActiveButton = null;\n                this._notHideToolbar = false;\n            }\n            this._antiBlur = false;\n        },\n        /**\r\n         * @description Disable more layer\r\n         */ moreLayerOff: function() {\n            if (this._moreLayerActiveButton) {\n                const layer = context.element.toolbar.querySelector(\".\" + this._moreLayerActiveButton.getAttribute(\"data-command\"));\n                layer.style.display = \"none\";\n                util.removeClass(this._moreLayerActiveButton, \"on\");\n                this._moreLayerActiveButton = null;\n            }\n        },\n        /**\r\n         * @description Enable container\r\n         * @param {Element} element Container's button element to call\r\n         */ containerOn: function(element) {\n            if (this._bindedContainerOff) this._bindedContainerOff();\n            const containerName = this._containerName = element.getAttribute(\"data-command\");\n            const menu = this.container = this._menuTray[containerName];\n            this.containerActiveButton = element;\n            this._setMenuPosition(element, menu);\n            this._bindedContainerOff = this.containerOff.bind(this);\n            this.addDocEvent(\"mousedown\", this._bindedContainerOff, false);\n            if (this.plugins[containerName].on) this.plugins[containerName].on.call(this);\n            this._antiBlur = true;\n        },\n        /**\r\n         * @description Disable container\r\n         */ containerOff: function() {\n            this.removeDocEvent(\"mousedown\", this._bindedContainerOff);\n            this._bindedContainerOff = null;\n            if (this.container) {\n                this._containerName = \"\";\n                this.container.style.display = \"none\";\n                this.container = null;\n                util.removeClass(this.containerActiveButton, \"on\");\n                this.containerActiveButton = null;\n                this._notHideToolbar = false;\n            }\n            this._antiBlur = false;\n        },\n        /**\r\n         * @description Set the menu position. (submenu, container)\r\n         * @param {*} element Button element\r\n         * @param {*} menu Menu element\r\n         * @private\r\n         */ _setMenuPosition: function(element, menu) {\n            menu.style.visibility = \"hidden\";\n            menu.style.display = \"block\";\n            menu.style.height = \"\";\n            util.addClass(element, \"on\");\n            const toolbar = this.context.element.toolbar;\n            const toolbarW = toolbar.offsetWidth;\n            const toolbarOffset = event._getEditorOffsets(context.element.toolbar);\n            const menuW = menu.offsetWidth;\n            const l = element.parentElement.offsetLeft + 3;\n            // rtl\n            if (options.rtl) {\n                const elementW = element.offsetWidth;\n                const rtlW = menuW > elementW ? menuW - elementW : 0;\n                const rtlL = rtlW > 0 ? 0 : elementW - menuW;\n                menu.style.left = l - rtlW + rtlL + \"px\";\n                if (toolbarOffset.left > event._getEditorOffsets(menu).left) {\n                    menu.style.left = \"0px\";\n                }\n            } else {\n                const overLeft = toolbarW <= menuW ? 0 : toolbarW - (l + menuW);\n                if (overLeft < 0) menu.style.left = l + overLeft + \"px\";\n                else menu.style.left = l + \"px\";\n            }\n            // get element top\n            let t = 0;\n            let offsetEl = element;\n            while(offsetEl && offsetEl !== toolbar){\n                t += offsetEl.offsetTop;\n                offsetEl = offsetEl.offsetParent;\n            }\n            const bt = t;\n            if (this._isBalloon) {\n                t += toolbar.offsetTop + element.offsetHeight;\n            } else {\n                t -= element.offsetHeight;\n            }\n            // set menu position\n            const toolbarTop = toolbarOffset.top;\n            const menuHeight = menu.offsetHeight;\n            const scrollTop = this.getGlobalScrollOffset().top;\n            const menuHeight_bottom = _w.innerHeight - (toolbarTop - scrollTop + bt + element.parentElement.offsetHeight);\n            if (menuHeight_bottom < menuHeight) {\n                let menuTop = -1 * (menuHeight - bt + 3);\n                const insTop = toolbarTop - scrollTop + menuTop;\n                const menuHeight_top = menuHeight + (insTop < 0 ? insTop : 0);\n                if (menuHeight_top > menuHeight_bottom) {\n                    menu.style.height = menuHeight_top + \"px\";\n                    menuTop = -1 * (menuHeight_top - bt + 3);\n                } else {\n                    menu.style.height = menuHeight_bottom + \"px\";\n                    menuTop = bt + element.parentElement.offsetHeight;\n                }\n                menu.style.top = menuTop + \"px\";\n            } else {\n                menu.style.top = bt + element.parentElement.offsetHeight + \"px\";\n            }\n            menu.style.visibility = \"\";\n        },\n        /**\r\n         * @description Show controller at editor area (controller elements, function, \"controller target element(@Required)\", \"controller name(@Required)\", etc..)\r\n         * @param {*} arguments controller elements, functions..\r\n         */ controllersOn: function() {\n            if (this._bindControllersOff) this._bindControllersOff();\n            this.controllerArray = [];\n            for(let i = 0, arg; i < arguments.length; i++){\n                arg = arguments[i];\n                if (!arg) continue;\n                if (typeof arg === \"string\") {\n                    this.currentControllerName = arg;\n                    continue;\n                }\n                if (typeof arg === \"function\") {\n                    this.controllerArray.push(arg);\n                    continue;\n                }\n                if (!util.hasClass(arg, \"se-controller\")) {\n                    this.currentControllerTarget = arg;\n                    this.currentFileComponentInfo = this.getFileComponent(arg);\n                    continue;\n                }\n                if (arg.style) {\n                    arg.style.display = \"block\";\n                    if (this._shadowRoot && this._shadowRootControllerEventTarget.indexOf(arg) === -1) {\n                        arg.addEventListener(\"mousedown\", function(e) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                        });\n                        this._shadowRootControllerEventTarget.push(arg);\n                    }\n                }\n                this.controllerArray.push(arg);\n            }\n            this._bindControllersOff = this.controllersOff.bind(this);\n            this.addDocEvent(\"mousedown\", this._bindControllersOff, false);\n            this.addDocEvent(\"keydown\", this._bindControllersOff, false);\n            this._antiBlur = true;\n            if (typeof functions.showController === \"function\") functions.showController(this.currentControllerName, this.controllerArray, this);\n        },\n        /**\r\n         * @description Hide controller at editor area (link button, image resize button..)\r\n         * @param {KeyboardEvent|MouseEvent|null} e Event object when called from mousedown and keydown events registered in \"core.controllersOn\"\r\n         */ controllersOff: function(e) {\n            this._lineBreaker.style.display = \"none\";\n            const len = this.controllerArray.length;\n            if (e && e.target && len > 0) {\n                for(let i = 0; i < len; i++){\n                    if (typeof this.controllerArray[i].contains === \"function\" && this.controllerArray[i].contains(e.target)) return;\n                }\n            }\n            if (this._fileManager.pluginRegExp.test(this.currentControllerName) && e && e.type === \"keydown\" && e.keyCode !== 27) return;\n            context.element.lineBreaker_t.style.display = context.element.lineBreaker_b.style.display = \"none\";\n            this._variable._lineBreakComp = null;\n            this.currentControllerName = \"\";\n            this.currentControllerTarget = null;\n            this.currentFileComponentInfo = null;\n            this.effectNode = null;\n            if (!this._bindControllersOff) return;\n            this.removeDocEvent(\"mousedown\", this._bindControllersOff);\n            this.removeDocEvent(\"keydown\", this._bindControllersOff);\n            this._bindControllersOff = null;\n            if (len > 0) {\n                for(let i = 0; i < len; i++){\n                    if (typeof this.controllerArray[i] === \"function\") this.controllerArray[i]();\n                    else this.controllerArray[i].style.display = \"none\";\n                }\n                this.controllerArray = [];\n            }\n            this._antiBlur = false;\n        },\n        /**\r\n         * @description Specify the position of the controller.\r\n         * @param {Element} controller Controller element.\r\n         * @param {Element} referEl Element that is the basis of the controller's position.\r\n         * @param {String} position Type of position (\"top\" | \"bottom\")\r\n         * When using the \"top\" position, there should not be an arrow on the controller.\r\n         * When using the \"bottom\" position there should be an arrow on the controller.\r\n         * @param {Object} addOffset These are the left and top values that need to be added specially. \r\n         * This argument is required. - {left: 0, top: 0}\r\n         * Please enter the value based on ltr mode.\r\n         * Calculated automatically in rtl mode.\r\n         */ setControllerPosition: function(controller, referEl, position, addOffset) {\n            if (options.rtl) addOffset.left *= -1;\n            const offset = util.getOffset(referEl, context.element.wysiwygFrame);\n            controller.style.visibility = \"hidden\";\n            controller.style.display = \"block\";\n            // Height value of the arrow element is 11px\n            const topMargin = position === \"top\" ? -(controller.offsetHeight + 2) : referEl.offsetHeight + 12;\n            controller.style.top = offset.top + topMargin + addOffset.top + \"px\";\n            const l = offset.left - context.element.wysiwygFrame.scrollLeft + addOffset.left;\n            const controllerW = controller.offsetWidth;\n            const referElW = referEl.offsetWidth;\n            const allow = util.hasClass(controller.firstElementChild, \"se-arrow\") ? controller.firstElementChild : null;\n            // rtl (Width value of the arrow element is 22px)\n            if (options.rtl) {\n                const rtlW = controllerW > referElW ? controllerW - referElW : 0;\n                const rtlL = rtlW > 0 ? 0 : referElW - controllerW;\n                controller.style.left = l - rtlW + rtlL + \"px\";\n                if (rtlW > 0) {\n                    if (allow) allow.style.left = (controllerW - 14 < 10 + rtlW ? controllerW - 14 : 10 + rtlW) + \"px\";\n                }\n                const overSize = context.element.wysiwygFrame.offsetLeft - controller.offsetLeft;\n                if (overSize > 0) {\n                    controller.style.left = \"0px\";\n                    if (allow) allow.style.left = overSize + \"px\";\n                }\n            } else {\n                controller.style.left = l + \"px\";\n                const overSize = context.element.wysiwygFrame.offsetWidth - (controller.offsetLeft + controllerW);\n                if (overSize < 0) {\n                    controller.style.left = controller.offsetLeft + overSize + \"px\";\n                    if (allow) allow.style.left = 20 - overSize + \"px\";\n                } else {\n                    if (allow) allow.style.left = \"20px\";\n                }\n            }\n            controller.style.visibility = \"\";\n        },\n        /**\r\n         * @description javascript execCommand\r\n         * @param {String} command javascript execCommand function property\r\n         * @param {Boolean|undefined} showDefaultUI javascript execCommand function property\r\n         * @param {String|undefined} value javascript execCommand function property\r\n         */ execCommand: function(command, showDefaultUI, value) {\n            this._wd.execCommand(command, showDefaultUI, command === \"formatBlock\" ? \"<\" + value + \">\" : value);\n            // history stack\n            this.history.push(true);\n        },\n        /**\r\n         * @description Focus to wysiwyg area using \"native focus function\"\r\n         */ nativeFocus: function() {\n            this.__focus();\n            this._editorRange();\n        },\n        /**\r\n         * @description Focus method\r\n         * @private\r\n         */ __focus: function() {\n            const caption = util.getParentElement(this.getSelectionNode(), \"figcaption\");\n            if (caption) {\n                caption.focus();\n            } else {\n                context.element.wysiwyg.focus();\n            }\n        },\n        /**\r\n         * @description Focus to wysiwyg area\r\n         */ focus: function() {\n            if (context.element.wysiwygFrame.style.display === \"none\") return;\n            if (options.iframe) {\n                this.nativeFocus();\n            } else {\n                try {\n                    const range = this.getRange();\n                    if (range.startContainer === range.endContainer && util.isWysiwygDiv(range.startContainer)) {\n                        const currentNode = range.commonAncestorContainer.children[range.startOffset];\n                        if (!util.isFormatElement(currentNode) && !util.isComponent(currentNode)) {\n                            const format = util.createElement(options.defaultTag);\n                            const br = util.createElement(\"BR\");\n                            format.appendChild(br);\n                            context.element.wysiwyg.insertBefore(format, currentNode);\n                            this.setRange(br, 0, br, 0);\n                            return;\n                        }\n                    }\n                    this.setRange(range.startContainer, range.startOffset, range.endContainer, range.endOffset);\n                } catch (e) {\n                    this.nativeFocus();\n                }\n            }\n            event._applyTagEffects();\n            if (this._isBalloon) event._toggleToolbarBalloon();\n        },\n        /**\r\n         * @description If \"focusEl\" is a component, then that component is selected; if it is a format element, the last text is selected\r\n         * If \"focusEdge\" is null, then selected last element\r\n         * @param {Element|null} focusEl Focus element\r\n         */ focusEdge: function(focusEl) {\n            if (!focusEl) focusEl = context.element.wysiwyg.lastElementChild;\n            const fileComponentInfo = this.getFileComponent(focusEl);\n            if (fileComponentInfo) {\n                this.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);\n            } else if (focusEl) {\n                focusEl = util.getChildElement(focusEl, function(current) {\n                    return current.childNodes.length === 0 || current.nodeType === 3;\n                }, true);\n                if (!focusEl) this.nativeFocus();\n                else this.setRange(focusEl, focusEl.textContent.length, focusEl, focusEl.textContent.length);\n            } else {\n                this.focus();\n            }\n        },\n        /**\r\n         * @description Focusout to wysiwyg area (.blur())\r\n         */ blur: function() {\n            if (options.iframe) {\n                context.element.wysiwygFrame.blur();\n            } else {\n                context.element.wysiwyg.blur();\n            }\n        },\n        /**\r\n         * @description Set current editor's range object and return.\r\n         * @param {Node} startCon The startContainer property of the selection object.\r\n         * @param {Number} startOff The startOffset property of the selection object.\r\n         * @param {Node} endCon The endContainer property of the selection object.\r\n         * @param {Number} endOff The endOffset property of the selection object.\r\n         * @returns {Object} Range object.\r\n         */ setRange: function(startCon, startOff, endCon, endOff) {\n            if (!startCon || !endCon) return;\n            if (startOff > startCon.textContent.length) startOff = startCon.textContent.length;\n            if (endOff > endCon.textContent.length) endOff = endCon.textContent.length;\n            if (util.isFormatElement(startCon)) {\n                startCon = startCon.childNodes[startOff] || startCon.childNodes[startOff - 1] || startCon;\n                startOff = startOff > 0 ? startCon.nodeType === 1 ? 1 : startCon.textContent ? startCon.textContent.length : 0 : 0;\n            }\n            if (util.isFormatElement(endCon)) {\n                endCon = endCon.childNodes[endOff] || endCon.childNodes[endOff - 1] || endCon;\n                endOff = endOff > 0 ? endCon.nodeType === 1 ? 1 : endCon.textContent ? endCon.textContent.length : 0 : 0;\n            }\n            const range = this._wd.createRange();\n            try {\n                range.setStart(startCon, startOff);\n                range.setEnd(endCon, endOff);\n            } catch (error) {\n                console.warn(\"[SUNEDITOR.core.focus.error] \" + error);\n                this.nativeFocus();\n                return;\n            }\n            const selection = this.getSelection();\n            if (selection.removeAllRanges) {\n                selection.removeAllRanges();\n            }\n            selection.addRange(range);\n            this._rangeInfo(range, this.getSelection());\n            if (options.iframe) this.__focus();\n            return range;\n        },\n        /**\r\n         * @description Remove range object and button effect\r\n         */ removeRange: function() {\n            this._variable._range = null;\n            this._variable._selectionNode = null;\n            if (this.hasFocus) this.getSelection().removeAllRanges();\n            this._setKeyEffect([]);\n        },\n        /**\r\n         * @description Get current editor's range object\r\n         * @returns {Object}\r\n         */ getRange: function() {\n            const range = this._variable._range || this._createDefaultRange();\n            const selection = this.getSelection();\n            if (range.collapsed === selection.isCollapsed || !context.element.wysiwyg.contains(selection.focusNode)) return range;\n            if (selection.rangeCount > 0) {\n                this._variable._range = selection.getRangeAt(0);\n                return this._variable._range;\n            } else {\n                const sc = selection.anchorNode, ec = selection.focusNode, so = selection.anchorOffset, eo = selection.focusOffset;\n                const compareValue = util.compareElements(sc, ec);\n                const rightDir = compareValue.ancestor && (compareValue.result === 0 ? so <= eo : compareValue.result > 1 ? true : false);\n                return this.setRange(rightDir ? sc : ec, rightDir ? so : eo, rightDir ? ec : sc, rightDir ? eo : so);\n            }\n        },\n        /**\r\n         * @description If the \"range\" object is a non-editable area, add a line at the top of the editor and update the \"range\" object.\r\n         * Returns a new \"range\" or argument \"range\".\r\n         * @param {Object} range core.getRange()\r\n         * @param {Element|null} container If there is \"container\" argument, it creates a line in front of the container.\r\n         * @returns {Object} range\r\n         */ getRange_addLine: function(range, container) {\n            if (this._selectionVoid(range)) {\n                const wysiwyg = context.element.wysiwyg;\n                const op = util.createElement(options.defaultTag);\n                op.innerHTML = \"<br>\";\n                wysiwyg.insertBefore(op, container && container !== wysiwyg ? container.nextElementSibling : wysiwyg.firstElementChild);\n                this.setRange(op.firstElementChild, 0, op.firstElementChild, 1);\n                range = this._variable._range;\n            }\n            return range;\n        },\n        /**\r\n         * @description Get window selection obejct\r\n         * @returns {Object}\r\n         */ getSelection: function() {\n            const selection = this._shadowRoot && this._shadowRoot.getSelection ? this._shadowRoot.getSelection() : this._ww.getSelection();\n            if (!this._variable._range && !context.element.wysiwyg.contains(selection.focusNode)) {\n                selection.removeAllRanges();\n                selection.addRange(this._createDefaultRange());\n            }\n            return selection;\n        },\n        /**\r\n         * @description Get current select node\r\n         * @returns {Node}\r\n         */ getSelectionNode: function() {\n            if (!context.element.wysiwyg.contains(this._variable._selectionNode)) this._editorRange();\n            if (!this._variable._selectionNode) {\n                const selectionNode = util.getChildElement(context.element.wysiwyg.firstChild, function(current) {\n                    return current.childNodes.length === 0 || current.nodeType === 3;\n                }, false);\n                if (!selectionNode) {\n                    this._editorRange();\n                } else {\n                    this._variable._selectionNode = selectionNode;\n                    return selectionNode;\n                }\n            }\n            return this._variable._selectionNode;\n        },\n        /**\r\n         * @description Saving the range object and the currently selected node of editor\r\n         * @private\r\n         */ _editorRange: function() {\n            const activeEl = this._wd.activeElement;\n            if (util.isInputElement(activeEl)) {\n                this._variable._selectionNode = activeEl;\n                return activeEl;\n            }\n            const selection = this.getSelection();\n            if (!selection) return null;\n            let range = null;\n            if (selection.rangeCount > 0) {\n                range = selection.getRangeAt(0);\n            } else {\n                range = this._createDefaultRange();\n            }\n            this._rangeInfo(range, selection);\n        },\n        /**\r\n         * @description Set \"range\" and \"selection\" info.\r\n         * @param {Object} range range object.\r\n         * @param {Object} selection selection object.\r\n         */ _rangeInfo: function(range, selection) {\n            let selectionNode = null;\n            this._variable._range = range;\n            if (range.collapsed) {\n                if (util.isWysiwygDiv(range.commonAncestorContainer)) selectionNode = range.commonAncestorContainer.children[range.startOffset] || range.commonAncestorContainer;\n                else selectionNode = range.commonAncestorContainer;\n            } else {\n                selectionNode = selection.extentNode || selection.anchorNode;\n            }\n            this._variable._selectionNode = selectionNode;\n        },\n        /**\r\n         * @description Return the range object of editor's first child node\r\n         * @returns {Object}\r\n         * @private\r\n         */ _createDefaultRange: function() {\n            const wysiwyg = context.element.wysiwyg;\n            const range = this._wd.createRange();\n            let firstFormat = wysiwyg.firstElementChild;\n            let focusEl = null;\n            if (!firstFormat) {\n                firstFormat = util.createElement(options.defaultTag);\n                focusEl = util.createElement(\"BR\");\n                firstFormat.appendChild(focusEl);\n                wysiwyg.appendChild(firstFormat);\n            } else {\n                focusEl = firstFormat.firstChild;\n                if (!focusEl) {\n                    focusEl = util.createElement(\"BR\");\n                    firstFormat.appendChild(focusEl);\n                }\n            }\n            range.setStart(focusEl, 0);\n            range.setEnd(focusEl, 0);\n            return range;\n        },\n        /**\r\n         * @description Returns true if there is no valid \"selection\".\r\n         * @param {Object} range core.getRange()\r\n         * @returns {Object} range\r\n         * @private\r\n         */ _selectionVoid: function(range) {\n            const comm = range.commonAncestorContainer;\n            return util.isWysiwygDiv(range.startContainer) && util.isWysiwygDiv(range.endContainer) || /FIGURE/i.test(comm.nodeName) || this._fileManager.regExp.test(comm.nodeName) || util.isMediaComponent(comm);\n        },\n        /**\r\n         * @description Reset range object to text node selected status.\r\n         * @returns {Boolean} Returns false if there is no valid selection.\r\n         * @private\r\n         */ _resetRangeToTextNode: function() {\n            const range = this.getRange();\n            if (this._selectionVoid(range)) return false;\n            let startCon = range.startContainer;\n            let startOff = range.startOffset;\n            let endCon = range.endContainer;\n            let endOff = range.endOffset;\n            let tempCon, tempOffset, tempChild;\n            if (util.isFormatElement(startCon)) {\n                if (!startCon.childNodes[startOff]) {\n                    startCon = startCon.lastChild || startCon;\n                    startOff = startCon.textContent.length;\n                } else {\n                    startCon = startCon.childNodes[startOff] || startCon;\n                    startOff = 0;\n                }\n                while(startCon && startCon.nodeType === 1 && startCon.firstChild){\n                    startCon = startCon.firstChild || startCon;\n                    startOff = 0;\n                }\n            }\n            if (util.isFormatElement(endCon)) {\n                endCon = endCon.childNodes[endOff] || endCon.lastChild || endCon;\n                while(endCon && endCon.nodeType === 1 && endCon.lastChild){\n                    endCon = endCon.lastChild;\n                }\n                endOff = endCon.textContent.length;\n            }\n            // startContainer\n            tempCon = util.isWysiwygDiv(startCon) ? context.element.wysiwyg.firstChild : startCon;\n            tempOffset = startOff;\n            if (util.isBreak(tempCon) || tempCon.nodeType === 1 && tempCon.childNodes.length > 0) {\n                const onlyBreak = util.isBreak(tempCon);\n                if (!onlyBreak) {\n                    while(tempCon && !util.isBreak(tempCon) && tempCon.nodeType === 1){\n                        tempCon = tempCon.childNodes[tempOffset] || tempCon.nextElementSibling || tempCon.nextSibling;\n                        tempOffset = 0;\n                    }\n                    let format = util.getFormatElement(tempCon, null);\n                    if (format === util.getRangeFormatElement(format, null)) {\n                        format = util.createElement(util.getParentElement(tempCon, util.isCell) ? \"DIV\" : options.defaultTag);\n                        tempCon.parentNode.insertBefore(format, tempCon);\n                        format.appendChild(tempCon);\n                    }\n                }\n                if (util.isBreak(tempCon)) {\n                    const emptyText = util.createTextNode(util.zeroWidthSpace);\n                    tempCon.parentNode.insertBefore(emptyText, tempCon);\n                    tempCon = emptyText;\n                    if (onlyBreak) {\n                        if (startCon === endCon) {\n                            endCon = tempCon;\n                            endOff = 1;\n                        }\n                    }\n                }\n            }\n            // set startContainer\n            startCon = tempCon;\n            startOff = tempOffset;\n            // endContainer\n            tempCon = util.isWysiwygDiv(endCon) ? context.element.wysiwyg.lastChild : endCon;\n            tempOffset = endOff;\n            if (util.isBreak(tempCon) || tempCon.nodeType === 1 && tempCon.childNodes.length > 0) {\n                const onlyBreak = util.isBreak(tempCon);\n                if (!onlyBreak) {\n                    while(tempCon && !util.isBreak(tempCon) && tempCon.nodeType === 1){\n                        tempChild = tempCon.childNodes;\n                        if (tempChild.length === 0) break;\n                        tempCon = tempChild[tempOffset > 0 ? tempOffset - 1 : tempOffset] || !/FIGURE/i.test(tempChild[0].nodeName) ? tempChild[0] : tempCon.previousElementSibling || tempCon.previousSibling || startCon;\n                        tempOffset = tempOffset > 0 ? tempCon.textContent.length : tempOffset;\n                    }\n                    let format = util.getFormatElement(tempCon, null);\n                    if (format === util.getRangeFormatElement(format, null)) {\n                        format = util.createElement(util.isCell(format) ? \"DIV\" : options.defaultTag);\n                        tempCon.parentNode.insertBefore(format, tempCon);\n                        format.appendChild(tempCon);\n                    }\n                }\n                if (util.isBreak(tempCon)) {\n                    const emptyText = util.createTextNode(util.zeroWidthSpace);\n                    tempCon.parentNode.insertBefore(emptyText, tempCon);\n                    tempCon = emptyText;\n                    tempOffset = 1;\n                    if (onlyBreak && !tempCon.previousSibling) {\n                        util.removeItem(endCon);\n                    }\n                }\n            }\n            // set endContainer\n            endCon = tempCon;\n            endOff = tempOffset;\n            // set Range\n            this.setRange(startCon, startOff, endCon, endOff);\n            return true;\n        },\n        /**\r\n         * @description Returns a \"formatElement\"(util.isFormatElement) array from the currently selected range.\r\n         * @param {Function|null} validation The validation function. (Replaces the default validation function-util.isFormatElement(current))\r\n         * @returns {Array}\r\n         */ getSelectedElements: function(validation) {\n            if (!this._resetRangeToTextNode()) return [];\n            let range = this.getRange();\n            if (util.isWysiwygDiv(range.startContainer)) {\n                const children = context.element.wysiwyg.children;\n                if (children.length === 0) return [];\n                this.setRange(children[0], 0, children[children.length - 1], children[children.length - 1].textContent.trim().length);\n                range = this.getRange();\n            }\n            const startCon = range.startContainer;\n            const endCon = range.endContainer;\n            const commonCon = range.commonAncestorContainer;\n            // get line nodes\n            const lineNodes = util.getListChildren(commonCon, function(current) {\n                return validation ? validation(current) : util.isFormatElement(current);\n            });\n            if (!util.isWysiwygDiv(commonCon) && !util.isRangeFormatElement(commonCon)) lineNodes.unshift(util.getFormatElement(commonCon, null));\n            if (startCon === endCon || lineNodes.length === 1) return lineNodes;\n            let startLine = util.getFormatElement(startCon, null);\n            let endLine = util.getFormatElement(endCon, null);\n            let startIdx = null;\n            let endIdx = null;\n            const onlyTable = function(current) {\n                return util.isTable(current) ? /^TABLE$/i.test(current.nodeName) : true;\n            };\n            let startRangeEl = util.getRangeFormatElement(startLine, onlyTable);\n            let endRangeEl = util.getRangeFormatElement(endLine, onlyTable);\n            if (util.isTable(startRangeEl) && util.isListCell(startRangeEl.parentNode)) startRangeEl = startRangeEl.parentNode;\n            if (util.isTable(endRangeEl) && util.isListCell(endRangeEl.parentNode)) endRangeEl = endRangeEl.parentNode;\n            const sameRange = startRangeEl === endRangeEl;\n            for(let i = 0, len = lineNodes.length, line; i < len; i++){\n                line = lineNodes[i];\n                if (startLine === line || !sameRange && line === startRangeEl) {\n                    startIdx = i;\n                    continue;\n                }\n                if (endLine === line || !sameRange && line === endRangeEl) {\n                    endIdx = i;\n                    break;\n                }\n            }\n            if (startIdx === null) startIdx = 0;\n            if (endIdx === null) endIdx = lineNodes.length - 1;\n            return lineNodes.slice(startIdx, endIdx + 1);\n        },\n        /**\r\n         * @description Get format elements and components from the selected area. (P, DIV, H[1-6], OL, UL, TABLE..)\r\n         * If some of the component are included in the selection, get the entire that component.\r\n         * @param {Boolean} removeDuplicate If true, if there is a parent and child tag among the selected elements, the child tag is excluded.\r\n         * @returns {Array}\r\n         */ getSelectedElementsAndComponents: function(removeDuplicate) {\n            const commonCon = this.getRange().commonAncestorContainer;\n            const myComponent = util.getParentElement(commonCon, util.isComponent);\n            const selectedLines = util.isTable(commonCon) ? this.getSelectedElements(null) : this.getSelectedElements((function(current) {\n                const component = this.getParentElement(current, this.isComponent);\n                return this.isFormatElement(current) && (!component || component === myComponent) || this.isComponent(current) && !this.getFormatElement(current);\n            }).bind(util));\n            if (removeDuplicate) {\n                for(let i = 0, len = selectedLines.length; i < len; i++){\n                    for(let j = i - 1; j >= 0; j--){\n                        if (selectedLines[j].contains(selectedLines[i])) {\n                            selectedLines.splice(i, 1);\n                            i--;\n                            len--;\n                            break;\n                        }\n                    }\n                }\n            }\n            return selectedLines;\n        },\n        /**\r\n         * @description Determine if this offset is the edge offset of container\r\n         * @param {Node} container The node of the selection object. (range.startContainer..)\r\n         * @param {Number} offset The offset of the selection object. (core.getRange().startOffset...)\r\n         * @param {String|undefined} dir Select check point - Both edge, Front edge or End edge. (\"front\": Front edge, \"end\": End edge, undefined: Both edge)\r\n         * @returns {Boolean}\r\n         */ isEdgePoint: function(container, offset, dir) {\n            return dir !== \"end\" && offset === 0 || (!dir || dir !== \"front\") && !container.nodeValue && offset === 1 || (!dir || dir === \"end\") && !!container.nodeValue && offset === container.nodeValue.length;\n        },\n        /**\r\n         * @description Check if the container and offset values are the edges of the format tag\r\n         * @param {Node} container The node of the selection object. (range.startContainer..)\r\n         * @param {Number} offset The offset of the selection object. (core.getRange().startOffset...)\r\n         * @param {String} dir Select check point - \"front\": Front edge, \"end\": End edge, undefined: Both edge.\r\n         * @returns {Array|null}\r\n         * @private\r\n         */ _isEdgeFormat: function(node, offset, dir) {\n            if (!this.isEdgePoint(node, offset, dir)) return false;\n            const result = [];\n            dir = dir === \"front\" ? \"previousSibling\" : \"nextSibling\";\n            while(node && !util.isFormatElement(node) && !util.isWysiwygDiv(node)){\n                if (!node[dir] || util.isBreak(node[dir]) && !node[dir][dir]) {\n                    if (node.nodeType === 1) result.push(node.cloneNode(false));\n                    node = node.parentNode;\n                } else {\n                    return null;\n                }\n            }\n            return result;\n        },\n        /**\r\n         * @description Show loading box\r\n         */ showLoading: function() {\n            context.element.loading.style.display = \"block\";\n        },\n        /**\r\n         * @description Close loading box\r\n         */ closeLoading: function() {\n            context.element.loading.style.display = \"none\";\n        },\n        /**\r\n         * @description Append format element to sibling node of argument element.\r\n         * If the \"formatNodeName\" argument value is present, the tag of that argument value is inserted,\r\n         * If not, the currently selected format tag is inserted.\r\n         * @param {Element} element Insert as siblings of that element\r\n         * @param {String|Element|null} formatNode Node name or node obejct to be inserted\r\n         * @returns {Element}\r\n         */ appendFormatTag: function(element, formatNode) {\n            if (!element || !element.parentNode) return null;\n            const currentFormatEl = util.getFormatElement(this.getSelectionNode(), null);\n            let oFormat = null;\n            if (!util.isFormatElement(element) && util.isFreeFormatElement(currentFormatEl || element.parentNode)) {\n                oFormat = util.createElement(\"BR\");\n            } else {\n                const oFormatName = formatNode ? typeof formatNode === \"string\" ? formatNode : formatNode.nodeName : util.isFormatElement(currentFormatEl) && !util.isRangeFormatElement(currentFormatEl) && !util.isFreeFormatElement(currentFormatEl) ? currentFormatEl.nodeName : options.defaultTag;\n                oFormat = util.createElement(oFormatName);\n                oFormat.innerHTML = \"<br>\";\n                if (formatNode && typeof formatNode !== \"string\" || !formatNode && util.isFormatElement(currentFormatEl)) {\n                    util.copyTagAttributes(oFormat, formatNode || currentFormatEl, [\n                        \"id\"\n                    ]);\n                }\n            }\n            if (util.isCell(element)) element.insertBefore(oFormat, element.nextElementSibling);\n            else element.parentNode.insertBefore(oFormat, element.nextElementSibling);\n            return oFormat;\n        },\n        /**\r\n         * @description The method to insert a element and return. (used elements : table, hr, image, video)\r\n         * If \"element\" is \"HR\", insert and return the new line.\r\n         * @param {Element} element Element to be inserted\r\n         * @param {Boolean} notHistoryPush When true, it does not update the history stack and the selection object and return EdgeNodes (util.getEdgeChildNodes)\r\n         * @param {Boolean} checkCharCount If true, if \"options.maxCharCount\" is exceeded when \"element\" is added, null is returned without addition.\r\n         * @param {Boolean} notSelect If true, Do not automatically select the inserted component.\r\n         * @returns {Element}\r\n         */ insertComponent: function(element, notHistoryPush, checkCharCount, notSelect) {\n            if (this.isReadOnly || checkCharCount && !this.checkCharCount(element, null)) {\n                return null;\n            }\n            const r = this.removeNode();\n            this.getRange_addLine(this.getRange(), r.container);\n            let oNode = null;\n            let selectionNode = this.getSelectionNode();\n            let formatEl = util.getFormatElement(selectionNode, null);\n            if (util.isListCell(formatEl)) {\n                this.insertNode(element, selectionNode === formatEl ? null : r.container.nextSibling, false);\n                if (!element.nextSibling) element.parentNode.appendChild(util.createElement(\"BR\"));\n            } else {\n                if (this.getRange().collapsed && (r.container.nodeType === 3 || util.isBreak(r.container))) {\n                    const depthFormat = util.getParentElement(r.container, (function(current) {\n                        return this.isRangeFormatElement(current);\n                    }).bind(util));\n                    oNode = util.splitElement(r.container, r.offset, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);\n                    if (oNode) formatEl = oNode.previousSibling;\n                }\n                this.insertNode(element, util.isRangeFormatElement(formatEl) ? null : formatEl, false);\n                if (formatEl && util.onlyZeroWidthSpace(formatEl)) util.removeItem(formatEl);\n            }\n            if (!notSelect) {\n                this.setRange(element, 0, element, 0);\n                const fileComponentInfo = this.getFileComponent(element);\n                if (fileComponentInfo) {\n                    this.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);\n                } else if (oNode) {\n                    oNode = util.getEdgeChildNodes(oNode, null).sc || oNode;\n                    this.setRange(oNode, 0, oNode, 0);\n                }\n            }\n            // history stack\n            if (!notHistoryPush) this.history.push(1);\n            return oNode || element;\n        },\n        /**\r\n         * @description Gets the file component and that plugin name\r\n         * return: {target, component, pluginName} | null\r\n         * @param {Element} element Target element (figure tag, component div, file tag)\r\n         * @returns {Object|null}\r\n         */ getFileComponent: function(element) {\n            if (!this._fileManager.queryString || !element) return null;\n            let target, pluginName;\n            if (/^FIGURE$/i.test(element.nodeName) || /se-component/.test(element.className)) {\n                target = element.querySelector(this._fileManager.queryString);\n            }\n            if (!target && element.nodeName && this._fileManager.regExp.test(element.nodeName)) {\n                target = element;\n            }\n            if (target) {\n                pluginName = this._fileManager.pluginMap[target.nodeName.toLowerCase()];\n                if (pluginName) {\n                    return {\n                        target: target,\n                        component: util.getParentElement(target, util.isComponent),\n                        pluginName: pluginName\n                    };\n                }\n            }\n            return null;\n        },\n        /**\r\n         * @description The component(image, video) is selected and the resizing module is called.\r\n         * @param {Element} element Element tag (img, iframe, video)\r\n         * @param {String} pluginName Plugin name (image, video)\r\n         */ selectComponent: function(element, pluginName) {\n            if (util.isUneditableComponent(util.getParentElement(element, util.isComponent)) || util.isUneditableComponent(element)) return false;\n            if (!this.hasFocus) this.focus();\n            const plugin = this.plugins[pluginName];\n            if (!plugin) return;\n            _w.setTimeout((function() {\n                if (typeof plugin.select === \"function\") this.callPlugin(pluginName, plugin.select.bind(this, element), null);\n                this._setComponentLineBreaker(element);\n            }).bind(this));\n        },\n        /**\r\n         * @description Set line breaker of component\r\n         * @param {Element} element Element tag (img, iframe, video)\r\n         * @private\r\n         */ _setComponentLineBreaker: function(element) {\n            // line breaker\n            this._lineBreaker.style.display = \"none\";\n            const container = util.getParentElement(element, util.isComponent);\n            const t_style = context.element.lineBreaker_t.style;\n            const b_style = context.element.lineBreaker_b.style;\n            const target = this.context.resizing.resizeContainer.style.display === \"block\" ? this.context.resizing.resizeContainer : element;\n            const isList = util.isListCell(container.parentNode);\n            let componentTop, wScroll, w;\n            // top\n            if (isList ? !container.previousSibling : !util.isFormatElement(container.previousElementSibling)) {\n                this._variable._lineBreakComp = container;\n                wScroll = context.element.wysiwyg.scrollTop;\n                componentTop = util.getOffset(element, context.element.wysiwygFrame).top + wScroll;\n                w = target.offsetWidth / 2 / 2;\n                t_style.top = componentTop - wScroll - 12 + \"px\";\n                t_style.left = util.getOffset(target).left + w + \"px\";\n                t_style.display = \"block\";\n            } else {\n                t_style.display = \"none\";\n            }\n            // bottom\n            if (isList ? !container.nextSibling : !util.isFormatElement(container.nextElementSibling)) {\n                if (!componentTop) {\n                    this._variable._lineBreakComp = container;\n                    wScroll = context.element.wysiwyg.scrollTop;\n                    componentTop = util.getOffset(element, context.element.wysiwygFrame).top + wScroll;\n                    w = target.offsetWidth / 2 / 2;\n                }\n                b_style.top = componentTop + target.offsetHeight - wScroll - 12 + \"px\";\n                b_style.left = util.getOffset(target).left + target.offsetWidth - w - 24 + \"px\";\n                b_style.display = \"block\";\n            } else {\n                b_style.display = \"none\";\n            }\n        },\n        _checkDuplicateNode: function(oNode, parentNode) {\n            (function recursionFunc(current) {\n                core._dupleCheck(current, parentNode);\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length; i < len; i++){\n                    recursionFunc(childNodes[i]);\n                }\n            })(oNode);\n        },\n        _dupleCheck: function(oNode, parentNode) {\n            if (!util.isTextStyleElement(oNode)) return;\n            const oStyles = (oNode.style.cssText.match(/[^;]+;/g) || []).map(function(v) {\n                return v.trim();\n            });\n            const nodeName = oNode.nodeName;\n            if (/^span$/i.test(nodeName) && oStyles.length === 0) return oNode;\n            let duple = false;\n            (function recursionFunc(ancestor) {\n                if (util.isWysiwygDiv(ancestor) || !util.isTextStyleElement(ancestor)) return;\n                if (ancestor.nodeName === nodeName) {\n                    duple = true;\n                    const styles = ancestor.style.cssText.match(/[^;]+;/g) || [];\n                    for(let i = 0, len = styles.length, j; i < len; i++){\n                        if ((j = oStyles.indexOf(styles[i].trim())) > -1) {\n                            oStyles.splice(j, 1);\n                        }\n                    }\n                    for(let i = 0, len = ancestor.classList.length; i < len; i++){\n                        oNode.classList.remove(ancestor.classList[i]);\n                    }\n                }\n                recursionFunc(ancestor.parentElement);\n            })(parentNode);\n            if (duple) {\n                if (!(oNode.style.cssText = oStyles.join(\" \"))) {\n                    oNode.setAttribute(\"style\", \"\");\n                    oNode.removeAttribute(\"style\");\n                }\n                if (!oNode.attributes.length) {\n                    oNode.setAttribute(\"data-se-duple\", \"true\");\n                }\n            }\n            return oNode;\n        },\n        /**\r\n         * @description Delete selected node and insert argument value node and return.\r\n         * If the \"afterNode\" exists, it is inserted after the \"afterNode\"\r\n         * Inserting a text node merges with both text nodes on both sides and returns a new \"{ container, startOffset, endOffset }\".\r\n         * @param {Node} oNode Element to be inserted\r\n         * @param {Node|null} afterNode If the node exists, it is inserted after the node\r\n         * @param {Boolean} checkCharCount If true, if \"options.maxCharCount\" is exceeded when \"element\" is added, null is returned without addition.\r\n         * @returns {Object|Node|null}\r\n         */ insertNode: function(oNode, afterNode, checkCharCount) {\n            if (this.isReadOnly || checkCharCount && !this.checkCharCount(oNode, null)) {\n                return null;\n            }\n            let fNode = null;\n            let range = this.getRange();\n            let line = util.isListCell(range.commonAncestorContainer) ? range.commonAncestorContainer : util.getFormatElement(this.getSelectionNode(), null);\n            let insertListCell = util.isListCell(line) && (util.isListCell(oNode) || util.isList(oNode));\n            let parentNode, originAfter, tempAfterNode, tempParentNode = null;\n            const freeFormat = util.isFreeFormatElement(line);\n            const isFormats = !freeFormat && (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode)) || util.isComponent(oNode);\n            if (insertListCell) {\n                tempAfterNode = afterNode || util.isList(oNode) ? line.lastChild : line.nextElementSibling;\n                tempParentNode = util.isList(oNode) ? line : (tempAfterNode || line).parentNode;\n            }\n            if (!afterNode && (isFormats || util.isComponent(oNode) || util.isMedia(oNode))) {\n                const isEdge = this.isEdgePoint(range.endContainer, range.endOffset, \"end\");\n                const r = this.removeNode();\n                const container = r.container;\n                const prevContainer = container === r.prevContainer && range.collapsed ? null : r.prevContainer;\n                if (insertListCell && prevContainer) {\n                    tempParentNode = prevContainer.nodeType === 3 ? prevContainer.parentNode : prevContainer;\n                    if (tempParentNode.contains(container)) {\n                        let sameParent = true;\n                        tempAfterNode = container;\n                        while(tempAfterNode.parentNode && tempAfterNode.parentNode !== tempParentNode){\n                            tempAfterNode = tempAfterNode.parentNode;\n                            sameParent = false;\n                        }\n                        if (sameParent && container === prevContainer) tempAfterNode = tempAfterNode.nextSibling;\n                    } else {\n                        tempAfterNode = null;\n                    }\n                } else if (insertListCell && util.isListCell(container) && !line.parentElement) {\n                    line = util.createElement(\"LI\");\n                    tempParentNode.appendChild(line);\n                    container.appendChild(tempParentNode);\n                    tempAfterNode = null;\n                } else if (container.nodeType === 3 || util.isBreak(container) || insertListCell) {\n                    const depthFormat = util.getParentElement(container, (function(current) {\n                        return this.isRangeFormatElement(current) || this.isListCell(current);\n                    }).bind(util));\n                    afterNode = util.splitElement(container, r.offset, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);\n                    if (!afterNode) {\n                        tempAfterNode = afterNode = line;\n                    } else if (insertListCell) {\n                        if (line.contains(container)) {\n                            const subList = util.isList(line.lastElementChild);\n                            let newCell = null;\n                            if (!isEdge) {\n                                newCell = line.cloneNode(false);\n                                newCell.appendChild(afterNode.textContent.trim() ? afterNode : util.createTextNode(util.zeroWidthSpace));\n                            }\n                            if (subList) {\n                                if (!newCell) {\n                                    newCell = line.cloneNode(false);\n                                    newCell.appendChild(util.createTextNode(util.zeroWidthSpace));\n                                }\n                                newCell.appendChild(line.lastElementChild);\n                            }\n                            if (newCell) {\n                                line.parentNode.insertBefore(newCell, line.nextElementSibling);\n                                tempAfterNode = afterNode = newCell;\n                            }\n                        }\n                    } else {\n                        afterNode = afterNode.previousSibling;\n                    }\n                }\n            }\n            range = !afterNode && !isFormats ? this.getRange_addLine(this.getRange(), null) : this.getRange();\n            const commonCon = range.commonAncestorContainer;\n            const startOff = range.startOffset;\n            const endOff = range.endOffset;\n            const formatRange = range.startContainer === commonCon && util.isFormatElement(commonCon);\n            const startCon = formatRange ? commonCon.childNodes[startOff] || commonCon.childNodes[0] || range.startContainer : range.startContainer;\n            const endCon = formatRange ? commonCon.childNodes[endOff] || commonCon.childNodes[commonCon.childNodes.length - 1] || range.endContainer : range.endContainer;\n            if (!insertListCell) {\n                if (!afterNode) {\n                    parentNode = startCon;\n                    if (startCon.nodeType === 3) {\n                        parentNode = startCon.parentNode;\n                    }\n                    /** No Select range node */ if (range.collapsed) {\n                        if (commonCon.nodeType === 3) {\n                            if (commonCon.textContent.length > endOff) afterNode = commonCon.splitText(endOff);\n                            else afterNode = commonCon.nextSibling;\n                        } else {\n                            if (!util.isBreak(parentNode)) {\n                                let c = parentNode.childNodes[startOff];\n                                const focusNode = c && c.nodeType === 3 && util.onlyZeroWidthSpace(c) && util.isBreak(c.nextSibling) ? c.nextSibling : c;\n                                if (focusNode) {\n                                    if (!focusNode.nextSibling && util.isBreak(focusNode)) {\n                                        parentNode.removeChild(focusNode);\n                                        afterNode = null;\n                                    } else {\n                                        afterNode = util.isBreak(focusNode) && !util.isBreak(oNode) ? focusNode : focusNode.nextSibling;\n                                    }\n                                } else {\n                                    afterNode = null;\n                                }\n                            } else {\n                                afterNode = parentNode;\n                                parentNode = parentNode.parentNode;\n                            }\n                        }\n                    } else {\n                        const isSameContainer = startCon === endCon;\n                        if (isSameContainer) {\n                            if (this.isEdgePoint(endCon, endOff)) afterNode = endCon.nextSibling;\n                            else afterNode = endCon.splitText(endOff);\n                            let removeNode = startCon;\n                            if (!this.isEdgePoint(startCon, startOff)) removeNode = startCon.splitText(startOff);\n                            parentNode.removeChild(removeNode);\n                            if (parentNode.childNodes.length === 0 && isFormats) {\n                                parentNode.innerHTML = \"<br>\";\n                            }\n                        } else {\n                            const removedTag = this.removeNode();\n                            const container = removedTag.container;\n                            const prevContainer = removedTag.prevContainer;\n                            if (container && container.childNodes.length === 0 && isFormats) {\n                                if (util.isFormatElement(container)) {\n                                    container.innerHTML = \"<br>\";\n                                } else if (util.isRangeFormatElement(container)) {\n                                    container.innerHTML = \"<\" + options.defaultTag + \"><br></\" + options.defaultTag + \">\";\n                                }\n                            }\n                            if (util.isListCell(container) && oNode.nodeType === 3) {\n                                parentNode = container;\n                                afterNode = null;\n                            } else if (!isFormats && prevContainer) {\n                                parentNode = prevContainer.nodeType === 3 ? prevContainer.parentNode : prevContainer;\n                                if (parentNode.contains(container)) {\n                                    let sameParent = true;\n                                    afterNode = container;\n                                    while(afterNode.parentNode && afterNode.parentNode !== parentNode){\n                                        afterNode = afterNode.parentNode;\n                                        sameParent = false;\n                                    }\n                                    if (sameParent && container === prevContainer) afterNode = afterNode.nextSibling;\n                                } else {\n                                    afterNode = null;\n                                }\n                            } else if (util.isWysiwygDiv(container) && !util.isFormatElement(oNode)) {\n                                parentNode = container.appendChild(util.createElement(options.defaultTag));\n                                afterNode = null;\n                            } else {\n                                afterNode = isFormats ? endCon : container === prevContainer ? container.nextSibling : container;\n                                parentNode = !afterNode || !afterNode.parentNode ? commonCon : afterNode.parentNode;\n                            }\n                            while(afterNode && !util.isFormatElement(afterNode) && afterNode.parentNode !== commonCon){\n                                afterNode = afterNode.parentNode;\n                            }\n                        }\n                    }\n                } else {\n                    parentNode = afterNode.parentNode;\n                    afterNode = afterNode.nextSibling;\n                    originAfter = true;\n                }\n            }\n            try {\n                // set node\n                if (!insertListCell) {\n                    if (util.isWysiwygDiv(afterNode) || parentNode === context.element.wysiwyg.parentNode) {\n                        parentNode = context.element.wysiwyg;\n                        afterNode = null;\n                    }\n                    if (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode) || !util.isListCell(parentNode) && util.isComponent(oNode)) {\n                        const oldParent = parentNode;\n                        if (util.isList(afterNode)) {\n                            parentNode = afterNode;\n                            afterNode = null;\n                        } else if (util.isListCell(afterNode)) {\n                            parentNode = afterNode.previousElementSibling || afterNode;\n                        } else if (!originAfter && !afterNode) {\n                            const r = this.removeNode();\n                            const container = r.container.nodeType === 3 ? util.isListCell(util.getFormatElement(r.container, null)) ? r.container : util.getFormatElement(r.container, null) || r.container.parentNode : r.container;\n                            const rangeCon = util.isWysiwygDiv(container) || util.isRangeFormatElement(container);\n                            parentNode = rangeCon ? container : container.parentNode;\n                            afterNode = rangeCon ? null : container.nextSibling;\n                        }\n                        if (oldParent.childNodes.length === 0 && parentNode !== oldParent) util.removeItem(oldParent);\n                    }\n                    if (isFormats && !freeFormat && !util.isRangeFormatElement(parentNode) && !util.isListCell(parentNode) && !util.isWysiwygDiv(parentNode)) {\n                        afterNode = parentNode.nextElementSibling;\n                        parentNode = parentNode.parentNode;\n                    }\n                    if (util.isWysiwygDiv(parentNode) && (oNode.nodeType === 3 || util.isBreak(oNode))) {\n                        const fomatNode = util.createElement(options.defaultTag);\n                        fomatNode.appendChild(oNode);\n                        fNode = oNode;\n                        oNode = fomatNode;\n                    }\n                }\n                // insert--\n                if (insertListCell) {\n                    if (!tempParentNode.parentNode) {\n                        parentNode = context.element.wysiwyg;\n                        afterNode = null;\n                    } else {\n                        parentNode = tempParentNode;\n                        afterNode = tempAfterNode;\n                    }\n                } else {\n                    afterNode = parentNode === afterNode ? parentNode.lastChild : afterNode;\n                }\n                if (util.isListCell(oNode) && !util.isList(parentNode)) {\n                    if (util.isListCell(parentNode)) {\n                        afterNode = parentNode.nextElementSibling;\n                        parentNode = parentNode.parentNode;\n                    } else {\n                        const ul = util.createElement(\"ol\");\n                        parentNode.insertBefore(ul, afterNode);\n                        parentNode = ul;\n                        afterNode = null;\n                    }\n                    insertListCell = true;\n                }\n                this._checkDuplicateNode(oNode, parentNode);\n                parentNode.insertBefore(oNode, afterNode);\n                if (insertListCell) {\n                    if (util.onlyZeroWidthSpace(line.textContent.trim())) {\n                        util.removeItem(line);\n                        oNode = oNode.lastChild;\n                    } else {\n                        const chList = util.getArrayItem(line.children, util.isList);\n                        if (chList) {\n                            if (oNode !== chList) {\n                                oNode.appendChild(chList);\n                                oNode = chList.previousSibling;\n                            } else {\n                                parentNode.appendChild(oNode);\n                                oNode = parentNode;\n                            }\n                            if (util.onlyZeroWidthSpace(line.textContent.trim())) {\n                                util.removeItem(line);\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                parentNode.appendChild(oNode);\n                console.warn(\"[SUNEDITOR.insertNode.warn] \" + error);\n            } finally{\n                if (fNode) oNode = fNode;\n                const dupleNodes = parentNode.querySelectorAll(\"[data-se-duple]\");\n                if (dupleNodes.length > 0) {\n                    for(let i = 0, len = dupleNodes.length, d, c, ch, parent; i < len; i++){\n                        d = dupleNodes[i];\n                        ch = d.childNodes;\n                        parent = d.parentNode;\n                        while(ch[0]){\n                            c = ch[0];\n                            parent.insertBefore(c, d);\n                        }\n                        if (d === oNode) oNode = c;\n                        util.removeItem(d);\n                    }\n                }\n                if ((util.isFormatElement(oNode) || util.isComponent(oNode)) && startCon === endCon) {\n                    const cItem = util.getFormatElement(commonCon, null);\n                    if (cItem && cItem.nodeType === 1 && util.isEmptyLine(cItem)) {\n                        util.removeItem(cItem);\n                    }\n                }\n                if (freeFormat && (util.isFormatElement(oNode) || util.isRangeFormatElement(oNode))) {\n                    oNode = this._setIntoFreeFormat(oNode);\n                }\n                if (!util.isComponent(oNode)) {\n                    let offset = 1;\n                    if (oNode.nodeType === 3) {\n                        offset = oNode.textContent.length;\n                        this.setRange(oNode, offset, oNode, offset);\n                    } else if (!util.isBreak(oNode) && !util.isListCell(oNode) && util.isFormatElement(parentNode)) {\n                        let zeroWidth = null;\n                        if (!oNode.previousSibling || util.isBreak(oNode.previousSibling)) {\n                            zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                            oNode.parentNode.insertBefore(zeroWidth, oNode);\n                        }\n                        if (!oNode.nextSibling || util.isBreak(oNode.nextSibling)) {\n                            zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                            oNode.parentNode.insertBefore(zeroWidth, oNode.nextSibling);\n                        }\n                        if (util._isIgnoreNodeChange(oNode)) {\n                            oNode = oNode.nextSibling;\n                            offset = 0;\n                        }\n                    }\n                    this.setRange(oNode, offset, oNode, offset);\n                }\n                return oNode;\n            }\n        },\n        _setIntoFreeFormat: function(oNode) {\n            const parentNode = oNode.parentNode;\n            let oNodeChildren, lastONode;\n            while(util.isFormatElement(oNode) || util.isRangeFormatElement(oNode)){\n                oNodeChildren = oNode.childNodes;\n                lastONode = null;\n                while(oNodeChildren[0]){\n                    lastONode = oNodeChildren[0];\n                    if (util.isFormatElement(lastONode) || util.isRangeFormatElement(lastONode)) {\n                        this._setIntoFreeFormat(lastONode);\n                        if (!oNode.parentNode) break;\n                        oNodeChildren = oNode.childNodes;\n                        continue;\n                    }\n                    parentNode.insertBefore(lastONode, oNode);\n                }\n                if (oNode.childNodes.length === 0) util.removeItem(oNode);\n                oNode = util.createElement(\"BR\");\n                parentNode.insertBefore(oNode, lastONode.nextSibling);\n            }\n            return oNode;\n        },\n        /**\r\n         * @description Delete the currently selected nodes and reset selection range\r\n         * Returns {container: \"the last element after deletion\", offset: \"offset\", prevContainer: \"previousElementSibling Of the deleted area\"}\r\n         * @returns {Object}\r\n         */ removeNode: function() {\n            this._resetRangeToTextNode();\n            const range = this.getRange();\n            if (range.startContainer === range.endContainer) {\n                const fileComponent = util.getParentElement(range.startContainer, util.isMediaComponent);\n                if (fileComponent) {\n                    const br = util.createElement(\"BR\");\n                    const format = util.createElement(options.defaultTag);\n                    format.appendChild(br);\n                    util.changeElement(fileComponent, format);\n                    core.setRange(format, 0, format, 0);\n                    this.history.push(true);\n                    return {\n                        container: format,\n                        offset: 0,\n                        prevContainer: null\n                    };\n                }\n            }\n            const isStartEdge = range.startOffset === 0;\n            const isEndEdge = core.isEdgePoint(range.endContainer, range.endOffset, \"end\");\n            let prevContainer = null;\n            let startPrevEl = null;\n            let endNextEl = null;\n            if (isStartEdge) {\n                startPrevEl = util.getFormatElement(range.startContainer);\n                if (startPrevEl) {\n                    prevContainer = startPrevEl.previousElementSibling;\n                    startPrevEl = prevContainer;\n                }\n            }\n            if (isEndEdge) {\n                endNextEl = util.getFormatElement(range.endContainer);\n                endNextEl = endNextEl ? endNextEl.nextElementSibling : endNextEl;\n            }\n            let container, offset = 0;\n            let startCon = range.startContainer;\n            let endCon = range.endContainer;\n            let startOff = range.startOffset;\n            let endOff = range.endOffset;\n            const commonCon = range.commonAncestorContainer.nodeType === 3 && range.commonAncestorContainer.parentNode === startCon.parentNode ? startCon.parentNode : range.commonAncestorContainer;\n            if (commonCon === startCon && commonCon === endCon) {\n                startCon = commonCon.children[startOff];\n                endCon = commonCon.children[endOff];\n                startOff = endOff = 0;\n            }\n            if (!startCon || !endCon) return {\n                container: commonCon,\n                offset: 0\n            };\n            if (startCon === endCon && range.collapsed) {\n                if (startCon.textContent && util.onlyZeroWidthSpace(startCon.textContent.substr(startOff))) {\n                    return {\n                        container: startCon,\n                        offset: startOff,\n                        prevContainer: startCon && startCon.parentNode ? startCon : null\n                    };\n                }\n            }\n            let beforeNode = null;\n            let afterNode = null;\n            const childNodes = util.getListChildNodes(commonCon, null);\n            let startIndex = util.getArrayIndex(childNodes, startCon);\n            let endIndex = util.getArrayIndex(childNodes, endCon);\n            if (childNodes.length > 0 && startIndex > -1 && endIndex > -1) {\n                for(let i = startIndex + 1, startNode = startCon; i >= 0; i--){\n                    if (childNodes[i] === startNode.parentNode && childNodes[i].firstChild === startNode && startOff === 0) {\n                        startIndex = i;\n                        startNode = startNode.parentNode;\n                    }\n                }\n                for(let i = endIndex - 1, endNode = endCon; i > startIndex; i--){\n                    if (childNodes[i] === endNode.parentNode && childNodes[i].nodeType === 1) {\n                        childNodes.splice(i, 1);\n                        endNode = endNode.parentNode;\n                        --endIndex;\n                    }\n                }\n            } else {\n                if (childNodes.length === 0) {\n                    if (util.isFormatElement(commonCon) || util.isRangeFormatElement(commonCon) || util.isWysiwygDiv(commonCon) || util.isBreak(commonCon) || util.isMedia(commonCon)) {\n                        return {\n                            container: commonCon,\n                            offset: 0\n                        };\n                    } else if (commonCon.nodeType === 3) {\n                        return {\n                            container: commonCon,\n                            offset: endOff\n                        };\n                    }\n                    childNodes.push(commonCon);\n                    startCon = endCon = commonCon;\n                } else {\n                    startCon = endCon = childNodes[0];\n                    if (util.isBreak(startCon) || util.onlyZeroWidthSpace(startCon)) {\n                        return {\n                            container: util.isMedia(commonCon) ? commonCon : startCon,\n                            offset: 0\n                        };\n                    }\n                }\n                startIndex = endIndex = 0;\n            }\n            for(let i = startIndex; i <= endIndex; i++){\n                const item = childNodes[i];\n                if (item.length === 0 || item.nodeType === 3 && item.data === undefined) {\n                    this._nodeRemoveListItem(item);\n                    continue;\n                }\n                if (item === startCon) {\n                    if (startCon.nodeType === 1) {\n                        if (util.isComponent(startCon)) continue;\n                        else beforeNode = util.createTextNode(startCon.textContent);\n                    } else {\n                        if (item === endCon) {\n                            beforeNode = util.createTextNode(startCon.substringData(0, startOff) + endCon.substringData(endOff, endCon.length - endOff));\n                            offset = startOff;\n                        } else {\n                            beforeNode = util.createTextNode(startCon.substringData(0, startOff));\n                        }\n                    }\n                    if (beforeNode.length > 0) {\n                        startCon.data = beforeNode.data;\n                    } else {\n                        this._nodeRemoveListItem(startCon);\n                    }\n                    if (item === endCon) break;\n                    continue;\n                }\n                if (item === endCon) {\n                    if (endCon.nodeType === 1) {\n                        if (util.isComponent(endCon)) continue;\n                        else afterNode = util.createTextNode(endCon.textContent);\n                    } else {\n                        afterNode = util.createTextNode(endCon.substringData(endOff, endCon.length - endOff));\n                    }\n                    if (afterNode.length > 0) {\n                        endCon.data = afterNode.data;\n                    } else {\n                        this._nodeRemoveListItem(endCon);\n                    }\n                    continue;\n                }\n                this._nodeRemoveListItem(item);\n            }\n            const endUl = util.getParentElement(endCon, \"ul\");\n            const startLi = util.getParentElement(startCon, \"li\");\n            if (endUl && startLi && startLi.contains(endUl)) {\n                container = endUl.previousSibling;\n                offset = container.textContent.length;\n            } else {\n                container = endCon && endCon.parentNode ? endCon : startCon && startCon.parentNode ? startCon : range.endContainer || range.startContainer;\n                offset = !isStartEdge && !isEndEdge ? offset : isEndEdge ? container.textContent.length : 0;\n            }\n            if (!util.isWysiwygDiv(container) && container.childNodes.length === 0) {\n                const rc = util.removeItemAllParents(container, null, null);\n                if (rc) container = rc.sc || rc.ec || context.element.wysiwyg;\n            }\n            if (!util.getFormatElement(container) && !(startCon && startCon.parentNode)) {\n                if (endNextEl) {\n                    container = endNextEl;\n                    offset = 0;\n                } else if (startPrevEl) {\n                    container = startPrevEl;\n                    offset = 1;\n                }\n            }\n            // set range\n            this.setRange(container, offset, container, offset);\n            // history stack\n            this.history.push(true);\n            return {\n                container: container,\n                offset: offset,\n                prevContainer: prevContainer\n            };\n        },\n        _nodeRemoveListItem: function(item) {\n            const format = util.getFormatElement(item, null);\n            util.removeItem(item);\n            if (!util.isListCell(format)) return;\n            util.removeItemAllParents(format, null, null);\n            if (format && util.isList(format.firstChild)) {\n                format.insertBefore(util.createTextNode(util.zeroWidthSpace), format.firstChild);\n            }\n        },\n        /**\r\n         * @description Appended all selected format Element to the argument element and insert\r\n         * @param {Element} rangeElement Element of wrap the arguments (BLOCKQUOTE...)\r\n         */ applyRangeFormatElement: function(rangeElement) {\n            this.getRange_addLine(this.getRange(), null);\n            const rangeLines = this.getSelectedElementsAndComponents(false);\n            if (!rangeLines || rangeLines.length === 0) return;\n            linesLoop: for(let i = 0, len = rangeLines.length, line, nested, fEl, lEl, f, l; i < len; i++){\n                line = rangeLines[i];\n                if (!util.isListCell(line)) continue;\n                nested = line.lastElementChild;\n                if (nested && util.isListCell(line.nextElementSibling) && rangeLines.indexOf(line.nextElementSibling) > -1) {\n                    lEl = nested.lastElementChild;\n                    if (rangeLines.indexOf(lEl) > -1) {\n                        let list = null;\n                        while(list = lEl.lastElementChild){\n                            if (util.isList(list)) {\n                                if (rangeLines.indexOf(list.lastElementChild) > -1) {\n                                    lEl = list.lastElementChild;\n                                } else {\n                                    continue linesLoop;\n                                }\n                            }\n                        }\n                        fEl = nested.firstElementChild;\n                        f = rangeLines.indexOf(fEl);\n                        l = rangeLines.indexOf(lEl);\n                        rangeLines.splice(f, l - f + 1);\n                        len = rangeLines.length;\n                        continue;\n                    }\n                }\n            }\n            let last = rangeLines[rangeLines.length - 1];\n            let standTag, beforeTag, pElement;\n            if (util.isRangeFormatElement(last) || util.isFormatElement(last)) {\n                standTag = last;\n            } else {\n                standTag = util.getRangeFormatElement(last, null) || util.getFormatElement(last, null);\n            }\n            if (util.isCell(standTag)) {\n                beforeTag = null;\n                pElement = standTag;\n            } else {\n                beforeTag = standTag.nextSibling;\n                pElement = standTag.parentNode;\n            }\n            let parentDepth = util.getElementDepth(standTag);\n            let listParent = null;\n            const lineArr = [];\n            const removeItems = function(parent, origin, before) {\n                let cc = null;\n                if (parent !== origin && !util.isTable(origin)) {\n                    if (origin && util.getElementDepth(parent) === util.getElementDepth(origin)) return before;\n                    cc = util.removeItemAllParents(origin, null, parent);\n                }\n                return cc ? cc.ec : before;\n            };\n            for(let i = 0, len = rangeLines.length, line, originParent, depth, before, nextLine, nextList, nested; i < len; i++){\n                line = rangeLines[i];\n                originParent = line.parentNode;\n                if (!originParent || rangeElement.contains(originParent)) continue;\n                depth = util.getElementDepth(line);\n                if (util.isList(originParent)) {\n                    if (listParent === null) {\n                        if (nextList) {\n                            listParent = nextList;\n                            nested = true;\n                            nextList = null;\n                        } else {\n                            listParent = originParent.cloneNode(false);\n                        }\n                    }\n                    lineArr.push(line);\n                    nextLine = rangeLines[i + 1];\n                    if (i === len - 1 || nextLine && nextLine.parentNode !== originParent) {\n                        // nested list\n                        if (nextLine && line.contains(nextLine.parentNode)) {\n                            nextList = nextLine.parentNode.cloneNode(false);\n                        }\n                        let list = originParent.parentNode, p;\n                        while(util.isList(list)){\n                            p = util.createElement(list.nodeName);\n                            p.appendChild(listParent);\n                            listParent = p;\n                            list = list.parentNode;\n                        }\n                        const edge = this.detachRangeFormatElement(originParent, lineArr, null, true, true);\n                        if (parentDepth >= depth) {\n                            parentDepth = depth;\n                            pElement = edge.cc;\n                            beforeTag = removeItems(pElement, originParent, edge.ec);\n                            if (beforeTag) pElement = beforeTag.parentNode;\n                        } else if (pElement === edge.cc) {\n                            beforeTag = edge.ec;\n                        }\n                        if (pElement !== edge.cc) {\n                            before = removeItems(pElement, edge.cc, before);\n                            if (before !== undefined) beforeTag = before;\n                            else beforeTag = edge.cc;\n                        }\n                        for(let c = 0, cLen = edge.removeArray.length; c < cLen; c++){\n                            listParent.appendChild(edge.removeArray[c]);\n                        }\n                        if (!nested) rangeElement.appendChild(listParent);\n                        if (nextList) edge.removeArray[edge.removeArray.length - 1].appendChild(nextList);\n                        listParent = null;\n                        nested = false;\n                    }\n                } else {\n                    if (parentDepth >= depth) {\n                        parentDepth = depth;\n                        pElement = originParent;\n                        beforeTag = line.nextSibling;\n                    }\n                    rangeElement.appendChild(line);\n                    if (pElement !== originParent) {\n                        before = removeItems(pElement, originParent);\n                        if (before !== undefined) beforeTag = before;\n                    }\n                }\n            }\n            this.effectNode = null;\n            util.mergeSameTags(rangeElement, null, false);\n            util.mergeNestedTags(rangeElement, (function(current) {\n                return this.isList(current);\n            }).bind(util));\n            // Nested list\n            if (beforeTag && util.getElementDepth(beforeTag) > 0 && (util.isList(beforeTag.parentNode) || util.isList(beforeTag.parentNode.parentNode))) {\n                const depthFormat = util.getParentElement(beforeTag, (function(current) {\n                    return this.isRangeFormatElement(current) && !this.isList(current);\n                }).bind(util));\n                const splitRange = util.splitElement(beforeTag, null, !depthFormat ? 0 : util.getElementDepth(depthFormat) + 1);\n                splitRange.parentNode.insertBefore(rangeElement, splitRange);\n            } else {\n                pElement.insertBefore(rangeElement, beforeTag);\n                removeItems(rangeElement, beforeTag);\n            }\n            const edge = util.getEdgeChildNodes(rangeElement.firstElementChild, rangeElement.lastElementChild);\n            if (rangeLines.length > 1) {\n                this.setRange(edge.sc, 0, edge.ec, edge.ec.textContent.length);\n            } else {\n                this.setRange(edge.ec, edge.ec.textContent.length, edge.ec, edge.ec.textContent.length);\n            }\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description The elements of the \"selectedFormats\" array are detached from the \"rangeElement\" element. (\"LI\" tags are converted to \"P\" tags)\r\n         * When \"selectedFormats\" is null, all elements are detached and return {cc: parentNode, sc: nextSibling, ec: previousSibling, removeArray: [Array of removed elements]}.\r\n         * @param {Element} rangeElement Range format element (PRE, BLOCKQUOTE, OL, UL...)\r\n         * @param {Array|null} selectedFormats Array of format elements (P, DIV, LI...) to remove.\r\n         * If null, Applies to all elements and return {cc: parentNode, sc: nextSibling, ec: previousSibling}\r\n         * @param {Element|null} newRangeElement The node(rangeElement) to replace the currently wrapped node.\r\n         * @param {Boolean} remove If true, deleted without detached.\r\n         * @param {Boolean} notHistoryPush When true, it does not update the history stack and the selection object and return EdgeNodes (util.getEdgeChildNodes)\r\n         * @returns {Object}\r\n         */ detachRangeFormatElement: function(rangeElement, selectedFormats, newRangeElement, remove, notHistoryPush) {\n            const range = this.getRange();\n            let so = range.startOffset;\n            let eo = range.endOffset;\n            let children = util.getListChildNodes(rangeElement, function(current) {\n                return current.parentNode === rangeElement;\n            });\n            let parent = rangeElement.parentNode;\n            let firstNode = null;\n            let lastNode = null;\n            let rangeEl = rangeElement.cloneNode(false);\n            const removeArray = [];\n            const newList = util.isList(newRangeElement);\n            let insertedNew = false;\n            let reset = false;\n            let moveComplete = false;\n            function appendNode(parent, insNode, sibling, originNode) {\n                if (util.onlyZeroWidthSpace(insNode)) {\n                    insNode.innerHTML = util.zeroWidthSpace;\n                    so = eo = 1;\n                }\n                if (insNode.nodeType === 3) {\n                    parent.insertBefore(insNode, sibling);\n                    return insNode;\n                }\n                const insChildren = (moveComplete ? insNode : originNode).childNodes;\n                let format = insNode.cloneNode(false);\n                let first = null;\n                let c = null;\n                while(insChildren[0]){\n                    c = insChildren[0];\n                    if (util._notTextNode(c) && !util.isBreak(c) && !util.isListCell(format)) {\n                        if (format.childNodes.length > 0) {\n                            if (!first) first = format;\n                            parent.insertBefore(format, sibling);\n                            format = insNode.cloneNode(false);\n                        }\n                        parent.insertBefore(c, sibling);\n                        if (!first) first = c;\n                    } else {\n                        format.appendChild(c);\n                    }\n                }\n                if (format.childNodes.length > 0) {\n                    if (util.isListCell(parent) && util.isListCell(format) && util.isList(sibling)) {\n                        if (newList) {\n                            first = sibling;\n                            while(sibling){\n                                format.appendChild(sibling);\n                                sibling = sibling.nextSibling;\n                            }\n                            parent.parentNode.insertBefore(format, parent.nextElementSibling);\n                        } else {\n                            const originNext = originNode.nextElementSibling;\n                            const detachRange = util.detachNestedList(originNode, false);\n                            if (rangeElement !== detachRange || originNext !== originNode.nextElementSibling) {\n                                const fChildren = format.childNodes;\n                                while(fChildren[0]){\n                                    originNode.appendChild(fChildren[0]);\n                                }\n                                rangeElement = detachRange;\n                                reset = true;\n                            }\n                        }\n                    } else {\n                        parent.insertBefore(format, sibling);\n                    }\n                    if (!first) first = format;\n                }\n                return first;\n            }\n            // detach loop\n            for(let i = 0, len = children.length, insNode, lineIndex, next; i < len; i++){\n                insNode = children[i];\n                if (insNode.nodeType === 3 && util.isList(rangeEl)) continue;\n                moveComplete = false;\n                if (remove && i === 0) {\n                    if (!selectedFormats || selectedFormats.length === len || selectedFormats[0] === insNode) {\n                        firstNode = rangeElement.previousSibling;\n                    } else {\n                        firstNode = rangeEl;\n                    }\n                }\n                if (selectedFormats) lineIndex = selectedFormats.indexOf(insNode);\n                if (selectedFormats && lineIndex === -1) {\n                    if (!rangeEl) rangeEl = rangeElement.cloneNode(false);\n                    rangeEl.appendChild(insNode);\n                } else {\n                    if (selectedFormats) next = selectedFormats[lineIndex + 1];\n                    if (rangeEl && rangeEl.children.length > 0) {\n                        parent.insertBefore(rangeEl, rangeElement);\n                        rangeEl = null;\n                    }\n                    if (!newList && util.isListCell(insNode)) {\n                        if (next && util.getElementDepth(insNode) !== util.getElementDepth(next) && (util.isListCell(parent) || util.getArrayItem(insNode.children, util.isList, false))) {\n                            const insNext = insNode.nextElementSibling;\n                            const detachRange = util.detachNestedList(insNode, false);\n                            if (rangeElement !== detachRange || insNext !== insNode.nextElementSibling) {\n                                rangeElement = detachRange;\n                                reset = true;\n                            }\n                        } else {\n                            const inner = insNode;\n                            insNode = util.createElement(remove ? inner.nodeName : util.isList(rangeElement.parentNode) || util.isListCell(rangeElement.parentNode) ? \"LI\" : util.isCell(rangeElement.parentNode) ? \"DIV\" : options.defaultTag);\n                            const isCell = util.isListCell(insNode);\n                            const innerChildren = inner.childNodes;\n                            while(innerChildren[0]){\n                                if (util.isList(innerChildren[0]) && !isCell) break;\n                                insNode.appendChild(innerChildren[0]);\n                            }\n                            util.copyFormatAttributes(insNode, inner);\n                            moveComplete = true;\n                        }\n                    } else {\n                        insNode = insNode.cloneNode(false);\n                    }\n                    if (!reset) {\n                        if (!remove) {\n                            if (newRangeElement) {\n                                if (!insertedNew) {\n                                    parent.insertBefore(newRangeElement, rangeElement);\n                                    insertedNew = true;\n                                }\n                                insNode = appendNode(newRangeElement, insNode, null, children[i]);\n                            } else {\n                                insNode = appendNode(parent, insNode, rangeElement, children[i]);\n                            }\n                            if (!reset) {\n                                if (selectedFormats) {\n                                    lastNode = insNode;\n                                    if (!firstNode) {\n                                        firstNode = insNode;\n                                    }\n                                } else if (!firstNode) {\n                                    firstNode = lastNode = insNode;\n                                }\n                            }\n                        } else {\n                            removeArray.push(insNode);\n                            util.removeItem(children[i]);\n                        }\n                        if (reset) {\n                            reset = moveComplete = false;\n                            children = util.getListChildNodes(rangeElement, function(current) {\n                                return current.parentNode === rangeElement;\n                            });\n                            rangeEl = rangeElement.cloneNode(false);\n                            parent = rangeElement.parentNode;\n                            i = -1;\n                            len = children.length;\n                            continue;\n                        }\n                    }\n                }\n            }\n            const rangeParent = rangeElement.parentNode;\n            let rangeRight = rangeElement.nextSibling;\n            if (rangeEl && rangeEl.children.length > 0) {\n                rangeParent.insertBefore(rangeEl, rangeRight);\n            }\n            if (newRangeElement) firstNode = newRangeElement.previousSibling;\n            else if (!firstNode) firstNode = rangeElement.previousSibling;\n            rangeRight = rangeElement.nextSibling !== rangeEl ? rangeElement.nextSibling : rangeEl ? rangeEl.nextSibling : null;\n            if (rangeElement.children.length === 0 || rangeElement.textContent.length === 0) {\n                util.removeItem(rangeElement);\n            } else {\n                util.removeEmptyNode(rangeElement, null, false);\n            }\n            let edge = null;\n            if (remove) {\n                edge = {\n                    cc: rangeParent,\n                    sc: firstNode,\n                    so: so,\n                    ec: rangeRight,\n                    eo: eo,\n                    removeArray: removeArray\n                };\n            } else {\n                if (!firstNode) firstNode = lastNode;\n                if (!lastNode) lastNode = firstNode;\n                const childEdge = util.getEdgeChildNodes(firstNode, lastNode.parentNode ? firstNode : lastNode);\n                edge = {\n                    cc: (childEdge.sc || childEdge.ec).parentNode,\n                    sc: childEdge.sc,\n                    so: so,\n                    ec: childEdge.ec,\n                    eo: eo,\n                    removeArray: null\n                };\n            }\n            this.effectNode = null;\n            if (notHistoryPush) return edge;\n            if (!remove && edge) {\n                if (!selectedFormats) {\n                    this.setRange(edge.sc, 0, edge.sc, 0);\n                } else {\n                    this.setRange(edge.sc, so, edge.ec, eo);\n                }\n            }\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description \"selectedFormats\" array are detached from the list element.\r\n         * The return value is applied when the first and last lines of \"selectedFormats\" are \"LI\" respectively.\r\n         * @param {Array} selectedFormats Array of format elements (LI, P...) to remove.\r\n         * @param {Boolean} remove If true, deleted without detached.\r\n         * @returns {Object} {sc: <LI>, ec: <LI>}.\r\n         */ detachList: function(selectedFormats, remove) {\n            let rangeArr = {};\n            let listFirst = false;\n            let listLast = false;\n            let first = null;\n            let last = null;\n            const passComponent = (function(current) {\n                return !this.isComponent(current);\n            }).bind(util);\n            for(let i = 0, len = selectedFormats.length, r, o, lastIndex, isList; i < len; i++){\n                lastIndex = i === len - 1;\n                o = util.getRangeFormatElement(selectedFormats[i], passComponent);\n                isList = util.isList(o);\n                if (!r && isList) {\n                    r = o;\n                    rangeArr = {\n                        r: r,\n                        f: [\n                            util.getParentElement(selectedFormats[i], \"LI\")\n                        ]\n                    };\n                    if (i === 0) listFirst = true;\n                } else if (r && isList) {\n                    if (r !== o) {\n                        const edge = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, null, remove, true);\n                        o = selectedFormats[i].parentNode;\n                        if (listFirst) {\n                            first = edge.sc;\n                            listFirst = false;\n                        }\n                        if (lastIndex) last = edge.ec;\n                        if (isList) {\n                            r = o;\n                            rangeArr = {\n                                r: r,\n                                f: [\n                                    util.getParentElement(selectedFormats[i], \"LI\")\n                                ]\n                            };\n                            if (lastIndex) listLast = true;\n                        } else {\n                            r = null;\n                        }\n                    } else {\n                        rangeArr.f.push(util.getParentElement(selectedFormats[i], \"LI\"));\n                        if (lastIndex) listLast = true;\n                    }\n                }\n                if (lastIndex && util.isList(r)) {\n                    const edge = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, null, remove, true);\n                    if (listLast || len === 1) last = edge.ec;\n                    if (listFirst) first = edge.sc || last;\n                }\n            }\n            return {\n                sc: first,\n                ec: last\n            };\n        },\n        /**\r\n         * @description Add, update, and delete nodes from selected text.\r\n         * 1. If there is a node in the \"appendNode\" argument, a node with the same tags and attributes as \"appendNode\" is added to the selection text.\r\n         * 2. If it is in the same tag, only the tag's attributes are changed without adding a tag.\r\n         * 3. If the \"appendNode\" argument is null, the node of the selection is update or remove without adding a new node.\r\n         * 4. The same style as the style attribute of the \"styleArray\" argument is deleted.\r\n         *    (Styles should be put with attribute names from css. [\"background-color\"])\r\n         * 5. The same class name as the class attribute of the \"styleArray\" argument is deleted.\r\n         *    (The class name is preceded by \".\" [\".className\"])\r\n         * 6. Use a list of styles and classes of \"appendNode\" in \"styleArray\" to avoid duplicate property values.\r\n         * 7. If a node with all styles and classes removed has the same tag name as \"appendNode\" or \"removeNodeArray\", or \"appendNode\" is null, that node is deleted.\r\n         * 8. Regardless of the style and class of the node, the tag with the same name as the \"removeNodeArray\" argument value is deleted.\r\n         * 9. If the \"strictRemove\" argument is true, only nodes with all styles and classes removed from the nodes of \"removeNodeArray\" are removed.\r\n         *10. It won't work if the parent node has the same class and same value style.\r\n         *    However, if there is a value in \"removeNodeArray\", it works and the text node is separated even if there is no node to replace.\r\n         * @param {Element|null} appendNode The element to be added to the selection. If it is null, only delete the node.\r\n         * @param {Array|null} styleArray The style or className attribute name Array to check (['font-size'], ['.className'], ['font-family', 'color', '.className']...])\r\n         * @param {Array|null} removeNodeArray An array of node names to remove types from, remove all formats when \"appendNode\" is null and there is an empty array or null value. (['span'], ['strong', 'em'] ...])\r\n         * @param {Boolean|null} strictRemove If true, only nodes with all styles and classes removed from the nodes of \"removeNodeArray\" are removed.\r\n         */ nodeChange: function(appendNode, styleArray, removeNodeArray, strictRemove) {\n            this._resetRangeToTextNode();\n            let range = this.getRange_addLine(this.getRange(), null);\n            styleArray = styleArray && styleArray.length > 0 ? styleArray : false;\n            removeNodeArray = removeNodeArray && removeNodeArray.length > 0 ? removeNodeArray : false;\n            const isRemoveNode = !appendNode;\n            const isRemoveFormat = isRemoveNode && !removeNodeArray && !styleArray;\n            let startCon = range.startContainer;\n            let startOff = range.startOffset;\n            let endCon = range.endContainer;\n            let endOff = range.endOffset;\n            if (isRemoveFormat && range.collapsed && util.isFormatElement(startCon.parentNode) || startCon === endCon && startCon.nodeType === 1 && util.isNonEditable(startCon)) {\n                const format = startCon.parentNode;\n                if (!util.isListCell(format) || !util.getValues(format.style).some((function(k) {\n                    return this._listKebab.indexOf(k) > -1;\n                }).bind(this))) return;\n            }\n            if (range.collapsed && !isRemoveFormat) {\n                if (startCon.nodeType === 1 && !util.isBreak(startCon) && !util.isComponent(startCon)) {\n                    let afterNode = null;\n                    const focusNode = startCon.childNodes[startOff];\n                    if (focusNode) {\n                        if (!focusNode.nextSibling) {\n                            afterNode = null;\n                        } else {\n                            afterNode = util.isBreak(focusNode) ? focusNode : focusNode.nextSibling;\n                        }\n                    }\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    startCon.insertBefore(zeroWidth, afterNode);\n                    this.setRange(zeroWidth, 1, zeroWidth, 1);\n                    range = this.getRange();\n                    startCon = range.startContainer;\n                    startOff = range.startOffset;\n                    endCon = range.endContainer;\n                    endOff = range.endOffset;\n                }\n            }\n            if (util.isFormatElement(startCon)) {\n                startCon = startCon.childNodes[startOff] || startCon.firstChild;\n                startOff = 0;\n            }\n            if (util.isFormatElement(endCon)) {\n                endCon = endCon.childNodes[endOff] || endCon.lastChild;\n                endOff = endCon.textContent.length;\n            }\n            if (isRemoveNode) {\n                appendNode = util.createElement(\"DIV\");\n            }\n            const wRegExp = _w.RegExp;\n            const newNodeName = appendNode.nodeName;\n            /* checked same style property */ if (!isRemoveFormat && startCon === endCon && !removeNodeArray && appendNode) {\n                let sNode = startCon;\n                let checkCnt = 0;\n                const checkAttrs = [];\n                const checkStyles = appendNode.style;\n                for(let i = 0, len = checkStyles.length; i < len; i++){\n                    checkAttrs.push(checkStyles[i]);\n                }\n                const ckeckClasses = appendNode.classList;\n                for(let i = 0, len = ckeckClasses.length; i < len; i++){\n                    checkAttrs.push(\".\" + ckeckClasses[i]);\n                }\n                if (checkAttrs.length > 0) {\n                    while(!util.isFormatElement(sNode) && !util.isWysiwygDiv(sNode)){\n                        for(let i = 0; i < checkAttrs.length; i++){\n                            if (sNode.nodeType === 1) {\n                                const s = checkAttrs[i];\n                                const classReg = /^\\./.test(s) ? new wRegExp(\"\\\\s*\" + s.replace(/^\\./, \"\") + \"(\\\\s+|$)\", \"ig\") : false;\n                                const styleCheck = isRemoveNode ? !!sNode.style[s] : !!sNode.style[s] && !!appendNode.style[s] && sNode.style[s] === appendNode.style[s];\n                                const classCheck = classReg === false ? false : isRemoveNode ? !!sNode.className.match(classReg) : !!sNode.className.match(classReg) && !!appendNode.className.match(classReg);\n                                if (styleCheck || classCheck) {\n                                    checkCnt++;\n                                }\n                            }\n                        }\n                        sNode = sNode.parentNode;\n                    }\n                    if (checkCnt >= checkAttrs.length) return;\n                }\n            }\n            let start = {}, end = {};\n            let newNode, styleRegExp = \"\", classRegExp = \"\", removeNodeRegExp = \"\";\n            if (styleArray) {\n                for(let i = 0, len = styleArray.length, s; i < len; i++){\n                    s = styleArray[i];\n                    if (/^\\./.test(s)) {\n                        classRegExp += (classRegExp ? \"|\" : \"\\\\s*(?:\") + s.replace(/^\\./, \"\");\n                    } else {\n                        styleRegExp += (styleRegExp ? \"|\" : \"(?:;|^|\\\\s)(?:\") + s;\n                    }\n                }\n                if (styleRegExp) {\n                    styleRegExp += \")\\\\s*:[^;]*\\\\s*(?:;|$)\";\n                    styleRegExp = new wRegExp(styleRegExp, \"ig\");\n                }\n                if (classRegExp) {\n                    classRegExp += \")(?=\\\\s+|$)\";\n                    classRegExp = new wRegExp(classRegExp, \"ig\");\n                }\n            }\n            if (removeNodeArray) {\n                removeNodeRegExp = \"^(?:\" + removeNodeArray[0];\n                for(let i = 1; i < removeNodeArray.length; i++){\n                    removeNodeRegExp += \"|\" + removeNodeArray[i];\n                }\n                removeNodeRegExp += \")$\";\n                removeNodeRegExp = new wRegExp(removeNodeRegExp, \"i\");\n            }\n            /** validation check function*/ const wBoolean = _w.Boolean;\n            const _removeCheck = {\n                v: false\n            };\n            const validation = function(checkNode) {\n                const vNode = checkNode.cloneNode(false);\n                // all path\n                if (vNode.nodeType === 3 || util.isBreak(vNode)) return vNode;\n                // all remove\n                if (isRemoveFormat) return null;\n                // remove node check\n                const tagRemove = !removeNodeRegExp && isRemoveNode || removeNodeRegExp && removeNodeRegExp.test(vNode.nodeName);\n                // tag remove\n                if (tagRemove && !strictRemove) {\n                    _removeCheck.v = true;\n                    return null;\n                }\n                // style regexp\n                const originStyle = vNode.style.cssText;\n                let style = \"\";\n                if (styleRegExp && originStyle.length > 0) {\n                    style = originStyle.replace(styleRegExp, \"\").trim();\n                    if (style !== originStyle) _removeCheck.v = true;\n                }\n                // class check\n                const originClasses = vNode.className;\n                let classes = \"\";\n                if (classRegExp && originClasses.length > 0) {\n                    classes = originClasses.replace(classRegExp, \"\").trim();\n                    if (classes !== originClasses) _removeCheck.v = true;\n                }\n                // remove only\n                if (isRemoveNode) {\n                    if ((classRegExp || !originClasses) && (styleRegExp || !originStyle) && !style && !classes && tagRemove) {\n                        _removeCheck.v = true;\n                        return null;\n                    }\n                }\n                // change\n                if (style || classes || vNode.nodeName !== newNodeName || wBoolean(styleRegExp) !== wBoolean(originStyle) || wBoolean(classRegExp) !== wBoolean(originClasses)) {\n                    if (styleRegExp && originStyle.length > 0) vNode.style.cssText = style;\n                    if (!vNode.style.cssText) {\n                        vNode.removeAttribute(\"style\");\n                    }\n                    if (classRegExp && originClasses.length > 0) vNode.className = classes.trim();\n                    if (!vNode.className.trim()) {\n                        vNode.removeAttribute(\"class\");\n                    }\n                    if (!vNode.style.cssText && !vNode.className && (vNode.nodeName === newNodeName || tagRemove)) {\n                        _removeCheck.v = true;\n                        return null;\n                    }\n                    return vNode;\n                }\n                _removeCheck.v = true;\n                return null;\n            };\n            // get line nodes\n            const lineNodes = this.getSelectedElements(null);\n            range = this.getRange();\n            startCon = range.startContainer;\n            startOff = range.startOffset;\n            endCon = range.endContainer;\n            endOff = range.endOffset;\n            if (!util.getFormatElement(startCon, null)) {\n                startCon = util.getChildElement(lineNodes[0], function(current) {\n                    return current.nodeType === 3;\n                }, false);\n                startOff = 0;\n            }\n            if (!util.getFormatElement(endCon, null)) {\n                endCon = util.getChildElement(lineNodes[lineNodes.length - 1], function(current) {\n                    return current.nodeType === 3;\n                }, false);\n                endOff = endCon.textContent.length;\n            }\n            const oneLine = util.getFormatElement(startCon, null) === util.getFormatElement(endCon, null);\n            const endLength = lineNodes.length - (oneLine ? 0 : 1);\n            // node Changes\n            newNode = appendNode.cloneNode(false);\n            const isRemoveAnchor = isRemoveFormat || isRemoveNode && function(arr) {\n                for(let n = 0, len = arr.length; n < len; n++){\n                    if (util._isMaintainedNode(arr[n]) || util._isSizeNode(arr[n])) return true;\n                }\n                return false;\n            }(removeNodeArray);\n            const isSizeNode = isRemoveNode || util._isSizeNode(newNode);\n            const _getMaintainedNode = this._util_getMaintainedNode.bind(util, isRemoveAnchor, isSizeNode);\n            const _isMaintainedNode = this._util_isMaintainedNode.bind(util, isRemoveAnchor, isSizeNode);\n            // one line\n            if (oneLine) {\n                if (this._resetCommonListCell(lineNodes[0], styleArray)) range = this.setRange(startCon, startOff, endCon, endOff);\n                const newRange = this._nodeChange_oneLine(lineNodes[0], newNode, validation, startCon, startOff, endCon, endOff, isRemoveFormat, isRemoveNode, range.collapsed, _removeCheck, _getMaintainedNode, _isMaintainedNode);\n                start.container = newRange.startContainer;\n                start.offset = newRange.startOffset;\n                end.container = newRange.endContainer;\n                end.offset = newRange.endOffset;\n                if (start.container === end.container && util.onlyZeroWidthSpace(start.container)) {\n                    start.offset = end.offset = 1;\n                }\n                this._setCommonListStyle(newRange.ancestor, null);\n            } else {\n                let appliedCommonList = false;\n                if (endLength > 0 && this._resetCommonListCell(lineNodes[endLength], styleArray)) appliedCommonList = true;\n                if (this._resetCommonListCell(lineNodes[0], styleArray)) appliedCommonList = true;\n                if (appliedCommonList) this.setRange(startCon, startOff, endCon, endOff);\n                // end\n                if (endLength > 0) {\n                    newNode = appendNode.cloneNode(false);\n                    end = this._nodeChange_endLine(lineNodes[endLength], newNode, validation, endCon, endOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode);\n                }\n                // mid\n                for(let i = endLength - 1, newRange; i > 0; i--){\n                    this._resetCommonListCell(lineNodes[i], styleArray);\n                    newNode = appendNode.cloneNode(false);\n                    newRange = this._nodeChange_middleLine(lineNodes[i], newNode, validation, isRemoveFormat, isRemoveNode, _removeCheck, end.container);\n                    if (newRange.endContainer && newRange.ancestor.contains(newRange.endContainer)) {\n                        end.ancestor = null;\n                        end.container = newRange.endContainer;\n                    }\n                    this._setCommonListStyle(newRange.ancestor, null);\n                }\n                // start\n                newNode = appendNode.cloneNode(false);\n                start = this._nodeChange_startLine(lineNodes[0], newNode, validation, startCon, startOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode, end.container);\n                if (start.endContainer) {\n                    end.ancestor = null;\n                    end.container = start.endContainer;\n                }\n                if (endLength <= 0) {\n                    end = start;\n                } else if (!end.container) {\n                    end.ancestor = null;\n                    end.container = start.container;\n                    end.offset = start.container.textContent.length;\n                }\n                this._setCommonListStyle(start.ancestor, null);\n                this._setCommonListStyle(end.ancestor || util.getFormatElement(end.container), null);\n            }\n            // set range\n            this.controllersOff();\n            this.setRange(start.container, start.offset, end.container, end.offset);\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description Reset common style of list cell\r\n         * @param {Element} el List cell element. <li>\r\n         * @param {Array|null} styleArray Style array\r\n         * @private\r\n         */ _resetCommonListCell: function(el, styleArray) {\n            if (!util.isListCell(el)) return;\n            if (!styleArray) styleArray = this._listKebab;\n            const children = util.getArrayItem(el.childNodes, function(current) {\n                return !util.isBreak(current);\n            }, true);\n            const elStyles = el.style;\n            const ec = [], ek = [], elKeys = util.getValues(elStyles);\n            for(let i = 0, len = this._listKebab.length; i < len; i++){\n                if (elKeys.indexOf(this._listKebab[i]) > -1 && styleArray.indexOf(this._listKebab[i]) > -1) {\n                    ec.push(this._listCamel[i]);\n                    ek.push(this._listKebab[i]);\n                }\n            }\n            if (!ec.length) return;\n            // reset cell style---\n            const refer = util.createElement(\"SPAN\");\n            for(let i = 0, len = ec.length; i < len; i++){\n                refer.style[ec[i]] = elStyles[ek[i]];\n                elStyles.removeProperty(ek[i]);\n            }\n            let sel = refer.cloneNode(false);\n            let r = null, appliedEl = false;\n            for(let i = 0, len = children.length, c, s; i < len; i++){\n                c = children[i];\n                if (options._textTagsMap[c.nodeName.toLowerCase()]) continue;\n                s = util.getValues(c.style);\n                if (s.length === 0 || ec.some(function(k) {\n                    return s.indexOf(k) === -1;\n                }) && s.some(function(k) {\n                    ec.indexOf(k) > -1;\n                })) {\n                    r = c.nextSibling;\n                    sel.appendChild(c);\n                } else if (sel.childNodes.length > 0) {\n                    el.insertBefore(sel, r);\n                    sel = refer.cloneNode(false);\n                    r = null;\n                    appliedEl = true;\n                }\n            }\n            if (sel.childNodes.length > 0) {\n                el.insertBefore(sel, r);\n                appliedEl = true;\n            }\n            if (!elStyles.length) {\n                el.removeAttribute(\"style\");\n            }\n            return appliedEl;\n        },\n        /**\r\n         * @description If certain styles are applied to all child nodes of the list cell, the style of the list cell is also changed. (bold, color, size)\r\n         * @param {Element} el List cell element. <li>\r\n         * @param {Element|null} child Variable for recursive call. (\"null\" on the first call)\r\n         * @private\r\n         */ _setCommonListStyle: function(el, child) {\n            if (!util.isListCell(el)) return;\n            const children = util.getArrayItem((child || el).childNodes, function(current) {\n                return !util.isBreak(current);\n            }, true);\n            child = children[0];\n            if (!child || children.length > 1 || child.nodeType !== 1) return;\n            // set cell style---\n            const childStyle = child.style;\n            const elStyle = el.style;\n            const nodeName = child.nodeName.toLowerCase();\n            let appliedEl = false;\n            // bold, italic\n            if (options._textTagsMap[nodeName] === options._defaultCommand.bold.toLowerCase()) elStyle.fontWeight = \"bold\";\n            if (options._textTagsMap[nodeName] === options._defaultCommand.italic.toLowerCase()) elStyle.fontStyle = \"italic\";\n            // styles\n            const cKeys = util.getValues(childStyle);\n            if (cKeys.length > 0) {\n                for(let i = 0, len = this._listCamel.length; i < len; i++){\n                    if (cKeys.indexOf(this._listKebab[i]) > -1) {\n                        elStyle[this._listCamel[i]] = childStyle[this._listCamel[i]];\n                        childStyle.removeProperty(this._listKebab[i]);\n                        appliedEl = true;\n                    }\n                }\n            }\n            this._setCommonListStyle(el, child);\n            if (!appliedEl) return;\n            // common style\n            if (!childStyle.length) {\n                const ch = child.childNodes;\n                const p = child.parentNode;\n                const n = child.nextSibling;\n                while(ch.length > 0){\n                    p.insertBefore(ch[0], n);\n                }\n                util.removeItem(child);\n            }\n        },\n        /**\r\n         * @description Strip remove node\r\n         * @param {Node} removeNode The remove node\r\n         * @private\r\n         */ _stripRemoveNode: function(removeNode) {\n            const element = removeNode.parentNode;\n            if (!removeNode || removeNode.nodeType === 3 || !element) return;\n            const children = removeNode.childNodes;\n            while(children[0]){\n                element.insertBefore(children[0], removeNode);\n            }\n            element.removeChild(removeNode);\n        },\n        /**\r\n         * @description Return the parent maintained tag. (bind and use a util object)\r\n         * @param {Element} element Element\r\n         * @returns {Element}\r\n         * @private\r\n         */ _util_getMaintainedNode: function(_isRemove, _isSizeNode, element) {\n            if (!element || _isRemove) return null;\n            return this.getParentElement(element, this._isMaintainedNode.bind(this)) || (!_isSizeNode ? this.getParentElement(element, this._isSizeNode.bind(this)) : null);\n        },\n        /**\r\n         * @description Check if element is a tag that should be persisted. (bind and use a util object)\r\n         * @param {Element} element Element\r\n         * @returns {Element}\r\n         * @private\r\n         */ _util_isMaintainedNode: function(_isRemove, _isSizeNode, element) {\n            if (!element || _isRemove || element.nodeType !== 1) return false;\n            const anchor = this._isMaintainedNode(element);\n            return this.getParentElement(element, this._isMaintainedNode.bind(this)) ? anchor : anchor || (!_isSizeNode ? this._isSizeNode(element) : false);\n        },\n        /**\r\n         * @description wraps text nodes of line selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Node} startCon The startContainer property of the selection object.\r\n         * @param {Number} startOff The startOffset property of the selection object.\r\n         * @param {Node} endCon The endContainer property of the selection object.\r\n         * @param {Number} endOff The endOffset property of the selection object.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @param {Boolean} collapsed range.collapsed\r\n         * @returns {{ancestor: *, startContainer: *, startOffset: *, endContainer: *, endOffset: *}}\r\n         * @private\r\n         */ _nodeChange_oneLine: function(element, newInnerNode, validation, startCon, startOff, endCon, endOff, isRemoveFormat, isRemoveNode, collapsed, _removeCheck, _getMaintainedNode, _isMaintainedNode) {\n            // not add tag\n            let parentCon = startCon.parentNode;\n            while(!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)){\n                if (parentCon.nodeName === newInnerNode.nodeName) break;\n                parentCon = parentCon.parentNode;\n            }\n            if (!isRemoveNode && parentCon === endCon.parentNode && parentCon.nodeName === newInnerNode.nodeName) {\n                if (util.onlyZeroWidthSpace(startCon.textContent.slice(0, startOff)) && util.onlyZeroWidthSpace(endCon.textContent.slice(endOff))) {\n                    const children = parentCon.childNodes;\n                    let sameTag = true;\n                    for(let i = 0, len = children.length, c, s, e, z; i < len; i++){\n                        c = children[i];\n                        z = !util.onlyZeroWidthSpace(c);\n                        if (c === startCon) {\n                            s = true;\n                            continue;\n                        }\n                        if (c === endCon) {\n                            e = true;\n                            continue;\n                        }\n                        if (!s && z || s && e && z) {\n                            sameTag = false;\n                            break;\n                        }\n                    }\n                    if (sameTag) {\n                        util.copyTagAttributes(parentCon, newInnerNode);\n                        return {\n                            ancestor: element,\n                            startContainer: startCon,\n                            startOffset: startOff,\n                            endContainer: endCon,\n                            endOffset: endOff\n                        };\n                    }\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const el = element;\n            const nNodeArray = [\n                newInnerNode\n            ];\n            const pNode = element.cloneNode(false);\n            const isSameNode = startCon === endCon;\n            let startContainer = startCon;\n            let startOffset = startOff;\n            let endContainer = endCon;\n            let endOffset = endOff;\n            let startPass = false;\n            let endPass = false;\n            let pCurrent, newNode, appendNode, cssText, anchorNode;\n            const wRegExp = _w.RegExp;\n            function checkCss(vNode) {\n                const regExp = new wRegExp(\"(?:;|^|\\\\s)(?:\" + cssText + \"null)\\\\s*:[^;]*\\\\s*(?:;|$)\", \"ig\");\n                let style = \"\";\n                if (regExp && vNode.style.cssText.length > 0) {\n                    style = regExp.test(vNode.style.cssText);\n                }\n                return !style;\n            }\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length, vNode; i < len; i++){\n                    let child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    let cloneNode;\n                    // startContainer\n                    if (!startPass && child === startContainer) {\n                        let line = pNode;\n                        anchorNode = _getMaintainedNode(child);\n                        const prevNode = util.createTextNode(startContainer.nodeType === 1 ? \"\" : startContainer.substringData(0, startOffset));\n                        const textNode = util.createTextNode(startContainer.nodeType === 1 ? \"\" : startContainer.substringData(startOffset, isSameNode ? endOffset >= startOffset ? endOffset - startOffset : startContainer.data.length - startOffset : startContainer.data.length - startOffset));\n                        if (anchorNode) {\n                            const a = _getMaintainedNode(ancestor);\n                            if (a && a.parentNode !== line) {\n                                let m = a;\n                                let p = null;\n                                while(m.parentNode !== line){\n                                    ancestor = p = m.parentNode.cloneNode(false);\n                                    while(m.childNodes[0]){\n                                        p.appendChild(m.childNodes[0]);\n                                    }\n                                    m.appendChild(p);\n                                    m = m.parentNode;\n                                }\n                                m.parentNode.appendChild(a);\n                            }\n                            anchorNode = anchorNode.cloneNode(false);\n                        }\n                        if (!util.onlyZeroWidthSpace(prevNode)) {\n                            ancestor.appendChild(prevNode);\n                        }\n                        const prevAnchorNode = _getMaintainedNode(ancestor);\n                        if (!!prevAnchorNode) anchorNode = prevAnchorNode;\n                        if (anchorNode) line = anchorNode;\n                        newNode = child;\n                        pCurrent = [];\n                        cssText = \"\";\n                        while(newNode !== line && newNode !== el && newNode !== null){\n                            vNode = _isMaintainedNode(newNode) ? null : validation(newNode);\n                            if (vNode && newNode.nodeType === 1 && checkCss(newNode)) {\n                                pCurrent.push(vNode);\n                                cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || textNode;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        newInnerNode.appendChild(childNode);\n                        line.appendChild(newInnerNode);\n                        if (anchorNode && !_getMaintainedNode(endContainer)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        startContainer = textNode;\n                        startOffset = 0;\n                        startPass = true;\n                        if (newNode !== textNode) newNode.appendChild(startContainer);\n                        if (!isSameNode) continue;\n                    }\n                    // endContainer\n                    if (!endPass && child === endContainer) {\n                        anchorNode = _getMaintainedNode(child);\n                        const afterNode = util.createTextNode(endContainer.nodeType === 1 ? \"\" : endContainer.substringData(endOffset, endContainer.length - endOffset));\n                        const textNode = util.createTextNode(isSameNode || endContainer.nodeType === 1 ? \"\" : endContainer.substringData(0, endOffset));\n                        if (anchorNode) {\n                            anchorNode = anchorNode.cloneNode(false);\n                        } else if (_isMaintainedNode(newInnerNode.parentNode) && !anchorNode) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!util.onlyZeroWidthSpace(afterNode)) {\n                            newNode = child;\n                            cssText = \"\";\n                            pCurrent = [];\n                            const anchors = [];\n                            while(newNode !== pNode && newNode !== el && newNode !== null){\n                                if (newNode.nodeType === 1 && checkCss(newNode)) {\n                                    if (_isMaintainedNode(newNode)) anchors.push(newNode.cloneNode(false));\n                                    else pCurrent.push(newNode.cloneNode(false));\n                                    cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                                }\n                                newNode = newNode.parentNode;\n                            }\n                            pCurrent = pCurrent.concat(anchors);\n                            cloneNode = appendNode = newNode = pCurrent.pop() || afterNode;\n                            while(pCurrent.length > 0){\n                                newNode = pCurrent.pop();\n                                appendNode.appendChild(newNode);\n                                appendNode = newNode;\n                            }\n                            pNode.appendChild(cloneNode);\n                            newNode.textContent = afterNode.data;\n                        }\n                        if (anchorNode && cloneNode) {\n                            const afterAnchorNode = _getMaintainedNode(cloneNode);\n                            if (afterAnchorNode) {\n                                anchorNode = afterAnchorNode;\n                            }\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        cssText = \"\";\n                        while(newNode !== pNode && newNode !== el && newNode !== null){\n                            vNode = _isMaintainedNode(newNode) ? null : validation(newNode);\n                            if (vNode && newNode.nodeType === 1 && checkCss(newNode)) {\n                                pCurrent.push(vNode);\n                                cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || textNode;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (anchorNode) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            newInnerNode.appendChild(childNode);\n                            anchorNode.insertBefore(newInnerNode, anchorNode.firstChild);\n                            pNode.appendChild(anchorNode);\n                            nNodeArray.push(newInnerNode);\n                            anchorNode = null;\n                        } else {\n                            newInnerNode.appendChild(childNode);\n                        }\n                        endContainer = textNode;\n                        endOffset = textNode.data.length;\n                        endPass = true;\n                        if (!isRemoveFormat && collapsed) {\n                            newInnerNode = textNode;\n                            textNode.textContent = util.zeroWidthSpace;\n                        }\n                        if (newNode !== textNode) newNode.appendChild(endContainer);\n                        continue;\n                    }\n                    // other\n                    if (startPass) {\n                        if (child.nodeType === 1 && !util.isBreak(child)) {\n                            if (util._isIgnoreNodeChange(child)) {\n                                pNode.appendChild(child.cloneNode(true));\n                                if (!collapsed) {\n                                    newInnerNode = newInnerNode.cloneNode(false);\n                                    pNode.appendChild(newInnerNode);\n                                    nNodeArray.push(newInnerNode);\n                                }\n                            } else {\n                                recursionFunc(child, child);\n                            }\n                            continue;\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        cssText = \"\";\n                        const anchors = [];\n                        while(newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode){\n                            vNode = endPass ? newNode.cloneNode(false) : validation(newNode);\n                            if (newNode.nodeType === 1 && !util.isBreak(child) && vNode && checkCss(newNode)) {\n                                if (_isMaintainedNode(newNode)) {\n                                    if (!anchorNode) anchors.push(vNode);\n                                } else {\n                                    pCurrent.push(vNode);\n                                }\n                                cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(\":\")) + \"|\";\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        pCurrent = pCurrent.concat(anchors);\n                        const childNode = pCurrent.pop() || child;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode) && !util.onlyZeroWidthSpace(newInnerNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!endPass && !anchorNode && _isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            const aChildren = childNode.childNodes;\n                            for(let a = 0, aLen = aChildren.length; a < aLen; a++){\n                                newInnerNode.appendChild(aChildren[a]);\n                            }\n                            childNode.appendChild(newInnerNode);\n                            pNode.appendChild(childNode);\n                            nNodeArray.push(newInnerNode);\n                            if (newInnerNode.children.length > 0) ancestor = newNode;\n                            else ancestor = newInnerNode;\n                        } else if (childNode === child) {\n                            if (!endPass) ancestor = newInnerNode;\n                            else ancestor = pNode;\n                        } else if (endPass) {\n                            pNode.appendChild(childNode);\n                            ancestor = newNode;\n                        } else {\n                            newInnerNode.appendChild(childNode);\n                            ancestor = newNode;\n                        }\n                        if (anchorNode && child.nodeType === 3) {\n                            if (_getMaintainedNode(child)) {\n                                const ancestorAnchorNode = util.getParentElement(ancestor, (function(current) {\n                                    return this._isMaintainedNode(current.parentNode) || current.parentNode === pNode;\n                                }).bind(util));\n                                anchorNode.appendChild(ancestorAnchorNode);\n                                newInnerNode = ancestorAnchorNode.cloneNode(false);\n                                nNodeArray.push(newInnerNode);\n                                pNode.appendChild(newInnerNode);\n                            } else {\n                                anchorNode = null;\n                            }\n                        }\n                    }\n                    cloneNode = child.cloneNode(false);\n                    ancestor.appendChild(cloneNode);\n                    if (child.nodeType === 1 && !util.isBreak(child)) coverNode = cloneNode;\n                    recursionFunc(child, coverNode);\n                }\n            })(element, pNode);\n            // not remove tag\n            if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {\n                return {\n                    ancestor: element,\n                    startContainer: startCon,\n                    startOffset: startOff,\n                    endContainer: endCon,\n                    endOffset: endOff\n                };\n            }\n            isRemoveFormat = isRemoveFormat && isRemoveNode;\n            if (isRemoveFormat) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    let textNode, textNode_s, textNode_e;\n                    if (collapsed) {\n                        textNode = util.createTextNode(util.zeroWidthSpace);\n                        pNode.replaceChild(textNode, removeNode);\n                    } else {\n                        const rChildren = removeNode.childNodes;\n                        textNode_s = rChildren[0];\n                        while(rChildren[0]){\n                            textNode_e = rChildren[0];\n                            pNode.insertBefore(textNode_e, removeNode);\n                        }\n                        util.removeItem(removeNode);\n                    }\n                    if (i === 0) {\n                        if (collapsed) {\n                            startContainer = endContainer = textNode;\n                        } else {\n                            startContainer = textNode_s;\n                            endContainer = textNode_e;\n                        }\n                    }\n                }\n            } else {\n                if (isRemoveNode) {\n                    for(let i = 0; i < nNodeArray.length; i++){\n                        this._stripRemoveNode(nNodeArray[i]);\n                    }\n                }\n                if (collapsed) {\n                    startContainer = endContainer = newInnerNode;\n                }\n            }\n            util.removeEmptyNode(pNode, newInnerNode, false);\n            if (collapsed) {\n                startOffset = startContainer.textContent.length;\n                endOffset = endContainer.textContent.length;\n            }\n            // endContainer reset\n            const endConReset = isRemoveFormat || endContainer.textContent.length === 0;\n            if (!util.isBreak(endContainer) && endContainer.textContent.length === 0) {\n                util.removeItem(endContainer);\n                endContainer = startContainer;\n            }\n            endOffset = endConReset ? endContainer.textContent.length : endOffset;\n            // node change\n            const newStartOffset = {\n                s: 0,\n                e: 0\n            };\n            const startPath = util.getNodePath(startContainer, pNode, newStartOffset);\n            const mergeEndCon = !endContainer.parentNode;\n            if (mergeEndCon) endContainer = startContainer;\n            const newEndOffset = {\n                s: 0,\n                e: 0\n            };\n            const endPath = util.getNodePath(endContainer, pNode, !mergeEndCon && !endConReset ? newEndOffset : null);\n            startOffset += newStartOffset.s;\n            endOffset = collapsed ? startOffset : mergeEndCon ? startContainer.textContent.length : endConReset ? endOffset + newStartOffset.s : endOffset + newEndOffset.s;\n            // tag merge\n            const newOffsets = util.mergeSameTags(pNode, [\n                startPath,\n                endPath\n            ], true);\n            element.parentNode.replaceChild(pNode, element);\n            startContainer = util.getNodeFromPath(startPath, pNode);\n            endContainer = util.getNodeFromPath(endPath, pNode);\n            return {\n                ancestor: pNode,\n                startContainer: startContainer,\n                startOffset: startOffset + newOffsets[0],\n                endContainer: endContainer,\n                endOffset: endOffset + newOffsets[1]\n            };\n        },\n        /**\r\n         * @description wraps first line selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Node} startCon The startContainer property of the selection object.\r\n         * @param {Number} startOff The startOffset property of the selection object.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @returns {null|Node} If end container is renewed, returned renewed node\r\n         * @returns {Object} { ancestor, container, offset, endContainer }\r\n         * @private\r\n         */ _nodeChange_startLine: function(element, newInnerNode, validation, startCon, startOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode, _endContainer) {\n            // not add tag\n            let parentCon = startCon.parentNode;\n            while(!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)){\n                if (parentCon.nodeName === newInnerNode.nodeName) break;\n                parentCon = parentCon.parentNode;\n            }\n            if (!isRemoveNode && parentCon.nodeName === newInnerNode.nodeName && !util.isFormatElement(parentCon) && !parentCon.nextSibling && util.onlyZeroWidthSpace(startCon.textContent.slice(0, startOff))) {\n                let sameTag = true;\n                let s = startCon.previousSibling;\n                while(s){\n                    if (!util.onlyZeroWidthSpace(s)) {\n                        sameTag = false;\n                        break;\n                    }\n                    s = s.previousSibling;\n                }\n                if (sameTag) {\n                    util.copyTagAttributes(parentCon, newInnerNode);\n                    return {\n                        ancestor: element,\n                        container: startCon,\n                        offset: startOff\n                    };\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const el = element;\n            const nNodeArray = [\n                newInnerNode\n            ];\n            const pNode = element.cloneNode(false);\n            let container = startCon;\n            let offset = startOff;\n            let passNode = false;\n            let pCurrent, newNode, appendNode, anchorNode;\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length, vNode, cloneChild; i < len; i++){\n                    const child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    if (passNode && !util.isBreak(child)) {\n                        if (child.nodeType === 1) {\n                            if (util._isIgnoreNodeChange(child)) {\n                                newInnerNode = newInnerNode.cloneNode(false);\n                                cloneChild = child.cloneNode(true);\n                                pNode.appendChild(cloneChild);\n                                pNode.appendChild(newInnerNode);\n                                nNodeArray.push(newInnerNode);\n                                // end container\n                                if (_endContainer && child.contains(_endContainer)) {\n                                    const endPath = util.getNodePath(_endContainer, child);\n                                    _endContainer = util.getNodeFromPath(endPath, cloneChild);\n                                }\n                            } else {\n                                recursionFunc(child, child);\n                            }\n                            continue;\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        const anchors = [];\n                        while(newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode){\n                            vNode = validation(newNode);\n                            if (newNode.nodeType === 1 && vNode) {\n                                if (_isMaintainedNode(newNode)) {\n                                    if (!anchorNode) anchors.push(vNode);\n                                } else {\n                                    pCurrent.push(vNode);\n                                }\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        pCurrent = pCurrent.concat(anchors);\n                        const isTopNode = pCurrent.length > 0;\n                        const childNode = pCurrent.pop() || child;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!anchorNode && _isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            const aChildren = childNode.childNodes;\n                            for(let a = 0, aLen = aChildren.length; a < aLen; a++){\n                                newInnerNode.appendChild(aChildren[a]);\n                            }\n                            childNode.appendChild(newInnerNode);\n                            pNode.appendChild(childNode);\n                            ancestor = !_isMaintainedNode(newNode) ? newNode : newInnerNode;\n                            nNodeArray.push(newInnerNode);\n                        } else if (isTopNode) {\n                            newInnerNode.appendChild(childNode);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (anchorNode && child.nodeType === 3) {\n                            if (_getMaintainedNode(child)) {\n                                const ancestorAnchorNode = util.getParentElement(ancestor, (function(current) {\n                                    return this._isMaintainedNode(current.parentNode) || current.parentNode === pNode;\n                                }).bind(util));\n                                anchorNode.appendChild(ancestorAnchorNode);\n                                newInnerNode = ancestorAnchorNode.cloneNode(false);\n                                nNodeArray.push(newInnerNode);\n                                pNode.appendChild(newInnerNode);\n                            } else {\n                                anchorNode = null;\n                            }\n                        }\n                    }\n                    // startContainer\n                    if (!passNode && child === container) {\n                        let line = pNode;\n                        anchorNode = _getMaintainedNode(child);\n                        const prevNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(0, offset));\n                        const textNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(offset, container.length - offset));\n                        if (anchorNode) {\n                            const a = _getMaintainedNode(ancestor);\n                            if (a && a.parentNode !== line) {\n                                let m = a;\n                                let p = null;\n                                while(m.parentNode !== line){\n                                    ancestor = p = m.parentNode.cloneNode(false);\n                                    while(m.childNodes[0]){\n                                        p.appendChild(m.childNodes[0]);\n                                    }\n                                    m.appendChild(p);\n                                    m = m.parentNode;\n                                }\n                                m.parentNode.appendChild(a);\n                            }\n                            anchorNode = anchorNode.cloneNode(false);\n                        }\n                        if (!util.onlyZeroWidthSpace(prevNode)) {\n                            ancestor.appendChild(prevNode);\n                        }\n                        const prevAnchorNode = _getMaintainedNode(ancestor);\n                        if (!!prevAnchorNode) anchorNode = prevAnchorNode;\n                        if (anchorNode) line = anchorNode;\n                        newNode = ancestor;\n                        pCurrent = [];\n                        while(newNode !== line && newNode !== null){\n                            vNode = validation(newNode);\n                            if (newNode.nodeType === 1 && vNode) {\n                                pCurrent.push(vNode);\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || ancestor;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (childNode !== ancestor) {\n                            newInnerNode.appendChild(childNode);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (util.isBreak(child)) newInnerNode.appendChild(child.cloneNode(false));\n                        line.appendChild(newInnerNode);\n                        container = textNode;\n                        offset = 0;\n                        passNode = true;\n                        ancestor.appendChild(container);\n                        continue;\n                    }\n                    vNode = !passNode ? child.cloneNode(false) : validation(child);\n                    if (vNode) {\n                        ancestor.appendChild(vNode);\n                        if (child.nodeType === 1 && !util.isBreak(child)) coverNode = vNode;\n                    }\n                    recursionFunc(child, coverNode);\n                }\n            })(element, pNode);\n            // not remove tag\n            if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {\n                return {\n                    ancestor: element,\n                    container: startCon,\n                    offset: startOff,\n                    endContainer: _endContainer\n                };\n            }\n            isRemoveFormat = isRemoveFormat && isRemoveNode;\n            if (isRemoveFormat) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    const rChildren = removeNode.childNodes;\n                    const textNode = rChildren[0];\n                    while(rChildren[0]){\n                        pNode.insertBefore(rChildren[0], removeNode);\n                    }\n                    util.removeItem(removeNode);\n                    if (i === 0) container = textNode;\n                }\n            } else if (isRemoveNode) {\n                newInnerNode = newInnerNode.firstChild;\n                for(let i = 0; i < nNodeArray.length; i++){\n                    this._stripRemoveNode(nNodeArray[i]);\n                }\n            }\n            if (!isRemoveFormat && pNode.childNodes.length === 0) {\n                if (element.childNodes) {\n                    container = element.childNodes[0];\n                } else {\n                    container = util.createTextNode(util.zeroWidthSpace);\n                    element.appendChild(container);\n                }\n            } else {\n                util.removeEmptyNode(pNode, newInnerNode, false);\n                if (util.onlyZeroWidthSpace(pNode.textContent)) {\n                    container = pNode.firstChild;\n                    offset = 0;\n                }\n                // node change\n                const offsets = {\n                    s: 0,\n                    e: 0\n                };\n                const path = util.getNodePath(container, pNode, offsets);\n                offset += offsets.s;\n                // tag merge\n                const newOffsets = util.mergeSameTags(pNode, [\n                    path\n                ], true);\n                element.parentNode.replaceChild(pNode, element);\n                container = util.getNodeFromPath(path, pNode);\n                offset += newOffsets[0];\n            }\n            return {\n                ancestor: pNode,\n                container: container,\n                offset: offset,\n                endContainer: _endContainer\n            };\n        },\n        /**\r\n         * @description wraps mid lines selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @param {Node} _endContainer Offset node of last line already modified (end.container)\r\n         * @returns {Object} { ancestor, endContainer: \"If end container is renewed, returned renewed node\" }\r\n         * @private\r\n         */ _nodeChange_middleLine: function(element, newInnerNode, validation, isRemoveFormat, isRemoveNode, _removeCheck, _endContainer) {\n            // not add tag\n            if (!isRemoveNode) {\n                // end container path\n                let endPath = null;\n                if (_endContainer && element.contains(_endContainer)) endPath = util.getNodePath(_endContainer, element);\n                const tempNode = element.cloneNode(true);\n                const newNodeName = newInnerNode.nodeName;\n                const newCssText = newInnerNode.style.cssText;\n                const newClass = newInnerNode.className;\n                let children = tempNode.childNodes;\n                let i = 0, len = children.length;\n                for(let child; i < len; i++){\n                    child = children[i];\n                    if (child.nodeType === 3) break;\n                    if (child.nodeName === newNodeName) {\n                        child.style.cssText += newCssText;\n                        util.addClass(child, newClass);\n                    } else if (!util.isBreak(child) && util._isIgnoreNodeChange(child)) {\n                        continue;\n                    } else if (len === 1) {\n                        children = child.childNodes;\n                        len = children.length;\n                        i = -1;\n                        continue;\n                    } else {\n                        break;\n                    }\n                }\n                if (len > 0 && i === len) {\n                    element.innerHTML = tempNode.innerHTML;\n                    return {\n                        ancestor: element,\n                        endContainer: endPath ? util.getNodeFromPath(endPath, element) : null\n                    };\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const pNode = element.cloneNode(false);\n            const nNodeArray = [\n                newInnerNode\n            ];\n            let noneChange = true;\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = 0, len = childNodes.length, vNode, cloneChild; i < len; i++){\n                    let child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    if (!util.isBreak(child) && util._isIgnoreNodeChange(child)) {\n                        if (newInnerNode.childNodes.length > 0) {\n                            pNode.appendChild(newInnerNode);\n                            newInnerNode = newInnerNode.cloneNode(false);\n                        }\n                        cloneChild = child.cloneNode(true);\n                        pNode.appendChild(cloneChild);\n                        pNode.appendChild(newInnerNode);\n                        nNodeArray.push(newInnerNode);\n                        ancestor = newInnerNode;\n                        // end container\n                        if (_endContainer && child.contains(_endContainer)) {\n                            const endPath = util.getNodePath(_endContainer, child);\n                            _endContainer = util.getNodeFromPath(endPath, cloneChild);\n                        }\n                        continue;\n                    } else {\n                        vNode = validation(child);\n                        if (vNode) {\n                            noneChange = false;\n                            ancestor.appendChild(vNode);\n                            if (child.nodeType === 1) coverNode = vNode;\n                        }\n                    }\n                    if (!util.isBreak(child)) recursionFunc(child, coverNode);\n                }\n            })(element, newInnerNode);\n            // not remove tag\n            if (noneChange || isRemoveNode && !isRemoveFormat && !_removeCheck.v) return {\n                ancestor: element,\n                endContainer: _endContainer\n            };\n            pNode.appendChild(newInnerNode);\n            if (isRemoveFormat && isRemoveNode) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    const rChildren = removeNode.childNodes;\n                    while(rChildren[0]){\n                        pNode.insertBefore(rChildren[0], removeNode);\n                    }\n                    util.removeItem(removeNode);\n                }\n            } else if (isRemoveNode) {\n                newInnerNode = newInnerNode.firstChild;\n                for(let i = 0; i < nNodeArray.length; i++){\n                    this._stripRemoveNode(nNodeArray[i]);\n                }\n            }\n            util.removeEmptyNode(pNode, newInnerNode, false);\n            util.mergeSameTags(pNode, null, true);\n            // node change\n            element.parentNode.replaceChild(pNode, element);\n            return {\n                ancestor: pNode,\n                endContainer: _endContainer\n            };\n        },\n        /**\r\n         * @description wraps last line selected text.\r\n         * @param {Element} element The node of the line that contains the selected text node.\r\n         * @param {Element} newInnerNode The dom that will wrap the selected text area\r\n         * @param {Function} validation Check if the node should be stripped.\r\n         * @param {Node} endCon The endContainer property of the selection object.\r\n         * @param {Number} endOff The endOffset property of the selection object.\r\n         * @param {Boolean} isRemoveFormat Is the remove all formats command?\r\n         * @param {Boolean} isRemoveNode \"newInnerNode\" is remove node?\r\n         * @returns {Object} { ancestor, container, offset }\r\n         * @private\r\n         */ _nodeChange_endLine: function(element, newInnerNode, validation, endCon, endOff, isRemoveFormat, isRemoveNode, _removeCheck, _getMaintainedNode, _isMaintainedNode) {\n            // not add tag\n            let parentCon = endCon.parentNode;\n            while(!parentCon.nextSibling && !parentCon.previousSibling && !util.isFormatElement(parentCon.parentNode) && !util.isWysiwygDiv(parentCon.parentNode)){\n                if (parentCon.nodeName === newInnerNode.nodeName) break;\n                parentCon = parentCon.parentNode;\n            }\n            if (!isRemoveNode && parentCon.nodeName === newInnerNode.nodeName && !util.isFormatElement(parentCon) && !parentCon.previousSibling && util.onlyZeroWidthSpace(endCon.textContent.slice(endOff))) {\n                let sameTag = true;\n                let e = endCon.nextSibling;\n                while(e){\n                    if (!util.onlyZeroWidthSpace(e)) {\n                        sameTag = false;\n                        break;\n                    }\n                    e = e.nextSibling;\n                }\n                if (sameTag) {\n                    util.copyTagAttributes(parentCon, newInnerNode);\n                    return {\n                        ancestor: element,\n                        container: endCon,\n                        offset: endOff\n                    };\n                }\n            }\n            // add tag\n            _removeCheck.v = false;\n            const el = element;\n            const nNodeArray = [\n                newInnerNode\n            ];\n            const pNode = element.cloneNode(false);\n            let container = endCon;\n            let offset = endOff;\n            let passNode = false;\n            let pCurrent, newNode, appendNode, anchorNode;\n            (function recursionFunc(current, ancestor) {\n                const childNodes = current.childNodes;\n                for(let i = childNodes.length - 1, vNode; 0 <= i; i--){\n                    const child = childNodes[i];\n                    if (!child) continue;\n                    let coverNode = ancestor;\n                    if (passNode && !util.isBreak(child)) {\n                        if (child.nodeType === 1) {\n                            if (util._isIgnoreNodeChange(child)) {\n                                newInnerNode = newInnerNode.cloneNode(false);\n                                const cloneChild = child.cloneNode(true);\n                                pNode.insertBefore(cloneChild, ancestor);\n                                pNode.insertBefore(newInnerNode, cloneChild);\n                                nNodeArray.push(newInnerNode);\n                            } else {\n                                recursionFunc(child, child);\n                            }\n                            continue;\n                        }\n                        newNode = child;\n                        pCurrent = [];\n                        const anchors = [];\n                        while(newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode){\n                            vNode = validation(newNode);\n                            if (vNode && newNode.nodeType === 1) {\n                                if (_isMaintainedNode(newNode)) {\n                                    if (!anchorNode) anchors.push(vNode);\n                                } else {\n                                    pCurrent.push(vNode);\n                                }\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        pCurrent = pCurrent.concat(anchors);\n                        const isTopNode = pCurrent.length > 0;\n                        const childNode = pCurrent.pop() || child;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (_isMaintainedNode(newInnerNode.parentNode) && !_isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.insertBefore(newInnerNode, pNode.firstChild);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!anchorNode && _isMaintainedNode(childNode)) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            const aChildren = childNode.childNodes;\n                            for(let a = 0, aLen = aChildren.length; a < aLen; a++){\n                                newInnerNode.appendChild(aChildren[a]);\n                            }\n                            childNode.appendChild(newInnerNode);\n                            pNode.insertBefore(childNode, pNode.firstChild);\n                            nNodeArray.push(newInnerNode);\n                            if (newInnerNode.children.length > 0) ancestor = newNode;\n                            else ancestor = newInnerNode;\n                        } else if (isTopNode) {\n                            newInnerNode.insertBefore(childNode, newInnerNode.firstChild);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (anchorNode && child.nodeType === 3) {\n                            if (_getMaintainedNode(child)) {\n                                const ancestorAnchorNode = util.getParentElement(ancestor, (function(current) {\n                                    return this._isMaintainedNode(current.parentNode) || current.parentNode === pNode;\n                                }).bind(util));\n                                anchorNode.appendChild(ancestorAnchorNode);\n                                newInnerNode = ancestorAnchorNode.cloneNode(false);\n                                nNodeArray.push(newInnerNode);\n                                pNode.insertBefore(newInnerNode, pNode.firstChild);\n                            } else {\n                                anchorNode = null;\n                            }\n                        }\n                    }\n                    // endContainer\n                    if (!passNode && child === container) {\n                        anchorNode = _getMaintainedNode(child);\n                        const afterNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(offset, container.length - offset));\n                        const textNode = util.createTextNode(container.nodeType === 1 ? \"\" : container.substringData(0, offset));\n                        if (anchorNode) {\n                            anchorNode = anchorNode.cloneNode(false);\n                            const a = _getMaintainedNode(ancestor);\n                            if (a && a.parentNode !== pNode) {\n                                let m = a;\n                                let p = null;\n                                while(m.parentNode !== pNode){\n                                    ancestor = p = m.parentNode.cloneNode(false);\n                                    while(m.childNodes[0]){\n                                        p.appendChild(m.childNodes[0]);\n                                    }\n                                    m.appendChild(p);\n                                    m = m.parentNode;\n                                }\n                                m.parentNode.insertBefore(a, m.parentNode.firstChild);\n                            }\n                            anchorNode = anchorNode.cloneNode(false);\n                        } else if (_isMaintainedNode(newInnerNode.parentNode) && !anchorNode) {\n                            newInnerNode = newInnerNode.cloneNode(false);\n                            pNode.appendChild(newInnerNode);\n                            nNodeArray.push(newInnerNode);\n                        }\n                        if (!util.onlyZeroWidthSpace(afterNode)) {\n                            ancestor.insertBefore(afterNode, ancestor.firstChild);\n                        }\n                        newNode = ancestor;\n                        pCurrent = [];\n                        while(newNode !== pNode && newNode !== null){\n                            vNode = _isMaintainedNode(newNode) ? null : validation(newNode);\n                            if (vNode && newNode.nodeType === 1) {\n                                pCurrent.push(vNode);\n                            }\n                            newNode = newNode.parentNode;\n                        }\n                        const childNode = pCurrent.pop() || ancestor;\n                        appendNode = newNode = childNode;\n                        while(pCurrent.length > 0){\n                            newNode = pCurrent.pop();\n                            appendNode.appendChild(newNode);\n                            appendNode = newNode;\n                        }\n                        if (childNode !== ancestor) {\n                            newInnerNode.insertBefore(childNode, newInnerNode.firstChild);\n                            ancestor = newNode;\n                        } else {\n                            ancestor = newInnerNode;\n                        }\n                        if (util.isBreak(child)) newInnerNode.appendChild(child.cloneNode(false));\n                        if (anchorNode) {\n                            anchorNode.insertBefore(newInnerNode, anchorNode.firstChild);\n                            pNode.insertBefore(anchorNode, pNode.firstChild);\n                            anchorNode = null;\n                        } else {\n                            pNode.insertBefore(newInnerNode, pNode.firstChild);\n                        }\n                        container = textNode;\n                        offset = textNode.data.length;\n                        passNode = true;\n                        ancestor.insertBefore(container, ancestor.firstChild);\n                        continue;\n                    }\n                    vNode = !passNode ? child.cloneNode(false) : validation(child);\n                    if (vNode) {\n                        ancestor.insertBefore(vNode, ancestor.firstChild);\n                        if (child.nodeType === 1 && !util.isBreak(child)) coverNode = vNode;\n                    }\n                    recursionFunc(child, coverNode);\n                }\n            })(element, pNode);\n            // not remove tag\n            if (isRemoveNode && !isRemoveFormat && !_removeCheck.v) {\n                return {\n                    ancestor: element,\n                    container: endCon,\n                    offset: endOff\n                };\n            }\n            isRemoveFormat = isRemoveFormat && isRemoveNode;\n            if (isRemoveFormat) {\n                for(let i = 0; i < nNodeArray.length; i++){\n                    let removeNode = nNodeArray[i];\n                    const rChildren = removeNode.childNodes;\n                    let textNode = null;\n                    while(rChildren[0]){\n                        textNode = rChildren[0];\n                        pNode.insertBefore(textNode, removeNode);\n                    }\n                    util.removeItem(removeNode);\n                    if (i === nNodeArray.length - 1) {\n                        container = textNode;\n                        offset = textNode.textContent.length;\n                    }\n                }\n            } else if (isRemoveNode) {\n                newInnerNode = newInnerNode.firstChild;\n                for(let i = 0; i < nNodeArray.length; i++){\n                    this._stripRemoveNode(nNodeArray[i]);\n                }\n            }\n            if (!isRemoveFormat && pNode.childNodes.length === 0) {\n                if (element.childNodes) {\n                    container = element.childNodes[0];\n                } else {\n                    container = util.createTextNode(util.zeroWidthSpace);\n                    element.appendChild(container);\n                }\n            } else {\n                if (!isRemoveNode && newInnerNode.textContent.length === 0) {\n                    util.removeEmptyNode(pNode, null, false);\n                    return {\n                        ancestor: null,\n                        container: null,\n                        offset: 0\n                    };\n                }\n                util.removeEmptyNode(pNode, newInnerNode, false);\n                if (util.onlyZeroWidthSpace(pNode.textContent)) {\n                    container = pNode.firstChild;\n                    offset = container.textContent.length;\n                } else if (util.onlyZeroWidthSpace(container)) {\n                    container = newInnerNode;\n                    offset = 1;\n                }\n                // node change\n                const offsets = {\n                    s: 0,\n                    e: 0\n                };\n                const path = util.getNodePath(container, pNode, offsets);\n                offset += offsets.s;\n                // tag merge\n                const newOffsets = util.mergeSameTags(pNode, [\n                    path\n                ], true);\n                element.parentNode.replaceChild(pNode, element);\n                container = util.getNodeFromPath(path, pNode);\n                offset += newOffsets[0];\n            }\n            return {\n                ancestor: pNode,\n                container: container,\n                offset: container.nodeType === 1 && offset === 1 ? container.childNodes.length : offset\n            };\n        },\n        /**\r\n         * @description Run plugin calls and basic commands.\r\n         * @param {String} command Command string\r\n         * @param {String} display Display type string ('command', 'submenu', 'dialog', 'container')\r\n         * @param {Element} target The element of command button\r\n         */ actionCall: function(command, display, target) {\n            // call plugins\n            if (display) {\n                if (/more/i.test(display)) {\n                    if (target !== this._moreLayerActiveButton) {\n                        const layer = context.element.toolbar.querySelector(\".\" + command);\n                        if (layer) {\n                            if (this._moreLayerActiveButton) this.moreLayerOff();\n                            this._moreLayerActiveButton = target;\n                            layer.style.display = \"block\";\n                            event._showToolbarBalloon();\n                            event._showToolbarInline();\n                        }\n                        util.addClass(target, \"on\");\n                    } else {\n                        const layer = context.element.toolbar.querySelector(\".\" + this._moreLayerActiveButton.getAttribute(\"data-command\"));\n                        if (layer) {\n                            this.moreLayerOff();\n                            event._showToolbarBalloon();\n                            event._showToolbarInline();\n                        }\n                    }\n                    return;\n                }\n                if (/container/.test(display) && (this._menuTray[command] === null || target !== this.containerActiveButton)) {\n                    this.callPlugin(command, this.containerOn.bind(this, target), target);\n                    return;\n                }\n                if (this.isReadOnly && util.arrayIncludes(this.resizingDisabledButtons, target)) return;\n                if (/submenu/.test(display) && (this._menuTray[command] === null || target !== this.submenuActiveButton)) {\n                    this.callPlugin(command, this.submenuOn.bind(this, target), target);\n                    return;\n                } else if (/dialog/.test(display)) {\n                    this.callPlugin(command, this.plugins[command].open.bind(this), target);\n                    return;\n                } else if (/command/.test(display)) {\n                    this.callPlugin(command, this.plugins[command].action.bind(this), target);\n                } else if (/fileBrowser/.test(display)) {\n                    this.callPlugin(command, this.plugins[command].open.bind(this, null), target);\n                }\n            } else if (command) {\n                this.commandHandler(target, command);\n            }\n            if (/submenu/.test(display)) {\n                this.submenuOff();\n            } else if (!/command/.test(display)) {\n                this.submenuOff();\n                this.containerOff();\n            }\n        },\n        /**\r\n         * @description Execute command of command button(All Buttons except submenu and dialog)\r\n         * (selectAll, codeView, fullScreen, indent, outdent, undo, redo, removeFormat, print, preview, showBlocks, save, bold, underline, italic, strike, subscript, superscript, copy, cut, paste)\r\n         * @param {Element|null} target The element of command button\r\n         * @param {String} command Property of command button (data-value)\r\n         */ commandHandler: function(target, command) {\n            if (core.isReadOnly && !/copy|cut|selectAll|codeView|fullScreen|print|preview|showBlocks/.test(command)) return;\n            switch(command){\n                case \"copy\":\n                case \"cut\":\n                    this.execCommand(command);\n                    break;\n                case \"paste\":\n                    break;\n                case \"selectAll\":\n                    this.containerOff();\n                    const wysiwyg = context.element.wysiwyg;\n                    let first = util.getChildElement(wysiwyg.firstChild, function(current) {\n                        return current.childNodes.length === 0 || current.nodeType === 3;\n                    }, false) || wysiwyg.firstChild;\n                    let last = util.getChildElement(wysiwyg.lastChild, function(current) {\n                        return current.childNodes.length === 0 || current.nodeType === 3;\n                    }, true) || wysiwyg.lastChild;\n                    if (!first || !last) return;\n                    if (util.isMedia(first)) {\n                        const info = this.getFileComponent(first);\n                        const br = util.createElement(\"BR\");\n                        const format = util.createElement(options.defaultTag);\n                        format.appendChild(br);\n                        first = info ? info.component : first;\n                        first.parentNode.insertBefore(format, first);\n                        first = br;\n                    }\n                    if (util.isMedia(last)) {\n                        const br = util.createElement(\"BR\");\n                        const format = util.createElement(options.defaultTag);\n                        format.appendChild(br);\n                        wysiwyg.appendChild(format);\n                        last = br;\n                    }\n                    event._showToolbarBalloon(this.setRange(first, 0, last, last.textContent.length));\n                    break;\n                case \"codeView\":\n                    this.toggleCodeView();\n                    break;\n                case \"fullScreen\":\n                    this.toggleFullScreen(target);\n                    break;\n                case \"indent\":\n                case \"outdent\":\n                    this.indent(command);\n                    break;\n                case \"undo\":\n                    this.history.undo();\n                    break;\n                case \"redo\":\n                    this.history.redo();\n                    break;\n                case \"removeFormat\":\n                    this.removeFormat();\n                    this.focus();\n                    break;\n                case \"print\":\n                    this.print();\n                    break;\n                case \"preview\":\n                    this.preview();\n                    break;\n                case \"showBlocks\":\n                    this.toggleDisplayBlocks();\n                    break;\n                case \"dir\":\n                    this.setDir(options.rtl ? \"ltr\" : \"rtl\");\n                    break;\n                case \"dir_ltr\":\n                    this.setDir(\"ltr\");\n                    break;\n                case \"dir_rtl\":\n                    this.setDir(\"rtl\");\n                    break;\n                case \"save\":\n                    if (typeof options.callBackSave === \"function\") {\n                        options.callBackSave(this.getContents(false), this._variable.isChanged);\n                    } else if (this._variable.isChanged && typeof functions.save === \"function\") {\n                        functions.save();\n                    } else {\n                        throw Error(\"[SUNEDITOR.core.commandHandler.fail] Please register call back function in creation option. (callBackSave : Function)\");\n                    }\n                    this._variable.isChanged = false;\n                    if (context.tool.save) context.tool.save.setAttribute(\"disabled\", true);\n                    break;\n                default:\n                    command = options._defaultCommand[command.toLowerCase()] || command;\n                    if (!this.commandMap[command]) this.commandMap[command] = target;\n                    const nodesMap = this._variable.currentNodesMap;\n                    const cmd = nodesMap.indexOf(command) > -1 ? null : util.createElement(command);\n                    let removeNode = command;\n                    if (/^SUB$/i.test(command) && nodesMap.indexOf(\"SUP\") > -1) {\n                        removeNode = \"SUP\";\n                    } else if (/^SUP$/i.test(command) && nodesMap.indexOf(\"SUB\") > -1) {\n                        removeNode = \"SUB\";\n                    }\n                    this.nodeChange(cmd, this._commandMapStyles[command] || null, [\n                        removeNode\n                    ], false);\n                    this.focus();\n            }\n        },\n        /**\r\n         * @description Remove format of the currently selected range\r\n         */ removeFormat: function() {\n            this.nodeChange(null, null, null, null);\n        },\n        /**\r\n         * @description This method implements indentation to selected range.\r\n         * Setted \"margin-left\" to \"25px\" in the top \"P\" tag of the parameter node.\r\n         * @param {String} command Separator (\"indent\" or \"outdent\")\r\n         */ indent: function(command) {\n            const range = this.getRange();\n            const rangeLines = this.getSelectedElements(null);\n            const cells = [];\n            const shift = \"indent\" !== command;\n            const marginDir = options.rtl ? \"marginRight\" : \"marginLeft\";\n            let sc = range.startContainer;\n            let ec = range.endContainer;\n            let so = range.startOffset;\n            let eo = range.endOffset;\n            for(let i = 0, len = rangeLines.length, f, margin; i < len; i++){\n                f = rangeLines[i];\n                if (!util.isListCell(f) || !this.plugins.list) {\n                    margin = /\\d+/.test(f.style[marginDir]) ? util.getNumber(f.style[marginDir], 0) : 0;\n                    if (shift) {\n                        margin -= 25;\n                    } else {\n                        margin += 25;\n                    }\n                    util.setStyle(f, marginDir, margin <= 0 ? \"\" : margin + \"px\");\n                } else {\n                    if (shift || f.previousElementSibling) {\n                        cells.push(f);\n                    }\n                }\n            }\n            // list cells\n            if (cells.length > 0) {\n                this.plugins.list.editInsideList.call(this, shift, cells);\n            }\n            this.effectNode = null;\n            this.setRange(sc, so, ec, eo);\n            // history stack\n            this.history.push(false);\n        },\n        /**\r\n         * @description Add or remove the class name of \"body\" so that the code block is visible\r\n         */ toggleDisplayBlocks: function() {\n            const wysiwyg = context.element.wysiwyg;\n            util.toggleClass(wysiwyg, \"se-show-block\");\n            if (util.hasClass(wysiwyg, \"se-show-block\")) {\n                util.addClass(this._styleCommandMap.showBlocks, \"active\");\n            } else {\n                util.removeClass(this._styleCommandMap.showBlocks, \"active\");\n            }\n            this._resourcesStateChange();\n        },\n        /**\r\n         * @description Changes to code view or wysiwyg view\r\n         */ toggleCodeView: function() {\n            const isCodeView = this._variable.isCodeView;\n            this.controllersOff();\n            util.setDisabledButtons(!isCodeView, this.codeViewDisabledButtons);\n            if (isCodeView) {\n                if (!util.isNonEditable(context.element.wysiwygFrame)) this._setCodeDataToEditor();\n                context.element.wysiwygFrame.scrollTop = 0;\n                context.element.code.style.display = \"none\";\n                context.element.wysiwygFrame.style.display = \"block\";\n                this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: none\");\n                this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: block\");\n                if (options.height === \"auto\" && !options.codeMirrorEditor) context.element.code.style.height = \"0px\";\n                this._variable.isCodeView = false;\n                if (!this._variable.isFullScreen) {\n                    this._notHideToolbar = false;\n                    if (/balloon|balloon-always/i.test(options.mode)) {\n                        context.element._arrow.style.display = \"\";\n                        this._isInline = false;\n                        this._isBalloon = true;\n                        event._hideToolbar();\n                    }\n                }\n                this.nativeFocus();\n                util.removeClass(this._styleCommandMap.codeView, \"active\");\n                // history stack\n                if (!util.isNonEditable(context.element.wysiwygFrame)) {\n                    this.history.push(false);\n                    this.history._resetCachingButton();\n                }\n            } else {\n                this._setEditorDataToCodeView();\n                this._variable._codeOriginCssText = this._variable._codeOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: block\");\n                this._variable._wysiwygOriginCssText = this._variable._wysiwygOriginCssText.replace(/(\\s?display(\\s+)?:(\\s+)?)[a-zA-Z]+(?=;)/, \"display: none\");\n                if (this._variable.isFullScreen) context.element.code.style.height = \"100%\";\n                else if (options.height === \"auto\" && !options.codeMirrorEditor) context.element.code.style.height = context.element.code.scrollHeight > 0 ? context.element.code.scrollHeight + \"px\" : \"auto\";\n                if (options.codeMirrorEditor) options.codeMirrorEditor.refresh();\n                this._variable.isCodeView = true;\n                if (!this._variable.isFullScreen) {\n                    this._notHideToolbar = true;\n                    if (this._isBalloon) {\n                        context.element._arrow.style.display = \"none\";\n                        context.element.toolbar.style.left = \"\";\n                        this._isInline = true;\n                        this._isBalloon = false;\n                        event._showToolbarInline();\n                    }\n                }\n                this._variable._range = null;\n                context.element.code.focus();\n                util.addClass(this._styleCommandMap.codeView, \"active\");\n            }\n            this._checkPlaceholder();\n            if (this.isReadOnly) util.setDisabledButtons(true, this.resizingDisabledButtons);\n            // user event\n            if (typeof functions.toggleCodeView === \"function\") functions.toggleCodeView(this._variable.isCodeView, this);\n        },\n        /**\r\n         * @description Convert the data of the code view and put it in the WYSIWYG area.\r\n         * @private\r\n         */ _setCodeDataToEditor: function() {\n            const code_html = this._getCodeView();\n            if (options.fullPage) {\n                const parseDocument = this._parser.parseFromString(code_html, \"text/html\");\n                if (!this.options.__allowedScriptTag) {\n                    const headChildren = parseDocument.head.children;\n                    for(let i = 0, len = headChildren.length; i < len; i++){\n                        if (/^script$/i.test(headChildren[i].tagName)) {\n                            parseDocument.head.removeChild(headChildren[i]);\n                            i--, len--;\n                        }\n                    }\n                }\n                let headers = parseDocument.head.innerHTML;\n                if (!parseDocument.head.querySelector('link[rel=\"stylesheet\"]') || this.options.height === \"auto\" && !parseDocument.head.querySelector(\"style\")) {\n                    headers += util._setIframeCssTags(this.options);\n                }\n                this._wd.head.innerHTML = headers;\n                this._wd.body.innerHTML = this.convertContentsForEditor(parseDocument.body.innerHTML);\n                const attrs = parseDocument.body.attributes;\n                for(let i = 0, len = attrs.length; i < len; i++){\n                    if (attrs[i].name === \"contenteditable\") continue;\n                    this._wd.body.setAttribute(attrs[i].name, attrs[i].value);\n                }\n                if (!util.hasClass(this._wd.body, \"sun-editor-editable\")) {\n                    const editableClasses = options._editableClass.split(\" \");\n                    for(let i = 0; i < editableClasses.length; i++){\n                        util.addClass(this._wd.body, options._editableClass[i]);\n                    }\n                }\n            } else {\n                context.element.wysiwyg.innerHTML = code_html.length > 0 ? this.convertContentsForEditor(code_html) : \"<\" + options.defaultTag + \"><br></\" + options.defaultTag + \">\";\n            }\n        },\n        /**\r\n         * @description Convert the data of the WYSIWYG area and put it in the code view area.\r\n         * @private\r\n         */ _setEditorDataToCodeView: function() {\n            const codeContents = this.convertHTMLForCodeView(context.element.wysiwyg, false);\n            let codeValue = \"\";\n            if (options.fullPage) {\n                const attrs = util.getAttributesToString(this._wd.body, null);\n                codeValue = \"<!DOCTYPE html>\\n<html>\\n\" + this._wd.head.outerHTML.replace(/>(?!\\n)/g, \">\\n\") + \"<body \" + attrs + \">\\n\" + codeContents + \"</body>\\n</html>\";\n            } else {\n                codeValue = codeContents;\n            }\n            context.element.code.style.display = \"block\";\n            context.element.wysiwygFrame.style.display = \"none\";\n            this._setCodeView(codeValue);\n        },\n        /**\r\n         * @description Changes to full screen or default screen\r\n         * @param {Element|null} element full screen button\r\n         */ toggleFullScreen: function(element) {\n            const topArea = context.element.topArea;\n            const toolbar = context.element.toolbar;\n            const editorArea = context.element.editorArea;\n            const wysiwygFrame = context.element.wysiwygFrame;\n            const code = context.element.code;\n            const _var = this._variable;\n            this.controllersOff();\n            const wasToolbarHidden = toolbar.style.display === \"none\" || this._isInline && !this._inlineToolbarAttr.isShow;\n            if (!_var.isFullScreen) {\n                _var.isFullScreen = true;\n                _var._fullScreenAttrs.inline = this._isInline;\n                _var._fullScreenAttrs.balloon = this._isBalloon;\n                if (this._isInline || this._isBalloon) {\n                    this._isInline = false;\n                    this._isBalloon = false;\n                }\n                if (!!options.toolbarContainer) context.element.relative.insertBefore(toolbar, editorArea);\n                topArea.style.position = \"fixed\";\n                topArea.style.top = \"0\";\n                topArea.style.left = \"0\";\n                topArea.style.width = \"100%\";\n                topArea.style.maxWidth = \"100%\";\n                topArea.style.height = \"100%\";\n                topArea.style.zIndex = \"2147483647\";\n                if (context.element._stickyDummy.style.display !== ( true && \"\")) {\n                    _var._fullScreenAttrs.sticky = true;\n                    context.element._stickyDummy.style.display = \"none\";\n                    util.removeClass(toolbar, \"se-toolbar-sticky\");\n                }\n                _var._bodyOverflow = _d.body.style.overflow;\n                _d.body.style.overflow = \"hidden\";\n                _var._editorAreaOriginCssText = editorArea.style.cssText;\n                _var._wysiwygOriginCssText = wysiwygFrame.style.cssText;\n                _var._codeOriginCssText = code.style.cssText;\n                editorArea.style.cssText = toolbar.style.cssText = \"\";\n                wysiwygFrame.style.cssText = (wysiwygFrame.style.cssText.match(/\\s?display(\\s+)?:(\\s+)?[a-zA-Z]+;/) || [\n                    \"\"\n                ])[0] + options._editorStyles.editor;\n                code.style.cssText = (code.style.cssText.match(/\\s?display(\\s+)?:(\\s+)?[a-zA-Z]+;/) || [\n                    \"\"\n                ])[0];\n                toolbar.style.width = wysiwygFrame.style.height = code.style.height = \"100%\";\n                toolbar.style.position = \"relative\";\n                toolbar.style.display = \"block\";\n                _var.innerHeight_fullScreen = _w.innerHeight - toolbar.offsetHeight;\n                editorArea.style.height = _var.innerHeight_fullScreen - options.fullScreenOffset + \"px\";\n                if (element) util.changeElement(element.firstElementChild, icons.reduction);\n                if (options.iframe && options.height === \"auto\") {\n                    editorArea.style.overflow = \"auto\";\n                    this._iframeAutoHeight();\n                }\n                context.element.topArea.style.marginTop = options.fullScreenOffset + \"px\";\n                util.addClass(this._styleCommandMap.fullScreen, \"active\");\n            } else {\n                _var.isFullScreen = false;\n                wysiwygFrame.style.cssText = _var._wysiwygOriginCssText;\n                code.style.cssText = _var._codeOriginCssText;\n                toolbar.style.cssText = \"\";\n                editorArea.style.cssText = _var._editorAreaOriginCssText;\n                topArea.style.cssText = _var._originCssText;\n                _d.body.style.overflow = _var._bodyOverflow;\n                if (options.height === \"auto\" && !options.codeMirrorEditor) event._codeViewAutoHeight();\n                if (!!options.toolbarContainer) options.toolbarContainer.appendChild(toolbar);\n                if (options.stickyToolbar > -1) {\n                    util.removeClass(toolbar, \"se-toolbar-sticky\");\n                }\n                if (_var._fullScreenAttrs.sticky && !options.toolbarContainer) {\n                    _var._fullScreenAttrs.sticky = false;\n                    context.element._stickyDummy.style.display = \"block\";\n                    util.addClass(toolbar, \"se-toolbar-sticky\");\n                }\n                this._isInline = _var._fullScreenAttrs.inline;\n                this._isBalloon = _var._fullScreenAttrs.balloon;\n                if (this._isInline) event._showToolbarInline();\n                if (!!options.toolbarContainer) util.removeClass(toolbar, \"se-toolbar-balloon\");\n                event.onScroll_window();\n                if (element) util.changeElement(element.firstElementChild, icons.expansion);\n                context.element.topArea.style.marginTop = \"\";\n                util.removeClass(this._styleCommandMap.fullScreen, \"active\");\n            }\n            if (wasToolbarHidden) functions.toolbar.hide();\n            // user event\n            if (typeof functions.toggleFullScreen === \"function\") functions.toggleFullScreen(this._variable.isFullScreen, this);\n        },\n        /**\r\n         * @description Prints the current contents of the editor.\r\n         */ print: function() {\n            const iframe = util.createElement(\"IFRAME\");\n            iframe.style.display = \"none\";\n            _d.body.appendChild(iframe);\n            const contentsHTML = options.printTemplate ? options.printTemplate.replace(/\\{\\{\\s*contents\\s*\\}\\}/i, this.getContents(true)) : this.getContents(true);\n            const printDocument = util.getIframeDocument(iframe);\n            const wDoc = this._wd;\n            if (options.iframe) {\n                const arrts = options._printClass !== null ? 'class=\"' + options._printClass + '\"' : options.fullPage ? util.getAttributesToString(wDoc.body, [\n                    \"contenteditable\"\n                ]) : 'class=\"' + options._editableClass + '\"';\n                printDocument.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + wDoc.head.innerHTML + \"</head>\" + \"<body \" + arrts + \">\" + contentsHTML + \"</body>\" + \"</html>\");\n            } else {\n                const links = _d.head.getElementsByTagName(\"link\");\n                const styles = _d.head.getElementsByTagName(\"style\");\n                let linkHTML = \"\";\n                for(let i = 0, len = links.length; i < len; i++){\n                    linkHTML += links[i].outerHTML;\n                }\n                for(let i = 0, len = styles.length; i < len; i++){\n                    linkHTML += styles[i].outerHTML;\n                }\n                printDocument.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + linkHTML + \"</head>\" + '<body class=\"' + (options._printClass !== null ? options._printClass : options._editableClass) + '\">' + contentsHTML + \"</body>\" + \"</html>\");\n            }\n            this.showLoading();\n            _w.setTimeout(function() {\n                try {\n                    iframe.focus();\n                    // IE or Edge, Chromium\n                    if (util.isIE_Edge || util.isChromium || !!_d.documentMode || !!_w.StyleMedia) {\n                        try {\n                            iframe.contentWindow.document.execCommand(\"print\", false, null);\n                        } catch (e) {\n                            iframe.contentWindow.print();\n                        }\n                    } else {\n                        // Other browsers\n                        iframe.contentWindow.print();\n                    }\n                } catch (error) {\n                    throw Error(\"[SUNEDITOR.core.print.fail] error: \" + error);\n                } finally{\n                    core.closeLoading();\n                    util.removeItem(iframe);\n                }\n            }, 1000);\n        },\n        /**\r\n         * @description Open the preview window.\r\n         */ preview: function() {\n            core.submenuOff();\n            core.containerOff();\n            core.controllersOff();\n            const contentsHTML = options.previewTemplate ? options.previewTemplate.replace(/\\{\\{\\s*contents\\s*\\}\\}/i, this.getContents(true)) : this.getContents(true);\n            const windowObject = _w.open(\"\", \"_blank\");\n            windowObject.mimeType = \"text/html\";\n            const wDoc = this._wd;\n            if (options.iframe) {\n                const arrts = options._printClass !== null ? 'class=\"' + options._printClass + '\"' : options.fullPage ? util.getAttributesToString(wDoc.body, [\n                    \"contenteditable\"\n                ]) : 'class=\"' + options._editableClass + '\"';\n                windowObject.document.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + wDoc.head.innerHTML + \"<style>body {overflow:auto !important; margin: 10px auto !important; height:auto !important; outline:1px dashed #ccc;}</style>\" + \"</head>\" + \"<body \" + arrts + \">\" + contentsHTML + \"</body>\" + \"</html>\");\n            } else {\n                const links = _d.head.getElementsByTagName(\"link\");\n                const styles = _d.head.getElementsByTagName(\"style\");\n                let linkHTML = \"\";\n                for(let i = 0, len = links.length; i < len; i++){\n                    linkHTML += links[i].outerHTML;\n                }\n                for(let i = 0, len = styles.length; i < len; i++){\n                    linkHTML += styles[i].outerHTML;\n                }\n                windowObject.document.write(\"\" + \"<!DOCTYPE html><html>\" + \"<head>\" + '<meta charset=\"utf-8\" />' + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">' + \"<title>\" + lang.toolbar.preview + \"</title>\" + linkHTML + \"</head>\" + '<body class=\"' + (options._printClass !== null ? options._printClass : options._editableClass) + '\" style=\"margin:10px auto !important; height:auto !important; outline:1px dashed #ccc;\">' + contentsHTML + \"</body>\" + \"</html>\");\n            }\n        },\n        /**\r\n         * @description Set direction to \"rtl\" or \"ltr\".\r\n         * @param {String} dir \"rtl\" or \"ltr\"\r\n         */ setDir: function(dir) {\n            const rtl = dir === \"rtl\";\n            const changeDir = this._prevRtl !== rtl;\n            this._prevRtl = options.rtl = rtl;\n            if (changeDir) {\n                // align buttons\n                if (this.plugins.align) {\n                    this.plugins.align.exchangeDir.call(this);\n                }\n                // indent buttons\n                if (context.tool.indent) util.changeElement(context.tool.indent.firstElementChild, icons.indent);\n                if (context.tool.outdent) util.changeElement(context.tool.outdent.firstElementChild, icons.outdent);\n            }\n            const el = context.element;\n            if (rtl) {\n                util.addClass(el.topArea, \"se-rtl\");\n                util.addClass(el.wysiwygFrame, \"se-rtl\");\n            } else {\n                util.removeClass(el.topArea, \"se-rtl\");\n                util.removeClass(el.wysiwygFrame, \"se-rtl\");\n            }\n            const lineNodes = util.getListChildren(el.wysiwyg, function(current) {\n                return util.isFormatElement(current) && (current.style.marginRight || current.style.marginLeft || current.style.textAlign);\n            });\n            for(let i = 0, len = lineNodes.length, n, l, r; i < len; i++){\n                n = lineNodes[i];\n                // indent margin\n                r = n.style.marginRight;\n                l = n.style.marginLeft;\n                if (r || l) {\n                    n.style.marginRight = l;\n                    n.style.marginLeft = r;\n                }\n                // text align\n                r = n.style.textAlign;\n                if (r === \"left\") n.style.textAlign = \"right\";\n                else if (r === \"right\") n.style.textAlign = \"left\";\n            }\n            const tool = context.tool;\n            if (tool.dir) {\n                util.changeTxt(tool.dir.querySelector(\".se-tooltip-text\"), lang.toolbar[options.rtl ? \"dir_ltr\" : \"dir_rtl\"]);\n                util.changeElement(tool.dir.firstElementChild, icons[options.rtl ? \"dir_ltr\" : \"dir_rtl\"]);\n            }\n            if (tool.dir_ltr) {\n                if (rtl) util.removeClass(tool.dir_ltr, \"active\");\n                else util.addClass(tool.dir_ltr, \"active\");\n            }\n            if (tool.dir_rtl) {\n                if (rtl) util.addClass(tool.dir_rtl, \"active\");\n                else util.removeClass(tool.dir_rtl, \"active\");\n            }\n        },\n        /**\r\n         * @description Sets the HTML string\r\n         * @param {String|undefined} html HTML string\r\n         */ setContents: function(html) {\n            this.removeRange();\n            const convertValue = html === null || html === undefined ? \"\" : this.convertContentsForEditor(html, null, null);\n            if (!this._variable.isCodeView) {\n                context.element.wysiwyg.innerHTML = convertValue;\n                this._resetComponents();\n                // history stack\n                this.history.push(false);\n            } else {\n                const value = this.convertHTMLForCodeView(convertValue, false);\n                this._setCodeView(value);\n            }\n        },\n        /**\r\n         * @description Sets the contents of the iframe's head tag and body tag when using the \"iframe\" or \"fullPage\" option.\r\n         * @param {Object} ctx { head: HTML string, body: HTML string}\r\n         */ setIframeContents: function(ctx) {\n            if (!options.iframe) return false;\n            if (ctx.head) this._wd.head.innerHTML = this.options.__allowedScriptTag ? ctx.head : ctx.head.replace(this.__scriptTagRegExp, \"\");\n            if (ctx.body) this._wd.body.innerHTML = this.convertContentsForEditor(ctx.body);\n            this._resetComponents();\n        },\n        /**\r\n         * @description Gets the current contents\r\n         * @param {Boolean} onlyContents Return only the contents of the body without headers when the \"fullPage\" option is true\r\n         * @returns {Object}\r\n         */ getContents: function(onlyContents) {\n            const contents = this.cleanHTML(context.element.wysiwyg.innerHTML, null, null);\n            const renderHTML = util.createElement(\"DIV\");\n            renderHTML.innerHTML = contents;\n            const editableEls = util.getListChildren(renderHTML, function(current) {\n                return current.hasAttribute(\"contenteditable\");\n            });\n            for(let i = 0, len = editableEls.length; i < len; i++){\n                editableEls[i].removeAttribute(\"contenteditable\");\n            }\n            if (options.fullPage && !onlyContents) {\n                const attrs = util.getAttributesToString(this._wd.body, [\n                    \"contenteditable\"\n                ]);\n                return \"<!DOCTYPE html><html>\" + this._wd.head.outerHTML + \"<body \" + attrs + \">\" + renderHTML.innerHTML + \"</body></html>\";\n            } else {\n                return renderHTML.innerHTML;\n            }\n        },\n        /**\r\n         * @description Gets the current contents with containing parent div(div.sun-editor-editable).\r\n         * <div class=\"sun-editor-editable\">{contents}</div>\r\n         * @param {Boolean} onlyContents Return only the contents of the body without headers when the \"fullPage\" option is true\r\n         * @returns {String}\r\n         */ getFullContents: function(onlyContents) {\n            return '<div class=\"sun-editor-editable' + (options.rtl ? \" se-rtl\" : \"\") + '\">' + this.getContents(onlyContents) + \"</div>\";\n        },\n        /**\r\n         * @description Returns HTML string according to tag type and configuration.\r\n         * Use only \"cleanHTML\"\r\n         * @param {Node} node Node\r\n         * @param {Boolean} requireFormat If true, text nodes that do not have a format node is wrapped with the format tag.\r\n         * @private\r\n         */ _makeLine: function(node, requireFormat) {\n            const defaultTag = options.defaultTag;\n            // element\n            if (node.nodeType === 1) {\n                if (this.__disallowedTagNameRegExp.test(node.nodeName)) return \"\";\n                if (/__se__tag/.test(node.className)) return node.outerHTML;\n                const ch = util.getListChildNodes(node, function(current) {\n                    return util.isSpanWithoutAttr(current) && !util.getParentElement(current, util.isNotCheckingNode);\n                }) || [];\n                for(let i = ch.length - 1; i >= 0; i--){\n                    ch[i].outerHTML = ch[i].innerHTML;\n                }\n                if (!requireFormat || util.isFormatElement(node) || util.isRangeFormatElement(node) || util.isComponent(node) || util.isFigures(node) || util.isAnchor(node) && util.isMedia(node.firstElementChild)) {\n                    return util.isSpanWithoutAttr(node) ? node.innerHTML : node.outerHTML;\n                } else {\n                    return \"<\" + defaultTag + \">\" + (util.isSpanWithoutAttr(node) ? node.innerHTML : node.outerHTML) + \"</\" + defaultTag + \">\";\n                }\n            }\n            // text\n            if (node.nodeType === 3) {\n                if (!requireFormat) return util._HTMLConvertor(node.textContent);\n                const textArray = node.textContent.split(/\\n/g);\n                let html = \"\";\n                for(let i = 0, tLen = textArray.length, text; i < tLen; i++){\n                    text = textArray[i].trim();\n                    if (text.length > 0) html += \"<\" + defaultTag + \">\" + util._HTMLConvertor(text) + \"</\" + defaultTag + \">\";\n                }\n                return html;\n            }\n            // comments\n            if (node.nodeType === 8 && this._allowHTMLComments) {\n                return \"<!--\" + node.textContent.trim() + \"-->\";\n            }\n            return \"\";\n        },\n        /**\r\n         * @description Removes attribute values such as style and converts tags that do not conform to the \"html5\" standard.\r\n         * @param {String} text \r\n         * @returns {String} HTML string\r\n         * @private\r\n         */ _tagConvertor: function(text) {\n            if (!this._disallowedTextTagsRegExp) return text;\n            const ec = options._textTagsMap;\n            return text.replace(this._disallowedTextTagsRegExp, function(m, t, n, p) {\n                return t + (typeof ec[n] === \"string\" ? ec[n] : n) + (p ? \" \" + p : \"\");\n            });\n        },\n        /**\r\n         * @description Delete disallowed tags\r\n         * @param {String} html HTML string\r\n         * @returns {String}\r\n         * @private\r\n         */ _deleteDisallowedTags: function(html) {\n            html = html.replace(this.__disallowedTagsRegExp, \"\").replace(/<[a-z0-9]+\\:[a-z0-9]+[^>^\\/]*>[^>]*<\\/[a-z0-9]+\\:[a-z0-9]+>/gi, \"\");\n            if (!/\\bfont\\b/i.test(this.options._editorTagsWhitelist)) {\n                html = html.replace(/(<\\/?)font(\\s?)/gi, \"$1span$2\");\n            }\n            return html.replace(this.editorTagsWhitelistRegExp, \"\").replace(this.editorTagsBlacklistRegExp, \"\");\n        },\n        _convertFontSize: function(to, size) {\n            const math = this._w.Math;\n            const value = size.match(/(\\d+(?:\\.\\d+)?)(.+)/);\n            const sizeNum = value ? value[1] * 1 : util.fontValueMap[size];\n            const from = value ? value[2] : \"rem\";\n            let pxSize = sizeNum;\n            if (/em/.test(from)) {\n                pxSize = math.round(sizeNum / 0.0625);\n            } else if (from === \"pt\") {\n                pxSize = math.round(sizeNum * 1.333);\n            } else if (from === \"%\") {\n                pxSize = sizeNum / 100;\n            }\n            switch(to){\n                case \"em\":\n                case \"rem\":\n                case \"%\":\n                    return (pxSize * 0.0625).toFixed(2) + to;\n                case \"pt\":\n                    return math.floor(pxSize / 1.333) + to;\n                default:\n                    return pxSize + to;\n            }\n        },\n        _cleanStyle: function(m, v, name) {\n            let sv = (m.match(/style\\s*=\\s*(?:\"|')[^\"']*(?:\"|')/) || [])[0];\n            if (/span/i.test(name) && !sv && (m.match(/<[^\\s]+\\s(.+)/) || [])[1]) {\n                const size = (m.match(/\\ssize=\"([^\"]+)\"/i) || [])[1];\n                const face = (m.match(/\\sface=\"([^\"]+)\"/i) || [])[1];\n                const color = (m.match(/\\scolor=\"([^\"]+)\"/i) || [])[1];\n                if (size || face || color) {\n                    sv = 'style=\"' + (size ? \"font-size:\" + this.util.getNumber(size / 3.333, 1) + \"rem;\" : \"\") + (face ? \"font-family:\" + face + \";\" : \"\") + (color ? \"color:\" + color + \";\" : \"\") + '\"';\n                }\n            }\n            if (sv) {\n                if (!v) v = [];\n                const style = sv.replace(/&quot;/g, \"\").match(this._cleanStyleRegExp[name]);\n                if (style) {\n                    const allowedStyle = [];\n                    for(let i = 0, len = style.length, r; i < len; i++){\n                        r = style[i].match(/([a-zA-Z0-9-]+)(:)([^\"']+)/);\n                        if (r && !/inherit|initial|revert|unset/i.test(r[3])) {\n                            const k = util.kebabToCamelCase(r[1].trim());\n                            const v = this.wwComputedStyle[k] ? this.wwComputedStyle[k].replace(/\"/g, \"\") : \"\";\n                            const c = r[3].trim();\n                            switch(k){\n                                case \"fontFamily\":\n                                    if (!options.plugins.font || options.font.indexOf(c) === -1) continue;\n                                    break;\n                                case \"fontSize\":\n                                    if (!options.plugins.fontSize) continue;\n                                    if (!this._cleanStyleRegExp.fontSizeUnit.test(r[0])) {\n                                        r[0] = r[0].replace((r[0].match(/:\\s*([^;]+)/) || [])[1], this._convertFontSize.bind(this, options.fontSizeUnit));\n                                    }\n                                    break;\n                                case \"color\":\n                                    if (!options.plugins.fontColor || /rgba\\(([0-9]+\\s*,\\s*){3}0\\)|windowtext/i.test(c)) continue;\n                                    break;\n                                case \"backgroundColor\":\n                                    if (!options.plugins.hiliteColor || /rgba\\(([0-9]+\\s*,\\s*){3}0\\)|windowtext/i.test(c)) continue;\n                                    break;\n                            }\n                            if (v !== c) {\n                                allowedStyle.push(r[0]);\n                            }\n                        }\n                    }\n                    if (allowedStyle.length > 0) v.push('style=\"' + allowedStyle.join(\";\") + '\"');\n                }\n            }\n            return v;\n        },\n        /**\r\n         * @description Tag and tag attribute check RegExp function. (used by \"cleanHTML\" and \"convertContentsForEditor\")\r\n         * @param {Boolean} lowLevelCheck Row level check\r\n         * @param {String} m RegExp value\r\n         * @param {String} t RegExp value\r\n         * @returns {String}\r\n         * @private\r\n         */ _cleanTags: function(lowLevelCheck, m, t) {\n            if (/^<[a-z0-9]+\\:[a-z0-9]+/i.test(m)) return m;\n            let v = null;\n            const tagName = t.match(/(?!<)[a-zA-Z0-9\\-]+/)[0].toLowerCase();\n            // blacklist\n            const bAttr = this._attributesTagsBlacklist[tagName];\n            m = m.replace(/\\s(?:on[a-z]+)\\s*=\\s*(\")[^\"]*\\1/ig, \"\");\n            if (bAttr) m = m.replace(bAttr, \"\");\n            else m = m.replace(this._attributesBlacklistRegExp, \"\");\n            // whitelist\n            const wAttr = this._attributesTagsWhitelist[tagName];\n            if (wAttr) v = m.match(wAttr);\n            else v = m.match(lowLevelCheck ? this._attributesWhitelistRegExp : this._attributesWhitelistRegExp_all_data);\n            // attribute\n            if (lowLevelCheck || tagName === \"span\" || tagName === \"li\" || this._cleanStyleRegExp[tagName]) {\n                if (tagName === \"a\") {\n                    const sv = m.match(/(?:(?:id|name)\\s*=\\s*(?:\"|')[^\"']*(?:\"|'))/g);\n                    if (sv) {\n                        if (!v) v = [];\n                        v.push(sv[0]);\n                    }\n                } else if (!v || !/style=/i.test(v.toString())) {\n                    if (tagName === \"span\" || tagName === \"li\") {\n                        v = this._cleanStyle(m, v, \"span\");\n                    }\n                    if (this._cleanStyleRegExp[tagName]) {\n                        v = this._cleanStyle(m, v, tagName);\n                    } else if (/^(P|DIV|H[1-6]|PRE)$/i.test(tagName)) {\n                        v = this._cleanStyle(m, v, \"format\");\n                    }\n                }\n            } else {\n                const sv = m.match(/style\\s*=\\s*(?:\"|')[^\"']*(?:\"|')/);\n                if (sv && !v) v = [\n                    sv[0]\n                ];\n                else if (sv && !v.some(function(v) {\n                    return /^style/.test(v.trim());\n                })) v.push(sv[0]);\n            }\n            // figure\n            if (util.isFigures(tagName)) {\n                const sv = m.match(/style\\s*=\\s*(?:\"|')[^\"']*(?:\"|')/);\n                if (!v) v = [];\n                if (sv) v.push(sv[0]);\n            }\n            if (v) {\n                for(let i = 0, len = v.length, a; i < len; i++){\n                    // if (lowLevelCheck && /^class=\"(?!(__se__|se-|katex))/.test(v[i].trim())) continue;\n                    a = /^(?:href|src)\\s*=\\s*('|\"|\\s)*javascript\\s*\\:/i.test(v[i].trim()) ? \"\" : v[i];\n                    t += (/^\\s/.test(a) ? \"\" : \" \") + a;\n                }\n            }\n            return t;\n        },\n        /**\r\n         * @description Determines if formatting is required and returns a domTree\r\n         * @param {Element} dom documentFragment\r\n         * @returns {Element}\r\n         * @private\r\n         */ _editFormat: function(dom) {\n            let value = \"\", f;\n            const tempTree = dom.childNodes;\n            for(let i = 0, len = tempTree.length, n; i < len; i++){\n                n = tempTree[i];\n                if (n.nodeType === 8) {\n                    value += \"<!-- \" + n.textContent + \" -->\";\n                } else if (!util.isFormatElement(n) && !util.isRangeFormatElement(n) && !util.isComponent(n) && !/meta/i.test(n.nodeName)) {\n                    if (!f) f = util.createElement(options.defaultTag);\n                    f.appendChild(n);\n                    i--;\n                    len--;\n                } else {\n                    if (f) {\n                        value += f.outerHTML;\n                        f = null;\n                    }\n                    value += n.outerHTML;\n                }\n            }\n            if (f) value += f.outerHTML;\n            return _d.createRange().createContextualFragment(value);\n        },\n        _convertListCell: function(domTree) {\n            let html = \"\";\n            for(let i = 0, len = domTree.length, node; i < len; i++){\n                node = domTree[i];\n                if (node.nodeType === 1) {\n                    if (util.isList(node)) {\n                        html += node.innerHTML;\n                    } else if (util.isListCell(node)) {\n                        html += node.outerHTML;\n                    } else if (util.isFormatElement(node)) {\n                        html += \"<li>\" + (node.innerHTML.trim() || \"<br>\") + \"</li>\";\n                    } else if (util.isRangeFormatElement(node) && !util.isTable(node)) {\n                        html += this._convertListCell(node);\n                    } else {\n                        html += \"<li>\" + node.outerHTML + \"</li>\";\n                    }\n                } else {\n                    html += \"<li>\" + (node.textContent || \"<br>\") + \"</li>\";\n                }\n            }\n            return html;\n        },\n        _isFormatData: function(domTree) {\n            let requireFormat = false;\n            for(let i = 0, len = domTree.length, t; i < len; i++){\n                t = domTree[i];\n                if (t.nodeType === 1 && !util.isTextStyleElement(t) && !util.isBreak(t) && !this.__disallowedTagNameRegExp.test(t.nodeName)) {\n                    requireFormat = true;\n                    break;\n                }\n            }\n            return requireFormat;\n        },\n        /**\r\n         * @description Gets the clean HTML code for editor\r\n         * @param {String} html HTML string\r\n         * @param {String|RegExp|null} whitelist Regular expression of allowed tags.\r\n         * RegExp object is create by util.createTagsWhitelist method. (core.pasteTagsWhitelistRegExp)\r\n         * @param {String|RegExp|null} blacklist Regular expression of disallowed tags.\r\n         * RegExp object is create by util.createTagsBlacklist method. (core.pasteTagsBlacklistRegExp)\r\n         * @returns {String}\r\n         */ cleanHTML: function(html, whitelist, blacklist) {\n            if (!options.strictMode) return html;\n            html = this._deleteDisallowedTags(this._parser.parseFromString(util.htmlCompress(html), \"text/html\").body.innerHTML).replace(/(<[a-zA-Z0-9\\-]+)[^>]*(?=>)/g, this._cleanTags.bind(this, true)).replace(/<br\\/?>$/i, \"\");\n            const dom = _d.createRange().createContextualFragment(html);\n            try {\n                util._consistencyCheckOfHTML(dom, this._htmlCheckWhitelistRegExp, this._htmlCheckBlacklistRegExp, this._classNameFilter);\n            } catch (error) {\n                console.warn(\"[SUNEDITOR.cleanHTML.consistencyCheck.fail] \" + error);\n            }\n            if (this.managedTagsInfo && this.managedTagsInfo.query) {\n                const textCompList = dom.querySelectorAll(this.managedTagsInfo.query);\n                for(let i = 0, len = textCompList.length, initMethod, classList; i < len; i++){\n                    classList = [].slice.call(textCompList[i].classList);\n                    for(let c = 0, cLen = classList.length; c < cLen; c++){\n                        initMethod = this.managedTagsInfo.map[classList[c]];\n                        if (initMethod) {\n                            initMethod(textCompList[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n            let domTree = dom.childNodes;\n            let cleanHTML = \"\";\n            const requireFormat = this._isFormatData(domTree);\n            if (requireFormat) {\n                domTree = this._editFormat(dom).childNodes;\n            }\n            for(let i = 0, len = domTree.length, t; i < len; i++){\n                t = domTree[i];\n                if (this.__allowedScriptRegExp.test(t.nodeName)) {\n                    cleanHTML += t.outerHTML;\n                    continue;\n                }\n                cleanHTML += this._makeLine(t, requireFormat);\n            }\n            cleanHTML = util.htmlRemoveWhiteSpace(cleanHTML);\n            if (!cleanHTML) {\n                cleanHTML = html;\n            } else {\n                if (whitelist) cleanHTML = cleanHTML.replace(typeof whitelist === \"string\" ? util.createTagsWhitelist(whitelist) : whitelist, \"\");\n                if (blacklist) cleanHTML = cleanHTML.replace(typeof blacklist === \"string\" ? util.createTagsBlacklist(blacklist) : blacklist, \"\");\n            }\n            return this._tagConvertor(cleanHTML);\n        },\n        /**\r\n         * @description Converts contents into a format that can be placed in an editor\r\n         * @param {String} contents contents\r\n         * @returns {String}\r\n         */ convertContentsForEditor: function(contents) {\n            if (!options.strictMode) return contents;\n            contents = this._deleteDisallowedTags(this._parser.parseFromString(util.htmlCompress(contents), \"text/html\").body.innerHTML).replace(/(<[a-zA-Z0-9\\-]+)[^>]*(?=>)/g, this._cleanTags.bind(this, true));\n            const dom = _d.createRange().createContextualFragment(contents);\n            try {\n                util._consistencyCheckOfHTML(dom, this._htmlCheckWhitelistRegExp, this._htmlCheckBlacklistRegExp, this._classNameFilter);\n            } catch (error) {\n                console.warn(\"[SUNEDITOR.convertContentsForEditor.consistencyCheck.fail] \" + error);\n            }\n            if (this.managedTagsInfo && this.managedTagsInfo.query) {\n                const textCompList = dom.querySelectorAll(this.managedTagsInfo.query);\n                for(let i = 0, len = textCompList.length, initMethod, classList; i < len; i++){\n                    classList = [].slice.call(textCompList[i].classList);\n                    for(let c = 0, cLen = classList.length; c < cLen; c++){\n                        initMethod = this.managedTagsInfo.map[classList[c]];\n                        if (initMethod) {\n                            initMethod(textCompList[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n            const domTree = dom.childNodes;\n            let cleanHTML = \"\", p = null;\n            for(let i = 0, t; i < domTree.length; i++){\n                t = domTree[i];\n                if (this.__allowedScriptRegExp.test(t.nodeName)) {\n                    cleanHTML += t.outerHTML;\n                    continue;\n                }\n                if (!util.isFormatElement(t) && !util.isRangeFormatElement(t) && !util.isComponent(t) && !util.isFigures(t) && t.nodeType !== 8 && !/__se__tag/.test(t.className)) {\n                    if (!p) p = util.createElement(options.defaultTag);\n                    p.appendChild(t);\n                    i--;\n                    if (domTree[i + 1] && !util.isFormatElement(domTree[i + 1])) {\n                        continue;\n                    } else {\n                        t = p;\n                        p = null;\n                    }\n                }\n                if (p) {\n                    cleanHTML += this._makeLine(p, true);\n                    p = null;\n                }\n                cleanHTML += this._makeLine(t, true);\n            }\n            if (p) cleanHTML += this._makeLine(p, true);\n            if (cleanHTML.length === 0) return \"<\" + options.defaultTag + \"><br></\" + options.defaultTag + \">\";\n            cleanHTML = util.htmlRemoveWhiteSpace(cleanHTML);\n            return this._tagConvertor(cleanHTML);\n        },\n        /**\r\n         * @description Converts wysiwyg area element into a format that can be placed in an editor of code view mode\r\n         * @param {Element|String} html WYSIWYG element (context.element.wysiwyg) or HTML string.\r\n         * @param {Boolean} comp If true, does not line break and indentation of tags.\r\n         * @returns {String}\r\n         */ convertHTMLForCodeView: function(html, comp) {\n            let returnHTML = \"\";\n            const wRegExp = _w.RegExp;\n            const brReg = new wRegExp(\"^(BLOCKQUOTE|PRE|TABLE|THEAD|TBODY|TR|TH|TD|OL|UL|IMG|IFRAME|VIDEO|AUDIO|FIGURE|FIGCAPTION|HR|BR|CANVAS|SELECT)$\", \"i\");\n            const wDoc = typeof html === \"string\" ? _d.createRange().createContextualFragment(html) : html;\n            const isFormat = (function(current) {\n                return this.isFormatElement(current) || this.isComponent(current);\n            }).bind(util);\n            const brChar = comp ? \"\" : \"\\n\";\n            let indentSize = comp ? 0 : this._variable.codeIndent * 1;\n            indentSize = indentSize > 0 ? new _w.Array(indentSize + 1).join(\" \") : \"\";\n            (function recursionFunc(element, indent) {\n                const children = element.childNodes;\n                const elementRegTest = brReg.test(element.nodeName);\n                const elementIndent = elementRegTest ? indent : \"\";\n                for(let i = 0, len = children.length, node, br, lineBR, nodeRegTest, tag, tagIndent; i < len; i++){\n                    node = children[i];\n                    nodeRegTest = brReg.test(node.nodeName);\n                    br = nodeRegTest ? brChar : \"\";\n                    lineBR = isFormat(node) && !elementRegTest && !/^(TH|TD)$/i.test(element.nodeName) ? brChar : \"\";\n                    if (node.nodeType === 8) {\n                        returnHTML += \"\\n<!-- \" + node.textContent.trim() + \" -->\" + br;\n                        continue;\n                    }\n                    if (node.nodeType === 3) {\n                        if (!util.isList(node.parentElement)) returnHTML += util._HTMLConvertor(/^\\n+$/.test(node.data) ? \"\" : node.data);\n                        continue;\n                    }\n                    if (node.childNodes.length === 0) {\n                        returnHTML += (/^HR$/i.test(node.nodeName) ? brChar : \"\") + (/^PRE$/i.test(node.parentElement.nodeName) && /^BR$/i.test(node.nodeName) ? \"\" : elementIndent) + node.outerHTML + br;\n                        continue;\n                    }\n                    if (!node.outerHTML) {\n                        returnHTML += new _w.XMLSerializer().serializeToString(node);\n                    } else {\n                        tag = node.nodeName.toLowerCase();\n                        tagIndent = elementIndent || nodeRegTest ? indent : \"\";\n                        returnHTML += (lineBR || (elementRegTest ? \"\" : br)) + tagIndent + node.outerHTML.match(wRegExp(\"<\" + tag + \"[^>]*>\", \"i\"))[0] + br;\n                        recursionFunc(node, indent + indentSize, \"\");\n                        returnHTML += (/\\n$/.test(returnHTML) ? tagIndent : \"\") + \"</\" + tag + \">\" + (lineBR || br || elementRegTest ? brChar :  false || /^(TH|TD)$/i.test(node.nodeName) ? brChar : \"\");\n                    }\n                }\n            })(wDoc, \"\");\n            return returnHTML.trim() + brChar;\n        },\n        /**\r\n         * @description Add an event to document.\r\n         * When created as an Iframe, the same event is added to the document in the Iframe.\r\n         * @param {String} type Event type\r\n         * @param {Function} listener Event listener\r\n         * @param {Boolean} useCapture Use event capture\r\n         */ addDocEvent: function(type, listener, useCapture) {\n            _d.addEventListener(type, listener, useCapture);\n            if (options.iframe) {\n                this._wd.addEventListener(type, listener);\n            }\n        },\n        /**\r\n         * @description Remove events from document.\r\n         * When created as an Iframe, the event of the document inside the Iframe is also removed.\r\n         * @param {String} type Event type\r\n         * @param {Function} listener Event listener\r\n         */ removeDocEvent: function(type, listener) {\n            _d.removeEventListener(type, listener);\n            if (options.iframe) {\n                this._wd.removeEventListener(type, listener);\n            }\n        },\n        /**\r\n         * @description The current number of characters is counted and displayed.\r\n         * @param {String} inputText Text added.\r\n         * @returns {Boolean}\r\n         * @private\r\n         */ _charCount: function(inputText) {\n            const maxCharCount = options.maxCharCount;\n            const countType = options.charCounterType;\n            let nextCharCount = 0;\n            if (!!inputText) nextCharCount = this.getCharLength(inputText, countType);\n            this._setCharCount();\n            if (maxCharCount > 0) {\n                let over = false;\n                const count = functions.getCharCount(countType);\n                if (count > maxCharCount) {\n                    over = true;\n                    if (nextCharCount > 0) {\n                        this._editorRange();\n                        const range = this.getRange();\n                        const endOff = range.endOffset - 1;\n                        const text = this.getSelectionNode().textContent;\n                        const slicePosition = range.endOffset - (count - maxCharCount);\n                        this.getSelectionNode().textContent = text.slice(0, slicePosition < 0 ? 0 : slicePosition) + text.slice(range.endOffset, text.length);\n                        this.setRange(range.endContainer, endOff, range.endContainer, endOff);\n                    }\n                } else if (count + nextCharCount > maxCharCount) {\n                    over = true;\n                }\n                if (over) {\n                    this._callCounterBlink();\n                    if (nextCharCount > 0) return false;\n                }\n            }\n            return true;\n        },\n        /**\r\n         * @description When \"element\" is added, if it is greater than \"options.maxCharCount\", false is returned.\r\n         * @param {Node|String} element Element node or String.\r\n         * @param {String|null} charCounterType charCounterType. If it is null, the options.charCounterType\r\n         * @returns {Boolean}\r\n         */ checkCharCount: function(element, charCounterType) {\n            if (options.maxCharCount) {\n                const countType = charCounterType || options.charCounterType;\n                const length = this.getCharLength(typeof element === \"string\" ? element : this._charTypeHTML && element.nodeType === 1 ? element.outerHTML : element.textContent, countType);\n                if (length > 0 && length + functions.getCharCount(countType) > options.maxCharCount) {\n                    this._callCounterBlink();\n                    return false;\n                }\n            }\n            return true;\n        },\n        /**\r\n         * @description Get the length of the content.\r\n         * Depending on the option, the length of the character is taken. (charCounterType)\r\n         * @param {String} content Content to count\r\n         * @param {String} charCounterType options.charCounterType\r\n         * @returns {Number}\r\n         */ getCharLength: function(content, charCounterType) {\n            return /byte/.test(charCounterType) ? util.getByteLength(content) : content.length;\n        },\n        /**\r\n         * @description Reset buttons of the responsive toolbar.\r\n         */ resetResponsiveToolbar: function() {\n            core.controllersOff();\n            const responsiveSize = event._responsiveButtonSize;\n            if (responsiveSize) {\n                let w = 0;\n                if ((core._isBalloon || core._isInline) && options.toolbarWidth === \"auto\") {\n                    w = context.element.topArea.offsetWidth;\n                } else {\n                    w = context.element.toolbar.offsetWidth;\n                }\n                let responsiveWidth = \"default\";\n                for(let i = 1, len = responsiveSize.length; i < len; i++){\n                    if (w < responsiveSize[i]) {\n                        responsiveWidth = responsiveSize[i] + \"\";\n                        break;\n                    }\n                }\n                if (event._responsiveCurrentSize !== responsiveWidth) {\n                    event._responsiveCurrentSize = responsiveWidth;\n                    functions.setToolbarButtons(event._responsiveButtons[responsiveWidth]);\n                }\n            }\n        },\n        /**\r\n         * @description Set the char count to charCounter element textContent.\r\n         * @private\r\n         */ _setCharCount: function() {\n            if (context.element.charCounter) {\n                _w.setTimeout((function(functions, options) {\n                    if (this.textContent && functions) {\n                        this.textContent = functions.getCharCount(options.charCounterType);\n                    }\n                }).bind(context.element.charCounter, functions, options), 0);\n            }\n        },\n        /**\r\n         * @description The character counter blinks.\r\n         * @private\r\n         */ _callCounterBlink: function() {\n            const charWrapper = context.element.charWrapper;\n            if (charWrapper && !util.hasClass(charWrapper, \"se-blink\")) {\n                util.addClass(charWrapper, \"se-blink\");\n                _w.setTimeout(function() {\n                    util.removeClass(charWrapper, \"se-blink\");\n                }, 600);\n            }\n        },\n        /**\r\n         * @description Check the components such as image and video and modify them according to the format.\r\n         * @private\r\n         */ _checkComponents: function() {\n            for(let i = 0, len = this._fileInfoPluginsCheck.length; i < len; i++){\n                this._fileInfoPluginsCheck[i]();\n            }\n        },\n        /**\r\n         * @description Initialize the information of the components.\r\n         * @private\r\n         */ _resetComponents: function() {\n            for(let i = 0, len = this._fileInfoPluginsReset.length; i < len; i++){\n                this._fileInfoPluginsReset[i]();\n            }\n        },\n        /**\r\n         * @description Set method in the code view area\r\n         * @param {String} value HTML string\r\n         * @private\r\n         */ _setCodeView: function(value) {\n            if (options.codeMirrorEditor) {\n                options.codeMirrorEditor.getDoc().setValue(value);\n            } else {\n                context.element.code.value = value;\n            }\n        },\n        /**\r\n         * @description Get method in the code view area\r\n         * @private\r\n         */ _getCodeView: function() {\n            return options.codeMirrorEditor ? options.codeMirrorEditor.getDoc().getValue() : context.element.code.value;\n        },\n        /**\r\n         * @description remove class, display text.\r\n         * @param {Array|null} ignoredList Igonred button list\r\n         */ _setKeyEffect: function(ignoredList) {\n            const commandMap = this.commandMap;\n            const activePlugins = this.activePlugins;\n            for(let key in commandMap){\n                if (ignoredList.indexOf(key) > -1 || !util.hasOwn(commandMap, key)) continue;\n                if (activePlugins.indexOf(key) > -1) {\n                    plugins[key].active.call(this, null);\n                } else if (commandMap.OUTDENT && /^OUTDENT$/i.test(key)) {\n                    if (!util.isImportantDisabled(commandMap.OUTDENT)) commandMap.OUTDENT.setAttribute(\"disabled\", true);\n                } else if (commandMap.INDENT && /^INDENT$/i.test(key)) {\n                    if (!util.isImportantDisabled(commandMap.INDENT)) commandMap.INDENT.removeAttribute(\"disabled\");\n                } else {\n                    util.removeClass(commandMap[key], \"active\");\n                }\n            }\n        },\n        /**\r\n         * @description Initializ core variable\r\n         * @param {Boolean} reload Is relooad?\r\n         * @param {String} _initHTML initial html string\r\n         * @private\r\n         */ _init: function(reload, _initHTML) {\n            const wRegExp = _w.RegExp;\n            this._ww = options.iframe ? context.element.wysiwygFrame.contentWindow : _w;\n            this._wd = _d;\n            this._charTypeHTML = options.charCounterType === \"byte-html\";\n            this.wwComputedStyle = _w.getComputedStyle(context.element.wysiwyg);\n            this._editorHeight = context.element.wysiwygFrame.offsetHeight;\n            this._editorHeightPadding = util.getNumber(this.wwComputedStyle.getPropertyValue(\"padding-top\")) + util.getNumber(this.wwComputedStyle.getPropertyValue(\"padding-bottom\"));\n            this._classNameFilter = (function(v) {\n                return this.test(v) ? v : \"\";\n            }).bind(options.allowedClassNames);\n            const sPrefix = options.__allowedScriptTag ? \"\" : \"script|\";\n            this.__scriptTagRegExp = new wRegExp(\"<(script)[^>]*>([\\\\s\\\\S]*?)<\\\\/\\\\1>|<script[^>]*\\\\/?>\", \"gi\");\n            this.__disallowedTagsRegExp = new wRegExp(\"<(\" + sPrefix + \"style)[^>]*>([\\\\s\\\\S]*?)<\\\\/\\\\1>|<(\" + sPrefix + \"style)[^>]*\\\\/?>\", \"gi\");\n            this.__disallowedTagNameRegExp = new wRegExp(\"^(\" + sPrefix + \"meta|link|style|[a-z]+:[a-z]+)$\", \"i\");\n            this.__allowedScriptRegExp = new wRegExp(\"^\" + (options.__allowedScriptTag ? \"script\" : \"\") + \"$\", \"i\");\n            if (!options.iframe && typeof _w.ShadowRoot === \"function\") {\n                let child = context.element.wysiwygFrame;\n                while(child){\n                    if (child.shadowRoot) {\n                        this._shadowRoot = child.shadowRoot;\n                        break;\n                    } else if (child instanceof _w.ShadowRoot) {\n                        this._shadowRoot = child;\n                        break;\n                    }\n                    child = child.parentNode;\n                }\n                if (this._shadowRoot) this._shadowRootControllerEventTarget = [];\n            }\n            // set disallow text nodes\n            const disallowTextTags = _w.Object.keys(options._textTagsMap);\n            const allowTextTags = !options.addTagsWhitelist ? [] : options.addTagsWhitelist.split(\"|\").filter(function(v) {\n                return /b|i|ins|s|strike/i.test(v);\n            });\n            for(let i = 0; i < allowTextTags.length; i++){\n                disallowTextTags.splice(disallowTextTags.indexOf(allowTextTags[i].toLowerCase()), 1);\n            }\n            this._disallowedTextTagsRegExp = disallowTextTags.length === 0 ? null : new wRegExp(\"(<\\\\/?)(\" + disallowTextTags.join(\"|\") + \")\\\\b\\\\s*([^>^<]+)?\\\\s*(?=>)\", \"gi\");\n            // set whitelist\n            const getRegList = function(str, str2) {\n                return !str ? \"^\" : str === \"*\" ? \"[a-z-]+\" : !str2 ? str : str + \"|\" + str2;\n            };\n            // tags\n            const videoAttr = \"|controls|autoplay|loop|muted|poster|preload|playsinline\";\n            const iframeAttr = \"|allowfullscreen|sandbox|loading|allow|referrerpolicy|frameborder|scrolling\";\n            const defaultAttr = \"contenteditable|colspan|rowspan|target|href|download|rel|src|alt|class|type|origin-size\" + videoAttr + iframeAttr;\n            const dataAttr = \"data-format|data-size|data-file-size|data-file-name|data-origin|data-align|data-image-link|data-rotate|data-proportion|data-percentage|data-exp|data-font-size\";\n            this._allowHTMLComments = options._editorTagsWhitelist.indexOf(\"//\") > -1 || options._editorTagsWhitelist === \"*\";\n            // html check\n            this._htmlCheckWhitelistRegExp = new wRegExp(\"^(\" + getRegList(options._editorTagsWhitelist.replace(\"|//\", \"\"), \"\") + \")$\", \"i\");\n            this._htmlCheckBlacklistRegExp = new wRegExp(\"^(\" + (options.tagsBlacklist || \"^\") + \")$\", \"i\");\n            // tags\n            this.editorTagsWhitelistRegExp = util.createTagsWhitelist(getRegList(options._editorTagsWhitelist.replace(\"|//\", \"|<!--|-->\"), \"\"));\n            this.editorTagsBlacklistRegExp = util.createTagsBlacklist(options.tagsBlacklist.replace(\"|//\", \"|<!--|-->\"));\n            // paste tags\n            this.pasteTagsWhitelistRegExp = util.createTagsWhitelist(getRegList(options.pasteTagsWhitelist, \"\"));\n            this.pasteTagsBlacklistRegExp = util.createTagsBlacklist(options.pasteTagsBlacklist);\n            // attributes\n            const regEndStr = '\\\\s*=\\\\s*(\")[^\"]*\\\\1';\n            const _wAttr = options.attributesWhitelist;\n            let tagsAttr = {};\n            let allAttr = \"\";\n            if (!!_wAttr) {\n                for(let k in _wAttr){\n                    if (!util.hasOwn(_wAttr, k) || /^on[a-z]+$/i.test(_wAttr[k])) continue;\n                    if (k === \"all\") {\n                        allAttr = getRegList(_wAttr[k], defaultAttr);\n                    } else {\n                        tagsAttr[k] = new wRegExp(\"\\\\s(?:\" + getRegList(_wAttr[k], \"\") + \")\" + regEndStr, \"ig\");\n                    }\n                }\n            }\n            this._attributesWhitelistRegExp = new wRegExp(\"\\\\s(?:\" + (allAttr || defaultAttr + \"|\" + dataAttr) + \")\" + regEndStr, \"ig\");\n            this._attributesWhitelistRegExp_all_data = new wRegExp(\"\\\\s(?:\" + ((allAttr || defaultAttr) + \"|data-[a-z0-9\\\\-]+\") + \")\" + regEndStr, \"ig\");\n            this._attributesTagsWhitelist = tagsAttr;\n            // blacklist\n            const _bAttr = options.attributesBlacklist;\n            tagsAttr = {};\n            allAttr = \"\";\n            if (!!_bAttr) {\n                for(let k in _bAttr){\n                    if (!util.hasOwn(_bAttr, k)) continue;\n                    if (k === \"all\") {\n                        allAttr = getRegList(_bAttr[k], \"\");\n                    } else {\n                        tagsAttr[k] = new wRegExp(\"\\\\s(?:\" + getRegList(_bAttr[k], \"\") + \")\" + regEndStr, \"ig\");\n                    }\n                }\n            }\n            this._attributesBlacklistRegExp = new wRegExp(\"\\\\s(?:\" + (allAttr || \"^\") + \")\" + regEndStr, \"ig\");\n            this._attributesTagsBlacklist = tagsAttr;\n            // set modes\n            this._isInline = /inline/i.test(options.mode);\n            this._isBalloon = /balloon|balloon-always/i.test(options.mode);\n            this._isBalloonAlways = /balloon-always/i.test(options.mode);\n            // caching buttons\n            this._cachingButtons();\n            // file components\n            this._fileInfoPluginsCheck = [];\n            this._fileInfoPluginsReset = [];\n            // text components\n            this.managedTagsInfo = {\n                query: \"\",\n                map: {}\n            };\n            const managedClass = [];\n            // Command and file plugins registration\n            this.activePlugins = [];\n            this._fileManager.tags = [];\n            this._fileManager.pluginMap = {};\n            let filePluginRegExp = [];\n            let plugin, button;\n            for(let key in plugins){\n                if (!util.hasOwn(plugins, key)) continue;\n                plugin = plugins[key];\n                button = pluginCallButtons[key];\n                if ((plugin.active || plugin.action) && button) {\n                    this.callPlugin(key, null, button);\n                }\n                if (typeof plugin.checkFileInfo === \"function\" && typeof plugin.resetFileInfo === \"function\") {\n                    this.callPlugin(key, null, button);\n                    this._fileInfoPluginsCheck.push(plugin.checkFileInfo.bind(this));\n                    this._fileInfoPluginsReset.push(plugin.resetFileInfo.bind(this));\n                }\n                if (_w.Array.isArray(plugin.fileTags)) {\n                    const fileTags = plugin.fileTags;\n                    this.callPlugin(key, null, button);\n                    this._fileManager.tags = this._fileManager.tags.concat(fileTags);\n                    filePluginRegExp.push(key);\n                    for(let tag = 0, tLen = fileTags.length; tag < tLen; tag++){\n                        this._fileManager.pluginMap[fileTags[tag].toLowerCase()] = key;\n                    }\n                }\n                if (plugin.managedTags) {\n                    const info = plugin.managedTags();\n                    managedClass.push(\".\" + info.className);\n                    this.managedTagsInfo.map[info.className] = info.method.bind(this);\n                }\n            }\n            this.managedTagsInfo.query = managedClass.toString();\n            this._fileManager.queryString = this._fileManager.tags.join(\",\");\n            this._fileManager.regExp = new wRegExp(\"^(\" + (this._fileManager.tags.join(\"|\") || \"^\") + \")$\", \"i\");\n            this._fileManager.pluginRegExp = new wRegExp(\"^(\" + (filePluginRegExp.length === 0 ? \"^\" : filePluginRegExp.join(\"|\")) + \")$\", \"i\");\n            // cache editor's element\n            this._variable._originCssText = context.element.topArea.style.cssText;\n            this._placeholder = context.element.placeholder;\n            this._lineBreaker = context.element.lineBreaker;\n            this._lineBreakerButton = this._lineBreaker.querySelector(\"button\");\n            // Excute history function\n            this.history = (0,_history__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, this._onChange_historyStack.bind(this));\n            // register notice module\n            this.addModule([\n                _plugins_modules_notice__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n            ]);\n            // Init, validate\n            if (options.iframe) {\n                this._wd = context.element.wysiwygFrame.contentDocument;\n                context.element.wysiwyg = this._wd.body;\n                if (options._editorStyles.editor) context.element.wysiwyg.style.cssText = options._editorStyles.editor;\n                if (options.height === \"auto\") this._iframeAuto = this._wd.body;\n            }\n            this._initWysiwygArea(reload, _initHTML);\n        },\n        /**\r\n         * @description Caching basic buttons to use\r\n         * @private\r\n         */ _cachingButtons: function() {\n            this.codeViewDisabledButtons = context.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~=\"se-code-view-enabled\"]):not([data-display=\"MORE\"])');\n            this.resizingDisabledButtons = context.element._buttonTray.querySelectorAll('.se-menu-list button[data-display]:not([class~=\"se-resizing-enabled\"]):not([data-display=\"MORE\"])');\n            const tool = context.tool;\n            const commandMap = this.commandMap;\n            commandMap.INDENT = tool.indent;\n            commandMap.OUTDENT = tool.outdent;\n            commandMap[options.textTags.bold.toUpperCase()] = tool.bold;\n            commandMap[options.textTags.underline.toUpperCase()] = tool.underline;\n            commandMap[options.textTags.italic.toUpperCase()] = tool.italic;\n            commandMap[options.textTags.strike.toUpperCase()] = tool.strike;\n            commandMap[options.textTags.sub.toUpperCase()] = tool.subscript;\n            commandMap[options.textTags.sup.toUpperCase()] = tool.superscript;\n            this._styleCommandMap = {\n                fullScreen: tool.fullScreen,\n                showBlocks: tool.showBlocks,\n                codeView: tool.codeView\n            };\n            this._saveButtonStates();\n        },\n        /**\r\n         * @description Initializ wysiwyg area (Only called from core._init)\r\n         * @param {Boolean} reload Is relooad?\r\n         * @param {String} _initHTML initial html string\r\n         * @private\r\n         */ _initWysiwygArea: function(reload, _initHTML) {\n            context.element.wysiwyg.innerHTML = reload ? _initHTML : this.convertContentsForEditor((typeof _initHTML === \"string\" ? _initHTML : /^TEXTAREA$/i.test(context.element.originElement.nodeName) ? context.element.originElement.value : context.element.originElement.innerHTML) || \"\");\n        },\n        /**\r\n         * @description Called when there are changes to tags in the wysiwyg region.\r\n         * @private\r\n         */ _resourcesStateChange: function() {\n            this._iframeAutoHeight();\n            this._checkPlaceholder();\n        },\n        /**\r\n         * @description Called when after execute \"history.push\"\r\n         * @private\r\n         */ _onChange_historyStack: function() {\n            if (this.hasFocus) event._applyTagEffects();\n            this._variable.isChanged = true;\n            if (context.tool.save) context.tool.save.removeAttribute(\"disabled\");\n            // user event\n            if (functions.onChange) functions.onChange(this.getContents(true), this);\n            if (context.element.toolbar.style.display === \"block\") event._showToolbarBalloon();\n        },\n        /**\r\n         * @description Modify the height value of the iframe when the height of the iframe is automatic.\r\n         * @private\r\n         */ _iframeAutoHeight: function() {\n            if (this._iframeAuto) {\n                _w.setTimeout(function() {\n                    const h = core._iframeAuto.offsetHeight;\n                    context.element.wysiwygFrame.style.height = h + \"px\";\n                    if (!util.isResizeObserverSupported) core.__callResizeFunction(h, null);\n                });\n            } else if (!util.isResizeObserverSupported) {\n                core.__callResizeFunction(context.element.wysiwygFrame.offsetHeight, null);\n            }\n        },\n        __callResizeFunction: function(h, resizeObserverEntry) {\n            h = h === -1 ? resizeObserverEntry.borderBoxSize && resizeObserverEntry.borderBoxSize[0] ? resizeObserverEntry.borderBoxSize[0].blockSize : resizeObserverEntry.contentRect.height + this._editorHeightPadding : h;\n            if (this._editorHeight !== h) {\n                if (typeof functions.onResizeEditor === \"function\") functions.onResizeEditor(h, this._editorHeight, core, resizeObserverEntry);\n                this._editorHeight = h;\n            }\n        },\n        /**\r\n         * @description Set display property when there is placeholder.\r\n         * @private\r\n         */ _checkPlaceholder: function() {\n            if (this._placeholder) {\n                if (this._variable.isCodeView) {\n                    this._placeholder.style.display = \"none\";\n                    return;\n                }\n                const wysiwyg = context.element.wysiwyg;\n                if (!util.onlyZeroWidthSpace(wysiwyg.textContent) || wysiwyg.querySelector(util._allowedEmptyNodeList) || (wysiwyg.innerText.match(/\\n/g) || \"\").length > 1) {\n                    this._placeholder.style.display = \"none\";\n                } else {\n                    this._placeholder.style.display = \"block\";\n                }\n            }\n        },\n        /**\r\n         * @description If there is no default format, add a format and move \"selection\".\r\n         * @param {String|null} formatName Format tag name (default: 'P')\r\n         * @returns {undefined|null}\r\n         * @private\r\n         */ _setDefaultFormat: function(formatName) {\n            if (this._fileManager.pluginRegExp.test(this.currentControllerName)) return;\n            const range = this.getRange();\n            const commonCon = range.commonAncestorContainer;\n            const startCon = range.startContainer;\n            const rangeEl = util.getRangeFormatElement(commonCon, null);\n            let focusNode, offset, format;\n            const fileComponent = util.getParentElement(commonCon, util.isComponent);\n            if (fileComponent && !util.isTable(fileComponent)) {\n                return;\n            } else if (commonCon.nodeType === 1 && commonCon.getAttribute(\"data-se-embed\") === \"true\") {\n                let el = commonCon.nextElementSibling;\n                if (!util.isFormatElement(el)) el = this.appendFormatTag(commonCon, options.defaultTag);\n                this.setRange(el.firstChild, 0, el.firstChild, 0);\n                return;\n            }\n            if ((util.isRangeFormatElement(startCon) || util.isWysiwygDiv(startCon)) && (util.isComponent(startCon.children[range.startOffset]) || util.isComponent(startCon.children[range.startOffset - 1]))) return;\n            if (util.getParentElement(commonCon, util.isNotCheckingNode)) return null;\n            if (rangeEl) {\n                format = util.createElement(formatName || options.defaultTag);\n                format.innerHTML = rangeEl.innerHTML;\n                if (format.childNodes.length === 0) format.innerHTML = util.zeroWidthSpace;\n                rangeEl.innerHTML = format.outerHTML;\n                format = rangeEl.firstChild;\n                focusNode = util.getEdgeChildNodes(format, null).sc;\n                if (!focusNode) {\n                    focusNode = util.createTextNode(util.zeroWidthSpace);\n                    format.insertBefore(focusNode, format.firstChild);\n                }\n                offset = focusNode.textContent.length;\n                this.setRange(focusNode, offset, focusNode, offset);\n                return;\n            }\n            if (util.isRangeFormatElement(commonCon) && commonCon.childNodes.length <= 1) {\n                let br = null;\n                if (commonCon.childNodes.length === 1 && util.isBreak(commonCon.firstChild)) {\n                    br = commonCon.firstChild;\n                } else {\n                    br = util.createTextNode(util.zeroWidthSpace);\n                    commonCon.appendChild(br);\n                }\n                this.setRange(br, 1, br, 1);\n                return;\n            }\n            try {\n                if (commonCon.nodeType === 3) {\n                    format = util.createElement(formatName || options.defaultTag);\n                    commonCon.parentNode.insertBefore(format, commonCon);\n                    format.appendChild(commonCon);\n                }\n                if (util.isBreak(format.nextSibling)) util.removeItem(format.nextSibling);\n                if (util.isBreak(format.previousSibling)) util.removeItem(format.previousSibling);\n                if (util.isBreak(focusNode)) {\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    focusNode.parentNode.insertBefore(zeroWidth, focusNode);\n                    focusNode = zeroWidth;\n                }\n            } catch (e) {\n                this.execCommand(\"formatBlock\", false, formatName || options.defaultTag);\n                this.removeRange();\n                this._editorRange();\n            }\n            if (format) {\n                if (util.isBreak(format.nextSibling)) util.removeItem(format.nextSibling);\n                if (util.isBreak(format.previousSibling)) util.removeItem(format.previousSibling);\n                if (util.isBreak(focusNode)) {\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    focusNode.parentNode.insertBefore(zeroWidth, focusNode);\n                    focusNode = zeroWidth;\n                }\n            }\n            this.effectNode = null;\n            this.nativeFocus();\n        },\n        /**\r\n         * @description Initialization after \"setOptions\"\r\n         * @param {Object} el context.element\r\n         * @param {String} _initHTML Initial html string\r\n         * @private\r\n         */ _setOptionsInit: function(el, _initHTML) {\n            this.context = context = (0,_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(el.originElement, this._getConstructed(el), options);\n            this._componentsInfoReset = true;\n            this._editorInit(true, _initHTML);\n        },\n        /**\r\n         * @description Initializ editor\r\n         * @param {Boolean} reload Is relooad?\r\n         * @param {String} _initHTML initial html string\r\n         * @private\r\n         */ _editorInit: function(reload, _initHTML) {\n            // initialize core and add event listeners\n            this._init(reload, _initHTML);\n            event._addEvent();\n            this._setCharCount();\n            event._offStickyToolbar();\n            event.onResize_window();\n            // toolbar visibility\n            context.element.toolbar.style.visibility = \"\";\n            // wisywig attributes\n            const attr = options.frameAttrbutes;\n            for(let k in attr){\n                context.element.wysiwyg.setAttribute(k, attr[k]);\n            }\n            this._checkComponents();\n            this._componentsInfoInit = false;\n            this._componentsInfoReset = false;\n            this.history.reset(true);\n            _w.setTimeout(function() {\n                if (typeof core._resourcesStateChange !== \"function\") return;\n                // observer\n                if (event._resizeObserver) event._resizeObserver.observe(context.element.wysiwygFrame);\n                if (event._toolbarObserver) event._toolbarObserver.observe(context.element._toolbarShadow);\n                // resource state\n                core._resourcesStateChange();\n                // user event\n                if (typeof functions.onload === \"function\") functions.onload(core, reload);\n            });\n        },\n        /**\r\n         * @description Create and return an object to cache the new context.\r\n         * @param {Element} contextEl context.element\r\n         * @returns {Object}\r\n         * @private\r\n         */ _getConstructed: function(contextEl) {\n            return {\n                _top: contextEl.topArea,\n                _relative: contextEl.relative,\n                _toolBar: contextEl.toolbar,\n                _toolbarShadow: contextEl._toolbarShadow,\n                _menuTray: contextEl._menuTray,\n                _editorArea: contextEl.editorArea,\n                _wysiwygArea: contextEl.wysiwygFrame,\n                _codeArea: contextEl.code,\n                _placeholder: contextEl.placeholder,\n                _resizingBar: contextEl.resizingBar,\n                _navigation: contextEl.navigation,\n                _charCounter: contextEl.charCounter,\n                _charWrapper: contextEl.charWrapper,\n                _loading: contextEl.loading,\n                _lineBreaker: contextEl.lineBreaker,\n                _lineBreaker_t: contextEl.lineBreaker_t,\n                _lineBreaker_b: contextEl.lineBreaker_b,\n                _resizeBack: contextEl.resizeBackground,\n                _stickyDummy: contextEl._stickyDummy,\n                _arrow: contextEl._arrow\n            };\n        }\n    };\n    /**\r\n     * @description event function\r\n     */ const event = {\n        _IEisComposing: false,\n        _lineBreakerBind: null,\n        _responsiveCurrentSize: \"default\",\n        _responsiveButtonSize: null,\n        _responsiveButtons: null,\n        _cursorMoveKeyCode: new _w.RegExp(\"^(8|3[2-9]|40|46)$\"),\n        _directionKeyCode: new _w.RegExp(\"^(8|13|3[2-9]|40|46)$\"),\n        _nonTextKeyCode: new _w.RegExp(\"^(8|13|1[6-9]|20|27|3[3-9]|40|45|46|11[2-9]|12[0-3]|144|145)$\"),\n        _historyIgnoreKeyCode: new _w.RegExp(\"^(1[6-9]|20|27|3[3-9]|40|45|11[2-9]|12[0-3]|144|145)$\"),\n        _onButtonsCheck: new _w.RegExp(\"^(\" + _w.Object.keys(options._textTagsMap).join(\"|\") + \")$\", \"i\"),\n        _frontZeroWidthReg: new _w.RegExp(util.zeroWidthSpace + \"+\", \"\"),\n        _keyCodeShortcut: {\n            65: \"A\",\n            66: \"B\",\n            83: \"S\",\n            85: \"U\",\n            73: \"I\",\n            89: \"Y\",\n            90: \"Z\",\n            219: \"[\",\n            221: \"]\"\n        },\n        _shortcutCommand: function(keyCode, shift) {\n            let command = null;\n            const keyStr = event._keyCodeShortcut[keyCode];\n            switch(keyStr){\n                case \"A\":\n                    command = \"selectAll\";\n                    break;\n                case \"B\":\n                    if (options.shortcutsDisable.indexOf(\"bold\") === -1) {\n                        command = \"bold\";\n                    }\n                    break;\n                case \"S\":\n                    if (shift && options.shortcutsDisable.indexOf(\"strike\") === -1) {\n                        command = \"strike\";\n                    } else if (!shift && options.shortcutsDisable.indexOf(\"save\") === -1) {\n                        command = \"save\";\n                    }\n                    break;\n                case \"U\":\n                    if (options.shortcutsDisable.indexOf(\"underline\") === -1) {\n                        command = \"underline\";\n                    }\n                    break;\n                case \"I\":\n                    if (options.shortcutsDisable.indexOf(\"italic\") === -1) {\n                        command = \"italic\";\n                    }\n                    break;\n                case \"Z\":\n                    if (options.shortcutsDisable.indexOf(\"undo\") === -1) {\n                        if (shift) {\n                            command = \"redo\";\n                        } else {\n                            command = \"undo\";\n                        }\n                    }\n                    break;\n                case \"Y\":\n                    if (options.shortcutsDisable.indexOf(\"undo\") === -1) {\n                        command = \"redo\";\n                    }\n                    break;\n                case \"[\":\n                    if (options.shortcutsDisable.indexOf(\"indent\") === -1) {\n                        command = options.rtl ? \"indent\" : \"outdent\";\n                    }\n                    break;\n                case \"]\":\n                    if (options.shortcutsDisable.indexOf(\"indent\") === -1) {\n                        command = options.rtl ? \"outdent\" : \"indent\";\n                    }\n                    break;\n            }\n            if (!command) return !!keyStr;\n            core.commandHandler(core.commandMap[command], command);\n            return true;\n        },\n        _applyTagEffects: function() {\n            if (util.hasClass(context.element.wysiwyg, \"se-read-only\")) {\n                return false;\n            }\n            let selectionNode = core.getSelectionNode();\n            if (selectionNode === core.effectNode) return;\n            core.effectNode = selectionNode;\n            const marginDir = options.rtl ? \"marginRight\" : \"marginLeft\";\n            const commandMap = core.commandMap;\n            const classOnCheck = event._onButtonsCheck;\n            const commandMapNodes = [];\n            const currentNodes = [];\n            const activePlugins = core.activePlugins;\n            const cLen = activePlugins.length;\n            let nodeName = \"\";\n            while(selectionNode.firstChild){\n                selectionNode = selectionNode.firstChild;\n            }\n            for(let element = selectionNode; !util.isWysiwygDiv(element); element = element.parentNode){\n                if (!element) break;\n                if (element.nodeType !== 1 || util.isBreak(element)) continue;\n                nodeName = element.nodeName.toUpperCase();\n                currentNodes.push(nodeName);\n                /* Active plugins */ if (!core.isReadOnly) {\n                    for(let c = 0, name; c < cLen; c++){\n                        name = activePlugins[c];\n                        if (commandMapNodes.indexOf(name) === -1 && plugins[name].active.call(core, element)) {\n                            commandMapNodes.push(name);\n                        }\n                    }\n                }\n                if (util.isFormatElement(element)) {\n                    /* Outdent */ if (commandMapNodes.indexOf(\"OUTDENT\") === -1 && commandMap.OUTDENT && !util.isImportantDisabled(commandMap.OUTDENT)) {\n                        if (util.isListCell(element) || element.style[marginDir] && util.getNumber(element.style[marginDir], 0) > 0) {\n                            commandMapNodes.push(\"OUTDENT\");\n                            commandMap.OUTDENT.removeAttribute(\"disabled\");\n                        }\n                    }\n                    /* Indent */ if (commandMapNodes.indexOf(\"INDENT\") === -1 && commandMap.INDENT && !util.isImportantDisabled(commandMap.INDENT)) {\n                        commandMapNodes.push(\"INDENT\");\n                        if (util.isListCell(element) && !element.previousElementSibling) {\n                            commandMap.INDENT.setAttribute(\"disabled\", true);\n                        } else {\n                            commandMap.INDENT.removeAttribute(\"disabled\");\n                        }\n                    }\n                    continue;\n                }\n                /** default active buttons [strong, ins, em, del, sub, sup] */ if (classOnCheck && classOnCheck.test(nodeName)) {\n                    commandMapNodes.push(nodeName);\n                    util.addClass(commandMap[nodeName], \"active\");\n                }\n            }\n            core._setKeyEffect(commandMapNodes);\n            /** save current nodes */ core._variable.currentNodes = currentNodes.reverse();\n            core._variable.currentNodesMap = commandMapNodes;\n            /**  Displays the current node structure to resizingBar */ if (options.showPathLabel) context.element.navigation.textContent = core._variable.currentNodes.join(\" > \");\n        },\n        _buttonsEventHandler: function(e) {\n            let target = e.target;\n            if (core._bindControllersOff) e.stopPropagation();\n            if (/^(input|textarea|select|option)$/i.test(target.nodeName)) {\n                core._antiBlur = false;\n            } else {\n                e.preventDefault();\n            }\n            if (util.getParentElement(target, \".se-submenu\")) {\n                e.stopPropagation();\n                core._notHideToolbar = true;\n            } else {\n                let command = target.getAttribute(\"data-command\");\n                let className = target.className;\n                while(!command && !/se-menu-list/.test(className) && !/sun-editor-common/.test(className)){\n                    target = target.parentNode;\n                    command = target.getAttribute(\"data-command\");\n                    className = target.className;\n                }\n                if (command === core._submenuName || command === core._containerName) {\n                    e.stopPropagation();\n                }\n            }\n        },\n        addGlobalEvent (type, listener, useCapture) {\n            if (options.iframe) {\n                core._ww.addEventListener(type, listener, useCapture);\n            }\n            core._w.addEventListener(type, listener, useCapture);\n            return {\n                type: type,\n                listener: listener,\n                useCapture: useCapture\n            };\n        },\n        removeGlobalEvent (type, listener, useCapture) {\n            if (!type) return;\n            if (typeof type === \"object\") {\n                listener = type.listener;\n                useCapture = type.useCapture;\n                type = type.type;\n            }\n            if (options.iframe) {\n                core._ww.removeEventListener(type, listener, useCapture);\n            }\n            core._w.removeEventListener(type, listener, useCapture);\n        },\n        onClick_toolbar: function(e) {\n            let target = e.target;\n            let display = target.getAttribute(\"data-display\");\n            let command = target.getAttribute(\"data-command\");\n            let className = target.className;\n            core.controllersOff();\n            while(target.parentNode && !command && !/se-menu-list/.test(className) && !/se-toolbar/.test(className)){\n                target = target.parentNode;\n                command = target.getAttribute(\"data-command\");\n                display = target.getAttribute(\"data-display\");\n                className = target.className;\n            }\n            if (!command && !display) return;\n            if (target.disabled) return;\n            core.actionCall(command, display, target);\n        },\n        __selectionSyncEvent: null,\n        onMouseDown_wysiwyg: function(e) {\n            if (core.isReadOnly || util.isNonEditable(context.element.wysiwyg)) return;\n            if (util._isExcludeSelectionElement(e.target)) {\n                e.preventDefault();\n                return;\n            }\n            event.removeGlobalEvent(event.__selectionSyncEvent);\n            event.__selectionSyncEvent = event.addGlobalEvent(\"mouseup\", function() {\n                core._editorRange();\n                event.removeGlobalEvent(event.__selectionSyncEvent);\n            });\n            // user event\n            if (typeof functions.onMouseDown === \"function\" && functions.onMouseDown(e, core) === false) return;\n            const tableCell = util.getParentElement(e.target, util.isCell);\n            if (tableCell) {\n                const tablePlugin = core.plugins.table;\n                if (tablePlugin && tableCell !== tablePlugin._fixedCell && !tablePlugin._shift) {\n                    core.callPlugin(\"table\", function() {\n                        tablePlugin.onTableCellMultiSelect.call(core, tableCell, false);\n                    }, null);\n                }\n            }\n            if (core._isBalloon) {\n                event._hideToolbar();\n            }\n        },\n        onClick_wysiwyg: function(e) {\n            // if (util.hasClass(context.element.wysiwyg, 'se-read-only')) {\n            //     e.preventDefault();\n            //     return false;\n            // }\n            const targetElement = e.target;\n            if (core.isReadOnly) {\n                e.preventDefault();\n                if (util.isAnchor(targetElement)) {\n                    _w.open(targetElement.href, targetElement.target);\n                }\n                return false;\n            }\n            if (util.isNonEditable(context.element.wysiwyg)) return;\n            // user event\n            if (typeof functions.onClick === \"function\" && functions.onClick(e, core) === false) return;\n            const fileComponentInfo = core.getFileComponent(targetElement);\n            if (fileComponentInfo) {\n                e.preventDefault();\n                core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName);\n                return;\n            }\n            const figcaption = util.getParentElement(targetElement, \"FIGCAPTION\");\n            if (figcaption && util.isNonEditable(figcaption)) {\n                e.preventDefault();\n                figcaption.focus();\n                if (core._isInline && !core._inlineToolbarAttr.isShow) {\n                    event._showToolbarInline();\n                    const hideToolbar = function() {\n                        event._hideToolbar();\n                        figcaption.removeEventListener(\"blur\", hideToolbar);\n                    };\n                    figcaption.addEventListener(\"blur\", hideToolbar);\n                }\n            }\n            core._editorRange();\n            if (e.detail === 3) {\n                let range = core.getRange();\n                if (util.isFormatElement(range.endContainer) && range.endOffset === 0) {\n                    range = core.setRange(range.startContainer, range.startOffset, range.startContainer, range.startContainer.length);\n                    core._rangeInfo(range, core.getSelection());\n                }\n            }\n            const selectionNode = core.getSelectionNode();\n            const formatEl = util.getFormatElement(selectionNode, null);\n            const rangeEl = util.getRangeFormatElement(selectionNode, null);\n            let selectionNodeDeepestFirstChild = selectionNode;\n            while(selectionNodeDeepestFirstChild.firstChild)selectionNodeDeepestFirstChild = selectionNodeDeepestFirstChild.firstChild;\n            const selectedComponentInfo = core.getFileComponent(selectionNodeDeepestFirstChild);\n            if (selectedComponentInfo) {\n                const range = core.getRange();\n                if (!rangeEl && range.startContainer === range.endContainer) core.selectComponent(selectedComponentInfo.target, selectedComponentInfo.pluginName);\n            } else if (core.currentFileComponentInfo) core.controllersOff();\n            if (!formatEl && !util.isNonEditable(targetElement) && !util.isList(rangeEl)) {\n                const range = core.getRange();\n                if (util.getFormatElement(range.startContainer) === util.getFormatElement(range.endContainer)) {\n                    if (util.isList(rangeEl)) {\n                        e.preventDefault();\n                        const oLi = util.createElement(\"LI\");\n                        const prevLi = selectionNode.nextElementSibling;\n                        oLi.appendChild(selectionNode);\n                        rangeEl.insertBefore(oLi, prevLi);\n                        core.focus();\n                    } else if (!util.isWysiwygDiv(selectionNode) && !util.isComponent(selectionNode) && (!util.isTable(selectionNode) || util.isCell(selectionNode)) && core._setDefaultFormat(util.isRangeFormatElement(rangeEl) ? \"DIV\" : options.defaultTag) !== null) {\n                        e.preventDefault();\n                        core.focus();\n                    } else {\n                        event._applyTagEffects();\n                    }\n                }\n            } else {\n                event._applyTagEffects();\n            }\n            if (core._isBalloon) _w.setTimeout(event._toggleToolbarBalloon);\n        },\n        _balloonDelay: null,\n        _showToolbarBalloonDelay: function() {\n            if (event._balloonDelay) {\n                _w.clearTimeout(event._balloonDelay);\n            }\n            event._balloonDelay = _w.setTimeout((function() {\n                _w.clearTimeout(this._balloonDelay);\n                this._balloonDelay = null;\n                this._showToolbarBalloon();\n            }).bind(event), 350);\n        },\n        _toggleToolbarBalloon: function() {\n            core._editorRange();\n            const range = core.getRange();\n            if (core._bindControllersOff || !core._isBalloonAlways && range.collapsed) event._hideToolbar();\n            else event._showToolbarBalloon(range);\n        },\n        _showToolbarBalloon: function(rangeObj) {\n            if (!core._isBalloon) return;\n            const range = rangeObj || core.getRange();\n            const toolbar = context.element.toolbar;\n            const topArea = context.element.topArea;\n            const selection = core.getSelection();\n            let isDirTop;\n            if (core._isBalloonAlways && range.collapsed) {\n                isDirTop = true;\n            } else if (selection.focusNode === selection.anchorNode) {\n                isDirTop = selection.focusOffset < selection.anchorOffset;\n            } else {\n                const childNodes = util.getListChildNodes(range.commonAncestorContainer, null);\n                isDirTop = util.getArrayIndex(childNodes, selection.focusNode) < util.getArrayIndex(childNodes, selection.anchorNode);\n            }\n            let rects = range.getClientRects();\n            rects = rects[isDirTop ? 0 : rects.length - 1];\n            const globalScroll = core.getGlobalScrollOffset();\n            let scrollLeft = globalScroll.left;\n            let scrollTop = globalScroll.top;\n            const editorWidth = topArea.offsetWidth;\n            const offsets = event._getEditorOffsets(null);\n            const stickyTop = offsets.top;\n            const editorLeft = offsets.left;\n            toolbar.style.top = \"-10000px\";\n            toolbar.style.visibility = \"hidden\";\n            toolbar.style.display = \"block\";\n            if (!rects) {\n                const node = core.getSelectionNode();\n                if (util.isFormatElement(node)) {\n                    const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                    core.insertNode(zeroWidth, null, false);\n                    core.setRange(zeroWidth, 1, zeroWidth, 1);\n                    core._editorRange();\n                    rects = core.getRange().getClientRects();\n                    rects = rects[isDirTop ? 0 : rects.length - 1];\n                }\n                if (!rects) {\n                    const nodeOffset = util.getOffset(node, context.element.wysiwygFrame);\n                    rects = {\n                        left: nodeOffset.left,\n                        top: nodeOffset.top,\n                        right: nodeOffset.left,\n                        bottom: nodeOffset.top + node.offsetHeight,\n                        noText: true\n                    };\n                    scrollLeft = 0;\n                    scrollTop = 0;\n                }\n                isDirTop = true;\n            }\n            const arrowMargin = _w.Math.round(context.element._arrow.offsetWidth / 2);\n            const toolbarWidth = toolbar.offsetWidth;\n            const toolbarHeight = toolbar.offsetHeight;\n            const iframeRects = /iframe/i.test(context.element.wysiwygFrame.nodeName) ? context.element.wysiwygFrame.getClientRects()[0] : null;\n            if (iframeRects) {\n                rects = {\n                    left: rects.left + iframeRects.left,\n                    top: rects.top + iframeRects.top,\n                    right: rects.right + iframeRects.right - iframeRects.width,\n                    bottom: rects.bottom + iframeRects.bottom - iframeRects.height\n                };\n            }\n            event._setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin);\n            if (toolbarWidth !== toolbar.offsetWidth || toolbarHeight !== toolbar.offsetHeight) {\n                event._setToolbarOffset(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin);\n            }\n            if (options.toolbarContainer) {\n                const editorParent = topArea.parentElement;\n                let container = options.toolbarContainer;\n                let left = container.offsetLeft;\n                let top = container.offsetTop;\n                while(!container.parentElement.contains(editorParent) || !/^(BODY|HTML)$/i.test(container.parentElement.nodeName)){\n                    container = container.offsetParent;\n                    left += container.offsetLeft;\n                    top += container.offsetTop;\n                }\n                toolbar.style.left = toolbar.offsetLeft - left + topArea.offsetLeft + \"px\";\n                toolbar.style.top = toolbar.offsetTop - top + topArea.offsetTop + \"px\";\n            }\n            toolbar.style.visibility = \"\";\n        },\n        _setToolbarOffset: function(isDirTop, rects, toolbar, editorLeft, editorWidth, scrollLeft, scrollTop, stickyTop, arrowMargin) {\n            const padding = 1;\n            const toolbarWidth = toolbar.offsetWidth;\n            const toolbarHeight = rects.noText && !isDirTop ? 0 : toolbar.offsetHeight;\n            const absoluteLeft = (isDirTop ? rects.left : rects.right) - editorLeft - toolbarWidth / 2 + scrollLeft;\n            const overRight = absoluteLeft + toolbarWidth - editorWidth;\n            let t = (isDirTop ? rects.top - toolbarHeight - arrowMargin : rects.bottom + arrowMargin) - (rects.noText ? 0 : stickyTop) + scrollTop;\n            let l = absoluteLeft < 0 ? padding : overRight < 0 ? absoluteLeft : absoluteLeft - overRight - padding - 1;\n            let resetTop = false;\n            const space = t + (isDirTop ? event._getEditorOffsets(null).top : toolbar.offsetHeight - context.element.wysiwyg.offsetHeight);\n            if (!isDirTop && space > 0 && event._getPageBottomSpace() < space) {\n                isDirTop = true;\n                resetTop = true;\n            } else if (isDirTop && _d.documentElement.offsetTop > space) {\n                isDirTop = false;\n                resetTop = true;\n            }\n            if (resetTop) t = (isDirTop ? rects.top - toolbarHeight - arrowMargin : rects.bottom + arrowMargin) - (rects.noText ? 0 : stickyTop) + scrollTop;\n            toolbar.style.left = _w.Math.floor(l) + \"px\";\n            toolbar.style.top = _w.Math.floor(t) + \"px\";\n            if (isDirTop) {\n                util.removeClass(context.element._arrow, \"se-arrow-up\");\n                util.addClass(context.element._arrow, \"se-arrow-down\");\n                context.element._arrow.style.top = toolbarHeight + \"px\";\n            } else {\n                util.removeClass(context.element._arrow, \"se-arrow-down\");\n                util.addClass(context.element._arrow, \"se-arrow-up\");\n                context.element._arrow.style.top = -arrowMargin + \"px\";\n            }\n            const arrow_left = _w.Math.floor(toolbarWidth / 2 + (absoluteLeft - l));\n            context.element._arrow.style.left = (arrow_left + arrowMargin > toolbar.offsetWidth ? toolbar.offsetWidth - arrowMargin : arrow_left < arrowMargin ? arrowMargin : arrow_left) + \"px\";\n        },\n        _showToolbarInline: function() {\n            if (!core._isInline) return;\n            const toolbar = context.element.toolbar;\n            if (options.toolbarContainer) toolbar.style.position = \"relative\";\n            else toolbar.style.position = \"absolute\";\n            toolbar.style.visibility = \"hidden\";\n            toolbar.style.display = \"block\";\n            core._inlineToolbarAttr.width = toolbar.style.width = options.toolbarWidth;\n            core._inlineToolbarAttr.top = toolbar.style.top = (options.toolbarContainer ? 0 : -1 - toolbar.offsetHeight) + \"px\";\n            if (typeof functions.showInline === \"function\") functions.showInline(toolbar, context, core);\n            event.onScroll_window();\n            core._inlineToolbarAttr.isShow = true;\n            toolbar.style.visibility = \"\";\n        },\n        _hideToolbar: function() {\n            if (!core._notHideToolbar && !core._variable.isFullScreen) {\n                context.element.toolbar.style.display = \"none\";\n                core._inlineToolbarAttr.isShow = false;\n            }\n        },\n        onInput_wysiwyg: function(e) {\n            if (/AUDIO/.test(e.target.nodeName)) return false;\n            if (core.isReadOnly || core.isDisabled) {\n                e.preventDefault();\n                e.stopPropagation();\n                core.history.go(core.history.getCurrentIndex());\n                return false;\n            }\n            core._editorRange();\n            const data = (e.data === null ? \"\" : e.data === undefined ? \" \" : e.data) || \"\";\n            if (!core._charCount(data)) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            // user event\n            if (typeof functions.onInput === \"function\" && functions.onInput(e, core) === false) return;\n            // history stack\n            core.history.push(true);\n        },\n        _isUneditableNode: function(range, isFront) {\n            const container = isFront ? range.startContainer : range.endContainer;\n            const offset = isFront ? range.startOffset : range.endOffset;\n            const siblingKey = isFront ? \"previousSibling\" : \"nextSibling\";\n            const isElement = container.nodeType === 1;\n            let siblingNode;\n            if (isElement) {\n                siblingNode = event._isUneditableNode_getSibling(container.childNodes[offset], siblingKey, container);\n                return siblingNode && siblingNode.nodeType === 1 && siblingNode.getAttribute(\"contenteditable\") === \"false\";\n            } else {\n                siblingNode = event._isUneditableNode_getSibling(container, siblingKey, container);\n                return core.isEdgePoint(container, offset, isFront ? \"front\" : \"end\") && siblingNode && siblingNode.nodeType === 1 && siblingNode.getAttribute(\"contenteditable\") === \"false\";\n            }\n        },\n        _isUneditableNode_getSibling: function(selectNode, siblingKey, container) {\n            if (!selectNode) return null;\n            let siblingNode = selectNode[siblingKey];\n            if (!siblingNode) {\n                siblingNode = util.getFormatElement(container);\n                siblingNode = siblingNode ? siblingNode[siblingKey] : null;\n                if (siblingNode && !util.isComponent(siblingNode)) siblingNode = siblingKey === \"previousSibling\" ? siblingNode.firstChild : siblingNode.lastChild;\n                else return null;\n            }\n            return siblingNode;\n        },\n        _onShortcutKey: false,\n        onKeyDown_wysiwyg: function(e) {\n            let selectionNode = core.getSelectionNode();\n            if (util.isInputElement(selectionNode)) return;\n            const keyCode = e.keyCode;\n            const shift = e.shiftKey;\n            const ctrl = e.ctrlKey || e.metaKey || keyCode === 91 || keyCode === 92 || keyCode === 224;\n            const alt = e.altKey;\n            event._IEisComposing = keyCode === 229;\n            if (!ctrl && core.isReadOnly && !event._cursorMoveKeyCode.test(keyCode)) {\n                e.preventDefault();\n                return false;\n            }\n            core.submenuOff();\n            if (core._isBalloon) {\n                event._hideToolbar();\n            }\n            // user event\n            if (typeof functions.onKeyDown === \"function\" && functions.onKeyDown(e, core) === false) return;\n            /** Shortcuts */ if (ctrl && event._shortcutCommand(keyCode, shift)) {\n                event._onShortcutKey = true;\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            } else if (event._onShortcutKey) {\n                event._onShortcutKey = false;\n            }\n            /** default key action */ const range = core.getRange();\n            const selectRange = !range.collapsed || range.startContainer !== range.endContainer;\n            const fileComponentName = core._fileManager.pluginRegExp.test(core.currentControllerName) ? core.currentControllerName : \"\";\n            let formatEl = util.getFormatElement(selectionNode, null) || selectionNode;\n            let rangeEl = util.getRangeFormatElement(formatEl, null);\n            const isArrowKey = /37|38|39|40/.test(e.keyCode);\n            if (isArrowKey && event._onKeyDown_wysiwyg_arrowKey(e) === false) return;\n            switch(keyCode){\n                case 8:\n                    /** backspace key */ if (!selectRange) {\n                        if (fileComponentName) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            core.plugins[fileComponentName].destroy.call(core);\n                            break;\n                        }\n                    }\n                    if (selectRange && event._hardDelete()) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    if (!util.isFormatElement(formatEl) && !context.element.wysiwyg.firstElementChild && !util.isComponent(selectionNode) && core._setDefaultFormat(options.defaultTag) !== null) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        return false;\n                    }\n                    if (!selectRange && !formatEl.previousElementSibling && range.startOffset === 0 && !selectionNode.previousSibling && !util.isListCell(formatEl) && util.isFormatElement(formatEl) && (!util.isFreeFormatElement(formatEl) || util.isClosureFreeFormatElement(formatEl))) {\n                        // closure range\n                        if (util.isClosureRangeFormatElement(formatEl.parentNode)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            return false;\n                        }\n                        // maintain default format\n                        if (util.isWysiwygDiv(formatEl.parentNode) && formatEl.childNodes.length <= 1 && (!formatEl.firstChild || util.onlyZeroWidthSpace(formatEl.textContent))) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            if (formatEl.nodeName.toUpperCase() === options.defaultTag.toUpperCase()) {\n                                formatEl.innerHTML = \"<br>\";\n                                const attrs = formatEl.attributes;\n                                while(attrs[0]){\n                                    formatEl.removeAttribute(attrs[0].name);\n                                }\n                            } else {\n                                const defaultFormat = util.createElement(options.defaultTag);\n                                defaultFormat.innerHTML = \"<br>\";\n                                formatEl.parentElement.replaceChild(defaultFormat, formatEl);\n                            }\n                            core.nativeFocus();\n                            return false;\n                        }\n                    }\n                    // clean remove tag\n                    const startCon = range.startContainer;\n                    if (formatEl && !formatEl.previousElementSibling && range.startOffset === 0 && startCon.nodeType === 3 && !util.isFormatElement(startCon.parentNode)) {\n                        let prev = startCon.parentNode.previousSibling;\n                        const next = startCon.parentNode.nextSibling;\n                        if (!prev) {\n                            if (!next) {\n                                prev = util.createElement(\"BR\");\n                                formatEl.appendChild(prev);\n                            } else {\n                                prev = next;\n                            }\n                        }\n                        let con = startCon;\n                        while(formatEl.contains(con) && !con.previousSibling){\n                            con = con.parentNode;\n                        }\n                        if (!formatEl.contains(con)) {\n                            startCon.textContent = \"\";\n                            util.removeItemAllParents(startCon, null, formatEl);\n                            break;\n                        }\n                    }\n                    // tag[contenteditable=\"false\"]\n                    if (event._isUneditableNode(range, true)) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    // format attributes\n                    if (!selectRange && core._isEdgeFormat(range.startContainer, range.startOffset, \"start\")) {\n                        if (util.isFormatElement(formatEl.previousElementSibling)) {\n                            core._formatAttrsTemp = formatEl.previousElementSibling.attributes;\n                        }\n                    }\n                    // nested list\n                    const commonCon = range.commonAncestorContainer;\n                    formatEl = util.getFormatElement(range.startContainer, null);\n                    rangeEl = util.getRangeFormatElement(formatEl, null);\n                    if (rangeEl && formatEl && !util.isCell(rangeEl) && !/^FIGCAPTION$/i.test(rangeEl.nodeName)) {\n                        if (util.isListCell(formatEl) && util.isList(rangeEl) && (util.isListCell(rangeEl.parentNode) || formatEl.previousElementSibling) && (selectionNode === formatEl || selectionNode.nodeType === 3 && (!selectionNode.previousSibling || util.isList(selectionNode.previousSibling))) && (util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null) ? rangeEl.contains(range.startContainer) : range.startOffset === 0 && range.collapsed)) {\n                            if (range.startContainer !== range.endContainer) {\n                                e.preventDefault();\n                                core.removeNode();\n                                if (range.startContainer.nodeType === 3) {\n                                    core.setRange(range.startContainer, range.startContainer.textContent.length, range.startContainer, range.startContainer.textContent.length);\n                                }\n                                // history stack\n                                core.history.push(true);\n                            } else {\n                                let prev = formatEl.previousElementSibling || rangeEl.parentNode;\n                                if (util.isListCell(prev)) {\n                                    e.preventDefault();\n                                    let prevLast = prev;\n                                    if (!prev.contains(formatEl) && util.isListCell(prevLast) && util.isList(prevLast.lastElementChild)) {\n                                        prevLast = prevLast.lastElementChild.lastElementChild;\n                                        while(util.isListCell(prevLast) && util.isList(prevLast.lastElementChild)){\n                                            prevLast = prevLast.lastElementChild && prevLast.lastElementChild.lastElementChild;\n                                        }\n                                        prev = prevLast;\n                                    }\n                                    let con = prev === rangeEl.parentNode ? rangeEl.previousSibling : prev.lastChild;\n                                    if (!con) {\n                                        con = util.createTextNode(util.zeroWidthSpace);\n                                        rangeEl.parentNode.insertBefore(con, rangeEl.parentNode.firstChild);\n                                    }\n                                    const offset = con.nodeType === 3 ? con.textContent.length : 1;\n                                    const children = formatEl.childNodes;\n                                    let after = con;\n                                    let child = children[0];\n                                    while(child = children[0]){\n                                        prev.insertBefore(child, after.nextSibling);\n                                        after = child;\n                                    }\n                                    util.removeItem(formatEl);\n                                    if (rangeEl.children.length === 0) util.removeItem(rangeEl);\n                                    core.setRange(con, offset, con, offset);\n                                    // history stack\n                                    core.history.push(true);\n                                }\n                            }\n                            break;\n                        }\n                        // detach range\n                        if (!selectRange && range.startOffset === 0) {\n                            let detach = true;\n                            let comm = commonCon;\n                            while(comm && comm !== rangeEl && !util.isWysiwygDiv(comm)){\n                                if (comm.previousSibling) {\n                                    if (comm.previousSibling.nodeType === 1 || !util.onlyZeroWidthSpace(comm.previousSibling.textContent.trim())) {\n                                        detach = false;\n                                        break;\n                                    }\n                                }\n                                comm = comm.parentNode;\n                            }\n                            if (detach && rangeEl.parentNode) {\n                                e.preventDefault();\n                                core.detachRangeFormatElement(rangeEl, util.isListCell(formatEl) ? [\n                                    formatEl\n                                ] : null, null, false, false);\n                                // history stack\n                                core.history.push(true);\n                                break;\n                            }\n                        }\n                    }\n                    // component\n                    if (!selectRange && formatEl && (range.startOffset === 0 || (selectionNode === formatEl ? !!formatEl.childNodes[range.startOffset] : false))) {\n                        const sel = selectionNode === formatEl ? formatEl.childNodes[range.startOffset] : selectionNode;\n                        const prev = formatEl.previousSibling;\n                        // select file component\n                        const ignoreZWS = (commonCon.nodeType === 3 || util.isBreak(commonCon)) && !commonCon.previousSibling && range.startOffset === 0;\n                        if (sel && !sel.previousSibling && (commonCon && util.isComponent(commonCon.previousSibling) || ignoreZWS && util.isComponent(prev))) {\n                            const fileComponentInfo = core.getFileComponent(prev);\n                            if (fileComponentInfo) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (formatEl.textContent.length === 0) util.removeItem(formatEl);\n                                if (core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName) === false) core.blur();\n                            } else if (util.isComponent(prev)) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                util.removeItem(prev);\n                            }\n                            break;\n                        }\n                        // delete nonEditable\n                        if (sel && util.isNonEditable(sel.previousSibling)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            util.removeItem(sel.previousSibling);\n                            break;\n                        }\n                    }\n                    break;\n                case 46:\n                    /** delete key */ if (fileComponentName) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        core.plugins[fileComponentName].destroy.call(core);\n                        break;\n                    }\n                    if (selectRange && event._hardDelete()) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    // tag[contenteditable=\"false\"]\n                    if (event._isUneditableNode(range, false)) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                    }\n                    // component\n                    if ((util.isFormatElement(selectionNode) || selectionNode.nextSibling === null || util.onlyZeroWidthSpace(selectionNode.nextSibling) && selectionNode.nextSibling.nextSibling === null) && range.startOffset === selectionNode.textContent.length) {\n                        const nextEl = formatEl.nextElementSibling;\n                        if (!nextEl) break;\n                        if (util.isComponent(nextEl)) {\n                            e.preventDefault();\n                            if (util.onlyZeroWidthSpace(formatEl)) {\n                                util.removeItem(formatEl);\n                                // table component\n                                if (util.isTable(nextEl)) {\n                                    let cell = util.getChildElement(nextEl, util.isCell, false);\n                                    cell = cell.firstElementChild || cell;\n                                    core.setRange(cell, 0, cell, 0);\n                                    break;\n                                }\n                            }\n                            // select file component\n                            const fileComponentInfo = core.getFileComponent(nextEl);\n                            if (fileComponentInfo) {\n                                e.stopPropagation();\n                                if (core.selectComponent(fileComponentInfo.target, fileComponentInfo.pluginName) === false) core.blur();\n                            } else if (util.isComponent(nextEl)) {\n                                e.stopPropagation();\n                                util.removeItem(nextEl);\n                            }\n                            break;\n                        }\n                    }\n                    if (!selectRange && (core.isEdgePoint(range.endContainer, range.endOffset) || (selectionNode === formatEl ? !!formatEl.childNodes[range.startOffset] : false))) {\n                        const sel = selectionNode === formatEl ? formatEl.childNodes[range.startOffset] || selectionNode : selectionNode;\n                        // delete nonEditable\n                        if (sel && util.isNonEditable(sel.nextSibling)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            util.removeItem(sel.nextSibling);\n                            break;\n                        } else if (util.isComponent(sel)) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            util.removeItem(sel);\n                            break;\n                        }\n                    }\n                    // format attributes\n                    if (!selectRange && core._isEdgeFormat(range.endContainer, range.endOffset, \"end\")) {\n                        if (util.isFormatElement(formatEl.nextElementSibling)) {\n                            core._formatAttrsTemp = formatEl.attributes;\n                        }\n                    }\n                    // nested list\n                    formatEl = util.getFormatElement(range.startContainer, null);\n                    rangeEl = util.getRangeFormatElement(formatEl, null);\n                    if (util.isListCell(formatEl) && util.isList(rangeEl) && (selectionNode === formatEl || selectionNode.nodeType === 3 && (!selectionNode.nextSibling || util.isList(selectionNode.nextSibling)) && (util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null) ? rangeEl.contains(range.endContainer) : range.endOffset === selectionNode.textContent.length && range.collapsed))) {\n                        if (range.startContainer !== range.endContainer) core.removeNode();\n                        let next = util.getArrayItem(formatEl.children, util.isList, false);\n                        next = next || formatEl.nextElementSibling || rangeEl.parentNode.nextElementSibling;\n                        if (next && (util.isList(next) || util.getArrayItem(next.children, util.isList, false))) {\n                            e.preventDefault();\n                            let con, children;\n                            if (util.isList(next)) {\n                                const child = next.firstElementChild;\n                                children = child.childNodes;\n                                con = children[0];\n                                while(children[0]){\n                                    formatEl.insertBefore(children[0], next);\n                                }\n                                util.removeItem(child);\n                            } else {\n                                con = next.firstChild;\n                                children = next.childNodes;\n                                while(children[0]){\n                                    formatEl.appendChild(children[0]);\n                                }\n                                util.removeItem(next);\n                            }\n                            core.setRange(con, 0, con, 0);\n                            // history stack\n                            core.history.push(true);\n                        }\n                        break;\n                    }\n                    break;\n                case 9:\n                    /** tab key */ if (fileComponentName || options.tabDisable) break;\n                    e.preventDefault();\n                    if (ctrl || alt || util.isWysiwygDiv(selectionNode)) break;\n                    const isEdge = !range.collapsed || core.isEdgePoint(range.startContainer, range.startOffset);\n                    const selectedFormats = core.getSelectedElements(null);\n                    selectionNode = core.getSelectionNode();\n                    const cells = [];\n                    let lines = [];\n                    let fc = util.isListCell(selectedFormats[0]), lc = util.isListCell(selectedFormats[selectedFormats.length - 1]);\n                    let r = {\n                        sc: range.startContainer,\n                        so: range.startOffset,\n                        ec: range.endContainer,\n                        eo: range.endOffset\n                    };\n                    for(let i = 0, len = selectedFormats.length, f; i < len; i++){\n                        f = selectedFormats[i];\n                        if (util.isListCell(f)) {\n                            if (!f.previousElementSibling && !shift) {\n                                continue;\n                            } else {\n                                cells.push(f);\n                            }\n                        } else {\n                            lines.push(f);\n                        }\n                    }\n                    // Nested list\n                    if (cells.length > 0 && isEdge && core.plugins.list) {\n                        r = core.plugins.list.editInsideList.call(core, shift, cells);\n                    } else {\n                        // table\n                        const tableCell = util.getParentElement(selectionNode, util.isCell);\n                        if (tableCell && isEdge) {\n                            const table = util.getParentElement(tableCell, \"table\");\n                            const cells = util.getListChildren(table, util.isCell);\n                            let idx = shift ? util.prevIdx(cells, tableCell) : util.nextIdx(cells, tableCell);\n                            if (idx === cells.length && !shift) idx = 0;\n                            if (idx === -1 && shift) idx = cells.length - 1;\n                            let moveCell = cells[idx];\n                            if (!moveCell) break;\n                            moveCell = moveCell.firstElementChild || moveCell;\n                            core.setRange(moveCell, 0, moveCell, 0);\n                            break;\n                        }\n                        lines = lines.concat(cells);\n                        fc = lc = null;\n                    }\n                    // Lines tab(4)\n                    if (lines.length > 0) {\n                        if (!shift) {\n                            const tabText = util.createTextNode(new _w.Array(core._variable.tabSize + 1).join(\"\\xa0\"));\n                            if (lines.length === 1) {\n                                const textRange = core.insertNode(tabText, null, true);\n                                if (!textRange) return false;\n                                if (!fc) {\n                                    r.sc = tabText;\n                                    r.so = textRange.endOffset;\n                                }\n                                if (!lc) {\n                                    r.ec = tabText;\n                                    r.eo = textRange.endOffset;\n                                }\n                            } else {\n                                const len = lines.length - 1;\n                                for(let i = 0, child; i <= len; i++){\n                                    child = lines[i].firstChild;\n                                    if (!child) continue;\n                                    if (util.isBreak(child)) {\n                                        lines[i].insertBefore(tabText.cloneNode(false), child);\n                                    } else {\n                                        child.textContent = tabText.textContent + child.textContent;\n                                    }\n                                }\n                                const firstChild = util.getChildElement(lines[0], \"text\", false);\n                                const endChild = util.getChildElement(lines[len], \"text\", true);\n                                if (!fc && firstChild) {\n                                    r.sc = firstChild;\n                                    r.so = 0;\n                                }\n                                if (!lc && endChild) {\n                                    r.ec = endChild;\n                                    r.eo = endChild.textContent.length;\n                                }\n                            }\n                        } else {\n                            const len = lines.length - 1;\n                            for(let i = 0, line; i <= len; i++){\n                                line = lines[i].childNodes;\n                                for(let c = 0, cLen = line.length, child; c < cLen; c++){\n                                    child = line[c];\n                                    if (!child) break;\n                                    if (util.onlyZeroWidthSpace(child)) continue;\n                                    if (/^\\s{1,4}$/.test(child.textContent)) {\n                                        util.removeItem(child);\n                                    } else if (/^\\s{1,4}/.test(child.textContent)) {\n                                        child.textContent = child.textContent.replace(/^\\s{1,4}/, \"\");\n                                    }\n                                    break;\n                                }\n                            }\n                            const firstChild = util.getChildElement(lines[0], \"text\", false);\n                            const endChild = util.getChildElement(lines[len], \"text\", true);\n                            if (!fc && firstChild) {\n                                r.sc = firstChild;\n                                r.so = 0;\n                            }\n                            if (!lc && endChild) {\n                                r.ec = endChild;\n                                r.eo = endChild.textContent.length;\n                            }\n                        }\n                    }\n                    core.setRange(r.sc, r.so, r.ec, r.eo);\n                    // history stack\n                    core.history.push(false);\n                    break;\n                case 13:\n                    /** enter key */ // enter login start\n                    const freeFormatEl = util.getFreeFormatElement(selectionNode, null);\n                    if (core._charTypeHTML) {\n                        let enterHTML = \"\";\n                        if (!shift && freeFormatEl || shift) {\n                            enterHTML = \"<br>\";\n                        } else {\n                            enterHTML = \"<\" + formatEl.nodeName + \"><br></\" + formatEl.nodeName + \">\";\n                        }\n                        if (!core.checkCharCount(enterHTML, \"byte-html\")) {\n                            e.preventDefault();\n                            return false;\n                        }\n                    }\n                    if (!shift && !fileComponentName) {\n                        const formatEndEdge = core._isEdgeFormat(range.endContainer, range.endOffset, \"end\");\n                        const formatStartEdge = core._isEdgeFormat(range.startContainer, range.startOffset, \"start\");\n                        // add default format line\n                        if (formatEndEdge && (/^H[1-6]$/i.test(formatEl.nodeName) || /^HR$/i.test(formatEl.nodeName))) {\n                            event._enterPrevent(e);\n                            let temp = null;\n                            const newFormat = core.appendFormatTag(formatEl, options.defaultTag);\n                            if (formatEndEdge && formatEndEdge.length > 0) {\n                                temp = formatEndEdge.pop();\n                                const innerNode = temp;\n                                while(formatEndEdge.length > 0){\n                                    temp = temp.appendChild(formatEndEdge.pop());\n                                }\n                                newFormat.appendChild(innerNode);\n                            }\n                            temp = !temp ? newFormat.firstChild : temp.appendChild(newFormat.firstChild);\n                            if (util.isBreak(temp)) {\n                                const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                                temp.parentNode.insertBefore(zeroWidth, temp);\n                                core.setRange(zeroWidth, 1, zeroWidth, 1);\n                            } else {\n                                core.setRange(temp, 0, temp, 0);\n                            }\n                            break;\n                        } else if (rangeEl && formatEl && !util.isCell(rangeEl) && !/^FIGCAPTION$/i.test(rangeEl.nodeName)) {\n                            const range = core.getRange();\n                            if (core.isEdgePoint(range.endContainer, range.endOffset) && util.isList(selectionNode.nextSibling)) {\n                                event._enterPrevent(e);\n                                const newEl = util.createElement(\"LI\");\n                                const br = util.createElement(\"BR\");\n                                newEl.appendChild(br);\n                                formatEl.parentNode.insertBefore(newEl, formatEl.nextElementSibling);\n                                newEl.appendChild(selectionNode.nextSibling);\n                                core.setRange(br, 1, br, 1);\n                                break;\n                            }\n                            if ((range.commonAncestorContainer.nodeType === 3 ? !range.commonAncestorContainer.nextElementSibling : true) && util.onlyZeroWidthSpace(formatEl.innerText.trim()) && !util.isListCell(formatEl.nextElementSibling)) {\n                                event._enterPrevent(e);\n                                let newEl = null;\n                                if (util.isListCell(rangeEl.parentNode)) {\n                                    const parentLi = formatEl.parentNode.parentNode;\n                                    rangeEl = parentLi.parentNode;\n                                    const newListCell = util.createElement(\"LI\");\n                                    newListCell.innerHTML = \"<br>\";\n                                    util.copyTagAttributes(newListCell, formatEl, options.lineAttrReset);\n                                    newEl = newListCell;\n                                    rangeEl.insertBefore(newEl, parentLi.nextElementSibling);\n                                } else {\n                                    const newFormat = util.isCell(rangeEl.parentNode) ? \"DIV\" : util.isList(rangeEl.parentNode) ? \"LI\" : util.isFormatElement(rangeEl.nextElementSibling) && !util.isRangeFormatElement(rangeEl.nextElementSibling) ? rangeEl.nextElementSibling.nodeName : util.isFormatElement(rangeEl.previousElementSibling) && !util.isRangeFormatElement(rangeEl.previousElementSibling) ? rangeEl.previousElementSibling.nodeName : options.defaultTag;\n                                    newEl = util.createElement(newFormat);\n                                    util.copyTagAttributes(newEl, formatEl, options.lineAttrReset);\n                                    const edge = core.detachRangeFormatElement(rangeEl, [\n                                        formatEl\n                                    ], null, true, true);\n                                    edge.cc.insertBefore(newEl, edge.ec);\n                                }\n                                newEl.innerHTML = \"<br>\";\n                                util.removeItemAllParents(formatEl, null, null);\n                                core.setRange(newEl, 1, newEl, 1);\n                                break;\n                            }\n                        }\n                        if (freeFormatEl) {\n                            event._enterPrevent(e);\n                            const selectionFormat = selectionNode === freeFormatEl;\n                            const wSelection = core.getSelection();\n                            const children = selectionNode.childNodes, offset = wSelection.focusOffset, prev = selectionNode.previousElementSibling, next = selectionNode.nextSibling;\n                            if (!util.isClosureFreeFormatElement(freeFormatEl) && !!children && (selectionFormat && range.collapsed && children.length - 1 <= offset + 1 && util.isBreak(children[offset]) && (!children[offset + 1] || (!children[offset + 2] || util.onlyZeroWidthSpace(children[offset + 2].textContent)) && children[offset + 1].nodeType === 3 && util.onlyZeroWidthSpace(children[offset + 1].textContent)) && offset > 0 && util.isBreak(children[offset - 1]) || !selectionFormat && util.onlyZeroWidthSpace(selectionNode.textContent) && util.isBreak(prev) && (util.isBreak(prev.previousSibling) || !util.onlyZeroWidthSpace(prev.previousSibling.textContent)) && (!next || !util.isBreak(next) && util.onlyZeroWidthSpace(next.textContent)))) {\n                                if (selectionFormat) util.removeItem(children[offset - 1]);\n                                else util.removeItem(selectionNode);\n                                const newEl = core.appendFormatTag(freeFormatEl, util.isFormatElement(freeFormatEl.nextElementSibling) && !util.isRangeFormatElement(freeFormatEl.nextElementSibling) ? freeFormatEl.nextElementSibling : null);\n                                util.copyFormatAttributes(newEl, freeFormatEl);\n                                core.setRange(newEl, 1, newEl, 1);\n                                break;\n                            }\n                            if (selectionFormat) {\n                                functions.insertHTML(range.collapsed && util.isBreak(range.startContainer.childNodes[range.startOffset - 1]) ? \"<br>\" : \"<br><br>\", true, false);\n                                let focusNode = wSelection.focusNode;\n                                const wOffset = wSelection.focusOffset;\n                                if (freeFormatEl === focusNode) {\n                                    focusNode = focusNode.childNodes[wOffset - offset > 1 ? wOffset - 1 : wOffset];\n                                }\n                                core.setRange(focusNode, 1, focusNode, 1);\n                            } else {\n                                const focusNext = wSelection.focusNode.nextSibling;\n                                const br = util.createElement(\"BR\");\n                                core.insertNode(br, null, false);\n                                const brPrev = br.previousSibling, brNext = br.nextSibling;\n                                if (!util.isBreak(focusNext) && !util.isBreak(brPrev) && (!brNext || util.onlyZeroWidthSpace(brNext))) {\n                                    br.parentNode.insertBefore(br.cloneNode(false), br);\n                                    core.setRange(br, 1, br, 1);\n                                } else {\n                                    core.setRange(brNext, 0, brNext, 0);\n                                }\n                            }\n                            event._onShortcutKey = true;\n                            break;\n                        }\n                        // set format attrs - edge\n                        if (range.collapsed && (formatStartEdge || formatEndEdge)) {\n                            event._enterPrevent(e);\n                            const focusBR = util.createElement(\"BR\");\n                            const newFormat = util.createElement(formatEl.nodeName);\n                            util.copyTagAttributes(newFormat, formatEl, options.lineAttrReset);\n                            let child = focusBR;\n                            do {\n                                if (!util.isBreak(selectionNode) && selectionNode.nodeType === 1) {\n                                    const f = selectionNode.cloneNode(false);\n                                    f.appendChild(child);\n                                    child = f;\n                                }\n                                selectionNode = selectionNode.parentNode;\n                            }while (formatEl !== selectionNode && formatEl.contains(selectionNode));\n                            newFormat.appendChild(child);\n                            formatEl.parentNode.insertBefore(newFormat, formatStartEdge && !formatEndEdge ? formatEl : formatEl.nextElementSibling);\n                            if (formatEndEdge) {\n                                core.setRange(focusBR, 1, focusBR, 1);\n                            }\n                            break;\n                        }\n                        if (formatEl) {\n                            e.stopPropagation();\n                            let newEl;\n                            let offset = 0;\n                            if (!range.collapsed) {\n                                const isMultiLine = util.getFormatElement(range.startContainer, null) !== util.getFormatElement(range.endContainer, null);\n                                const newFormat = formatEl.cloneNode(false);\n                                newFormat.innerHTML = \"<br>\";\n                                const r = core.removeNode();\n                                newEl = util.getFormatElement(r.container, null);\n                                if (!newEl) {\n                                    if (util.isWysiwygDiv(r.container)) {\n                                        event._enterPrevent(e);\n                                        context.element.wysiwyg.appendChild(newFormat);\n                                        newEl = newFormat;\n                                        util.copyTagAttributes(newEl, formatEl, options.lineAttrReset);\n                                        core.setRange(newEl, offset, newEl, offset);\n                                    }\n                                    break;\n                                }\n                                const innerRange = util.getRangeFormatElement(r.container);\n                                newEl = newEl.contains(innerRange) ? util.getChildElement(innerRange, util.getFormatElement.bind(util)) : newEl;\n                                if (isMultiLine) {\n                                    if (formatEndEdge && !formatStartEdge) {\n                                        newEl.parentNode.insertBefore(newFormat, !r.prevContainer || r.container === r.prevContainer ? newEl.nextElementSibling : newEl);\n                                        newEl = newFormat;\n                                        offset = 0;\n                                    } else {\n                                        offset = r.offset;\n                                        if (formatStartEdge) {\n                                            const tempEl = newEl.parentNode.insertBefore(newFormat, newEl);\n                                            if (formatEndEdge) {\n                                                newEl = tempEl;\n                                                offset = 0;\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    if (formatEndEdge && formatStartEdge) {\n                                        newEl.parentNode.insertBefore(newFormat, r.prevContainer && r.container === r.prevContainer ? newEl.nextElementSibling : newEl);\n                                        newEl = newFormat;\n                                        offset = 0;\n                                    } else {\n                                        newEl = util.splitElement(r.container, r.offset, util.getElementDepth(formatEl));\n                                    }\n                                }\n                            } else {\n                                if (util.onlyZeroWidthSpace(formatEl)) {\n                                    newEl = core.appendFormatTag(formatEl, formatEl.cloneNode(false));\n                                } else {\n                                    newEl = util.splitElement(range.endContainer, range.endOffset, util.getElementDepth(formatEl));\n                                }\n                            }\n                            event._enterPrevent(e);\n                            util.copyTagAttributes(newEl, formatEl, options.lineAttrReset);\n                            core.setRange(newEl, offset, newEl, offset);\n                            break;\n                        }\n                    }\n                    if (selectRange) break;\n                    if (rangeEl && util.getParentElement(rangeEl, \"FIGCAPTION\") && util.getParentElement(rangeEl, util.isList)) {\n                        event._enterPrevent(e);\n                        formatEl = core.appendFormatTag(formatEl, null);\n                        core.setRange(formatEl, 0, formatEl, 0);\n                    }\n                    if (fileComponentName) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        core.containerOff();\n                        core.controllersOff();\n                        const compContext = context[fileComponentName];\n                        const container = compContext._container;\n                        const sibling = container.previousElementSibling || container.nextElementSibling;\n                        let newEl = null;\n                        if (util.isListCell(container.parentNode)) {\n                            newEl = util.createElement(\"BR\");\n                        } else {\n                            newEl = util.createElement(util.isFormatElement(sibling) && !util.isRangeFormatElement(sibling) ? sibling.nodeName : options.defaultTag);\n                            newEl.innerHTML = \"<br>\";\n                        }\n                        if (shift) container.parentNode.insertBefore(newEl, container);\n                        else container.parentNode.insertBefore(newEl, container.nextElementSibling);\n                        core.callPlugin(fileComponentName, function() {\n                            if (core.selectComponent(compContext._element, fileComponentName) === false) core.blur();\n                        }, null);\n                    }\n                    break;\n                case 27:\n                    if (fileComponentName) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        core.controllersOff();\n                        return false;\n                    }\n                    break;\n            }\n            if (shift && keyCode === 16) {\n                e.preventDefault();\n                e.stopPropagation();\n                const tablePlugin = core.plugins.table;\n                if (tablePlugin && !tablePlugin._shift && !tablePlugin._ref) {\n                    const cell = util.getParentElement(formatEl, util.isCell);\n                    if (cell) {\n                        tablePlugin.onTableCellMultiSelect.call(core, cell, true);\n                        return;\n                    }\n                }\n            } else if (shift && (util.isOSX_IOS ? alt : ctrl) && keyCode === 32) {\n                e.preventDefault();\n                e.stopPropagation();\n                const nbsp = core.insertNode(util.createTextNode(\"\\xa0\"));\n                if (nbsp && nbsp.container) {\n                    core.setRange(nbsp.container, nbsp.endOffset, nbsp.container, nbsp.endOffset);\n                    return;\n                }\n            }\n            if (util.isIE && !ctrl && !alt && !selectRange && !event._nonTextKeyCode.test(keyCode) && util.isBreak(range.commonAncestorContainer)) {\n                const zeroWidth = util.createTextNode(util.zeroWidthSpace);\n                core.insertNode(zeroWidth, null, false);\n                core.setRange(zeroWidth, 1, zeroWidth, 1);\n            }\n            if (event._directionKeyCode.test(keyCode)) {\n                core._editorRange();\n                event._applyTagEffects();\n            }\n        },\n        _onKeyDown_wysiwyg_arrowKey: function(e) {\n            if (e.shiftKey) return; // shiftkey needs(?) other custom handler. This one may be adapted (in 'selectNode(...)'), but not for table\n            let selectionNode = core.getSelectionNode();\n            const selectNode = function(node) {\n                let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n                e.preventDefault();\n                e.stopPropagation();\n                if (!node) return;\n                let componentInfo = core.getFileComponent(node);\n                if (componentInfo) {\n                    core.selectComponent(componentInfo.target, componentInfo.pluginName); // more responsive for key holdness\n                } else {\n                    core.setRange(node, offset, node, offset);\n                    core.controllersOff();\n                }\n            };\n            const table = util.getParentElement(selectionNode, \"table\");\n            if (table) {\n                const currentRow = util.getParentElement(selectionNode, \"tr\");\n                const currentCell = util.getParentElement(selectionNode, \"td\");\n                let currentCellFirstNode = currentCell;\n                let currentCellLastNode = currentCell;\n                if (currentCell) {\n                    while(currentCellFirstNode.firstChild)currentCellFirstNode = currentCellFirstNode.firstChild;\n                    while(currentCellLastNode.lastChild)currentCellLastNode = currentCellLastNode.lastChild;\n                }\n                let selectionNodeDeepestFirstChild = selectionNode;\n                while(selectionNodeDeepestFirstChild.firstChild)selectionNodeDeepestFirstChild = selectionNodeDeepestFirstChild.firstChild;\n                const isCellFirstNode = selectionNodeDeepestFirstChild === currentCellFirstNode;\n                const isCellLastNode = selectionNodeDeepestFirstChild === currentCellLastNode;\n                let siblingToSet = null;\n                let offset = 0;\n                if (e.keyCode === 38 && isCellFirstNode) {\n                    const previousRow = currentRow && currentRow.previousElementSibling;\n                    if (previousRow) siblingToSet = previousRow.children[currentCell.cellIndex];\n                    else siblingToSet = util.getPreviousDeepestNode(table, core.context.element.wysiwyg);\n                    while(siblingToSet.lastChild)siblingToSet = siblingToSet.lastChild;\n                    if (siblingToSet) offset = siblingToSet.textContent.length;\n                } else if (e.keyCode === 40 && isCellLastNode) {\n                    const nextRow = currentRow && currentRow.nextElementSibling;\n                    if (nextRow) siblingToSet = nextRow.children[currentCell.cellIndex];\n                    else siblingToSet = util.getNextDeepestNode(table, core.context.element.wysiwyg);\n                    while(siblingToSet.firstChild)siblingToSet = siblingToSet.firstChild;\n                }\n                if (siblingToSet) {\n                    selectNode(siblingToSet, offset);\n                    return false;\n                }\n            }\n            const componentInfo = core.getFileComponent(selectionNode);\n            if (componentInfo) {\n                const selectPrevious = /37|38/.test(e.keyCode);\n                const selectNext = /39|40/.test(e.keyCode);\n                if (selectPrevious) {\n                    const previousDeepestNode = util.getPreviousDeepestNode(componentInfo.target, core.context.element.wysiwyg);\n                    selectNode(previousDeepestNode, previousDeepestNode && previousDeepestNode.textContent.length);\n                } else if (selectNext) {\n                    const nextDeepestNode = util.getNextDeepestNode(componentInfo.target, core.context.element.wysiwyg);\n                    selectNode(nextDeepestNode);\n                }\n            }\n        },\n        onKeyUp_wysiwyg: function(e) {\n            if (event._onShortcutKey) return;\n            core._editorRange();\n            const keyCode = e.keyCode;\n            const ctrl = e.ctrlKey || e.metaKey || keyCode === 91 || keyCode === 92 || keyCode === 224;\n            const alt = e.altKey;\n            if (core.isReadOnly) {\n                if (!ctrl && event._cursorMoveKeyCode.test(keyCode)) event._applyTagEffects();\n                return;\n            }\n            const range = core.getRange();\n            let selectionNode = core.getSelectionNode();\n            if (core._isBalloon && (core._isBalloonAlways && keyCode !== 27 || !range.collapsed)) {\n                if (core._isBalloonAlways) {\n                    if (keyCode !== 27) event._showToolbarBalloonDelay();\n                } else {\n                    event._showToolbarBalloon();\n                    return;\n                }\n            }\n            let selectionNodeDeepestFirstChild = selectionNode;\n            while(selectionNodeDeepestFirstChild.firstChild)selectionNodeDeepestFirstChild = selectionNodeDeepestFirstChild.firstChild;\n            const selectedComponentInfo = core.getFileComponent(selectionNodeDeepestFirstChild);\n            if (!(e.keyCode === 16 || e.shiftKey) && selectedComponentInfo) core.selectComponent(selectedComponentInfo.target, selectedComponentInfo.pluginName);\n            else if (core.currentFileComponentInfo) core.controllersOff();\n            /** when format tag deleted */ if (keyCode === 8 && util.isWysiwygDiv(selectionNode) && selectionNode.textContent === \"\" && selectionNode.children.length === 0) {\n                e.preventDefault();\n                e.stopPropagation();\n                selectionNode.innerHTML = \"\";\n                const oFormatTag = util.createElement(util.isFormatElement(core._variable.currentNodes[0]) ? core._variable.currentNodes[0] : options.defaultTag);\n                oFormatTag.innerHTML = \"<br>\";\n                selectionNode.appendChild(oFormatTag);\n                core.setRange(oFormatTag, 0, oFormatTag, 0);\n                event._applyTagEffects();\n                core.history.push(false);\n                return;\n            }\n            const formatEl = util.getFormatElement(selectionNode, null);\n            const rangeEl = util.getRangeFormatElement(selectionNode, null);\n            const attrs = core._formatAttrsTemp;\n            if (attrs) {\n                for(let i = 0, len = attrs.length; i < len; i++){\n                    if (keyCode === 13 && /^id$/i.test(attrs[i].name)) {\n                        formatEl.removeAttribute(\"id\");\n                        continue;\n                    }\n                    formatEl.setAttribute(attrs[i].name, attrs[i].value);\n                }\n                core._formatAttrsTemp = null;\n            }\n            if (!formatEl && range.collapsed && !util.isComponent(selectionNode) && !util.isList(selectionNode) && core._setDefaultFormat(util.isRangeFormatElement(rangeEl) ? \"DIV\" : options.defaultTag) !== null) {\n                selectionNode = core.getSelectionNode();\n            }\n            const textKey = !ctrl && !alt && !event._nonTextKeyCode.test(keyCode);\n            if (textKey && selectionNode.nodeType === 3 && util.zeroWidthRegExp.test(selectionNode.textContent) && !(e.isComposing !== undefined ? e.isComposing : event._IEisComposing)) {\n                let so = range.startOffset, eo = range.endOffset;\n                const frontZeroWidthCnt = (selectionNode.textContent.substring(0, eo).match(event._frontZeroWidthReg) || \"\").length;\n                so = range.startOffset - frontZeroWidthCnt;\n                eo = range.endOffset - frontZeroWidthCnt;\n                selectionNode.textContent = selectionNode.textContent.replace(util.zeroWidthRegExp, \"\");\n                core.setRange(selectionNode, so < 0 ? 0 : so, selectionNode, eo < 0 ? 0 : eo);\n            }\n            core._charCount(\"\");\n            // user event\n            if (typeof functions.onKeyUp === \"function\" && functions.onKeyUp(e, core) === false) return;\n            // history stack\n            if (!ctrl && !alt && !event._historyIgnoreKeyCode.test(keyCode)) {\n                core.history.push(true);\n            }\n        },\n        onScroll_wysiwyg: function(e) {\n            core.controllersOff();\n            if (core._isBalloon) event._hideToolbar();\n            // user event\n            if (typeof functions.onScroll === \"function\") functions.onScroll(e, core);\n        },\n        onFocus_wysiwyg: function(e) {\n            if (core._antiBlur) return;\n            core.hasFocus = true;\n            _w.setTimeout(event._applyTagEffects);\n            if (core._isInline) event._showToolbarInline();\n            // user event\n            if (typeof functions.onFocus === \"function\") functions.onFocus(e, core);\n        },\n        onBlur_wysiwyg: function(e) {\n            if (core._antiBlur || core._variable.isCodeView) return;\n            core.hasFocus = false;\n            core.effectNode = null;\n            core.controllersOff();\n            if (core._isInline || core._isBalloon) event._hideToolbar();\n            core._setKeyEffect([]);\n            core._variable.currentNodes = [];\n            core._variable.currentNodesMap = [];\n            if (options.showPathLabel) context.element.navigation.textContent = \"\";\n            // user event\n            if (typeof functions.onBlur === \"function\") functions.onBlur(e, core, this);\n        },\n        onMouseDown_resizingBar: function(e) {\n            e.stopPropagation();\n            core.submenuOff();\n            core.controllersOff();\n            core._variable.resizeClientY = e.clientY;\n            context.element.resizeBackground.style.display = \"block\";\n            function closureFunc() {\n                context.element.resizeBackground.style.display = \"none\";\n                _d.removeEventListener(\"mousemove\", event._resize_editor);\n                _d.removeEventListener(\"mouseup\", closureFunc);\n            }\n            _d.addEventListener(\"mousemove\", event._resize_editor);\n            _d.addEventListener(\"mouseup\", closureFunc);\n        },\n        _resize_editor: function(e) {\n            const resizeInterval = context.element.editorArea.offsetHeight + (e.clientY - core._variable.resizeClientY);\n            const h = resizeInterval < core._variable.minResizingSize ? core._variable.minResizingSize : resizeInterval;\n            context.element.wysiwygFrame.style.height = context.element.code.style.height = h + \"px\";\n            core._variable.resizeClientY = e.clientY;\n            if (!util.isResizeObserverSupported) core.__callResizeFunction(h, null);\n        },\n        onResize_window: function() {\n            if (!util.isResizeObserverSupported) core.resetResponsiveToolbar();\n            const toolbar = context.element.toolbar;\n            const isToolbarHidden = toolbar.style.display === \"none\" || core._isInline && !core._inlineToolbarAttr.isShow;\n            if (toolbar.offsetWidth === 0 && !isToolbarHidden) return;\n            if (context.fileBrowser && context.fileBrowser.area.style.display === \"block\") {\n                context.fileBrowser.body.style.maxHeight = _w.innerHeight - context.fileBrowser.header.offsetHeight - 50 + \"px\";\n            }\n            if (core.submenuActiveButton && core.submenu) {\n                core._setMenuPosition(core.submenuActiveButton, core.submenu);\n            }\n            if (core._variable.isFullScreen) {\n                core._variable.innerHeight_fullScreen += _w.innerHeight - toolbar.offsetHeight - core._variable.innerHeight_fullScreen;\n                context.element.editorArea.style.height = core._variable.innerHeight_fullScreen + \"px\";\n                return;\n            }\n            if (core._variable.isCodeView && core._isInline) {\n                event._showToolbarInline();\n                return;\n            }\n            core._iframeAutoHeight();\n            if (core._sticky) {\n                toolbar.style.width = context.element.topArea.offsetWidth - 2 + \"px\";\n                event.onScroll_window();\n            }\n        },\n        onScroll_window: function() {\n            if (core._variable.isFullScreen || context.element.toolbar.offsetWidth === 0 || options.stickyToolbar < 0) return;\n            const element = context.element;\n            const editorHeight = element.editorArea.offsetHeight;\n            const y = (this.scrollY || _d.documentElement.scrollTop) + options.stickyToolbar;\n            const editorTop = event._getEditorOffsets(options.toolbarContainer).top - (core._isInline ? element.toolbar.offsetHeight : 0);\n            const inlineOffset = core._isInline && y - editorTop > 0 ? y - editorTop - context.element.toolbar.offsetHeight : 0;\n            if (y < editorTop) {\n                event._offStickyToolbar();\n            } else if (y + core._variable.minResizingSize >= editorHeight + editorTop) {\n                if (!core._sticky) event._onStickyToolbar(inlineOffset);\n                element.toolbar.style.top = inlineOffset + editorHeight + editorTop + options.stickyToolbar - y - core._variable.minResizingSize + \"px\";\n            } else if (y >= editorTop) {\n                event._onStickyToolbar(inlineOffset);\n            }\n        },\n        _getEditorOffsets: function(container) {\n            let offsetEl = container || context.element.topArea;\n            let t = 0, l = 0, s = 0;\n            while(offsetEl){\n                t += offsetEl.offsetTop;\n                l += offsetEl.offsetLeft;\n                s += offsetEl.scrollTop;\n                offsetEl = offsetEl.offsetParent;\n            }\n            return {\n                top: t,\n                left: l,\n                scroll: s\n            };\n        },\n        _getPageBottomSpace: function() {\n            return _d.documentElement.scrollHeight - (event._getEditorOffsets(null).top + context.element.topArea.offsetHeight);\n        },\n        _onStickyToolbar: function(inlineOffset) {\n            const element = context.element;\n            if (!core._isInline && !options.toolbarContainer) {\n                element._stickyDummy.style.height = element.toolbar.offsetHeight + \"px\";\n                element._stickyDummy.style.display = \"block\";\n            }\n            element.toolbar.style.top = options.stickyToolbar + inlineOffset + \"px\";\n            element.toolbar.style.width = core._isInline ? core._inlineToolbarAttr.width : element.toolbar.offsetWidth + \"px\";\n            util.addClass(element.toolbar, \"se-toolbar-sticky\");\n            core._sticky = true;\n        },\n        _offStickyToolbar: function() {\n            const element = context.element;\n            element._stickyDummy.style.display = \"none\";\n            element.toolbar.style.top = core._isInline ? core._inlineToolbarAttr.top : \"\";\n            element.toolbar.style.width = core._isInline ? core._inlineToolbarAttr.width : \"\";\n            element.editorArea.style.marginTop = \"\";\n            util.removeClass(element.toolbar, \"se-toolbar-sticky\");\n            core._sticky = false;\n        },\n        _codeViewAutoHeight: function() {\n            if (core._variable.isFullScreen) return;\n            context.element.code.style.height = context.element.code.scrollHeight + \"px\";\n        },\n        // FireFox - table delete, Chrome - image, video, audio\n        _hardDelete: function() {\n            const range = core.getRange();\n            const sc = range.startContainer;\n            const ec = range.endContainer;\n            // table\n            const sCell = util.getRangeFormatElement(sc);\n            const eCell = util.getRangeFormatElement(ec);\n            const sIsCell = util.isCell(sCell);\n            const eIsCell = util.isCell(eCell);\n            const ancestor = range.commonAncestorContainer;\n            if ((sIsCell && !sCell.previousElementSibling && !sCell.parentElement.previousElementSibling || eIsCell && !eCell.nextElementSibling && !eCell.parentElement.nextElementSibling) && sCell !== eCell) {\n                if (!sIsCell) {\n                    util.removeItem(util.getParentElement(eCell, function(current) {\n                        return ancestor === current.parentNode;\n                    }));\n                } else if (!eIsCell) {\n                    util.removeItem(util.getParentElement(sCell, function(current) {\n                        return ancestor === current.parentNode;\n                    }));\n                } else {\n                    util.removeItem(util.getParentElement(sCell, function(current) {\n                        return ancestor === current.parentNode;\n                    }));\n                    core.nativeFocus();\n                    return true;\n                }\n            }\n            // component\n            const sComp = sc.nodeType === 1 ? util.getParentElement(sc, \".se-component\") : null;\n            const eComp = ec.nodeType === 1 ? util.getParentElement(ec, \".se-component\") : null;\n            if (sComp) util.removeItem(sComp);\n            if (eComp) util.removeItem(eComp);\n            return false;\n        },\n        onPaste_wysiwyg: function(e) {\n            const clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;\n            if (!clipboardData) return true;\n            return event._dataTransferAction(\"paste\", e, clipboardData);\n        },\n        _setClipboardComponent: function(e, info, clipboardData) {\n            e.preventDefault();\n            e.stopPropagation();\n            clipboardData.setData(\"text/html\", info.component.outerHTML);\n        },\n        onCopy_wysiwyg: function(e) {\n            const clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;\n            // user event\n            if (typeof functions.onCopy === \"function\" && functions.onCopy(e, clipboardData, core) === false) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            const info = core.currentFileComponentInfo;\n            if (info && !util.isIE) {\n                event._setClipboardComponent(e, info, clipboardData);\n                util.addClass(info.component, \"se-component-copy\");\n                // copy effect\n                _w.setTimeout(function() {\n                    util.removeClass(info.component, \"se-component-copy\");\n                }, 150);\n            }\n        },\n        onSave_wysiwyg: function(content) {\n            // user event\n            if (typeof functions.onSave === \"function\") {\n                functions.onSave(content, core);\n                return;\n            }\n        },\n        onCut_wysiwyg: function(e) {\n            const clipboardData = util.isIE ? _w.clipboardData : e.clipboardData;\n            // user event\n            if (typeof functions.onCut === \"function\" && functions.onCut(e, clipboardData, core) === false) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            const info = core.currentFileComponentInfo;\n            if (info && !util.isIE) {\n                event._setClipboardComponent(e, info, clipboardData);\n                util.removeItem(info.component);\n                core.controllersOff();\n            }\n            _w.setTimeout(function() {\n                // history stack\n                core.history.push(false);\n            });\n        },\n        onDrop_wysiwyg: function(e) {\n            if (core.isReadOnly || util.isIE) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            }\n            const dataTransfer = e.dataTransfer;\n            if (!dataTransfer) return true;\n            event._setDropLocationSelection(e);\n            core.removeNode();\n            if (!document.body.contains(core.currentControllerTarget)) core.controllersOff();\n            return event._dataTransferAction(\"drop\", e, dataTransfer);\n        },\n        _setDropLocationSelection: function(e) {\n            const range = {\n                startContainer: null,\n                startOffset: null,\n                endContainer: null,\n                endOffset: null\n            };\n            let r = null;\n            if (e.rangeParent) {\n                range.startContainer = e.rangeParent;\n                range.startOffset = e.rangeOffset;\n                range.endContainer = e.rangeParent;\n                range.endOffset = e.rangeOffset;\n            } else if (core._wd.caretRangeFromPoint) {\n                r = core._wd.caretRangeFromPoint(e.clientX, e.clientY);\n            } else {\n                r = core.getRange();\n            }\n            if (r) {\n                range.startContainer = r.startContainer;\n                range.startOffset = r.startOffset;\n                range.endContainer = r.endContainer;\n                range.endOffset = r.endOffset;\n            }\n            if (range.startContainer === range.endContainer) {\n                const component = util.getParentElement(range.startContainer, util.isComponent);\n                if (component) {\n                    range.startContainer = component;\n                    range.startOffset = 0;\n                    range.endContainer = component;\n                    range.endOffset = 0;\n                }\n            }\n            core.setRange(range.startContainer, range.startOffset, range.endContainer, range.endOffset);\n        },\n        _dataTransferAction: function(type, e, data) {\n            let plainText, cleanData;\n            if (util.isIE) {\n                plainText = data.getData(\"Text\");\n                const range = core.getRange();\n                const tempDiv = util.createElement(\"DIV\");\n                const tempRange = {\n                    sc: range.startContainer,\n                    so: range.startOffset,\n                    ec: range.endContainer,\n                    eo: range.endOffset\n                };\n                tempDiv.setAttribute(\"contenteditable\", true);\n                tempDiv.style.cssText = \"position:absolute; top:0; left:0; width:1px; height:1px; overflow:hidden;\";\n                context.element.relative.appendChild(tempDiv);\n                tempDiv.focus();\n                _w.setTimeout(function() {\n                    cleanData = tempDiv.innerHTML;\n                    util.removeItem(tempDiv);\n                    core.setRange(tempRange.sc, tempRange.so, tempRange.ec, tempRange.eo);\n                    event._setClipboardData(type, e, plainText, cleanData, data);\n                });\n                return true;\n            } else {\n                plainText = data.getData(\"text/plain\");\n                cleanData = data.getData(\"text/html\");\n                if (event._setClipboardData(type, e, plainText, cleanData, data) === false) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    return false;\n                }\n            }\n        },\n        _setClipboardData: function(type, e, plainText, cleanData, data) {\n            // MS word, OneNode, Excel\n            const MSData = /class=[\"']*Mso(Normal|List)/i.test(cleanData) || /content=[\"']*Word.Document/i.test(cleanData) || /content=[\"']*OneNote.File/i.test(cleanData) || /content=[\"']*Excel.Sheet/i.test(cleanData);\n            const onlyText = !cleanData;\n            if (!onlyText) {\n                cleanData = cleanData.replace(/^<html>\\r?\\n?<body>\\r?\\n?\\x3C!--StartFragment--\\>|\\x3C!--EndFragment-->\\r?\\n?<\\/body\\>\\r?\\n?<\\/html>$/g, \"\");\n                if (MSData) {\n                    cleanData = cleanData.replace(/\\n/g, \" \");\n                    plainText = plainText.replace(/\\n/g, \" \");\n                }\n                cleanData = core.cleanHTML(cleanData, core.pasteTagsWhitelistRegExp, core.pasteTagsBlacklistRegExp);\n            } else {\n                cleanData = util._HTMLConvertor(plainText).replace(/\\n/g, \"<br>\");\n            }\n            const maxCharCount = core._charCount(core._charTypeHTML ? cleanData : plainText);\n            // user event - paste\n            if (type === \"paste\" && typeof functions.onPaste === \"function\") {\n                const value = functions.onPaste(e, cleanData, maxCharCount, core);\n                if (value === false) {\n                    return false;\n                } else if (typeof value === \"string\") {\n                    if (!value) return false;\n                    cleanData = value;\n                }\n            }\n            // user event - drop\n            if (type === \"drop\" && typeof functions.onDrop === \"function\") {\n                const value = functions.onDrop(e, cleanData, maxCharCount, core);\n                if (value === false) {\n                    return false;\n                } else if (typeof value === \"string\") {\n                    if (!value) return false;\n                    cleanData = value;\n                }\n            }\n            // files\n            const files = data.files;\n            if (files.length > 0 && !MSData) {\n                if (/^image/.test(files[0].type) && core.plugins.image) {\n                    functions.insertImage(files);\n                }\n                return false;\n            }\n            if (!maxCharCount) {\n                return false;\n            }\n            if (cleanData) {\n                functions.insertHTML(cleanData, true, false);\n                return false;\n            }\n        },\n        onMouseMove_wysiwyg: function(e) {\n            if (core.isDisabled || core.isReadOnly) return false;\n            const component = util.getParentElement(e.target, util.isComponent);\n            const lineBreakerStyle = core._lineBreaker.style;\n            if (component && !core.currentControllerName) {\n                const ctxEl = context.element;\n                let scrollTop = 0;\n                let el = ctxEl.wysiwyg;\n                do {\n                    scrollTop += el.scrollTop;\n                    el = el.parentElement;\n                }while (el && !/^(BODY|HTML)$/i.test(el.nodeName));\n                const wScroll = ctxEl.wysiwyg.scrollTop;\n                const offsets = event._getEditorOffsets(null);\n                const componentTop = util.getOffset(component, ctxEl.wysiwygFrame).top + wScroll;\n                const y = e.pageY + scrollTop + (options.iframe && !options.toolbarContainer ? ctxEl.toolbar.offsetHeight : 0);\n                const c = componentTop + (options.iframe ? scrollTop : offsets.top);\n                const isList = util.isListCell(component.parentNode);\n                let dir = \"\", top = \"\";\n                if ((isList ? !component.previousSibling : !util.isFormatElement(component.previousElementSibling)) && y < c + 20) {\n                    top = componentTop;\n                    dir = \"t\";\n                } else if ((isList ? !component.nextSibling : !util.isFormatElement(component.nextElementSibling)) && y > c + component.offsetHeight - 20) {\n                    top = componentTop + component.offsetHeight;\n                    dir = \"b\";\n                } else {\n                    lineBreakerStyle.display = \"none\";\n                    return;\n                }\n                core._variable._lineBreakComp = component;\n                core._variable._lineBreakDir = dir;\n                lineBreakerStyle.top = top - wScroll + \"px\";\n                core._lineBreakerButton.style.left = util.getOffset(component).left + component.offsetWidth / 2 - 15 + \"px\";\n                lineBreakerStyle.display = \"block\";\n            } else if (lineBreakerStyle.display !== \"none\") {\n                lineBreakerStyle.display = \"none\";\n            }\n        },\n        _enterPrevent (e) {\n            e.preventDefault();\n            if (!util.isMobile) return;\n            core.__focusTemp.focus();\n        },\n        _onMouseDown_lineBreak: function(e) {\n            e.preventDefault();\n        },\n        _onLineBreak: function(e) {\n            e.preventDefault();\n            const component = core._variable._lineBreakComp;\n            const dir = !this ? core._variable._lineBreakDir : this;\n            const isList = util.isListCell(component.parentNode);\n            const format = util.createElement(isList ? \"BR\" : util.isCell(component.parentNode) ? \"DIV\" : options.defaultTag);\n            if (!isList) format.innerHTML = \"<br>\";\n            if (core._charTypeHTML && !core.checkCharCount(format.outerHTML, \"byte-html\")) return;\n            component.parentNode.insertBefore(format, dir === \"t\" ? component : component.nextSibling);\n            core._lineBreaker.style.display = \"none\";\n            core._variable._lineBreakComp = null;\n            const focusEl = isList ? format : format.firstChild;\n            core.setRange(focusEl, 1, focusEl, 1);\n            // history stack\n            core.history.push(false);\n        },\n        _resizeObserver: null,\n        _toolbarObserver: null,\n        _addEvent: function() {\n            const eventWysiwyg = options.iframe ? core._ww : context.element.wysiwyg;\n            if (util.isResizeObserverSupported) {\n                this._resizeObserver = new _w.ResizeObserver(function(entries) {\n                    core.__callResizeFunction(-1, entries[0]);\n                });\n            }\n            /** toolbar event */ context.element.toolbar.addEventListener(\"mousedown\", event._buttonsEventHandler, false);\n            context.element._menuTray.addEventListener(\"mousedown\", event._buttonsEventHandler, false);\n            context.element.toolbar.addEventListener(\"click\", event.onClick_toolbar, false);\n            /** editor area */ eventWysiwyg.addEventListener(\"mousedown\", event.onMouseDown_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"click\", event.onClick_wysiwyg, false);\n            eventWysiwyg.addEventListener(util.isIE ? \"textinput\" : \"input\", event.onInput_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"keydown\", event.onKeyDown_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"keyup\", event.onKeyUp_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"paste\", event.onPaste_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"copy\", event.onCopy_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"cut\", event.onCut_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"drop\", event.onDrop_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"scroll\", event.onScroll_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"focus\", event.onFocus_wysiwyg, false);\n            eventWysiwyg.addEventListener(\"blur\", event.onBlur_wysiwyg, false);\n            /** line breaker */ event._lineBreakerBind = {\n                a: event._onLineBreak.bind(\"\"),\n                t: event._onLineBreak.bind(\"t\"),\n                b: event._onLineBreak.bind(\"b\")\n            };\n            eventWysiwyg.addEventListener(\"mousemove\", event.onMouseMove_wysiwyg, false);\n            core._lineBreakerButton.addEventListener(\"mousedown\", event._onMouseDown_lineBreak, false);\n            core._lineBreakerButton.addEventListener(\"click\", event._lineBreakerBind.a, false);\n            context.element.lineBreaker_t.addEventListener(\"mousedown\", event._lineBreakerBind.t, false);\n            context.element.lineBreaker_b.addEventListener(\"mousedown\", event._lineBreakerBind.b, false);\n            /** Events are registered mobile.  */ eventWysiwyg.addEventListener(\"touchstart\", event.onMouseDown_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            eventWysiwyg.addEventListener(\"touchend\", event.onClick_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            /** code view area auto line */ if (options.height === \"auto\" && !options.codeMirrorEditor) {\n                context.element.code.addEventListener(\"keydown\", event._codeViewAutoHeight, false);\n                context.element.code.addEventListener(\"keyup\", event._codeViewAutoHeight, false);\n                context.element.code.addEventListener(\"paste\", event._codeViewAutoHeight, false);\n            }\n            /** resizingBar */ if (context.element.resizingBar) {\n                if (/\\d+/.test(options.height) && options.resizeEnable) {\n                    context.element.resizingBar.addEventListener(\"mousedown\", event.onMouseDown_resizingBar, false);\n                } else {\n                    util.addClass(context.element.resizingBar, \"se-resizing-none\");\n                }\n            }\n            /** set response toolbar */ event._setResponsiveToolbar();\n            /** responsive toolbar observer */ if (util.isResizeObserverSupported) this._toolbarObserver = new _w.ResizeObserver(core.resetResponsiveToolbar);\n            /** window event */ _w.addEventListener(\"resize\", event.onResize_window, false);\n            if (options.stickyToolbar > -1) {\n                _w.addEventListener(\"scroll\", event.onScroll_window, false);\n            }\n        },\n        _removeEvent: function() {\n            const eventWysiwyg = options.iframe ? core._ww : context.element.wysiwyg;\n            context.element.toolbar.removeEventListener(\"mousedown\", event._buttonsEventHandler);\n            context.element._menuTray.removeEventListener(\"mousedown\", event._buttonsEventHandler);\n            context.element.toolbar.removeEventListener(\"click\", event.onClick_toolbar);\n            eventWysiwyg.removeEventListener(\"mousedown\", event.onMouseDown_wysiwyg);\n            eventWysiwyg.removeEventListener(\"click\", event.onClick_wysiwyg);\n            eventWysiwyg.removeEventListener(util.isIE ? \"textinput\" : \"input\", event.onInput_wysiwyg);\n            eventWysiwyg.removeEventListener(\"keydown\", event.onKeyDown_wysiwyg);\n            eventWysiwyg.removeEventListener(\"keyup\", event.onKeyUp_wysiwyg);\n            eventWysiwyg.removeEventListener(\"paste\", event.onPaste_wysiwyg);\n            eventWysiwyg.removeEventListener(\"copy\", event.onCopy_wysiwyg);\n            eventWysiwyg.removeEventListener(\"cut\", event.onCut_wysiwyg);\n            eventWysiwyg.removeEventListener(\"drop\", event.onDrop_wysiwyg);\n            eventWysiwyg.removeEventListener(\"scroll\", event.onScroll_wysiwyg);\n            eventWysiwyg.removeEventListener(\"mousemove\", event.onMouseMove_wysiwyg);\n            core._lineBreakerButton.removeEventListener(\"mousedown\", event._onMouseDown_lineBreak);\n            core._lineBreakerButton.removeEventListener(\"click\", event._lineBreakerBind.a);\n            context.element.lineBreaker_t.removeEventListener(\"mousedown\", event._lineBreakerBind.t);\n            context.element.lineBreaker_b.removeEventListener(\"mousedown\", event._lineBreakerBind.b);\n            event._lineBreakerBind = null;\n            eventWysiwyg.removeEventListener(\"touchstart\", event.onMouseDown_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            eventWysiwyg.removeEventListener(\"touchend\", event.onClick_wysiwyg, {\n                passive: true,\n                useCapture: false\n            });\n            eventWysiwyg.removeEventListener(\"focus\", event.onFocus_wysiwyg);\n            eventWysiwyg.removeEventListener(\"blur\", event.onBlur_wysiwyg);\n            context.element.code.removeEventListener(\"keydown\", event._codeViewAutoHeight);\n            context.element.code.removeEventListener(\"keyup\", event._codeViewAutoHeight);\n            context.element.code.removeEventListener(\"paste\", event._codeViewAutoHeight);\n            if (context.element.resizingBar) {\n                context.element.resizingBar.removeEventListener(\"mousedown\", event.onMouseDown_resizingBar);\n            }\n            if (event._resizeObserver) {\n                event._resizeObserver.unobserve(context.element.wysiwygFrame);\n                event._resizeObserver = null;\n            }\n            if (event._toolbarObserver) {\n                event._toolbarObserver.unobserve(context.element._toolbarShadow);\n                event._toolbarObserver = null;\n            }\n            _w.removeEventListener(\"resize\", event.onResize_window);\n            _w.removeEventListener(\"scroll\", event.onScroll_window);\n        },\n        _setResponsiveToolbar: function() {\n            if (_responsiveButtons.length === 0) {\n                _responsiveButtons = null;\n                return;\n            }\n            event._responsiveCurrentSize = \"default\";\n            const sizeArray = event._responsiveButtonSize = [];\n            const buttonsObj = event._responsiveButtons = {\n                default: _responsiveButtons[0]\n            };\n            for(let i = 1, len = _responsiveButtons.length, size, buttonGroup; i < len; i++){\n                buttonGroup = _responsiveButtons[i];\n                size = buttonGroup[0] * 1;\n                sizeArray.push(size);\n                buttonsObj[size] = buttonGroup[1];\n            }\n            sizeArray.sort(function(a, b) {\n                return a - b;\n            }).unshift(\"default\");\n        }\n    };\n    /** functions */ const functions = {\n        /**\r\n         * @description Core, Util object\r\n         */ core: core,\n        util: util,\n        /**\r\n         * @description Event functions\r\n         * @param {Object} e Event Object\r\n         * @param {Object} core Core object\r\n         */ onload: null,\n        onScroll: null,\n        onMouseDown: null,\n        onClick: null,\n        onInput: null,\n        onKeyDown: null,\n        onKeyUp: null,\n        onCopy: null,\n        onCut: null,\n        onFocus: null,\n        /**\r\n         * @description Event functions\r\n         * @param {Object} e Event Object\r\n         * @param {Object} core Core object\r\n         * @param {String} contents Current contents\r\n         */ onBlur: null,\n        /**\r\n         * @description Event functions\r\n         * @param {String} contents Current contents\r\n         * @param {Object} core Core object\r\n         */ onChange: null,\n        /**\r\n         * @description Event functions\r\n         * @param {String} contents Current contents\r\n         * @param {Object} core Core object\r\n         */ onSave: null,\n        /**\r\n         * @description Event functions (drop, paste)\r\n         * When false is returned, the default behavior is stopped.\r\n         * If the string is returned, the cleanData value is modified to the return value.\r\n         * @param {Object} e Event object.\r\n         * @param {String} cleanData HTML string modified for editor format.\r\n         * @param {Boolean} maxChartCount option (true if max character is exceeded)\r\n         * @param {Object} core Core object\r\n         * @returns {Boolean|String}\r\n         */ onDrop: null,\n        onPaste: null,\n        /**\r\n         * @description Called just before the inline toolbar is positioned and displayed on the screen.\r\n         * @param {Element} toolbar Toolbar Element\r\n         * @param {Object} context The editor's context object (editor.getContext())\r\n         * @param {Object} core Core object\r\n         */ showInline: null,\n        /**\r\n         * @description Called just after the controller is positioned and displayed on the screen.\r\n         * controller - editing elements displayed on the screen [image resizing, table editor, link editor..]]\r\n         * @param {String} name The name of the plugin that called the controller\r\n         * @param {Array} controllers Array of Controller elements\r\n         * @param {Object} core Core object\r\n         */ showController: null,\n        /**\r\n         * @description An event when toggling between code view and wysiwyg view.\r\n         * @param {Boolean} isCodeView Whether the current code view mode\r\n         * @param {Object} core Core object\r\n         */ toggleCodeView: null,\n        /**\r\n         * @description An event when toggling full screen.\r\n         * @param {Boolean} isFullScreen Whether the current full screen mode\r\n         * @param {Object} core Core object\r\n         */ toggleFullScreen: null,\n        /**\r\n         * @description It replaces the default callback function of the image upload\r\n         * @param {Object} response Response object\r\n         * @param {Object} info Input information\r\n         * - linkValue: Link url value\r\n         * - linkNewWindow: Open in new window Check Value\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update image if true, create image if false\r\n         * - element: If isUpdate is true, the currently selected image.\r\n         * @param {Object} core Core object\r\n         */ imageUploadHandler: null,\n        /**\r\n         * @description It replaces the default callback function of the video upload\r\n         * @param xmlHttp xmlHttpRequest object\r\n         * @param info Input information\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update video if true, create video if false\r\n         * - element: If isUpdate is true, the currently selected video.\r\n         * @param core Core object\r\n         */ videoUploadHandler: null,\n        /**\r\n         * @description It replaces the default callback function of the audio upload\r\n         * @param xmlHttp xmlHttpRequest object\r\n         * @param info Input information\r\n         * - isUpdate: Update audio if true, create audio if false\r\n         * - element: If isUpdate is true, the currently selected audio.\r\n         * @param core Core object\r\n         */ audioUploadHandler: null,\n        /**\r\n         * @description Called before the image is uploaded\r\n         * If true is returned, the internal upload process runs normally.\r\n         * If false is returned, no image upload is performed.\r\n         * If new fileList are returned,  replaced the previous fileList\r\n         * If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         * @param {Array} files Files array\r\n         * @param {Object} info info: {\r\n         * - linkValue: Link url value\r\n         * - linkNewWindow: Open in new window Check Value\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update image if true, create image if false\r\n         * - element: If isUpdate is true, the currently selected image.\r\n         * }\r\n         * @param {Object} core Core object\r\n         * @param {Function} uploadHandler If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         *                \"uploadHandler\" is an upload function with \"core\" and \"info\" bound.\r\n         *                [upload files] : uploadHandler(files or [new File(...),])\r\n         *                [error]        : uploadHandler(\"Error message\")\r\n         *                [Just finish]  : uploadHandler()\r\n         *                [directly register] : uploadHandler(response) // Same format as \"imageUploadUrl\" response\r\n         *                                   ex) {\r\n         *                                      // \"errorMessage\": \"insert error message\",\r\n         *                                      \"result\": [ { \"url\": \"...\", \"name\": \"...\", \"size\": \"999\" }, ]\r\n         *                                   }\r\n         * @returns {Boolean|Array|undefined}\r\n         */ onImageUploadBefore: null,\n        /**\r\n         * @description Called before the video is uploaded\r\n         * If true is returned, the internal upload process runs normally.\r\n         * If false is returned, no video(iframe, video) upload is performed.\r\n         * If new fileList are returned,  replaced the previous fileList\r\n         * If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         * @param {Array} files Files array\r\n         * @param {Object} info info: {\r\n         * - inputWidth: Value of width input\r\n         * - inputHeight: Value of height input\r\n         * - align: Align Check Value\r\n         * - isUpdate: Update video if true, create video if false\r\n         * - element: If isUpdate is true, the currently selected video.\r\n         * }\r\n         * @param {Object} core Core object\r\n         * @param {Function} uploadHandler If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         *                \"uploadHandler\" is an upload function with \"core\" and \"info\" bound.\r\n         *                [upload files] : uploadHandler(files or [new File(...),])\r\n         *                [error]        : uploadHandler(\"Error message\")\r\n         *                [Just finish]  : uploadHandler()\r\n         *                [directly register] : uploadHandler(response) // Same format as \"videoUploadUrl\" response\r\n         *                                   ex) {\r\n         *                                      // \"errorMessage\": \"insert error message\",\r\n         *                                      \"result\": [ { \"url\": \"...\", \"name\": \"...\", \"size\": \"999\" }, ]\r\n         *                                   }\r\n         * @returns {Boolean|Array|undefined}\r\n         */ onVideoUploadBefore: null,\n        /**\r\n         * @description Called before the audio is uploaded\r\n         * If true is returned, the internal upload process runs normally.\r\n         * If false is returned, no audio upload is performed.\r\n         * If new fileList are returned,  replaced the previous fileList\r\n         * If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         * @param {Array} files Files array\r\n         * @param {Object} info info: {\r\n         * - isUpdate: Update audio if true, create audio if false\r\n         * - element: If isUpdate is true, the currently selected audio.\r\n         * }\r\n         * @param {Object} core Core object\r\n         * @param {Function} uploadHandler If undefined is returned, it waits until \"uploadHandler\" is executed.\r\n         *                \"uploadHandler\" is an upload function with \"core\" and \"info\" bound.\r\n         *                [upload files] : uploadHandler(files or [new File(...),])\r\n         *                [error]        : uploadHandler(\"Error message\")\r\n         *                [Just finish]  : uploadHandler()\r\n         *                [directly register] : uploadHandler(response) // Same format as \"audioUploadUrl\" response\r\n         *                                   ex) {\r\n         *                                      // \"errorMessage\": \"insert error message\",\r\n         *                                      \"result\": [ { \"url\": \"...\", \"name\": \"...\", \"size\": \"999\" }, ]\r\n         *                                   }\r\n         * @returns {Boolean|Array|undefined}\r\n         */ onAudioUploadBefore: null,\n        /**\r\n         * @description Called when the image is uploaded, updated, deleted\r\n         * @param {Element} targetElement Target element\r\n         * @param {Number} index Uploaded index\r\n         * @param {String} state Upload status ('create', 'update', 'delete')\r\n         * @param {Object} info Image info object\r\n         * - index: data index\r\n         * - name: file name\r\n         * - size: file size\r\n         * - select: select function\r\n         * - delete: delete function\r\n         * - element: target element\r\n         * - src: src attribute of tag\r\n         * @param {Number} remainingFilesCount Count of remaining files to upload (0 when added as a url)\r\n         * @param {Object} core Core object\r\n         */ onImageUpload: null,\n        /**\r\n        * @description Called when the video(iframe, video) is is uploaded, updated, deleted\r\n        * -- arguments is same \"onImageUpload\" --\r\n        */ onVideoUpload: null,\n        /**\r\n        * @description Called when the audio is is uploaded, updated, deleted\r\n        * -- arguments is same \"onImageUpload\" --\r\n        */ onAudioUpload: null,\n        /**\r\n         * @description Called when the image is upload failed\r\n         * @param {String} errorMessage Error message\r\n         * @param {Object} result Response Object\r\n         * @param {Object} core Core object\r\n         * @returns {Boolean}\r\n         */ onImageUploadError: null,\n        /**\r\n         * @description Called when the video(iframe, video) upload failed\r\n         * -- arguments is same \"onImageUploadError\" --\r\n         */ onVideoUploadError: null,\n        /**\r\n         * @description Called when the audio upload failed\r\n         * -- arguments is same \"onImageUploadError\" --\r\n         */ onAudioUploadError: null,\n        /**\r\n         * @description Called when the editor is resized using the bottom bar\r\n         */ onResizeEditor: null,\n        /**\r\n         * @description Called after the \"setToolbarButtons\" invocation.\r\n         * Can be used to tweak buttons properties (useful for custom buttons)\r\n         * @param {Array} buttonList Button list \r\n         * @param {Object} core Core object\r\n         */ onSetToolbarButtons: null,\n        /**\r\n         * @description Reset the buttons on the toolbar. (Editor is not reloaded)\r\n         * You cannot set a new plugin for the button.\r\n         * @param {Array} buttonList Button list \r\n         */ setToolbarButtons: function(buttonList) {\n            core.submenuOff();\n            core.containerOff();\n            core.moreLayerOff();\n            const newToolbar = _constructor__WEBPACK_IMPORTED_MODULE_4__[\"default\"]._createToolBar(_d, buttonList, core.plugins, options);\n            _responsiveButtons = newToolbar.responsiveButtons;\n            event._setResponsiveToolbar();\n            context.element.toolbar.replaceChild(newToolbar._buttonTray, context.element._buttonTray);\n            const newContext = (0,_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(context.element.originElement, core._getConstructed(context.element), options);\n            context.element = newContext.element;\n            context.tool = newContext.tool;\n            if (options.iframe) context.element.wysiwyg = core._wd.body;\n            core._recoverButtonStates();\n            core._cachingButtons();\n            core.history._resetCachingButton();\n            core.effectNode = null;\n            if (core.hasFocus) event._applyTagEffects();\n            if (core.isReadOnly) util.setDisabledButtons(true, core.resizingDisabledButtons);\n            if (typeof functions.onSetToolbarButtons === \"function\") functions.onSetToolbarButtons(newToolbar._buttonTray.querySelectorAll(\"button\"), core);\n        },\n        /**\r\n         * @description Add or reset option property (Editor is reloaded)\r\n         * @param {Object} _options Options\r\n         */ setOptions: function(_options) {\n            event._removeEvent();\n            core._resetComponents();\n            util.removeClass(core._styleCommandMap.showBlocks, \"active\");\n            util.removeClass(core._styleCommandMap.codeView, \"active\");\n            core._variable.isCodeView = false;\n            core._iframeAuto = null;\n            core.plugins = _options.plugins || core.plugins;\n            const mergeOptions = [\n                options,\n                _options\n            ].reduce(function(init, option) {\n                for(let key in option){\n                    if (!util.hasOwn(option, key)) continue;\n                    if (key === \"plugins\" && option[key] && init[key]) {\n                        let i = init[key], o = option[key];\n                        i = i.length ? i : _w.Object.keys(i).map(function(name) {\n                            return i[name];\n                        });\n                        o = o.length ? o : _w.Object.keys(o).map(function(name) {\n                            return o[name];\n                        });\n                        init[key] = o.filter(function(val) {\n                            return i.indexOf(val) === -1;\n                        }).concat(i);\n                    } else {\n                        init[key] = option[key];\n                    }\n                }\n                return init;\n            }, {});\n            const el = context.element;\n            const _initHTML = el.wysiwyg.innerHTML;\n            // set option\n            const cons = _constructor__WEBPACK_IMPORTED_MODULE_4__[\"default\"]._setOptions(mergeOptions, context, options);\n            if (cons.callButtons) {\n                pluginCallButtons = cons.callButtons;\n                core.initPlugins = {};\n            }\n            if (cons.plugins) {\n                core.plugins = plugins = cons.plugins;\n            }\n            // reset context\n            if (el._menuTray.children.length === 0) this._menuTray = {};\n            _responsiveButtons = cons.toolbar.responsiveButtons;\n            core.options = options = mergeOptions;\n            core.lang = lang = options.lang;\n            if (options.iframe) {\n                el.wysiwygFrame.addEventListener(\"load\", function() {\n                    util._setIframeDocument(this, options);\n                    core._setOptionsInit(el, _initHTML);\n                });\n            }\n            el.editorArea.appendChild(el.wysiwygFrame);\n            if (!options.iframe) {\n                core._setOptionsInit(el, _initHTML);\n            }\n        },\n        /**\r\n         * @description Set \"options.defaultStyle\" style.\r\n         * Define the style of the edit area\r\n         * It can also be defined with the \"setOptions\" method, but the \"setDefaultStyle\" method does not render the editor again.\r\n         * @param {String} style Style string\r\n         */ setDefaultStyle: function(style) {\n            const newStyles = options._editorStyles = util._setDefaultOptionStyle(options, style);\n            const el = context.element;\n            // top area\n            el.topArea.style.cssText = newStyles.top;\n            // code view\n            el.code.style.cssText = options._editorStyles.frame;\n            el.code.style.display = \"none\";\n            if (options.height === \"auto\") {\n                el.code.style.overflow = \"hidden\";\n            } else {\n                el.code.style.overflow = \"\";\n            }\n            // wysiwyg frame\n            if (!options.iframe) {\n                el.wysiwygFrame.style.cssText = newStyles.frame + newStyles.editor;\n            } else {\n                el.wysiwygFrame.style.cssText = newStyles.frame;\n                el.wysiwyg.style.cssText = newStyles.editor;\n            }\n        },\n        /**\r\n         * @description Open a notice area\r\n         * @param {String} message Notice message\r\n         */ noticeOpen: function(message) {\n            core.notice.open.call(core, message);\n        },\n        /**\r\n         * @description Close a notice area\r\n         */ noticeClose: function() {\n            core.notice.close.call(core);\n        },\n        /**\r\n         * @description Copying the contents of the editor to the original textarea and execute onSave callback\r\n         * * not working during enabled codeView mode\r\n         */ save: function() {\n            const contents = core.getContents(false);\n            context.element.originElement.value = contents;\n            event.onSave_wysiwyg(contents, core);\n        },\n        /**\r\n         * @description Gets the suneditor's context object. Contains settings, plugins, and cached element objects\r\n         * @returns {Object}\r\n         */ getContext: function() {\n            return context;\n        },\n        /**\r\n         * @description Gets the contents of the suneditor\r\n         * * not working during enabled codeView mode\r\n         * @param {Boolean} onlyContents - Return only the contents of the body without headers when the \"fullPage\" option is true\r\n         * @returns {String}\r\n         */ getContents: function(onlyContents) {\n            return core.getContents(onlyContents);\n        },\n        /**\r\n         * @description Gets only the text of the suneditor contents\r\n         * * not working during enabled codeView mode\r\n         * @returns {String}\r\n         */ getText: function() {\n            return context.element.wysiwyg.textContent;\n        },\n        /**\r\n         * @description Get the editor's number of characters or binary data size.\r\n         * You can use the \"charCounterType\" option format.\r\n         * @param {String|null} charCounterType options - charCounterType ('char', 'byte', 'byte-html')\r\n         * If argument is no value, the currently set \"charCounterType\" option is used.\r\n         * @returns {Number}\r\n         */ getCharCount: function(charCounterType) {\n            charCounterType = typeof charCounterType === \"string\" ? charCounterType : options.charCounterType;\n            return core.getCharLength(core._charTypeHTML ? context.element.wysiwyg.innerHTML : context.element.wysiwyg.textContent, charCounterType);\n        },\n        /**\r\n         * @description Gets uploaded images informations\r\n         * - index: data index\r\n         * - name: file name\r\n         * - size: file size\r\n         * - select: select function\r\n         * - delete: delete function\r\n         * - element: target element\r\n         * - src: src attribute of tag\r\n         * @returns {Array}\r\n         */ getImagesInfo: function() {\n            return context.image ? context.image._infoList : [];\n        },\n        /**\r\n         * @description Gets uploaded files(plugin using fileManager) information list.\r\n         * image: [img], video: [video, iframe], audio: [audio]\r\n         * When the argument value is 'image', it is the same function as \"getImagesInfo\".\r\n         * - index: data index\r\n         * - name: file name\r\n         * - size: file size\r\n         * - select: select function\r\n         * - delete: delete function\r\n         * - element: target element\r\n         * - src: src attribute of tag\r\n         * @param {String} pluginName Plugin name (image, video, audio)\r\n         * @returns {Array}\r\n         */ getFilesInfo: function(pluginName) {\n            return context[pluginName] ? context[pluginName]._infoList : [];\n        },\n        /**\r\n         * @description Upload images using image plugin\r\n         * @param {FileList} files FileList\r\n         */ insertImage: function(files) {\n            if (!core.plugins.image || !files) return;\n            if (!core.initPlugins.image) core.callPlugin(\"image\", core.plugins.image.submitAction.bind(core, files), null);\n            else core.plugins.image.submitAction.call(core, files);\n            core.focus();\n        },\n        /**\r\n         * @description Inserts an HTML element or HTML string or plain string at the current cursor position\r\n         * @param {Element|String} html HTML Element or HTML string or plain string\r\n         * @param {Boolean} notCleaningData If true, inserts the HTML string without refining it with core.cleanHTML.\r\n         * @param {Boolean} checkCharCount If true, if \"options.maxCharCount\" is exceeded when \"element\" is added, null is returned without addition.\r\n         * @param {Boolean} rangeSelection If true, range select the inserted node.\r\n         */ insertHTML: function(html, notCleaningData, checkCharCount, rangeSelection) {\n            if (!context.element.wysiwygFrame.contains(core.getSelection().focusNode)) core.focus();\n            if (typeof html === \"string\") {\n                if (!notCleaningData) html = core.cleanHTML(html, null, null);\n                try {\n                    if (util.isListCell(util.getFormatElement(core.getSelectionNode(), null))) {\n                        const dom = _d.createRange().createContextualFragment(html);\n                        const domTree = dom.childNodes;\n                        if (core._isFormatData(domTree)) html = core._convertListCell(domTree);\n                    }\n                    const dom = _d.createRange().createContextualFragment(html);\n                    const domTree = dom.childNodes;\n                    if (checkCharCount) {\n                        const type = core._charTypeHTML ? \"outerHTML\" : \"textContent\";\n                        let checkHTML = \"\";\n                        for(let i = 0, len = domTree.length; i < len; i++){\n                            checkHTML += domTree[i][type];\n                        }\n                        if (!core.checkCharCount(checkHTML, null)) return;\n                    }\n                    let c, a, t, prev, firstCon;\n                    while(c = domTree[0]){\n                        if (prev && prev.nodeType === 3 && a && a.nodeType === 1 && util.isBreak(c)) {\n                            prev = c;\n                            util.removeItem(c);\n                            continue;\n                        }\n                        t = core.insertNode(c, a, false);\n                        a = t.container || t;\n                        if (!firstCon) firstCon = t;\n                        prev = c;\n                    }\n                    if (prev.nodeType === 3 && a.nodeType === 1) a = prev;\n                    const offset = a.nodeType === 3 ? t.endOffset || a.textContent.length : a.childNodes.length;\n                    if (rangeSelection) core.setRange(firstCon.container || firstCon, firstCon.startOffset || 0, a, offset);\n                    else core.setRange(a, offset, a, offset);\n                } catch (error) {\n                    if (core.isDisabled || core.isReadOnly) return;\n                    console.warn(\"[SUNEDITOR.insertHTML.fail] \" + error);\n                    core.execCommand(\"insertHTML\", false, html);\n                }\n            } else {\n                if (util.isComponent(html)) {\n                    core.insertComponent(html, false, checkCharCount, false);\n                } else {\n                    let afterNode = null;\n                    if (util.isFormatElement(html) || util.isMedia(html)) {\n                        afterNode = util.getFormatElement(core.getSelectionNode(), null);\n                    }\n                    core.insertNode(html, afterNode, checkCharCount);\n                }\n            }\n            core.effectNode = null;\n            core.focus();\n            // history stack\n            core.history.push(false);\n        },\n        /**\r\n         * @description Change the contents of the suneditor\r\n         * @param {String|undefined} contents Contents to Input\r\n         */ setContents: function(contents) {\n            core.setContents(contents);\n        },\n        /**\r\n         * @description Add contents to the suneditor\r\n         * @param {String} contents Contents to Input\r\n         */ appendContents: function(contents) {\n            const convertValue = core.convertContentsForEditor(contents);\n            if (!core._variable.isCodeView) {\n                const temp = util.createElement(\"DIV\");\n                temp.innerHTML = convertValue;\n                const wysiwyg = context.element.wysiwyg;\n                const children = temp.children;\n                for(let i = 0, len = children.length; i < len; i++){\n                    if (children[i]) {\n                        wysiwyg.appendChild(children[i]);\n                    }\n                }\n            } else {\n                core._setCodeView(core._getCodeView() + \"\\n\" + core.convertHTMLForCodeView(convertValue, false));\n            }\n            // history stack\n            core.history.push(false);\n        },\n        /**\r\n         * @description Switch to or off \"ReadOnly\" mode.\r\n         * @param {Boolean} value \"readOnly\" boolean value.\r\n         */ readOnly: function(value) {\n            core.isReadOnly = value;\n            util.setDisabledButtons(!!value, core.resizingDisabledButtons);\n            if (value) {\n                /** off menus */ core.controllersOff();\n                if (core.submenuActiveButton && core.submenuActiveButton.disabled) core.submenuOff();\n                if (core._moreLayerActiveButton && core._moreLayerActiveButton.disabled) core.moreLayerOff();\n                if (core.containerActiveButton && core.containerActiveButton.disabled) core.containerOff();\n                if (core.modalForm) core.plugins.dialog.close.call(core);\n                context.element.code.setAttribute(\"readOnly\", \"true\");\n                util.addClass(context.element.wysiwygFrame, \"se-read-only\");\n            } else {\n                context.element.code.removeAttribute(\"readOnly\");\n                util.removeClass(context.element.wysiwygFrame, \"se-read-only\");\n            }\n            if (options.codeMirrorEditor) options.codeMirrorEditor.setOption(\"readOnly\", !!value);\n        },\n        /**\r\n         * @description Disable the suneditor\r\n         */ disable: function() {\n            this.toolbar.disable();\n            this.wysiwyg.disable();\n        },\n        /**\r\n         * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n         */ disabled: function() {\n            this.disable();\n        },\n        /**\r\n         * @description Enable the suneditor\r\n         */ enable: function() {\n            this.toolbar.enable();\n            this.wysiwyg.enable();\n        },\n        /**\r\n         * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n         */ enabled: function() {\n            this.enable();\n        },\n        /**\r\n         * @description Show the suneditor\r\n         */ show: function() {\n            const topAreaStyle = context.element.topArea.style;\n            if (topAreaStyle.display === \"none\") topAreaStyle.display = options.display;\n        },\n        /**\r\n         * @description Hide the suneditor\r\n         */ hide: function() {\n            context.element.topArea.style.display = \"none\";\n        },\n        /**\r\n         * @description Destroy the suneditor\r\n         */ destroy: function() {\n            /** off menus */ core.submenuOff();\n            core.containerOff();\n            core.controllersOff();\n            if (core.notice) core.notice.close.call(core);\n            if (core.modalForm) core.plugins.dialog.close.call(core);\n            /** remove history */ core.history._destroy();\n            /** remove event listeners */ event._removeEvent();\n            /** remove element */ util.removeItem(context.element.toolbar);\n            util.removeItem(context.element.topArea);\n            /** remove object reference */ for(let k in core.functions){\n                if (util.hasOwn(core, k)) delete core.functions[k];\n            }\n            for(let k in core){\n                if (util.hasOwn(core, k)) delete core[k];\n            }\n            for(let k in event){\n                if (util.hasOwn(event, k)) delete event[k];\n            }\n            for(let k in context){\n                if (util.hasOwn(context, k)) delete context[k];\n            }\n            for(let k in pluginCallButtons){\n                if (util.hasOwn(pluginCallButtons, k)) delete pluginCallButtons[k];\n            }\n            /** remove user object */ for(let k in this){\n                if (util.hasOwn(this, k)) delete this[k];\n            }\n        },\n        /**\r\n         * @description Toolbar methods\r\n         */ toolbar: {\n            /**\r\n             * @description Disable the toolbar\r\n             */ disable: function() {\n                /** off menus */ core.submenuOff();\n                core.moreLayerOff();\n                core.containerOff();\n                context.tool.cover.style.display = \"block\";\n            },\n            /**\r\n             * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n             */ disabled: function() {\n                this.disable();\n            },\n            /**\r\n             * @description Enable the toolbar\r\n             */ enable: function() {\n                context.tool.cover.style.display = \"none\";\n            },\n            /**\r\n             * @description Provided for backward compatibility and will be removed in 3.0.0 version\r\n             */ enabled: function() {\n                this.enable();\n            },\n            /**\r\n             * @description Show the toolbar\r\n             */ show: function() {\n                if (core._isInline) {\n                    event._showToolbarInline();\n                } else {\n                    context.element.toolbar.style.display = \"\";\n                    context.element._stickyDummy.style.display = \"\";\n                }\n                event.onResize_window();\n            },\n            /**\r\n             * @description Hide the toolbar\r\n             */ hide: function() {\n                if (core._isInline) {\n                    event._hideToolbar();\n                } else {\n                    context.element.toolbar.style.display = \"none\";\n                    context.element._stickyDummy.style.display = \"none\";\n                }\n                event.onResize_window();\n            }\n        },\n        /**\r\n         * @description Wysiwyg methods\r\n         */ wysiwyg: {\n            /**\r\n             * @description Disable the wysiwyg area\r\n             */ disable: function() {\n                /** off menus */ core.controllersOff();\n                if (core.modalForm) core.plugins.dialog.close.call(core);\n                context.element.wysiwyg.setAttribute(\"contenteditable\", false);\n                core.isDisabled = true;\n                if (options.codeMirrorEditor) {\n                    options.codeMirrorEditor.setOption(\"readOnly\", true);\n                } else {\n                    context.element.code.setAttribute(\"disabled\", \"disabled\");\n                }\n            },\n            /**\r\n             * @description Enable the wysiwyg area\r\n             */ enable: function() {\n                context.element.wysiwyg.setAttribute(\"contenteditable\", true);\n                core.isDisabled = false;\n                if (options.codeMirrorEditor) {\n                    options.codeMirrorEditor.setOption(\"readOnly\", false);\n                } else {\n                    context.element.code.removeAttribute(\"disabled\");\n                }\n            }\n        }\n    };\n    /************ Core init ************/ // functions\n    core.functions = functions;\n    core.options = options;\n    // Create to sibling node\n    let contextEl = context.element;\n    let originEl = contextEl.originElement;\n    let topEl = contextEl.topArea;\n    originEl.style.display = \"none\";\n    topEl.style.display = \"block\";\n    // init\n    if (options.iframe) {\n        contextEl.wysiwygFrame.addEventListener(\"load\", function() {\n            util._setIframeDocument(this, options);\n            core._editorInit(false, options.value);\n            options.value = null;\n        });\n    }\n    // insert editor element\n    if (typeof originEl.nextElementSibling === \"object\") {\n        originEl.parentNode.insertBefore(topEl, originEl.nextElementSibling);\n    } else {\n        originEl.parentNode.appendChild(topEl);\n    }\n    contextEl.editorArea.appendChild(contextEl.wysiwygFrame);\n    contextEl = originEl = topEl = null;\n    // init\n    if (!options.iframe) {\n        core._editorInit(false, options.value);\n        options.value = null;\n    }\n    return functions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL2xpYi9jb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRXlDO0FBQ1I7QUFDQTtBQUNOO0FBQ3NCO0FBRWpEOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsNkJBQWUsb0NBQVVLLE9BQU8sRUFBRUMsaUJBQWlCLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLGtCQUFrQjtJQUMzRixNQUFNQyxLQUFLTixRQUFRTyxPQUFPLENBQUNDLGFBQWEsQ0FBQ0MsYUFBYSxJQUFJQztJQUMxRCxNQUFNQyxLQUFLTCxHQUFHTSxXQUFXLElBQUlDO0lBQzdCLE1BQU1DLE9BQU9oQiw2Q0FBS0E7SUFDbEIsTUFBTWlCLFFBQVFYLFFBQVFXLEtBQUs7SUFFM0I7OztLQUdDLEdBQ0QsTUFBTUMsT0FBTztRQUNUVixJQUFJQTtRQUNKSyxJQUFJQTtRQUNKTSxTQUFTLElBQUlOLEdBQUdPLFNBQVM7UUFDekJDLFVBQVVmLFFBQVFnQixHQUFHO1FBQ3JCQyxlQUFlO1FBQ2ZDLHNCQUFzQjtRQUN0QkMsWUFBWW5CLFFBQVFvQixpQkFBaUI7UUFDckNDLFlBQVlYLEtBQUtZLGdCQUFnQixDQUFDdEIsUUFBUW9CLGlCQUFpQjtRQUMzREcsYUFBYTNCLFFBQVFPLE9BQU8sQ0FBQ3FCLFVBQVU7UUFFdkM7OztTQUdDLEdBQ0RDLEtBQUs7UUFFTDs7O1NBR0MsR0FDREMsS0FBSztRQUVMOzs7U0FHQyxHQUNEQyxhQUFhO1FBRWI7OztTQUdDLEdBQ0RDLGtDQUFrQztRQUVsQzs7U0FFQyxHQUNEbEIsTUFBTUE7UUFFTjs7U0FFQyxHQUNEbUIsV0FBVztRQUVYOztTQUVDLEdBQ0Q3QixTQUFTO1FBRVQ7O1NBRUMsR0FDRDhCLGlCQUFpQjtRQUVqQjs7U0FFQyxHQUNEQyxRQUFRcEMsK0RBQU9BO1FBRWY7O1NBRUMsR0FDRGdCLE9BQU9BO1FBRVA7O1NB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O0lBRS9CLE9BQU87SUFDUCxJQUFJLENBQUNwMUMsUUFBUXVRLE1BQU0sRUFBRTtRQUNqQjNQLEtBQUtnL0IsV0FBVyxDQUFDLE9BQU81L0IsUUFBUThQLEtBQUs7UUFDckM5UCxRQUFROFAsS0FBSyxHQUFHO0lBQ3BCO0lBRUEsT0FBT2pPO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvbGliL2NvcmUuanM/NzQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcclxuICpcclxuICogc3VuZWRpdG9yLmpzXHJcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXHJcbiAqIE1JVCBsaWNlbnNlLlxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IF9Db25zdHJ1Y3RvciBmcm9tICcuL2NvbnN0cnVjdG9yJztcclxuaW1wb3J0IF9Db250ZXh0IGZyb20gJy4vY29udGV4dCc7XHJcbmltcG9ydCBfaGlzdG9yeSBmcm9tICcuL2hpc3RvcnknO1xyXG5pbXBvcnQgX3V0aWwgZnJvbSAnLi91dGlsJztcclxuaW1wb3J0IF9ub3RpY2UgZnJvbSAnLi4vcGx1Z2lucy9tb2R1bGVzL19ub3RpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvbiBTdW5FZGl0b3IgY29uc3R1Y3RvciBmdW5jdGlvbi5cclxuICogY3JlYXRlIGNvcmUgb2JqZWN0IGFuZCBldmVudCByZWdpc3RyYXRpb24uXHJcbiAqIGNvcmUsIGV2ZW50LCBmdW5jdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcclxuICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbkNhbGxCdXR0b25zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW5zIFxyXG4gKiBAcGFyYW0ge09iamVjdH0gbGFuZ1xyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gX3Jlc3BvbnNpdmVCdXR0b25zXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IGZ1bmN0aW9ucyBPYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb250ZXh0LCBwbHVnaW5DYWxsQnV0dG9ucywgcGx1Z2lucywgbGFuZywgb3B0aW9ucywgX3Jlc3BvbnNpdmVCdXR0b25zKSB7XHJcbiAgICBjb25zdCBfZCA9IGNvbnRleHQuZWxlbWVudC5vcmlnaW5FbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XHJcbiAgICBjb25zdCBfdyA9IF9kLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcclxuICAgIGNvbnN0IHV0aWwgPSBfdXRpbDtcclxuICAgIGNvbnN0IGljb25zID0gb3B0aW9ucy5pY29ucztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbiBlZGl0b3IgY29yZSBvYmplY3RcclxuICAgICAqIHNob3VsZCBhbHdheXMgYmluZCB0aGlzIG9iamVjdCB3aGVuIHJlZ2lzdGVyaW5nIGFuIGV2ZW50IGluIHRoZSBwbHVnLWluLlxyXG4gICAgICovXHJcbiAgICBjb25zdCBjb3JlID0ge1xyXG4gICAgICAgIF9kOiBfZCxcclxuICAgICAgICBfdzogX3csXHJcbiAgICAgICAgX3BhcnNlcjogbmV3IF93LkRPTVBhcnNlcigpLFxyXG4gICAgICAgIF9wcmV2UnRsOiBvcHRpb25zLnJ0bCxcclxuICAgICAgICBfZWRpdG9ySGVpZ2h0OiAwLFxyXG4gICAgICAgIF9lZGl0b3JIZWlnaHRQYWRkaW5nOiAwLFxyXG4gICAgICAgIF9saXN0Q2FtZWw6IG9wdGlvbnMuX19saXN0Q29tbW9uU3R5bGUsXHJcbiAgICAgICAgX2xpc3RLZWJhYjogdXRpbC5jYW1lbFRvS2ViYWJDYXNlKG9wdGlvbnMuX19saXN0Q29tbW9uU3R5bGUpLFxyXG4gICAgICAgIF9fZm9jdXNUZW1wOiBjb250ZXh0LmVsZW1lbnQuX2ZvY3VzVGVtcCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERvY3VtZW50IG9iamVjdCBvZiB0aGUgaWZyYW1lIGlmIGNyZWF0ZWQgYXMgYW4gaWZyYW1lIHx8IF9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfd2Q6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBXaW5kb3cgb2JqZWN0IG9mIHRoZSBpZnJhbWUgaWYgY3JlYXRlZCBhcyBhbiBpZnJhbWUgfHwgX3dcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF93dzogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENsb3Nlc3QgU2hhZG93Um9vdCB0byBlZGl0b3IgaWYgZm91bmRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zaGFkb3dSb290OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQmxvY2sgY29udHJvbGxlciBtb3VzZWRvd24gZXZlbnRzIGluIFwic2hhZG93Um9vdFwiIGVudmlyb25tZW50XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2hhZG93Um9vdENvbnRyb2xsZXJFdmVudFRhcmdldDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFV0aWwgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRpbDogdXRpbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9ucyBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbnM6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFZGl0b3Igb3B0aW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wdGlvbnM6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb21wdXRlZCBzdHlsZSBvZiB0aGUgd3lzaXd5ZyBhcmVhICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5ZykpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgd3dDb21wdXRlZFN0eWxlOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gTm90aWNlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5vdGljZTogX25vdGljZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERlZmF1bHQgaWNvbnMgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWNvbnM6IGljb25zLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSGlzdG9yeSBvYmplY3QgZm9yIHVuZG8sIHJlZG9cclxuICAgICAgICAgKi9cclxuICAgICAgICBoaXN0b3J5OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRWxlbWVudHMgYW5kIHVzZXIgb3B0aW9ucyBwYXJhbWV0ZXJzIG9mIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUGx1Z2luIGJ1dHRvbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBwbHVnaW5DYWxsQnV0dG9uczogcGx1Z2luQ2FsbEJ1dHRvbnMsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBMb2FkZWQgcGx1Z2luc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBsdWdpbnM6IHBsdWdpbnMgfHwge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBXaGV0aGVyIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbml0UGx1Z2luczoge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPYmplY3QgZm9yIG1hbmFnaW5nIHN1Ym1lbnUgZWxlbWVudHNcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90YXJnZXRQbHVnaW5zOiB7fSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNhdmUgcmVuZGVyZWQgc3VibWVudXMgYW5kIGNvbnRhaW5lcnNcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tZW51VHJheToge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBsb2FkZWQgbGFuZ3VhZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBsYW5nOiBsYW5nLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGhlIHNlbGVjdGlvbiBub2RlIChjb3JlLmdldFNlbGVjdGlvbk5vZGUoKSkgdG8gd2hpY2ggdGhlIGVmZmVjdCB3YXMgbGFzdCBhcHBsaWVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZWZmZWN0Tm9kZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHN1Ym1lbnUgZWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1Ym1lbnU6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBjb250YWluZXIgZWxlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRhaW5lcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGN1cnJlbnQgc3VibWVudCBuYW1lXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc3VibWVudU5hbWU6ICcnLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gYmluZGVkIHN1Ym1lbnVPZmYgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYmluZGVkU3VibWVudU9mZjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGJpbmRlZCBjb250YWluZXJPZmYgbWV0aG9kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYmluZGVkQ29udGFpbmVyT2ZmOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gYWN0aXZlIGJ1dHRvbiBlbGVtZW50IGluIHN1Ym1lbnVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJtZW51QWN0aXZlQnV0dG9uOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gYWN0aXZlIGJ1dHRvbiBlbGVtZW50IGluIGNvbnRhaW5lclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRhaW5lckFjdGl2ZUJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBlbGVtZW50cyBhcnJheSB0byBiZSBwcm9jZXNzZWQgdW52aXNpYmxlIHdoZW4gdGhlIGNvbnRyb2xsZXJzT2ZmIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIChyZXNpemluZywgbGluayBtb2RpZmllZCBidXR0b24sIHRhYmxlIGNvbnRyb2xsZXIpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udHJvbGxlckFycmF5OiBbXSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4gdGhhdCBjYWxsZWQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY29udHJvbGxlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGN1cnJlbnRDb250cm9sbGVyTmFtZTogJycsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgdGFyZ2V0IGVsZW1lbnQgb2YgY3VycmVudCBjb250cm9sbGVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY3VycmVudENvbnRyb2xsZXJUYXJnZXQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgZmlsZSBjb21wb25lbnQgb2JqZWN0IG9mIGN1cnJlbnQgc2VsZWN0ZWQgZmlsZSB0YWcgKGdldEZpbGVDb21wb25lbnQpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY3VycmVudEZpbGVDb21wb25lbnRJbmZvOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQW4gYXJyYXkgb2YgYnV0dG9ucyB3aG9zZSBjbGFzcyBuYW1lIGlzIG5vdCBcInNlLWNvZGUtdmlldy1lbmFibGVkXCJcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb2RlVmlld0Rpc2FibGVkQnV0dG9uczogW10sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBbiBhcnJheSBvZiBidXR0b25zIHdob3NlIGNsYXNzIG5hbWUgaXMgbm90IFwic2UtcmVzaXppbmctZW5hYmxlZFwiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVzaXppbmdEaXNhYmxlZEJ1dHRvbnM6IFtdLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gYWN0aXZlIG1vcmUgbGF5ZXIgZWxlbWVudCBpbiBzdWJtZW51XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbW9yZUxheWVyQWN0aXZlQnV0dG9uOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGFnIHdoaXRlbGlzdCBSZWdFeHAgb2JqZWN0IHVzZWQgaW4gXCJfY29uc2lzdGVuY3lDaGVja09mSFRNTFwiIG1ldGhvZFxyXG4gICAgICAgICAqIF4ob3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdCkkXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGFnIGJsYWNrbGlzdCBSZWdFeHAgb2JqZWN0IHVzZWQgaW4gXCJfY29uc2lzdGVuY3lDaGVja09mSFRNTFwiIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2h0bWxDaGVja0JsYWNrbGlzdFJlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ0V4cCB3aGVuIHVzaW5nIGNoZWNrIGRpc2FsbG93ZCB0YWdzLiAoYiwgaSwgaW5zLCBzdHJpa2UsIHMpXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZGlzYWxsb3dlZFRleHRUYWdzUmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRWRpdG9yIHRhZ3Mgd2hpdGVsaXN0IChSZWdFeHAgb2JqZWN0KVxyXG4gICAgICAgICAqIHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdChvcHRpb25zLl9lZGl0b3JUYWdzV2hpdGVsaXN0KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVkaXRvclRhZ3NXaGl0ZWxpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFZGl0b3IgdGFncyBibGFja2xpc3QgKFJlZ0V4cCBvYmplY3QpXHJcbiAgICAgICAgICogdXRpbC5jcmVhdGVUYWdzQmxhY2tsaXN0KG9wdGlvbnMudGFnc0JsYWNrbGlzdClcclxuICAgICAgICAgKi9cclxuICAgICAgICBlZGl0b3JUYWdzQmxhY2tsaXN0UmVnRXhwOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGFnIHdoaXRlbGlzdCB3aGVuIHBhc3RpbmcgKFJlZ0V4cCBvYmplY3QpXHJcbiAgICAgICAgICogdXRpbC5jcmVhdGVUYWdzV2hpdGVsaXN0KG9wdGlvbnMucGFzdGVUYWdzV2hpdGVsaXN0KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyBibGFja2xpc3Qgd2hlbiBwYXN0aW5nIChSZWdFeHAgb2JqZWN0KVxyXG4gICAgICAgICAqIHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChvcHRpb25zLnBhc3RlVGFnc0JsYWNrbGlzdClcclxuICAgICAgICAgKi9cclxuICAgICAgICBwYXN0ZVRhZ3NCbGFja2xpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBCb29sZWFuIHZhbHVlIG9mIHdoZXRoZXIgdGhlIGVkaXRvciBoYXMgZm9jdXNcclxuICAgICAgICAgKi9cclxuICAgICAgICBoYXNGb2N1czogZmFsc2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBCb29sZWFuIHZhbHVlIG9mIHdoZXRoZXIgdGhlIGVkaXRvciBpcyBkaXNhYmxlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHRoZSBlZGl0b3IgaXMgcmVhZE9ubHlcclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1JlYWRPbmx5OiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEF0dHJpYnV0ZXMgd2hpdGVsaXN0IHVzZWQgYnkgdGhlIGNsZWFuSFRNTCBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwOiBudWxsLFxyXG4gICAgICAgIF9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwX2FsbF9kYXRhOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXR0cmlidXRlcyBibGFja2xpc3QgdXNlZCBieSB0aGUgY2xlYW5IVE1MIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2F0dHJpYnV0ZXNCbGFja2xpc3RSZWdFeHA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBdHRyaWJ1dGVzIG9mIHRhZ3Mgd2hpdGVsaXN0IHVzZWQgYnkgdGhlIGNsZWFuSFRNTCBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9hdHRyaWJ1dGVzVGFnc1doaXRlbGlzdDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEF0dHJpYnV0ZXMgb2YgdGFncyBibGFja2xpc3QgdXNlZCBieSB0aGUgY2xlYW5IVE1MIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2F0dHJpYnV0ZXNUYWdzQmxhY2tsaXN0OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gYmluZGVkIGNvbnRyb2xsZXJzT2ZmIG1ldGhvZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2JpbmRDb250cm9sbGVyc09mZjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElzIGlubGluZSBtb2RlP1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzSW5saW5lOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSXMgYmFsbG9vbnxiYWxsb29uLWFsd2F5cyBtb2RlP1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lzQmFsbG9vbjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElzIGJhbGxvb24tYWx3YXlzIG1vZGU/XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaXNCYWxsb29uQWx3YXlzOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVxdWlyZWQgdmFsdWUgd2hlbiB1c2luZyBpbmxpbmUgbW9kZSB0byBzdGlja3kgdG9vbGJhclxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2lubGluZVRvb2xiYXJBdHRyOiB7dG9wOiAnJywgd2lkdGg6ICcnLCBpc1Nob3c6IGZhbHNlfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlIHRoYXQgY29udHJvbHMgdGhlIFwiYmx1clwiIGV2ZW50IGluIHRoZSBlZGl0b3Igb2YgaW5saW5lIG9yIGJhbGxvb24gbW9kZSB3aGVuIHRoZSBmb2N1cyBpcyBtb3ZlZCB0byBzdWJtZW51XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbm90SGlkZVRvb2xiYXI6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFyaWFibGUgdmFsdWUgdGhhdCBzdGlja3kgdG9vbGJhciBtb2RlXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc3RpY2t5OiBmYWxzZSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlcyBmb3IgY29udHJvbGxpbmcgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfYW50aUJsdXI6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29tcG9uZW50IGxpbmUgYnJlYWtlciBlbGVtZW50XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfbGluZUJyZWFrZXI6IG51bGwsXHJcbiAgICAgICAgX2xpbmVCcmVha2VyQnV0dG9uOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSWYgdHJ1ZSwgKGluaXRpYWxpemUsIHJlc2V0KSBhbGwgaW5kZXhlcyBvZiBpbWFnZSwgdmlkZW8gaW5mb3JtYXRpb25cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jb21wb25lbnRzSW5mb0luaXQ6IHRydWUsXHJcbiAgICAgICAgX2NvbXBvbmVudHNJbmZvUmVzZXQ6IGZhbHNlLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUGx1Z2lucyBhcnJheSB3aXRoIFwiYWN0aXZlXCIgbWV0aG9kLlxyXG4gICAgICAgICAqIFwiYWN0aXZlUGx1Z2luc1wiIHJ1bnMgdGhlIFwiYWRkXCIgbWV0aG9kIHdoZW4gY3JlYXRpbmcgdGhlIGVkaXRvci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhY3RpdmVQbHVnaW5zOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5mb3JtYXRpb24gb2YgdGFncyB0aGF0IHNob3VsZCBtYWludGFpbiBIVE1MIHN0cnVjdHVyZSwgc3R5bGUsIGNsYXNzIG5hbWUsIGV0Yy4gKEluIHVzZSBieSBcIm1hdGhcIiBwbHVnaW4pXHJcbiAgICAgICAgICogV2hlbiBpbnNlcnRpbmcgXCJodG1sXCIgc3VjaCBhcyBwYXN0ZSwgaXQgaXMgZXhlY3V0ZWQgb24gdGhlIFwiaHRtbFwiIHRvIGJlIGluc2VydGVkLiAoY29yZS5jbGVhbkhUTUwpXHJcbiAgICAgICAgICogQmFzaWMgRWRpdG9yIEFjdGlvbnM6XHJcbiAgICAgICAgICogMS4gQWxsIGNsYXNzZXMgbm90IHN0YXJ0aW5nIHdpdGggXCJfX3NlX19cIiBvciBcInNlLVwiIGluIHRoZSBlZGl0b3IgYXJlIHJlbW92ZWQuXHJcbiAgICAgICAgICogMi4gVGhlIHN0eWxlIG9mIGFsbCB0YWdzIGV4Y2VwdCB0aGUgXCJzcGFuXCIgdGFnIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWRpdG9yLlxyXG4gICAgICAgICAqIFwibWFuYWdlZFRhZ3NJbmZvXCIgc3RydWN0dXJlIGV4OlxyXG4gICAgICAgICAqIG1hbmFnZWRUYWdzSW5mbzoge1xyXG4gICAgICAgICAqICAgcXVlcnk6ICcuX19zZV9feHh4LCBzZS14eHgnXHJcbiAgICAgICAgICogICBtYXA6IHtcclxuICAgICAgICAgKiAgICAgJ19fc2VfX3h4eCc6IG1ldGhvZC5iaW5kKGNvcmUpLFxyXG4gICAgICAgICAqICAgICAnc2UteHh4JzogbWV0aG9kLmJpbmQoY29yZSksXHJcbiAgICAgICAgICogICB9XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICogRGVmaW5lIGluIHRoZSBmb2xsb3dpbmcgcmV0dXJuIGZvcm1hdCBpbiB0aGUgXCJtYW5hZ2VkVGFnSW5mb1wiIGZ1bmN0aW9uIG9mIHRoZSBwbHVnaW4uXHJcbiAgICAgICAgICogbWFuYWdlZFRhZ0luZm8oKSA9PiB7XHJcbiAgICAgICAgICogIHJldHVybiB7XHJcbiAgICAgICAgICogICAgY2xhc3NOYW1lOiAnc3RyaW5nJywgLy8gQ2xhc3MgbmFtZSB0byBpZGVudGlmeSB0aGUgdGFnLiAoXCJfX3NlX194eHhcIiwgXCJzZS14eHhcIilcclxuICAgICAgICAgKiAgICAvLyBDaGFuZ2UgdGhlIGh0bWwgb2YgdGhlIFwiZWxlbWVudFwiLiAoXCJlbGVtZW50XCIgaXMgdGhlIGVsZW1lbnQgZm91bmQgd2l0aCBcImNsYXNzTmFtZVwiLilcclxuICAgICAgICAgKiAgICAvLyBcIm1ldGhvZFwiIGlzIGV4ZWN1dGVkIGJ5IGJpbmRpbmcgXCJjb3JlXCIuXHJcbiAgICAgICAgICogICAgbWV0aG9kOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAqICAgICAgLy8gdGhpcyA9PT0gY29yZVxyXG4gICAgICAgICAqICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAvLyAocmVuZGVyZWQgaHRtbCk7XHJcbiAgICAgICAgICogICAgfVxyXG4gICAgICAgICAqICB9XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hbmFnZWRUYWdzSW5mbzogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIGNhc2hpbmc6IG9wdGlvbnMuY2hhckNvdW50ZXJUeXBlID09PSAnYnl0ZS1odG1sJ1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NoYXJUeXBlSFRNTDogZmFsc2UsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBcnJheSBvZiBcImNoZWNrRmlsZUluZm9cIiBmdW5jdGlvbnMgd2l0aCB0aGUgY29yZSBib3VuZFxyXG4gICAgICAgICAqIChQbHVnaW5zIHdpdGggXCJjaGVja0ZpbGVJbmZvXCIgYW5kIFwicmVzZXRGaWxlSW5mb1wiIG1ldGhvZHMpXHJcbiAgICAgICAgICogXCJmaWxlSW5mb1BsdWdpbnNcIiBydW5zIHRoZSBcImFkZFwiIG1ldGhvZCB3aGVuIGNyZWF0aW5nIHRoZSBlZGl0b3IuXHJcbiAgICAgICAgICogXCJjaGVja0ZpbGVJbmZvXCIgbWV0aG9kIGlzIGFsd2F5cyBjYWxsIGp1c3QgYmVmb3JlIHRoZSBcImNoYW5nZVwiIGV2ZW50LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2ZpbGVJbmZvUGx1Z2luc0NoZWNrOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQXJyYXkgb2YgXCJyZXNldEZpbGVJbmZvXCIgZnVuY3Rpb25zIHdpdGggdGhlIGNvcmUgYm91bmRcclxuICAgICAgICAgKiAoUGx1Z2lucyB3aXRoIFwiY2hlY2tGaWxlSW5mb1wiIGFuZCBcInJlc2V0RmlsZUluZm9cIiBtZXRob2RzKVxyXG4gICAgICAgICAqIFwiY2hlY2tGaWxlSW5mb1wiIG1ldGhvZCBpcyBhbHdheXMgY2FsbCBqdXN0IGJlZm9yZSB0aGUgXCJmdW5jdGlvbnMuc2V0T3B0aW9uc1wiIG1ldGhvZC5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9maWxlSW5mb1BsdWdpbnNSZXNldDogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhcmlhYmxlcyBmb3IgZmlsZSBjb21wb25lbnQgbWFuYWdlbWVudFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2ZpbGVNYW5hZ2VyOiB7XHJcbiAgICAgICAgICAgIHRhZ3M6IG51bGwsXHJcbiAgICAgICAgICAgIHJlZ0V4cDogbnVsbCxcclxuICAgICAgICAgICAgcXVlcnlTdHJpbmc6IG51bGwsXHJcbiAgICAgICAgICAgIHBsdWdpblJlZ0V4cDogbnVsbCxcclxuICAgICAgICAgICAgcGx1Z2luTWFwOiBudWxsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2UgdGV4dCBvciBjbGFzc05hbWUgZm9yIGVhY2ggc2VsZWN0aW9uIGNoYW5nZVxyXG4gICAgICAgICAqIEFmdGVyIGNyZWF0aW5nIHRoZSBlZGl0b3IsIFwiYWN0aXZlUGx1Z2luc1wiIGFyZSBhZGRlZC5cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IFNUUk9ORyBib2xkIGJ1dHRvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gVSB1bmRlcmxpbmUgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBFTSBpdGFsaWMgYnV0dG9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBERUwgc3RyaWtlIGJ1dHRvblxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gU1VCIHN1YnNjcmlwdCBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IFNVUCBzdXBlcnNjcmlwdCBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IE9VVERFTlQgb3V0ZGVudCBidXR0b25cclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IElOREVOVCBpbmRlbnQgYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29tbWFuZE1hcDoge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDU1MgcHJvcGVydGllcyByZWxhdGVkIHRvIHN0eWxlIHRhZ3MgXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY29tbWFuZE1hcFN0eWxlczoge1xyXG4gICAgICAgICAgICBTVFJPTkc6IFsnZm9udC13ZWlnaHQnXSxcclxuICAgICAgICAgICAgVTogWyd0ZXh0LWRlY29yYXRpb24nXSxcclxuICAgICAgICAgICAgRU06IFsnZm9udC1zdHlsZSddLFxyXG4gICAgICAgICAgICBERUw6IFsndGV4dC1kZWNvcmF0aW9uJ11cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU3R5bGUgYnV0dG9uIHJlbGF0ZWQgdG8gZWRpdCBhcmVhXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtFbGVtZW50fSBmdWxsU2NyZWVuIGZ1bGxTY3JlZW4gYnV0dG9uIGVsZW1lbnRcclxuICAgICAgICAgKiBAcHJvcGVydHkge0VsZW1lbnR9IHNob3dCbG9ja3Mgc2hvd0Jsb2NrcyBidXR0b24gZWxlbWVudFxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gY29kZVZpZXcgY29kZVZpZXcgYnV0dG9uIGVsZW1lbnRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zdHlsZUNvbW1hbmRNYXA6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NsZWFuU3R5bGVSZWdFeHA6IHtcclxuICAgICAgICAgICAgZGl2OiBuZXcgX3cuUmVnRXhwKCdcXFxccypbXi1hLXpBLVpdKC4rKVxcXFxzKjpbXjtdKyg/ITspKicsICdpZycpLFxyXG4gICAgICAgICAgICBzcGFuOiBuZXcgX3cuUmVnRXhwKCdcXFxccypbXi1hLXpBLVpdKGZvbnQtZmFtaWx5fGZvbnQtc2l6ZXxjb2xvcnxiYWNrZ3JvdW5kLWNvbG9yKVxcXFxzKjpbXjtdKyg/ITspKicsICdpZycpLFxyXG4gICAgICAgICAgICBmb3JtYXQ6IG5ldyBfdy5SZWdFeHAoJ1xcXFxzKlteLWEtekEtWl0odGV4dC1hbGlnbnxtYXJnaW4tbGVmdHxtYXJnaW4tcmlnaHR8d2lkdGh8aGVpZ2h0fGxpbmUtaGVpZ2h0KVxcXFxzKjpbXjtdKyg/ITspKicsICdpZycpLFxyXG4gICAgICAgICAgICBmb250U2l6ZVVuaXQ6IG5ldyBfdy5SZWdFeHAoJ1xcXFxkKycgKyBvcHRpb25zLmZvbnRTaXplVW5pdCArICckJywgJ2knKSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFyaWFibGVzIHVzZWQgaW50ZXJuYWxseSBpbiBlZGl0b3Igb3BlcmF0aW9uXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0NvZGVWaWV3IFN0YXRlIG9mIGNvZGUgdmlld1xyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNGdWxsU2NyZWVuIFN0YXRlIG9mIGZ1bGwgc2NyZWVuXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGlubmVySGVpZ2h0X2Z1bGxTY3JlZW4gSW5uZXJIZWlnaHQgaW4gZWRpdG9yIHdoZW4gaW4gZnVsbCBzY3JlZW5cclxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcmVzaXplQ2xpZW50WSBSZW1lbWJlciB0aGUgdmVydGljYWwgc2l6ZSBvZiB0aGUgZWRpdG9yIGJlZm9yZSByZXNpemluZyB0aGUgZWRpdG9yIChVc2VkIHdoZW4gY2FsY3VsYXRpbmcgZHVyaW5nIHJlc2l6ZSBvcGVyYXRpb24pXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRhYlNpemUgSW5kZW50IHNpemUgb2YgdGFiICg0KVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjb2RlSW5kZW50IEluZGVudCBzaXplIG9mIENvZGUgdmlldyBtb2RlICgyKVxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtaW5SZXNpemluZ1NpemUgTWluaW11bSBzaXplIG9mIGVkaXRpbmcgYXJlYSB3aGVuIHJlc2l6ZWQge051bWJlcn0gKC5zZS13cmFwcGVyLWlubmVyIHttaW4taGVpZ2h0OiA2NXB4O30gfHwgNjUpXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheX0gY3VycmVudE5vZGVzICBBbiBhcnJheSBvZiB0aGUgY3VycmVudCBjdXJzb3IncyBub2RlIHN0cnVjdHVyZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3ZhcmlhYmxlOiB7XHJcbiAgICAgICAgICAgIGlzQ2hhbmdlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGlzQ29kZVZpZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc0Z1bGxTY3JlZW46IGZhbHNlLFxyXG4gICAgICAgICAgICBpbm5lckhlaWdodF9mdWxsU2NyZWVuOiAwLFxyXG4gICAgICAgICAgICByZXNpemVDbGllbnRZOiAwLFxyXG4gICAgICAgICAgICB0YWJTaXplOiA0LFxyXG4gICAgICAgICAgICBjb2RlSW5kZW50OiAyLFxyXG4gICAgICAgICAgICBtaW5SZXNpemluZ1NpemU6IHV0aWwuZ2V0TnVtYmVyKChjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLm1pbkhlaWdodCB8fCAnNjUnKSwgMCksXHJcbiAgICAgICAgICAgIGN1cnJlbnROb2RlczogW10sXHJcbiAgICAgICAgICAgIGN1cnJlbnROb2Rlc01hcDogW10sXHJcbiAgICAgICAgICAgIF9yYW5nZTogbnVsbCxcclxuICAgICAgICAgICAgX3NlbGVjdGlvbk5vZGU6IG51bGwsXHJcbiAgICAgICAgICAgIF9vcmlnaW5Dc3NUZXh0OiBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5zdHlsZS5jc3NUZXh0LFxyXG4gICAgICAgICAgICBfYm9keU92ZXJmbG93OiAnJyxcclxuICAgICAgICAgICAgX2VkaXRvckFyZWFPcmlnaW5Dc3NUZXh0OiAnJyxcclxuICAgICAgICAgICAgX3d5c2l3eWdPcmlnaW5Dc3NUZXh0OiAnJyxcclxuICAgICAgICAgICAgX2NvZGVPcmlnaW5Dc3NUZXh0OiAnJyxcclxuICAgICAgICAgICAgX2Z1bGxTY3JlZW5BdHRyczoge3N0aWNreTogZmFsc2UsIGJhbGxvb246IGZhbHNlLCBpbmxpbmU6IGZhbHNlfSxcclxuICAgICAgICAgICAgX2xpbmVCcmVha0NvbXA6IG51bGwsXHJcbiAgICAgICAgICAgIF9saW5lQnJlYWtEaXI6ICcnXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRlbXAgdmFyaWFibGUgZm9yIHNldCBsaW5lIGF0dHJzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZm9ybWF0QXR0cnNUZW1wOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2F2ZSB0aGUgY3VycmVudCBidXR0b25zIHN0YXRlcyB0byBcImFsbENvbW1hbmRCdXR0b25zXCIgb2JqZWN0XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2F2ZUJ1dHRvblN0YXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWxsQ29tbWFuZEJ1dHRvbnMpIHRoaXMuYWxsQ29tbWFuZEJ1dHRvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdXR0b25zID0gdGhpcy5jb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnLnNlLW1lbnUtbGlzdCBidXR0b25bZGF0YS1kaXNwbGF5XScpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgZWxlbWVudCwgY29tbWFuZDsgaSA8IGN1cnJlbnRCdXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gY3VycmVudEJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYWxsQ29tbWFuZEJ1dHRvbnNbY29tbWFuZF0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlY292ZXIgdGhlIGN1cnJlbnQgYnV0dG9ucyBzdGF0ZXMgZnJvbSBcImFsbENvbW1hbmRCdXR0b25zXCIgb2JqZWN0XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmVjb3ZlckJ1dHRvblN0YXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbGxDb21tYW5kQnV0dG9ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJ1dHRvbnMgPSB0aGlzLmNvbnRleHQuZWxlbWVudC5fYnV0dG9uVHJheS5xdWVyeVNlbGVjdG9yQWxsKCcuc2UtbWVudS1saXN0IGJ1dHRvbltkYXRhLWRpc3BsYXldJyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgYnV0dG9uLCBjb21tYW5kLCBvbGRCdXR0b247IGkgPCBjdXJyZW50QnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGN1cnJlbnRCdXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkQnV0dG9uID0gdGhpcy5hbGxDb21tYW5kQnV0dG9uc1tjb21tYW5kXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkQnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5wYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZChvbGRCdXR0b24sIGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQudG9vbFtjb21tYW5kXSkgdGhpcy5jb250ZXh0LnRvb2xbY29tbWFuZF0gPSBvbGRCdXR0b247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIHRoZSBwbHVnaW4gaXMgbm90IGFkZGVkLCBhZGQgdGhlIHBsdWdpbiBhbmQgY2FsbCB0aGUgJ2FkZCcgZnVuY3Rpb24uXHJcbiAgICAgICAgICogSWYgdGhlIHBsdWdpbiBpcyBhZGRlZCBjYWxsIGNhbGxCYWNrIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5OYW1lIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4gdG8gY2FsbFxyXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxCYWNrRnVuY3Rpb24gRnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgbW9kdWxlIGNhbGxcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gX3RhcmdldCBQbHVnaW4gdGFyZ2V0IGJ1dHRvbiAoVGhpcyBpcyBub3QgbmVjZXNzYXJ5IGlmIHlvdSBoYXZlIGEgYnV0dG9uIGxpc3Qgd2hlbiBjcmVhdGluZyB0aGUgZWRpdG9yKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxQbHVnaW46IGZ1bmN0aW9uIChwbHVnaW5OYW1lLCBjYWxsQmFja0Z1bmN0aW9uLCBfdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIF90YXJnZXQgPSBfdGFyZ2V0IHx8IHBsdWdpbkNhbGxCdXR0b25zW3BsdWdpbk5hbWVdO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbnNbcGx1Z2luTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmNvcmUuY2FsbFBsdWdpbi5mYWlsXSBUaGUgY2FsbGVkIHBsdWdpbiBkb2VzIG5vdCBleGlzdCBvciBpcyBpbiBhbiBpbnZhbGlkIGZvcm1hdC4gKHBsdWdpbk5hbWU6XCInICsgcGx1Z2luTmFtZSArICdcIiknKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pbml0UGx1Z2luc1twbHVnaW5OYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdLmFkZCh0aGlzLCBfdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBsdWdpbnNbcGx1Z2luTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl90YXJnZXRQbHVnaW5zW3BsdWdpbk5hbWVdID09PSAnb2JqZWN0JyAmJiAhIV90YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1lbnVUYXJnZXQocGx1Z2luTmFtZSwgX3RhcmdldCwgdGhpcy5fdGFyZ2V0UGx1Z2luc1twbHVnaW5OYW1lXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbnNbcGx1Z2luTmFtZV0uYWN0aXZlICYmICF0aGlzLmNvbW1hbmRNYXBbcGx1Z2luTmFtZV0gJiYgISFfdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRNYXBbcGx1Z2luTmFtZV0gPSBfdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVQbHVnaW5zLnB1c2gocGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbEJhY2tGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykgY2FsbEJhY2tGdW5jdGlvbigpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGUgbW9kdWxlIGlzIG5vdCBhZGRlZCwgYWRkIHRoZSBtb2R1bGUgYW5kIGNhbGwgdGhlICdhZGQnIGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gbW9kdWxlQXJyYXkgbW9kdWxlIG9iamVjdCdzIEFycmF5IFtkaWFsb2csIHJlc2l6aW5nXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZE1vZHVsZTogZnVuY3Rpb24gKG1vZHVsZUFycmF5KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBtb2R1bGVBcnJheS5sZW5ndGgsIG1vZHVsZU5hbWU7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbW9kdWxlTmFtZSA9IG1vZHVsZUFycmF5W2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGx1Z2luc1ttb2R1bGVOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luc1ttb2R1bGVOYW1lXSA9IG1vZHVsZUFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmluaXRQbHVnaW5zW21vZHVsZU5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0UGx1Z2luc1ttb2R1bGVOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBsdWdpbnNbbW9kdWxlTmFtZV0uYWRkID09PSAnZnVuY3Rpb24nKSB0aGlzLnBsdWdpbnNbbW9kdWxlTmFtZV0uYWRkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIGN1cnJlbnQgZWRpdG9yLXJlbGF0aXZlIHNjcm9sbCBvZmZzZXQuXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0ge3RvcCwgbGVmdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRHbG9iYWxTY3JvbGxPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHQgPSAwLCBsID0gMDtcclxuICAgICAgICAgICAgbGV0IGVsID0gY29udGV4dC5lbGVtZW50LnRvcEFyZWE7XHJcbiAgICAgICAgICAgIHdoaWxlIChlbCkge1xyXG4gICAgICAgICAgICAgICAgdCArPSBlbC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBsICs9IGVsLnNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsID0gdGhpcy5fc2hhZG93Um9vdCA/IHRoaXMuX3NoYWRvd1Jvb3QuaG9zdCA6IG51bGw7XHJcbiAgICAgICAgICAgIHdoaWxlIChlbCkge1xyXG4gICAgICAgICAgICAgICAgdCArPSBlbC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICBsICs9IGVsLnNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHQsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgbWFuYWdpbmcgc3VibWVudSBlbGVtZW50LlxyXG4gICAgICAgICAqIFlvdSBtdXN0IGFkZCB0aGUgXCJzdWJtZW51XCIgZWxlbWVudCB1c2luZyB0aGUgdGhpcyBtZXRob2QgYXQgY3VzdG9tIHBsdWdpbi5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2luTmFtZSBQbHVnaW4gbmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxudWxsfSB0YXJnZXQgVGFyZ2V0IGJ1dHRvblxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbWVudSBTdWJtZW51IGVsZW1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbml0TWVudVRhcmdldDogZnVuY3Rpb24gKHBsdWdpbk5hbWUsIHRhcmdldCwgbWVudSkge1xyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0UGx1Z2luc1twbHVnaW5OYW1lXSA9IG1lbnU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX21lbnVUcmF5LmFwcGVuZENoaWxkKG1lbnUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0UGx1Z2luc1twbHVnaW5OYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZW51VHJheVt0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKV0gPSBtZW51O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEVuYWJsZSBzdWJtZW51XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFN1Ym1lbnUncyBidXR0b24gZWxlbWVudCB0byBjYWxsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3VibWVudU9uOiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYmluZGVkU3VibWVudU9mZikgdGhpcy5fYmluZGVkU3VibWVudU9mZigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmKSB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzdWJtZW51TmFtZSA9IHRoaXMuX3N1Ym1lbnVOYW1lID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICBjb25zdCBtZW51ID0gdGhpcy5zdWJtZW51ID0gdGhpcy5fbWVudVRyYXlbc3VibWVudU5hbWVdO1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1lbnVBY3RpdmVCdXR0b24gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRNZW51UG9zaXRpb24oZWxlbWVudCwgbWVudSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9iaW5kZWRTdWJtZW51T2ZmID0gdGhpcy5zdWJtZW51T2ZmLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRG9jRXZlbnQoJ21vdXNlZG93bicsIHRoaXMuX2JpbmRlZFN1Ym1lbnVPZmYsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbnNbc3VibWVudU5hbWVdLm9uKSB0aGlzLnBsdWdpbnNbc3VibWVudU5hbWVdLm9uLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FudGlCbHVyID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGlzYWJsZSBzdWJtZW51XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3VibWVudU9mZjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kZWRTdWJtZW51T2ZmKTtcclxuICAgICAgICAgICAgdGhpcy5fYmluZGVkU3VibWVudU9mZiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdWJtZW51KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJtZW51TmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1lbnUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0aGlzLnN1Ym1lbnVBY3RpdmVCdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vdEhpZGVUb29sYmFyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FudGlCbHVyID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERpc2FibGUgbW9yZSBsYXllclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1vcmVMYXllck9mZjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXIucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSk7XHJcbiAgICAgICAgICAgICAgICBsYXllci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbmFibGUgY29udGFpbmVyXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IENvbnRhaW5lcidzIGJ1dHRvbiBlbGVtZW50IHRvIGNhbGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250YWluZXJPbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRlZENvbnRhaW5lck9mZikgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJOYW1lID0gdGhpcy5fY29udGFpbmVyTmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKTtcclxuICAgICAgICAgICAgY29uc3QgbWVudSA9IHRoaXMuY29udGFpbmVyID0gdGhpcy5fbWVudVRyYXlbY29udGFpbmVyTmFtZV07XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyQWN0aXZlQnV0dG9uID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fc2V0TWVudVBvc2l0aW9uKGVsZW1lbnQsIG1lbnUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmID0gdGhpcy5jb250YWluZXJPZmYuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5hZGREb2NFdmVudCgnbW91c2Vkb3duJywgdGhpcy5fYmluZGVkQ29udGFpbmVyT2ZmLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zW2NvbnRhaW5lck5hbWVdLm9uKSB0aGlzLnBsdWdpbnNbY29udGFpbmVyTmFtZV0ub24uY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fYW50aUJsdXIgPSB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlIGNvbnRhaW5lclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnRhaW5lck9mZjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kZWRDb250YWluZXJPZmYpO1xyXG4gICAgICAgICAgICB0aGlzLl9iaW5kZWRDb250YWluZXJPZmYgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250YWluZXJOYW1lID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0aGlzLmNvbnRhaW5lckFjdGl2ZUJ1dHRvbiwgJ29uJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckFjdGl2ZUJ1dHRvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RIaWRlVG9vbGJhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgdGhlIG1lbnUgcG9zaXRpb24uIChzdWJtZW51LCBjb250YWluZXIpXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBlbGVtZW50IEJ1dHRvbiBlbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBtZW51IE1lbnUgZWxlbWVudFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldE1lbnVQb3NpdGlvbjogZnVuY3Rpb24gKGVsZW1lbnQsIG1lbnUpIHtcclxuICAgICAgICAgICAgbWVudS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIG1lbnUuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ29uJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gdGhpcy5jb250ZXh0LmVsZW1lbnQudG9vbGJhcjtcclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhclcgPSB0b29sYmFyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyT2Zmc2V0ID0gZXZlbnQuX2dldEVkaXRvck9mZnNldHMoY29udGV4dC5lbGVtZW50LnRvb2xiYXIpO1xyXG4gICAgICAgICAgICBjb25zdCBtZW51VyA9IG1lbnUub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0TGVmdCArIDM7XHJcblxyXG4gICAgICAgICAgICAvLyBydGxcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucnRsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50VyA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBydGxXID0gbWVudVcgPiBlbGVtZW50VyA/IG1lbnVXIC0gZWxlbWVudFcgOiAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcnRsTCA9IHJ0bFcgPiAwID8gMCA6IGVsZW1lbnRXIC0gbWVudVc7XHJcbiAgICAgICAgICAgICAgICBtZW51LnN0eWxlLmxlZnQgPSAobCAtIHJ0bFcgKyBydGxMKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9vbGJhck9mZnNldC5sZWZ0ID4gZXZlbnQuX2dldEVkaXRvck9mZnNldHMobWVudSkubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lbnUuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3ZlckxlZnQgPSB0b29sYmFyVyA8PSBtZW51VyA/IDAgOiB0b29sYmFyVyAtIChsICsgbWVudVcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJMZWZ0IDwgMCkgbWVudS5zdHlsZS5sZWZ0ID0gKGwgKyBvdmVyTGVmdCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBtZW51LnN0eWxlLmxlZnQgPSBsICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IGVsZW1lbnQgdG9wXHJcbiAgICAgICAgICAgIGxldCB0ID0gMDtcclxuICAgICAgICAgICAgbGV0IG9mZnNldEVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgd2hpbGUgKG9mZnNldEVsICYmIG9mZnNldEVsICE9PSB0b29sYmFyKSB7XHJcbiAgICAgICAgICAgICAgICB0ICs9IG9mZnNldEVsLm9mZnNldFRvcDtcclxuICAgICAgICAgICAgICAgIG9mZnNldEVsID0gb2Zmc2V0RWwub2Zmc2V0UGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBidCA9IHQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0JhbGxvb24pIHtcclxuICAgICAgICAgICAgICAgIHQgKz0gdG9vbGJhci5vZmZzZXRUb3AgKyBlbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHQgLT0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBtZW51IHBvc2l0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXJUb3AgPSB0b29sYmFyT2Zmc2V0LnRvcDtcclxuICAgICAgICAgICAgY29uc3QgbWVudUhlaWdodCA9IG1lbnUub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSB0aGlzLmdldEdsb2JhbFNjcm9sbE9mZnNldCgpLnRvcDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnVIZWlnaHRfYm90dG9tID0gX3cuaW5uZXJIZWlnaHQgLSAodG9vbGJhclRvcCAtIHNjcm9sbFRvcCArIGJ0ICsgZWxlbWVudC5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmIChtZW51SGVpZ2h0X2JvdHRvbSA8IG1lbnVIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBtZW51VG9wID0gLTEgKiAobWVudUhlaWdodCAtIGJ0ICsgMyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnNUb3AgPSB0b29sYmFyVG9wIC0gc2Nyb2xsVG9wICsgbWVudVRvcDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lbnVIZWlnaHRfdG9wID0gbWVudUhlaWdodCArIChpbnNUb3AgPCAwID8gaW5zVG9wIDogMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1lbnVIZWlnaHRfdG9wID4gbWVudUhlaWdodF9ib3R0b20pIHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51LnN0eWxlLmhlaWdodCA9IG1lbnVIZWlnaHRfdG9wICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICBtZW51VG9wID0gLTEgKiAobWVudUhlaWdodF90b3AgLSBidCArIDMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZW51LnN0eWxlLmhlaWdodCA9IG1lbnVIZWlnaHRfYm90dG9tICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICBtZW51VG9wID0gYnQgKyBlbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG1lbnUuc3R5bGUudG9wID0gbWVudVRvcCArICdweCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtZW51LnN0eWxlLnRvcCA9IChidCArIGVsZW1lbnQucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWVudS5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgY29udHJvbGxlciBhdCBlZGl0b3IgYXJlYSAoY29udHJvbGxlciBlbGVtZW50cywgZnVuY3Rpb24sIFwiY29udHJvbGxlciB0YXJnZXQgZWxlbWVudChAUmVxdWlyZWQpXCIsIFwiY29udHJvbGxlciBuYW1lKEBSZXF1aXJlZClcIiwgZXRjLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBhcmd1bWVudHMgY29udHJvbGxlciBlbGVtZW50cywgZnVuY3Rpb25zLi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250cm9sbGVyc09uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYpIHRoaXMuX2JpbmRDb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcnJheSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGFyZzsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhcmcpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lID0gYXJnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcnJheS5wdXNoKGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzQ2xhc3MoYXJnLCAnc2UtY29udHJvbGxlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29udHJvbGxlclRhcmdldCA9IGFyZztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbyA9IHRoaXMuZ2V0RmlsZUNvbXBvbmVudChhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFyZy5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2hhZG93Um9vdCAmJiB0aGlzLl9zaGFkb3dSb290Q29udHJvbGxlckV2ZW50VGFyZ2V0LmluZGV4T2YoYXJnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7IGUucHJldmVudERlZmF1bHQoKTsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQucHVzaChhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlckFycmF5LnB1c2goYXJnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluZENvbnRyb2xsZXJzT2ZmID0gdGhpcy5jb250cm9sbGVyc09mZi5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZERvY0V2ZW50KCdtb3VzZWRvd24nLCB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5hZGREb2NFdmVudCgna2V5ZG93bicsIHRoaXMuX2JpbmRDb250cm9sbGVyc09mZiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5zaG93Q29udHJvbGxlciA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLnNob3dDb250cm9sbGVyKHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lLCB0aGlzLmNvbnRyb2xsZXJBcnJheSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEhpZGUgY29udHJvbGxlciBhdCBlZGl0b3IgYXJlYSAobGluayBidXR0b24sIGltYWdlIHJlc2l6ZSBidXR0b24uLilcclxuICAgICAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR8TW91c2VFdmVudHxudWxsfSBlIEV2ZW50IG9iamVjdCB3aGVuIGNhbGxlZCBmcm9tIG1vdXNlZG93biBhbmQga2V5ZG93biBldmVudHMgcmVnaXN0ZXJlZCBpbiBcImNvcmUuY29udHJvbGxlcnNPblwiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udHJvbGxlcnNPZmY6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVCcmVha2VyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IHRoaXMuY29udHJvbGxlckFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICYmIGxlbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udHJvbGxlckFycmF5W2ldLmNvbnRhaW5zID09PSAnZnVuY3Rpb24nICYmIHRoaXMuY29udHJvbGxlckFycmF5W2ldLmNvbnRhaW5zKGUudGFyZ2V0KSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmlsZU1hbmFnZXIucGx1Z2luUmVnRXhwLnRlc3QodGhpcy5jdXJyZW50Q29udHJvbGxlck5hbWUpICYmIGUgJiYgZS50eXBlID09PSAna2V5ZG93bicgJiYgZS5rZXlDb2RlICE9PSAyNykgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXJfdC5zdHlsZS5kaXNwbGF5ID0gY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX2Iuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2xpbmVCcmVha0NvbXAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29udHJvbGxlck5hbWUgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29udHJvbGxlclRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbGVDb21wb25lbnRJbmZvID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ21vdXNlZG93bicsIHRoaXMuX2JpbmRDb250cm9sbGVyc09mZik7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRG9jRXZlbnQoJ2tleWRvd24nLCB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYpO1xyXG4gICAgICAgICAgICB0aGlzLl9iaW5kQ29udHJvbGxlcnNPZmYgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxlbiA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udHJvbGxlckFycmF5W2ldID09PSAnZnVuY3Rpb24nKSB0aGlzLmNvbnRyb2xsZXJBcnJheVtpXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5jb250cm9sbGVyQXJyYXlbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbnRpQmx1ciA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTcGVjaWZ5IHRoZSBwb3NpdGlvbiBvZiB0aGUgY29udHJvbGxlci5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRyb2xsZXIgQ29udHJvbGxlciBlbGVtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJFbCBFbGVtZW50IHRoYXQgaXMgdGhlIGJhc2lzIG9mIHRoZSBjb250cm9sbGVyJ3MgcG9zaXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIFR5cGUgb2YgcG9zaXRpb24gKFwidG9wXCIgfCBcImJvdHRvbVwiKVxyXG4gICAgICAgICAqIFdoZW4gdXNpbmcgdGhlIFwidG9wXCIgcG9zaXRpb24sIHRoZXJlIHNob3VsZCBub3QgYmUgYW4gYXJyb3cgb24gdGhlIGNvbnRyb2xsZXIuXHJcbiAgICAgICAgICogV2hlbiB1c2luZyB0aGUgXCJib3R0b21cIiBwb3NpdGlvbiB0aGVyZSBzaG91bGQgYmUgYW4gYXJyb3cgb24gdGhlIGNvbnRyb2xsZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGFkZE9mZnNldCBUaGVzZSBhcmUgdGhlIGxlZnQgYW5kIHRvcCB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIGFkZGVkIHNwZWNpYWxseS4gXHJcbiAgICAgICAgICogVGhpcyBhcmd1bWVudCBpcyByZXF1aXJlZC4gLSB7bGVmdDogMCwgdG9wOiAwfVxyXG4gICAgICAgICAqIFBsZWFzZSBlbnRlciB0aGUgdmFsdWUgYmFzZWQgb24gbHRyIG1vZGUuXHJcbiAgICAgICAgICogQ2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGluIHJ0bCBtb2RlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENvbnRyb2xsZXJQb3NpdGlvbjogZnVuY3Rpb24gKGNvbnRyb2xsZXIsIHJlZmVyRWwsIHBvc2l0aW9uLCBhZGRPZmZzZXQpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucnRsKSBhZGRPZmZzZXQubGVmdCAqPSAtMTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHV0aWwuZ2V0T2Zmc2V0KHJlZmVyRWwsIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpO1xyXG4gICAgICAgICAgICBjb250cm9sbGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIC8vIEhlaWdodCB2YWx1ZSBvZiB0aGUgYXJyb3cgZWxlbWVudCBpcyAxMXB4XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcE1hcmdpbiA9IHBvc2l0aW9uID09PSAndG9wJyA/IC0oY29udHJvbGxlci5vZmZzZXRIZWlnaHQgKyAyKSA6IChyZWZlckVsLm9mZnNldEhlaWdodCArIDEyKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS50b3AgPSAob2Zmc2V0LnRvcCArIHRvcE1hcmdpbiArIGFkZE9mZnNldC50b3ApICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBvZmZzZXQubGVmdCAtIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc2Nyb2xsTGVmdCArIGFkZE9mZnNldC5sZWZ0O1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyVyA9IGNvbnRyb2xsZXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyRWxXID0gcmVmZXJFbC5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFsbG93ID0gdXRpbC5oYXNDbGFzcyhjb250cm9sbGVyLmZpcnN0RWxlbWVudENoaWxkLCAnc2UtYXJyb3cnKSA/IGNvbnRyb2xsZXIuZmlyc3RFbGVtZW50Q2hpbGQgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gcnRsIChXaWR0aCB2YWx1ZSBvZiB0aGUgYXJyb3cgZWxlbWVudCBpcyAyMnB4KVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ydGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJ0bFcgPSAoY29udHJvbGxlclcgPiByZWZlckVsVykgPyBjb250cm9sbGVyVyAtIHJlZmVyRWxXIDogMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJ0bEwgPSBydGxXID4gMCA/IDAgOiByZWZlckVsVyAtIGNvbnRyb2xsZXJXO1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS5sZWZ0ID0gKGwgLSBydGxXICsgcnRsTCkgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChydGxXID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykgYWxsb3cuc3R5bGUubGVmdCA9ICgoY29udHJvbGxlclcgLSAxNCA8IDEwICsgcnRsVykgPyAoY29udHJvbGxlclcgLSAxNCkgOiAoMTAgKyBydGxXKSkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJTaXplID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5vZmZzZXRMZWZ0IC0gY29udHJvbGxlci5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJTaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvdykgYWxsb3cuc3R5bGUubGVmdCA9IG92ZXJTaXplICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuc3R5bGUubGVmdCA9IGwgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJTaXplID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5vZmZzZXRXaWR0aCAtIChjb250cm9sbGVyLm9mZnNldExlZnQgKyBjb250cm9sbGVyVyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3ZlclNpemUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5zdHlsZS5sZWZ0ID0gKGNvbnRyb2xsZXIub2Zmc2V0TGVmdCArIG92ZXJTaXplKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbG93KSBhbGxvdy5zdHlsZS5sZWZ0ID0gKDIwIC0gb3ZlclNpemUpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbG93KSBhbGxvdy5zdHlsZS5sZWZ0ID0gJzIwcHgnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250cm9sbGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gamF2YXNjcmlwdCBleGVjQ29tbWFuZFxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb21tYW5kIGphdmFzY3JpcHQgZXhlY0NvbW1hbmQgZnVuY3Rpb24gcHJvcGVydHlcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58dW5kZWZpbmVkfSBzaG93RGVmYXVsdFVJIGphdmFzY3JpcHQgZXhlY0NvbW1hbmQgZnVuY3Rpb24gcHJvcGVydHlcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3x1bmRlZmluZWR9IHZhbHVlIGphdmFzY3JpcHQgZXhlY0NvbW1hbmQgZnVuY3Rpb24gcHJvcGVydHlcclxuICAgICAgICAgKi9cclxuICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNvbW1hbmQsIHNob3dEZWZhdWx0VUksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dkLmV4ZWNDb21tYW5kKGNvbW1hbmQsIHNob3dEZWZhdWx0VUksIChjb21tYW5kID09PSAnZm9ybWF0QmxvY2snID8gJzwnICsgdmFsdWUgKyAnPicgOiB2YWx1ZSkpO1xyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBGb2N1cyB0byB3eXNpd3lnIGFyZWEgdXNpbmcgXCJuYXRpdmUgZm9jdXMgZnVuY3Rpb25cIlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5hdGl2ZUZvY3VzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19mb2N1cygpO1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBGb2N1cyBtZXRob2RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9fZm9jdXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgY2FwdGlvbiA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudCh0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSwgJ2ZpZ2NhcHRpb24nKTtcclxuICAgICAgICAgICAgaWYgKGNhcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhcHRpb24uZm9jdXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9jdXMgdG8gd3lzaXd5ZyBhcmVhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZm9jdXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiYgdXRpbC5pc1d5c2l3eWdEaXYocmFuZ2Uuc3RhcnRDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIuY2hpbGRyZW5bcmFuZ2Uuc3RhcnRPZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhdXRpbC5pc0NvbXBvbmVudChjdXJyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IHV0aWwuY3JlYXRlRWxlbWVudChvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQuYXBwZW5kQ2hpbGQoYnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgY3VycmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShiciwgMCwgYnIsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudC5fYXBwbHlUYWdFZmZlY3RzKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0JhbGxvb24pIGV2ZW50Ll90b2dnbGVUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiBcImZvY3VzRWxcIiBpcyBhIGNvbXBvbmVudCwgdGhlbiB0aGF0IGNvbXBvbmVudCBpcyBzZWxlY3RlZDsgaWYgaXQgaXMgYSBmb3JtYXQgZWxlbWVudCwgdGhlIGxhc3QgdGV4dCBpcyBzZWxlY3RlZFxyXG4gICAgICAgICAqIElmIFwiZm9jdXNFZGdlXCIgaXMgbnVsbCwgdGhlbiBzZWxlY3RlZCBsYXN0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gZm9jdXNFbCBGb2N1cyBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZm9jdXNFZGdlOiBmdW5jdGlvbiAoZm9jdXNFbCkge1xyXG4gICAgICAgICAgICBpZiAoIWZvY3VzRWwpIGZvY3VzRWwgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5sYXN0RWxlbWVudENoaWxkO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudEluZm8gPSB0aGlzLmdldEZpbGVDb21wb25lbnQoZm9jdXNFbCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoZmlsZUNvbXBvbmVudEluZm8udGFyZ2V0LCBmaWxlQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmb2N1c0VsKSB7XHJcbiAgICAgICAgICAgICAgICBmb2N1c0VsID0gdXRpbC5nZXRDaGlsZEVsZW1lbnQoZm9jdXNFbCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHwgY3VycmVudC5ub2RlVHlwZSA9PT0gMzsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvY3VzRWwpIHRoaXMubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5zZXRSYW5nZShmb2N1c0VsLCBmb2N1c0VsLnRleHRDb250ZW50Lmxlbmd0aCwgZm9jdXNFbCwgZm9jdXNFbC50ZXh0Q29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEZvY3Vzb3V0IHRvIHd5c2l3eWcgYXJlYSAoLmJsdXIoKSlcclxuICAgICAgICAgKi9cclxuICAgICAgICBibHVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5ibHVyKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5ibHVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGN1cnJlbnQgZWRpdG9yJ3MgcmFuZ2Ugb2JqZWN0IGFuZCByZXR1cm4uXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBzdGFydENvbiBUaGUgc3RhcnRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0T2ZmIFRoZSBzdGFydE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IGVuZENvbiBUaGUgZW5kQ29udGFpbmVyIHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRPZmYgVGhlIGVuZE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSYW5nZSBvYmplY3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0UmFuZ2U6IGZ1bmN0aW9uIChzdGFydENvbiwgc3RhcnRPZmYsIGVuZENvbiwgZW5kT2ZmKSB7XHJcbiAgICAgICAgICAgIGlmICghc3RhcnRDb24gfHwgIWVuZENvbikgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoc3RhcnRPZmYgPiBzdGFydENvbi50ZXh0Q29udGVudC5sZW5ndGgpIHN0YXJ0T2ZmID0gc3RhcnRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAoZW5kT2ZmID4gZW5kQ29uLnRleHRDb250ZW50Lmxlbmd0aCkgZW5kT2ZmID0gZW5kQ29uLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KHN0YXJ0Q29uKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSBzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmXSB8fCBzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmIC0gMV0gfHwgc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IHN0YXJ0T2ZmID4gMCA/IHN0YXJ0Q29uLm5vZGVUeXBlID09PSAxID8gMSA6IHN0YXJ0Q29uLnRleHRDb250ZW50ID8gc3RhcnRDb24udGV4dENvbnRlbnQubGVuZ3RoIDogMCA6IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGVuZENvbikpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IGVuZENvbi5jaGlsZE5vZGVzW2VuZE9mZl0gfHwgZW5kQ29uLmNoaWxkTm9kZXNbZW5kT2ZmIC0gMV0gfHwgZW5kQ29uO1xyXG4gICAgICAgICAgICAgICAgZW5kT2ZmID0gZW5kT2ZmID4gMCA/IGVuZENvbi5ub2RlVHlwZSA9PT0gMSA/IDEgOiBlbmRDb24udGV4dENvbnRlbnQgPyBlbmRDb24udGV4dENvbnRlbnQubGVuZ3RoIDogMCA6IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5fd2QuY3JlYXRlUmFuZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydENvbiwgc3RhcnRPZmYpO1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGVuZENvbiwgZW5kT2ZmKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi5jb3JlLmZvY3VzLmVycm9yXSAnICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgICAgICAgICAgdGhpcy5fcmFuZ2VJbmZvKHJhbmdlLCB0aGlzLmdldFNlbGVjdGlvbigpKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB0aGlzLl9fZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlIHJhbmdlIG9iamVjdCBhbmQgYnV0dG9uIGVmZmVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZVJhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9zZWxlY3Rpb25Ob2RlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRm9jdXMpIHRoaXMuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldEtleUVmZmVjdChbXSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCBjdXJyZW50IGVkaXRvcidzIHJhbmdlIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0UmFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLl92YXJpYWJsZS5fcmFuZ2UgfHwgdGhpcy5fY3JlYXRlRGVmYXVsdFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQgPT09IHNlbGVjdGlvbi5pc0NvbGxhcHNlZCB8fCAhY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuY29udGFpbnMoc2VsZWN0aW9uLmZvY3VzTm9kZSkpIHJldHVybiByYW5nZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjID0gc2VsZWN0aW9uLmFuY2hvck5vZGUsIGVjID0gc2VsZWN0aW9uLmZvY3VzTm9kZSwgc28gPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBlbyA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhcmVWYWx1ZSA9IHV0aWwuY29tcGFyZUVsZW1lbnRzKHNjLCBlYyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodERpciA9IGNvbXBhcmVWYWx1ZS5hbmNlc3RvciAmJiAoY29tcGFyZVZhbHVlLnJlc3VsdCA9PT0gMCA/IHNvIDw9IGVvIDogY29tcGFyZVZhbHVlLnJlc3VsdCA+IDEgPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHREaXIgPyBzYyA6IGVjLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0RGlyID8gc28gOiBlbyxcclxuICAgICAgICAgICAgICAgICAgICByaWdodERpciA/IGVjIDogc2MsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHREaXIgPyBlbyA6IHNvXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIHRoZSBcInJhbmdlXCIgb2JqZWN0IGlzIGEgbm9uLWVkaXRhYmxlIGFyZWEsIGFkZCBhIGxpbmUgYXQgdGhlIHRvcCBvZiB0aGUgZWRpdG9yIGFuZCB1cGRhdGUgdGhlIFwicmFuZ2VcIiBvYmplY3QuXHJcbiAgICAgICAgICogUmV0dXJucyBhIG5ldyBcInJhbmdlXCIgb3IgYXJndW1lbnQgXCJyYW5nZVwiLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSByYW5nZSBjb3JlLmdldFJhbmdlKClcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gY29udGFpbmVyIElmIHRoZXJlIGlzIFwiY29udGFpbmVyXCIgYXJndW1lbnQsIGl0IGNyZWF0ZXMgYSBsaW5lIGluIGZyb250IG9mIHRoZSBjb250YWluZXIuXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gcmFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRSYW5nZV9hZGRMaW5lOiBmdW5jdGlvbiAocmFuZ2UsIGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0aW9uVm9pZChyYW5nZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICBvcC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnLmluc2VydEJlZm9yZShvcCwgY29udGFpbmVyICYmIGNvbnRhaW5lciAhPT0gd3lzaXd5ZyA/IGNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcgOiB3eXNpd3lnLmZpcnN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uob3AuZmlyc3RFbGVtZW50Q2hpbGQsIDAsIG9wLmZpcnN0RWxlbWVudENoaWxkLCAxKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5fdmFyaWFibGUuX3JhbmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0IHdpbmRvdyBzZWxlY3Rpb24gb2JlamN0XHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5fc2hhZG93Um9vdCAmJiB0aGlzLl9zaGFkb3dSb290LmdldFNlbGVjdGlvbiA/IHRoaXMuX3NoYWRvd1Jvb3QuZ2V0U2VsZWN0aW9uKCkgOiB0aGlzLl93dy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5fcmFuZ2UgJiYgIWNvbnRleHQuZWxlbWVudC53eXNpd3lnLmNvbnRhaW5zKHNlbGVjdGlvbi5mb2N1c05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UodGhpcy5fY3JlYXRlRGVmYXVsdFJhbmdlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb247XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCBjdXJyZW50IHNlbGVjdCBub2RlXHJcbiAgICAgICAgICogQHJldHVybnMge05vZGV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0U2VsZWN0aW9uTm9kZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRleHQuZWxlbWVudC53eXNpd3lnLmNvbnRhaW5zKHRoaXMuX3ZhcmlhYmxlLl9zZWxlY3Rpb25Ob2RlKSkgdGhpcy5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uTm9kZSA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmZpcnN0Q2hpbGQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmICghc2VsZWN0aW9uTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9zZWxlY3Rpb25Ob2RlID0gc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFyaWFibGUuX3NlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNhdmluZyB0aGUgcmFuZ2Ugb2JqZWN0IGFuZCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG5vZGUgb2YgZWRpdG9yXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZWRpdG9yUmFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlRWwgPSB0aGlzLl93ZC5hY3RpdmVFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0lucHV0RWxlbWVudChhY3RpdmVFbCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9zZWxlY3Rpb25Ob2RlID0gYWN0aXZlRWw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlRWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0aW9uKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuX2NyZWF0ZURlZmF1bHRSYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yYW5nZUluZm8ocmFuZ2UsIHNlbGVjdGlvbik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldCBcInJhbmdlXCIgYW5kIFwic2VsZWN0aW9uXCIgaW5mby5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmFuZ2UgcmFuZ2Ugb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxlY3Rpb24gc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBfcmFuZ2VJbmZvOiBmdW5jdGlvbiAocmFuZ2UsIHNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZSA9IHJhbmdlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkgc2VsZWN0aW9uTm9kZSA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLmNoaWxkcmVuW3JhbmdlLnN0YXJ0T2Zmc2V0XSB8fCByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIGVsc2Ugc2VsZWN0aW9uTm9kZSA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZSA9IHNlbGVjdGlvbi5leHRlbnROb2RlIHx8IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fc2VsZWN0aW9uTm9kZSA9IHNlbGVjdGlvbk5vZGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybiB0aGUgcmFuZ2Ugb2JqZWN0IG9mIGVkaXRvcidzIGZpcnN0IGNoaWxkIG5vZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NyZWF0ZURlZmF1bHRSYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5fd2QuY3JlYXRlUmFuZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmaXJzdEZvcm1hdCA9IHd5c2l3eWcuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgIGxldCBmb2N1c0VsID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFmaXJzdEZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZmlyc3RGb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgIGZvY3VzRWwgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICBmaXJzdEZvcm1hdC5hcHBlbmRDaGlsZChmb2N1c0VsKTtcclxuICAgICAgICAgICAgICAgIHd5c2l3eWcuYXBwZW5kQ2hpbGQoZmlyc3RGb3JtYXQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9jdXNFbCA9IGZpcnN0Rm9ybWF0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvY3VzRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c0VsID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Rm9ybWF0LmFwcGVuZENoaWxkKGZvY3VzRWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydChmb2N1c0VsLCAwKTtcclxuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGZvY3VzRWwsIDApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJhbmdlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgbm8gdmFsaWQgXCJzZWxlY3Rpb25cIi5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcmFuZ2UgY29yZS5nZXRSYW5nZSgpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gcmFuZ2VcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZWxlY3Rpb25Wb2lkOiBmdW5jdGlvbiAocmFuZ2UpIHtcclxuICAgICAgICAgICAgY29uc3QgY29tbSA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICByZXR1cm4gKHV0aWwuaXNXeXNpd3lnRGl2KHJhbmdlLnN0YXJ0Q29udGFpbmVyKSAmJiB1dGlsLmlzV3lzaXd5Z0RpdihyYW5nZS5lbmRDb250YWluZXIpKSB8fCAvRklHVVJFL2kudGVzdChjb21tLm5vZGVOYW1lKSB8fCB0aGlzLl9maWxlTWFuYWdlci5yZWdFeHAudGVzdChjb21tLm5vZGVOYW1lKSB8fCB1dGlsLmlzTWVkaWFDb21wb25lbnQoY29tbSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlc2V0IHJhbmdlIG9iamVjdCB0byB0ZXh0IG5vZGUgc2VsZWN0ZWQgc3RhdHVzLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGZhbHNlIGlmIHRoZXJlIGlzIG5vIHZhbGlkIHNlbGVjdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9yZXNldFJhbmdlVG9UZXh0Tm9kZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGlvblZvaWQocmFuZ2UpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnRDb24gPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0T2ZmID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgIGxldCBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBlbmRPZmYgPSByYW5nZS5lbmRPZmZzZXQ7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wQ29uLCB0ZW1wT2Zmc2V0LCB0ZW1wQ2hpbGQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0Q29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb24gPSBzdGFydENvbi5sYXN0Q2hpbGQgfHwgc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmYgPSBzdGFydENvbi50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gc3RhcnRDb24uY2hpbGROb2Rlc1tzdGFydE9mZl0gfHwgc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmYgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0YXJ0Q29uICYmIHN0YXJ0Q29uLm5vZGVUeXBlID09PSAxICYmIHN0YXJ0Q29uLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydENvbiA9IHN0YXJ0Q29uLmZpcnN0Q2hpbGQgfHwgc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmYgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChlbmRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRDb24gPSBlbmRDb24uY2hpbGROb2Rlc1tlbmRPZmZdIHx8IGVuZENvbi5sYXN0Q2hpbGQgfHwgZW5kQ29uO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGVuZENvbiAmJiBlbmRDb24ubm9kZVR5cGUgPT09IDEgJiYgZW5kQ29uLmxhc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbiA9IGVuZENvbi5sYXN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbmRPZmYgPSBlbmRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzdGFydENvbnRhaW5lclxyXG4gICAgICAgICAgICB0ZW1wQ29uID0gdXRpbC5pc1d5c2l3eWdEaXYoc3RhcnRDb24pID8gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuZmlyc3RDaGlsZCA6IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gc3RhcnRPZmY7XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHRlbXBDb24pIHx8ICh0ZW1wQ29uLm5vZGVUeXBlID09PSAxICYmIHRlbXBDb24uY2hpbGROb2Rlcy5sZW5ndGggPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25seUJyZWFrID0gdXRpbC5pc0JyZWFrKHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvbmx5QnJlYWspIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGVtcENvbiAmJiAhdXRpbC5pc0JyZWFrKHRlbXBDb24pICYmIHRlbXBDb24ubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENvbiA9IHRlbXBDb24uY2hpbGROb2Rlc1t0ZW1wT2Zmc2V0XSB8fCB0ZW1wQ29uLm5leHRFbGVtZW50U2libGluZyB8fCB0ZW1wQ29uLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3JtYXQgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQodGVtcENvbiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0LCBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQodXRpbC5nZXRQYXJlbnRFbGVtZW50KHRlbXBDb24sIHV0aWwuaXNDZWxsKSA/ICdESVYnIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQuYXBwZW5kQ2hpbGQodGVtcENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsodGVtcENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbXB0eVRleHQgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBDb24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZW1wdHlUZXh0LCB0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uID0gZW1wdHlUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbmx5QnJlYWspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29uID09PSBlbmRDb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbiA9IHRlbXBDb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRPZmYgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgc3RhcnRDb250YWluZXJcclxuICAgICAgICAgICAgc3RhcnRDb24gPSB0ZW1wQ29uO1xyXG4gICAgICAgICAgICBzdGFydE9mZiA9IHRlbXBPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBlbmRDb250YWluZXJcclxuICAgICAgICAgICAgdGVtcENvbiA9IHV0aWwuaXNXeXNpd3lnRGl2KGVuZENvbikgPyBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5sYXN0Q2hpbGQgOiBlbmRDb247XHJcbiAgICAgICAgICAgIHRlbXBPZmZzZXQgPSBlbmRPZmY7XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHRlbXBDb24pIHx8ICh0ZW1wQ29uLm5vZGVUeXBlID09PSAxICYmIHRlbXBDb24uY2hpbGROb2Rlcy5sZW5ndGggPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25seUJyZWFrID0gdXRpbC5pc0JyZWFrKHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvbmx5QnJlYWspIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGVtcENvbiAmJiAhdXRpbC5pc0JyZWFrKHRlbXBDb24pICYmIHRlbXBDb24ubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENoaWxkID0gdGVtcENvbi5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcENoaWxkLmxlbmd0aCA9PT0gMCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb24gPSB0ZW1wQ2hpbGRbdGVtcE9mZnNldCA+IDAgPyB0ZW1wT2Zmc2V0IC0gMSA6IHRlbXBPZmZzZXRdIHx8ICEvRklHVVJFL2kudGVzdCh0ZW1wQ2hpbGRbMF0ubm9kZU5hbWUpID8gdGVtcENoaWxkWzBdIDogKHRlbXBDb24ucHJldmlvdXNFbGVtZW50U2libGluZyB8fCB0ZW1wQ29uLnByZXZpb3VzU2libGluZyB8fCBzdGFydENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBPZmZzZXQgPSB0ZW1wT2Zmc2V0ID4gMCA/IHRlbXBDb24udGV4dENvbnRlbnQubGVuZ3RoIDogdGVtcE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3JtYXQgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQodGVtcENvbiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0LCBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQodXRpbC5pc0NlbGwoZm9ybWF0KSA/ICdESVYnIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENvbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIHRlbXBDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQuYXBwZW5kQ2hpbGQodGVtcENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsodGVtcENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbXB0eVRleHQgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBDb24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZW1wdHlUZXh0LCB0ZW1wQ29uKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uID0gZW1wdHlUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBPZmZzZXQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbmx5QnJlYWsgJiYgIXRlbXBDb24ucHJldmlvdXNTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShlbmRDb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IGVuZENvbnRhaW5lclxyXG4gICAgICAgICAgICBlbmRDb24gPSB0ZW1wQ29uO1xyXG4gICAgICAgICAgICBlbmRPZmYgPSB0ZW1wT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IFJhbmdlXHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uoc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZik7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIGEgXCJmb3JtYXRFbGVtZW50XCIodXRpbC5pc0Zvcm1hdEVsZW1lbnQpIGFycmF5IGZyb20gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCByYW5nZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHZhbGlkYXRpb24gVGhlIHZhbGlkYXRpb24gZnVuY3Rpb24uIChSZXBsYWNlcyB0aGUgZGVmYXVsdCB2YWxpZGF0aW9uIGZ1bmN0aW9uLXV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRTZWxlY3RlZEVsZW1lbnRzOiBmdW5jdGlvbiAodmFsaWRhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Jlc2V0UmFuZ2VUb1RleHROb2RlKCkpIHJldHVybiBbXTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KHJhbmdlLnN0YXJ0Q29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoY2hpbGRyZW5bMF0sIDAsIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1vbkNvbiA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IGxpbmUgbm9kZXNcclxuICAgICAgICAgICAgY29uc3QgbGluZU5vZGVzID0gdXRpbC5nZXRMaXN0Q2hpbGRyZW4oY29tbW9uQ29uLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRpb24gPyB2YWxpZGF0aW9uKGN1cnJlbnQpIDogdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzV3lzaXd5Z0Rpdihjb21tb25Db24pICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbW1vbkNvbikpIGxpbmVOb2Rlcy51bnNoaWZ0KHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChjb21tb25Db24sIG51bGwpKTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0Q29uID09PSBlbmRDb24gfHwgbGluZU5vZGVzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGxpbmVOb2RlcztcclxuXHJcbiAgICAgICAgICAgIGxldCBzdGFydExpbmUgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoc3RhcnRDb24sIG51bGwpO1xyXG4gICAgICAgICAgICBsZXQgZW5kTGluZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChlbmRDb24sIG51bGwpO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRJZHggPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgZW5kSWR4ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9ubHlUYWJsZSA9IGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5pc1RhYmxlKGN1cnJlbnQpID8gL15UQUJMRSQvaS50ZXN0KGN1cnJlbnQubm9kZU5hbWUpIDogdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzdGFydFJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzdGFydExpbmUsIG9ubHlUYWJsZSk7XHJcbiAgICAgICAgICAgIGxldCBlbmRSYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZW5kTGluZSwgb25seVRhYmxlKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNUYWJsZShzdGFydFJhbmdlRWwpICYmIHV0aWwuaXNMaXN0Q2VsbChzdGFydFJhbmdlRWwucGFyZW50Tm9kZSkpIHN0YXJ0UmFuZ2VFbCA9IHN0YXJ0UmFuZ2VFbC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1RhYmxlKGVuZFJhbmdlRWwpICYmIHV0aWwuaXNMaXN0Q2VsbChlbmRSYW5nZUVsLnBhcmVudE5vZGUpKSBlbmRSYW5nZUVsID0gZW5kUmFuZ2VFbC5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2FtZVJhbmdlID0gc3RhcnRSYW5nZUVsID09PSBlbmRSYW5nZUVsO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGluZU5vZGVzLmxlbmd0aCwgbGluZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gbGluZU5vZGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGFydExpbmUgPT09IGxpbmUgfHwgKCFzYW1lUmFuZ2UgJiYgbGluZSA9PT0gc3RhcnRSYW5nZUVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0SWR4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGluZSA9PT0gbGluZSB8fCAoIXNhbWVSYW5nZSAmJiBsaW5lID09PSBlbmRSYW5nZUVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZElkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzdGFydElkeCA9PT0gbnVsbCkgc3RhcnRJZHggPSAwO1xyXG4gICAgICAgICAgICBpZiAoZW5kSWR4ID09PSBudWxsKSBlbmRJZHggPSBsaW5lTm9kZXMubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBsaW5lTm9kZXMuc2xpY2Uoc3RhcnRJZHgsIGVuZElkeCArIDEpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgZm9ybWF0IGVsZW1lbnRzIGFuZCBjb21wb25lbnRzIGZyb20gdGhlIHNlbGVjdGVkIGFyZWEuIChQLCBESVYsIEhbMS02XSwgT0wsIFVMLCBUQUJMRS4uKVxyXG4gICAgICAgICAqIElmIHNvbWUgb2YgdGhlIGNvbXBvbmVudCBhcmUgaW5jbHVkZWQgaW4gdGhlIHNlbGVjdGlvbiwgZ2V0IHRoZSBlbnRpcmUgdGhhdCBjb21wb25lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZW1vdmVEdXBsaWNhdGUgSWYgdHJ1ZSwgaWYgdGhlcmUgaXMgYSBwYXJlbnQgYW5kIGNoaWxkIHRhZyBhbW9uZyB0aGUgc2VsZWN0ZWQgZWxlbWVudHMsIHRoZSBjaGlsZCB0YWcgaXMgZXhjbHVkZWQuXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzOiBmdW5jdGlvbiAocmVtb3ZlRHVwbGljYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1vbkNvbiA9IHRoaXMuZ2V0UmFuZ2UoKS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3QgbXlDb21wb25lbnQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoY29tbW9uQ29uLCB1dGlsLmlzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRMaW5lcyA9IHV0aWwuaXNUYWJsZShjb21tb25Db24pID9cclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cyhudWxsKSA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMoZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmdldFBhcmVudEVsZW1lbnQoY3VycmVudCwgdGhpcy5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmlzRm9ybWF0RWxlbWVudChjdXJyZW50KSAmJiAoIWNvbXBvbmVudCB8fCBjb21wb25lbnQgPT09IG15Q29tcG9uZW50KSkgfHwgKHRoaXMuaXNDb21wb25lbnQoY3VycmVudCkgJiYgIXRoaXMuZ2V0Rm9ybWF0RWxlbWVudChjdXJyZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodXRpbCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlbW92ZUR1cGxpY2F0ZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkTGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZExpbmVzW2pdLmNvbnRhaW5zKHNlbGVjdGVkTGluZXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExpbmVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLTsgbGVuLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkTGluZXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIERldGVybWluZSBpZiB0aGlzIG9mZnNldCBpcyB0aGUgZWRnZSBvZmZzZXQgb2YgY29udGFpbmVyXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBjb250YWluZXIgVGhlIG5vZGUgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuIChyYW5nZS5zdGFydENvbnRhaW5lci4uKVxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC4gKGNvcmUuZ2V0UmFuZ2UoKS5zdGFydE9mZnNldC4uLilcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3x1bmRlZmluZWR9IGRpciBTZWxlY3QgY2hlY2sgcG9pbnQgLSBCb3RoIGVkZ2UsIEZyb250IGVkZ2Ugb3IgRW5kIGVkZ2UuIChcImZyb250XCI6IEZyb250IGVkZ2UsIFwiZW5kXCI6IEVuZCBlZGdlLCB1bmRlZmluZWQ6IEJvdGggZWRnZSlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc0VkZ2VQb2ludDogZnVuY3Rpb24gKGNvbnRhaW5lciwgb2Zmc2V0LCBkaXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChkaXIgIT09ICdlbmQnICYmIG9mZnNldCA9PT0gMCkgfHwgKCghZGlyIHx8IGRpciAhPT0gJ2Zyb250JykgJiYgIWNvbnRhaW5lci5ub2RlVmFsdWUgJiYgb2Zmc2V0ID09PSAxKSB8fCAoKCFkaXIgfHwgZGlyID09PSAnZW5kJykgJiYgISFjb250YWluZXIubm9kZVZhbHVlICYmIG9mZnNldCA9PT0gY29udGFpbmVyLm5vZGVWYWx1ZS5sZW5ndGgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayBpZiB0aGUgY29udGFpbmVyIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgZWRnZXMgb2YgdGhlIGZvcm1hdCB0YWdcclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IGNvbnRhaW5lciBUaGUgbm9kZSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC4gKHJhbmdlLnN0YXJ0Q29udGFpbmVyLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LiAoY29yZS5nZXRSYW5nZSgpLnN0YXJ0T2Zmc2V0Li4uKVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXIgU2VsZWN0IGNoZWNrIHBvaW50IC0gXCJmcm9udFwiOiBGcm9udCBlZGdlLCBcImVuZFwiOiBFbmQgZWRnZSwgdW5kZWZpbmVkOiBCb3RoIGVkZ2UuXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fG51bGx9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaXNFZGdlRm9ybWF0OiBmdW5jdGlvbiAobm9kZSwgb2Zmc2V0LCBkaXIpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRWRnZVBvaW50KG5vZGUsIG9mZnNldCwgZGlyKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGRpciA9IGRpciA9PT0gJ2Zyb250JyA/ICdwcmV2aW91c1NpYmxpbmcnIDogJ25leHRTaWJsaW5nJztcclxuICAgICAgICAgICAgd2hpbGUgKG5vZGUgJiYgIXV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpICYmICF1dGlsLmlzV3lzaXd5Z0Rpdihub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlW2Rpcl0gfHwgKHV0aWwuaXNCcmVhayhub2RlW2Rpcl0pICYmICFub2RlW2Rpcl1bZGlyXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkgcmVzdWx0LnB1c2gobm9kZS5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyBsb2FkaW5nIGJveFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dMb2FkaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5sb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBsb2FkaW5nIGJveFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsb3NlTG9hZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQubG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBcHBlbmQgZm9ybWF0IGVsZW1lbnQgdG8gc2libGluZyBub2RlIG9mIGFyZ3VtZW50IGVsZW1lbnQuXHJcbiAgICAgICAgICogSWYgdGhlIFwiZm9ybWF0Tm9kZU5hbWVcIiBhcmd1bWVudCB2YWx1ZSBpcyBwcmVzZW50LCB0aGUgdGFnIG9mIHRoYXQgYXJndW1lbnQgdmFsdWUgaXMgaW5zZXJ0ZWQsXHJcbiAgICAgICAgICogSWYgbm90LCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGZvcm1hdCB0YWcgaXMgaW5zZXJ0ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEluc2VydCBhcyBzaWJsaW5ncyBvZiB0aGF0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fG51bGx9IGZvcm1hdE5vZGUgTm9kZSBuYW1lIG9yIG5vZGUgb2JlamN0IHRvIGJlIGluc2VydGVkXHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwZW5kRm9ybWF0VGFnOiBmdW5jdGlvbiAoZWxlbWVudCwgZm9ybWF0Tm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50Tm9kZSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Rm9ybWF0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCksIG51bGwpO1xyXG4gICAgICAgICAgICBsZXQgb0Zvcm1hdCA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0Zvcm1hdEVsZW1lbnQoZWxlbWVudCkgJiYgdXRpbC5pc0ZyZWVGb3JtYXRFbGVtZW50KGN1cnJlbnRGb3JtYXRFbCB8fCBlbGVtZW50LnBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBvRm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb0Zvcm1hdE5hbWUgPSBmb3JtYXROb2RlID8gKHR5cGVvZiBmb3JtYXROb2RlID09PSAnc3RyaW5nJyA/IGZvcm1hdE5vZGUgOiBmb3JtYXROb2RlLm5vZGVOYW1lKSA6ICh1dGlsLmlzRm9ybWF0RWxlbWVudChjdXJyZW50Rm9ybWF0RWwpICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGN1cnJlbnRGb3JtYXRFbCkgJiYgIXV0aWwuaXNGcmVlRm9ybWF0RWxlbWVudChjdXJyZW50Rm9ybWF0RWwpKSA/IGN1cnJlbnRGb3JtYXRFbC5ub2RlTmFtZSA6IG9wdGlvbnMuZGVmYXVsdFRhZztcclxuICAgICAgICAgICAgICAgIG9Gb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob0Zvcm1hdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgb0Zvcm1hdC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGZvcm1hdE5vZGUgJiYgdHlwZW9mIGZvcm1hdE5vZGUgIT09ICdzdHJpbmcnKSB8fCAoIWZvcm1hdE5vZGUgJiYgdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudEZvcm1hdEVsKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlUYWdBdHRyaWJ1dGVzKG9Gb3JtYXQsIGZvcm1hdE5vZGUgfHwgY3VycmVudEZvcm1hdEVsLCBbJ2lkJ10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0NlbGwoZWxlbWVudCkpIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKG9Gb3JtYXQsIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgZWxzZSBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9Gb3JtYXQsIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvRm9ybWF0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgbWV0aG9kIHRvIGluc2VydCBhIGVsZW1lbnQgYW5kIHJldHVybi4gKHVzZWQgZWxlbWVudHMgOiB0YWJsZSwgaHIsIGltYWdlLCB2aWRlbylcclxuICAgICAgICAgKiBJZiBcImVsZW1lbnRcIiBpcyBcIkhSXCIsIGluc2VydCBhbmQgcmV0dXJuIHRoZSBuZXcgbGluZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBiZSBpbnNlcnRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbm90SGlzdG9yeVB1c2ggV2hlbiB0cnVlLCBpdCBkb2VzIG5vdCB1cGRhdGUgdGhlIGhpc3Rvcnkgc3RhY2sgYW5kIHRoZSBzZWxlY3Rpb24gb2JqZWN0IGFuZCByZXR1cm4gRWRnZU5vZGVzICh1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKVxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2hlY2tDaGFyQ291bnQgSWYgdHJ1ZSwgaWYgXCJvcHRpb25zLm1heENoYXJDb3VudFwiIGlzIGV4Y2VlZGVkIHdoZW4gXCJlbGVtZW50XCIgaXMgYWRkZWQsIG51bGwgaXMgcmV0dXJuZWQgd2l0aG91dCBhZGRpdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG5vdFNlbGVjdCBJZiB0cnVlLCBEbyBub3QgYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIGluc2VydGVkIGNvbXBvbmVudC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnNlcnRDb21wb25lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBub3RIaXN0b3J5UHVzaCwgY2hlY2tDaGFyQ291bnQsIG5vdFNlbGVjdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5IHx8IChjaGVja0NoYXJDb3VudCAmJiAhdGhpcy5jaGVja0NoYXJDb3VudChlbGVtZW50LCBudWxsKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UmFuZ2VfYWRkTGluZSh0aGlzLmdldFJhbmdlKCksIHIuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgbGV0IG9Ob2RlID0gbnVsbDtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGlvbk5vZGUgPSB0aGlzLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgbGV0IGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0Tm9kZShlbGVtZW50LCBzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/IG51bGwgOiByLmNvbnRhaW5lci5uZXh0U2libGluZywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50Lm5leHRTaWJsaW5nKSBlbGVtZW50LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodXRpbC5jcmVhdGVFbGVtZW50KCdCUicpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFJhbmdlKCkuY29sbGFwc2VkICYmIChyLmNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMyB8fCB1dGlsLmlzQnJlYWsoci5jb250YWluZXIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlcHRoRm9ybWF0ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KHIuY29udGFpbmVyLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KTsgfS5iaW5kKHV0aWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IHV0aWwuc3BsaXRFbGVtZW50KHIuY29udGFpbmVyLCByLm9mZnNldCwgIWRlcHRoRm9ybWF0ID8gMCA6IHV0aWwuZ2V0RWxlbWVudERlcHRoKGRlcHRoRm9ybWF0KSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvTm9kZSkgZm9ybWF0RWwgPSBvTm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydE5vZGUoZWxlbWVudCwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChmb3JtYXRFbCkgPyBudWxsIDogZm9ybWF0RWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbCAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShmb3JtYXRFbCkpIHV0aWwucmVtb3ZlSXRlbShmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghbm90U2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGVsZW1lbnQsIDAsIGVsZW1lbnQsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnRJbmZvID0gdGhpcy5nZXRGaWxlQ29tcG9uZW50KGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnRJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RDb21wb25lbnQoZmlsZUNvbXBvbmVudEluZm8udGFyZ2V0LCBmaWxlQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob05vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IHV0aWwuZ2V0RWRnZUNoaWxkTm9kZXMob05vZGUsIG51bGwpLnNjIHx8IG9Ob2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uob05vZGUsIDAsIG9Ob2RlLCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICBpZiAoIW5vdEhpc3RvcnlQdXNoKSB0aGlzLmhpc3RvcnkucHVzaCgxKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvTm9kZSB8fCBlbGVtZW50O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBmaWxlIGNvbXBvbmVudCBhbmQgdGhhdCBwbHVnaW4gbmFtZVxyXG4gICAgICAgICAqIHJldHVybjoge3RhcmdldCwgY29tcG9uZW50LCBwbHVnaW5OYW1lfSB8IG51bGxcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IGVsZW1lbnQgKGZpZ3VyZSB0YWcsIGNvbXBvbmVudCBkaXYsIGZpbGUgdGFnKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRGaWxlQ29tcG9uZW50OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ZpbGVNYW5hZ2VyLnF1ZXJ5U3RyaW5nIHx8ICFlbGVtZW50KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQsIHBsdWdpbk5hbWU7XHJcbiAgICAgICAgICAgIGlmICgvXkZJR1VSRSQvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpIHx8IC9zZS1jb21wb25lbnQvLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fZmlsZU1hbmFnZXIucXVlcnlTdHJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0ICYmIGVsZW1lbnQubm9kZU5hbWUgJiYgdGhpcy5fZmlsZU1hbmFnZXIucmVnRXhwLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHBsdWdpbk5hbWUgPSB0aGlzLl9maWxlTWFuYWdlci5wbHVnaW5NYXBbdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiB1dGlsLmdldFBhcmVudEVsZW1lbnQodGFyZ2V0LCB1dGlsLmlzQ29tcG9uZW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luTmFtZTogcGx1Z2luTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgY29tcG9uZW50KGltYWdlLCB2aWRlbykgaXMgc2VsZWN0ZWQgYW5kIHRoZSByZXNpemluZyBtb2R1bGUgaXMgY2FsbGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRhZyAoaW1nLCBpZnJhbWUsIHZpZGVvKVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5OYW1lIFBsdWdpbiBuYW1lIChpbWFnZSwgdmlkZW8pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0Q29tcG9uZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgcGx1Z2luTmFtZSkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZWRpdGFibGVDb21wb25lbnQodXRpbC5nZXRQYXJlbnRFbGVtZW50KGVsZW1lbnQsIHV0aWwuaXNDb21wb25lbnQpKSB8fCB1dGlsLmlzVW5lZGl0YWJsZUNvbXBvbmVudChlbGVtZW50KSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzRm9jdXMpIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgY29uc3QgcGx1Z2luID0gdGhpcy5wbHVnaW5zW3BsdWdpbk5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoIXBsdWdpbikgcmV0dXJuO1xyXG4gICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGx1Z2luLnNlbGVjdCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5jYWxsUGx1Z2luKHBsdWdpbk5hbWUsIHBsdWdpbi5zZWxlY3QuYmluZCh0aGlzLCBlbGVtZW50KSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRDb21wb25lbnRMaW5lQnJlYWtlcihlbGVtZW50KTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGxpbmUgYnJlYWtlciBvZiBjb21wb25lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0YWcgKGltZywgaWZyYW1lLCB2aWRlbylcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRDb21wb25lbnRMaW5lQnJlYWtlcjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gbGluZSBicmVha2VyXHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVCcmVha2VyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB1dGlsLmlzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgY29uc3QgdF9zdHlsZSA9IGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcl90LnN0eWxlO1xyXG4gICAgICAgICAgICBjb25zdCBiX3N0eWxlID0gY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX2Iuc3R5bGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuY29udGV4dC5yZXNpemluZy5yZXNpemVDb250YWluZXIuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJyA/IHRoaXMuY29udGV4dC5yZXNpemluZy5yZXNpemVDb250YWluZXIgOiBlbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNMaXN0ID0gdXRpbC5pc0xpc3RDZWxsKGNvbnRhaW5lci5wYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgbGV0IGNvbXBvbmVudFRvcCwgd1Njcm9sbCwgdztcclxuICAgICAgICAgICAgLy8gdG9wXHJcbiAgICAgICAgICAgIGlmIChpc0xpc3QgPyAhY29udGFpbmVyLnByZXZpb3VzU2libGluZyA6ICF1dGlsLmlzRm9ybWF0RWxlbWVudChjb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9saW5lQnJlYWtDb21wID0gY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgd1Njcm9sbCA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFRvcCA9IHV0aWwuZ2V0T2Zmc2V0KGVsZW1lbnQsIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpLnRvcCArIHdTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICB3ID0gKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICB0X3N0eWxlLnRvcCA9IChjb21wb25lbnRUb3AgLSB3U2Nyb2xsIC0gMTIpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIHRfc3R5bGUubGVmdCA9ICh1dGlsLmdldE9mZnNldCh0YXJnZXQpLmxlZnQgKyB3KSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB0X3N0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdF9zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGJvdHRvbVxyXG4gICAgICAgICAgICBpZiAoaXNMaXN0ID8gIWNvbnRhaW5lci5uZXh0U2libGluZyA6ICF1dGlsLmlzRm9ybWF0RWxlbWVudChjb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb21wb25lbnRUb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fbGluZUJyZWFrQ29tcCA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICB3U2Nyb2xsID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFRvcCA9IHV0aWwuZ2V0T2Zmc2V0KGVsZW1lbnQsIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpLnRvcCArIHdTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdyA9ICh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSAvIDI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYl9zdHlsZS50b3AgPSAoY29tcG9uZW50VG9wICsgdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHdTY3JvbGwgLSAxMikgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgYl9zdHlsZS5sZWZ0ID0gKHV0aWwuZ2V0T2Zmc2V0KHRhcmdldCkubGVmdCArIHRhcmdldC5vZmZzZXRXaWR0aCAtIHcgLSAyNCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgYl9zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJfc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jaGVja0R1cGxpY2F0ZU5vZGU6IGZ1bmN0aW9uIChvTm9kZSwgcGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9kdXBsZUNoZWNrKGN1cnJlbnQsIHBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZE5vZGVzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkob05vZGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9kdXBsZUNoZWNrOiBmdW5jdGlvbiAob05vZGUsIHBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVGV4dFN0eWxlRWxlbWVudChvTm9kZSkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9TdHlsZXMgPSAob05vZGUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvW147XSs7L2cpIHx8IFtdKS5tYXAoZnVuY3Rpb24odil7IHJldHVybiB2LnRyaW0oKTsgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVOYW1lID0gb05vZGUubm9kZU5hbWU7XHJcbiAgICAgICAgICAgIGlmICgvXnNwYW4kL2kudGVzdChub2RlTmFtZSkgJiYgb1N0eWxlcy5sZW5ndGggPT09IDApIHJldHVybiBvTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBkdXBsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KGFuY2VzdG9yKSB8fCAhdXRpbC5pc1RleHRTdHlsZUVsZW1lbnQoYW5jZXN0b3IpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jZXN0b3Iubm9kZU5hbWUgPT09IG5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVwbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IGFuY2VzdG9yLnN0eWxlLmNzc1RleHQubWF0Y2goL1teO10rOy9nKSB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3R5bGVzLmxlbmd0aCwgajsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaiA9IG9TdHlsZXMuaW5kZXhPZihzdHlsZXNbaV0udHJpbSgpKSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb1N0eWxlcy5zcGxpY2UoaiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFuY2VzdG9yLmNsYXNzTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvTm9kZS5jbGFzc0xpc3QucmVtb3ZlKGFuY2VzdG9yLmNsYXNzTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoYW5jZXN0b3IucGFyZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pKHBhcmVudE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGR1cGxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShvTm9kZS5zdHlsZS5jc3NUZXh0ID0gb1N0eWxlcy5qb2luKCcgJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBvTm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLmF0dHJpYnV0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb05vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXNlLWR1cGxlJywgJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG9Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgc2VsZWN0ZWQgbm9kZSBhbmQgaW5zZXJ0IGFyZ3VtZW50IHZhbHVlIG5vZGUgYW5kIHJldHVybi5cclxuICAgICAgICAgKiBJZiB0aGUgXCJhZnRlck5vZGVcIiBleGlzdHMsIGl0IGlzIGluc2VydGVkIGFmdGVyIHRoZSBcImFmdGVyTm9kZVwiXHJcbiAgICAgICAgICogSW5zZXJ0aW5nIGEgdGV4dCBub2RlIG1lcmdlcyB3aXRoIGJvdGggdGV4dCBub2RlcyBvbiBib3RoIHNpZGVzIGFuZCByZXR1cm5zIGEgbmV3IFwieyBjb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQgfVwiLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gb05vZGUgRWxlbWVudCB0byBiZSBpbnNlcnRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZXxudWxsfSBhZnRlck5vZGUgSWYgdGhlIG5vZGUgZXhpc3RzLCBpdCBpcyBpbnNlcnRlZCBhZnRlciB0aGUgbm9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2hlY2tDaGFyQ291bnQgSWYgdHJ1ZSwgaWYgXCJvcHRpb25zLm1heENoYXJDb3VudFwiIGlzIGV4Y2VlZGVkIHdoZW4gXCJlbGVtZW50XCIgaXMgYWRkZWQsIG51bGwgaXMgcmV0dXJuZWQgd2l0aG91dCBhZGRpdGlvbi5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fE5vZGV8bnVsbH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnNlcnROb2RlOiBmdW5jdGlvbiAob05vZGUsIGFmdGVyTm9kZSwgY2hlY2tDaGFyQ291bnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSB8fCAoY2hlY2tDaGFyQ291bnQgJiYgIXRoaXMuY2hlY2tDaGFyQ291bnQob05vZGUsIG51bGwpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBmTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgbGV0IGxpbmUgPSB1dGlsLmlzTGlzdENlbGwocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIpID8gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIgOiB1dGlsLmdldEZvcm1hdEVsZW1lbnQodGhpcy5nZXRTZWxlY3Rpb25Ob2RlKCksIG51bGwpO1xyXG4gICAgICAgICAgICBsZXQgaW5zZXJ0TGlzdENlbGwgPSB1dGlsLmlzTGlzdENlbGwobGluZSkgJiYgKHV0aWwuaXNMaXN0Q2VsbChvTm9kZSkgfHwgdXRpbC5pc0xpc3Qob05vZGUpKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBwYXJlbnROb2RlLCBvcmlnaW5BZnRlciwgdGVtcEFmdGVyTm9kZSwgdGVtcFBhcmVudE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBmcmVlRm9ybWF0ID0gdXRpbC5pc0ZyZWVGb3JtYXRFbGVtZW50KGxpbmUpO1xyXG4gICAgICAgICAgICBjb25zdCBpc0Zvcm1hdHMgPSAoIWZyZWVGb3JtYXQgJiYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkpIHx8IHV0aWwuaXNDb21wb25lbnQob05vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wQWZ0ZXJOb2RlID0gYWZ0ZXJOb2RlIHx8IHV0aWwuaXNMaXN0KG9Ob2RlKSA/IGxpbmUubGFzdENoaWxkIDogbGluZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICB0ZW1wUGFyZW50Tm9kZSA9IHV0aWwuaXNMaXN0KG9Ob2RlKSA/IGxpbmUgOiAodGVtcEFmdGVyTm9kZSB8fCBsaW5lKS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWFmdGVyTm9kZSAmJiAoaXNGb3JtYXRzIHx8IHV0aWwuaXNDb21wb25lbnQob05vZGUpIHx8IHV0aWwuaXNNZWRpYShvTm9kZSkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0VkZ2UgPSB0aGlzLmlzRWRnZVBvaW50KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0LCAnZW5kJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSByLmNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZDb250YWluZXIgPSAoY29udGFpbmVyID09PSByLnByZXZDb250YWluZXIgJiYgcmFuZ2UuY29sbGFwc2VkKSA/IG51bGwgOiByLnByZXZDb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluc2VydExpc3RDZWxsICYmIHByZXZDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wUGFyZW50Tm9kZSA9IHByZXZDb250YWluZXIubm9kZVR5cGUgPT09IDMgPyBwcmV2Q29udGFpbmVyLnBhcmVudE5vZGUgOiBwcmV2Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wUGFyZW50Tm9kZS5jb250YWlucyhjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzYW1lUGFyZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBBZnRlck5vZGUucGFyZW50Tm9kZSAmJiB0ZW1wQWZ0ZXJOb2RlLnBhcmVudE5vZGUgIT09IHRlbXBQYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQWZ0ZXJOb2RlID0gdGVtcEFmdGVyTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtZVBhcmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzYW1lUGFyZW50ICYmIGNvbnRhaW5lciA9PT0gcHJldkNvbnRhaW5lcikgdGVtcEFmdGVyTm9kZSA9IHRlbXBBZnRlck5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnNlcnRMaXN0Q2VsbCAmJiB1dGlsLmlzTGlzdENlbGwoY29udGFpbmVyKSAmJiAhbGluZS5wYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wUGFyZW50Tm9kZS5hcHBlbmRDaGlsZChsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGVtcFBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBBZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKGNvbnRhaW5lcikgfHwgaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXB0aEZvcm1hdCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChjb250YWluZXIsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiB0aGlzLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGN1cnJlbnQpIHx8IHRoaXMuaXNMaXN0Q2VsbChjdXJyZW50KTsgfS5iaW5kKHV0aWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSB1dGlsLnNwbGl0RWxlbWVudChjb250YWluZXIsIHIub2Zmc2V0LCAhZGVwdGhGb3JtYXQgPyAwIDogdXRpbC5nZXRFbGVtZW50RGVwdGgoZGVwdGhGb3JtYXQpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhZnRlck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IGFmdGVyTm9kZSA9IGxpbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnNlcnRMaXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZS5jb250YWlucyhjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJMaXN0ID0gdXRpbC5pc0xpc3QobGluZS5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbCA9IGxpbmUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKGFmdGVyTm9kZS50ZXh0Q29udGVudC50cmltKCkgPyBhZnRlck5vZGUgOiB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSBsaW5lLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbGwuYXBwZW5kQ2hpbGQodXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NlbGwuYXBwZW5kQ2hpbGQobGluZS5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdDZWxsLCBsaW5lLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFmdGVyTm9kZSA9IGFmdGVyTm9kZSA9IG5ld0NlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBhZnRlck5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmFuZ2UgPSAoIWFmdGVyTm9kZSAmJiAhaXNGb3JtYXRzKSA/IHRoaXMuZ2V0UmFuZ2VfYWRkTGluZSh0aGlzLmdldFJhbmdlKCksIG51bGwpIDogdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBjb21tb25Db24gPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXRSYW5nZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSBjb21tb25Db24gJiYgdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29tbW9uQ29uKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRDb24gPSBmb3JtYXRSYW5nZSA/IChjb21tb25Db24uY2hpbGROb2Rlc1tzdGFydE9mZl0gfHwgY29tbW9uQ29uLmNoaWxkTm9kZXNbMF0gfHwgcmFuZ2Uuc3RhcnRDb250YWluZXIpIDogcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZENvbiA9IGZvcm1hdFJhbmdlID8gKGNvbW1vbkNvbi5jaGlsZE5vZGVzW2VuZE9mZl0gfHwgY29tbW9uQ29uLmNoaWxkTm9kZXNbY29tbW9uQ29uLmNoaWxkTm9kZXMubGVuZ3RoIC0gMV0gfHwgcmFuZ2UuZW5kQ29udGFpbmVyKSA6IHJhbmdlLmVuZENvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIGlmICghaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYWZ0ZXJOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gc3RhcnRDb24ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qKiBObyBTZWxlY3QgcmFuZ2Ugbm9kZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1vbkNvbi5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1vbkNvbi50ZXh0Q29udGVudC5sZW5ndGggPiBlbmRPZmYpIGFmdGVyTm9kZSA9IGNvbW1vbkNvbi5zcGxpdFRleHQoZW5kT2ZmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgYWZ0ZXJOb2RlID0gY29tbW9uQ29uLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzQnJlYWsocGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYyA9IHBhcmVudE5vZGUuY2hpbGROb2Rlc1tzdGFydE9mZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNOb2RlID0gKGMgJiYgYy5ub2RlVHlwZSA9PT0gMyAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjKSAmJiB1dGlsLmlzQnJlYWsoYy5uZXh0U2libGluZykpID8gYy5uZXh0U2libGluZyA6IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvY3VzTm9kZS5uZXh0U2libGluZyAmJiB1dGlsLmlzQnJlYWsoZm9jdXNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmb2N1c05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9ICh1dGlsLmlzQnJlYWsoZm9jdXNOb2RlKSAmJiAhdXRpbC5pc0JyZWFrKG9Ob2RlKSkgPyBmb2N1c05vZGUgOiBmb2N1c05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLyoqIFNlbGVjdCByYW5nZSBub2RlcyAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1NhbWVDb250YWluZXIgPSBzdGFydENvbiA9PT0gZW5kQ29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTYW1lQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VkZ2VQb2ludChlbmRDb24sIGVuZE9mZikpIGFmdGVyTm9kZSA9IGVuZENvbi5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgYWZ0ZXJOb2RlID0gZW5kQ29uLnNwbGl0VGV4dChlbmRPZmYpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVOb2RlID0gc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFZGdlUG9pbnQoc3RhcnRDb24sIHN0YXJ0T2ZmKSkgcmVtb3ZlTm9kZSA9IHN0YXJ0Q29uLnNwbGl0VGV4dChzdGFydE9mZik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIGlzRm9ybWF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlZFRhZyA9IHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcmVtb3ZlZFRhZy5jb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q29udGFpbmVyID0gcmVtb3ZlZFRhZy5wcmV2Q29udGFpbmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIGlzRm9ybWF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICc8JyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+PGJyPjwvJyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChjb250YWluZXIpICYmIG9Ob2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNGb3JtYXRzICYmIHByZXZDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcHJldkNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMyA/IHByZXZDb250YWluZXIucGFyZW50Tm9kZSA6IHByZXZDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUuY29udGFpbnMoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2FtZVBhcmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGFmdGVyTm9kZS5wYXJlbnROb2RlICYmIGFmdGVyTm9kZS5wYXJlbnROb2RlICE9PSBwYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBhZnRlck5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVQYXJlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2FtZVBhcmVudCAmJiBjb250YWluZXIgPT09IHByZXZDb250YWluZXIpIGFmdGVyTm9kZSA9IGFmdGVyTm9kZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1d5c2l3eWdEaXYoY29udGFpbmVyKSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQob05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZCh1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gaXNGb3JtYXRzID8gZW5kQ29uIDogY29udGFpbmVyID09PSBwcmV2Q29udGFpbmVyID8gY29udGFpbmVyLm5leHRTaWJsaW5nIDogY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSAoIWFmdGVyTm9kZSB8fCAhYWZ0ZXJOb2RlLnBhcmVudE5vZGUpID8gY29tbW9uQ29uIDogYWZ0ZXJOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGFmdGVyTm9kZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoYWZ0ZXJOb2RlKSAmJiBhZnRlck5vZGUucGFyZW50Tm9kZSAhPT0gY29tbW9uQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gYWZ0ZXJOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBoYXMgYWZ0ZXJOb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGFmdGVyTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IGFmdGVyTm9kZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5BZnRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgbm9kZVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpbnNlcnRMaXN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihhZnRlck5vZGUpIHx8IHBhcmVudE5vZGUgPT09IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCAoIXV0aWwuaXNMaXN0Q2VsbChwYXJlbnROb2RlKSAmJiB1dGlsLmlzQ29tcG9uZW50KG9Ob2RlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkUGFyZW50ID0gcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KGFmdGVyTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBhZnRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNMaXN0Q2VsbChhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgYWZ0ZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFvcmlnaW5BZnRlciAmJiAhYWZ0ZXJOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5yZW1vdmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSByLmNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMyA/ICh1dGlsLmlzTGlzdENlbGwodXRpbC5nZXRGb3JtYXRFbGVtZW50KHIuY29udGFpbmVyLCBudWxsKSkgPyByLmNvbnRhaW5lciA6ICh1dGlsLmdldEZvcm1hdEVsZW1lbnQoci5jb250YWluZXIsIG51bGwpIHx8IHIuY29udGFpbmVyLnBhcmVudE5vZGUpKSA6IHIuY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2VDb24gPSB1dGlsLmlzV3lzaXd5Z0Rpdihjb250YWluZXIpIHx8IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSByYW5nZUNvbiA/IGNvbnRhaW5lciA6IGNvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gcmFuZ2VDb24gPyBudWxsIDogY29udGFpbmVyLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIHBhcmVudE5vZGUgIT09IG9sZFBhcmVudCkgdXRpbC5yZW1vdmVJdGVtKG9sZFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGb3JtYXRzICYmICFmcmVlRm9ybWF0ICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KHBhcmVudE5vZGUpICYmICF1dGlsLmlzTGlzdENlbGwocGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudE5vZGUpICYmIChvTm9kZS5ub2RlVHlwZSA9PT0gMyB8fCB1dGlsLmlzQnJlYWsob05vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb21hdE5vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9tYXROb2RlLmFwcGVuZENoaWxkKG9Ob2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZk5vZGUgPSBvTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUgPSBmb21hdE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGluc2VydC0tXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0TGlzdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRlbXBQYXJlbnROb2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSB0ZW1wUGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdGVtcEFmdGVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHBhcmVudE5vZGUgPT09IGFmdGVyTm9kZSA/IHBhcmVudE5vZGUubGFzdENoaWxkIDogYWZ0ZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwob05vZGUpICYmICF1dGlsLmlzTGlzdChwYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwocGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gcGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdWwgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ29sJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHVsLCBhZnRlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gdWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluc2VydExpc3RDZWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0R1cGxpY2F0ZU5vZGUob05vZGUsIHBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUob05vZGUsIGFmdGVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluc2VydExpc3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKGxpbmUudGV4dENvbnRlbnQudHJpbSgpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0obGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gb05vZGUubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoTGlzdCA9IHV0aWwuZ2V0QXJyYXlJdGVtKGxpbmUuY2hpbGRyZW4sIHV0aWwuaXNMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Ob2RlICE9PSBjaExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvTm9kZS5hcHBlbmRDaGlsZChjaExpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gY2hMaXN0LnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChvTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb05vZGUgPSBwYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShsaW5lLnRleHRDb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0obGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKG9Ob2RlKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1NVTkVESVRPUi5pbnNlcnROb2RlLndhcm5dICcgKyBlcnJvcik7XHJcbiAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZk5vZGUpIG9Ob2RlID0gZk5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZHVwbGVOb2RlcyA9IHBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc2UtZHVwbGVdJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHVwbGVOb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGR1cGxlTm9kZXMubGVuZ3RoLCBkLCBjLCBjaCwgcGFyZW50OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGR1cGxlTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gZC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBkLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoYywgZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09PSBvTm9kZSkgb05vZGUgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICgodXRpbC5pc0Zvcm1hdEVsZW1lbnQob05vZGUpIHx8IHV0aWwuaXNDb21wb25lbnQob05vZGUpKSAmJiBzdGFydENvbiA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY0l0ZW0gPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29tbW9uQ29uLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY0l0ZW0gJiYgY0l0ZW0ubm9kZVR5cGUgPT09IDEgJiYgdXRpbC5pc0VtcHR5TGluZShjSXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZyZWVGb3JtYXQgJiYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvTm9kZSA9IHRoaXMuX3NldEludG9GcmVlRm9ybWF0KG9Ob2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNDb21wb25lbnQob05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9Ob2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IG9Ob2RlLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShvTm9kZSwgb2Zmc2V0LCBvTm9kZSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1dGlsLmlzQnJlYWsob05vZGUpICYmICF1dGlsLmlzTGlzdENlbGwob05vZGUpICYmIHV0aWwuaXNGb3JtYXRFbGVtZW50KHBhcmVudE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB6ZXJvV2lkdGggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLnByZXZpb3VzU2libGluZyB8fCB1dGlsLmlzQnJlYWsob05vZGUucHJldmlvdXNTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHplcm9XaWR0aCwgb05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9Ob2RlLm5leHRTaWJsaW5nIHx8IHV0aWwuaXNCcmVhayhvTm9kZS5uZXh0U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHplcm9XaWR0aCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIG9Ob2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShvTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gb05vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKG9Ob2RlLCBvZmZzZXQsIG9Ob2RlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBvTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRJbnRvRnJlZUZvcm1hdDogZnVuY3Rpb24gKG9Ob2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBvTm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBsZXQgb05vZGVDaGlsZHJlbiwgbGFzdE9Ob2RlO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG9Ob2RlKSkge1xyXG4gICAgICAgICAgICAgICAgb05vZGVDaGlsZHJlbiA9IG9Ob2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBsYXN0T05vZGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChvTm9kZUNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9Ob2RlID0gb05vZGVDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQobGFzdE9Ob2RlKSB8fCB1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KGxhc3RPTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0SW50b0ZyZWVGb3JtYXQobGFzdE9Ob2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvTm9kZS5wYXJlbnROb2RlKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgb05vZGVDaGlsZHJlbiA9IG9Ob2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGFzdE9Ob2RlLCBvTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9Ob2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB1dGlsLnJlbW92ZUl0ZW0ob05vZGUpO1xyXG4gICAgICAgICAgICAgICAgb05vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShvTm9kZSwgbGFzdE9Ob2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG9Ob2RlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEZWxldGUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBub2RlcyBhbmQgcmVzZXQgc2VsZWN0aW9uIHJhbmdlXHJcbiAgICAgICAgICogUmV0dXJucyB7Y29udGFpbmVyOiBcInRoZSBsYXN0IGVsZW1lbnQgYWZ0ZXIgZGVsZXRpb25cIiwgb2Zmc2V0OiBcIm9mZnNldFwiLCBwcmV2Q29udGFpbmVyOiBcInByZXZpb3VzRWxlbWVudFNpYmxpbmcgT2YgdGhlIGRlbGV0ZWQgYXJlYVwifVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlTm9kZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNldFJhbmdlVG9UZXh0Tm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgdXRpbC5pc01lZGlhQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VFbGVtZW50KGZpbGVDb21wb25lbnQsIGZvcm1hdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9ybWF0LCAwLCBmb3JtYXQsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGZvcm1hdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGFpbmVyOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNTdGFydEVkZ2UgPSByYW5nZS5zdGFydE9mZnNldCA9PT0gMDtcclxuICAgICAgICAgICAgY29uc3QgaXNFbmRFZGdlID0gY29yZS5pc0VkZ2VQb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpO1xyXG4gICAgICAgICAgICBsZXQgcHJldkNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBzdGFydFByZXZFbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBlbmROZXh0RWwgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoaXNTdGFydEVkZ2UpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0UHJldkVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydFByZXZFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZDb250YWluZXIgPSBzdGFydFByZXZFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UHJldkVsID0gcHJldkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNFbmRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBlbmROZXh0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIGVuZE5leHRFbCA9IGVuZE5leHRFbCA/IGVuZE5leHRFbC5uZXh0RWxlbWVudFNpYmxpbmcgOiBlbmROZXh0RWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIsIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3QgY29tbW9uQ29uID0gKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLm5vZGVUeXBlID09PSAzICYmIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IHN0YXJ0Q29uLnBhcmVudE5vZGUpID8gc3RhcnRDb24ucGFyZW50Tm9kZSA6IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBpZiAoY29tbW9uQ29uID09PSBzdGFydENvbiAmJiBjb21tb25Db24gPT09IGVuZENvbikge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSBjb21tb25Db24uY2hpbGRyZW5bc3RhcnRPZmZdO1xyXG4gICAgICAgICAgICAgICAgZW5kQ29uID0gY29tbW9uQ29uLmNoaWxkcmVuW2VuZE9mZl07XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IGVuZE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghc3RhcnRDb24gfHwgIWVuZENvbikgcmV0dXJuICB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbW1vbkNvbixcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXJ0Q29uID09PSBlbmRDb24gJiYgcmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb24udGV4dENvbnRlbnQgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uoc3RhcnRDb24udGV4dENvbnRlbnQuc3Vic3RyKHN0YXJ0T2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHN0YXJ0T2ZmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGFpbmVyOiBzdGFydENvbiAmJiBzdGFydENvbi5wYXJlbnROb2RlID8gc3RhcnRDb24gOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGJlZm9yZU5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZE5vZGVzKGNvbW1vbkNvbiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIHN0YXJ0Q29uKTtcclxuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIGVuZENvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGggPiAwICYmIHN0YXJ0SW5kZXggPiAtMSAmJiBlbmRJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleCArIDEsIHN0YXJ0Tm9kZSA9IHN0YXJ0Q29uOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2ldID09PSBzdGFydE5vZGUucGFyZW50Tm9kZSAmJiBjaGlsZE5vZGVzW2ldLmZpcnN0Q2hpbGQgPT09IHN0YXJ0Tm9kZSAmJiBzdGFydE9mZiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROb2RlID0gc3RhcnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBlbmRJbmRleCAtIDEsIGVuZE5vZGUgPSBlbmRDb247IGkgPiBzdGFydEluZGV4OyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2Rlc1tpXSA9PT0gZW5kTm9kZS5wYXJlbnROb2RlICYmIGNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2Rlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE5vZGUgPSBlbmROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tZW5kSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGNvbW1vbkNvbikgfHwgdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24pIHx8IHV0aWwuaXNXeXNpd3lnRGl2KGNvbW1vbkNvbikgfHwgdXRpbC5pc0JyZWFrKGNvbW1vbkNvbikgfHwgdXRpbC5pc01lZGlhKGNvbW1vbkNvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29tbW9uQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29tbW9uQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRPZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGROb2Rlcy5wdXNoKGNvbW1vbkNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb24gPSBlbmRDb24gPSBjb21tb25Db247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gZW5kQ29uID0gY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKHN0YXJ0Q29uKSB8fCB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdXRpbC5pc01lZGlhKGNvbW1vbkNvbikgPyBjb21tb25Db24gOiBzdGFydENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gZW5kSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gY2hpbGROb2Rlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDAgfHwgKGl0ZW0ubm9kZVR5cGUgPT09IDMgJiYgaXRlbS5kYXRhID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9kZVJlbW92ZUxpc3RJdGVtKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBzdGFydENvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChzdGFydENvbikpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJlZm9yZU5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHN0YXJ0Q29uLnRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShzdGFydENvbi5zdWJzdHJpbmdEYXRhKDAsIHN0YXJ0T2ZmKSArIGVuZENvbi5zdWJzdHJpbmdEYXRhKGVuZE9mZiwgKGVuZENvbi5sZW5ndGggLSBlbmRPZmYpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBzdGFydE9mZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZU5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHN0YXJ0Q29uLnN1YnN0cmluZ0RhdGEoMCwgc3RhcnRPZmYpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZU5vZGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbi5kYXRhID0gYmVmb3JlTm9kZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25vZGVSZW1vdmVMaXN0SXRlbShzdGFydENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gZW5kQ29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbi5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChlbmRDb24pKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhZnRlck5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKGVuZENvbi50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShlbmRDb24uc3Vic3RyaW5nRGF0YShlbmRPZmYsIChlbmRDb24ubGVuZ3RoIC0gZW5kT2ZmKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFmdGVyTm9kZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbi5kYXRhID0gYWZ0ZXJOb2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm9kZVJlbW92ZUxpc3RJdGVtKGVuZENvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub2RlUmVtb3ZlTGlzdEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVuZFVsID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGVuZENvbiwgJ3VsJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TGkgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc3RhcnRDb24sICdsaScpO1xyXG4gICAgICAgICAgICBpZiAoZW5kVWwgJiYgc3RhcnRMaSAmJiBzdGFydExpLmNvbnRhaW5zKGVuZFVsKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gZW5kVWwucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gY29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVuZENvbiAmJiBlbmRDb24ucGFyZW50Tm9kZSA/IGVuZENvbiA6IHN0YXJ0Q29uICYmIHN0YXJ0Q29uLnBhcmVudE5vZGUgPyBzdGFydENvbiA6IChyYW5nZS5lbmRDb250YWluZXIgfHwgcmFuZ2Uuc3RhcnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gKCFpc1N0YXJ0RWRnZSAmJiAhaXNFbmRFZGdlKSA/IG9mZnNldCA6IGlzRW5kRWRnZSA/IGNvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGggOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNXeXNpd3lnRGl2KGNvbnRhaW5lcikgJiYgY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYyA9IHV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMoY29udGFpbmVyLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmIChyYykgY29udGFpbmVyID0gcmMuc2MgfHwgcmMuZWMgfHwgY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KGNvbnRhaW5lcikgJiYgIShzdGFydENvbiAmJiBzdGFydENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVuZE5leHRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVuZE5leHRFbDtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydFByZXZFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHN0YXJ0UHJldkVsO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCByYW5nZVxyXG4gICAgICAgICAgICB0aGlzLnNldFJhbmdlKGNvbnRhaW5lciwgb2Zmc2V0LCBjb250YWluZXIsIG9mZnNldCk7XHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgICAgICAgIHByZXZDb250YWluZXI6IHByZXZDb250YWluZXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfbm9kZVJlbW92ZUxpc3RJdGVtOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoaXRlbSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCF1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtQWxsUGFyZW50cyhmb3JtYXQsIG51bGwsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZvcm1hdCAmJiB1dGlsLmlzTGlzdChmb3JtYXQuZmlyc3RDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdC5pbnNlcnRCZWZvcmUodXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKSwgZm9ybWF0LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFwcGVuZGVkIGFsbCBzZWxlY3RlZCBmb3JtYXQgRWxlbWVudCB0byB0aGUgYXJndW1lbnQgZWxlbWVudCBhbmQgaW5zZXJ0XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSByYW5nZUVsZW1lbnQgRWxlbWVudCBvZiB3cmFwIHRoZSBhcmd1bWVudHMgKEJMT0NLUVVPVEUuLi4pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwbHlSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChyYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlTGluZXMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHNBbmRDb21wb25lbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKCFyYW5nZUxpbmVzIHx8IHJhbmdlTGluZXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsaW5lc0xvb3A6XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByYW5nZUxpbmVzLmxlbmd0aCwgbGluZSwgbmVzdGVkLCBmRWwsIGxFbCwgZiwgbDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gcmFuZ2VMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3RDZWxsKGxpbmUpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXN0ZWQgPSBsaW5lLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobmVzdGVkICYmIHV0aWwuaXNMaXN0Q2VsbChsaW5lLm5leHRFbGVtZW50U2libGluZykgJiYgcmFuZ2VMaW5lcy5pbmRleE9mKGxpbmUubmV4dEVsZW1lbnRTaWJsaW5nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbEVsID0gbmVzdGVkLmxhc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlTGluZXMuaW5kZXhPZihsRWwpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGxpc3QgPSBsRWwubGFzdEVsZW1lbnRDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUxpbmVzLmluZGV4T2YobGlzdC5sYXN0RWxlbWVudENoaWxkKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxFbCA9IGxpc3QubGFzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBsaW5lc0xvb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmRWwgPSBuZXN0ZWQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSByYW5nZUxpbmVzLmluZGV4T2YoZkVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHJhbmdlTGluZXMuaW5kZXhPZihsRWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUxpbmVzLnNwbGljZShmLCAobCAtIGYpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHJhbmdlTGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBsYXN0ICA9IHJhbmdlTGluZXNbcmFuZ2VMaW5lcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgbGV0IHN0YW5kVGFnLCBiZWZvcmVUYWcsIHBFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobGFzdCkgfHwgdXRpbC5pc0Zvcm1hdEVsZW1lbnQobGFzdCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YW5kVGFnID0gbGFzdDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YW5kVGFnID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQobGFzdCwgbnVsbCkgfHwgdXRpbC5nZXRGb3JtYXRFbGVtZW50KGxhc3QsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0NlbGwoc3RhbmRUYWcpKSB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBzdGFuZFRhZztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZVRhZyA9IHN0YW5kVGFnLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBzdGFuZFRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50RGVwdGggPSB1dGlsLmdldEVsZW1lbnREZXB0aChzdGFuZFRhZyk7XHJcbiAgICAgICAgICAgIGxldCBsaXN0UGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgbGluZUFyciA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVJdGVtcyA9IGZ1bmN0aW9uIChwYXJlbnQsIG9yaWdpbiwgYmVmb3JlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudCAhPT0gb3JpZ2luICYmICF1dGlsLmlzVGFibGUob3JpZ2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW4gJiYgdXRpbC5nZXRFbGVtZW50RGVwdGgocGFyZW50KSA9PT0gdXRpbC5nZXRFbGVtZW50RGVwdGgob3JpZ2luKSkgcmV0dXJuIGJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICBjYyA9IHV0aWwucmVtb3ZlSXRlbUFsbFBhcmVudHMob3JpZ2luLCBudWxsLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYyA/IGNjLmVjIDogYmVmb3JlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJhbmdlTGluZXMubGVuZ3RoLCBsaW5lLCBvcmlnaW5QYXJlbnQsIGRlcHRoLCBiZWZvcmUsIG5leHRMaW5lLCBuZXh0TGlzdCwgbmVzdGVkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSByYW5nZUxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luUGFyZW50ID0gbGluZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcmlnaW5QYXJlbnQgfHwgcmFuZ2VFbGVtZW50LmNvbnRhaW5zKG9yaWdpblBhcmVudCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlcHRoID0gdXRpbC5nZXRFbGVtZW50RGVwdGgobGluZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KG9yaWdpblBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dExpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQYXJlbnQgPSBuZXh0TGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50ID0gb3JpZ2luUGFyZW50LmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVBcnIucHVzaChsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0TGluZSA9IHJhbmdlTGluZXNbaSArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSB8fCAobmV4dExpbmUgJiYgbmV4dExpbmUucGFyZW50Tm9kZSAhPT0gb3JpZ2luUGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dExpbmUgJiYgbGluZS5jb250YWlucyhuZXh0TGluZS5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dExpc3QgPSBuZXh0TGluZS5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gb3JpZ2luUGFyZW50LnBhcmVudE5vZGUsIHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh1dGlsLmlzTGlzdChsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHV0aWwuY3JlYXRlRWxlbWVudChsaXN0Lm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobGlzdFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW50ID0gcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBsaXN0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChvcmlnaW5QYXJlbnQsIGxpbmVBcnIsIG51bGwsIHRydWUsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudERlcHRoID49IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnREZXB0aCA9IGRlcHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcEVsZW1lbnQgPSBlZGdlLmNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlVGFnID0gcmVtb3ZlSXRlbXMocEVsZW1lbnQsIG9yaWdpblBhcmVudCwgZWRnZS5lYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlVGFnKSBwRWxlbWVudCA9IGJlZm9yZVRhZy5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBFbGVtZW50ID09PSBlZGdlLmNjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBlZGdlLmVjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocEVsZW1lbnQgIT09IGVkZ2UuY2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IHJlbW92ZUl0ZW1zKHBFbGVtZW50LCBlZGdlLmNjLCBiZWZvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkKSBiZWZvcmVUYWcgPSBiZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJlZm9yZVRhZyA9IGVkZ2UuY2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gZWRnZS5yZW1vdmVBcnJheS5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQYXJlbnQuYXBwZW5kQ2hpbGQoZWRnZS5yZW1vdmVBcnJheVtjXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmVzdGVkKSByYW5nZUVsZW1lbnQuYXBwZW5kQ2hpbGQobGlzdFBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0TGlzdCkgZWRnZS5yZW1vdmVBcnJheVtlZGdlLnJlbW92ZUFycmF5Lmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKG5leHRMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudERlcHRoID49IGRlcHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudERlcHRoID0gZGVwdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBFbGVtZW50ID0gb3JpZ2luUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWcgPSBsaW5lLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50LmFwcGVuZENoaWxkKGxpbmUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocEVsZW1lbnQgIT09IG9yaWdpblBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSByZW1vdmVJdGVtcyhwRWxlbWVudCwgb3JpZ2luUGFyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZSAhPT0gdW5kZWZpbmVkKSBiZWZvcmVUYWcgPSBiZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB1dGlsLm1lcmdlU2FtZVRhZ3MocmFuZ2VFbGVtZW50LCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHV0aWwubWVyZ2VOZXN0ZWRUYWdzKHJhbmdlRWxlbWVudCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIHRoaXMuaXNMaXN0KGN1cnJlbnQpOyB9LmJpbmQodXRpbCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gTmVzdGVkIGxpc3RcclxuICAgICAgICAgICAgaWYgKGJlZm9yZVRhZyAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChiZWZvcmVUYWcpID4gMCAmJiAodXRpbC5pc0xpc3QoYmVmb3JlVGFnLnBhcmVudE5vZGUpIHx8IHV0aWwuaXNMaXN0KGJlZm9yZVRhZy5wYXJlbnROb2RlLnBhcmVudE5vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVwdGhGb3JtYXQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoYmVmb3JlVGFnLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc1JhbmdlRm9ybWF0RWxlbWVudChjdXJyZW50KSAmJiAhdGhpcy5pc0xpc3QoY3VycmVudCk7IH0uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFJhbmdlID0gdXRpbC5zcGxpdEVsZW1lbnQoYmVmb3JlVGFnLCBudWxsLCAhZGVwdGhGb3JtYXQgPyAwIDogdXRpbC5nZXRFbGVtZW50RGVwdGgoZGVwdGhGb3JtYXQpICsgMSk7XHJcbiAgICAgICAgICAgICAgICBzcGxpdFJhbmdlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJhbmdlRWxlbWVudCwgc3BsaXRSYW5nZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGJhc2ljXHJcbiAgICAgICAgICAgICAgICBwRWxlbWVudC5pbnNlcnRCZWZvcmUocmFuZ2VFbGVtZW50LCBiZWZvcmVUYWcpO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlSXRlbXMocmFuZ2VFbGVtZW50LCBiZWZvcmVUYWcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGdlID0gdXRpbC5nZXRFZGdlQ2hpbGROb2RlcyhyYW5nZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIHJhbmdlRWxlbWVudC5sYXN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgaWYgKHJhbmdlTGluZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShlZGdlLnNjLCAwLCBlZGdlLmVjLCBlZGdlLmVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGVkZ2UuZWMsIGVkZ2UuZWMudGV4dENvbnRlbnQubGVuZ3RoLCBlZGdlLmVjLCBlZGdlLmVjLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgZWxlbWVudHMgb2YgdGhlIFwic2VsZWN0ZWRGb3JtYXRzXCIgYXJyYXkgYXJlIGRldGFjaGVkIGZyb20gdGhlIFwicmFuZ2VFbGVtZW50XCIgZWxlbWVudC4gKFwiTElcIiB0YWdzIGFyZSBjb252ZXJ0ZWQgdG8gXCJQXCIgdGFncylcclxuICAgICAgICAgKiBXaGVuIFwic2VsZWN0ZWRGb3JtYXRzXCIgaXMgbnVsbCwgYWxsIGVsZW1lbnRzIGFyZSBkZXRhY2hlZCBhbmQgcmV0dXJuIHtjYzogcGFyZW50Tm9kZSwgc2M6IG5leHRTaWJsaW5nLCBlYzogcHJldmlvdXNTaWJsaW5nLCByZW1vdmVBcnJheTogW0FycmF5IG9mIHJlbW92ZWQgZWxlbWVudHNdfS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHJhbmdlRWxlbWVudCBSYW5nZSBmb3JtYXQgZWxlbWVudCAoUFJFLCBCTE9DS1FVT1RFLCBPTCwgVUwuLi4pXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheXxudWxsfSBzZWxlY3RlZEZvcm1hdHMgQXJyYXkgb2YgZm9ybWF0IGVsZW1lbnRzIChQLCBESVYsIExJLi4uKSB0byByZW1vdmUuXHJcbiAgICAgICAgICogSWYgbnVsbCwgQXBwbGllcyB0byBhbGwgZWxlbWVudHMgYW5kIHJldHVybiB7Y2M6IHBhcmVudE5vZGUsIHNjOiBuZXh0U2libGluZywgZWM6IHByZXZpb3VzU2libGluZ31cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gbmV3UmFuZ2VFbGVtZW50IFRoZSBub2RlKHJhbmdlRWxlbWVudCkgdG8gcmVwbGFjZSB0aGUgY3VycmVudGx5IHdyYXBwZWQgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW92ZSBJZiB0cnVlLCBkZWxldGVkIHdpdGhvdXQgZGV0YWNoZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBub3RIaXN0b3J5UHVzaCBXaGVuIHRydWUsIGl0IGRvZXMgbm90IHVwZGF0ZSB0aGUgaGlzdG9yeSBzdGFjayBhbmQgdGhlIHNlbGVjdGlvbiBvYmplY3QgYW5kIHJldHVybiBFZGdlTm9kZXMgKHV0aWwuZ2V0RWRnZUNoaWxkTm9kZXMpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQ6IGZ1bmN0aW9uIChyYW5nZUVsZW1lbnQsIHNlbGVjdGVkRm9ybWF0cywgbmV3UmFuZ2VFbGVtZW50LCByZW1vdmUsIG5vdEhpc3RvcnlQdXNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBsZXQgc28gPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGVvID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gdXRpbC5nZXRMaXN0Q2hpbGROb2RlcyhyYW5nZUVsZW1lbnQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LnBhcmVudE5vZGUgPT09IHJhbmdlRWxlbWVudDsgfSk7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSByYW5nZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IGZpcnN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCByYW5nZUVsID0gcmFuZ2VFbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMaXN0ID0gdXRpbC5pc0xpc3QobmV3UmFuZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgbGV0IGluc2VydGVkTmV3ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCByZXNldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhcHBlbmROb2RlIChwYXJlbnQsIGluc05vZGUsIHNpYmxpbmcsIG9yaWdpbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShpbnNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc05vZGUuaW5uZXJIVE1MID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgICAgICAgICBzbyA9IGVvID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zTm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoaW5zTm9kZSwgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc05vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zQ2hpbGRyZW4gPSAobW92ZUNvbXBsZXRlID8gaW5zTm9kZSA6IG9yaWdpbk5vZGUpLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm9ybWF0ID0gaW5zTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaW5zQ2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gaW5zQ2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX25vdFRleHROb2RlKGMpICYmICF1dGlsLmlzQnJlYWsoYykgJiYgIXV0aWwuaXNMaXN0Q2VsbChmb3JtYXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZm9ybWF0LCBzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGluc05vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGMsIHNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwocGFyZW50KSAmJiB1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSAmJiB1dGlsLmlzTGlzdChzaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBzaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIHBhcmVudC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luTmV4dCA9IG9yaWdpbk5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV0YWNoUmFuZ2UgPSB1dGlsLmRldGFjaE5lc3RlZExpc3Qob3JpZ2luTm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyYW5nZUVsZW1lbnQgIT09IGRldGFjaFJhbmdlKSB8fCAob3JpZ2luTmV4dCAhPT0gb3JpZ2luTm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZkNoaWxkcmVuID0gZm9ybWF0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGZDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5Ob2RlLmFwcGVuZENoaWxkKGZDaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsZW1lbnQgPSBkZXRhY2hSYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0KSBmaXJzdCA9IGZvcm1hdDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRldGFjaCBsb29wXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGgsIGluc05vZGUsIGxpbmVJbmRleCwgbmV4dDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpbnNOb2RlID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiB1dGlsLmlzTGlzdChyYW5nZUVsKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlICYmIGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRm9ybWF0cyB8fCBzZWxlY3RlZEZvcm1hdHMubGVuZ3RoID09PSBsZW4gfHwgc2VsZWN0ZWRGb3JtYXRzWzBdID09PSBpbnNOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9kZSA9IHJhbmdlRWxlbWVudC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gcmFuZ2VFbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRm9ybWF0cykgbGluZUluZGV4ID0gc2VsZWN0ZWRGb3JtYXRzLmluZGV4T2YoaW5zTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzICYmIGxpbmVJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJhbmdlRWwpIHJhbmdlRWwgPSByYW5nZUVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUVsLmFwcGVuZENoaWxkKGluc05vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzKSBuZXh0ID0gc2VsZWN0ZWRGb3JtYXRzW2xpbmVJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIHJhbmdlRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHJhbmdlRWwsIHJhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdMaXN0ICYmIHV0aWwuaXNMaXN0Q2VsbChpbnNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiB1dGlsLmdldEVsZW1lbnREZXB0aChpbnNOb2RlKSAhPT0gdXRpbC5nZXRFbGVtZW50RGVwdGgobmV4dCkgJiYgKHV0aWwuaXNMaXN0Q2VsbChwYXJlbnQpIHx8IHV0aWwuZ2V0QXJyYXlJdGVtKGluc05vZGUuY2hpbGRyZW4sIHV0aWwuaXNMaXN0LCBmYWxzZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNOZXh0ID0gaW5zTm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXRhY2hSYW5nZSA9IHV0aWwuZGV0YWNoTmVzdGVkTGlzdChpbnNOb2RlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHJhbmdlRWxlbWVudCAhPT0gZGV0YWNoUmFuZ2UpIHx8IGluc05leHQgIT09IGluc05vZGUubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbGVtZW50ID0gZGV0YWNoUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSBpbnNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zTm9kZSA9IHV0aWwuY3JlYXRlRWxlbWVudChyZW1vdmUgPyBpbm5lci5ub2RlTmFtZSA6ICh1dGlsLmlzTGlzdChyYW5nZUVsZW1lbnQucGFyZW50Tm9kZSkgfHwgdXRpbC5pc0xpc3RDZWxsKHJhbmdlRWxlbWVudC5wYXJlbnROb2RlKSkgPyAnTEknIDogdXRpbC5pc0NlbGwocmFuZ2VFbGVtZW50LnBhcmVudE5vZGUpID8gJ0RJVicgOiBvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNDZWxsID0gdXRpbC5pc0xpc3RDZWxsKGluc05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5uZXJDaGlsZHJlbiA9IGlubmVyLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaW5uZXJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdChpbm5lckNoaWxkcmVuWzBdKSAmJiAhaXNDZWxsKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNOb2RlLmFwcGVuZENoaWxkKGlubmVyQ2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5Rm9ybWF0QXR0cmlidXRlcyhpbnNOb2RlLCBpbm5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zTm9kZSA9IGluc05vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluc2VydGVkTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3UmFuZ2VFbGVtZW50LCByYW5nZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZE5ldyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc05vZGUgPSBhcHBlbmROb2RlKG5ld1JhbmdlRWxlbWVudCwgaW5zTm9kZSwgbnVsbCwgY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNOb2RlID0gYXBwZW5kTm9kZShwYXJlbnQsIGluc05vZGUsIHJhbmdlRWxlbWVudCwgY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGb3JtYXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROb2RlID0gaW5zTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9kZSA9IGluc05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaXJzdE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gbGFzdE5vZGUgPSBpbnNOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUFycmF5LnB1c2goaW5zTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0ID0gbW92ZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMocmFuZ2VFbGVtZW50LCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gY3VycmVudC5wYXJlbnROb2RlID09PSByYW5nZUVsZW1lbnQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbCA9IHJhbmdlRWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcmFuZ2VFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2VQYXJlbnQgPSByYW5nZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlUmlnaHQgPSByYW5nZUVsZW1lbnQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZUVsICYmIHJhbmdlRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2VQYXJlbnQuaW5zZXJ0QmVmb3JlKHJhbmdlRWwsIHJhbmdlUmlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3UmFuZ2VFbGVtZW50KSBmaXJzdE5vZGUgPSBuZXdSYW5nZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICBlbHNlIGlmICghZmlyc3ROb2RlKSBmaXJzdE5vZGUgPSByYW5nZUVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICByYW5nZVJpZ2h0ID0gcmFuZ2VFbGVtZW50Lm5leHRTaWJsaW5nICE9PSByYW5nZUVsID8gcmFuZ2VFbGVtZW50Lm5leHRTaWJsaW5nIDogcmFuZ2VFbCA/IHJhbmdlRWwubmV4dFNpYmxpbmcgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgcmFuZ2VFbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUVtcHR5Tm9kZShyYW5nZUVsZW1lbnQsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGVkZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBlZGdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNjOiByYW5nZVBhcmVudCxcclxuICAgICAgICAgICAgICAgICAgICBzYzogZmlyc3ROb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvOiBzbyxcclxuICAgICAgICAgICAgICAgICAgICBlYzogcmFuZ2VSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBlbzogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXJyYXk6IHJlbW92ZUFycmF5XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE5vZGUpIGZpcnN0Tm9kZSA9IGxhc3ROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0Tm9kZSkgbGFzdE5vZGUgPSBmaXJzdE5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEVkZ2UgPSB1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKGZpcnN0Tm9kZSwgKGxhc3ROb2RlLnBhcmVudE5vZGUgPyBmaXJzdE5vZGUgOiBsYXN0Tm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgZWRnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjYzogKGNoaWxkRWRnZS5zYyB8fCBjaGlsZEVkZ2UuZWMpLnBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2M6IGNoaWxkRWRnZS5zYyxcclxuICAgICAgICAgICAgICAgICAgICBzbzogc28sXHJcbiAgICAgICAgICAgICAgICAgICAgZWM6IGNoaWxkRWRnZS5lYyxcclxuICAgICAgICAgICAgICAgICAgICBlbzogZW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXJyYXk6IG51bGxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChub3RIaXN0b3J5UHVzaCkgcmV0dXJuIGVkZ2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlbW92ZSAmJiBlZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRm9ybWF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWRnZS5zYywgMCwgZWRnZS5zYywgMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZWRnZS5zYywgc28sIGVkZ2UuZWMsIGVvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFwic2VsZWN0ZWRGb3JtYXRzXCIgYXJyYXkgYXJlIGRldGFjaGVkIGZyb20gdGhlIGxpc3QgZWxlbWVudC5cclxuICAgICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFwcGxpZWQgd2hlbiB0aGUgZmlyc3QgYW5kIGxhc3QgbGluZXMgb2YgXCJzZWxlY3RlZEZvcm1hdHNcIiBhcmUgXCJMSVwiIHJlc3BlY3RpdmVseS5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzZWxlY3RlZEZvcm1hdHMgQXJyYXkgb2YgZm9ybWF0IGVsZW1lbnRzIChMSSwgUC4uLikgdG8gcmVtb3ZlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVtb3ZlIElmIHRydWUsIGRlbGV0ZWQgd2l0aG91dCBkZXRhY2hlZC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7c2M6IDxMST4sIGVjOiA8TEk+fS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXRhY2hMaXN0OiBmdW5jdGlvbiAoc2VsZWN0ZWRGb3JtYXRzLCByZW1vdmUpIHtcclxuICAgICAgICAgICAgbGV0IHJhbmdlQXJyID0ge307XHJcbiAgICAgICAgICAgIGxldCBsaXN0Rmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGxpc3RMYXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBsYXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3QgcGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiAhdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KTsgfS5iaW5kKHV0aWwpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdGVkRm9ybWF0cy5sZW5ndGgsIHIsIG8sIGxhc3RJbmRleCwgaXNMaXN0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IGkgPT09IGxlbiAtIDE7XHJcbiAgICAgICAgICAgICAgICBvID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCBwYXNzQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGlzTGlzdCA9IHV0aWwuaXNMaXN0KG8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyICYmIGlzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBsaXN0Rmlyc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyICYmIGlzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyICE9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmRldGFjaFJhbmdlRm9ybWF0RWxlbWVudChyYW5nZUFyci5mWzBdLnBhcmVudE5vZGUsIHJhbmdlQXJyLmYsIG51bGwsIHJlbW92ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBzZWxlY3RlZEZvcm1hdHNbaV0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RGaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBlZGdlLnNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCkgbGFzdCA9IGVkZ2UuZWM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQXJyID0ge3I6IHIsIGY6IFt1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0ZWRGb3JtYXRzW2ldLCAnTEknKV19O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCkgbGlzdExhc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUFyci5mLnB1c2godXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGVkRm9ybWF0c1tpXSwgJ0xJJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEluZGV4KSBsaXN0TGFzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggJiYgdXRpbC5pc0xpc3QocikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGdlID0gdGhpcy5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VBcnIuZlswXS5wYXJlbnROb2RlLCByYW5nZUFyci5mLCBudWxsLCByZW1vdmUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0TGFzdCB8fCBsZW4gPT09IDEpIGxhc3QgPSBlZGdlLmVjO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Rmlyc3QpIGZpcnN0ID0gZWRnZS5zYyB8fCBsYXN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2M6IGZpcnN0LFxyXG4gICAgICAgICAgICAgICAgZWM6IGxhc3RcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkLCB1cGRhdGUsIGFuZCBkZWxldGUgbm9kZXMgZnJvbSBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIDEuIElmIHRoZXJlIGlzIGEgbm9kZSBpbiB0aGUgXCJhcHBlbmROb2RlXCIgYXJndW1lbnQsIGEgbm9kZSB3aXRoIHRoZSBzYW1lIHRhZ3MgYW5kIGF0dHJpYnV0ZXMgYXMgXCJhcHBlbmROb2RlXCIgaXMgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbiB0ZXh0LlxyXG4gICAgICAgICAqIDIuIElmIGl0IGlzIGluIHRoZSBzYW1lIHRhZywgb25seSB0aGUgdGFnJ3MgYXR0cmlidXRlcyBhcmUgY2hhbmdlZCB3aXRob3V0IGFkZGluZyBhIHRhZy5cclxuICAgICAgICAgKiAzLiBJZiB0aGUgXCJhcHBlbmROb2RlXCIgYXJndW1lbnQgaXMgbnVsbCwgdGhlIG5vZGUgb2YgdGhlIHNlbGVjdGlvbiBpcyB1cGRhdGUgb3IgcmVtb3ZlIHdpdGhvdXQgYWRkaW5nIGEgbmV3IG5vZGUuXHJcbiAgICAgICAgICogNC4gVGhlIHNhbWUgc3R5bGUgYXMgdGhlIHN0eWxlIGF0dHJpYnV0ZSBvZiB0aGUgXCJzdHlsZUFycmF5XCIgYXJndW1lbnQgaXMgZGVsZXRlZC5cclxuICAgICAgICAgKiAgICAoU3R5bGVzIHNob3VsZCBiZSBwdXQgd2l0aCBhdHRyaWJ1dGUgbmFtZXMgZnJvbSBjc3MuIFtcImJhY2tncm91bmQtY29sb3JcIl0pXHJcbiAgICAgICAgICogNS4gVGhlIHNhbWUgY2xhc3MgbmFtZSBhcyB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIHRoZSBcInN0eWxlQXJyYXlcIiBhcmd1bWVudCBpcyBkZWxldGVkLlxyXG4gICAgICAgICAqICAgIChUaGUgY2xhc3MgbmFtZSBpcyBwcmVjZWRlZCBieSBcIi5cIiBbXCIuY2xhc3NOYW1lXCJdKVxyXG4gICAgICAgICAqIDYuIFVzZSBhIGxpc3Qgb2Ygc3R5bGVzIGFuZCBjbGFzc2VzIG9mIFwiYXBwZW5kTm9kZVwiIGluIFwic3R5bGVBcnJheVwiIHRvIGF2b2lkIGR1cGxpY2F0ZSBwcm9wZXJ0eSB2YWx1ZXMuXHJcbiAgICAgICAgICogNy4gSWYgYSBub2RlIHdpdGggYWxsIHN0eWxlcyBhbmQgY2xhc3NlcyByZW1vdmVkIGhhcyB0aGUgc2FtZSB0YWcgbmFtZSBhcyBcImFwcGVuZE5vZGVcIiBvciBcInJlbW92ZU5vZGVBcnJheVwiLCBvciBcImFwcGVuZE5vZGVcIiBpcyBudWxsLCB0aGF0IG5vZGUgaXMgZGVsZXRlZC5cclxuICAgICAgICAgKiA4LiBSZWdhcmRsZXNzIG9mIHRoZSBzdHlsZSBhbmQgY2xhc3Mgb2YgdGhlIG5vZGUsIHRoZSB0YWcgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBcInJlbW92ZU5vZGVBcnJheVwiIGFyZ3VtZW50IHZhbHVlIGlzIGRlbGV0ZWQuXHJcbiAgICAgICAgICogOS4gSWYgdGhlIFwic3RyaWN0UmVtb3ZlXCIgYXJndW1lbnQgaXMgdHJ1ZSwgb25seSBub2RlcyB3aXRoIGFsbCBzdHlsZXMgYW5kIGNsYXNzZXMgcmVtb3ZlZCBmcm9tIHRoZSBub2RlcyBvZiBcInJlbW92ZU5vZGVBcnJheVwiIGFyZSByZW1vdmVkLlxyXG4gICAgICAgICAqMTAuIEl0IHdvbid0IHdvcmsgaWYgdGhlIHBhcmVudCBub2RlIGhhcyB0aGUgc2FtZSBjbGFzcyBhbmQgc2FtZSB2YWx1ZSBzdHlsZS5cclxuICAgICAgICAgKiAgICBIb3dldmVyLCBpZiB0aGVyZSBpcyBhIHZhbHVlIGluIFwicmVtb3ZlTm9kZUFycmF5XCIsIGl0IHdvcmtzIGFuZCB0aGUgdGV4dCBub2RlIGlzIHNlcGFyYXRlZCBldmVuIGlmIHRoZXJlIGlzIG5vIG5vZGUgdG8gcmVwbGFjZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gYXBwZW5kTm9kZSBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCB0byB0aGUgc2VsZWN0aW9uLiBJZiBpdCBpcyBudWxsLCBvbmx5IGRlbGV0ZSB0aGUgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHN0eWxlQXJyYXkgVGhlIHN0eWxlIG9yIGNsYXNzTmFtZSBhdHRyaWJ1dGUgbmFtZSBBcnJheSB0byBjaGVjayAoWydmb250LXNpemUnXSwgWycuY2xhc3NOYW1lJ10sIFsnZm9udC1mYW1pbHknLCAnY29sb3InLCAnLmNsYXNzTmFtZSddLi4uXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHJlbW92ZU5vZGVBcnJheSBBbiBhcnJheSBvZiBub2RlIG5hbWVzIHRvIHJlbW92ZSB0eXBlcyBmcm9tLCByZW1vdmUgYWxsIGZvcm1hdHMgd2hlbiBcImFwcGVuZE5vZGVcIiBpcyBudWxsIGFuZCB0aGVyZSBpcyBhbiBlbXB0eSBhcnJheSBvciBudWxsIHZhbHVlLiAoWydzcGFuJ10sIFsnc3Ryb25nJywgJ2VtJ10gLi4uXSlcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58bnVsbH0gc3RyaWN0UmVtb3ZlIElmIHRydWUsIG9ubHkgbm9kZXMgd2l0aCBhbGwgc3R5bGVzIGFuZCBjbGFzc2VzIHJlbW92ZWQgZnJvbSB0aGUgbm9kZXMgb2YgXCJyZW1vdmVOb2RlQXJyYXlcIiBhcmUgcmVtb3ZlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBub2RlQ2hhbmdlOiBmdW5jdGlvbiAoYXBwZW5kTm9kZSwgc3R5bGVBcnJheSwgcmVtb3ZlTm9kZUFycmF5LCBzdHJpY3RSZW1vdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZXRSYW5nZVRvVGV4dE5vZGUoKTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHN0eWxlQXJyYXkgPSBzdHlsZUFycmF5ICYmIHN0eWxlQXJyYXkubGVuZ3RoID4gMCA/IHN0eWxlQXJyYXkgOiBmYWxzZTtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZUFycmF5ID0gcmVtb3ZlTm9kZUFycmF5ICYmIHJlbW92ZU5vZGVBcnJheS5sZW5ndGggPiAwID8gcmVtb3ZlTm9kZUFycmF5IDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1JlbW92ZU5vZGUgPSAhYXBwZW5kTm9kZTtcclxuICAgICAgICAgICAgY29uc3QgaXNSZW1vdmVGb3JtYXQgPSBpc1JlbW92ZU5vZGUgJiYgIXJlbW92ZU5vZGVBcnJheSAmJiAhc3R5bGVBcnJheTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW5kQ29uID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgaWYgKChpc1JlbW92ZUZvcm1hdCAmJiByYW5nZS5jb2xsYXBzZWQgJiYgdXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24ucGFyZW50Tm9kZSkpIHx8IChzdGFydENvbiA9PT0gZW5kQ29uICYmIHN0YXJ0Q29uLm5vZGVUeXBlID09PSAxICYmIHV0aWwuaXNOb25FZGl0YWJsZShzdGFydENvbikpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBzdGFydENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdENlbGwoZm9ybWF0KSB8fCAhdXRpbC5nZXRWYWx1ZXMoZm9ybWF0LnN0eWxlKS5zb21lKGZ1bmN0aW9uKGspIHsgcmV0dXJuIHRoaXMuX2xpc3RLZWJhYi5pbmRleE9mKGspID4gLTE7IH0uYmluZCh0aGlzKSkpIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiAhaXNSZW1vdmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydENvbi5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKHN0YXJ0Q29uKSAmJiAhdXRpbC5pc0NvbXBvbmVudChzdGFydENvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2N1c05vZGUgPSBzdGFydENvbi5jaGlsZE5vZGVzW3N0YXJ0T2ZmXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvY3VzTm9kZS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTm9kZSA9IHV0aWwuaXNCcmVhayhmb2N1c05vZGUpID8gZm9jdXNOb2RlIDogZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uLmluc2VydEJlZm9yZSh6ZXJvV2lkdGgsIGFmdGVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZSh6ZXJvV2lkdGgsIDEsIHplcm9XaWR0aCwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmYgPSByYW5nZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kT2ZmID0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoc3RhcnRDb24pKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydENvbiA9IHN0YXJ0Q29uLmNoaWxkTm9kZXNbc3RhcnRPZmZdIHx8IHN0YXJ0Q29uLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGVuZENvbikpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IGVuZENvbi5jaGlsZE5vZGVzW2VuZE9mZl0gfHwgZW5kQ29uLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGVuZE9mZiA9IGVuZENvbi50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlTmFtZSA9IGFwcGVuZE5vZGUubm9kZU5hbWU7XHJcblxyXG4gICAgICAgICAgICAvKiBjaGVja2VkIHNhbWUgc3R5bGUgcHJvcGVydHkgKi9cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBzdGFydENvbiA9PT0gZW5kQ29uICYmICFyZW1vdmVOb2RlQXJyYXkgJiYgYXBwZW5kTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNOb2RlID0gc3RhcnRDb247XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tDbnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrU3R5bGVzID0gYXBwZW5kTm9kZS5zdHlsZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaGVja1N0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQXR0cnMucHVzaChjaGVja1N0eWxlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2tlY2tDbGFzc2VzID0gYXBwZW5kTm9kZS5jbGFzc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2tlY2tDbGFzc2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tBdHRycy5wdXNoKCcuJyArIGNrZWNrQ2xhc3Nlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrQXR0cnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCF1dGlsLmlzRm9ybWF0RWxlbWVudChzTm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHNOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoZWNrQXR0cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzTm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBjaGVja0F0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzUmVnID0gL15cXC4vLnRlc3QocykgPyBuZXcgd1JlZ0V4cCgnXFxcXHMqJyArIHMucmVwbGFjZSgvXlxcLi8sICcnKSArICcoXFxcXHMrfCQpJywgJ2lnJykgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVDaGVjayA9IGlzUmVtb3ZlTm9kZSA/ICEhc05vZGUuc3R5bGVbc10gOiAoISFzTm9kZS5zdHlsZVtzXSAmJiAhIWFwcGVuZE5vZGUuc3R5bGVbc10gJiYgc05vZGUuc3R5bGVbc10gPT09IGFwcGVuZE5vZGUuc3R5bGVbc10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzQ2hlY2sgPSBjbGFzc1JlZyA9PT0gZmFsc2UgPyBmYWxzZSA6IGlzUmVtb3ZlTm9kZSA/ICEhc05vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKSA6ICEhc05vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKSAmJiAhIWFwcGVuZE5vZGUuY2xhc3NOYW1lLm1hdGNoKGNsYXNzUmVnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVDaGVjayB8fCBjbGFzc0NoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrQ250Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNOb2RlID0gc05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0NudCA+PSBjaGVja0F0dHJzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB7fSwgZW5kID0ge307XHJcbiAgICAgICAgICAgIGxldCBuZXdOb2RlLCBzdHlsZVJlZ0V4cCA9ICcnLCBjbGFzc1JlZ0V4cCA9ICcnLCByZW1vdmVOb2RlUmVnRXhwID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3R5bGVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlQXJyYXkubGVuZ3RoLCBzOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gc3R5bGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXC4vLnRlc3QocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NSZWdFeHAgKz0gKGNsYXNzUmVnRXhwID8gJ3wnIDogJ1xcXFxzKig/OicpICsgcy5yZXBsYWNlKC9eXFwuLywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlUmVnRXhwICs9IChzdHlsZVJlZ0V4cCA/ICd8JyA6ICcoPzo7fF58XFxcXHMpKD86JykgKyBzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVJlZ0V4cCArPSAnKVxcXFxzKjpbXjtdKlxcXFxzKig/Ojt8JCknO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUmVnRXhwID0gbmV3IHdSZWdFeHAoc3R5bGVSZWdFeHAsICdpZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc1JlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzUmVnRXhwICs9ICcpKD89XFxcXHMrfCQpJztcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1JlZ0V4cCA9IG5ldyB3UmVnRXhwKGNsYXNzUmVnRXhwLCAnaWcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlbW92ZU5vZGVBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZVJlZ0V4cCA9ICdeKD86JyArIHJlbW92ZU5vZGVBcnJheVswXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmVtb3ZlTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZVJlZ0V4cCArPSAnfCcgKyByZW1vdmVOb2RlQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlUmVnRXhwICs9ICcpJCc7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlUmVnRXhwID0gbmV3IHdSZWdFeHAocmVtb3ZlTm9kZVJlZ0V4cCwgJ2knKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHZhbGlkYXRpb24gY2hlY2sgZnVuY3Rpb24qL1xyXG4gICAgICAgICAgICBjb25zdCB3Qm9vbGVhbiA9IF93LkJvb2xlYW47XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZW1vdmVDaGVjayA9IHt2OiBmYWxzZX07XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBmdW5jdGlvbiAoY2hlY2tOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2Tm9kZSA9IGNoZWNrTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFsbCBwYXRoXHJcbiAgICAgICAgICAgICAgICBpZiAodk5vZGUubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKHZOb2RlKSkgcmV0dXJuIHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgLy8gYWxsIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVtb3ZlRm9ybWF0KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbm9kZSBjaGVja1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFnUmVtb3ZlID0gKCFyZW1vdmVOb2RlUmVnRXhwICYmIGlzUmVtb3ZlTm9kZSkgfHwgKHJlbW92ZU5vZGVSZWdFeHAgJiYgcmVtb3ZlTm9kZVJlZ0V4cC50ZXN0KHZOb2RlLm5vZGVOYW1lKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFnIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhZ1JlbW92ZSAmJiAhc3RyaWN0UmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0eWxlIHJlZ2V4cFxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luU3R5bGUgPSB2Tm9kZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHAgJiYgb3JpZ2luU3R5bGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gb3JpZ2luU3R5bGUucmVwbGFjZShzdHlsZVJlZ0V4cCwgJycpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGUgIT09IG9yaWdpblN0eWxlKSBfcmVtb3ZlQ2hlY2sudiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2xhc3MgY2hlY2tcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbkNsYXNzZXMgPSB2Tm9kZS5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2xhc3NlcyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzUmVnRXhwICYmIG9yaWdpbkNsYXNzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBvcmlnaW5DbGFzc2VzLnJlcGxhY2UoY2xhc3NSZWdFeHAsICcnKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMgIT09IG9yaWdpbkNsYXNzZXMpIF9yZW1vdmVDaGVjay52ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25seVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoY2xhc3NSZWdFeHAgfHwgIW9yaWdpbkNsYXNzZXMpICYmIChzdHlsZVJlZ0V4cCB8fCAhb3JpZ2luU3R5bGUpICYmICFzdHlsZSAmJiAhY2xhc3NlcyAmJiB0YWdSZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgfHwgY2xhc3NlcyB8fCB2Tm9kZS5ub2RlTmFtZSAhPT0gbmV3Tm9kZU5hbWUgfHwgKHdCb29sZWFuKHN0eWxlUmVnRXhwKSAhPT0gd0Jvb2xlYW4ob3JpZ2luU3R5bGUpKSB8fCAod0Jvb2xlYW4oY2xhc3NSZWdFeHApICE9PSB3Qm9vbGVhbihvcmlnaW5DbGFzc2VzKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVSZWdFeHAgJiYgb3JpZ2luU3R5bGUubGVuZ3RoID4gMCkgdk5vZGUuc3R5bGUuY3NzVGV4dCA9IHN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdk5vZGUuc3R5bGUuY3NzVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NSZWdFeHAgJiYgb3JpZ2luQ2xhc3Nlcy5sZW5ndGggPiAwKSB2Tm9kZS5jbGFzc05hbWUgPSBjbGFzc2VzLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZOb2RlLmNsYXNzTmFtZS50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2Tm9kZS5zdHlsZS5jc3NUZXh0ICYmICF2Tm9kZS5jbGFzc05hbWUgJiYgKHZOb2RlLm5vZGVOYW1lID09PSBuZXdOb2RlTmFtZSB8fCB0YWdSZW1vdmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdk5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBnZXQgbGluZSBub2Rlc1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lTm9kZXMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMobnVsbCk7XHJcbiAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBzdGFydE9mZiA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBlbmRDb24gPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KHN0YXJ0Q29uLCBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRDb24gPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lTm9kZXNbMF0sIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydE9mZiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5nZXRGb3JtYXRFbGVtZW50KGVuZENvbiwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgIGVuZENvbiA9IHV0aWwuZ2V0Q2hpbGRFbGVtZW50KGxpbmVOb2Rlc1tsaW5lTm9kZXMubGVuZ3RoIC0gMV0sIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50Lm5vZGVUeXBlID09PSAzOyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBlbmRPZmYgPSBlbmRDb24udGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb25lTGluZSA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzdGFydENvbiwgbnVsbCkgPT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChlbmRDb24sIG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBlbmRMZW5ndGggPSBsaW5lTm9kZXMubGVuZ3RoIC0gKG9uZUxpbmUgPyAwIDogMSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub2RlIENoYW5nZXNcclxuICAgICAgICAgICAgbmV3Tm9kZSA9IGFwcGVuZE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzUmVtb3ZlQW5jaG9yID0gaXNSZW1vdmVGb3JtYXQgfHwgKGlzUmVtb3ZlTm9kZSAmJiAoZnVuY3Rpb24gKGFycikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IG4gPCBsZW47IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLl9pc01haW50YWluZWROb2RlKGFycltuXSkgfHwgdXRpbC5faXNTaXplTm9kZShhcnJbbl0pKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSkocmVtb3ZlTm9kZUFycmF5KSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc1NpemVOb2RlID0gaXNSZW1vdmVOb2RlIHx8IHV0aWwuX2lzU2l6ZU5vZGUobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9nZXRNYWludGFpbmVkTm9kZSA9IHRoaXMuX3V0aWxfZ2V0TWFpbnRhaW5lZE5vZGUuYmluZCh1dGlsLCBpc1JlbW92ZUFuY2hvciwgaXNTaXplTm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9pc01haW50YWluZWROb2RlID0gdGhpcy5fdXRpbF9pc01haW50YWluZWROb2RlLmJpbmQodXRpbCwgaXNSZW1vdmVBbmNob3IsIGlzU2l6ZU5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gb25lIGxpbmVcclxuICAgICAgICAgICAgaWYgKG9uZUxpbmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXNldENvbW1vbkxpc3RDZWxsKGxpbmVOb2Rlc1swXSwgc3R5bGVBcnJheSkpIHJhbmdlID0gdGhpcy5zZXRSYW5nZShzdGFydENvbiwgc3RhcnRPZmYsIGVuZENvbiwgZW5kT2ZmKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSYW5nZSA9IHRoaXMuX25vZGVDaGFuZ2Vfb25lTGluZShsaW5lTm9kZXNbMF0sIG5ld05vZGUsIHZhbGlkYXRpb24sIHN0YXJ0Q29uLCBzdGFydE9mZiwgZW5kQ29uLCBlbmRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIHJhbmdlLmNvbGxhcHNlZCwgX3JlbW92ZUNoZWNrLCBfZ2V0TWFpbnRhaW5lZE5vZGUsIF9pc01haW50YWluZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LmNvbnRhaW5lciA9IG5ld1JhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQub2Zmc2V0ID0gbmV3UmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBlbmQuY29udGFpbmVyID0gbmV3UmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgZW5kLm9mZnNldCA9IG5ld1JhbmdlLmVuZE9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQuY29udGFpbmVyID09PSBlbmQuY29udGFpbmVyICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHN0YXJ0LmNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydC5vZmZzZXQgPSBlbmQub2Zmc2V0ID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbW1vbkxpc3RTdHlsZShuZXdSYW5nZS5hbmNlc3RvciwgbnVsbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIG11bHRpIGxpbmUgXHJcbiAgICAgICAgICAgICAgICBsZXQgYXBwbGllZENvbW1vbkxpc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmRMZW5ndGggPiAwICYmIHRoaXMuX3Jlc2V0Q29tbW9uTGlzdENlbGwobGluZU5vZGVzW2VuZExlbmd0aF0sIHN0eWxlQXJyYXkpKSBhcHBsaWVkQ29tbW9uTGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVzZXRDb21tb25MaXN0Q2VsbChsaW5lTm9kZXNbMF0sIHN0eWxlQXJyYXkpKSBhcHBsaWVkQ29tbW9uTGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGllZENvbW1vbkxpc3QpIHRoaXMuc2V0UmFuZ2Uoc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZW5kXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBhcHBlbmROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5fbm9kZUNoYW5nZV9lbmRMaW5lKGxpbmVOb2Rlc1tlbmRMZW5ndGhdLCBuZXdOb2RlLCB2YWxpZGF0aW9uLCBlbmRDb24sIGVuZE9mZiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBfZ2V0TWFpbnRhaW5lZE5vZGUsIF9pc01haW50YWluZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtaWRcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBlbmRMZW5ndGggLSAxLCBuZXdSYW5nZTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q29tbW9uTGlzdENlbGwobGluZU5vZGVzW2ldLCBzdHlsZUFycmF5KTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gYXBwZW5kTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1JhbmdlID0gdGhpcy5fbm9kZUNoYW5nZV9taWRkbGVMaW5lKGxpbmVOb2Rlc1tpXSwgbmV3Tm9kZSwgdmFsaWRhdGlvbiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBlbmQuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UmFuZ2UuZW5kQ29udGFpbmVyICYmIG5ld1JhbmdlLmFuY2VzdG9yLmNvbnRhaW5zKG5ld1JhbmdlLmVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kLmFuY2VzdG9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kLmNvbnRhaW5lciA9IG5ld1JhbmdlLmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tbW9uTGlzdFN0eWxlKG5ld1JhbmdlLmFuY2VzdG9yLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydFxyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFwcGVuZE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fbm9kZUNoYW5nZV9zdGFydExpbmUobGluZU5vZGVzWzBdLCBuZXdOb2RlLCB2YWxpZGF0aW9uLCBzdGFydENvbiwgc3RhcnRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIF9yZW1vdmVDaGVjaywgX2dldE1haW50YWluZWROb2RlLCBfaXNNYWludGFpbmVkTm9kZSwgZW5kLmNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0LmVuZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5hbmNlc3RvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLmNvbnRhaW5lciA9IHN0YXJ0LmVuZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzdGFydDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVuZC5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQuYW5jZXN0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZC5jb250YWluZXIgPSBzdGFydC5jb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLm9mZnNldCA9IHN0YXJ0LmNvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29tbW9uTGlzdFN0eWxlKHN0YXJ0LmFuY2VzdG9yLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbW1vbkxpc3RTdHlsZShlbmQuYW5jZXN0b3IgfHwgdXRpbC5nZXRGb3JtYXRFbGVtZW50KGVuZC5jb250YWluZXIpLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHJhbmdlXHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSYW5nZShzdGFydC5jb250YWluZXIsIHN0YXJ0Lm9mZnNldCwgZW5kLmNvbnRhaW5lciwgZW5kLm9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgY29tbW9uIHN0eWxlIG9mIGxpc3QgY2VsbFxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgTGlzdCBjZWxsIGVsZW1lbnQuIDxsaT5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fG51bGx9IHN0eWxlQXJyYXkgU3R5bGUgYXJyYXlcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9yZXNldENvbW1vbkxpc3RDZWxsOiBmdW5jdGlvbiAoZWwsIHN0eWxlQXJyYXkpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzTGlzdENlbGwoZWwpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICghc3R5bGVBcnJheSkgc3R5bGVBcnJheSA9IHRoaXMuX2xpc3RLZWJhYjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdXRpbC5nZXRBcnJheUl0ZW0oKGVsKS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gIXV0aWwuaXNCcmVhayhjdXJyZW50KTsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsU3R5bGVzID0gZWwuc3R5bGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlYyA9IFtdLCBlayA9IFtdLCBlbEtleXMgPSB1dGlsLmdldFZhbHVlcyhlbFN0eWxlcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9saXN0S2ViYWIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbEtleXMuaW5kZXhPZih0aGlzLl9saXN0S2ViYWJbaV0pID4gLTEgJiYgc3R5bGVBcnJheS5pbmRleE9mKHRoaXMuX2xpc3RLZWJhYltpXSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVjLnB1c2godGhpcy5fbGlzdENhbWVsW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBlay5wdXNoKHRoaXMuX2xpc3RLZWJhYltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZWMubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyByZXNldCBjZWxsIHN0eWxlLS0tXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdTUEFOJyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlYy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVmZXIuc3R5bGVbZWNbaV1dID0gZWxTdHlsZXNbZWtbaV1dO1xyXG4gICAgICAgICAgICAgICAgZWxTdHlsZXMucmVtb3ZlUHJvcGVydHkoZWtbaV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsID0gcmVmZXIuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgbGV0IHIgPSBudWxsLCBhcHBsaWVkRWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aCwgYywgczsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5fdGV4dFRhZ3NNYXBbYy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcyA9IHV0aWwuZ2V0VmFsdWVzKGMuc3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMubGVuZ3RoID09PSAwIHx8IChlYy5zb21lKGZ1bmN0aW9uIChrKSB7cmV0dXJuIHMuaW5kZXhPZihrKSA9PT0gLTE7fSkgJiYgcy5zb21lKGZ1bmN0aW9uKGspIHtlYy5pbmRleE9mKGspID4gLTE7fSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IGMubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsLmFwcGVuZENoaWxkKGMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWwuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKHNlbCwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsID0gcmVmZXIuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBhcHBsaWVkRWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKHNlbCwgcik7XHJcbiAgICAgICAgICAgICAgICBhcHBsaWVkRWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZWxTdHlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhcHBsaWVkRWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIElmIGNlcnRhaW4gc3R5bGVzIGFyZSBhcHBsaWVkIHRvIGFsbCBjaGlsZCBub2RlcyBvZiB0aGUgbGlzdCBjZWxsLCB0aGUgc3R5bGUgb2YgdGhlIGxpc3QgY2VsbCBpcyBhbHNvIGNoYW5nZWQuIChib2xkLCBjb2xvciwgc2l6ZSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIExpc3QgY2VsbCBlbGVtZW50LiA8bGk+XHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGNoaWxkIFZhcmlhYmxlIGZvciByZWN1cnNpdmUgY2FsbC4gKFwibnVsbFwiIG9uIHRoZSBmaXJzdCBjYWxsKVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3NldENvbW1vbkxpc3RTdHlsZTogZnVuY3Rpb24gKGVsLCBjaGlsZCkge1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNMaXN0Q2VsbChlbCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdXRpbC5nZXRBcnJheUl0ZW0oKGNoaWxkIHx8IGVsKS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gIXV0aWwuaXNCcmVhayhjdXJyZW50KTsgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5bMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkIHx8IGNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgY2hpbGQubm9kZVR5cGUgIT09IDEpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBjZWxsIHN0eWxlLS0tXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkU3R5bGUgPSBjaGlsZC5zdHlsZTtcclxuICAgICAgICAgICAgY29uc3QgZWxTdHlsZSA9IGVsLnN0eWxlO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGxldCBhcHBsaWVkRWwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJvbGQsIGl0YWxpY1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5fdGV4dFRhZ3NNYXBbbm9kZU5hbWVdID09PSBvcHRpb25zLl9kZWZhdWx0Q29tbWFuZC5ib2xkLnRvTG93ZXJDYXNlKCkpIGVsU3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuX3RleHRUYWdzTWFwW25vZGVOYW1lXSA9PT0gb3B0aW9ucy5fZGVmYXVsdENvbW1hbmQuaXRhbGljLnRvTG93ZXJDYXNlKCkpIGVsU3R5bGUuZm9udFN0eWxlID0gJ2l0YWxpYyc7XHJcblxyXG4gICAgICAgICAgICAvLyBzdHlsZXNcclxuICAgICAgICAgICAgY29uc3QgY0tleXMgPSB1dGlsLmdldFZhbHVlcyhjaGlsZFN0eWxlKTtcclxuICAgICAgICAgICAgaWYgKGNLZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9saXN0Q2FtZWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY0tleXMuaW5kZXhPZih0aGlzLl9saXN0S2ViYWJbaV0pID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxTdHlsZVt0aGlzLl9saXN0Q2FtZWxbaV1dID0gY2hpbGRTdHlsZVt0aGlzLl9saXN0Q2FtZWxbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFN0eWxlLnJlbW92ZVByb3BlcnR5KHRoaXMuX2xpc3RLZWJhYltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpZWRFbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRDb21tb25MaXN0U3R5bGUoZWwsIGNoaWxkKTtcclxuICAgICAgICAgICAgaWYgKCFhcHBsaWVkRWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbW1vbiBzdHlsZVxyXG4gICAgICAgICAgICBpZiAoIWNoaWxkU3R5bGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IGNoaWxkLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gY2hpbGQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBjaGlsZC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjaC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUoY2hbMF0sIG4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdHJpcCByZW1vdmUgbm9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gcmVtb3ZlTm9kZSBUaGUgcmVtb3ZlIG5vZGVcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zdHJpcFJlbW92ZU5vZGU6IGZ1bmN0aW9uIChyZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZW1vdmVOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGlmICghcmVtb3ZlTm9kZSB8fCByZW1vdmVOb2RlLm5vZGVUeXBlID09PSAzIHx8ICFlbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHJlbW92ZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgd2hpbGUgKGNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZHJlblswXSwgcmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybiB0aGUgcGFyZW50IG1haW50YWluZWQgdGFnLiAoYmluZCBhbmQgdXNlIGEgdXRpbCBvYmplY3QpXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEVsZW1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF91dGlsX2dldE1haW50YWluZWROb2RlOiBmdW5jdGlvbiAoX2lzUmVtb3ZlLCBfaXNTaXplTm9kZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgX2lzUmVtb3ZlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLl9pc01haW50YWluZWROb2RlLmJpbmQodGhpcykpIHx8ICghX2lzU2l6ZU5vZGUgPyB0aGlzLmdldFBhcmVudEVsZW1lbnQoZWxlbWVudCwgdGhpcy5faXNTaXplTm9kZS5iaW5kKHRoaXMpKSA6IG51bGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGVjayBpZiBlbGVtZW50IGlzIGEgdGFnIHRoYXQgc2hvdWxkIGJlIHBlcnNpc3RlZC4gKGJpbmQgYW5kIHVzZSBhIHV0aWwgb2JqZWN0KVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50XHJcbiAgICAgICAgICogQHJldHVybnMge0VsZW1lbnR9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdXRpbF9pc01haW50YWluZWROb2RlOiBmdW5jdGlvbiAoX2lzUmVtb3ZlLCBfaXNTaXplTm9kZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgX2lzUmVtb3ZlIHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5faXNNYWludGFpbmVkTm9kZShlbGVtZW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50RWxlbWVudChlbGVtZW50LCB0aGlzLl9pc01haW50YWluZWROb2RlLmJpbmQodGhpcykpID8gYW5jaG9yIDogKGFuY2hvciB8fCAoIV9pc1NpemVOb2RlID8gdGhpcy5faXNTaXplTm9kZShlbGVtZW50KSA6IGZhbHNlKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHdyYXBzIHRleHQgbm9kZXMgb2YgbGluZSBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSBvZiB0aGUgbGluZSB0aGF0IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCB0ZXh0IG5vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdJbm5lck5vZGUgVGhlIGRvbSB0aGF0IHdpbGwgd3JhcCB0aGUgc2VsZWN0ZWQgdGV4dCBhcmVhXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbiBDaGVjayBpZiB0aGUgbm9kZSBzaG91bGQgYmUgc3RyaXBwZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBzdGFydENvbiBUaGUgc3RhcnRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0T2ZmIFRoZSBzdGFydE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IGVuZENvbiBUaGUgZW5kQ29udGFpbmVyIHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRPZmYgVGhlIGVuZE9mZnNldCBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVtb3ZlRm9ybWF0IElzIHRoZSByZW1vdmUgYWxsIGZvcm1hdHMgY29tbWFuZD9cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVtb3ZlTm9kZSBcIm5ld0lubmVyTm9kZVwiIGlzIHJlbW92ZSBub2RlP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY29sbGFwc2VkIHJhbmdlLmNvbGxhcHNlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7YW5jZXN0b3I6ICosIHN0YXJ0Q29udGFpbmVyOiAqLCBzdGFydE9mZnNldDogKiwgZW5kQ29udGFpbmVyOiAqLCBlbmRPZmZzZXQ6ICp9fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2Vfb25lTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgc3RhcnRDb24sIHN0YXJ0T2ZmLCBlbmRDb24sIGVuZE9mZiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgY29sbGFwc2VkLCBfcmVtb3ZlQ2hlY2ssIF9nZXRNYWludGFpbmVkTm9kZSwgX2lzTWFpbnRhaW5lZE5vZGUpIHtcclxuICAgICAgICAgICAgLy8gbm90IGFkZCB0YWdcclxuICAgICAgICAgICAgbGV0IHBhcmVudENvbiA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24gPT09IGVuZENvbi5wYXJlbnROb2RlICYmIHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2Uoc3RhcnRDb24udGV4dENvbnRlbnQuc2xpY2UoMCwgc3RhcnRPZmYpKSAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShlbmRDb24udGV4dENvbnRlbnQuc2xpY2UoZW5kT2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudENvbi5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aCwgYywgcywgZSwgejsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeiA9ICF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IHN0YXJ0Q29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSBlbmRDb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghcyAmJiB6KSB8fCAocyAmJiBlICYmIHopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lVGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhbWVUYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhwYXJlbnRDb24sIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3I6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lcjogc3RhcnRDb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldDogc3RhcnRPZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2ZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGFnXHJcbiAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3QgaXNTYW1lTm9kZSA9IHN0YXJ0Q29uID09PSBlbmRDb247XHJcbiAgICAgICAgICAgIGxldCBzdGFydENvbnRhaW5lciA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRPZmZzZXQgPSBzdGFydE9mZjtcclxuICAgICAgICAgICAgbGV0IGVuZENvbnRhaW5lciA9IGVuZENvbjtcclxuICAgICAgICAgICAgbGV0IGVuZE9mZnNldCA9IGVuZE9mZjtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0UGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgZW5kUGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGNzc1RleHQsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja0NzcyAodk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyB3UmVnRXhwKCcoPzo7fF58XFxcXHMpKD86JyArIGNzc1RleHQgKyAnbnVsbClcXFxccyo6W147XSpcXFxccyooPzo7fCQpJywgJ2lnJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVnRXhwICYmIHZOb2RlLnN0eWxlLmNzc1RleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gcmVnRXhwLnRlc3Qodk5vZGUuc3R5bGUuY3NzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFzdHlsZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlY3Vyc2lvbkZ1bmMoY3VycmVudCwgYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBjdXJyZW50LmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNoaWxkTm9kZXMubGVuZ3RoLCB2Tm9kZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY292ZXJOb2RlID0gYW5jZXN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsb25lTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnRDb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0UGFzcyAmJiBjaGlsZCA9PT0gc3RhcnRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBwTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShzdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSA/ICcnIDogc3RhcnRDb250YWluZXIuc3Vic3RyaW5nRGF0YSgwLCBzdGFydE9mZnNldCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IHN0YXJ0Q29udGFpbmVyLnN1YnN0cmluZ0RhdGEoc3RhcnRPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVOb2RlID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5kT2Zmc2V0ID49IHN0YXJ0T2Zmc2V0ID8gZW5kT2Zmc2V0IC0gc3RhcnRPZmZzZXQgOiBzdGFydENvbnRhaW5lci5kYXRhLmxlbmd0aCAtIHN0YXJ0T2Zmc2V0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIuZGF0YS5sZW5ndGggLSBzdGFydE9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGEucGFyZW50Tm9kZSAhPT0gbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG0ucGFyZW50Tm9kZSAhPT0gbGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IHAgPSBtLnBhcmVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobS5jaGlsZE5vZGVzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKG0uY2hpbGROb2Rlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5hcHBlbmRDaGlsZChwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IG0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShwcmV2Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKHByZXZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkFuY2hvck5vZGUgPSBfZ2V0TWFpbnRhaW5lZE5vZGUoYW5jZXN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFwcmV2QW5jaG9yTm9kZSkgYW5jaG9yTm9kZSA9IHByZXZBbmNob3JOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSkgbGluZSA9IGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld05vZGUgIT09IGxpbmUgJiYgbmV3Tm9kZSAhPT0gZWwgJiYgbmV3Tm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBfaXNNYWludGFpbmVkTm9kZShuZXdOb2RlKSA/IG51bGwgOiB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEgJiYgY2hlY2tDc3MobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IG5ld05vZGUuc3R5bGUuY3NzVGV4dC5zdWJzdHIoMCwgbmV3Tm9kZS5zdHlsZS5jc3NUZXh0LmluZGV4T2YoJzonKSkgKyAnfCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSAmJiAhX2dldE1haW50YWluZWROb2RlKGVuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFzcyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZSAhPT0gdGV4dE5vZGUpIG5ld05vZGUuYXBwZW5kQ2hpbGQoc3RhcnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU2FtZU5vZGUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmRQYXNzICYmIGNoaWxkID09PSBlbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyTm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoZW5kQ29udGFpbmVyLm5vZGVUeXBlID09PSAxID8gJycgOiBlbmRDb250YWluZXIuc3Vic3RyaW5nRGF0YShlbmRPZmZzZXQsIChlbmRDb250YWluZXIubGVuZ3RoIC0gZW5kT2Zmc2V0KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHV0aWwuY3JlYXRlVGV4dE5vZGUoaXNTYW1lTm9kZSB8fCBlbmRDb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGVuZENvbnRhaW5lci5zdWJzdHJpbmdEYXRhKDAsIGVuZE9mZnNldCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3SW5uZXJOb2RlLnBhcmVudE5vZGUpICYmICFhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ld05vZGUgIT09IHBOb2RlICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGVja0NzcyhuZXdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIGFuY2hvcnMucHVzaChuZXdOb2RlLmNsb25lTm9kZShmYWxzZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHBDdXJyZW50LnB1c2gobmV3Tm9kZS5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBuZXdOb2RlLnN0eWxlLmNzc1RleHQuc3Vic3RyKDAsIG5ld05vZGUuc3R5bGUuY3NzVGV4dC5pbmRleE9mKCc6JykpICsgJ3wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBhZnRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocEN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLnRleHRDb250ZW50ID0gYWZ0ZXJOb2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlICYmIGNsb25lTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJBbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNsb25lTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXJBbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IGFmdGVyQW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXdOb2RlICE9PSBwTm9kZSAmJiBuZXdOb2RlICE9PSBlbCAmJiBuZXdOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZSA9IF9pc01haW50YWluZWROb2RlKG5ld05vZGUpID8gbnVsbCA6IHZhbGlkYXRpb24obmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodk5vZGUgJiYgbmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGVja0NzcyhuZXdOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gbmV3Tm9kZS5zdHlsZS5jc3NUZXh0LnN1YnN0cigwLCBuZXdOb2RlLnN0eWxlLmNzc1RleHQuaW5kZXhPZignOicpKSArICd8JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIGFuY2hvck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChhbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldCA9IHRleHROb2RlLmRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRQYXNzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZW1vdmVGb3JtYXQgJiYgY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb2RlLnRleHRDb250ZW50ID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vZGUgIT09IHRleHROb2RlKSBuZXdOb2RlLmFwcGVuZENoaWxkKGVuZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRQYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBlbmRQYXNzID8gbmV3Tm9kZS5jbG9uZU5vZGUoZmFsc2UpIDogdmFsaWRhdGlvbihuZXdOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdOb2RlLm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzQnJlYWsoY2hpbGQpICYmIHZOb2RlICYmIGNoZWNrQ3NzKG5ld05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc01haW50YWluZWROb2RlKG5ld05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5jaG9yTm9kZSkgYW5jaG9ycy5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSBuZXdOb2RlLnN0eWxlLmNzc1RleHQuc3Vic3RyKDAsIG5ld05vZGUuc3R5bGUuY3NzVGV4dC5pbmRleE9mKCc6JykpICsgJ3wnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IHBDdXJyZW50LmNvbmNhdChhbmNob3JzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc01haW50YWluZWROb2RlKG5ld0lubmVyTm9kZS5wYXJlbnROb2RlKSAmJiAhX2lzTWFpbnRhaW5lZE5vZGUoY2hpbGROb2RlKSAmJiAhdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UobmV3SW5uZXJOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbk5vZGVBcnJheS5wdXNoKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW5kUGFzcyAmJiAhYW5jaG9yTm9kZSAmJiBfaXNNYWludGFpbmVkTm9kZShjaGlsZE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFDaGlsZHJlbiA9IGNoaWxkTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYSA9IDAsIGFMZW4gPSBhQ2hpbGRyZW4ubGVuZ3RoOyBhIDwgYUxlbjsgYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGFDaGlsZHJlblthXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbm5lck5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgYW5jZXN0b3IgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGUgPT09IGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZFBhc3MpIGFuY2VzdG9yID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IHBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVuZFBhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUgJiYgY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZ2V0TWFpbnRhaW5lZE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JBbmNob3JOb2RlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGFuY2VzdG9yLCBmdW5jdGlvbiAoY3VycmVudCkge3JldHVybiB0aGlzLl9pc01haW50YWluZWROb2RlKGN1cnJlbnQucGFyZW50Tm9kZSkgfHwgY3VycmVudC5wYXJlbnROb2RlID09PSBwTm9kZTt9LmJpbmQodXRpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUuYXBwZW5kQ2hpbGQoYW5jZXN0b3JBbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBhbmNlc3RvckFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gY2hpbGQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZChjbG9uZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAhdXRpbC5pc0JyZWFrKGNoaWxkKSkgY292ZXJOb2RlID0gY2xvbmVOb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKGNoaWxkLCBjb3Zlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KShlbGVtZW50LCBwTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub3QgcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVOb2RlICYmICFpc1JlbW92ZUZvcm1hdCAmJiAhX3JlbW92ZUNoZWNrLnYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3I6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZixcclxuICAgICAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQ6IGVuZE9mZlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNSZW1vdmVGb3JtYXQgPSBpc1JlbW92ZUZvcm1hdCAmJiBpc1JlbW92ZU5vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmVOb2RlID0gbk5vZGVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dE5vZGUsIHRleHROb2RlX3MsIHRleHROb2RlX2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5yZXBsYWNlQ2hpbGQodGV4dE5vZGUsIHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJDaGlsZHJlbiA9IHJlbW92ZU5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVfcyA9IHJDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vZGVfZSA9IHJDaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmluc2VydEJlZm9yZSh0ZXh0Tm9kZV9lLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IGVuZENvbnRhaW5lciA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB0ZXh0Tm9kZV9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdGV4dE5vZGVfZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Ob2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyaXBSZW1vdmVOb2RlKG5Ob2RlQXJyYXlbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSBlbmRDb250YWluZXIgPSBuZXdJbm5lck5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gc3RhcnRDb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZW5kT2Zmc2V0ID0gZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZW5kQ29udGFpbmVyIHJlc2V0XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZENvblJlc2V0ID0gaXNSZW1vdmVGb3JtYXQgfHwgZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKGVuZENvbnRhaW5lcikgJiYgZW5kQ29udGFpbmVyLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGVuZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICBlbmRDb250YWluZXIgPSBzdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmRPZmZzZXQgPSBlbmRDb25SZXNldCA/IGVuZENvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGggOiBlbmRPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBub2RlIGNoYW5nZVxyXG4gICAgICAgICAgICBjb25zdCBuZXdTdGFydE9mZnNldCA9IHtzOiAwLCBlOiAwfTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQYXRoID0gdXRpbC5nZXROb2RlUGF0aChzdGFydENvbnRhaW5lciwgcE5vZGUsIG5ld1N0YXJ0T2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlRW5kQ29uID0gIWVuZENvbnRhaW5lci5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAobWVyZ2VFbmRDb24pIGVuZENvbnRhaW5lciA9IHN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdFbmRPZmZzZXQgPSB7czogMCwgZTogMH07XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKGVuZENvbnRhaW5lciAsIHBOb2RlLCAoIW1lcmdlRW5kQ29uICYmICFlbmRDb25SZXNldCkgPyBuZXdFbmRPZmZzZXQgOiBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ICs9IG5ld1N0YXJ0T2Zmc2V0LnM7XHJcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IChjb2xsYXBzZWQgPyBzdGFydE9mZnNldCA6IG1lcmdlRW5kQ29uID8gc3RhcnRDb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoIDogZW5kQ29uUmVzZXQgPyBlbmRPZmZzZXQgKyBuZXdTdGFydE9mZnNldC5zIDogZW5kT2Zmc2V0ICsgbmV3RW5kT2Zmc2V0LnMpO1xyXG5cclxuICAgICAgICAgICAgLy8gdGFnIG1lcmdlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld09mZnNldHMgPSB1dGlsLm1lcmdlU2FtZVRhZ3MocE5vZGUsIFtzdGFydFBhdGgsIGVuZFBhdGhdLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgc3RhcnRDb250YWluZXIgPSB1dGlsLmdldE5vZGVGcm9tUGF0aChzdGFydFBhdGgsIHBOb2RlKTtcclxuICAgICAgICAgICAgZW5kQ29udGFpbmVyID0gdXRpbC5nZXROb2RlRnJvbVBhdGgoZW5kUGF0aCwgcE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBwTm9kZSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0Q29udGFpbmVyOiBzdGFydENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBzdGFydE9mZnNldCArIG5ld09mZnNldHNbMF0sXHJcbiAgICAgICAgICAgICAgICBlbmRDb250YWluZXI6IGVuZENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2Zmc2V0ICsgbmV3T2Zmc2V0c1sxXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiB3cmFwcyBmaXJzdCBsaW5lIHNlbGVjdGVkIHRleHQuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBub2RlIG9mIHRoZSBsaW5lIHRoYXQgY29udGFpbnMgdGhlIHNlbGVjdGVkIHRleHQgbm9kZS5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5ld0lubmVyTm9kZSBUaGUgZG9tIHRoYXQgd2lsbCB3cmFwIHRoZSBzZWxlY3RlZCB0ZXh0IGFyZWFcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB2YWxpZGF0aW9uIENoZWNrIGlmIHRoZSBub2RlIHNob3VsZCBiZSBzdHJpcHBlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IHN0YXJ0Q29uIFRoZSBzdGFydENvbnRhaW5lciBwcm9wZXJ0eSBvZiB0aGUgc2VsZWN0aW9uIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRPZmYgVGhlIHN0YXJ0T2Zmc2V0IHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVGb3JtYXQgSXMgdGhlIHJlbW92ZSBhbGwgZm9ybWF0cyBjb21tYW5kP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVOb2RlIFwibmV3SW5uZXJOb2RlXCIgaXMgcmVtb3ZlIG5vZGU/XHJcbiAgICAgICAgICogQHJldHVybnMge251bGx8Tm9kZX0gSWYgZW5kIGNvbnRhaW5lciBpcyByZW5ld2VkLCByZXR1cm5lZCByZW5ld2VkIG5vZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB7IGFuY2VzdG9yLCBjb250YWluZXIsIG9mZnNldCwgZW5kQ29udGFpbmVyIH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9ub2RlQ2hhbmdlX3N0YXJ0TGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgc3RhcnRDb24sIHN0YXJ0T2ZmLCBpc1JlbW92ZUZvcm1hdCwgaXNSZW1vdmVOb2RlLCBfcmVtb3ZlQ2hlY2ssIF9nZXRNYWludGFpbmVkTm9kZSwgX2lzTWFpbnRhaW5lZE5vZGUsIF9lbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgLy8gbm90IGFkZCB0YWdcclxuICAgICAgICAgICAgbGV0IHBhcmVudENvbiA9IHN0YXJ0Q29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24ubm9kZU5hbWUgPT09IG5ld0lubmVyTm9kZS5ub2RlTmFtZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQocGFyZW50Q29uKSAmJiAhcGFyZW50Q29uLm5leHRTaWJsaW5nICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKHN0YXJ0Q29uLnRleHRDb250ZW50LnNsaWNlKDAsIHN0YXJ0T2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gc3RhcnRDb24ucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHMgPSBzLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2FtZVRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMocGFyZW50Q29uLCBuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBzdGFydENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBzdGFydE9mZlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCB0YWdcclxuICAgICAgICAgICAgX3JlbW92ZUNoZWNrLnYgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBuTm9kZUFycmF5ID0gW25ld0lubmVyTm9kZV07XHJcbiAgICAgICAgICAgIGNvbnN0IHBOb2RlID0gZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gc3RhcnRPZmY7XHJcbiAgICAgICAgICAgIGxldCBwYXNzTm9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGgsIHZOb2RlLCBjbG9uZUNoaWxkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdmVyTm9kZSA9IGFuY2VzdG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc05vZGUgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lQ2hpbGQgPSBjaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZW5kQ29udGFpbmVyICYmIGNoaWxkLmNvbnRhaW5zKF9lbmRDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2VuZENvbnRhaW5lciA9IHV0aWwuZ2V0Tm9kZUZyb21QYXRoKGVuZFBhdGgsIGNsb25lQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vZGUubm9kZVR5cGUgPT09IDEgJiYgdk5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlKSBhbmNob3JzLnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1RvcE5vZGUgPSBwQ3VycmVudC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNNYWludGFpbmVkTm9kZShuZXdJbm5lck5vZGUucGFyZW50Tm9kZSkgJiYgIV9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuY2hvck5vZGUgJiYgX2lzTWFpbnRhaW5lZE5vZGUoY2hpbGROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhQ2hpbGRyZW4gPSBjaGlsZE5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwLCBhTGVuID0gYUNoaWxkcmVuLmxlbmd0aDsgYSA8IGFMZW47IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChhQ2hpbGRyZW5bYV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSAhX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkgPyBuZXdOb2RlIDogbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbk5vZGVBcnJheS5wdXNoKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUb3BOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9nZXRNYWludGFpbmVkTm9kZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmNlc3RvckFuY2hvck5vZGUgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoYW5jZXN0b3IsIGZ1bmN0aW9uIChjdXJyZW50KSB7cmV0dXJuIHRoaXMuX2lzTWFpbnRhaW5lZE5vZGUoY3VycmVudC5wYXJlbnROb2RlKSB8fCBjdXJyZW50LnBhcmVudE5vZGUgPT09IHBOb2RlO30uYmluZCh1dGlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZS5hcHBlbmRDaGlsZChhbmNlc3RvckFuY2hvck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IGFuY2VzdG9yQW5jaG9yTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzc05vZGUgJiYgY2hpbGQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldk5vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSA/ICcnIDogY29udGFpbmVyLnN1YnN0cmluZ0RhdGEoMCwgb2Zmc2V0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKG9mZnNldCwgKGNvbnRhaW5lci5sZW5ndGggLSBvZmZzZXQpKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IF9nZXRNYWludGFpbmVkTm9kZShhbmNlc3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSAmJiBhLnBhcmVudE5vZGUgIT09IGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtLnBhcmVudE5vZGUgIT09IGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSBwID0gbS5wYXJlbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKG0uY2hpbGROb2Rlc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZChtLmNoaWxkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocHJldk5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZChwcmV2Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZBbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhcHJldkFuY2hvck5vZGUpIGFuY2hvck5vZGUgPSBwcmV2QW5jaG9yTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIGxpbmUgPSBhbmNob3JOb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZSAhPT0gbGluZSAmJiBuZXdOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Tm9kZSA9IHZhbGlkYXRpb24obmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiB2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gcEN1cnJlbnQucG9wKCkgfHwgYW5jZXN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlID0gY2hpbGROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocEN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHBDdXJyZW50LnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlICE9PSBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhjaGlsZCkpIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NOb2RlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSAhcGFzc05vZGUgPyBjaGlsZC5jbG9uZU5vZGUoZmFsc2UpIDogdmFsaWRhdGlvbihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmFwcGVuZENoaWxkKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzQnJlYWsoY2hpbGQpKSBjb3Zlck5vZGUgPSB2Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNvdmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGVsZW1lbnQsIHBOb2RlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vdCByZW1vdmUgdGFnXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZU5vZGUgJiYgIWlzUmVtb3ZlRm9ybWF0ICYmICFfcmVtb3ZlQ2hlY2sudikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHN0YXJ0Q29uLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogc3RhcnRPZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1JlbW92ZUZvcm1hdCA9IGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dE5vZGUgPSByQ2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUockNoaWxkcmVuWzBdLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZU5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmlwUmVtb3ZlTm9kZShuTm9kZUFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBwTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUVtcHR5Tm9kZShwTm9kZSwgbmV3SW5uZXJOb2RlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKHBOb2RlLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHBOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBub2RlIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHtzOiAwLCBlOiAwfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB1dGlsLmdldE5vZGVQYXRoKGNvbnRhaW5lciwgcE5vZGUsIG9mZnNldHMpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IG9mZnNldHMucztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB0YWcgbWVyZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld09mZnNldHMgPSB1dGlsLm1lcmdlU2FtZVRhZ3MocE5vZGUsIFtwYXRoXSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChwTm9kZSwgZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5nZXROb2RlRnJvbVBhdGgocGF0aCwgcE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IG5ld09mZnNldHNbMF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhbmNlc3RvcjogcE5vZGUsXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHdyYXBzIG1pZCBsaW5lcyBzZWxlY3RlZCB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSBvZiB0aGUgbGluZSB0aGF0IGNvbnRhaW5zIHRoZSBzZWxlY3RlZCB0ZXh0IG5vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdJbm5lck5vZGUgVGhlIGRvbSB0aGF0IHdpbGwgd3JhcCB0aGUgc2VsZWN0ZWQgdGV4dCBhcmVhXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbiBDaGVjayBpZiB0aGUgbm9kZSBzaG91bGQgYmUgc3RyaXBwZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlbW92ZUZvcm1hdCBJcyB0aGUgcmVtb3ZlIGFsbCBmb3JtYXRzIGNvbW1hbmQ/XHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlbW92ZU5vZGUgXCJuZXdJbm5lck5vZGVcIiBpcyByZW1vdmUgbm9kZT9cclxuICAgICAgICAgKiBAcGFyYW0ge05vZGV9IF9lbmRDb250YWluZXIgT2Zmc2V0IG5vZGUgb2YgbGFzdCBsaW5lIGFscmVhZHkgbW9kaWZpZWQgKGVuZC5jb250YWluZXIpXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3RvciwgZW5kQ29udGFpbmVyOiBcIklmIGVuZCBjb250YWluZXIgaXMgcmVuZXdlZCwgcmV0dXJuZWQgcmVuZXdlZCBub2RlXCIgfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2VfbWlkZGxlTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgaXNSZW1vdmVGb3JtYXQsIGlzUmVtb3ZlTm9kZSwgX3JlbW92ZUNoZWNrLCBfZW5kQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIC8vIG5vdCBhZGQgdGFnXHJcbiAgICAgICAgICAgIGlmICghaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbmQgY29udGFpbmVyIHBhdGhcclxuICAgICAgICAgICAgICAgIGxldCBlbmRQYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChfZW5kQ29udGFpbmVyICYmIGVsZW1lbnQuY29udGFpbnMoX2VuZENvbnRhaW5lcikpIGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBOb2RlID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdOb2RlTmFtZSA9IG5ld0lubmVyTm9kZS5ub2RlTmFtZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Nzc1RleHQgPSBuZXdJbm5lck5vZGUuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NsYXNzID0gbmV3SW5uZXJOb2RlLmNsYXNzTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSB0ZW1wTm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGlsZDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDMpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlTmFtZSA9PT0gbmV3Tm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuc3R5bGUuY3NzVGV4dCArPSBuZXdDc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNoaWxkLCBuZXdDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdXRpbC5pc0JyZWFrKGNoaWxkKSAmJiB1dGlsLl9pc0lnbm9yZU5vZGVDaGFuZ2UoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMCAmJiBpID09PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IHRlbXBOb2RlLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29udGFpbmVyOiBlbmRQYXRoID8gdXRpbC5nZXROb2RlRnJvbVBhdGgoZW5kUGF0aCwgZWxlbWVudCkgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIHRhZ1xyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hlY2sudiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBsZXQgbm9uZUNoYW5nZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGROb2Rlcy5sZW5ndGgsIHZOb2RlLCBjbG9uZUNoaWxkOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZE5vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3Zlck5vZGUgPSBhbmNlc3RvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzQnJlYWsoY2hpbGQpICYmIHV0aWwuX2lzSWdub3JlTm9kZUNoYW5nZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0lubmVyTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVDaGlsZCA9IGNoaWxkLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuYXBwZW5kQ2hpbGQoY2xvbmVDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5Ob2RlQXJyYXkucHVzaChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuZCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9lbmRDb250YWluZXIgJiYgY2hpbGQuY29udGFpbnMoX2VuZENvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBhdGggPSB1dGlsLmdldE5vZGVQYXRoKF9lbmRDb250YWluZXIsIGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lbmRDb250YWluZXIgPSB1dGlsLmdldE5vZGVGcm9tUGF0aChlbmRQYXRoLCBjbG9uZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25lQ2hhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5hcHBlbmRDaGlsZCh2Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGNvdmVyTm9kZSA9IHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNCcmVhayhjaGlsZCkpIHJlY3Vyc2lvbkZ1bmMoY2hpbGQsIGNvdmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGVsZW1lbnQsIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBub3QgcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICBpZiAobm9uZUNoYW5nZSB8fCAoaXNSZW1vdmVOb2RlICYmICFpc1JlbW92ZUZvcm1hdCAmJiAhX3JlbW92ZUNoZWNrLnYpKSByZXR1cm4geyBhbmNlc3RvcjogZWxlbWVudCwgZW5kQ29udGFpbmVyOiBfZW5kQ29udGFpbmVyIH07XHJcblxyXG4gICAgICAgICAgICBwTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJDaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUockNoaWxkcmVuWzBdLCByZW1vdmVOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVtb3ZlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3SW5uZXJOb2RlID0gbmV3SW5uZXJOb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5Ob2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJpcFJlbW92ZU5vZGUobk5vZGVBcnJheVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuICAgICAgICAgICAgdXRpbC5tZXJnZVNhbWVUYWdzKHBOb2RlLCBudWxsLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vZGUgY2hhbmdlXHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBhbmNlc3RvcjogcE5vZGUsIGVuZENvbnRhaW5lcjogX2VuZENvbnRhaW5lciB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiB3cmFwcyBsYXN0IGxpbmUgc2VsZWN0ZWQgdGV4dC5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIG5vZGUgb2YgdGhlIGxpbmUgdGhhdCBjb250YWlucyB0aGUgc2VsZWN0ZWQgdGV4dCBub2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbmV3SW5uZXJOb2RlIFRoZSBkb20gdGhhdCB3aWxsIHdyYXAgdGhlIHNlbGVjdGVkIHRleHQgYXJlYVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHZhbGlkYXRpb24gQ2hlY2sgaWYgdGhlIG5vZGUgc2hvdWxkIGJlIHN0cmlwcGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gZW5kQ29uIFRoZSBlbmRDb250YWluZXIgcHJvcGVydHkgb2YgdGhlIHNlbGVjdGlvbiBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZE9mZiBUaGUgZW5kT2Zmc2V0IHByb3BlcnR5IG9mIHRoZSBzZWxlY3Rpb24gb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVGb3JtYXQgSXMgdGhlIHJlbW92ZSBhbGwgZm9ybWF0cyBjb21tYW5kP1xyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZW1vdmVOb2RlIFwibmV3SW5uZXJOb2RlXCIgaXMgcmVtb3ZlIG5vZGU/XHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0geyBhbmNlc3RvciwgY29udGFpbmVyLCBvZmZzZXQgfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX25vZGVDaGFuZ2VfZW5kTGluZTogZnVuY3Rpb24gKGVsZW1lbnQsIG5ld0lubmVyTm9kZSwgdmFsaWRhdGlvbiwgZW5kQ29uLCBlbmRPZmYsIGlzUmVtb3ZlRm9ybWF0LCBpc1JlbW92ZU5vZGUsIF9yZW1vdmVDaGVjaywgX2dldE1haW50YWluZWROb2RlLCBfaXNNYWludGFpbmVkTm9kZSkge1xyXG4gICAgICAgICAgICAvLyBub3QgYWRkIHRhZ1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50Q29uID0gZW5kQ29uLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlICghcGFyZW50Q29uLm5leHRTaWJsaW5nICYmICFwYXJlbnRDb24ucHJldmlvdXNTaWJsaW5nICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChwYXJlbnRDb24ucGFyZW50Tm9kZSkgJiYgIXV0aWwuaXNXeXNpd3lnRGl2KHBhcmVudENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbi5ub2RlTmFtZSA9PT0gbmV3SW5uZXJOb2RlLm5vZGVOYW1lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbiA9IHBhcmVudENvbi5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBwYXJlbnRDb24ubm9kZU5hbWUgPT09IG5ld0lubmVyTm9kZS5ub2RlTmFtZSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQocGFyZW50Q29uKSAmJiAhcGFyZW50Q29uLnByZXZpb3VzU2libGluZyAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShlbmRDb24udGV4dENvbnRlbnQuc2xpY2UoZW5kT2ZmKSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzYW1lVGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZW5kQ29uLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVUYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzYW1lVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5VGFnQXR0cmlidXRlcyhwYXJlbnRDb24sIG5ld0lubmVyTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGVuZENvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlbmRPZmZcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGFnXHJcbiAgICAgICAgICAgIF9yZW1vdmVDaGVjay52ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgbk5vZGVBcnJheSA9IFtuZXdJbm5lck5vZGVdO1xyXG4gICAgICAgICAgICBjb25zdCBwTm9kZSA9IGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBlbmRDb247XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBlbmRPZmY7XHJcbiAgICAgICAgICAgIGxldCBwYXNzTm9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgcEN1cnJlbnQsIG5ld05vZGUsIGFwcGVuZE5vZGUsIGFuY2hvck5vZGU7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gcmVjdXJzaW9uRnVuYyhjdXJyZW50LCBhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGN1cnJlbnQuY2hpbGROb2RlcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY2hpbGROb2Rlcy5sZW5ndGggLSAxLCB2Tm9kZTsgMCA8PSBpOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdmVyTm9kZSA9IGFuY2VzdG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc05vZGUgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5faXNJZ25vcmVOb2RlQ2hhbmdlKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lQ2hpbGQgPSBjaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKGNsb25lQ2hpbGQsIGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUobmV3SW5uZXJOb2RlLCBjbG9uZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZS5wYXJlbnROb2RlICE9PSBudWxsICYmIG5ld05vZGUgIT09IGVsICYmIG5ld05vZGUgIT09IG5ld0lubmVyTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlKSBhbmNob3JzLnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBDdXJyZW50LnB1c2godk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcEN1cnJlbnQgPSBwQ3VycmVudC5jb25jYXQoYW5jaG9ycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1RvcE5vZGUgPSBwQ3VycmVudC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBwQ3VycmVudC5wb3AoKSB8fCBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGUgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwQ3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gcEN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNNYWludGFpbmVkTm9kZShuZXdJbm5lck5vZGUucGFyZW50Tm9kZSkgJiYgIV9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0lubmVyTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmNob3JOb2RlICYmIF9pc01haW50YWluZWROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZSA9IG5ld0lubmVyTm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYUNoaWxkcmVuID0gY2hpbGROb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhID0gMCwgYUxlbiA9IGFDaGlsZHJlbi5sZW5ndGg7IGEgPCBhTGVuOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUuYXBwZW5kQ2hpbGQoYUNoaWxkcmVuW2FdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5hcHBlbmRDaGlsZChuZXdJbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbm5lck5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgYW5jZXN0b3IgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RvcE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUgJiYgY2hpbGQubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZ2V0TWFpbnRhaW5lZE5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JBbmNob3JOb2RlID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGFuY2VzdG9yLCBmdW5jdGlvbiAoY3VycmVudCkge3JldHVybiB0aGlzLl9pc01haW50YWluZWROb2RlKGN1cnJlbnQucGFyZW50Tm9kZSkgfHwgY3VycmVudC5wYXJlbnROb2RlID09PSBwTm9kZTt9LmJpbmQodXRpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUuYXBwZW5kQ2hpbGQoYW5jZXN0b3JBbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBhbmNlc3RvckFuY2hvck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUobmV3SW5uZXJOb2RlLCBwTm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuZENvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFzc05vZGUgJiYgY2hpbGQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gX2dldE1haW50YWluZWROb2RlKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJOb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKG9mZnNldCwgKGNvbnRhaW5lci5sZW5ndGggLSBvZmZzZXQpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0gdXRpbC5jcmVhdGVUZXh0Tm9kZShjb250YWluZXIubm9kZVR5cGUgPT09IDEgPyAnJyA6IGNvbnRhaW5lci5zdWJzdHJpbmdEYXRhKDAsIG9mZnNldCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX2dldE1haW50YWluZWROb2RlKGFuY2VzdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGEucGFyZW50Tm9kZSAhPT0gcE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChtLnBhcmVudE5vZGUgIT09IHBOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gcCA9IG0ucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShtLmNoaWxkTm9kZXNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobS5jaGlsZE5vZGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmFwcGVuZENoaWxkKHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gbS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIG0ucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3JOb2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzTWFpbnRhaW5lZE5vZGUobmV3SW5uZXJOb2RlLnBhcmVudE5vZGUpICYmICFhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKG5ld0lubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTm9kZUFycmF5LnB1c2gobmV3SW5uZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShhZnRlck5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5pbnNlcnRCZWZvcmUoYWZ0ZXJOb2RlLCBhbmNlc3Rvci5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV3Tm9kZSAhPT0gcE5vZGUgJiYgbmV3Tm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdk5vZGUgPSBfaXNNYWludGFpbmVkTm9kZShuZXdOb2RlKSA/IG51bGwgOiB2YWxpZGF0aW9uKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZOb2RlICYmIG5ld05vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwQ3VycmVudC5wdXNoKHZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHBDdXJyZW50LnBvcCgpIHx8IGFuY2VzdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZSA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBDdXJyZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSBwQ3VycmVudC5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROb2RlID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSAhPT0gYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lubmVyTm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvciA9IG5ld0lubmVyTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhjaGlsZCkpIG5ld0lubmVyTm9kZS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUoZmFsc2UpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIGFuY2hvck5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUoYW5jaG9yTm9kZSwgcE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JOb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmluc2VydEJlZm9yZShuZXdJbm5lck5vZGUsIHBOb2RlLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSB0ZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGV4dE5vZGUuZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NOb2RlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yLmluc2VydEJlZm9yZShjb250YWluZXIsIGFuY2VzdG9yLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZOb2RlID0gIXBhc3NOb2RlID8gY2hpbGQuY2xvbmVOb2RlKGZhbHNlKSA6IHZhbGlkYXRpb24oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvci5pbnNlcnRCZWZvcmUodk5vZGUsIGFuY2VzdG9yLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgIXV0aWwuaXNCcmVhayhjaGlsZCkpIGNvdmVyTm9kZSA9IHZOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaW9uRnVuYyhjaGlsZCwgY292ZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkoZWxlbWVudCwgcE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gbm90IHJlbW92ZSB0YWdcclxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlTm9kZSAmJiAhaXNSZW1vdmVGb3JtYXQgJiYgIV9yZW1vdmVDaGVjay52KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yOiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogZW5kQ29uLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogZW5kT2ZmXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1JlbW92ZUZvcm1hdCA9IGlzUmVtb3ZlRm9ybWF0ICYmIGlzUmVtb3ZlTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlbW92ZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuTm9kZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBuTm9kZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByQ2hpbGRyZW4gPSByZW1vdmVOb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAockNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb2RlID0gckNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwTm9kZS5pbnNlcnRCZWZvcmUodGV4dE5vZGUsIHJlbW92ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocmVtb3ZlTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBuTm9kZUFycmF5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRleHROb2RlLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdmVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbm5lck5vZGUgPSBuZXdJbm5lck5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbk5vZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmlwUmVtb3ZlTm9kZShuTm9kZUFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1JlbW92ZUZvcm1hdCAmJiBwTm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVtb3ZlTm9kZSAmJiBuZXdJbm5lck5vZGUudGV4dENvbnRlbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVFbXB0eU5vZGUocE5vZGUsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDBcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlRW1wdHlOb2RlKHBOb2RlLCBuZXdJbm5lck5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UocE5vZGUudGV4dENvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gcE5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBjb250YWluZXIudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gbmV3SW5uZXJOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbm9kZSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldHMgPSB7czogMCwgZTogMH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gdXRpbC5nZXROb2RlUGF0aChjb250YWluZXIsIHBOb2RlLCBvZmZzZXRzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBvZmZzZXRzLnM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGFnIG1lcmdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdPZmZzZXRzID0gdXRpbC5tZXJnZVNhbWVUYWdzKHBOb2RlLCBbcGF0aF0sIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocE5vZGUsIGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHV0aWwuZ2V0Tm9kZUZyb21QYXRoKHBhdGgsIHBOb2RlKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBuZXdPZmZzZXRzWzBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYW5jZXN0b3I6IHBOb2RlLFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBvZmZzZXQgPT09IDEgPyBjb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGggOiBvZmZzZXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUnVuIHBsdWdpbiBjYWxscyBhbmQgYmFzaWMgY29tbWFuZHMuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmQgQ29tbWFuZCBzdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlzcGxheSBEaXNwbGF5IHR5cGUgc3RyaW5nICgnY29tbWFuZCcsICdzdWJtZW51JywgJ2RpYWxvZycsICdjb250YWluZXInKVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSBlbGVtZW50IG9mIGNvbW1hbmQgYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWN0aW9uQ2FsbDogZnVuY3Rpb24gKGNvbW1hbmQsIGRpc3BsYXksIHRhcmdldCkge1xyXG4gICAgICAgICAgICAvLyBjYWxsIHBsdWdpbnNcclxuICAgICAgICAgICAgaWYgKGRpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICgvbW9yZS9pLnRlc3QoZGlzcGxheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24pIHRoaXMubW9yZUxheWVyT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9yZUxheWVyQWN0aXZlQnV0dG9uID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0YXJnZXQsICdvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXIucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbW1hbmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3JlTGF5ZXJPZmYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKC9jb250YWluZXIvLnRlc3QoZGlzcGxheSkgJiYgKHRoaXMuX21lbnVUcmF5W2NvbW1hbmRdID09PSBudWxsIHx8IHRhcmdldCAhPT0gdGhpcy5jb250YWluZXJBY3RpdmVCdXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGNvbW1hbmQsIHRoaXMuY29udGFpbmVyT24uYmluZCh0aGlzLCB0YXJnZXQpLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5ICYmIHV0aWwuYXJyYXlJbmNsdWRlcyh0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zLCB0YXJnZXQpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoL3N1Ym1lbnUvLnRlc3QoZGlzcGxheSkgJiYgKHRoaXMuX21lbnVUcmF5W2NvbW1hbmRdID09PSBudWxsIHx8IHRhcmdldCAhPT0gdGhpcy5zdWJtZW51QWN0aXZlQnV0dG9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnN1Ym1lbnVPbi5iaW5kKHRoaXMsIHRhcmdldCksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvZGlhbG9nLy50ZXN0KGRpc3BsYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUGx1Z2luKGNvbW1hbmQsIHRoaXMucGx1Z2luc1tjb21tYW5kXS5vcGVuLmJpbmQodGhpcyksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvY29tbWFuZC8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnBsdWdpbnNbY29tbWFuZF0uYWN0aW9uLmJpbmQodGhpcyksIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9maWxlQnJvd3Nlci8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihjb21tYW5kLCB0aGlzLnBsdWdpbnNbY29tbWFuZF0ub3Blbi5iaW5kKHRoaXMsIG51bGwpLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IC8vIGRlZmF1bHQgY29tbWFuZFxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRIYW5kbGVyKHRhcmdldCwgY29tbWFuZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgvc3VibWVudS8udGVzdChkaXNwbGF5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIS9jb21tYW5kLy50ZXN0KGRpc3BsYXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXhlY3V0ZSBjb21tYW5kIG9mIGNvbW1hbmQgYnV0dG9uKEFsbCBCdXR0b25zIGV4Y2VwdCBzdWJtZW51IGFuZCBkaWFsb2cpXHJcbiAgICAgICAgICogKHNlbGVjdEFsbCwgY29kZVZpZXcsIGZ1bGxTY3JlZW4sIGluZGVudCwgb3V0ZGVudCwgdW5kbywgcmVkbywgcmVtb3ZlRm9ybWF0LCBwcmludCwgcHJldmlldywgc2hvd0Jsb2Nrcywgc2F2ZSwgYm9sZCwgdW5kZXJsaW5lLCBpdGFsaWMsIHN0cmlrZSwgc3Vic2NyaXB0LCBzdXBlcnNjcmlwdCwgY29weSwgY3V0LCBwYXN0ZSlcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8bnVsbH0gdGFyZ2V0IFRoZSBlbGVtZW50IG9mIGNvbW1hbmQgYnV0dG9uXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmQgUHJvcGVydHkgb2YgY29tbWFuZCBidXR0b24gKGRhdGEtdmFsdWUpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29tbWFuZEhhbmRsZXI6IGZ1bmN0aW9uICh0YXJnZXQsIGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSAmJiAhL2NvcHl8Y3V0fHNlbGVjdEFsbHxjb2RlVmlld3xmdWxsU2NyZWVufHByaW50fHByZXZpZXd8c2hvd0Jsb2Nrcy8udGVzdChjb21tYW5kKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvcHknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3V0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKGNvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncGFzdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0QWxsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHd5c2l3eWcgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3QgPSB1dGlsLmdldENoaWxkRWxlbWVudCh3eXNpd3lnLmZpcnN0Q2hpbGQsIGZ1bmN0aW9uIChjdXJyZW50KSB7IHJldHVybiBjdXJyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnQubm9kZVR5cGUgPT09IDM7IH0sIGZhbHNlKSB8fCB3eXNpd3lnLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3QgPSB1dGlsLmdldENoaWxkRWxlbWVudCh3eXNpd3lnLmxhc3RDaGlsZCwgZnVuY3Rpb24gKGN1cnJlbnQpIHsgcmV0dXJuIGN1cnJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHwgY3VycmVudC5ub2RlVHlwZSA9PT0gMzsgfSwgdHJ1ZSkgfHwgd3lzaXd5Zy5sYXN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCB8fCAhbGFzdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTWVkaWEoZmlyc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLmdldEZpbGVDb21wb25lbnQoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChicik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gaW5mbyA/IGluZm8uY29tcG9uZW50IDogZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZvcm1hdCwgZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc01lZGlhKGxhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LmFwcGVuZENoaWxkKGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3lzaXd5Zy5hcHBlbmRDaGlsZChmb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gYnI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhckJhbGxvb24odGhpcy5zZXRSYW5nZShmaXJzdCwgMCwgbGFzdCwgbGFzdC50ZXh0Q29udGVudC5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGVWaWV3JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNvZGVWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmdWxsU2NyZWVuJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUZ1bGxTY3JlZW4odGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2luZGVudCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdvdXRkZW50JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudChjb21tYW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZG8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS51bmRvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZWRvJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkucmVkbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlRm9ybWF0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3ByaW50JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwcmV2aWV3JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Nob3dCbG9ja3MnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRGlzcGxheUJsb2NrcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERpcihvcHRpb25zLnJ0bCA/ICdsdHInIDogJ3J0bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyX2x0cic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREaXIoJ2x0cicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGlyX3J0bCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREaXIoJ3J0bCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2F2ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNhbGxCYWNrU2F2ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNhbGxCYWNrU2F2ZSh0aGlzLmdldENvbnRlbnRzKGZhbHNlKSwgdGhpcy5fdmFyaWFibGUuaXNDaGFuZ2VkKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzQ2hhbmdlZCAmJiB0eXBlb2YgZnVuY3Rpb25zLnNhdmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zLnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jb3JlLmNvbW1hbmRIYW5kbGVyLmZhaWxdIFBsZWFzZSByZWdpc3RlciBjYWxsIGJhY2sgZnVuY3Rpb24gaW4gY3JlYXRpb24gb3B0aW9uLiAoY2FsbEJhY2tTYXZlIDogRnVuY3Rpb24pJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5pc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC50b29sLnNhdmUpIGNvbnRleHQudG9vbC5zYXZlLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgOiAvLyAnU1RST05HJywgJ1UnLCAnRU0nLCAnREVMJywgJ1NVQicsICdTVVAnLi5cclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gb3B0aW9ucy5fZGVmYXVsdENvbW1hbmRbY29tbWFuZC50b0xvd2VyQ2FzZSgpXSB8fCBjb21tYW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb21tYW5kTWFwW2NvbW1hbmRdKSB0aGlzLmNvbW1hbmRNYXBbY29tbWFuZF0gPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzTWFwID0gdGhpcy5fdmFyaWFibGUuY3VycmVudE5vZGVzTWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtZCA9IG5vZGVzTWFwLmluZGV4T2YoY29tbWFuZCkgPiAtMSA/IG51bGwgOiB1dGlsLmNyZWF0ZUVsZW1lbnQoY29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZU5vZGUgPSBjb21tYW5kO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15TVUIkL2kudGVzdChjb21tYW5kKSAmJiBub2Rlc01hcC5pbmRleE9mKCdTVVAnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUgPSAnU1VQJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eU1VQJC9pLnRlc3QoY29tbWFuZCkgJiYgbm9kZXNNYXAuaW5kZXhPZignU1VCJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlID0gJ1NVQic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVDaGFuZ2UoY21kLCB0aGlzLl9jb21tYW5kTWFwU3R5bGVzW2NvbW1hbmRdIHx8IG51bGwsIFtyZW1vdmVOb2RlXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmUgZm9ybWF0IG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVGb3JtYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hhbmdlKG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIGluZGVudGF0aW9uIHRvIHNlbGVjdGVkIHJhbmdlLlxyXG4gICAgICAgICAqIFNldHRlZCBcIm1hcmdpbi1sZWZ0XCIgdG8gXCIyNXB4XCIgaW4gdGhlIHRvcCBcIlBcIiB0YWcgb2YgdGhlIHBhcmFtZXRlciBub2RlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb21tYW5kIFNlcGFyYXRvciAoXCJpbmRlbnRcIiBvciBcIm91dGRlbnRcIilcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmRlbnQ6IGZ1bmN0aW9uIChjb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZUxpbmVzID0gdGhpcy5nZXRTZWxlY3RlZEVsZW1lbnRzKG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9ICdpbmRlbnQnICE9PSBjb21tYW5kO1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW5EaXIgPSBvcHRpb25zLnJ0bCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XHJcbiAgICAgICAgICAgIGxldCBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBsZXQgZWMgPSByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGxldCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICBsZXQgZW8gPSByYW5nZS5lbmRPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmFuZ2VMaW5lcy5sZW5ndGgsIGYsIG1hcmdpbjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmID0gcmFuZ2VMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3RDZWxsKGYpIHx8ICF0aGlzLnBsdWdpbnMubGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IC9cXGQrLy50ZXN0KGYuc3R5bGVbbWFyZ2luRGlyXSkgPyB1dGlsLmdldE51bWJlcihmLnN0eWxlW21hcmdpbkRpcl0sIDApIDogMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luIC09IDI1O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiArPSAyNTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5zZXRTdHlsZShmLCBtYXJnaW5EaXIsIChtYXJnaW4gPD0gMCA/ICcnIDogbWFyZ2luICsgJ3B4JykpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQgfHwgZi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBsaXN0IGNlbGxzXHJcbiAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMubGlzdC5lZGl0SW5zaWRlTGlzdC5jYWxsKHRoaXMsIHNoaWZ0LCBjZWxscyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2Uoc2MsIHNvLCBlYywgZW8pO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZCBvciByZW1vdmUgdGhlIGNsYXNzIG5hbWUgb2YgXCJib2R5XCIgc28gdGhhdCB0aGUgY29kZSBibG9jayBpcyB2aXNpYmxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRGlzcGxheUJsb2NrczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgIHV0aWwudG9nZ2xlQ2xhc3Mod3lzaXd5ZywgJ3NlLXNob3ctYmxvY2snKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaGFzQ2xhc3Mod3lzaXd5ZywgJ3NlLXNob3ctYmxvY2snKSkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlc1N0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoYW5nZXMgdG8gY29kZSB2aWV3IG9yIHd5c2l3eWcgdmlld1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZUNvZGVWaWV3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ29kZVZpZXcgPSB0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3O1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIHV0aWwuc2V0RGlzYWJsZWRCdXR0b25zKCFpc0NvZGVWaWV3LCB0aGlzLmNvZGVWaWV3RGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNOb25FZGl0YWJsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKSkgdGhpcy5fc2V0Q29kZURhdGFUb0VkaXRvcigpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBub25lJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YXJpYWJsZS5fd3lzaXd5Z09yaWdpbkNzc1RleHQgPSB0aGlzLl92YXJpYWJsZS5fd3lzaXd5Z09yaWdpbkNzc1RleHQucmVwbGFjZSgvKFxccz9kaXNwbGF5KFxccyspPzooXFxzKyk/KVthLXpBLVpdKyg/PTspLywgJ2Rpc3BsYXk6IGJsb2NrJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ID09PSAnYXV0bycgJiYgIW9wdGlvbnMuY29kZU1pcnJvckVkaXRvcikgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdmFyaWFibGUuaXNGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm90SGlkZVRvb2xiYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL2JhbGxvb258YmFsbG9vbi1hbHdheXMvaS50ZXN0KG9wdGlvbnMubW9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9hcnJvdy5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5saW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5jb2RlVmlldywgJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc05vbkVkaXRhYmxlKGNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5fcmVzZXRDYWNoaW5nQnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFZGl0b3JEYXRhVG9Db2RlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX2NvZGVPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBibG9jaycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX3d5c2l3eWdPcmlnaW5Dc3NUZXh0ID0gdGhpcy5fdmFyaWFibGUuX3d5c2l3eWdPcmlnaW5Dc3NUZXh0LnJlcGxhY2UoLyhcXHM/ZGlzcGxheShcXHMrKT86KFxccyspPylbYS16QS1aXSsoPz07KS8sICdkaXNwbGF5OiBub25lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbikgY29udGV4dC5lbGVtZW50LmNvZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBjb250ZXh0LmVsZW1lbnQuY29kZS5zdHlsZS5oZWlnaHQgPSBjb250ZXh0LmVsZW1lbnQuY29kZS5zY3JvbGxIZWlnaHQgPiAwID8gKGNvbnRleHQuZWxlbWVudC5jb2RlLnNjcm9sbEhlaWdodCArICdweCcpIDogJ2F1dG8nO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5yZWZyZXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDb2RlVmlldyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub3RIaWRlVG9vbGJhciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzQmFsbG9vbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX2Fycm93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnN0eWxlLmxlZnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhcmlhYmxlLl9yYW5nZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0aGlzLl9zdHlsZUNvbW1hbmRNYXAuY29kZVZpZXcsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5KSB1dGlsLnNldERpc2FibGVkQnV0dG9ucyh0cnVlLCB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMudG9nZ2xlQ29kZVZpZXcgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy50b2dnbGVDb2RlVmlldyh0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3LCB0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydCB0aGUgZGF0YSBvZiB0aGUgY29kZSB2aWV3IGFuZCBwdXQgaXQgaW4gdGhlIFdZU0lXWUcgYXJlYS5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRDb2RlRGF0YVRvRWRpdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVfaHRtbCA9IHRoaXMuX2dldENvZGVWaWV3KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5mdWxsUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VEb2N1bWVudCA9IHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcoY29kZV9odG1sLCAndGV4dC9odG1sJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZENoaWxkcmVuID0gcGFyc2VEb2N1bWVudC5oZWFkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBoZWFkQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9ec2NyaXB0JC9pLnRlc3QoaGVhZENoaWxkcmVuW2ldLnRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoaGVhZENoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGktLSwgbGVuLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSBwYXJzZURvY3VtZW50LmhlYWQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZURvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdJykgfHwgKHRoaXMub3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhcGFyc2VEb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyArPSB1dGlsLl9zZXRJZnJhbWVDc3NUYWdzKHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QuaGVhZC5pbm5lckhUTUwgPSBoZWFkZXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2QuYm9keS5pbm5lckhUTUwgPSB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihwYXJzZURvY3VtZW50LmJvZHkuaW5uZXJIVE1MKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHBhcnNlRG9jdW1lbnQuYm9keS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzW2ldLm5hbWUgPT09ICdjb250ZW50ZWRpdGFibGUnKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZC5ib2R5LnNldEF0dHJpYnV0ZShhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzQ2xhc3ModGhpcy5fd2QuYm9keSwgJ3N1bi1lZGl0b3ItZWRpdGFibGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRhYmxlQ2xhc3NlcyA9IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3Muc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVkaXRhYmxlQ2xhc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKHRoaXMuX3dkLmJvZHksIG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3NbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmlubmVySFRNTCA9IGNvZGVfaHRtbC5sZW5ndGggPiAwID8gdGhpcy5jb252ZXJ0Q29udGVudHNGb3JFZGl0b3IoY29kZV9odG1sKSA6ICc8JyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+PGJyPjwvJyArIG9wdGlvbnMuZGVmYXVsdFRhZyArICc+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0IHRoZSBkYXRhIG9mIHRoZSBXWVNJV1lHIGFyZWEgYW5kIHB1dCBpdCBpbiB0aGUgY29kZSB2aWV3IGFyZWEuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0RWRpdG9yRGF0YVRvQ29kZVZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZUNvbnRlbnRzID0gdGhpcy5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnRleHQuZWxlbWVudC53eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGxldCBjb2RlVmFsdWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmZ1bGxQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHRoaXMuX3dkLmJvZHksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY29kZVZhbHVlID0gJzwhRE9DVFlQRSBodG1sPlxcbjxodG1sPlxcbicgKyB0aGlzLl93ZC5oZWFkLm91dGVySFRNTC5yZXBsYWNlKC8+KD8hXFxuKS9nLCAnPlxcbicpICsgJzxib2R5ICcgKyBhdHRycyArICc+XFxuJyArIGNvZGVDb250ZW50cyArICc8L2JvZHk+XFxuPC9odG1sPic7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlVmFsdWUgPSBjb2RlQ29udGVudHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zZXRDb2RlVmlldyhjb2RlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGFuZ2VzIHRvIGZ1bGwgc2NyZWVuIG9yIGRlZmF1bHQgc2NyZWVuXHJcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fG51bGx9IGVsZW1lbnQgZnVsbCBzY3JlZW4gYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlRnVsbFNjcmVlbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9wQXJlYSA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyID0gY29udGV4dC5lbGVtZW50LnRvb2xiYXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckFyZWEgPSBjb250ZXh0LmVsZW1lbnQuZWRpdG9yQXJlYTtcclxuICAgICAgICAgICAgY29uc3Qgd3lzaXd5Z0ZyYW1lID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZTtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IGNvbnRleHQuZWxlbWVudC5jb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBfdmFyID0gdGhpcy5fdmFyaWFibGU7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdhc1Rvb2xiYXJIaWRkZW4gPSAodG9vbGJhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgfHwgKHRoaXMuX2lzSW5saW5lICYmICF0aGlzLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX3Zhci5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIF92YXIuaXNGdWxsU2NyZWVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdmFyLl9mdWxsU2NyZWVuQXR0cnMuaW5saW5lID0gdGhpcy5faXNJbmxpbmU7XHJcbiAgICAgICAgICAgICAgICBfdmFyLl9mdWxsU2NyZWVuQXR0cnMuYmFsbG9vbiA9IHRoaXMuX2lzQmFsbG9vbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNJbmxpbmUgfHwgdGhpcy5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoISFvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIGNvbnRleHQuZWxlbWVudC5yZWxhdGl2ZS5pbnNlcnRCZWZvcmUodG9vbGJhciwgZWRpdG9yQXJlYSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdG9wQXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLnRvcCA9ICcwJztcclxuICAgICAgICAgICAgICAgIHRvcEFyZWEuc3R5bGUubGVmdCA9ICcwJztcclxuICAgICAgICAgICAgICAgIHRvcEFyZWEuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLm1heFdpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgdG9wQXJlYS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLnpJbmRleCA9ICcyMTQ3NDgzNjQ3JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5lbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ICE9PSAoJ25vbmUnICYmICcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF92YXIuX2Z1bGxTY3JlZW5BdHRycy5zdGlja3kgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRvb2xiYXIsICdzZS10b29sYmFyLXN0aWNreScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF92YXIuX2JvZHlPdmVyZmxvdyA9IF9kLmJvZHkuc3R5bGUub3ZlcmZsb3c7XHJcbiAgICAgICAgICAgICAgICBfZC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Zhci5fZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQgPSBlZGl0b3JBcmVhLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICBfdmFyLl93eXNpd3lnT3JpZ2luQ3NzVGV4dCA9IHd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgX3Zhci5fY29kZU9yaWdpbkNzc1RleHQgPSBjb2RlLnN0eWxlLmNzc1RleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZWRpdG9yQXJlYS5zdHlsZS5jc3NUZXh0ID0gdG9vbGJhci5zdHlsZS5jc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB3eXNpd3lnRnJhbWUuc3R5bGUuY3NzVGV4dCA9ICh3eXNpd3lnRnJhbWUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvXFxzP2Rpc3BsYXkoXFxzKyk/OihcXHMrKT9bYS16QS1aXSs7LykgfHwgWycnXSlbMF0gKyBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29kZS5zdHlsZS5jc3NUZXh0ID0gKGNvZGUuc3R5bGUuY3NzVGV4dC5tYXRjaCgvXFxzP2Rpc3BsYXkoXFxzKyk/OihcXHMrKT9bYS16QS1aXSs7LykgfHwgWycnXSlbMF07XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLndpZHRoID0gd3lzaXd5Z0ZyYW1lLnN0eWxlLmhlaWdodCA9IGNvZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgICAgIF92YXIuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiA9IChfdy5pbm5lckhlaWdodCAtIHRvb2xiYXIub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGVkaXRvckFyZWEuc3R5bGUuaGVpZ2h0ID0gKF92YXIuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiAtIG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCkgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB1dGlsLmNoYW5nZUVsZW1lbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCwgaWNvbnMucmVkdWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUgJiYgb3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvckFyZWEuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faWZyYW1lQXV0b0hlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlLm1hcmdpblRvcCA9IG9wdGlvbnMuZnVsbFNjcmVlbk9mZnNldCArICdweCc7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5mdWxsU2NyZWVuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdmFyLmlzRnVsbFNjcmVlbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0ID0gX3Zhci5fd3lzaXd5Z09yaWdpbkNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICBjb2RlLnN0eWxlLmNzc1RleHQgPSBfdmFyLl9jb2RlT3JpZ2luQ3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUuY3NzVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yQXJlYS5zdHlsZS5jc3NUZXh0ID0gX3Zhci5fZWRpdG9yQXJlYU9yaWdpbkNzc1RleHQ7XHJcbiAgICAgICAgICAgICAgICB0b3BBcmVhLnN0eWxlLmNzc1RleHQgPSBfdmFyLl9vcmlnaW5Dc3NUZXh0O1xyXG4gICAgICAgICAgICAgICAgX2QuYm9keS5zdHlsZS5vdmVyZmxvdyA9IF92YXIuX2JvZHlPdmVyZmxvdztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSBvcHRpb25zLnRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQodG9vbGJhcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RpY2t5VG9vbGJhciA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyh0b29sYmFyLCAnc2UtdG9vbGJhci1zdGlja3knKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoX3Zhci5fZnVsbFNjcmVlbkF0dHJzLnN0aWNreSAmJiAhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Zhci5fZnVsbFNjcmVlbkF0dHJzLnN0aWNreSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyh0b29sYmFyLCBcInNlLXRvb2xiYXItc3RpY2t5XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5saW5lID0gX3Zhci5fZnVsbFNjcmVlbkF0dHJzLmlubGluZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFsbG9vbiA9IF92YXIuX2Z1bGxTY3JlZW5BdHRycy5iYWxsb29uO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW5saW5lKSBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuICAgICAgICAgICAgICAgIGlmICghIW9wdGlvbnMudG9vbGJhckNvbnRhaW5lcikgdXRpbC5yZW1vdmVDbGFzcyh0b29sYmFyLCAnc2UtdG9vbGJhci1iYWxsb29uJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQub25TY3JvbGxfd2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkgdXRpbC5jaGFuZ2VFbGVtZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsIGljb25zLmV4cGFuc2lvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGUubWFyZ2luVG9wID0gJyc7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKHRoaXMuX3N0eWxlQ29tbWFuZE1hcC5mdWxsU2NyZWVuLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3YXNUb29sYmFySGlkZGVuKSBmdW5jdGlvbnMudG9vbGJhci5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLnRvZ2dsZUZ1bGxTY3JlZW4gPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy50b2dnbGVGdWxsU2NyZWVuKHRoaXMuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbiwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFByaW50cyB0aGUgY3VycmVudCBjb250ZW50cyBvZiB0aGUgZWRpdG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZSA9IHV0aWwuY3JlYXRlRWxlbWVudCgnSUZSQU1FJyk7XHJcbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBfZC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50c0hUTUwgPSBvcHRpb25zLnByaW50VGVtcGxhdGUgPyBvcHRpb25zLnByaW50VGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7XFxzKmNvbnRlbnRzXFxzKlxcfVxcfS9pLCB0aGlzLmdldENvbnRlbnRzKHRydWUpKSA6IHRoaXMuZ2V0Q29udGVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW50RG9jdW1lbnQgPSB1dGlsLmdldElmcmFtZURvY3VtZW50KGlmcmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdEb2MgPSB0aGlzLl93ZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJydHMgPSBvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gJ2NsYXNzPVwiJyArIG9wdGlvbnMuX3ByaW50Q2xhc3MgKyAnXCInIDogb3B0aW9ucy5mdWxsUGFnZSA/IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHdEb2MuYm9keSwgWydjb250ZW50ZWRpdGFibGUnXSkgOiAnY2xhc3M9XCInICsgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyArICdcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnREb2N1bWVudC53cml0ZSgnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwhRE9DVFlQRSBodG1sPjxodG1sPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICB3RG9jLmhlYWQuaW5uZXJIVE1MICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9oZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8Ym9keSAnICsgYXJydHMgKyAnPicgKyBjb250ZW50c0hUTUwgKyAnPC9ib2R5PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2h0bWw+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5rSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgKz0gbGlua3NbaV0ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtIVE1MICs9IHN0eWxlc1tpXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJpbnREb2N1bWVudC53cml0ZSgnJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwhRE9DVFlQRSBodG1sPjxodG1sPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICBsaW5rSFRNTCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvaGVhZD4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGJvZHkgY2xhc3M9XCInICsgKG9wdGlvbnMuX3ByaW50Q2xhc3MgIT09IG51bGwgPyBvcHRpb25zLl9wcmludENsYXNzIDogb3B0aW9ucy5fZWRpdGFibGVDbGFzcykgKyAnXCI+JyArIGNvbnRlbnRzSFRNTCArICc8L2JvZHk+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvaHRtbD4nXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJRSBvciBFZGdlLCBDaHJvbWl1bVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzSUVfRWRnZSB8fCB1dGlsLmlzQ2hyb21pdW0gfHwgISFfZC5kb2N1bWVudE1vZGUgfHwgISFfdy5TdHlsZU1lZGlhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC5leGVjQ29tbWFuZCgncHJpbnQnLCBmYWxzZSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlciBicm93c2Vyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY29yZS5wcmludC5mYWlsXSBlcnJvcjogJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oaWZyYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gdGhlIHByZXZpZXcgd2luZG93LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByZXZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRzSFRNTCA9IG9wdGlvbnMucHJldmlld1RlbXBsYXRlID8gb3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7XFxzKmNvbnRlbnRzXFxzKlxcfVxcfS9pLCB0aGlzLmdldENvbnRlbnRzKHRydWUpKSA6IHRoaXMuZ2V0Q29udGVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvd09iamVjdCA9IF93Lm9wZW4oJycsICdfYmxhbmsnKTtcclxuICAgICAgICAgICAgd2luZG93T2JqZWN0Lm1pbWVUeXBlID0gJ3RleHQvaHRtbCc7XHJcbiAgICAgICAgICAgIGNvbnN0IHdEb2MgPSB0aGlzLl93ZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJydHMgPSBvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gJ2NsYXNzPVwiJyArIG9wdGlvbnMuX3ByaW50Q2xhc3MgKyAnXCInIDogb3B0aW9ucy5mdWxsUGFnZSA/IHV0aWwuZ2V0QXR0cmlidXRlc1RvU3RyaW5nKHdEb2MuYm9keSwgWydjb250ZW50ZWRpdGFibGUnXSkgOiAnY2xhc3M9XCInICsgb3B0aW9ucy5fZWRpdGFibGVDbGFzcyArICdcIic7XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93T2JqZWN0LmRvY3VtZW50LndyaXRlKCcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxoZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIHdEb2MuaGVhZC5pbm5lckhUTUwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3R5bGU+Ym9keSB7b3ZlcmZsb3c6YXV0byAhaW1wb3J0YW50OyBtYXJnaW46IDEwcHggYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6YXV0byAhaW1wb3J0YW50OyBvdXRsaW5lOjFweCBkYXNoZWQgI2NjYzt9PC9zdHlsZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9oZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8Ym9keSAnICsgYXJydHMgKyAnPicgKyBjb250ZW50c0hUTUwgKyAnPC9ib2R5PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2h0bWw+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gX2QuaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5rSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmtzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgKz0gbGlua3NbaV0ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtIVE1MICs9IHN0eWxlc1tpXS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93T2JqZWN0LmRvY3VtZW50LndyaXRlKCcnICtcclxuICAgICAgICAgICAgICAgICAgICAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxoZWFkPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8dGl0bGU+JyArIGxhbmcudG9vbGJhci5wcmV2aWV3ICsgJzwvdGl0bGU+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgbGlua0hUTUwgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2hlYWQ+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxib2R5IGNsYXNzPVwiJyArIChvcHRpb25zLl9wcmludENsYXNzICE9PSBudWxsID8gb3B0aW9ucy5fcHJpbnRDbGFzcyA6IG9wdGlvbnMuX2VkaXRhYmxlQ2xhc3MpICsgJ1wiIHN0eWxlPVwibWFyZ2luOjEwcHggYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6YXV0byAhaW1wb3J0YW50OyBvdXRsaW5lOjFweCBkYXNoZWQgI2NjYztcIj4nICsgY29udGVudHNIVE1MICsgJzwvYm9keT4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9odG1sPidcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGRpcmVjdGlvbiB0byBcInJ0bFwiIG9yIFwibHRyXCIuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpciBcInJ0bFwiIG9yIFwibHRyXCJcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXREaXI6IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICAgICAgY29uc3QgcnRsID0gZGlyID09PSAncnRsJztcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlRGlyID0gdGhpcy5fcHJldlJ0bCAhPT0gcnRsO1xyXG4gICAgICAgICAgICB0aGlzLl9wcmV2UnRsID0gb3B0aW9ucy5ydGwgPSBydGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlRGlyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbGlnbiBidXR0b25zXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zLmFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zLmFsaWduLmV4Y2hhbmdlRGlyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbmRlbnQgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5pbmRlbnQpIHV0aWwuY2hhbmdlRWxlbWVudChjb250ZXh0LnRvb2wuaW5kZW50LmZpcnN0RWxlbWVudENoaWxkLCBpY29ucy5pbmRlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5vdXRkZW50KSB1dGlsLmNoYW5nZUVsZW1lbnQoY29udGV4dC50b29sLm91dGRlbnQuZmlyc3RFbGVtZW50Q2hpbGQsIGljb25zLm91dGRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlbCA9IGNvbnRleHQuZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHJ0bCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGVsLnd5c2l3eWdGcmFtZSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhlbC50b3BBcmVhLCAnc2UtcnRsJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGVsLnd5c2l3eWdGcmFtZSwgJ3NlLXJ0bCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsaW5lTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZHJlbihlbC53eXNpd3lnLCBmdW5jdGlvbiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNGb3JtYXRFbGVtZW50KGN1cnJlbnQpICYmIChjdXJyZW50LnN0eWxlLm1hcmdpblJpZ2h0IHx8IGN1cnJlbnQuc3R5bGUubWFyZ2luTGVmdCB8fCBjdXJyZW50LnN0eWxlLnRleHRBbGlnbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVOb2Rlcy5sZW5ndGgsIG4sIGwsIHI7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbiA9IGxpbmVOb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIC8vIGluZGVudCBtYXJnaW5cclxuICAgICAgICAgICAgICAgIHIgPSBuLnN0eWxlLm1hcmdpblJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgbCA9IG4uc3R5bGUubWFyZ2luTGVmdDtcclxuICAgICAgICAgICAgICAgIGlmIChyIHx8IGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLm1hcmdpblJpZ2h0ID0gbDtcclxuICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLm1hcmdpbkxlZnQgPSByO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGV4dCBhbGlnblxyXG4gICAgICAgICAgICAgICAgciA9IG4uc3R5bGUudGV4dEFsaWduO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgPT09ICdsZWZ0Jykgbi5zdHlsZS50ZXh0QWxpZ24gPSAncmlnaHQnO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAociA9PT0gJ3JpZ2h0Jykgbi5zdHlsZS50ZXh0QWxpZ24gPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2wgPSBjb250ZXh0LnRvb2w7XHJcbiAgICAgICAgICAgIGlmICh0b29sLmRpcikge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5jaGFuZ2VUeHQodG9vbC5kaXIucXVlcnlTZWxlY3RvcignLnNlLXRvb2x0aXAtdGV4dCcpLCBsYW5nLnRvb2xiYXJbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuY2hhbmdlRWxlbWVudCh0b29sLmRpci5maXJzdEVsZW1lbnRDaGlsZCwgaWNvbnNbb3B0aW9ucy5ydGwgPyAnZGlyX2x0cicgOiAnZGlyX3J0bCddKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvb2wuZGlyX2x0cikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ0bCkgdXRpbC5yZW1vdmVDbGFzcyh0b29sLmRpcl9sdHIsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdXRpbC5hZGRDbGFzcyh0b29sLmRpcl9sdHIsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvb2wuZGlyX3J0bCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ0bCkgdXRpbC5hZGRDbGFzcyh0b29sLmRpcl9ydGwsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgdXRpbC5yZW1vdmVDbGFzcyh0b29sLmRpcl9ydGwsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHRoZSBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gaHRtbCBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENvbnRlbnRzOiBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0VmFsdWUgPSAoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSB1bmRlZmluZWQpID8gJycgOiB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihodG1sLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl92YXJpYWJsZS5pc0NvZGVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5pbm5lckhUTUwgPSBjb252ZXJ0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNldENvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnZlcnRWYWx1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q29kZVZpZXcodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBpZnJhbWUncyBoZWFkIHRhZyBhbmQgYm9keSB0YWcgd2hlbiB1c2luZyB0aGUgXCJpZnJhbWVcIiBvciBcImZ1bGxQYWdlXCIgb3B0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjdHggeyBoZWFkOiBIVE1MIHN0cmluZywgYm9keTogSFRNTCBzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0SWZyYW1lQ29udGVudHM6IGZ1bmN0aW9uIChjdHgpIHtcclxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlmcmFtZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY3R4LmhlYWQpIHRoaXMuX3dkLmhlYWQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLl9fYWxsb3dlZFNjcmlwdFRhZyA/IGN0eC5oZWFkIDogY3R4LmhlYWQucmVwbGFjZSh0aGlzLl9fc2NyaXB0VGFnUmVnRXhwLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChjdHguYm9keSkgdGhpcy5fd2QuYm9keS5pbm5lckhUTUwgPSB0aGlzLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvcihjdHguYm9keSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q29tcG9uZW50cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGNvbnRlbnRzXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBvbmx5Q29udGVudHMgUmV0dXJuIG9ubHkgdGhlIGNvbnRlbnRzIG9mIHRoZSBib2R5IHdpdGhvdXQgaGVhZGVycyB3aGVuIHRoZSBcImZ1bGxQYWdlXCIgb3B0aW9uIGlzIHRydWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldENvbnRlbnRzOiBmdW5jdGlvbiAob25seUNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRzID0gdGhpcy5jbGVhbkhUTUwoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5uZXJIVE1MLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVySFRNTCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgIHJlbmRlckhUTUwuaW5uZXJIVE1MID0gY29udGVudHM7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlZGl0YWJsZUVscyA9IHV0aWwuZ2V0TGlzdENoaWxkcmVuKHJlbmRlckhUTUwsIGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlZGl0YWJsZUVscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZWRpdGFibGVFbHNbaV0ucmVtb3ZlQXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZnVsbFBhZ2UgJiYgIW9ubHlDb250ZW50cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSB1dGlsLmdldEF0dHJpYnV0ZXNUb1N0cmluZyh0aGlzLl93ZC5ib2R5LCBbJ2NvbnRlbnRlZGl0YWJsZSddKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnPCFET0NUWVBFIGh0bWw+PGh0bWw+JyArIHRoaXMuX3dkLmhlYWQub3V0ZXJIVE1MICsgJzxib2R5ICcgKyBhdHRycyArICc+JyArIHJlbmRlckhUTUwuaW5uZXJIVE1MICsgJzwvYm9keT48L2h0bWw+JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJIVE1MLmlubmVySFRNTDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjdXJyZW50IGNvbnRlbnRzIHdpdGggY29udGFpbmluZyBwYXJlbnQgZGl2KGRpdi5zdW4tZWRpdG9yLWVkaXRhYmxlKS5cclxuICAgICAgICAgKiA8ZGl2IGNsYXNzPVwic3VuLWVkaXRvci1lZGl0YWJsZVwiPntjb250ZW50c308L2Rpdj5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9ubHlDb250ZW50cyBSZXR1cm4gb25seSB0aGUgY29udGVudHMgb2YgdGhlIGJvZHkgd2l0aG91dCBoZWFkZXJzIHdoZW4gdGhlIFwiZnVsbFBhZ2VcIiBvcHRpb24gaXMgdHJ1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RnVsbENvbnRlbnRzOiBmdW5jdGlvbiAob25seUNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInN1bi1lZGl0b3ItZWRpdGFibGUnICsgKG9wdGlvbnMucnRsID8gJyBzZS1ydGwnIDogJycpICsgJ1wiPicgKyB0aGlzLmdldENvbnRlbnRzKG9ubHlDb250ZW50cykgKyAnPC9kaXY+JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyBIVE1MIHN0cmluZyBhY2NvcmRpbmcgdG8gdGFnIHR5cGUgYW5kIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgICAgICogVXNlIG9ubHkgXCJjbGVhbkhUTUxcIlxyXG4gICAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlRm9ybWF0IElmIHRydWUsIHRleHQgbm9kZXMgdGhhdCBkbyBub3QgaGF2ZSBhIGZvcm1hdCBub2RlIGlzIHdyYXBwZWQgd2l0aCB0aGUgZm9ybWF0IHRhZy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9tYWtlTGluZTogZnVuY3Rpb24gKG5vZGUsIHJlcXVpcmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFRhZyA9IG9wdGlvbnMuZGVmYXVsdFRhZztcclxuICAgICAgICAgICAgLy8gZWxlbWVudFxyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cC50ZXN0KG5vZGUubm9kZU5hbWUpKSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoL19fc2VfX3RhZy8udGVzdChub2RlLmNsYXNzTmFtZSkpIHJldHVybiBub2RlLm91dGVySFRNTDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaCA9IHV0aWwuZ2V0TGlzdENoaWxkTm9kZXMobm9kZSwgZnVuY3Rpb24oY3VycmVudCkgeyByZXR1cm4gdXRpbC5pc1NwYW5XaXRob3V0QXR0cihjdXJyZW50KSAmJiAhdXRpbC5nZXRQYXJlbnRFbGVtZW50KGN1cnJlbnQsIHV0aWwuaXNOb3RDaGVja2luZ05vZGUpOyB9KSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjaC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoW2ldLm91dGVySFRNTCA9IGNoW2ldLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVGb3JtYXQgfHwgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpIHx8IHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQobm9kZSkgfHwgdXRpbC5pc0NvbXBvbmVudChub2RlKSB8fCB1dGlsLmlzRmlndXJlcyhub2RlKSB8fCAodXRpbC5pc0FuY2hvcihub2RlKSAmJiB1dGlsLmlzTWVkaWEobm9kZS5maXJzdEVsZW1lbnRDaGlsZCkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmlzU3BhbldpdGhvdXRBdHRyKG5vZGUpID8gbm9kZS5pbm5lckhUTUwgOiBub2RlLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIGRlZmF1bHRUYWcgKyAnPicgKyAodXRpbC5pc1NwYW5XaXRob3V0QXR0cihub2RlKSA/IG5vZGUuaW5uZXJIVE1MIDogbm9kZS5vdXRlckhUTUwpICsgJzwvJyArIGRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGV4dFxyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXF1aXJlRm9ybWF0KSByZXR1cm4gdXRpbC5fSFRNTENvbnZlcnRvcihub2RlLnRleHRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRBcnJheSA9IG5vZGUudGV4dENvbnRlbnQuc3BsaXQoL1xcbi9nKTtcclxuICAgICAgICAgICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdExlbiA9IHRleHRBcnJheS5sZW5ndGgsIHRleHQ7IGkgPCB0TGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dEFycmF5W2ldLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggPiAwKSBodG1sICs9ICc8JyArIGRlZmF1bHRUYWcgKyAnPicgKyB1dGlsLl9IVE1MQ29udmVydG9yKHRleHQpICsgJzwvJyArIGRlZmF1bHRUYWcgKyAnPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb21tZW50c1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiB0aGlzLl9hbGxvd0hUTUxDb21tZW50cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc8IS0tJyArIG5vZGUudGV4dENvbnRlbnQudHJpbSgpICsgJy0tPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlcyBhdHRyaWJ1dGUgdmFsdWVzIHN1Y2ggYXMgc3R5bGUgYW5kIGNvbnZlcnRzIHRhZ3MgdGhhdCBkbyBub3QgY29uZm9ybSB0byB0aGUgXCJodG1sNVwiIHN0YW5kYXJkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGFnQ29udmVydG9yOiBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCkgcmV0dXJuIHRleHQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBlYyA9IG9wdGlvbnMuX3RleHRUYWdzTWFwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCwgZnVuY3Rpb24gKG0sIHQsIG4sIHApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICsgKHR5cGVvZiBlY1tuXSA9PT0gJ3N0cmluZycgPyBlY1tuXSA6IG4pICsgKHAgPyAnICcgKyBwIDogJycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVsZXRlIGRpc2FsbG93ZWQgdGFnc1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIEhUTUwgc3RyaW5nXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9kZWxldGVEaXNhbGxvd2VkVGFnczogZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWxcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKHRoaXMuX19kaXNhbGxvd2VkVGFnc1JlZ0V4cCwgJycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPFthLXowLTldK1xcOlthLXowLTldK1tePl5cXC9dKj5bXj5dKjxcXC9bYS16MC05XStcXDpbYS16MC05XSs+L2dpLCAnJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIS9cXGJmb250XFxiL2kudGVzdCh0aGlzLm9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC8oPFxcLz8pZm9udChcXHM/KS9naSwgJyQxc3BhbiQyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UodGhpcy5lZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwLCAnJykucmVwbGFjZSh0aGlzLmVkaXRvclRhZ3NCbGFja2xpc3RSZWdFeHAsICcnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfY29udmVydEZvbnRTaXplOiBmdW5jdGlvbiAodG8sIHNpemUpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0aCA9IHRoaXMuX3cuTWF0aDtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzaXplLm1hdGNoKC8oXFxkKyg/OlxcLlxcZCspPykoLispLyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpemVOdW0gPSB2YWx1ZSA/IHZhbHVlWzFdICogMSA6IHV0aWwuZm9udFZhbHVlTWFwW3NpemVdO1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tID0gdmFsdWUgPyB2YWx1ZVsyXSA6ICdyZW0nO1xyXG4gICAgICAgICAgICBsZXQgcHhTaXplID0gc2l6ZU51bTtcclxuXHJcbiAgICAgICAgICAgIGlmICgvZW0vLnRlc3QoZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgIHB4U2l6ZSA9IG1hdGgucm91bmQoc2l6ZU51bSAvIDAuMDYyNSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJvbSA9PT0gJ3B0Jykge1xyXG4gICAgICAgICAgICAgICAgcHhTaXplID0gbWF0aC5yb3VuZChzaXplTnVtICogMS4zMzMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyb20gPT09ICclJykge1xyXG4gICAgICAgICAgICAgICAgcHhTaXplID0gc2l6ZU51bSAvIDEwMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0bykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZW0nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJyUnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHhTaXplICogMC4wNjI1KS50b0ZpeGVkKDIpICsgdG87XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGguZmxvb3IocHhTaXplIC8gMS4zMzMpICsgdG87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAvLyBweFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBweFNpemUgKyB0bztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jbGVhblN0eWxlOiBmdW5jdGlvbiAobSwgdiwgbmFtZSkge1xyXG4gICAgICAgICAgICBsZXQgc3YgPSAobS5tYXRjaCgvc3R5bGVcXHMqPVxccyooPzpcInwnKVteXCInXSooPzpcInwnKS8pIHx8IFtdKVswXTtcclxuICAgICAgICAgICAgaWYgKC9zcGFuL2kudGVzdChuYW1lKSAmJiAhc3YgJiYgKG0ubWF0Y2goLzxbXlxcc10rXFxzKC4rKS8pIHx8IFtdKVsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChtLm1hdGNoKC9cXHNzaXplPVwiKFteXCJdKylcIi9pKSB8fCBbXSlbMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmYWNlID0gKG0ubWF0Y2goL1xcc2ZhY2U9XCIoW15cIl0rKVwiL2kpIHx8IFtdKVsxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKG0ubWF0Y2goL1xcc2NvbG9yPVwiKFteXCJdKylcIi9pKSB8fCBbXSlbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSB8fCBmYWNlIHx8IGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3YgPSAnc3R5bGU9XCInICsgKHNpemUgPyAnZm9udC1zaXplOicgKyAodGhpcy51dGlsLmdldE51bWJlcihzaXplLzMuMzMzLCAxKSkgKyAncmVtOycgOiAnJykgKyAoZmFjZSA/ICdmb250LWZhbWlseTonICsgZmFjZSArICc7JyA6ICcnKSArIChjb2xvciA/ICdjb2xvcjonICsgY29sb3IgKyAnOycgOiAnJykgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3YpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdikgdiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzdi5yZXBsYWNlKC8mcXVvdDsvZywgJycpLm1hdGNoKHRoaXMuX2NsZWFuU3R5bGVSZWdFeHBbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFN0eWxlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0eWxlLmxlbmd0aCwgcjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBzdHlsZVtpXS5tYXRjaCgvKFthLXpBLVowLTktXSspKDopKFteXCInXSspLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyICYmICEvaW5oZXJpdHxpbml0aWFsfHJldmVydHx1bnNldC9pLnRlc3QoclszXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSB1dGlsLmtlYmFiVG9DYW1lbENhc2UoclsxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMud3dDb21wdXRlZFN0eWxlW2tdID8gdGhpcy53d0NvbXB1dGVkU3R5bGVba10ucmVwbGFjZSgvXCIvZywgJycpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gclszXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb250RmFtaWx5JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBsdWdpbnMuZm9udCB8fCBvcHRpb25zLmZvbnQuaW5kZXhPZihjKSA9PT0gLTEpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb250U2l6ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wbHVnaW5zLmZvbnRTaXplKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jbGVhblN0eWxlUmVnRXhwLmZvbnRTaXplVW5pdC50ZXN0KHJbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByWzBdID0gclswXS5yZXBsYWNlKChyWzBdLm1hdGNoKC86XFxzKihbXjtdKykvKSB8fCBbXSlbMV0sIHRoaXMuX2NvbnZlcnRGb250U2l6ZS5iaW5kKHRoaXMsIG9wdGlvbnMuZm9udFNpemVVbml0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sb3InOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucGx1Z2lucy5mb250Q29sb3IgfHwgL3JnYmFcXCgoWzAtOV0rXFxzKixcXHMqKXszfTBcXCl8d2luZG93dGV4dC9pLnRlc3QoYykpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiYWNrZ3JvdW5kQ29sb3InOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucGx1Z2lucy5oaWxpdGVDb2xvciB8fCAvcmdiYVxcKChbMC05XStcXHMqLFxccyopezN9MFxcKXx3aW5kb3d0ZXh0L2kudGVzdChjKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ICE9PSBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFN0eWxlLnB1c2goclswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbG93ZWRTdHlsZS5sZW5ndGggPiAwKSB2LnB1c2goJ3N0eWxlPVwiJyArIGFsbG93ZWRTdHlsZS5qb2luKCc7JykgKyAnXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRhZyBhbmQgdGFnIGF0dHJpYnV0ZSBjaGVjayBSZWdFeHAgZnVuY3Rpb24uICh1c2VkIGJ5IFwiY2xlYW5IVE1MXCIgYW5kIFwiY29udmVydENvbnRlbnRzRm9yRWRpdG9yXCIpXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBsb3dMZXZlbENoZWNrIFJvdyBsZXZlbCBjaGVja1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtIFJlZ0V4cCB2YWx1ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0IFJlZ0V4cCB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfY2xlYW5UYWdzOiBmdW5jdGlvbiAobG93TGV2ZWxDaGVjaywgbSwgdCkge1xyXG4gICAgICAgICAgICBpZiAoL148W2EtejAtOV0rXFw6W2EtejAtOV0rL2kudGVzdChtKSkgcmV0dXJuIG07XHJcblxyXG4gICAgICAgICAgICBsZXQgdiA9IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSB0Lm1hdGNoKC8oPyE8KVthLXpBLVowLTlcXC1dKy8pWzBdLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBibGFja2xpc3RcclxuICAgICAgICAgICAgY29uc3QgYkF0dHIgPSB0aGlzLl9hdHRyaWJ1dGVzVGFnc0JsYWNrbGlzdFt0YWdOYW1lXTtcclxuICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvXFxzKD86b25bYS16XSspXFxzKj1cXHMqKFwiKVteXCJdKlxcMS9pZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoYkF0dHIpIG0gPSBtLnJlcGxhY2UoYkF0dHIsICcnKTtcclxuICAgICAgICAgICAgZWxzZSBtID0gbS5yZXBsYWNlKHRoaXMuX2F0dHJpYnV0ZXNCbGFja2xpc3RSZWdFeHAsICcnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHdoaXRlbGlzdFxyXG4gICAgICAgICAgICBjb25zdCB3QXR0ciA9IHRoaXMuX2F0dHJpYnV0ZXNUYWdzV2hpdGVsaXN0W3RhZ05hbWVdO1xyXG4gICAgICAgICAgICBpZiAod0F0dHIpIHYgPSBtLm1hdGNoKHdBdHRyKTtcclxuICAgICAgICAgICAgZWxzZSB2ID0gbS5tYXRjaChsb3dMZXZlbENoZWNrID8gdGhpcy5fYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cCA6IHRoaXMuX2F0dHJpYnV0ZXNXaGl0ZWxpc3RSZWdFeHBfYWxsX2RhdGEpO1xyXG5cclxuICAgICAgICAgICAgLy8gYXR0cmlidXRlXHJcbiAgICAgICAgICAgIGlmIChsb3dMZXZlbENoZWNrIHx8IHRhZ05hbWUgPT09ICdzcGFuJyB8fCB0YWdOYW1lID09PSAnbGknIHx8ICB0aGlzLl9jbGVhblN0eWxlUmVnRXhwW3RhZ05hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ2EnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3YgPSBtLm1hdGNoKC8oPzooPzppZHxuYW1lKVxccyo9XFxzKig/OlwifCcpW15cIiddKig/OlwifCcpKS9nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3YpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2KSB2ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYucHVzaChzdlswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdiB8fCAhL3N0eWxlPS9pLnRlc3Qodi50b1N0cmluZygpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWdOYW1lID09PSAnc3BhbicgfHwgdGFnTmFtZSA9PT0gJ2xpJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5fY2xlYW5TdHlsZShtLCB2LCAnc3BhbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gaWYgKHRoaXMuX2NsZWFuU3R5bGVSZWdFeHBbdGFnTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuX2NsZWFuU3R5bGUobSwgdiwgdGFnTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXihQfERJVnxIWzEtNl18UFJFKSQvaS50ZXN0KHRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLl9jbGVhblN0eWxlKG0sIHYsICdmb3JtYXQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdiA9IG0ubWF0Y2goL3N0eWxlXFxzKj1cXHMqKD86XCJ8JylbXlwiJ10qKD86XCJ8JykvKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdiAmJiAhdikgdiA9IFtzdlswXV07XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdiAmJiAhdi5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiAvXnN0eWxlLy50ZXN0KHYudHJpbSgpKTsgfSkpIHYucHVzaChzdlswXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGZpZ3VyZVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0ZpZ3VyZXModGFnTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gbS5tYXRjaCgvc3R5bGVcXHMqPVxccyooPzpcInwnKVteXCInXSooPzpcInwnKS8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2KSB2ID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAoc3YpIHYucHVzaChzdlswXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdi5sZW5ndGgsIGE7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChsb3dMZXZlbENoZWNrICYmIC9eY2xhc3M9XCIoPyEoX19zZV9ffHNlLXxrYXRleCkpLy50ZXN0KHZbaV0udHJpbSgpKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9ICgvXig/OmhyZWZ8c3JjKVxccyo9XFxzKignfFwifFxccykqamF2YXNjcmlwdFxccypcXDovaS50ZXN0KHZbaV0udHJpbSgpKSA/ICcnIDogdltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdCArPSAoL15cXHMvLnRlc3QoYSkgPyAnJyA6ICcgJykgKyBhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGV0ZXJtaW5lcyBpZiBmb3JtYXR0aW5nIGlzIHJlcXVpcmVkIGFuZCByZXR1cm5zIGEgZG9tVHJlZVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZG9tIGRvY3VtZW50RnJhZ21lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9lZGl0Rm9ybWF0OiBmdW5jdGlvbiAoZG9tKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnLCBmO1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wVHJlZSA9IGRvbS5jaGlsZE5vZGVzO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRlbXBUcmVlLmxlbmd0aCwgbjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBuID0gdGVtcFRyZWVbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAgKG4ubm9kZVR5cGUgPT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSAnPCEtLSAnICsgbi50ZXh0Q29udGVudCArICcgLS0+JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KG4pICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KG4pICYmICF1dGlsLmlzQ29tcG9uZW50KG4pICYmICEvbWV0YS9pLnRlc3Qobi5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWYpIGYgPSB1dGlsLmNyZWF0ZUVsZW1lbnQob3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICBmLmFwcGVuZENoaWxkKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTsgbGVuLS07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGYub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gbi5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmKSB2YWx1ZSArPSBmLm91dGVySFRNTDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfZC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCh2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2NvbnZlcnRMaXN0Q2VsbDogZnVuY3Rpb24gKGRvbVRyZWUpIHtcclxuICAgICAgICAgICAgbGV0IGh0bWwgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkb21UcmVlLmxlbmd0aCwgbm9kZTsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gZG9tVHJlZVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gbm9kZS5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzTGlzdENlbGwobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSBub2RlLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxsaT4nICsobm9kZS5pbm5lckhUTUwudHJpbSgpIHx8ICc8YnI+JykgKyAnPC9saT4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChub2RlKSAmJiAhdXRpbC5pc1RhYmxlKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5fY29udmVydExpc3RDZWxsKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxsaT4nICsgbm9kZS5vdXRlckhUTUwgKyAnPC9saT4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPGxpPicgKyAobm9kZS50ZXh0Q29udGVudCB8fCAnPGJyPicpICsgJzwvbGk+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2lzRm9ybWF0RGF0YTogZnVuY3Rpb24gKGRvbVRyZWUpIHtcclxuICAgICAgICAgICAgbGV0IHJlcXVpcmVGb3JtYXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkb21UcmVlLmxlbmd0aCwgdDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gZG9tVHJlZVtpXTtcclxuICAgICAgICAgICAgICAgIGlmICh0Lm5vZGVUeXBlID09PSAxICYmICF1dGlsLmlzVGV4dFN0eWxlRWxlbWVudCh0KSAmJiAhdXRpbC5pc0JyZWFrKHQpICYmICF0aGlzLl9fZGlzYWxsb3dlZFRhZ05hbWVSZWdFeHAudGVzdCh0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVGb3JtYXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZUZvcm1hdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgY2xlYW4gSFRNTCBjb2RlIGZvciBlZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaHRtbCBIVE1MIHN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cHxudWxsfSB3aGl0ZWxpc3QgUmVndWxhciBleHByZXNzaW9uIG9mIGFsbG93ZWQgdGFncy5cclxuICAgICAgICAgKiBSZWdFeHAgb2JqZWN0IGlzIGNyZWF0ZSBieSB1dGlsLmNyZWF0ZVRhZ3NXaGl0ZWxpc3QgbWV0aG9kLiAoY29yZS5wYXN0ZVRhZ3NXaGl0ZWxpc3RSZWdFeHApXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfG51bGx9IGJsYWNrbGlzdCBSZWd1bGFyIGV4cHJlc3Npb24gb2YgZGlzYWxsb3dlZCB0YWdzLlxyXG4gICAgICAgICAqIFJlZ0V4cCBvYmplY3QgaXMgY3JlYXRlIGJ5IHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdCBtZXRob2QuIChjb3JlLnBhc3RlVGFnc0JsYWNrbGlzdFJlZ0V4cClcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsZWFuSFRNTDogZnVuY3Rpb24gKGh0bWwsIHdoaXRlbGlzdCwgYmxhY2tsaXN0KSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zdHJpY3RNb2RlKSByZXR1cm4gaHRtbDtcclxuXHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLl9kZWxldGVEaXNhbGxvd2VkVGFncyh0aGlzLl9wYXJzZXIucGFyc2VGcm9tU3RyaW5nKHV0aWwuaHRtbENvbXByZXNzKGh0bWwpLCAndGV4dC9odG1sJykuYm9keS5pbm5lckhUTUwpLnJlcGxhY2UoLyg8W2EtekEtWjAtOVxcLV0rKVtePl0qKD89PikvZywgdGhpcy5fY2xlYW5UYWdzLmJpbmQodGhpcywgdHJ1ZSkpLnJlcGxhY2UoLzxiclxcLz8+JC9pLCAnJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbSA9IF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5fY29uc2lzdGVuY3lDaGVja09mSFRNTChkb20sIHRoaXMuX2h0bWxDaGVja1doaXRlbGlzdFJlZ0V4cCwgdGhpcy5faHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwLCB0aGlzLl9jbGFzc05hbWVGaWx0ZXIpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1VORURJVE9SLmNsZWFuSFRNTC5jb25zaXN0ZW5jeUNoZWNrLmZhaWxdICcgKyBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hbmFnZWRUYWdzSW5mbyAmJiB0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dENvbXBMaXN0ID0gZG9tLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5tYW5hZ2VkVGFnc0luZm8ucXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRleHRDb21wTGlzdC5sZW5ndGgsIGluaXRNZXRob2QsIGNsYXNzTGlzdDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NMaXN0ID0gW10uc2xpY2UuY2FsbCh0ZXh0Q29tcExpc3RbaV0uY2xhc3NMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNsYXNzTGlzdC5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdE1ldGhvZCA9IHRoaXMubWFuYWdlZFRhZ3NJbmZvLm1hcFtjbGFzc0xpc3RbY11dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdE1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdE1ldGhvZCh0ZXh0Q29tcExpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkb21UcmVlID0gZG9tLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgIGxldCBjbGVhbkhUTUwgPSAnJztcclxuICAgICAgICAgICAgY29uc3QgcmVxdWlyZUZvcm1hdCA9IHRoaXMuX2lzRm9ybWF0RGF0YShkb21UcmVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHJlcXVpcmVGb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGRvbVRyZWUgPSB0aGlzLl9lZGl0Rm9ybWF0KGRvbSkuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvbVRyZWUubGVuZ3RoLCB0OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHQgPSBkb21UcmVlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19hbGxvd2VkU2NyaXB0UmVnRXhwLnRlc3QodC5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkhUTUwgKz0gdC5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjbGVhbkhUTUwgKz0gdGhpcy5fbWFrZUxpbmUodCwgcmVxdWlyZUZvcm1hdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsZWFuSFRNTCA9IHV0aWwuaHRtbFJlbW92ZVdoaXRlU3BhY2UoY2xlYW5IVE1MKTtcclxuICAgICAgICAgICAgaWYgKCFjbGVhbkhUTUwpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFuSFRNTCA9IGh0bWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVsaXN0KSBjbGVhbkhUTUwgPSBjbGVhbkhUTUwucmVwbGFjZSh0eXBlb2Ygd2hpdGVsaXN0ID09PSAnc3RyaW5nJyA/IHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdCh3aGl0ZWxpc3QpIDogd2hpdGVsaXN0LCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxhY2tsaXN0KSBjbGVhbkhUTUwgPSBjbGVhbkhUTUwucmVwbGFjZSh0eXBlb2YgYmxhY2tsaXN0ID09PSAnc3RyaW5nJyA/IHV0aWwuY3JlYXRlVGFnc0JsYWNrbGlzdChibGFja2xpc3QpIDogYmxhY2tsaXN0LCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YWdDb252ZXJ0b3IoY2xlYW5IVE1MKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydHMgY29udGVudHMgaW50byBhIGZvcm1hdCB0aGF0IGNhbiBiZSBwbGFjZWQgaW4gYW4gZWRpdG9yXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIGNvbnRlbnRzXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb252ZXJ0Q29udGVudHNGb3JFZGl0b3I6IGZ1bmN0aW9uIChjb250ZW50cykge1xyXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc3RyaWN0TW9kZSkgcmV0dXJuIGNvbnRlbnRzO1xyXG4gICAgICAgICAgICBjb250ZW50cyA9IHRoaXMuX2RlbGV0ZURpc2FsbG93ZWRUYWdzKHRoaXMuX3BhcnNlci5wYXJzZUZyb21TdHJpbmcodXRpbC5odG1sQ29tcHJlc3MoY29udGVudHMpLCAndGV4dC9odG1sJykuYm9keS5pbm5lckhUTUwpLnJlcGxhY2UoLyg8W2EtekEtWjAtOVxcLV0rKVtePl0qKD89PikvZywgdGhpcy5fY2xlYW5UYWdzLmJpbmQodGhpcywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICBjb25zdCBkb20gPSBfZC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChjb250ZW50cyk7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5fY29uc2lzdGVuY3lDaGVja09mSFRNTChkb20sIHRoaXMuX2h0bWxDaGVja1doaXRlbGlzdFJlZ0V4cCwgdGhpcy5faHRtbENoZWNrQmxhY2tsaXN0UmVnRXhwLCB0aGlzLl9jbGFzc05hbWVGaWx0ZXIpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1VORURJVE9SLmNvbnZlcnRDb250ZW50c0ZvckVkaXRvci5jb25zaXN0ZW5jeUNoZWNrLmZhaWxdICcgKyBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hbmFnZWRUYWdzSW5mbyAmJiB0aGlzLm1hbmFnZWRUYWdzSW5mby5xdWVyeSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dENvbXBMaXN0ID0gZG9tLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5tYW5hZ2VkVGFnc0luZm8ucXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRleHRDb21wTGlzdC5sZW5ndGgsIGluaXRNZXRob2QsIGNsYXNzTGlzdDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NMaXN0ID0gW10uc2xpY2UuY2FsbCh0ZXh0Q29tcExpc3RbaV0uY2xhc3NMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgY0xlbiA9IGNsYXNzTGlzdC5sZW5ndGg7IGMgPCBjTGVuOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdE1ldGhvZCA9IHRoaXMubWFuYWdlZFRhZ3NJbmZvLm1hcFtjbGFzc0xpc3RbY11dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdE1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdE1ldGhvZCh0ZXh0Q29tcExpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRvbVRyZWUgPSBkb20uY2hpbGROb2RlcztcclxuICAgICAgICAgICAgbGV0IGNsZWFuSFRNTCA9ICcnLCBwID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHQ7IGkgPCBkb21UcmVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gZG9tVHJlZVtpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2FsbG93ZWRTY3JpcHRSZWdFeHAudGVzdCh0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuSFRNTCArPSB0Lm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KHQpICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KHQpICYmICF1dGlsLmlzQ29tcG9uZW50KHQpICYmICF1dGlsLmlzRmlndXJlcyh0KSAmJiB0Lm5vZGVUeXBlICE9PSA4ICYmICEvX19zZV9fdGFnLy50ZXN0KHQuY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcCkgcCA9IHV0aWwuY3JlYXRlRWxlbWVudChvcHRpb25zLmRlZmF1bHRUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UcmVlW2kgKyAxXSAmJiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoZG9tVHJlZVtpICsgMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbkhUTUwgKz0gdGhpcy5fbWFrZUxpbmUocCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjbGVhbkhUTUwgKz0gdGhpcy5fbWFrZUxpbmUodCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHApIGNsZWFuSFRNTCArPSB0aGlzLl9tYWtlTGluZShwLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjbGVhbkhUTUwubGVuZ3RoID09PSAwKSByZXR1cm4gJzwnICsgb3B0aW9ucy5kZWZhdWx0VGFnICsgJz48YnI+PC8nICsgb3B0aW9ucy5kZWZhdWx0VGFnICsgJz4nO1xyXG5cclxuICAgICAgICAgICAgY2xlYW5IVE1MID0gdXRpbC5odG1sUmVtb3ZlV2hpdGVTcGFjZShjbGVhbkhUTUwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFnQ29udmVydG9yKGNsZWFuSFRNTCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHd5c2l3eWcgYXJlYSBlbGVtZW50IGludG8gYSBmb3JtYXQgdGhhdCBjYW4gYmUgcGxhY2VkIGluIGFuIGVkaXRvciBvZiBjb2RlIHZpZXcgbW9kZVxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGh0bWwgV1lTSVdZRyBlbGVtZW50IChjb250ZXh0LmVsZW1lbnQud3lzaXd5Zykgb3IgSFRNTCBzdHJpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBjb21wIElmIHRydWUsIGRvZXMgbm90IGxpbmUgYnJlYWsgYW5kIGluZGVudGF0aW9uIG9mIHRhZ3MuXHJcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb252ZXJ0SFRNTEZvckNvZGVWaWV3OiBmdW5jdGlvbiAoaHRtbCwgY29tcCkge1xyXG4gICAgICAgICAgICBsZXQgcmV0dXJuSFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBjb25zdCB3UmVnRXhwID0gX3cuUmVnRXhwO1xyXG4gICAgICAgICAgICBjb25zdCBiclJlZyA9IG5ldyB3UmVnRXhwKCdeKEJMT0NLUVVPVEV8UFJFfFRBQkxFfFRIRUFEfFRCT0RZfFRSfFRIfFREfE9MfFVMfElNR3xJRlJBTUV8VklERU98QVVESU98RklHVVJFfEZJR0NBUFRJT058SFJ8QlJ8Q0FOVkFTfFNFTEVDVCkkJywgJ2knKTtcclxuICAgICAgICAgICAgY29uc3Qgd0RvYyA9IHR5cGVvZiBodG1sID09PSAnc3RyaW5nJyA/IF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpIDogaHRtbDtcclxuICAgICAgICAgICAgY29uc3QgaXNGb3JtYXQgPSBmdW5jdGlvbiAoY3VycmVudCkgeyByZXR1cm4gdGhpcy5pc0Zvcm1hdEVsZW1lbnQoY3VycmVudCkgfHwgdGhpcy5pc0NvbXBvbmVudChjdXJyZW50KTsgfS5iaW5kKHV0aWwpO1xyXG4gICAgICAgICAgICBjb25zdCBickNoYXIgPSBjb21wID8gJycgOiAnXFxuJztcclxuXHJcbiAgICAgICAgICAgIGxldCBpbmRlbnRTaXplID0gY29tcCA/IDAgOiB0aGlzLl92YXJpYWJsZS5jb2RlSW5kZW50ICogMTtcclxuICAgICAgICAgICAgaW5kZW50U2l6ZSA9IGluZGVudFNpemUgPiAwID8gbmV3IF93LkFycmF5KGluZGVudFNpemUgKyAxKS5qb2luKCcgJykgOiAnJztcclxuXHJcbiAgICAgICAgICAgIChmdW5jdGlvbiByZWN1cnNpb25GdW5jIChlbGVtZW50LCBpbmRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudFJlZ1Rlc3QgPSBiclJlZy50ZXN0KGVsZW1lbnQubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudEluZGVudCA9IChlbGVtZW50UmVnVGVzdCA/IGluZGVudCA6ICcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoLCBub2RlLCBiciwgbGluZUJSLCBub2RlUmVnVGVzdCwgdGFnLCB0YWdJbmRlbnQ7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBub2RlUmVnVGVzdCA9IGJyUmVnLnRlc3Qobm9kZS5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnIgPSBub2RlUmVnVGVzdCA/IGJyQ2hhciA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVCUiA9IGlzRm9ybWF0KG5vZGUpICYmICFlbGVtZW50UmVnVGVzdCAmJiAhL14oVEh8VEQpJC9pLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgPyBickNoYXIgOiAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuSFRNTCArPSAnXFxuPCEtLSAnICsgbm9kZS50ZXh0Q29udGVudC50cmltKCkgKyAnIC0tPicgKyBicjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0xpc3Qobm9kZS5wYXJlbnRFbGVtZW50KSkgcmV0dXJuSFRNTCArPSB1dGlsLl9IVE1MQ29udmVydG9yKC9eXFxuKyQvLnRlc3Qobm9kZS5kYXRhKSA/ICcnIDogbm9kZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybkhUTUwgKz0gKC9eSFIkL2kudGVzdChub2RlLm5vZGVOYW1lKSA/IGJyQ2hhciA6ICcnKSArICgvXlBSRSQvaS50ZXN0KG5vZGUucGFyZW50RWxlbWVudC5ub2RlTmFtZSkgJiYgL15CUiQvaS50ZXN0KG5vZGUubm9kZU5hbWUpID8gJycgOiBlbGVtZW50SW5kZW50KSArIG5vZGUub3V0ZXJIVE1MICsgYnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlLm91dGVySFRNTCkgeyAvLyBJRVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5IVE1MICs9IG5ldyBfdy5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdJbmRlbnQgPSBlbGVtZW50SW5kZW50IHx8IG5vZGVSZWdUZXN0ID8gaW5kZW50IDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybkhUTUwgKz0gKGxpbmVCUiB8fCAoZWxlbWVudFJlZ1Rlc3QgPyAnJyA6IGJyKSkgKyB0YWdJbmRlbnQgKyBub2RlLm91dGVySFRNTC5tYXRjaCh3UmVnRXhwKCc8JyArIHRhZyArICdbXj5dKj4nLCAnaScpKVswXSArIGJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpb25GdW5jKG5vZGUsIGluZGVudCArIGluZGVudFNpemUsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuSFRNTCArPSAoL1xcbiQvLnRlc3QocmV0dXJuSFRNTCkgPyB0YWdJbmRlbnQgOiAnJykgKyAnPC8nICsgdGFnICsgJz4nICsgKGxpbmVCUiB8fCBiciB8fCBlbGVtZW50UmVnVGVzdCA/IGJyQ2hhciA6ICcnIHx8IC9eKFRIfFREKSQvaS50ZXN0KG5vZGUubm9kZU5hbWUpID8gYnJDaGFyIDogJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSh3RG9jLCAnJykpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVybkhUTUwudHJpbSgpICsgYnJDaGFyO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGQgYW4gZXZlbnQgdG8gZG9jdW1lbnQuXHJcbiAgICAgICAgICogV2hlbiBjcmVhdGVkIGFzIGFuIElmcmFtZSwgdGhlIHNhbWUgZXZlbnQgaXMgYWRkZWQgdG8gdGhlIGRvY3VtZW50IGluIHRoZSBJZnJhbWUuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgRXZlbnQgdHlwZVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEV2ZW50IGxpc3RlbmVyXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSB1c2VDYXB0dXJlIFVzZSBldmVudCBjYXB0dXJlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkRG9jRXZlbnQ6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xyXG4gICAgICAgICAgICBfZC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93ZC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmUgZXZlbnRzIGZyb20gZG9jdW1lbnQuXHJcbiAgICAgICAgICogV2hlbiBjcmVhdGVkIGFzIGFuIElmcmFtZSwgdGhlIGV2ZW50IG9mIHRoZSBkb2N1bWVudCBpbnNpZGUgdGhlIElmcmFtZSBpcyBhbHNvIHJlbW92ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgRXZlbnQgdHlwZVxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEV2ZW50IGxpc3RlbmVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlRG9jRXZlbnQ6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBfZC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93ZC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgY3VycmVudCBudW1iZXIgb2YgY2hhcmFjdGVycyBpcyBjb3VudGVkIGFuZCBkaXNwbGF5ZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0VGV4dCBUZXh0IGFkZGVkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NoYXJDb3VudDogZnVuY3Rpb24gKGlucHV0VGV4dCkge1xyXG4gICAgICAgICAgICBjb25zdCBtYXhDaGFyQ291bnQgPSBvcHRpb25zLm1heENoYXJDb3VudDtcclxuICAgICAgICAgICAgY29uc3QgY291bnRUeXBlID0gb3B0aW9ucy5jaGFyQ291bnRlclR5cGU7XHJcbiAgICAgICAgICAgIGxldCBuZXh0Q2hhckNvdW50ID0gMDtcclxuICAgICAgICAgICAgaWYgKCEhaW5wdXRUZXh0KSBuZXh0Q2hhckNvdW50ID0gdGhpcy5nZXRDaGFyTGVuZ3RoKGlucHV0VGV4dCwgY291bnRUeXBlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NldENoYXJDb3VudCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heENoYXJDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBvdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGZ1bmN0aW9ucy5nZXRDaGFyQ291bnQoY291bnRUeXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPiBtYXhDaGFyQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dENoYXJDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZE9mZiA9IHJhbmdlLmVuZE9mZnNldCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFNlbGVjdGlvbk5vZGUoKS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpY2VQb3NpdGlvbiA9IHJhbmdlLmVuZE9mZnNldCAtIChjb3VudCAtIG1heENoYXJDb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFNlbGVjdGlvbk5vZGUoKS50ZXh0Q29udGVudCA9IHRleHQuc2xpY2UoMCwgc2xpY2VQb3NpdGlvbiA8IDAgPyAwIDogc2xpY2VQb3NpdGlvbikgKyB0ZXh0LnNsaWNlKHJhbmdlLmVuZE9mZnNldCwgdGV4dC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKHJhbmdlLmVuZENvbnRhaW5lciwgZW5kT2ZmLCByYW5nZS5lbmRDb250YWluZXIsIGVuZE9mZik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoY291bnQgKyBuZXh0Q2hhckNvdW50KSA+IG1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvdmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbENvdW50ZXJCbGluaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hhckNvdW50ID4gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2hlbiBcImVsZW1lbnRcIiBpcyBhZGRlZCwgaWYgaXQgaXMgZ3JlYXRlciB0aGFuIFwib3B0aW9ucy5tYXhDaGFyQ291bnRcIiwgZmFsc2UgaXMgcmV0dXJuZWQuXHJcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfFN0cmluZ30gZWxlbWVudCBFbGVtZW50IG5vZGUgb3IgU3RyaW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IGNoYXJDb3VudGVyVHlwZSBjaGFyQ291bnRlclR5cGUuIElmIGl0IGlzIG51bGwsIHRoZSBvcHRpb25zLmNoYXJDb3VudGVyVHlwZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNoZWNrQ2hhckNvdW50OiBmdW5jdGlvbiAoZWxlbWVudCwgY2hhckNvdW50ZXJUeXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY291bnRUeXBlID0gY2hhckNvdW50ZXJUeXBlIHx8IG9wdGlvbnMuY2hhckNvdW50ZXJUeXBlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5nZXRDaGFyTGVuZ3RoKCh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBlbGVtZW50IDogKHRoaXMuX2NoYXJUeXBlSFRNTCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxKSA/IGVsZW1lbnQub3V0ZXJIVE1MIDogZWxlbWVudC50ZXh0Q29udGVudCksIGNvdW50VHlwZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID4gMCAmJiBsZW5ndGggKyBmdW5jdGlvbnMuZ2V0Q2hhckNvdW50KGNvdW50VHlwZSkgPiBvcHRpb25zLm1heENoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxDb3VudGVyQmxpbmsoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgbGVuZ3RoIG9mIHRoZSBjb250ZW50LlxyXG4gICAgICAgICAqIERlcGVuZGluZyBvbiB0aGUgb3B0aW9uLCB0aGUgbGVuZ3RoIG9mIHRoZSBjaGFyYWN0ZXIgaXMgdGFrZW4uIChjaGFyQ291bnRlclR5cGUpXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnQgQ29udGVudCB0byBjb3VudFxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjaGFyQ291bnRlclR5cGUgb3B0aW9ucy5jaGFyQ291bnRlclR5cGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldENoYXJMZW5ndGg6IGZ1bmN0aW9uIChjb250ZW50LCBjaGFyQ291bnRlclR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC9ieXRlLy50ZXN0KGNoYXJDb3VudGVyVHlwZSkgPyB1dGlsLmdldEJ5dGVMZW5ndGgoY29udGVudCkgOiBjb250ZW50Lmxlbmd0aDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVzZXQgYnV0dG9ucyBvZiB0aGUgcmVzcG9uc2l2ZSB0b29sYmFyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc2V0UmVzcG9uc2l2ZVRvb2xiYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2l2ZVNpemUgPSBldmVudC5fcmVzcG9uc2l2ZUJ1dHRvblNpemU7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHcgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKChjb3JlLl9pc0JhbGxvb24gfHwgY29yZS5faXNJbmxpbmUpICYmIG9wdGlvbnMudG9vbGJhcldpZHRoID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgICAgICB3ID0gY29udGV4dC5lbGVtZW50LnRvcEFyZWEub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHcgPSBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2l2ZVdpZHRoID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDEsIGxlbiA9IHJlc3BvbnNpdmVTaXplLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPCByZXNwb25zaXZlU2l6ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlV2lkdGggPSByZXNwb25zaXZlU2l6ZVtpXSArICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Ll9yZXNwb25zaXZlQ3VycmVudFNpemUgIT09IHJlc3BvbnNpdmVXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9yZXNwb25zaXZlQ3VycmVudFNpemUgPSByZXNwb25zaXZlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zLnNldFRvb2xiYXJCdXR0b25zKGV2ZW50Ll9yZXNwb25zaXZlQnV0dG9uc1tyZXNwb25zaXZlV2lkdGhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgdGhlIGNoYXIgY291bnQgdG8gY2hhckNvdW50ZXIgZWxlbWVudCB0ZXh0Q29udGVudC5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRDaGFyQ291bnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZWxlbWVudC5jaGFyQ291bnRlcikge1xyXG4gICAgICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoZnVuY3Rpb25zLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGV4dENvbnRlbnQgJiYgZnVuY3Rpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSBmdW5jdGlvbnMuZ2V0Q2hhckNvdW50KG9wdGlvbnMuY2hhckNvdW50ZXJUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQoY29udGV4dC5lbGVtZW50LmNoYXJDb3VudGVyLCBmdW5jdGlvbnMsIG9wdGlvbnMpLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgY2hhcmFjdGVyIGNvdW50ZXIgYmxpbmtzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2NhbGxDb3VudGVyQmxpbms6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhcldyYXBwZXIgPSBjb250ZXh0LmVsZW1lbnQuY2hhcldyYXBwZXI7XHJcbiAgICAgICAgICAgIGlmIChjaGFyV3JhcHBlciAmJiAhdXRpbC5oYXNDbGFzcyhjaGFyV3JhcHBlciwgJ3NlLWJsaW5rJykpIHtcclxuICAgICAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoY2hhcldyYXBwZXIsICdzZS1ibGluaycpO1xyXG4gICAgICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjaGFyV3JhcHBlciwgJ3NlLWJsaW5rJyk7XHJcbiAgICAgICAgICAgICAgICB9LCA2MDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENoZWNrIHRoZSBjb21wb25lbnRzIHN1Y2ggYXMgaW1hZ2UgYW5kIHZpZGVvIGFuZCBtb2RpZnkgdGhlbSBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdC5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jaGVja0NvbXBvbmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX2ZpbGVJbmZvUGx1Z2luc0NoZWNrLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNDaGVja1tpXSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemUgdGhlIGluZm9ybWF0aW9uIG9mIHRoZSBjb21wb25lbnRzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3Jlc2V0Q29tcG9uZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5fZmlsZUluZm9QbHVnaW5zUmVzZXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbmZvUGx1Z2luc1Jlc2V0W2ldKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IG1ldGhvZCBpbiB0aGUgY29kZSB2aWV3IGFyZWFcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgSFRNTCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRDb2RlVmlldzogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5nZXREb2MoKS5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldCBtZXRob2QgaW4gdGhlIGNvZGUgdmlldyBhcmVhXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0Q29kZVZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuY29kZU1pcnJvckVkaXRvciA/IG9wdGlvbnMuY29kZU1pcnJvckVkaXRvci5nZXREb2MoKS5nZXRWYWx1ZSgpIDogY29udGV4dC5lbGVtZW50LmNvZGUudmFsdWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIHJlbW92ZSBjbGFzcywgZGlzcGxheSB0ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl8bnVsbH0gaWdub3JlZExpc3QgSWdvbnJlZCBidXR0b24gbGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRLZXlFZmZlY3Q6IGZ1bmN0aW9uIChpZ25vcmVkTGlzdCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21tYW5kTWFwID0gdGhpcy5jb21tYW5kTWFwO1xyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVQbHVnaW5zID0gdGhpcy5hY3RpdmVQbHVnaW5zO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGNvbW1hbmRNYXApIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmVkTGlzdC5pbmRleE9mKGtleSkgPiAtMSB8fCAhdXRpbC5oYXNPd24oY29tbWFuZE1hcCwga2V5KSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlUGx1Z2lucy5pbmRleE9mKGtleSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnNba2V5XS5hY3RpdmUuY2FsbCh0aGlzLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWFuZE1hcC5PVVRERU5UICYmIC9eT1VUREVOVCQvaS50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNJbXBvcnRhbnREaXNhYmxlZChjb21tYW5kTWFwLk9VVERFTlQpKSBjb21tYW5kTWFwLk9VVERFTlQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kTWFwLklOREVOVCAmJiAvXklOREVOVCQvaS50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNJbXBvcnRhbnREaXNhYmxlZChjb21tYW5kTWFwLklOREVOVCkpIGNvbW1hbmRNYXAuSU5ERU5ULnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjb21tYW5kTWFwW2tleV0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXogY29yZSB2YXJpYWJsZVxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVsb2FkIElzIHJlbG9vYWQ/XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IF9pbml0SFRNTCBpbml0aWFsIGh0bWwgc3RyaW5nXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaW5pdDogZnVuY3Rpb24gKHJlbG9hZCwgX2luaXRIVE1MKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdSZWdFeHAgPSBfdy5SZWdFeHA7XHJcbiAgICAgICAgICAgIHRoaXMuX3d3ID0gb3B0aW9ucy5pZnJhbWUgPyBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLmNvbnRlbnRXaW5kb3cgOiBfdztcclxuICAgICAgICAgICAgdGhpcy5fd2QgPSBfZDtcclxuICAgICAgICAgICAgdGhpcy5fY2hhclR5cGVIVE1MID0gb3B0aW9ucy5jaGFyQ291bnRlclR5cGUgPT09ICdieXRlLWh0bWwnO1xyXG4gICAgICAgICAgICB0aGlzLnd3Q29tcHV0ZWRTdHlsZSA9IF93LmdldENvbXB1dGVkU3R5bGUoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcpO1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JIZWlnaHQgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5fZWRpdG9ySGVpZ2h0UGFkZGluZyA9IHV0aWwuZ2V0TnVtYmVyKHRoaXMud3dDb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykpICsgdXRpbC5nZXROdW1iZXIodGhpcy53d0NvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzTmFtZUZpbHRlciA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXN0KHYpID8gdiA6ICcnO1xyXG4gICAgICAgICAgICB9LmJpbmQob3B0aW9ucy5hbGxvd2VkQ2xhc3NOYW1lcyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzUHJlZml4ID0gKG9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnID8gJycgOiAnc2NyaXB0fCcpO1xyXG4gICAgICAgICAgICB0aGlzLl9fc2NyaXB0VGFnUmVnRXhwID0gbmV3IHdSZWdFeHAoJzwoc2NyaXB0KVtePl0qPihbXFxcXHNcXFxcU10qPyk8XFxcXC9cXFxcMT58PHNjcmlwdFtePl0qXFxcXC8/PicsICdnaScpO1xyXG4gICAgICAgICAgICB0aGlzLl9fZGlzYWxsb3dlZFRhZ3NSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnPCgnICsgc1ByZWZpeCArICdzdHlsZSlbXj5dKj4oW1xcXFxzXFxcXFNdKj8pPFxcXFwvXFxcXDE+fDwoJyArIHNQcmVmaXggKyAnc3R5bGUpW14+XSpcXFxcLz8+JywgJ2dpJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX19kaXNhbGxvd2VkVGFnTmFtZVJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdeKCcgKyBzUHJlZml4ICsgJ21ldGF8bGlua3xzdHlsZXxbYS16XStcXDpbYS16XSspJCcsICdpJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX19hbGxvd2VkU2NyaXB0UmVnRXhwID0gbmV3IHdSZWdFeHAoJ14nICsgKG9wdGlvbnMuX19hbGxvd2VkU2NyaXB0VGFnID8gJ3NjcmlwdCcgOiAnJykgKyAnJCcsICdpJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaWZyYW1lICYmIHR5cGVvZiBfdy5TaGFkb3dSb290ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnNoYWRvd1Jvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hhZG93Um9vdCA9IGNoaWxkLnNoYWRvd1Jvb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBfdy5TaGFkb3dSb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoYWRvd1Jvb3QgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zaGFkb3dSb290KSB0aGlzLl9zaGFkb3dSb290Q29udHJvbGxlckV2ZW50VGFyZ2V0ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBkaXNhbGxvdyB0ZXh0IG5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGRpc2FsbG93VGV4dFRhZ3MgPSBfdy5PYmplY3Qua2V5cyhvcHRpb25zLl90ZXh0VGFnc01hcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbG93VGV4dFRhZ3MgPSAhb3B0aW9ucy5hZGRUYWdzV2hpdGVsaXN0ID8gW10gOiBvcHRpb25zLmFkZFRhZ3NXaGl0ZWxpc3Quc3BsaXQoJ3wnKS5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIC9ifGl8aW5zfHN8c3RyaWtlL2kudGVzdCh2KTsgfSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsb3dUZXh0VGFncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZGlzYWxsb3dUZXh0VGFncy5zcGxpY2UoZGlzYWxsb3dUZXh0VGFncy5pbmRleE9mKGFsbG93VGV4dFRhZ3NbaV0udG9Mb3dlckNhc2UoKSksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc2FsbG93ZWRUZXh0VGFnc1JlZ0V4cCA9IGRpc2FsbG93VGV4dFRhZ3MubGVuZ3RoID09PSAwID8gbnVsbCA6IG5ldyB3UmVnRXhwKCcoPFxcXFwvPykoJyArIGRpc2FsbG93VGV4dFRhZ3Muam9pbignfCcpICsgJylcXFxcYlxcXFxzKihbXj5ePF0rKT9cXFxccyooPz0+KScsICdnaScpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHdoaXRlbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBnZXRSZWdMaXN0ID0gZnVuY3Rpb24gKHN0ciwgc3RyMikgeyByZXR1cm4gIXN0ciA/ICdeJyA6IChzdHIgPT09ICcqJyA/ICdbYS16LV0rJyA6ICghc3RyMiA/IHN0ciA6IChzdHIgKyAnfCcgKyBzdHIyKSkpOyB9O1xyXG4gICAgICAgICAgICAvLyB0YWdzXHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvQXR0ciA9ICd8Y29udHJvbHN8YXV0b3BsYXl8bG9vcHxtdXRlZHxwb3N0ZXJ8cHJlbG9hZHxwbGF5c2lubGluZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZUF0dHIgPSAnfGFsbG93ZnVsbHNjcmVlbnxzYW5kYm94fGxvYWRpbmd8YWxsb3d8cmVmZXJyZXJwb2xpY3l8ZnJhbWVib3JkZXJ8c2Nyb2xsaW5nJztcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEF0dHIgPSAnY29udGVudGVkaXRhYmxlfGNvbHNwYW58cm93c3Bhbnx0YXJnZXR8aHJlZnxkb3dubG9hZHxyZWx8c3JjfGFsdHxjbGFzc3x0eXBlfG9yaWdpbi1zaXplJyArIHZpZGVvQXR0ciArIGlmcmFtZUF0dHI7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFBdHRyID0gJ2RhdGEtZm9ybWF0fGRhdGEtc2l6ZXxkYXRhLWZpbGUtc2l6ZXxkYXRhLWZpbGUtbmFtZXxkYXRhLW9yaWdpbnxkYXRhLWFsaWdufGRhdGEtaW1hZ2UtbGlua3xkYXRhLXJvdGF0ZXxkYXRhLXByb3BvcnRpb258ZGF0YS1wZXJjZW50YWdlfGRhdGEtZXhwfGRhdGEtZm9udC1zaXplJztcclxuICAgICAgICAgICAgdGhpcy5fYWxsb3dIVE1MQ29tbWVudHMgPSBvcHRpb25zLl9lZGl0b3JUYWdzV2hpdGVsaXN0LmluZGV4T2YoJy8vJykgPiAtMSB8fCBvcHRpb25zLl9lZGl0b3JUYWdzV2hpdGVsaXN0ID09PSAnKic7XHJcbiAgICAgICAgICAgIC8vIGh0bWwgY2hlY2tcclxuICAgICAgICAgICAgdGhpcy5faHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArIGdldFJlZ0xpc3Qob3B0aW9ucy5fZWRpdG9yVGFnc1doaXRlbGlzdC5yZXBsYWNlKCd8Ly8nLCAnJyksICcnKSArICcpJCcsICdpJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2h0bWxDaGVja0JsYWNrbGlzdFJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdeKCcgKyAob3B0aW9ucy50YWdzQmxhY2tsaXN0IHx8ICdeJykgKyAnKSQnLCAnaScpO1xyXG4gICAgICAgICAgICAvLyB0YWdzXHJcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yVGFnc1doaXRlbGlzdFJlZ0V4cCA9IHV0aWwuY3JlYXRlVGFnc1doaXRlbGlzdChnZXRSZWdMaXN0KG9wdGlvbnMuX2VkaXRvclRhZ3NXaGl0ZWxpc3QucmVwbGFjZSgnfC8vJywgJ3w8IS0tfC0tPicpLCAnJykpO1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRvclRhZ3NCbGFja2xpc3RSZWdFeHAgPSB1dGlsLmNyZWF0ZVRhZ3NCbGFja2xpc3Qob3B0aW9ucy50YWdzQmxhY2tsaXN0LnJlcGxhY2UoJ3wvLycsICd8PCEtLXwtLT4nKSk7XHJcbiAgICAgICAgICAgIC8vIHBhc3RlIHRhZ3NcclxuICAgICAgICAgICAgdGhpcy5wYXN0ZVRhZ3NXaGl0ZWxpc3RSZWdFeHAgPSB1dGlsLmNyZWF0ZVRhZ3NXaGl0ZWxpc3QoZ2V0UmVnTGlzdChvcHRpb25zLnBhc3RlVGFnc1doaXRlbGlzdCwgJycpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXN0ZVRhZ3NCbGFja2xpc3RSZWdFeHAgPSB1dGlsLmNyZWF0ZVRhZ3NCbGFja2xpc3Qob3B0aW9ucy5wYXN0ZVRhZ3NCbGFja2xpc3QpO1xyXG4gICAgICAgICAgICAvLyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZ0VuZFN0ciA9ICdcXFxccyo9XFxcXHMqKFxcXCIpW15cXFwiXSpcXFxcMSc7XHJcbiAgICAgICAgICAgIGNvbnN0IF93QXR0ciA9IG9wdGlvbnMuYXR0cmlidXRlc1doaXRlbGlzdDtcclxuICAgICAgICAgICAgbGV0IHRhZ3NBdHRyID0ge307XHJcbiAgICAgICAgICAgIGxldCBhbGxBdHRyID0gJyc7XHJcbiAgICAgICAgICAgIGlmICghIV93QXR0cikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayBpbiBfd0F0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzT3duKF93QXR0ciwgaykgfHwgL15vblthLXpdKyQvaS50ZXN0KF93QXR0cltrXSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSAnYWxsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxBdHRyID0gZ2V0UmVnTGlzdChfd0F0dHJba10sIGRlZmF1bHRBdHRyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdzQXR0cltrXSA9IG5ldyB3UmVnRXhwKCdcXFxccyg/OicgKyBnZXRSZWdMaXN0KF93QXR0cltrXSwgJycpICsgJyknICsgcmVnRW5kU3RyLCAnaWcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZXNXaGl0ZWxpc3RSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXFxcXHMoPzonICsgKGFsbEF0dHIgfHwgZGVmYXVsdEF0dHIgKyAnfCcgKyBkYXRhQXR0cikgKyAnKScgKyByZWdFbmRTdHIsICdpZycpO1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwX2FsbF9kYXRhID0gbmV3IHdSZWdFeHAoJ1xcXFxzKD86JyArICgoYWxsQXR0ciB8fCBkZWZhdWx0QXR0cikgKyAnfGRhdGEtW2EtejAtOVxcXFwtXSsnKSArICcpJyArIHJlZ0VuZFN0ciwgJ2lnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZXNUYWdzV2hpdGVsaXN0ID0gdGFnc0F0dHI7XHJcblxyXG4gICAgICAgICAgICAvLyBibGFja2xpc3RcclxuICAgICAgICAgICAgY29uc3QgX2JBdHRyID0gb3B0aW9ucy5hdHRyaWJ1dGVzQmxhY2tsaXN0O1xyXG4gICAgICAgICAgICB0YWdzQXR0ciA9IHt9O1xyXG4gICAgICAgICAgICBhbGxBdHRyID0gJyc7XHJcbiAgICAgICAgICAgIGlmICghIV9iQXR0cikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayBpbiBfYkF0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzT3duKF9iQXR0ciwgaykpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSAnYWxsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxBdHRyID0gZ2V0UmVnTGlzdChfYkF0dHJba10sICcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdzQXR0cltrXSA9IG5ldyB3UmVnRXhwKCdcXFxccyg/OicgKyBnZXRSZWdMaXN0KF9iQXR0cltrXSwgJycpICsgJyknICsgcmVnRW5kU3RyLCAnaWcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZXNCbGFja2xpc3RSZWdFeHAgPSBuZXcgd1JlZ0V4cCgnXFxcXHMoPzonICsgKGFsbEF0dHIgfHwgJ14nKSArICcpJyArIHJlZ0VuZFN0ciwgJ2lnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZXNUYWdzQmxhY2tsaXN0ID0gdGFnc0F0dHI7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgbW9kZXNcclxuICAgICAgICAgICAgdGhpcy5faXNJbmxpbmUgPSAvaW5saW5lL2kudGVzdChvcHRpb25zLm1vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0JhbGxvb24gPSAvYmFsbG9vbnxiYWxsb29uLWFsd2F5cy9pLnRlc3Qob3B0aW9ucy5tb2RlKTtcclxuICAgICAgICAgICAgdGhpcy5faXNCYWxsb29uQWx3YXlzID0gL2JhbGxvb24tYWx3YXlzL2kudGVzdChvcHRpb25zLm1vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2FjaGluZyBidXR0b25zXHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hpbmdCdXR0b25zKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBmaWxlIGNvbXBvbmVudHNcclxuICAgICAgICAgICAgdGhpcy5fZmlsZUluZm9QbHVnaW5zQ2hlY2sgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fZmlsZUluZm9QbHVnaW5zUmVzZXQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRleHQgY29tcG9uZW50c1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZWRUYWdzSW5mbyA9IHsgcXVlcnk6ICcnLCBtYXA6IHt9IH07XHJcbiAgICAgICAgICAgIGNvbnN0IG1hbmFnZWRDbGFzcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gQ29tbWFuZCBhbmQgZmlsZSBwbHVnaW5zIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVBsdWdpbnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fZmlsZU1hbmFnZXIudGFncyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci5wbHVnaW5NYXAgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmaWxlUGx1Z2luUmVnRXhwID0gW107XHJcbiAgICAgICAgICAgIGxldCBwbHVnaW4sIGJ1dHRvbjtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHBsdWdpbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5oYXNPd24ocGx1Z2lucywga2V5KSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW4gPSBwbHVnaW5zW2tleV07XHJcbiAgICAgICAgICAgICAgICBidXR0b24gPSBwbHVnaW5DYWxsQnV0dG9uc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwbHVnaW4uYWN0aXZlIHx8IHBsdWdpbi5hY3Rpb24pICYmIGJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihrZXksIG51bGwsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbi5jaGVja0ZpbGVJbmZvID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwbHVnaW4ucmVzZXRGaWxlSW5mbyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihrZXksIG51bGwsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsZUluZm9QbHVnaW5zQ2hlY2sucHVzaChwbHVnaW4uY2hlY2tGaWxlSW5mby5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlSW5mb1BsdWdpbnNSZXNldC5wdXNoKHBsdWdpbi5yZXNldEZpbGVJbmZvLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF93LkFycmF5LmlzQXJyYXkocGx1Z2luLmZpbGVUYWdzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVUYWdzID0gcGx1Z2luLmZpbGVUYWdzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFBsdWdpbihrZXksIG51bGwsIGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsZU1hbmFnZXIudGFncyA9IHRoaXMuX2ZpbGVNYW5hZ2VyLnRhZ3MuY29uY2F0KGZpbGVUYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlUGx1Z2luUmVnRXhwLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0YWcgPSAwLCB0TGVuID0gZmlsZVRhZ3MubGVuZ3RoOyB0YWcgPCB0TGVuOyB0YWcrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlTWFuYWdlci5wbHVnaW5NYXBbZmlsZVRhZ3NbdGFnXS50b0xvd2VyQ2FzZSgpXSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLm1hbmFnZWRUYWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IHBsdWdpbi5tYW5hZ2VkVGFncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZWRDbGFzcy5wdXNoKCcuJyArIGluZm8uY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hbmFnZWRUYWdzSW5mby5tYXBbaW5mby5jbGFzc05hbWVdID0gaW5mby5tZXRob2QuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VkVGFnc0luZm8ucXVlcnkgPSBtYW5hZ2VkQ2xhc3MudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgdGhpcy5fZmlsZU1hbmFnZXIucXVlcnlTdHJpbmcgPSB0aGlzLl9maWxlTWFuYWdlci50YWdzLmpvaW4oJywnKTtcclxuICAgICAgICAgICAgdGhpcy5fZmlsZU1hbmFnZXIucmVnRXhwID0gbmV3IHdSZWdFeHAoJ14oJyArICAodGhpcy5fZmlsZU1hbmFnZXIudGFncy5qb2luKCd8JykgfHwgJ14nKSArICcpJCcsICdpJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpblJlZ0V4cCA9IG5ldyB3UmVnRXhwKCdeKCcgKyAgKGZpbGVQbHVnaW5SZWdFeHAubGVuZ3RoID09PSAwID8gJ14nIDogZmlsZVBsdWdpblJlZ0V4cC5qb2luKCd8JykpICsgJykkJywgJ2knKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNhY2hlIGVkaXRvcidzIGVsZW1lbnRcclxuICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuX29yaWdpbkNzc1RleHQgPSBjb250ZXh0LmVsZW1lbnQudG9wQXJlYS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgICAgICB0aGlzLl9wbGFjZWhvbGRlciA9IGNvbnRleHQuZWxlbWVudC5wbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgdGhpcy5fbGluZUJyZWFrZXIgPSBjb250ZXh0LmVsZW1lbnQubGluZUJyZWFrZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVCcmVha2VyQnV0dG9uID0gdGhpcy5fbGluZUJyZWFrZXIucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBFeGN1dGUgaGlzdG9yeSBmdW5jdGlvblxyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkgPSBfaGlzdG9yeSh0aGlzLCB0aGlzLl9vbkNoYW5nZV9oaXN0b3J5U3RhY2suYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICAvLyByZWdpc3RlciBub3RpY2UgbW9kdWxlXHJcbiAgICAgICAgICAgIHRoaXMuYWRkTW9kdWxlKFtfbm90aWNlXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0LCB2YWxpZGF0ZVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dkID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5jb250ZW50RG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZyA9IHRoaXMuX3dkLmJvZHk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5fZWRpdG9yU3R5bGVzLmVkaXRvcikgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc3R5bGUuY3NzVGV4dCA9IG9wdGlvbnMuX2VkaXRvclN0eWxlcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJykgdGhpcy5faWZyYW1lQXV0byA9IHRoaXMuX3dkLmJvZHk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRXeXNpd3lnQXJlYShyZWxvYWQsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhY2hpbmcgYmFzaWMgYnV0dG9ucyB0byB1c2VcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jYWNoaW5nQnV0dG9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvZGVWaWV3RGlzYWJsZWRCdXR0b25zID0gY29udGV4dC5lbGVtZW50Ll9idXR0b25UcmF5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS1tZW51LWxpc3QgYnV0dG9uW2RhdGEtZGlzcGxheV06bm90KFtjbGFzc349XCJzZS1jb2RlLXZpZXctZW5hYmxlZFwiXSk6bm90KFtkYXRhLWRpc3BsYXk9XCJNT1JFXCJdKScpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2l6aW5nRGlzYWJsZWRCdXR0b25zID0gY29udGV4dC5lbGVtZW50Ll9idXR0b25UcmF5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZS1tZW51LWxpc3QgYnV0dG9uW2RhdGEtZGlzcGxheV06bm90KFtjbGFzc349XCJzZS1yZXNpemluZy1lbmFibGVkXCJdKTpub3QoW2RhdGEtZGlzcGxheT1cIk1PUkVcIl0pJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b29sID0gY29udGV4dC50b29sO1xyXG4gICAgICAgICAgICBjb25zdCBjb21tYW5kTWFwID0gdGhpcy5jb21tYW5kTWFwO1xyXG4gICAgICAgICAgICBjb21tYW5kTWFwLklOREVOVCA9IHRvb2wuaW5kZW50O1xyXG4gICAgICAgICAgICBjb21tYW5kTWFwLk9VVERFTlQgPSB0b29sLm91dGRlbnQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy5ib2xkLnRvVXBwZXJDYXNlKCldID0gdG9vbC5ib2xkO1xyXG4gICAgICAgICAgICBjb21tYW5kTWFwW29wdGlvbnMudGV4dFRhZ3MudW5kZXJsaW5lLnRvVXBwZXJDYXNlKCldID0gdG9vbC51bmRlcmxpbmU7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy5pdGFsaWMudG9VcHBlckNhc2UoKV0gPSB0b29sLml0YWxpYztcclxuICAgICAgICAgICAgY29tbWFuZE1hcFtvcHRpb25zLnRleHRUYWdzLnN0cmlrZS50b1VwcGVyQ2FzZSgpXSA9IHRvb2wuc3RyaWtlO1xyXG4gICAgICAgICAgICBjb21tYW5kTWFwW29wdGlvbnMudGV4dFRhZ3Muc3ViLnRvVXBwZXJDYXNlKCldID0gdG9vbC5zdWJzY3JpcHQ7XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYXBbb3B0aW9ucy50ZXh0VGFncy5zdXAudG9VcHBlckNhc2UoKV0gPSB0b29sLnN1cGVyc2NyaXB0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fc3R5bGVDb21tYW5kTWFwID0ge1xyXG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlbjogdG9vbC5mdWxsU2NyZWVuLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Jsb2NrczogdG9vbC5zaG93QmxvY2tzLFxyXG4gICAgICAgICAgICAgICAgY29kZVZpZXc6IHRvb2wuY29kZVZpZXdcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NhdmVCdXR0b25TdGF0ZXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSW5pdGlhbGl6IHd5c2l3eWcgYXJlYSAoT25seSBjYWxsZWQgZnJvbSBjb3JlLl9pbml0KVxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVsb2FkIElzIHJlbG9vYWQ/XHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IF9pbml0SFRNTCBpbml0aWFsIGh0bWwgc3RyaW5nXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfaW5pdFd5c2l3eWdBcmVhOiBmdW5jdGlvbiAocmVsb2FkLCBfaW5pdEhUTUwpIHtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuaW5uZXJIVE1MID0gcmVsb2FkID8gX2luaXRIVE1MIDogdGhpcy5jb252ZXJ0Q29udGVudHNGb3JFZGl0b3IoKHR5cGVvZiBfaW5pdEhUTUwgPT09ICdzdHJpbmcnID8gX2luaXRIVE1MIDogL15URVhUQVJFQSQvaS50ZXN0KGNvbnRleHQuZWxlbWVudC5vcmlnaW5FbGVtZW50Lm5vZGVOYW1lKSA/IGNvbnRleHQuZWxlbWVudC5vcmlnaW5FbGVtZW50LnZhbHVlIDogY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQuaW5uZXJIVE1MKSB8fCAnJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZXJlIGFyZSBjaGFuZ2VzIHRvIHRhZ3MgaW4gdGhlIHd5c2l3eWcgcmVnaW9uLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3Jlc291cmNlc1N0YXRlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lmcmFtZUF1dG9IZWlnaHQoKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiBhZnRlciBleGVjdXRlIFwiaGlzdG9yeS5wdXNoXCJcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9vbkNoYW5nZV9oaXN0b3J5U3RhY2s6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRm9jdXMpIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fdmFyaWFibGUuaXNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQudG9vbC5zYXZlKSBjb250ZXh0LnRvb2wuc2F2ZS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKGZ1bmN0aW9ucy5vbkNoYW5nZSkgZnVuY3Rpb25zLm9uQ2hhbmdlKHRoaXMuZ2V0Q29udGVudHModHJ1ZSksIHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJykgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbigpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBNb2RpZnkgdGhlIGhlaWdodCB2YWx1ZSBvZiB0aGUgaWZyYW1lIHdoZW4gdGhlIGhlaWdodCBvZiB0aGUgaWZyYW1lIGlzIGF1dG9tYXRpYy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9pZnJhbWVBdXRvSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pZnJhbWVBdXRvKSB7XHJcbiAgICAgICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoID0gY29yZS5faWZyYW1lQXV0by5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCkgY29yZS5fX2NhbGxSZXNpemVGdW5jdGlvbihoLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF1dGlsLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuX19jYWxsUmVzaXplRnVuY3Rpb24oY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5vZmZzZXRIZWlnaHQsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX19jYWxsUmVzaXplRnVuY3Rpb246IGZ1bmN0aW9uIChoLCByZXNpemVPYnNlcnZlckVudHJ5KSB7XHJcbiAgICAgICAgICAgIGggPSBoID09PSAtMSA/IChyZXNpemVPYnNlcnZlckVudHJ5LmJvcmRlckJveFNpemUgJiYgcmVzaXplT2JzZXJ2ZXJFbnRyeS5ib3JkZXJCb3hTaXplWzBdID8gcmVzaXplT2JzZXJ2ZXJFbnRyeS5ib3JkZXJCb3hTaXplWzBdLmJsb2NrU2l6ZSA6IChyZXNpemVPYnNlcnZlckVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodCArIHRoaXMuX2VkaXRvckhlaWdodFBhZGRpbmcpKSA6IGg7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lZGl0b3JIZWlnaHQgIT09IGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uUmVzaXplRWRpdG9yID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMub25SZXNpemVFZGl0b3IoaCwgdGhpcy5fZWRpdG9ySGVpZ2h0LCBjb3JlLCByZXNpemVPYnNlcnZlckVudHJ5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRvckhlaWdodCA9IGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2V0IGRpc3BsYXkgcHJvcGVydHkgd2hlbiB0aGVyZSBpcyBwbGFjZWhvbGRlci5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9jaGVja1BsYWNlaG9sZGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wbGFjZWhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhcmlhYmxlLmlzQ29kZVZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwub25seVplcm9XaWR0aFNwYWNlKHd5c2l3eWcudGV4dENvbnRlbnQpIHx8IHd5c2l3eWcucXVlcnlTZWxlY3Rvcih1dGlsLl9hbGxvd2VkRW1wdHlOb2RlTGlzdCkgfHwgKHd5c2l3eWcuaW5uZXJUZXh0Lm1hdGNoKC9cXG4vZykgfHwgJycpLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJZiB0aGVyZSBpcyBubyBkZWZhdWx0IGZvcm1hdCwgYWRkIGEgZm9ybWF0IGFuZCBtb3ZlIFwic2VsZWN0aW9uXCIuXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gZm9ybWF0TmFtZSBGb3JtYXQgdGFnIG5hbWUgKGRlZmF1bHQ6ICdQJylcclxuICAgICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfG51bGx9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfc2V0RGVmYXVsdEZvcm1hdDogZnVuY3Rpb24gKGZvcm1hdE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbGVNYW5hZ2VyLnBsdWdpblJlZ0V4cC50ZXN0KHRoaXMuY3VycmVudENvbnRyb2xsZXJOYW1lKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1vbkNvbiA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydENvbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoY29tbW9uQ29uLCBudWxsKTtcclxuICAgICAgICAgICAgbGV0IGZvY3VzTm9kZSwgb2Zmc2V0LCBmb3JtYXQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGNvbW1vbkNvbiwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50ICYmICF1dGlsLmlzVGFibGUoZmlsZUNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb21tb25Db24ubm9kZVR5cGUgPT09IDEgJiYgY29tbW9uQ29uLmdldEF0dHJpYnV0ZSgnZGF0YS1zZS1lbWJlZCcpID09PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlbCA9IGNvbW1vbkNvbi5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNGb3JtYXRFbGVtZW50KGVsKSkgZWwgPSB0aGlzLmFwcGVuZEZvcm1hdFRhZyhjb21tb25Db24sIG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGVsLmZpcnN0Q2hpbGQsIDAsIGVsLmZpcnN0Q2hpbGQsIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoc3RhcnRDb24pIHx8IHV0aWwuaXNXeXNpd3lnRGl2KHN0YXJ0Q29uKSkgJiYgKHV0aWwuaXNDb21wb25lbnQoc3RhcnRDb24uY2hpbGRyZW5bcmFuZ2Uuc3RhcnRPZmZzZXRdKSB8fCB1dGlsLmlzQ29tcG9uZW50KHN0YXJ0Q29uLmNoaWxkcmVuW3JhbmdlLnN0YXJ0T2Zmc2V0IC0gMV0pKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5nZXRQYXJlbnRFbGVtZW50KGNvbW1vbkNvbiwgdXRpbC5pc05vdENoZWNraW5nTm9kZSkpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlRWwpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHV0aWwuY3JlYXRlRWxlbWVudChmb3JtYXROYW1lIHx8IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXQuaW5uZXJIVE1MID0gcmFuZ2VFbC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSBmb3JtYXQuaW5uZXJIVE1MID0gdXRpbC56ZXJvV2lkdGhTcGFjZTtcclxuXHJcbiAgICAgICAgICAgICAgICByYW5nZUVsLmlubmVySFRNTCA9IGZvcm1hdC5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSByYW5nZUVsLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBmb2N1c05vZGUgPSB1dGlsLmdldEVkZ2VDaGlsZE5vZGVzKGZvcm1hdCwgbnVsbCkuc2M7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFmb2N1c05vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c05vZGUgPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdC5pbnNlcnRCZWZvcmUoZm9jdXNOb2RlLCBmb3JtYXQuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gZm9jdXNOb2RlLnRleHRDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2UoZm9jdXNOb2RlLCBvZmZzZXQsIGZvY3VzTm9kZSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYodXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChjb21tb25Db24pICYmIChjb21tb25Db24uY2hpbGROb2Rlcy5sZW5ndGggPD0gMSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBiciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbW9uQ29uLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmIHV0aWwuaXNCcmVhayhjb21tb25Db24uZmlyc3RDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBiciA9IGNvbW1vbkNvbi5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBiciA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uQ29uLmFwcGVuZENoaWxkKGJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlKGJyLCAxLCBiciwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbW9uQ29uLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGZvcm1hdE5hbWUgfHwgb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb21tb25Db24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZm9ybWF0LCBjb21tb25Db24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdC5hcHBlbmRDaGlsZChjb21tb25Db24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGZvcm1hdC5uZXh0U2libGluZykpIHV0aWwucmVtb3ZlSXRlbShmb3JtYXQubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhmb3JtYXQucHJldmlvdXNTaWJsaW5nKSkgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdC5wcmV2aW91c1NpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhmb2N1c05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c05vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoemVyb1dpZHRoLCBmb2N1c05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHplcm9XaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leGVjQ29tbWFuZCgnZm9ybWF0QmxvY2snLCBmYWxzZSwgKGZvcm1hdE5hbWUgfHwgb3B0aW9ucy5kZWZhdWx0VGFnKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGZvcm1hdC5uZXh0U2libGluZykpIHV0aWwucmVtb3ZlSXRlbShmb3JtYXQubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhmb3JtYXQucHJldmlvdXNTaWJsaW5nKSkgdXRpbC5yZW1vdmVJdGVtKGZvcm1hdC5wcmV2aW91c1NpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNCcmVhayhmb2N1c05vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c05vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoemVyb1dpZHRoLCBmb2N1c05vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZSA9IHplcm9XaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5uYXRpdmVGb2N1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJbml0aWFsaXphdGlvbiBhZnRlciBcInNldE9wdGlvbnNcIlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbCBjb250ZXh0LmVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2luaXRIVE1MIEluaXRpYWwgaHRtbCBzdHJpbmdcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXRPcHRpb25zSW5pdDogZnVuY3Rpb24gKGVsLCBfaW5pdEhUTUwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCA9IF9Db250ZXh0KGVsLm9yaWdpbkVsZW1lbnQsIHRoaXMuX2dldENvbnN0cnVjdGVkKGVsKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNJbmZvUmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9lZGl0b3JJbml0KHRydWUsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluaXRpYWxpeiBlZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbG9hZCBJcyByZWxvb2FkP1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBfaW5pdEhUTUwgaW5pdGlhbCBodG1sIHN0cmluZ1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX2VkaXRvckluaXQ6IGZ1bmN0aW9uIChyZWxvYWQsIF9pbml0SFRNTCkge1xyXG4gICAgICAgICAgICAvLyBpbml0aWFsaXplIGNvcmUgYW5kIGFkZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgdGhpcy5faW5pdChyZWxvYWQsIF9pbml0SFRNTCk7XHJcbiAgICAgICAgICAgIGV2ZW50Ll9hZGRFdmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRDaGFyQ291bnQoKTtcclxuICAgICAgICAgICAgZXZlbnQuX29mZlN0aWNreVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgZXZlbnQub25SZXNpemVfd2luZG93KCk7XHJcblxyXG4gICAgICAgICAgICAvLyB0b29sYmFyIHZpc2liaWxpdHlcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgICAgICAvLyB3aXN5d2lnIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IG9wdGlvbnMuZnJhbWVBdHRyYnV0ZXM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gYXR0cikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc2V0QXR0cmlidXRlKGssIGF0dHJba10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0NvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50c0luZm9Jbml0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNJbmZvUmVzZXQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5yZXNldCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIG9ic2VydmVyXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX3Jlc2l6ZU9ic2VydmVyKSBldmVudC5fcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5fdG9vbGJhck9ic2VydmVyKSBldmVudC5fdG9vbGJhck9ic2VydmVyLm9ic2VydmUoY29udGV4dC5lbGVtZW50Ll90b29sYmFyU2hhZG93KTtcclxuICAgICAgICAgICAgICAgIC8vIHJlc291cmNlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICBjb3JlLl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25sb2FkID09PSAnZnVuY3Rpb24nKSBmdW5jdGlvbnMub25sb2FkKGNvcmUsIHJlbG9hZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgYW5kIHJldHVybiBhbiBvYmplY3QgdG8gY2FjaGUgdGhlIG5ldyBjb250ZXh0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dEVsIGNvbnRleHQuZWxlbWVudFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfZ2V0Q29uc3RydWN0ZWQ6IGZ1bmN0aW9uIChjb250ZXh0RWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIF90b3A6IGNvbnRleHRFbC50b3BBcmVhLFxyXG4gICAgICAgICAgICAgICAgX3JlbGF0aXZlOiBjb250ZXh0RWwucmVsYXRpdmUsXHJcbiAgICAgICAgICAgICAgICBfdG9vbEJhcjogY29udGV4dEVsLnRvb2xiYXIsXHJcbiAgICAgICAgICAgICAgICBfdG9vbGJhclNoYWRvdzogY29udGV4dEVsLl90b29sYmFyU2hhZG93LFxyXG4gICAgICAgICAgICAgICAgX21lbnVUcmF5OiBjb250ZXh0RWwuX21lbnVUcmF5LFxyXG4gICAgICAgICAgICAgICAgX2VkaXRvckFyZWE6IGNvbnRleHRFbC5lZGl0b3JBcmVhLFxyXG4gICAgICAgICAgICAgICAgX3d5c2l3eWdBcmVhOiBjb250ZXh0RWwud3lzaXd5Z0ZyYW1lLFxyXG4gICAgICAgICAgICAgICAgX2NvZGVBcmVhOiBjb250ZXh0RWwuY29kZSxcclxuICAgICAgICAgICAgICAgIF9wbGFjZWhvbGRlcjogY29udGV4dEVsLnBsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICAgICAgX3Jlc2l6aW5nQmFyOiBjb250ZXh0RWwucmVzaXppbmdCYXIsXHJcbiAgICAgICAgICAgICAgICBfbmF2aWdhdGlvbjogY29udGV4dEVsLm5hdmlnYXRpb24sXHJcbiAgICAgICAgICAgICAgICBfY2hhckNvdW50ZXI6IGNvbnRleHRFbC5jaGFyQ291bnRlcixcclxuICAgICAgICAgICAgICAgIF9jaGFyV3JhcHBlcjogY29udGV4dEVsLmNoYXJXcmFwcGVyLFxyXG4gICAgICAgICAgICAgICAgX2xvYWRpbmc6IGNvbnRleHRFbC5sb2FkaW5nLFxyXG4gICAgICAgICAgICAgICAgX2xpbmVCcmVha2VyOiBjb250ZXh0RWwubGluZUJyZWFrZXIsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXJfdDogY29udGV4dEVsLmxpbmVCcmVha2VyX3QsXHJcbiAgICAgICAgICAgICAgICBfbGluZUJyZWFrZXJfYjogY29udGV4dEVsLmxpbmVCcmVha2VyX2IsXHJcbiAgICAgICAgICAgICAgICBfcmVzaXplQmFjazogY29udGV4dEVsLnJlc2l6ZUJhY2tncm91bmQsXHJcbiAgICAgICAgICAgICAgICBfc3RpY2t5RHVtbXk6IGNvbnRleHRFbC5fc3RpY2t5RHVtbXksXHJcbiAgICAgICAgICAgICAgICBfYXJyb3c6IGNvbnRleHRFbC5fYXJyb3dcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIGV2ZW50IGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICAgIF9JRWlzQ29tcG9zaW5nOiBmYWxzZSwgLy8gSW4gSUUsIHRoZXJlIGlzIG5vIFwiZS5pc0NvbXBvc2luZ1wiIGluIHRoZSBrZXktdXAgZXZlbnQuXHJcbiAgICAgICAgX2xpbmVCcmVha2VyQmluZDogbnVsbCxcclxuICAgICAgICBfcmVzcG9uc2l2ZUN1cnJlbnRTaXplOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgX3Jlc3BvbnNpdmVCdXR0b25TaXplOiBudWxsLFxyXG4gICAgICAgIF9yZXNwb25zaXZlQnV0dG9uczogbnVsbCxcclxuICAgICAgICBfY3Vyc29yTW92ZUtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oOHwzWzItOV18NDB8NDYpJCcpLFxyXG4gICAgICAgIF9kaXJlY3Rpb25LZXlDb2RlOiBuZXcgX3cuUmVnRXhwKCdeKDh8MTN8M1syLTldfDQwfDQ2KSQnKSxcclxuICAgICAgICBfbm9uVGV4dEtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oOHwxM3wxWzYtOV18MjB8Mjd8M1szLTldfDQwfDQ1fDQ2fDExWzItOV18MTJbMC0zXXwxNDR8MTQ1KSQnKSxcclxuICAgICAgICBfaGlzdG9yeUlnbm9yZUtleUNvZGU6IG5ldyBfdy5SZWdFeHAoJ14oMVs2LTldfDIwfDI3fDNbMy05XXw0MHw0NXwxMVsyLTldfDEyWzAtM118MTQ0fDE0NSkkJyksXHJcbiAgICAgICAgX29uQnV0dG9uc0NoZWNrOiBuZXcgX3cuUmVnRXhwKCdeKCcgKyBfdy5PYmplY3Qua2V5cyhvcHRpb25zLl90ZXh0VGFnc01hcCkuam9pbignfCcpICsgJykkJywgJ2knKSxcclxuICAgICAgICBfZnJvbnRaZXJvV2lkdGhSZWc6IG5ldyBfdy5SZWdFeHAodXRpbC56ZXJvV2lkdGhTcGFjZSArICcrJywgJycpLFxyXG4gICAgICAgIF9rZXlDb2RlU2hvcnRjdXQ6IHtcclxuICAgICAgICAgICAgNjU6ICdBJyxcclxuICAgICAgICAgICAgNjY6ICdCJyxcclxuICAgICAgICAgICAgODM6ICdTJyxcclxuICAgICAgICAgICAgODU6ICdVJyxcclxuICAgICAgICAgICAgNzM6ICdJJyxcclxuICAgICAgICAgICAgODk6ICdZJyxcclxuICAgICAgICAgICAgOTA6ICdaJyxcclxuICAgICAgICAgICAgMjE5OiAnWycsXHJcbiAgICAgICAgICAgIDIyMTogJ10nXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3Nob3J0Y3V0Q29tbWFuZDogZnVuY3Rpb24gKGtleUNvZGUsIHNoaWZ0KSB7XHJcbiAgICAgICAgICAgIGxldCBjb21tYW5kID0gbnVsbDtcclxuICAgICAgICAgICAgY29uc3Qga2V5U3RyID0gZXZlbnQuX2tleUNvZGVTaG9ydGN1dFtrZXlDb2RlXTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5U3RyKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBJzpcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3NlbGVjdEFsbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdCJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ2JvbGQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdib2xkJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdTJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQgJiYgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3N0cmlrZScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3N0cmlrZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc2hpZnQgJiYgb3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3NhdmUnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdzYXZlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG9ydGN1dHNEaXNhYmxlLmluZGV4T2YoJ3VuZGVybGluZScpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3VuZGVybGluZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpdGFsaWMnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9ICdpdGFsaWMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3J0Y3V0c0Rpc2FibGUuaW5kZXhPZigndW5kbycpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAncmVkbyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gJ3VuZG8nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCd1bmRvJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQgPSAncmVkbyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IG9wdGlvbnMucnRsID8gJ2luZGVudCcgOiAnb3V0ZGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvcnRjdXRzRGlzYWJsZS5pbmRleE9mKCdpbmRlbnQnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IG9wdGlvbnMucnRsID8gJ291dGRlbnQnIDogJ2luZGVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybiAhIWtleVN0cjtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuY29tbWFuZEhhbmRsZXIoY29yZS5jb21tYW5kTWFwW2NvbW1hbmRdLCBjb21tYW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2FwcGx5VGFnRWZmZWN0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5oYXNDbGFzcyhjb250ZXh0LmVsZW1lbnQud3lzaXd5ZywgJ3NlLXJlYWQtb25seScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25Ob2RlID09PSBjb3JlLmVmZmVjdE5vZGUpIHJldHVybjtcclxuICAgICAgICAgICAgY29yZS5lZmZlY3ROb2RlID0gc2VsZWN0aW9uTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hcmdpbkRpciA9IG9wdGlvbnMucnRsID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcclxuICAgICAgICAgICAgY29uc3QgY29tbWFuZE1hcCA9IGNvcmUuY29tbWFuZE1hcDtcclxuICAgICAgICAgICAgY29uc3QgY2xhc3NPbkNoZWNrID0gZXZlbnQuX29uQnV0dG9uc0NoZWNrO1xyXG4gICAgICAgICAgICBjb25zdCBjb21tYW5kTWFwTm9kZXMgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGVzID0gW107XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVQbHVnaW5zID0gY29yZS5hY3RpdmVQbHVnaW5zO1xyXG4gICAgICAgICAgICBjb25zdCBjTGVuID0gYWN0aXZlUGx1Z2lucy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxldCBub2RlTmFtZSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHNlbGVjdGlvbk5vZGUuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZSA9IHNlbGVjdGlvbk5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlbWVudCA9IHNlbGVjdGlvbk5vZGU7ICF1dGlsLmlzV3lzaXd5Z0RpdihlbGVtZW50KTsgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50KSBicmVhaztcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxIHx8IHV0aWwuaXNCcmVhayhlbGVtZW50KSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2Rlcy5wdXNoKG5vZGVOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiBBY3RpdmUgcGx1Z2lucyAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3JlLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMCwgbmFtZTsgYyA8IGNMZW47IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gYWN0aXZlUGx1Z2luc1tjXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hbmRNYXBOb2Rlcy5pbmRleE9mKG5hbWUpID09PSAtMSAmJiBwbHVnaW5zW25hbWVdLmFjdGl2ZS5jYWxsKGNvcmUsIGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwTm9kZXMucHVzaChuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvKiBPdXRkZW50ICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hbmRNYXBOb2Rlcy5pbmRleE9mKCdPVVRERU5UJykgPT09IC0xICYmIGNvbW1hbmRNYXAuT1VUREVOVCAmJiAhdXRpbC5pc0ltcG9ydGFudERpc2FibGVkKGNvbW1hbmRNYXAuT1VUREVOVCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChlbGVtZW50KSB8fCAoZWxlbWVudC5zdHlsZVttYXJnaW5EaXJdICYmIHV0aWwuZ2V0TnVtYmVyKGVsZW1lbnQuc3R5bGVbbWFyZ2luRGlyXSwgMCkgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE1hcE5vZGVzLnB1c2goJ09VVERFTlQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRNYXAuT1VUREVOVC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qIEluZGVudCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kTWFwTm9kZXMuaW5kZXhPZignSU5ERU5UJykgPT09IC0xICYmIGNvbW1hbmRNYXAuSU5ERU5UICYmICF1dGlsLmlzSW1wb3J0YW50RGlzYWJsZWQoY29tbWFuZE1hcC5JTkRFTlQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRNYXBOb2Rlcy5wdXNoKCdJTkRFTlQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChlbGVtZW50KSAmJiAhZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwLklOREVOVC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTWFwLklOREVOVC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKiBkZWZhdWx0IGFjdGl2ZSBidXR0b25zIFtzdHJvbmcsIGlucywgZW0sIGRlbCwgc3ViLCBzdXBdICovXHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NPbkNoZWNrICYmIGNsYXNzT25DaGVjay50ZXN0KG5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRNYXBOb2Rlcy5wdXNoKG5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbW1hbmRNYXBbbm9kZU5hbWVdLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX3NldEtleUVmZmVjdChjb21tYW5kTWFwTm9kZXMpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHNhdmUgY3VycmVudCBub2RlcyAqL1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXMgPSBjdXJyZW50Tm9kZXMucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXNNYXAgPSBjb21tYW5kTWFwTm9kZXM7XHJcblxyXG4gICAgICAgICAgICAvKiogIERpc3BsYXlzIHRoZSBjdXJyZW50IG5vZGUgc3RydWN0dXJlIHRvIHJlc2l6aW5nQmFyICovXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dQYXRoTGFiZWwpIGNvbnRleHQuZWxlbWVudC5uYXZpZ2F0aW9uLnRleHRDb250ZW50ID0gY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzLmpvaW4oJyA+ICcpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9idXR0b25zRXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9iaW5kQ29udHJvbGxlcnNPZmYpIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoL14oaW5wdXR8dGV4dGFyZWF8c2VsZWN0fG9wdGlvbikkL2kudGVzdCh0YXJnZXQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9hbnRpQmx1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodXRpbC5nZXRQYXJlbnRFbGVtZW50KHRhcmdldCwgJy5zZS1zdWJtZW51JykpIHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9ub3RIaWRlVG9vbGJhciA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKCFjb21tYW5kICYmICEvc2UtbWVudS1saXN0Ly50ZXN0KGNsYXNzTmFtZSkgJiYgIS9zdW4tZWRpdG9yLWNvbW1vbi8udGVzdChjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHRhcmdldC5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09IGNvcmUuX3N1Ym1lbnVOYW1lIHx8IGNvbW1hbmQgPT09IGNvcmUuX2NvbnRhaW5lck5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWRkR2xvYmFsRXZlbnQodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl93dy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb3JlLl93LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcclxuICAgICAgICAgICAgICAgIHVzZUNhcHR1cmU6IHVzZUNhcHR1cmVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgXHJcbiAgICAgICAgcmVtb3ZlR2xvYmFsRXZlbnQodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcclxuICAgICAgICAgICAgaWYgKCF0eXBlKSByZXR1cm47XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIgPSB0eXBlLmxpc3RlbmVyO1xyXG4gICAgICAgICAgICAgICAgdXNlQ2FwdHVyZSA9IHR5cGUudXNlQ2FwdHVyZTtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlLnR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl93dy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb3JlLl93LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQ2xpY2tfdG9vbGJhcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGlzcGxheScpO1xyXG4gICAgICAgICAgICBsZXQgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICBsZXQgY2xhc3NOYW1lID0gdGFyZ2V0LmNsYXNzTmFtZTtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHRhcmdldC5wYXJlbnROb2RlICYmICFjb21tYW5kICYmICEvc2UtbWVudS1saXN0Ly50ZXN0KGNsYXNzTmFtZSkgJiYgIS9zZS10b29sYmFyLy50ZXN0KGNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29tbWFuZCcpO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGlzcGxheScpO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gdGFyZ2V0LmNsYXNzTmFtZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjb21tYW5kICYmICFkaXNwbGF5KSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQuZGlzYWJsZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuYWN0aW9uQ2FsbChjb21tYW5kLCBkaXNwbGF5LCB0YXJnZXQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9fc2VsZWN0aW9uU3luY0V2ZW50OiBudWxsLFxyXG4gICAgICAgIG9uTW91c2VEb3duX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzUmVhZE9ubHkgfHwgdXRpbC5pc05vbkVkaXRhYmxlKGNvbnRleHQuZWxlbWVudC53eXNpd3lnKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5faXNFeGNsdWRlU2VsZWN0aW9uRWxlbWVudChlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnQucmVtb3ZlR2xvYmFsRXZlbnQoZXZlbnQuX19zZWxlY3Rpb25TeW5jRXZlbnQpO1xyXG4gICAgICAgICAgICBldmVudC5fX3NlbGVjdGlvblN5bmNFdmVudCA9IGV2ZW50LmFkZEdsb2JhbEV2ZW50KCdtb3VzZXVwJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucmVtb3ZlR2xvYmFsRXZlbnQoZXZlbnQuX19zZWxlY3Rpb25TeW5jRXZlbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25Nb3VzZURvd24gPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb25zLm9uTW91c2VEb3duKGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFibGVDZWxsID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGUudGFyZ2V0LCB1dGlsLmlzQ2VsbCk7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZUNlbGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlUGx1Z2luID0gY29yZS5wbHVnaW5zLnRhYmxlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlUGx1Z2luICYmIHRhYmxlQ2VsbCAhPT0gdGFibGVQbHVnaW4uX2ZpeGVkQ2VsbCAmJiAhdGFibGVQbHVnaW4uX3NoaWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jYWxsUGx1Z2luKCd0YWJsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVQbHVnaW4ub25UYWJsZUNlbGxNdWx0aVNlbGVjdC5jYWxsKGNvcmUsIHRhYmxlQ2VsbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQ2xpY2tfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgLy8gaWYgKHV0aWwuaGFzQ2xhc3MoY29udGV4dC5lbGVtZW50Lnd5c2l3eWcsICdzZS1yZWFkLW9ubHknKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZS50YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0FuY2hvcih0YXJnZXRFbGVtZW50KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3cub3Blbih0YXJnZXRFbGVtZW50LmhyZWYsIHRhcmdldEVsZW1lbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNOb25FZGl0YWJsZShjb250ZXh0LmVsZW1lbnQud3lzaXd5ZykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25DbGljayA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25DbGljayhlLCBjb3JlKSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KHRhcmdldEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuc2VsZWN0Q29tcG9uZW50KGZpbGVDb21wb25lbnRJbmZvLnRhcmdldCwgZmlsZUNvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpZ2NhcHRpb24gPSB1dGlsLmdldFBhcmVudEVsZW1lbnQodGFyZ2V0RWxlbWVudCwgJ0ZJR0NBUFRJT04nKTtcclxuICAgICAgICAgICAgaWYgKGZpZ2NhcHRpb24gJiYgdXRpbC5pc05vbkVkaXRhYmxlKGZpZ2NhcHRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBmaWdjYXB0aW9uLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuX2lzSW5saW5lICYmICFjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci5pc1Nob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJJbmxpbmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlkZVRvb2xiYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWdjYXB0aW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoaWRlVG9vbGJhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZmlnY2FwdGlvbi5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGlkZVRvb2xiYXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGUuZGV0YWlsID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyKSAmJiByYW5nZS5lbmRPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGNvcmUuc2V0UmFuZ2UocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRDb250YWluZXIubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLl9yYW5nZUluZm8ocmFuZ2UsIGNvcmUuZ2V0U2VsZWN0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpO1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgbnVsbCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkID0gc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgd2hpbGUgKHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkKSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQuZmlyc3RDaGlsZDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRDb21wb25lbnRJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGlmICghcmFuZ2VFbCAmJiByYW5nZS5zdGFydENvbnRhaW5lciA9PT0gcmFuZ2UuZW5kQ29udGFpbmVyKSBjb3JlLnNlbGVjdENvbXBvbmVudChzZWxlY3RlZENvbXBvbmVudEluZm8udGFyZ2V0LCBzZWxlY3RlZENvbXBvbmVudEluZm8ucGx1Z2luTmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZS5jdXJyZW50RmlsZUNvbXBvbmVudEluZm8pIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZm9ybWF0RWwgJiYgIXV0aWwuaXNOb25FZGl0YWJsZSh0YXJnZXRFbGVtZW50KSAmJiAhdXRpbC5pc0xpc3QocmFuZ2VFbCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lcikgPT09IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KHJhbmdlRWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb0xpID0gdXRpbC5jcmVhdGVFbGVtZW50KCdMSScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2TGkgPSBzZWxlY3Rpb25Ob2RlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgb0xpLmFwcGVuZENoaWxkKHNlbGVjdGlvbk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLmluc2VydEJlZm9yZShvTGksIHByZXZMaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF1dGlsLmlzV3lzaXd5Z0RpdihzZWxlY3Rpb25Ob2RlKSAmJiAhdXRpbC5pc0NvbXBvbmVudChzZWxlY3Rpb25Ob2RlKSAmJiAoIXV0aWwuaXNUYWJsZShzZWxlY3Rpb25Ob2RlKSB8fCB1dGlsLmlzQ2VsbChzZWxlY3Rpb25Ob2RlKSkgJiYgY29yZS5fc2V0RGVmYXVsdEZvcm1hdCh1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlRWwpID8gJ0RJVicgOiBvcHRpb25zLmRlZmF1bHRUYWcpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fYXBwbHlUYWdFZmZlY3RzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb24pIF93LnNldFRpbWVvdXQoZXZlbnQuX3RvZ2dsZVRvb2xiYXJCYWxsb29uKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfYmFsbG9vbkRlbGF5OiBudWxsLFxyXG4gICAgICAgIF9zaG93VG9vbGJhckJhbGxvb25EZWxheTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuX2JhbGxvb25EZWxheSkge1xyXG4gICAgICAgICAgICAgICAgX3cuY2xlYXJUaW1lb3V0KGV2ZW50Ll9iYWxsb29uRGVsYXkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudC5fYmFsbG9vbkRlbGF5ID0gX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdy5jbGVhclRpbWVvdXQodGhpcy5fYmFsbG9vbkRlbGF5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb25EZWxheSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG93VG9vbGJhckJhbGxvb24oKTtcclxuICAgICAgICAgICAgfS5iaW5kKGV2ZW50KSwgMzUwKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfdG9nZ2xlVG9vbGJhckJhbGxvb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29yZS5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9iaW5kQ29udHJvbGxlcnNPZmYgfHwgKCFjb3JlLl9pc0JhbGxvb25BbHdheXMgJiYgcmFuZ2UuY29sbGFwc2VkKSkgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgIGVsc2UgZXZlbnQuX3Nob3dUb29sYmFyQmFsbG9vbihyYW5nZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3Nob3dUb29sYmFyQmFsbG9vbjogZnVuY3Rpb24gKHJhbmdlT2JqKSB7XHJcbiAgICAgICAgICAgIGlmICghY29yZS5faXNCYWxsb29uKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHJhbmdlT2JqIHx8IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyO1xyXG4gICAgICAgICAgICBjb25zdCB0b3BBcmVhID0gY29udGV4dC5lbGVtZW50LnRvcEFyZWE7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGNvcmUuZ2V0U2VsZWN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgaXNEaXJUb3A7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb25BbHdheXMgJiYgcmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpc0RpclRvcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmZvY3VzTm9kZSA9PT0gc2VsZWN0aW9uLmFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlzRGlyVG9wID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0IDwgc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB1dGlsLmdldExpc3RDaGlsZE5vZGVzKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGlzRGlyVG9wID0gdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIHNlbGVjdGlvbi5mb2N1c05vZGUpIDwgdXRpbC5nZXRBcnJheUluZGV4KGNoaWxkTm9kZXMsIHNlbGVjdGlvbi5hbmNob3JOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHJlY3RzID0gcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKTtcclxuICAgICAgICAgICAgcmVjdHMgPSByZWN0c1tpc0RpclRvcCA/IDAgOiByZWN0cy5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGdsb2JhbFNjcm9sbCA9IGNvcmUuZ2V0R2xvYmFsU2Nyb2xsT2Zmc2V0KCk7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxMZWZ0ID0gZ2xvYmFsU2Nyb2xsLmxlZnQ7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxUb3AgPSBnbG9iYWxTY3JvbGwudG9wO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZWRpdG9yV2lkdGggPSB0b3BBcmVhLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRzID0gZXZlbnQuX2dldEVkaXRvck9mZnNldHMobnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0aWNreVRvcCA9IG9mZnNldHMudG9wO1xyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3JMZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xyXG5cclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS50b3AgPSAnLTEwMDAwcHgnO1xyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIGlmICghcmVjdHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBjb3JlLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHplcm9XaWR0aCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5pbnNlcnROb2RlKHplcm9XaWR0aCwgbnVsbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoemVyb1dpZHRoLCAxLCB6ZXJvV2lkdGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuX2VkaXRvclJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdHMgPSBjb3JlLmdldFJhbmdlKCkuZ2V0Q2xpZW50UmVjdHMoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWN0cyA9IHJlY3RzW2lzRGlyVG9wID8gMCA6IHJlY3RzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghcmVjdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlT2Zmc2V0ID0gdXRpbC5nZXRPZmZzZXQobm9kZSwgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IG5vZGVPZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBub2RlT2Zmc2V0LnRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IG5vZGVPZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBub2RlT2Zmc2V0LnRvcCArIG5vZGUub2Zmc2V0SGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub1RleHQ6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbExlZnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhcnJvd01hcmdpbiA9IF93Lk1hdGgucm91bmQoY29udGV4dC5lbGVtZW50Ll9hcnJvdy5vZmZzZXRXaWR0aCAvIDIpO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyV2lkdGggPSB0b29sYmFyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFySGVpZ2h0ID0gdG9vbGJhci5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZVJlY3RzID0gL2lmcmFtZS9pLnRlc3QoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5ub2RlTmFtZSkgPyBjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLmdldENsaWVudFJlY3RzKClbMF0gOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoaWZyYW1lUmVjdHMpIHtcclxuICAgICAgICAgICAgICAgIHJlY3RzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3RzLmxlZnQgKyBpZnJhbWVSZWN0cy5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogcmVjdHMudG9wICsgaWZyYW1lUmVjdHMudG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiByZWN0cy5yaWdodCArIGlmcmFtZVJlY3RzLnJpZ2h0IC0gaWZyYW1lUmVjdHMud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiByZWN0cy5ib3R0b20gKyBpZnJhbWVSZWN0cy5ib3R0b20gLSBpZnJhbWVSZWN0cy5oZWlnaHRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50Ll9zZXRUb29sYmFyT2Zmc2V0KGlzRGlyVG9wLCByZWN0cywgdG9vbGJhciwgZWRpdG9yTGVmdCwgZWRpdG9yV2lkdGgsIHNjcm9sbExlZnQsIHNjcm9sbFRvcCwgc3RpY2t5VG9wLCBhcnJvd01hcmdpbik7XHJcbiAgICAgICAgICAgIGlmICh0b29sYmFyV2lkdGggIT09IHRvb2xiYXIub2Zmc2V0V2lkdGggfHwgdG9vbGJhckhlaWdodCAhPT0gdG9vbGJhci5vZmZzZXRIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9zZXRUb29sYmFyT2Zmc2V0KGlzRGlyVG9wLCByZWN0cywgdG9vbGJhciwgZWRpdG9yTGVmdCwgZWRpdG9yV2lkdGgsIHNjcm9sbExlZnQsIHNjcm9sbFRvcCwgc3RpY2t5VG9wLCBhcnJvd01hcmdpbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRvclBhcmVudCA9IHRvcEFyZWEucGFyZW50RWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gb3B0aW9ucy50b29sYmFyQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSBjb250YWluZXIub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgICAgIGxldCB0b3AgPSBjb250YWluZXIub2Zmc2V0VG9wO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlKCFjb250YWluZXIucGFyZW50RWxlbWVudC5jb250YWlucyhlZGl0b3JQYXJlbnQpIHx8ICEvXihCT0RZfEhUTUwpJC9pLnRlc3QoY29udGFpbmVyLnBhcmVudEVsZW1lbnQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLm9mZnNldFBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICs9IGNvbnRhaW5lci5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcCArPSBjb250YWluZXIub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUubGVmdCA9ICh0b29sYmFyLm9mZnNldExlZnQgLSBsZWZ0ICsgdG9wQXJlYS5vZmZzZXRMZWZ0KSArICdweCc7XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLnRvcCA9ICh0b29sYmFyLm9mZnNldFRvcCAtIHRvcCArIHRvcEFyZWEub2Zmc2V0VG9wKSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRUb29sYmFyT2Zmc2V0OiBmdW5jdGlvbiAoaXNEaXJUb3AsIHJlY3RzLCB0b29sYmFyLCBlZGl0b3JMZWZ0LCBlZGl0b3JXaWR0aCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wLCBzdGlja3lUb3AsIGFycm93TWFyZ2luKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSAxO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFyV2lkdGggPSB0b29sYmFyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sYmFySGVpZ2h0ID0gcmVjdHMubm9UZXh0ICYmICFpc0RpclRvcCA/IDAgOiB0b29sYmFyLm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFic29sdXRlTGVmdCA9IChpc0RpclRvcCA/IHJlY3RzLmxlZnQgOiByZWN0cy5yaWdodCkgLSBlZGl0b3JMZWZ0IC0gKHRvb2xiYXJXaWR0aCAvIDIpICsgc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgY29uc3Qgb3ZlclJpZ2h0ID0gYWJzb2x1dGVMZWZ0ICsgdG9vbGJhcldpZHRoIC0gZWRpdG9yV2lkdGg7XHJcblxyXG4gICAgICAgICAgICBsZXQgdCA9IChpc0RpclRvcCA/IHJlY3RzLnRvcCAtIHRvb2xiYXJIZWlnaHQgLSBhcnJvd01hcmdpbiA6IHJlY3RzLmJvdHRvbSArIGFycm93TWFyZ2luKSAtIChyZWN0cy5ub1RleHQgPyAwIDogc3RpY2t5VG9wKSArIHNjcm9sbFRvcDtcclxuICAgICAgICAgICAgbGV0IGwgPSBhYnNvbHV0ZUxlZnQgPCAwID8gcGFkZGluZyA6IG92ZXJSaWdodCA8IDAgPyBhYnNvbHV0ZUxlZnQgOiBhYnNvbHV0ZUxlZnQgLSBvdmVyUmlnaHQgLSBwYWRkaW5nIC0gMTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXNldFRvcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBzcGFjZSA9IHQgKyAoaXNEaXJUb3AgPyAoZXZlbnQuX2dldEVkaXRvck9mZnNldHMobnVsbCkudG9wKSA6ICh0b29sYmFyLm9mZnNldEhlaWdodCAtIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLm9mZnNldEhlaWdodCkpO1xyXG4gICAgICAgICAgICBpZiAoIWlzRGlyVG9wICYmIHNwYWNlID4gMCAmJiBldmVudC5fZ2V0UGFnZUJvdHRvbVNwYWNlKCkgPCBzcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRGlyVG9wICYmIF9kLmRvY3VtZW50RWxlbWVudC5vZmZzZXRUb3AgPiBzcGFjZSkge1xyXG4gICAgICAgICAgICAgICAgaXNEaXJUb3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlc2V0VG9wKSB0ID0gKGlzRGlyVG9wID8gcmVjdHMudG9wIC0gdG9vbGJhckhlaWdodCAtIGFycm93TWFyZ2luIDogcmVjdHMuYm90dG9tICsgYXJyb3dNYXJnaW4pIC0gKHJlY3RzLm5vVGV4dCA/IDAgOiBzdGlja3lUb3ApICsgc2Nyb2xsVG9wO1xyXG5cclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5sZWZ0ID0gX3cuTWF0aC5mbG9vcihsKSArICdweCc7XHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudG9wID0gX3cuTWF0aC5mbG9vcih0KSArICdweCc7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNEaXJUb3ApIHtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoY29udGV4dC5lbGVtZW50Ll9hcnJvdywgJ3NlLWFycm93LXVwJyk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFkZENsYXNzKGNvbnRleHQuZWxlbWVudC5fYXJyb3csICdzZS1hcnJvdy1kb3duJyk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuX2Fycm93LnN0eWxlLnRvcCA9IHRvb2xiYXJIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjb250ZXh0LmVsZW1lbnQuX2Fycm93LCAnc2UtYXJyb3ctZG93bicpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjb250ZXh0LmVsZW1lbnQuX2Fycm93LCAnc2UtYXJyb3ctdXAnKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fYXJyb3cuc3R5bGUudG9wID0gLWFycm93TWFyZ2luICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgYXJyb3dfbGVmdCA9IF93Lk1hdGguZmxvb3IoKHRvb2xiYXJXaWR0aCAvIDIpICsgKGFic29sdXRlTGVmdCAtIGwpKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9hcnJvdy5zdHlsZS5sZWZ0ID0gKGFycm93X2xlZnQgKyBhcnJvd01hcmdpbiA+IHRvb2xiYXIub2Zmc2V0V2lkdGggPyB0b29sYmFyLm9mZnNldFdpZHRoIC0gYXJyb3dNYXJnaW4gOiBhcnJvd19sZWZ0IDwgYXJyb3dNYXJnaW4gPyBhcnJvd01hcmdpbiA6IGFycm93X2xlZnQpICsgJ3B4JztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2hvd1Rvb2xiYXJJbmxpbmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFjb3JlLl9pc0lubGluZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRleHQuZWxlbWVudC50b29sYmFyO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50b29sYmFyQ29udGFpbmVyKSB0b29sYmFyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgICAgICAgZWxzZSB0b29sYmFyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHJcbiAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBjb3JlLl9pbmxpbmVUb29sYmFyQXR0ci53aWR0aCA9IHRvb2xiYXIuc3R5bGUud2lkdGggPSBvcHRpb25zLnRvb2xiYXJXaWR0aDtcclxuICAgICAgICAgICAgY29yZS5faW5saW5lVG9vbGJhckF0dHIudG9wID0gdG9vbGJhci5zdHlsZS50b3AgPSAob3B0aW9ucy50b29sYmFyQ29udGFpbmVyID8gMCA6ICgtMSAtIHRvb2xiYXIub2Zmc2V0SGVpZ2h0KSkgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMuc2hvd0lubGluZSA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLnNob3dJbmxpbmUodG9vbGJhciwgY29udGV4dCwgY29yZSk7XHJcblxyXG4gICAgICAgICAgICBldmVudC5vblNjcm9sbF93aW5kb3coKTtcclxuICAgICAgICAgICAgY29yZS5faW5saW5lVG9vbGJhckF0dHIuaXNTaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2hpZGVUb29sYmFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghY29yZS5fbm90SGlkZVRvb2xiYXIgJiYgIWNvcmUuX3ZhcmlhYmxlLmlzRnVsbFNjcmVlbikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIGNvcmUuX2lubGluZVRvb2xiYXJBdHRyLmlzU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25JbnB1dF93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoL0FVRElPLy50ZXN0KGUudGFyZ2V0Lm5vZGVOYW1lKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5pc1JlYWRPbmx5IHx8IGNvcmUuaXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5nbyhjb3JlLmhpc3RvcnkuZ2V0Q3VycmVudEluZGV4KCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IChlLmRhdGEgPT09IG51bGwgPyAnJyA6IGUuZGF0YSA9PT0gdW5kZWZpbmVkID8gJyAnIDogZS5kYXRhKSB8fCAnJztcclxuICAgICAgICAgICAgaWYgKCFjb3JlLl9jaGFyQ291bnQoZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25JbnB1dCA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25JbnB1dChlLCBjb3JlKSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2lzVW5lZGl0YWJsZU5vZGU6IGZ1bmN0aW9uIChyYW5nZSwgaXNGcm9udCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBpc0Zyb250ID8gcmFuZ2Uuc3RhcnRDb250YWluZXIgOiByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGlzRnJvbnQgPyByYW5nZS5zdGFydE9mZnNldCA6IHJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgY29uc3Qgc2libGluZ0tleSA9IGlzRnJvbnQgPyAncHJldmlvdXNTaWJsaW5nJyA6ICduZXh0U2libGluZyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzRWxlbWVudCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMTtcclxuICAgICAgICAgICAgbGV0IHNpYmxpbmdOb2RlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgc2libGluZ05vZGUgPSBldmVudC5faXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nKGNvbnRhaW5lci5jaGlsZE5vZGVzW29mZnNldF0sIHNpYmxpbmdLZXksIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2libGluZ05vZGUgJiYgc2libGluZ05vZGUubm9kZVR5cGUgPT09IDEgJiYgc2libGluZ05vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNpYmxpbmdOb2RlID0gZXZlbnQuX2lzVW5lZGl0YWJsZU5vZGVfZ2V0U2libGluZyhjb250YWluZXIsIHNpYmxpbmdLZXksIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29yZS5pc0VkZ2VQb2ludChjb250YWluZXIsIG9mZnNldCwgaXNGcm9udCA/ICdmcm9udCcgOiAnZW5kJykgJiYgKHNpYmxpbmdOb2RlICYmIHNpYmxpbmdOb2RlLm5vZGVUeXBlID09PSAxICYmIHNpYmxpbmdOb2RlLmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykgPT09ICdmYWxzZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2lzVW5lZGl0YWJsZU5vZGVfZ2V0U2libGluZzogZnVuY3Rpb24gKHNlbGVjdE5vZGUsIHNpYmxpbmdLZXksIGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdE5vZGUpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBsZXQgc2libGluZ05vZGUgPSBzZWxlY3ROb2RlW3NpYmxpbmdLZXldO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFzaWJsaW5nTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgc2libGluZ05vZGUgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHNpYmxpbmdOb2RlID0gc2libGluZ05vZGUgPyBzaWJsaW5nTm9kZVtzaWJsaW5nS2V5XSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2libGluZ05vZGUgJiYgIXV0aWwuaXNDb21wb25lbnQoc2libGluZ05vZGUpKSBzaWJsaW5nTm9kZSA9IHNpYmxpbmdLZXkgPT09ICdwcmV2aW91c1NpYmxpbmcnID8gc2libGluZ05vZGUuZmlyc3RDaGlsZCA6IHNpYmxpbmdOb2RlLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzaWJsaW5nTm9kZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25TaG9ydGN1dEtleTogZmFsc2UsXHJcbiAgICAgICAgb25LZXlEb3duX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb25Ob2RlID0gY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzSW5wdXRFbGVtZW50KHNlbGVjdGlvbk5vZGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb25zdCBrZXlDb2RlID0gZS5rZXlDb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IGUuc2hpZnRLZXk7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0cmwgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGtleUNvZGUgPT09IDkxIHx8IGtleUNvZGUgPT09IDkyIHx8IGtleUNvZGUgPT09IDIyNDtcclxuICAgICAgICAgICAgY29uc3QgYWx0ID0gZS5hbHRLZXk7XHJcbiAgICAgICAgICAgIGV2ZW50Ll9JRWlzQ29tcG9zaW5nID0ga2V5Q29kZSA9PT0gMjI5O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjdHJsICYmIGNvcmUuaXNSZWFkT25seSAmJiAhZXZlbnQuX2N1cnNvck1vdmVLZXlDb2RlLnRlc3Qoa2V5Q29kZSkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNCYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbktleURvd24gPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb25zLm9uS2V5RG93bihlLCBjb3JlKSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIC8qKiBTaG9ydGN1dHMgKi9cclxuICAgICAgICAgICAgaWYgKGN0cmwgJiYgZXZlbnQuX3Nob3J0Y3V0Q29tbWFuZChrZXlDb2RlLCBzaGlmdCkpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9vblNob3J0Y3V0S2V5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuX29uU2hvcnRjdXRLZXkpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9vblNob3J0Y3V0S2V5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKiBkZWZhdWx0IGtleSBhY3Rpb24gKi9cclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdFJhbmdlID0gIXJhbmdlLmNvbGxhcHNlZCB8fCByYW5nZS5zdGFydENvbnRhaW5lciAhPT0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50TmFtZSA9IGNvcmUuX2ZpbGVNYW5hZ2VyLnBsdWdpblJlZ0V4cC50ZXN0KGNvcmUuY3VycmVudENvbnRyb2xsZXJOYW1lKSA/IGNvcmUuY3VycmVudENvbnRyb2xsZXJOYW1lIDogJyc7XHJcbiAgICAgICAgICAgIGxldCBmb3JtYXRFbCA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKSB8fCBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICBsZXQgcmFuZ2VFbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdEVsLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzQXJyb3dLZXkgPSAvMzd8Mzh8Mzl8NDAvLnRlc3QoZS5rZXlDb2RlKTtcclxuICAgICAgICAgICAgaWYgKGlzQXJyb3dLZXkgJiYgZXZlbnQuX29uS2V5RG93bl93eXNpd3lnX2Fycm93S2V5KGUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6IC8qKiBiYWNrc3BhY2Uga2V5ICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnBsdWdpbnNbZmlsZUNvbXBvbmVudE5hbWVdLmRlc3Ryb3kuY2FsbChjb3JlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0UmFuZ2UgJiYgZXZlbnQuX2hhcmREZWxldGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzRm9ybWF0RWxlbWVudChmb3JtYXRFbCkgJiYgIWNvbnRleHQuZWxlbWVudC53eXNpd3lnLmZpcnN0RWxlbWVudENoaWxkICYmICF1dGlsLmlzQ29tcG9uZW50KHNlbGVjdGlvbk5vZGUpICYmIGNvcmUuX3NldERlZmF1bHRGb3JtYXQob3B0aW9ucy5kZWZhdWx0VGFnKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0UmFuZ2UgJiYgIWZvcm1hdEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgKHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwICYmICFzZWxlY3Rpb25Ob2RlLnByZXZpb3VzU2libGluZyAmJiAhdXRpbC5pc0xpc3RDZWxsKGZvcm1hdEVsKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoZm9ybWF0RWwpICYmICghdXRpbC5pc0ZyZWVGb3JtYXRFbGVtZW50KGZvcm1hdEVsKSB8fCB1dGlsLmlzQ2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50KGZvcm1hdEVsKSkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9zdXJlIHJhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQ2xvc3VyZVJhbmdlRm9ybWF0RWxlbWVudChmb3JtYXRFbC5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWludGFpbiBkZWZhdWx0IGZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1d5c2l3eWdEaXYoZm9ybWF0RWwucGFyZW50Tm9kZSkgJiYgZm9ybWF0RWwuY2hpbGROb2Rlcy5sZW5ndGggPD0gMSAmJiAoIWZvcm1hdEVsLmZpcnN0Q2hpbGQgfHwgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoZm9ybWF0RWwudGV4dENvbnRlbnQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gb3B0aW9ucy5kZWZhdWx0VGFnLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBmb3JtYXRFbC5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhdHRyc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cnNbMF0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0Rm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEZvcm1hdC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQoZGVmYXVsdEZvcm1hdCwgZm9ybWF0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gcmVtb3ZlIHRhZ1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q29uID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVsICYmICFmb3JtYXRFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwICYmIHN0YXJ0Q29uLm5vZGVUeXBlID09PSAzICYmICF1dGlsLmlzRm9ybWF0RWxlbWVudChzdGFydENvbi5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IHN0YXJ0Q29uLnBhcmVudE5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gc3RhcnRDb24ucGFyZW50Tm9kZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsLmFwcGVuZENoaWxkKHByZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gbmV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbiA9IHN0YXJ0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShmb3JtYXRFbC5jb250YWlucyhjb24pICYmICFjb24ucHJldmlvdXNTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gPSBjb24ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JtYXRFbC5jb250YWlucyhjb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbi50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtQWxsUGFyZW50cyhzdGFydENvbiwgbnVsbCwgZm9ybWF0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhZ1tjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5faXNVbmVkaXRhYmxlTm9kZShyYW5nZSwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvcm1hdCBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RSYW5nZSAmJiBjb3JlLl9pc0VkZ2VGb3JtYXQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCAnc3RhcnQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQoZm9ybWF0RWwucHJldmlvdXNFbGVtZW50U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuX2Zvcm1hdEF0dHJzVGVtcCA9IGZvcm1hdEVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuYXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVzdGVkIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tb25Db24gPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbCA9IHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGZvcm1hdEVsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbCAmJiBmb3JtYXRFbCAmJiAhdXRpbC5pc0NlbGwocmFuZ2VFbCkgJiYgIS9eRklHQ0FQVElPTiQvaS50ZXN0KHJhbmdlRWwubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZm9ybWF0RWwpICYmIHV0aWwuaXNMaXN0KHJhbmdlRWwpICYmICh1dGlsLmlzTGlzdENlbGwocmFuZ2VFbC5wYXJlbnROb2RlKSB8fCBmb3JtYXRFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSAmJiAoc2VsZWN0aW9uTm9kZSA9PT0gZm9ybWF0RWwgfHwgKHNlbGVjdGlvbk5vZGUubm9kZVR5cGUgPT09IDMgJiYgKCFzZWxlY3Rpb25Ob2RlLnByZXZpb3VzU2libGluZyB8fCB1dGlsLmlzTGlzdChzZWxlY3Rpb25Ob2RlLnByZXZpb3VzU2libGluZykpKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIG51bGwpICE9PSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyLCBudWxsKSA/IHJhbmdlRWwuY29udGFpbnMocmFuZ2Uuc3RhcnRDb250YWluZXIpIDogKHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwICAmJiByYW5nZS5jb2xsYXBzZWQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSByYW5nZS5lbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGgsIHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lci50ZXh0Q29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gZm9ybWF0RWwucHJldmlvdXNFbGVtZW50U2libGluZyB8fCByYW5nZUVsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0Q2VsbChwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJldkxhc3QgPSBwcmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXYuY29udGFpbnMoZm9ybWF0RWwpICYmIHV0aWwuaXNMaXN0Q2VsbChwcmV2TGFzdCkgJiYgdXRpbC5pc0xpc3QocHJldkxhc3QubGFzdEVsZW1lbnRDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZMYXN0ID0gcHJldkxhc3QubGFzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHV0aWwuaXNMaXN0Q2VsbChwcmV2TGFzdCkgJiYgdXRpbC5pc0xpc3QocHJldkxhc3QubGFzdEVsZW1lbnRDaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2TGFzdCA9IHByZXZMYXN0Lmxhc3RFbGVtZW50Q2hpbGQgJiYgcHJldkxhc3QubGFzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IHByZXZMYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29uID0gcHJldiA9PT0gcmFuZ2VFbC5wYXJlbnROb2RlID8gcmFuZ2VFbC5wcmV2aW91c1NpYmxpbmcgOiBwcmV2Lmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbiA9IHV0aWwuY3JlYXRlVGV4dE5vZGUodXRpbC56ZXJvV2lkdGhTcGFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbiwgcmFuZ2VFbC5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGNvbi5ub2RlVHlwZSA9PT0gMyA/IGNvbi50ZXh0Q29udGVudC5sZW5ndGggOiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGZvcm1hdEVsLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZnRlciA9IGNvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZHJlblswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhZnRlci5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlciA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oZm9ybWF0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHV0aWwucmVtb3ZlSXRlbShyYW5nZUVsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoY29uLCBvZmZzZXQsIGNvbiwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRldGFjaCByYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGV0YWNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb21tID0gY29tbW9uQ29uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNvbW0gJiYgY29tbSAhPT0gcmFuZ2VFbCAmJiAhdXRpbC5pc1d5c2l3eWdEaXYoY29tbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tbS5wcmV2aW91c1NpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW0ucHJldmlvdXNTaWJsaW5nLm5vZGVUeXBlID09PSAxIHx8ICF1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjb21tLnByZXZpb3VzU2libGluZy50ZXh0Q29udGVudC50cmltKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhY2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW0gPSBjb21tLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFjaCAmJiByYW5nZUVsLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbCwgKHV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbCkgPyBbZm9ybWF0RWxdIDogbnVsbCksIG51bGwsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlICYmIGZvcm1hdEVsICYmIChyYW5nZS5zdGFydE9mZnNldCA9PT0gMCB8fCAoc2VsZWN0aW9uTm9kZSA9PT0gZm9ybWF0RWwgPyAhIWZvcm1hdEVsLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdIDogZmFsc2UpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWwgPSBzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/IGZvcm1hdEVsLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdIDogc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGZvcm1hdEVsLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VsZWN0IGZpbGUgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlnbm9yZVpXUyA9IChjb21tb25Db24ubm9kZVR5cGUgPT09IDMgfHwgdXRpbC5pc0JyZWFrKGNvbW1vbkNvbikpICYmICFjb21tb25Db24ucHJldmlvdXNTaWJsaW5nICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsICYmICFzZWwucHJldmlvdXNTaWJsaW5nICYmICggKGNvbW1vbkNvbiAmJiB1dGlsLmlzQ29tcG9uZW50KGNvbW1vbkNvbi5wcmV2aW91c1NpYmxpbmcpKSB8fCAoaWdub3JlWldTICYmIHV0aWwuaXNDb21wb25lbnQocHJldikpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZUNvbXBvbmVudEluZm8gPSBjb3JlLmdldEZpbGVDb21wb25lbnQocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RWwudGV4dENvbnRlbnQubGVuZ3RoID09PSAwKSB1dGlsLnJlbW92ZUl0ZW0oZm9ybWF0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLnNlbGVjdENvbXBvbmVudChmaWxlQ29tcG9uZW50SW5mby50YXJnZXQsIGZpbGVDb21wb25lbnRJbmZvLnBsdWdpbk5hbWUpID09PSBmYWxzZSkgY29yZS5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNDb21wb25lbnQocHJldikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0ocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgbm9uRWRpdGFibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbCAmJiB1dGlsLmlzTm9uRWRpdGFibGUoc2VsLnByZXZpb3VzU2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oc2VsLnByZXZpb3VzU2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ2OiAvKiogZGVsZXRlIGtleSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUucGx1Z2luc1tmaWxlQ29tcG9uZW50TmFtZV0uZGVzdHJveS5jYWxsKGNvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RSYW5nZSAmJiBldmVudC5faGFyZERlbGV0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0YWdbY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIl1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX2lzVW5lZGl0YWJsZU5vZGUocmFuZ2UsIGZhbHNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh1dGlsLmlzRm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlKSB8fCBzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nID09PSBudWxsIHx8ICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nKSAmJiBzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nID09PSBudWxsKSkgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRFbCA9IGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0RWwpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0NvbXBvbmVudChuZXh0RWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwub25seVplcm9XaWR0aFNwYWNlKGZvcm1hdEVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShmb3JtYXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGFibGUgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNUYWJsZShuZXh0RWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsID0gdXRpbC5nZXRDaGlsZEVsZW1lbnQobmV4dEVsLCB1dGlsLmlzQ2VsbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gY2VsbC5maXJzdEVsZW1lbnRDaGlsZCB8fCBjZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKGNlbGwsIDAsIGNlbGwsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VsZWN0IGZpbGUgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlQ29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChuZXh0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnRJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29yZS5zZWxlY3RDb21wb25lbnQoZmlsZUNvbXBvbmVudEluZm8udGFyZ2V0LCBmaWxlQ29tcG9uZW50SW5mby5wbHVnaW5OYW1lKSA9PT0gZmFsc2UpIGNvcmUuYmx1cigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzQ29tcG9uZW50KG5leHRFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShuZXh0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlICYmIChjb3JlLmlzRWRnZVBvaW50KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KSB8fCAoc2VsZWN0aW9uTm9kZSA9PT0gZm9ybWF0RWwgPyAhIWZvcm1hdEVsLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdIDogZmFsc2UpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWwgPSBzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCA/IGZvcm1hdEVsLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdIHx8IHNlbGVjdGlvbk5vZGUgOiBzZWxlY3Rpb25Ob2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgbm9uRWRpdGFibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbCAmJiB1dGlsLmlzTm9uRWRpdGFibGUoc2VsLm5leHRTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShzZWwubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc0NvbXBvbmVudChzZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHNlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9ybWF0IGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdFJhbmdlICYmIGNvcmUuX2lzRWRnZUZvcm1hdChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgJ2VuZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRm9ybWF0RWxlbWVudChmb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLl9mb3JtYXRBdHRyc1RlbXAgPSBmb3JtYXRFbC5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXN0ZWQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdEVsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUVsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoZm9ybWF0RWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZm9ybWF0RWwpICYmIHV0aWwuaXNMaXN0KHJhbmdlRWwpICYmIChzZWxlY3Rpb25Ob2RlID09PSBmb3JtYXRFbCB8fCAoc2VsZWN0aW9uTm9kZS5ub2RlVHlwZSA9PT0gMyAmJiAoIXNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmcgfHwgdXRpbC5pc0xpc3Qoc2VsZWN0aW9uTm9kZS5uZXh0U2libGluZykpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIG51bGwpICE9PSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyLCBudWxsKSA/IHJhbmdlRWwuY29udGFpbnMocmFuZ2UuZW5kQ29udGFpbmVyKSA6IChyYW5nZS5lbmRPZmZzZXQgPT09IHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQubGVuZ3RoICYmIHJhbmdlLmNvbGxhcHNlZCkpKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyICE9PSByYW5nZS5lbmRDb250YWluZXIpIGNvcmUucmVtb3ZlTm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSB1dGlsLmdldEFycmF5SXRlbShmb3JtYXRFbC5jaGlsZHJlbiwgdXRpbC5pc0xpc3QsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQgfHwgZm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nIHx8IHJhbmdlRWwucGFyZW50Tm9kZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmICh1dGlsLmlzTGlzdChuZXh0KSB8fCB1dGlsLmdldEFycmF5SXRlbShuZXh0LmNoaWxkcmVuLCB1dGlsLmlzTGlzdCwgZmFsc2UpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb24sIGNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNMaXN0KG5leHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBuZXh0LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGQuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hpbGRyZW5bMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwuaW5zZXJ0QmVmb3JlKGNoaWxkcmVuWzBdLCBuZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uID0gbmV4dC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gbmV4dC5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZHJlblswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5hcHBlbmRDaGlsZChjaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlSXRlbShuZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoY29uLCAwLCBjb24sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2godHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgOTogLyoqIHRhYiBrZXkgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbXBvbmVudE5hbWUgfHwgb3B0aW9ucy50YWJEaXNhYmxlKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwgfHwgYWx0IHx8IHV0aWwuaXNXeXNpd3lnRGl2KHNlbGVjdGlvbk5vZGUpKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNFZGdlID0gKCFyYW5nZS5jb2xsYXBzZWQgfHwgY29yZS5pc0VkZ2VQb2ludChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZvcm1hdHMgPSBjb3JlLmdldFNlbGVjdGVkRWxlbWVudHMobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZjID0gdXRpbC5pc0xpc3RDZWxsKHNlbGVjdGVkRm9ybWF0c1swXSksIGxjID0gdXRpbC5pc0xpc3RDZWxsKHNlbGVjdGVkRm9ybWF0c1tzZWxlY3RlZEZvcm1hdHMubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByID0ge3NjOiByYW5nZS5zdGFydENvbnRhaW5lciwgc286IHJhbmdlLnN0YXJ0T2Zmc2V0LCBlYzogcmFuZ2UuZW5kQ29udGFpbmVyLCBlbzogcmFuZ2UuZW5kT2Zmc2V0fTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0ZWRGb3JtYXRzLmxlbmd0aCwgZjsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBzZWxlY3RlZEZvcm1hdHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzTGlzdENlbGwoZikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICFzaGlmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaChmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTmVzdGVkIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbHMubGVuZ3RoID4gMCAmJiBpc0VkZ2UgJiYgY29yZS5wbHVnaW5zLmxpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IGNvcmUucGx1Z2lucy5saXN0LmVkaXRJbnNpZGVMaXN0LmNhbGwoY29yZSwgc2hpZnQsIGNlbGxzKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZUNlbGwgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgdXRpbC5pc0NlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVDZWxsICYmIGlzRWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFibGUgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQodGFibGVDZWxsLCAndGFibGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gdXRpbC5nZXRMaXN0Q2hpbGRyZW4odGFibGUsIHV0aWwuaXNDZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZHggPSBzaGlmdCA/IHV0aWwucHJldklkeChjZWxscywgdGFibGVDZWxsKSA6IHV0aWwubmV4dElkeChjZWxscywgdGFibGVDZWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSBjZWxscy5sZW5ndGggJiYgIXNoaWZ0KSBpZHggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA9PT0gLTEgJiYgc2hpZnQpIGlkeCA9IGNlbGxzLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vdmVDZWxsID0gY2VsbHNbaWR4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbW92ZUNlbGwpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUNlbGwgPSBtb3ZlQ2VsbC5maXJzdEVsZW1lbnRDaGlsZCB8fCBtb3ZlQ2VsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UobW92ZUNlbGwsIDAsIG1vdmVDZWxsLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lcyA9IGxpbmVzLmNvbmNhdChjZWxscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZjID0gbGMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTGluZXMgdGFiKDQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzaGlmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFiVGV4dCA9IHV0aWwuY3JlYXRlVGV4dE5vZGUobmV3IF93LkFycmF5KGNvcmUuX3ZhcmlhYmxlLnRhYlNpemUgKyAxKS5qb2luKCdcXHUwMEEwJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRSYW5nZSA9IGNvcmUuaW5zZXJ0Tm9kZSh0YWJUZXh0LCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHRSYW5nZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zYyA9IHRhYlRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc28gPSB0ZXh0UmFuZ2UuZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZWMgPSB0YWJUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmVvID0gdGV4dFJhbmdlLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbiA9IGxpbmVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGNoaWxkOyBpIDw9IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gbGluZXNbaV0uZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0JyZWFrKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXNbaV0uaW5zZXJ0QmVmb3JlKHRhYlRleHQuY2xvbmVOb2RlKGZhbHNlKSwgY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQudGV4dENvbnRlbnQgPSB0YWJUZXh0LnRleHRDb250ZW50ICsgY2hpbGQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lc1swXSwgJ3RleHQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kQ2hpbGQgPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lc1tsZW5dLCAndGV4dCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmMgJiYgZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNjID0gZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zbyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGMgJiYgZW5kQ2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5lYyA9IGVuZENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmVvID0gZW5kQ2hpbGQudGV4dENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbiA9IGxpbmVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGluZTsgaSA8PSBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpXS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwLCBjTGVuID0gbGluZS5sZW5ndGgsIGNoaWxkOyBjIDwgY0xlbjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gbGluZVtjXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShjaGlsZCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFxzezEsNH0kLy50ZXN0KGNoaWxkLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXlxcc3sxLDR9Ly50ZXN0KGNoaWxkLnRleHRDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQudGV4dENvbnRlbnQgPSBjaGlsZC50ZXh0Q29udGVudC5yZXBsYWNlKC9eXFxzezEsNH0vLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkID0gdXRpbC5nZXRDaGlsZEVsZW1lbnQobGluZXNbMF0sICd0ZXh0JywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kQ2hpbGQgPSB1dGlsLmdldENoaWxkRWxlbWVudChsaW5lc1tsZW5dLCAndGV4dCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmYyAmJiBmaXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zYyA9IGZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zbyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxjICYmIGVuZENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5lYyA9IGVuZENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZW8gPSBlbmRDaGlsZC50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2Uoci5zYywgci5zbywgci5lYywgci5lbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiAvKiogZW50ZXIga2V5ICovXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW50ZXIgbG9naW4gc3RhcnRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlRm9ybWF0RWwgPSB1dGlsLmdldEZyZWVGb3JtYXRFbGVtZW50KHNlbGVjdGlvbk5vZGUsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29yZS5fY2hhclR5cGVIVE1MKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbnRlckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghc2hpZnQgJiYgZnJlZUZvcm1hdEVsKSB8fCBzaGlmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJIVE1MID0gJzwnICsgZm9ybWF0RWwubm9kZU5hbWUgKyAnPjxicj48LycgKyBmb3JtYXRFbC5ub2RlTmFtZSArICc+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb3JlLmNoZWNrQ2hhckNvdW50KGVudGVySFRNTCwgJ2J5dGUtaHRtbCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2hpZnQgJiYgIWZpbGVDb21wb25lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdEVuZEVkZ2UgPSBjb3JlLl9pc0VkZ2VGb3JtYXQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQsICdlbmQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0U3RhcnRFZGdlID0gY29yZS5faXNFZGdlRm9ybWF0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCwgJ3N0YXJ0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgZGVmYXVsdCBmb3JtYXQgbGluZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RW5kRWRnZSAmJiAoL15IWzEtNl0kL2kudGVzdChmb3JtYXRFbC5ub2RlTmFtZSkgfHwgL15IUiQvaS50ZXN0KGZvcm1hdEVsLm5vZGVOYW1lKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdGb3JtYXQgPSBjb3JlLmFwcGVuZEZvcm1hdFRhZyhmb3JtYXRFbCwgb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RW5kRWRnZSAmJiBmb3JtYXRFbmRFZGdlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gZm9ybWF0RW5kRWRnZS5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbm5lck5vZGUgPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGZvcm1hdEVuZEVkZ2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wID0gdGVtcC5hcHBlbmRDaGlsZChmb3JtYXRFbmRFZGdlLnBvcCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Rm9ybWF0LmFwcGVuZENoaWxkKGlubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcCA9ICF0ZW1wID8gbmV3Rm9ybWF0LmZpcnN0Q2hpbGQgOiB0ZW1wLmFwcGVuZENoaWxkKG5ld0Zvcm1hdC5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzQnJlYWsodGVtcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvV2lkdGggPSB1dGlsLmNyZWF0ZVRleHROb2RlKHV0aWwuemVyb1dpZHRoU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoemVyb1dpZHRoLCB0ZW1wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKHplcm9XaWR0aCwgMSwgemVyb1dpZHRoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZSh0ZW1wLCAwLCB0ZW1wLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJhbmdlRWwgJiYgZm9ybWF0RWwgJiYgIXV0aWwuaXNDZWxsKHJhbmdlRWwpICYmICEvXkZJR0NBUFRJT04kL2kudGVzdChyYW5nZUVsLm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBjb3JlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb3JlLmlzRWRnZVBvaW50KHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KSAmJiB1dGlsLmlzTGlzdChzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RWwgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0xJJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnIgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwuYXBwZW5kQ2hpbGQoYnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5hcHBlbmRDaGlsZChzZWxlY3Rpb25Ob2RlLm5leHRTaWJsaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShiciwgMSwgYnIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIubm9kZVR5cGUgPT09IDMgPyAhcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIubmV4dEVsZW1lbnRTaWJsaW5nIDogdHJ1ZSkgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoZm9ybWF0RWwuaW5uZXJUZXh0LnRyaW0oKSkgJiYgIXV0aWwuaXNMaXN0Q2VsbChmb3JtYXRFbC5uZXh0RWxlbWVudFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3RWwgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKHJhbmdlRWwucGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50TGkgPSBmb3JtYXRFbC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwgPSBwYXJlbnRMaS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdMaXN0Q2VsbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnTEknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdENlbGwuaW5uZXJIVE1MID0gJzxicj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlUYWdBdHRyaWJ1dGVzKG5ld0xpc3RDZWxsLCBmb3JtYXRFbCwgb3B0aW9ucy5saW5lQXR0clJlc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdMaXN0Q2VsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbC5pbnNlcnRCZWZvcmUobmV3RWwsIHBhcmVudExpLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Rm9ybWF0ID0gdXRpbC5pc0NlbGwocmFuZ2VFbC5wYXJlbnROb2RlKSA/ICdESVYnIDogdXRpbC5pc0xpc3QocmFuZ2VFbC5wYXJlbnROb2RlKSA/ICdMSScgOiAodXRpbC5pc0Zvcm1hdEVsZW1lbnQocmFuZ2VFbC5uZXh0RWxlbWVudFNpYmxpbmcpICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlRWwubmV4dEVsZW1lbnRTaWJsaW5nKSkgPyByYW5nZUVsLm5leHRFbGVtZW50U2libGluZy5ub2RlTmFtZSA6ICh1dGlsLmlzRm9ybWF0RWxlbWVudChyYW5nZUVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpICYmICF1dGlsLmlzUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlRWwucHJldmlvdXNFbGVtZW50U2libGluZykpID8gcmFuZ2VFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLm5vZGVOYW1lIDogb3B0aW9ucy5kZWZhdWx0VGFnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuY3JlYXRlRWxlbWVudChuZXdGb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlUYWdBdHRyaWJ1dGVzKG5ld0VsLCBmb3JtYXRFbCwgb3B0aW9ucy5saW5lQXR0clJlc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWRnZSA9IGNvcmUuZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50KHJhbmdlRWwsIFtmb3JtYXRFbF0sIG51bGwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlLmNjLmluc2VydEJlZm9yZShuZXdFbCwgZWRnZS5lYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtQWxsUGFyZW50cyhmb3JtYXRFbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShuZXdFbCwgMSwgbmV3RWwsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlZUZvcm1hdEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uRm9ybWF0ID0gc2VsZWN0aW9uTm9kZSA9PT0gZnJlZUZvcm1hdEVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd1NlbGVjdGlvbiA9IGNvcmUuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNlbGVjdGlvbk5vZGUuY2hpbGROb2Rlcywgb2Zmc2V0ID0gd1NlbGVjdGlvbi5mb2N1c09mZnNldCwgcHJldiA9IHNlbGVjdGlvbk5vZGUucHJldmlvdXNFbGVtZW50U2libGluZywgbmV4dCA9IHNlbGVjdGlvbk5vZGUubmV4dFNpYmxpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzQ2xvc3VyZUZyZWVGb3JtYXRFbGVtZW50KGZyZWVGb3JtYXRFbCkgJiYgISFjaGlsZHJlbiAmJiAoKHNlbGVjdGlvbkZvcm1hdCAmJiByYW5nZS5jb2xsYXBzZWQgJiYgY2hpbGRyZW4ubGVuZ3RoIC0gMSA8PSBvZmZzZXQgKyAxICYmIHV0aWwuaXNCcmVhayhjaGlsZHJlbltvZmZzZXRdKSAmJiAoIWNoaWxkcmVuW29mZnNldCArIDFdIHx8ICgoIWNoaWxkcmVuW29mZnNldCArIDJdIHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKGNoaWxkcmVuW29mZnNldCArIDJdLnRleHRDb250ZW50KSkgJiYgY2hpbGRyZW5bb2Zmc2V0ICsgMV0ubm9kZVR5cGUgPT09IDMgJiYgdXRpbC5vbmx5WmVyb1dpZHRoU3BhY2UoY2hpbGRyZW5bb2Zmc2V0ICsgMV0udGV4dENvbnRlbnQpKSkgJiYgIG9mZnNldCA+IDAgJiYgdXRpbC5pc0JyZWFrKGNoaWxkcmVuW29mZnNldCAtIDFdKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIXNlbGVjdGlvbkZvcm1hdCAmJiB1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShzZWxlY3Rpb25Ob2RlLnRleHRDb250ZW50KSAmJiB1dGlsLmlzQnJlYWsocHJldikgJiYgKHV0aWwuaXNCcmVhayhwcmV2LnByZXZpb3VzU2libGluZykgfHwgIXV0aWwub25seVplcm9XaWR0aFNwYWNlKHByZXYucHJldmlvdXNTaWJsaW5nLnRleHRDb250ZW50KSkgJiYgKCFuZXh0IHx8ICghdXRpbC5pc0JyZWFrKG5leHQpICYmIHV0aWwub25seVplcm9XaWR0aFNwYWNlKG5leHQudGV4dENvbnRlbnQpKSkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25Gb3JtYXQpIHV0aWwucmVtb3ZlSXRlbShjaGlsZHJlbltvZmZzZXQgLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB1dGlsLnJlbW92ZUl0ZW0oc2VsZWN0aW9uTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RWwgPSBjb3JlLmFwcGVuZEZvcm1hdFRhZyhmcmVlRm9ybWF0RWwsICh1dGlsLmlzRm9ybWF0RWxlbWVudChmcmVlRm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nKSAmJiAhdXRpbC5pc1JhbmdlRm9ybWF0RWxlbWVudChmcmVlRm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nKSkgPyBmcmVlRm9ybWF0RWwubmV4dEVsZW1lbnRTaWJsaW5nIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb3B5Rm9ybWF0QXR0cmlidXRlcyhuZXdFbCwgZnJlZUZvcm1hdEVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5ld0VsLCAxLCBuZXdFbCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5pbnNlcnRIVE1MKCgocmFuZ2UuY29sbGFwc2VkICYmIHV0aWwuaXNCcmVhayhyYW5nZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLnN0YXJ0T2Zmc2V0IC0gMV0pKSA/ICc8YnI+JyA6ICc8YnI+PGJyPicpLCB0cnVlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb2N1c05vZGUgPSB3U2VsZWN0aW9uLmZvY3VzTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3T2Zmc2V0ID0gd1NlbGVjdGlvbi5mb2N1c09mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlZUZvcm1hdEVsID09PSBmb2N1c05vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlID0gZm9jdXNOb2RlLmNoaWxkTm9kZXNbd09mZnNldCAtIG9mZnNldCA+IDEgPyB3T2Zmc2V0IC0gMSA6IHdPZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShmb2N1c05vZGUsIDEsIGZvY3VzTm9kZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzTmV4dCA9IHdTZWxlY3Rpb24uZm9jdXNOb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gdXRpbC5jcmVhdGVFbGVtZW50KCdCUicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuaW5zZXJ0Tm9kZShiciwgbnVsbCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiclByZXYgPSBici5wcmV2aW91c1NpYmxpbmcsIGJyTmV4dCA9IGJyLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0JyZWFrKGZvY3VzTmV4dCkgJiYgIXV0aWwuaXNCcmVhayhiclByZXYpICYmICghYnJOZXh0IHx8IHV0aWwub25seVplcm9XaWR0aFNwYWNlKGJyTmV4dCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGJyLmNsb25lTm9kZShmYWxzZSksIGJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShiciwgMSwgYnIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoYnJOZXh0LCAwLCBick5leHQsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fb25TaG9ydGN1dEtleSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGZvcm1hdCBhdHRycyAtIGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiAoZm9ybWF0U3RhcnRFZGdlIHx8IGZvcm1hdEVuZEVkZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNCUiA9IHV0aWwuY3JlYXRlRWxlbWVudCgnQlInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zvcm1hdCA9IHV0aWwuY3JlYXRlRWxlbWVudChmb3JtYXRFbC5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlUYWdBdHRyaWJ1dGVzKG5ld0Zvcm1hdCwgZm9ybWF0RWwsIG9wdGlvbnMubGluZUF0dHJSZXNldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gZm9jdXNCUjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNCcmVhayhzZWxlY3Rpb25Ob2RlKSAmJiBzZWxlY3Rpb25Ob2RlLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGYgPSBzZWxlY3Rpb25Ob2RlLmNsb25lTm9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBzZWxlY3Rpb25Ob2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlKGZvcm1hdEVsICE9PSBzZWxlY3Rpb25Ob2RlICYmIGZvcm1hdEVsLmNvbnRhaW5zKHNlbGVjdGlvbk5vZGUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdGb3JtYXQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Rm9ybWF0LCBmb3JtYXRTdGFydEVkZ2UgJiYgIWZvcm1hdEVuZEVkZ2UgPyBmb3JtYXRFbCA6IGZvcm1hdEVsLm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0RW5kRWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoZm9jdXNCUiwgMSwgZm9jdXNCUiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3RWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNNdWx0aUxpbmUgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIG51bGwpICE9PSB1dGlsLmdldEZvcm1hdEVsZW1lbnQocmFuZ2UuZW5kQ29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdGb3JtYXQgPSBmb3JtYXRFbC5jbG9uZU5vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Zvcm1hdC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGNvcmUucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gdXRpbC5nZXRGb3JtYXRFbGVtZW50KHIuY29udGFpbmVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld0VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzV3lzaXd5Z0RpdihyLmNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9lbnRlclByZXZlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQud3lzaXd5Zy5hcHBlbmRDaGlsZChuZXdGb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdGb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvcHlUYWdBdHRyaWJ1dGVzKG5ld0VsLCBmb3JtYXRFbCwgb3B0aW9ucy5saW5lQXR0clJlc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UobmV3RWwsIG9mZnNldCwgbmV3RWwsIG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbm5lclJhbmdlID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoci5jb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gbmV3RWwuY29udGFpbnMoaW5uZXJSYW5nZSkgPyB1dGlsLmdldENoaWxkRWxlbWVudChpbm5lclJhbmdlLCB1dGlsLmdldEZvcm1hdEVsZW1lbnQuYmluZCh1dGlsKSkgOiBuZXdFbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNdWx0aUxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdEVuZEVkZ2UgJiYgIWZvcm1hdFN0YXJ0RWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Rm9ybWF0LCAoIXIucHJldkNvbnRhaW5lciB8fCByLmNvbnRhaW5lciA9PT0gci5wcmV2Q29udGFpbmVyKSA/IG5ld0VsLm5leHRFbGVtZW50U2libGluZyA6IG5ld0VsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gbmV3Rm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHIub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdFN0YXJ0RWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBFbCA9IG5ld0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0Zvcm1hdCwgbmV3RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsID0gdGVtcEVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRFbmRFZGdlICYmIGZvcm1hdFN0YXJ0RWRnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Rm9ybWF0LCAoci5wcmV2Q29udGFpbmVyICYmIHIuY29udGFpbmVyID09PSByLnByZXZDb250YWluZXIpID8gbmV3RWwubmV4dEVsZW1lbnRTaWJsaW5nIDogbmV3RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBuZXdGb3JtYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB1dGlsLnNwbGl0RWxlbWVudChyLmNvbnRhaW5lciwgci5vZmZzZXQsIHV0aWwuZ2V0RWxlbWVudERlcHRoKGZvcm1hdEVsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLm9ubHlaZXJvV2lkdGhTcGFjZShmb3JtYXRFbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSBjb3JlLmFwcGVuZEZvcm1hdFRhZyhmb3JtYXRFbCwgZm9ybWF0RWwuY2xvbmVOb2RlKGZhbHNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB1dGlsLnNwbGl0RWxlbWVudChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgdXRpbC5nZXRFbGVtZW50RGVwdGgoZm9ybWF0RWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2VudGVyUHJldmVudChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29weVRhZ0F0dHJpYnV0ZXMobmV3RWwsIGZvcm1hdEVsLCBvcHRpb25zLmxpbmVBdHRyUmVzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShuZXdFbCwgb2Zmc2V0LCBuZXdFbCwgb2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdFJhbmdlKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlRWwgJiYgdXRpbC5nZXRQYXJlbnRFbGVtZW50KHJhbmdlRWwsICdGSUdDQVBUSU9OJykgJiYgdXRpbC5nZXRQYXJlbnRFbGVtZW50KHJhbmdlRWwsIHV0aWwuaXNMaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fZW50ZXJQcmV2ZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFbCA9IGNvcmUuYXBwZW5kRm9ybWF0VGFnKGZvcm1hdEVsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5zZXRSYW5nZShmb3JtYXRFbCwgMCwgZm9ybWF0RWwsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb21wb25lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5jb250YWluZXJPZmYoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcENvbnRleHQgPSBjb250ZXh0W2ZpbGVDb21wb25lbnROYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gY29tcENvbnRleHQuX2NvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2libGluZyA9IGNvbnRhaW5lci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8IGNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3RWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKGNvbnRhaW5lci5wYXJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0JSJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbCA9IHV0aWwuY3JlYXRlRWxlbWVudCgodXRpbC5pc0Zvcm1hdEVsZW1lbnQoc2libGluZykgJiYgIXV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQoc2libGluZykpID8gc2libGluZy5ub2RlTmFtZSA6IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbC5pbm5lckhUTUwgPSAnPGJyPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGlmdCkgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGNvbnRhaW5lci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgY29udGFpbmVyLm5leHRFbGVtZW50U2libGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmNhbGxQbHVnaW4oZmlsZUNvbXBvbmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLnNlbGVjdENvbXBvbmVudChjb21wQ29udGV4dC5fZWxlbWVudCwgZmlsZUNvbXBvbmVudE5hbWUpID09PSBmYWxzZSkgY29yZS5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI3OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29tcG9uZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNoaWZ0ICYmIGtleUNvZGUgPT09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFibGVQbHVnaW4gPSBjb3JlLnBsdWdpbnMudGFibGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGVQbHVnaW4gJiYgIXRhYmxlUGx1Z2luLl9zaGlmdCAmJiAhdGFibGVQbHVnaW4uX3JlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoZm9ybWF0RWwsIHV0aWwuaXNDZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVBsdWdpbi5vblRhYmxlQ2VsbE11bHRpU2VsZWN0LmNhbGwoY29yZSwgY2VsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hpZnQgJiYgKHV0aWwuaXNPU1hfSU9TID8gYWx0IDogY3RybCkgJiYga2V5Q29kZSA9PT0gMzIpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYnNwID0gY29yZS5pbnNlcnROb2RlKHV0aWwuY3JlYXRlVGV4dE5vZGUoJ1xcdTAwYTAnKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmJzcCAmJiBuYnNwLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UobmJzcC5jb250YWluZXIsIG5ic3AuZW5kT2Zmc2V0LCBuYnNwLmNvbnRhaW5lciwgbmJzcC5lbmRPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNJRSAmJiAhY3RybCAmJiAhYWx0ICYmICFzZWxlY3RSYW5nZSAmJiAhZXZlbnQuX25vblRleHRLZXlDb2RlLnRlc3Qoa2V5Q29kZSkgJiYgdXRpbC5pc0JyZWFrKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgemVyb1dpZHRoID0gdXRpbC5jcmVhdGVUZXh0Tm9kZSh1dGlsLnplcm9XaWR0aFNwYWNlKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuaW5zZXJ0Tm9kZSh6ZXJvV2lkdGgsIG51bGwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UoemVyb1dpZHRoLCAxLCB6ZXJvV2lkdGgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZXZlbnQuX2RpcmVjdGlvbktleUNvZGUudGVzdChrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fZWRpdG9yUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbktleURvd25fd3lzaXd5Z19hcnJvd0tleTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHJldHVybjsgLy8gc2hpZnRrZXkgbmVlZHMoPykgb3RoZXIgY3VzdG9tIGhhbmRsZXIuIFRoaXMgb25lIG1heSBiZSBhZGFwdGVkIChpbiAnc2VsZWN0Tm9kZSguLi4pJyksIGJ1dCBub3QgZm9yIHRhYmxlXHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0Tm9kZSA9IGZ1bmN0aW9uIChub2RlLCBvZmZzZXQgPSAwKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghbm9kZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb21wb25lbnRJbmZvID0gY29yZS5nZXRGaWxlQ29tcG9uZW50KG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLnNlbGVjdENvbXBvbmVudChjb21wb25lbnRJbmZvLnRhcmdldCwgY29tcG9uZW50SW5mby5wbHVnaW5OYW1lKTsgICAvLyBtb3JlIHJlc3BvbnNpdmUgZm9yIGtleSBob2xkbmVzc1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG5vZGUsIG9mZnNldCwgbm9kZSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZSA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChzZWxlY3Rpb25Ob2RlLCAndGFibGUnKTtcclxuICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gdXRpbC5nZXRQYXJlbnRFbGVtZW50KHNlbGVjdGlvbk5vZGUsICd0cicpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudENlbGwgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgJ3RkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRDZWxsRmlyc3ROb2RlID0gY3VycmVudENlbGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENlbGxMYXN0Tm9kZSA9IGN1cnJlbnRDZWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRDZWxsRmlyc3ROb2RlLmZpcnN0Q2hpbGQpIGN1cnJlbnRDZWxsRmlyc3ROb2RlID0gY3VycmVudENlbGxGaXJzdE5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudENlbGxMYXN0Tm9kZS5sYXN0Q2hpbGQpIGN1cnJlbnRDZWxsTGFzdE5vZGUgPSBjdXJyZW50Q2VsbExhc3ROb2RlLmxhc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkID0gc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQuZmlyc3RDaGlsZCkgc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkID0gc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0NlbGxGaXJzdE5vZGUgPSAoc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkID09PSBjdXJyZW50Q2VsbEZpcnN0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0NlbGxMYXN0Tm9kZSA9IChzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPT09IGN1cnJlbnRDZWxsTGFzdE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzaWJsaW5nVG9TZXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCAmJiBpc0NlbGxGaXJzdE5vZGUpIHsgLy8gVVBcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1JvdyA9IGN1cnJlbnRSb3cgJiYgY3VycmVudFJvdy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1Jvdykgc2libGluZ1RvU2V0ID0gcHJldmlvdXNSb3cuY2hpbGRyZW5bY3VycmVudENlbGwuY2VsbEluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHNpYmxpbmdUb1NldCA9IHV0aWwuZ2V0UHJldmlvdXNEZWVwZXN0Tm9kZSh0YWJsZSwgY29yZS5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzaWJsaW5nVG9TZXQubGFzdENoaWxkKSBzaWJsaW5nVG9TZXQgPSBzaWJsaW5nVG9TZXQubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nVG9TZXQpIG9mZnNldCA9IHNpYmxpbmdUb1NldC50ZXh0Q29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNDAgJiYgaXNDZWxsTGFzdE5vZGUpIHsgIC8vIERPV05cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0Um93ID0gY3VycmVudFJvdyAmJiBjdXJyZW50Um93Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFJvdykgc2libGluZ1RvU2V0ID0gbmV4dFJvdy5jaGlsZHJlbltjdXJyZW50Q2VsbC5jZWxsSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugc2libGluZ1RvU2V0ID0gdXRpbC5nZXROZXh0RGVlcGVzdE5vZGUodGFibGUsIGNvcmUuY29udGV4dC5lbGVtZW50Lnd5c2l3eWcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2libGluZ1RvU2V0LmZpcnN0Q2hpbGQpIHNpYmxpbmdUb1NldCA9IHNpYmxpbmdUb1NldC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nVG9TZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3ROb2RlKHNpYmxpbmdUb1NldCwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudEluZm8gPSBjb3JlLmdldEZpbGVDb21wb25lbnQoc2VsZWN0aW9uTm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RQcmV2aW91cyA9IC8zN3wzOC8udGVzdChlLmtleUNvZGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0TmV4dCA9IC8zOXw0MC8udGVzdChlLmtleUNvZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RQcmV2aW91cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzRGVlcGVzdE5vZGUgPSB1dGlsLmdldFByZXZpb3VzRGVlcGVzdE5vZGUoY29tcG9uZW50SW5mby50YXJnZXQsIGNvcmUuY29udGV4dC5lbGVtZW50Lnd5c2l3eWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdE5vZGUocHJldmlvdXNEZWVwZXN0Tm9kZSwgcHJldmlvdXNEZWVwZXN0Tm9kZSAmJiBwcmV2aW91c0RlZXBlc3ROb2RlLnRleHRDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdE5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0RGVlcGVzdE5vZGUgPSB1dGlsLmdldE5leHREZWVwZXN0Tm9kZShjb21wb25lbnRJbmZvLnRhcmdldCwgY29yZS5jb250ZXh0LmVsZW1lbnQud3lzaXd5Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Tm9kZShuZXh0RGVlcGVzdE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uS2V5VXBfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50Ll9vblNob3J0Y3V0S2V5KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9lZGl0b3JSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXlDb2RlID0gZS5rZXlDb2RlO1xyXG4gICAgICAgICAgICBjb25zdCBjdHJsID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBrZXlDb2RlID09PSA5MSB8fCBrZXlDb2RlID09PSA5MiB8fCBrZXlDb2RlID09PSAyMjQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsdCA9IGUuYWx0S2V5O1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjdHJsICYmIGV2ZW50Ll9jdXJzb3JNb3ZlS2V5Q29kZS50ZXN0KGtleUNvZGUpKSBldmVudC5fYXBwbHlUYWdFZmZlY3RzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZSA9IGNvcmUuZ2V0U2VsZWN0aW9uTm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzQmFsbG9vbiAmJiAoKGNvcmUuX2lzQmFsbG9vbkFsd2F5cyAmJiBrZXlDb2RlICE9PSAyNykgfHwgIXJhbmdlLmNvbGxhcHNlZCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLl9pc0JhbGxvb25BbHdheXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSAhPT0gMjcpIGV2ZW50Ll9zaG93VG9vbGJhckJhbGxvb25EZWxheSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5fc2hvd1Rvb2xiYXJCYWxsb29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uTm9kZURlZXBlc3RGaXJzdENoaWxkID0gc2VsZWN0aW9uTm9kZTtcclxuICAgICAgICAgICAgd2hpbGUgKHNlbGVjdGlvbk5vZGVEZWVwZXN0Rmlyc3RDaGlsZC5maXJzdENoaWxkKSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQgPSBzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQuZmlyc3RDaGlsZDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ29tcG9uZW50SW5mbyA9IGNvcmUuZ2V0RmlsZUNvbXBvbmVudChzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoIShlLmtleUNvZGUgPT09IDE2IHx8IGUuc2hpZnRLZXkpICYmIHNlbGVjdGVkQ29tcG9uZW50SW5mbykgY29yZS5zZWxlY3RDb21wb25lbnQoc2VsZWN0ZWRDb21wb25lbnRJbmZvLnRhcmdldCwgc2VsZWN0ZWRDb21wb25lbnRJbmZvLnBsdWdpbk5hbWUpO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChjb3JlLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbykgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHdoZW4gZm9ybWF0IHRhZyBkZWxldGVkICovXHJcbiAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSA4ICYmIHV0aWwuaXNXeXNpd3lnRGl2KHNlbGVjdGlvbk5vZGUpICYmIHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQgPT09ICcnICYmIHNlbGVjdGlvbk5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb0Zvcm1hdFRhZyA9IHV0aWwuY3JlYXRlRWxlbWVudCh1dGlsLmlzRm9ybWF0RWxlbWVudChjb3JlLl92YXJpYWJsZS5jdXJyZW50Tm9kZXNbMF0pID8gY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzWzBdIDogb3B0aW9ucy5kZWZhdWx0VGFnKTtcclxuICAgICAgICAgICAgICAgIG9Gb3JtYXRUYWcuaW5uZXJIVE1MID0gJzxicj4nO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUuYXBwZW5kQ2hpbGQob0Zvcm1hdFRhZyk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLnNldFJhbmdlKG9Gb3JtYXRUYWcsIDAsIG9Gb3JtYXRUYWcsIDApO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX2FwcGx5VGFnRWZmZWN0cygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0RWwgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoc2VsZWN0aW9uTm9kZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlRWwgPSB1dGlsLmdldFJhbmdlRm9ybWF0RWxlbWVudChzZWxlY3Rpb25Ob2RlLCBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBjb3JlLl9mb3JtYXRBdHRyc1RlbXA7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhdHRycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSAxMyAmJiAvXmlkJC9pLnRlc3QoYXR0cnNbaV0ubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RWwuc2V0QXR0cmlidXRlKGF0dHJzW2ldLm5hbWUsIGF0dHJzW2ldLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvcmUuX2Zvcm1hdEF0dHJzVGVtcCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZm9ybWF0RWwgJiYgcmFuZ2UuY29sbGFwc2VkICYmICF1dGlsLmlzQ29tcG9uZW50KHNlbGVjdGlvbk5vZGUpICYmICF1dGlsLmlzTGlzdChzZWxlY3Rpb25Ob2RlKSAmJiBjb3JlLl9zZXREZWZhdWx0Rm9ybWF0KHV0aWwuaXNSYW5nZUZvcm1hdEVsZW1lbnQocmFuZ2VFbCkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZykgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUgPSBjb3JlLmdldFNlbGVjdGlvbk5vZGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGV4dEtleSA9ICFjdHJsICYmICFhbHQgJiYgIWV2ZW50Ll9ub25UZXh0S2V5Q29kZS50ZXN0KGtleUNvZGUpO1xyXG4gICAgICAgICAgICBpZiAodGV4dEtleSAmJiBzZWxlY3Rpb25Ob2RlLm5vZGVUeXBlID09PSAzICYmIHV0aWwuemVyb1dpZHRoUmVnRXhwLnRlc3Qoc2VsZWN0aW9uTm9kZS50ZXh0Q29udGVudCkgJiYgIShlLmlzQ29tcG9zaW5nICE9PSB1bmRlZmluZWQgPyBlLmlzQ29tcG9zaW5nIDogZXZlbnQuX0lFaXNDb21wb3NpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc28gPSByYW5nZS5zdGFydE9mZnNldCwgZW8gPSByYW5nZS5lbmRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9udFplcm9XaWR0aENudCA9IChzZWxlY3Rpb25Ob2RlLnRleHRDb250ZW50LnN1YnN0cmluZygwLCBlbykubWF0Y2goZXZlbnQuX2Zyb250WmVyb1dpZHRoUmVnKSB8fCAnJykubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgc28gPSByYW5nZS5zdGFydE9mZnNldCAtIGZyb250WmVyb1dpZHRoQ250O1xyXG4gICAgICAgICAgICAgICAgZW8gPSByYW5nZS5lbmRPZmZzZXQgLSBmcm9udFplcm9XaWR0aENudDtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbk5vZGUudGV4dENvbnRlbnQgPSBzZWxlY3Rpb25Ob2RlLnRleHRDb250ZW50LnJlcGxhY2UodXRpbC56ZXJvV2lkdGhSZWdFeHAsICcnKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2Uoc2VsZWN0aW9uTm9kZSwgc28gPCAwID8gMCA6IHNvLCBzZWxlY3Rpb25Ob2RlLCBlbyA8IDAgPyAwIDogZW8pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9jaGFyQ291bnQoJycpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbktleVVwID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9ucy5vbktleVVwKGUsIGNvcmUpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICBpZiAoIWN0cmwgJiYgIWFsdCAmJiAhZXZlbnQuX2hpc3RvcnlJZ25vcmVLZXlDb2RlLnRlc3Qoa2V5Q29kZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25TY3JvbGxfd3lzaXd5ZzogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICBpZiAoY29yZS5faXNCYWxsb29uKSBldmVudC5faGlkZVRvb2xiYXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgZXZlbnRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnMub25TY3JvbGwgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5vblNjcm9sbChlLCBjb3JlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkZvY3VzX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9hbnRpQmx1cikgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb3JlLmhhc0ZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgX3cuc2V0VGltZW91dChldmVudC5fYXBwbHlUYWdFZmZlY3RzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9pc0lubGluZSkgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uRm9jdXMgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5vbkZvY3VzKGUsIGNvcmUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQmx1cl93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoY29yZS5fYW50aUJsdXIgfHwgY29yZS5fdmFyaWFibGUuaXNDb2RlVmlldykgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb3JlLmhhc0ZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvcmUuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgaWYgKGNvcmUuX2lzSW5saW5lIHx8IGNvcmUuX2lzQmFsbG9vbikgZXZlbnQuX2hpZGVUb29sYmFyKCk7XHJcblxyXG4gICAgICAgICAgICBjb3JlLl9zZXRLZXlFZmZlY3QoW10pO1xyXG5cclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuY3VycmVudE5vZGVzID0gW107XHJcbiAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLmN1cnJlbnROb2Rlc01hcCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93UGF0aExhYmVsKSBjb250ZXh0LmVsZW1lbnQubmF2aWdhdGlvbi50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uQmx1ciA9PT0gJ2Z1bmN0aW9uJykgZnVuY3Rpb25zLm9uQmx1cihlLCBjb3JlLHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uTW91c2VEb3duX3Jlc2l6aW5nQmFyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLnJlc2l6ZUNsaWVudFkgPSBlLmNsaWVudFk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZXNpemVCYWNrZ3JvdW5kLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvc3VyZUZ1bmMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVzaXplQmFja2dyb3VuZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgX2QucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZXZlbnQuX3Jlc2l6ZV9lZGl0b3IpO1xyXG4gICAgICAgICAgICAgICAgX2QucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGNsb3N1cmVGdW5jKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZXZlbnQuX3Jlc2l6ZV9lZGl0b3IpO1xyXG4gICAgICAgICAgICBfZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgY2xvc3VyZUZ1bmMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9yZXNpemVfZWRpdG9yOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNpemVJbnRlcnZhbCA9IGNvbnRleHQuZWxlbWVudC5lZGl0b3JBcmVhLm9mZnNldEhlaWdodCArIChlLmNsaWVudFkgLSBjb3JlLl92YXJpYWJsZS5yZXNpemVDbGllbnRZKTtcclxuICAgICAgICAgICAgY29uc3QgaCA9IChyZXNpemVJbnRlcnZhbCA8IGNvcmUuX3ZhcmlhYmxlLm1pblJlc2l6aW5nU2l6ZSA/IGNvcmUuX3ZhcmlhYmxlLm1pblJlc2l6aW5nU2l6ZSA6IHJlc2l6ZUludGVydmFsKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZS5zdHlsZS5oZWlnaHQgPSBjb250ZXh0LmVsZW1lbnQuY29kZS5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUucmVzaXplQ2xpZW50WSA9IGUuY2xpZW50WTtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQpIGNvcmUuX19jYWxsUmVzaXplRnVuY3Rpb24oaCwgbnVsbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25SZXNpemVfd2luZG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1Jlc2l6ZU9ic2VydmVyU3VwcG9ydGVkKSBjb3JlLnJlc2V0UmVzcG9uc2l2ZVRvb2xiYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2xiYXIgPSBjb250ZXh0LmVsZW1lbnQudG9vbGJhcjtcclxuICAgICAgICAgICAgY29uc3QgaXNUb29sYmFySGlkZGVuID0gKHRvb2xiYXIuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnIHx8IChjb3JlLl9pc0lubGluZSAmJiAhY29yZS5faW5saW5lVG9vbGJhckF0dHIuaXNTaG93KSk7XHJcbiAgICAgICAgICAgIGlmICh0b29sYmFyLm9mZnNldFdpZHRoID09PSAwICYmICFpc1Rvb2xiYXJIaWRkZW4pIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmZpbGVCcm93c2VyICYmIGNvbnRleHQuZmlsZUJyb3dzZXIuYXJlYS5zdHlsZS5kaXNwbGF5ID09PSAnYmxvY2snKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGVCcm93c2VyLmJvZHkuc3R5bGUubWF4SGVpZ2h0ID0gKF93LmlubmVySGVpZ2h0IC0gY29udGV4dC5maWxlQnJvd3Nlci5oZWFkZXIub2Zmc2V0SGVpZ2h0IC0gNTApICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuc3VibWVudUFjdGl2ZUJ1dHRvbiAmJiBjb3JlLnN1Ym1lbnUpIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuX3NldE1lbnVQb3NpdGlvbihjb3JlLnN1Ym1lbnVBY3RpdmVCdXR0b24sIGNvcmUuc3VibWVudSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl92YXJpYWJsZS5pc0Z1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLmlubmVySGVpZ2h0X2Z1bGxTY3JlZW4gKz0gKF93LmlubmVySGVpZ2h0IC0gdG9vbGJhci5vZmZzZXRIZWlnaHQpIC0gY29yZS5fdmFyaWFibGUuaW5uZXJIZWlnaHRfZnVsbFNjcmVlbjtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5lZGl0b3JBcmVhLnN0eWxlLmhlaWdodCA9IGNvcmUuX3ZhcmlhYmxlLmlubmVySGVpZ2h0X2Z1bGxTY3JlZW4gKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29yZS5fdmFyaWFibGUuaXNDb2RlVmlldyAmJiBjb3JlLl9pc0lubGluZSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3Nob3dUb29sYmFySW5saW5lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuX2lmcmFtZUF1dG9IZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3JlLl9zdGlja3kpIHtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXIuc3R5bGUud2lkdGggPSAoY29udGV4dC5lbGVtZW50LnRvcEFyZWEub2Zmc2V0V2lkdGggLSAyKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBldmVudC5vblNjcm9sbF93aW5kb3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uU2Nyb2xsX3dpbmRvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoY29yZS5fdmFyaWFibGUuaXNGdWxsU2NyZWVuIHx8IGNvbnRleHQuZWxlbWVudC50b29sYmFyLm9mZnNldFdpZHRoID09PSAwIHx8IG9wdGlvbnMuc3RpY2t5VG9vbGJhciA8IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckhlaWdodCA9IGVsZW1lbnQuZWRpdG9yQXJlYS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSAodGhpcy5zY3JvbGxZIHx8IF9kLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApICsgb3B0aW9ucy5zdGlja3lUb29sYmFyO1xyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3JUb3AgPSBldmVudC5fZ2V0RWRpdG9yT2Zmc2V0cyhvcHRpb25zLnRvb2xiYXJDb250YWluZXIpLnRvcCAtIChjb3JlLl9pc0lubGluZSA/IGVsZW1lbnQudG9vbGJhci5vZmZzZXRIZWlnaHQgOiAwKTtcclxuICAgICAgICAgICAgY29uc3QgaW5saW5lT2Zmc2V0ID0gY29yZS5faXNJbmxpbmUgJiYgKHkgLSBlZGl0b3JUb3ApID4gMCA/IHkgLSBlZGl0b3JUb3AgLSBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5vZmZzZXRIZWlnaHQgOiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHkgPCBlZGl0b3JUb3ApIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9vZmZTdGlja3lUb29sYmFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoeSArIGNvcmUuX3ZhcmlhYmxlLm1pblJlc2l6aW5nU2l6ZSA+PSBlZGl0b3JIZWlnaHQgKyBlZGl0b3JUb3ApIHtcclxuICAgICAgICAgICAgICAgIGlmICghY29yZS5fc3RpY2t5KSBldmVudC5fb25TdGlja3lUb29sYmFyKGlubGluZU9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnRvb2xiYXIuc3R5bGUudG9wID0gKGlubGluZU9mZnNldCArIGVkaXRvckhlaWdodCArIGVkaXRvclRvcCArIG9wdGlvbnMuc3RpY2t5VG9vbGJhciAtIHkgLSBjb3JlLl92YXJpYWJsZS5taW5SZXNpemluZ1NpemUpICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh5ID49IGVkaXRvclRvcCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX29uU3RpY2t5VG9vbGJhcihpbmxpbmVPZmZzZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2dldEVkaXRvck9mZnNldHM6IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgbGV0IG9mZnNldEVsID0gY29udGFpbmVyIHx8IGNvbnRleHQuZWxlbWVudC50b3BBcmVhO1xyXG4gICAgICAgICAgICBsZXQgdCA9IDAsIGwgPSAwLCBzID0gMDtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXRFbCkge1xyXG4gICAgICAgICAgICAgICAgdCArPSBvZmZzZXRFbC5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgICAgICBsICs9IG9mZnNldEVsLm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICBzICs9IG9mZnNldEVsLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIG9mZnNldEVsID0gb2Zmc2V0RWwub2Zmc2V0UGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiB0LFxyXG4gICAgICAgICAgICAgICAgbGVmdDogbCxcclxuICAgICAgICAgICAgICAgIHNjcm9sbDogc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9nZXRQYWdlQm90dG9tU3BhY2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9kLmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSAoZXZlbnQuX2dldEVkaXRvck9mZnNldHMobnVsbCkudG9wICsgY29udGV4dC5lbGVtZW50LnRvcEFyZWEub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25TdGlja3lUb29sYmFyOiBmdW5jdGlvbiAoaW5saW5lT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjb250ZXh0LmVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvcmUuX2lzSW5saW5lICYmICFvcHRpb25zLnRvb2xiYXJDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuX3N0aWNreUR1bW15LnN0eWxlLmhlaWdodCA9IGVsZW1lbnQudG9vbGJhci5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS50b3AgPSAob3B0aW9ucy5zdGlja3lUb29sYmFyICsgaW5saW5lT2Zmc2V0KSArICdweCc7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS53aWR0aCA9IGNvcmUuX2lzSW5saW5lID8gY29yZS5faW5saW5lVG9vbGJhckF0dHIud2lkdGggOiBlbGVtZW50LnRvb2xiYXIub2Zmc2V0V2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB1dGlsLmFkZENsYXNzKGVsZW1lbnQudG9vbGJhciwgJ3NlLXRvb2xiYXItc3RpY2t5Jyk7XHJcbiAgICAgICAgICAgIGNvcmUuX3N0aWNreSA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX29mZlN0aWNreVRvb2xiYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRleHQuZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuX3N0aWNreUR1bW15LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudG9vbGJhci5zdHlsZS50b3AgPSBjb3JlLl9pc0lubGluZSA/IGNvcmUuX2lubGluZVRvb2xiYXJBdHRyLnRvcCA6ICcnO1xyXG4gICAgICAgICAgICBlbGVtZW50LnRvb2xiYXIuc3R5bGUud2lkdGggPSBjb3JlLl9pc0lubGluZSA/IGNvcmUuX2lubGluZVRvb2xiYXJBdHRyLndpZHRoIDogJyc7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZWRpdG9yQXJlYS5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoZWxlbWVudC50b29sYmFyLCAnc2UtdG9vbGJhci1zdGlja3knKTtcclxuICAgICAgICAgICAgY29yZS5fc3RpY2t5ID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2NvZGVWaWV3QXV0b0hlaWdodDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoY29yZS5fdmFyaWFibGUuaXNGdWxsU2NyZWVuKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnN0eWxlLmhlaWdodCA9IGNvbnRleHQuZWxlbWVudC5jb2RlLnNjcm9sbEhlaWdodCArICdweCc7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRmlyZUZveCAtIHRhYmxlIGRlbGV0ZSwgQ2hyb21lIC0gaW1hZ2UsIHZpZGVvLCBhdWRpb1xyXG4gICAgICAgIF9oYXJkRGVsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gY29yZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICBjb25zdCBlYyA9IHJhbmdlLmVuZENvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgICAgIC8vIHRhYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IHNDZWxsID0gdXRpbC5nZXRSYW5nZUZvcm1hdEVsZW1lbnQoc2MpO1xyXG4gICAgICAgICAgICBjb25zdCBlQ2VsbCA9IHV0aWwuZ2V0UmFuZ2VGb3JtYXRFbGVtZW50KGVjKTtcclxuICAgICAgICAgICAgY29uc3Qgc0lzQ2VsbCA9IHV0aWwuaXNDZWxsKHNDZWxsKTtcclxuICAgICAgICAgICAgY29uc3QgZUlzQ2VsbCA9IHV0aWwuaXNDZWxsKGVDZWxsKTtcclxuICAgICAgICAgICAgY29uc3QgYW5jZXN0b3IgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcclxuICAgICAgICAgICAgaWYgKCgoc0lzQ2VsbCAmJiAhc0NlbGwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAhc0NlbGwucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB8fCAoZUlzQ2VsbCAmJiAhZUNlbGwubmV4dEVsZW1lbnRTaWJsaW5nICYmICFlQ2VsbC5wYXJlbnRFbGVtZW50Lm5leHRFbGVtZW50U2libGluZykpICYmIHNDZWxsICE9PSBlQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzSXNDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHV0aWwuZ2V0UGFyZW50RWxlbWVudChlQ2VsbCwgZnVuY3Rpb24oY3VycmVudCkge3JldHVybiBhbmNlc3RvciA9PT0gY3VycmVudC5wYXJlbnROb2RlO30pKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVJc0NlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odXRpbC5nZXRQYXJlbnRFbGVtZW50KHNDZWxsLCBmdW5jdGlvbihjdXJyZW50KSB7cmV0dXJuIGFuY2VzdG9yID09PSBjdXJyZW50LnBhcmVudE5vZGU7fSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0odXRpbC5nZXRQYXJlbnRFbGVtZW50KHNDZWxsLCBmdW5jdGlvbihjdXJyZW50KSB7cmV0dXJuIGFuY2VzdG9yID09PSBjdXJyZW50LnBhcmVudE5vZGU7fSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUubmF0aXZlRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY29tcG9uZW50XHJcbiAgICAgICAgICAgIGNvbnN0IHNDb21wID0gc2Mubm9kZVR5cGUgPT09IDEgPyB1dGlsLmdldFBhcmVudEVsZW1lbnQoc2MsICcuc2UtY29tcG9uZW50JykgOiBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBlQ29tcCA9IGVjLm5vZGVUeXBlID09PSAxID8gdXRpbC5nZXRQYXJlbnRFbGVtZW50KGVjLCAnLnNlLWNvbXBvbmVudCcpIDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKHNDb21wKSB1dGlsLnJlbW92ZUl0ZW0oc0NvbXApO1xyXG4gICAgICAgICAgICBpZiAoZUNvbXApIHV0aWwucmVtb3ZlSXRlbShlQ29tcCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25QYXN0ZV93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGlwYm9hcmREYXRhID0gdXRpbC5pc0lFID8gX3cuY2xpcGJvYXJkRGF0YSA6IGUuY2xpcGJvYXJkRGF0YTtcclxuICAgICAgICAgICAgaWYgKCFjbGlwYm9hcmREYXRhKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50Ll9kYXRhVHJhbnNmZXJBY3Rpb24oJ3Bhc3RlJywgZSwgY2xpcGJvYXJkRGF0YSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldENsaXBib2FyZENvbXBvbmVudDogZnVuY3Rpb24gKGUsIGluZm8sIGNsaXBib2FyZERhdGEpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBjbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvaHRtbCcsIGluZm8uY29tcG9uZW50Lm91dGVySFRNTCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25Db3B5X3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaXBib2FyZERhdGEgPSB1dGlsLmlzSUUgPyBfdy5jbGlwYm9hcmREYXRhIDogZS5jbGlwYm9hcmREYXRhO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbkNvcHkgPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb25zLm9uQ29weShlLCBjbGlwYm9hcmREYXRhLCBjb3JlKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBjb3JlLmN1cnJlbnRGaWxlQ29tcG9uZW50SW5mbztcclxuICAgICAgICAgICAgaWYgKGluZm8gJiYgIXV0aWwuaXNJRSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3NldENsaXBib2FyZENvbXBvbmVudChlLCBpbmZvLCBjbGlwYm9hcmREYXRhKTtcclxuICAgICAgICAgICAgICAgIHV0aWwuYWRkQ2xhc3MoaW5mby5jb21wb25lbnQsICdzZS1jb21wb25lbnQtY29weScpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29weSBlZmZlY3RcclxuICAgICAgICAgICAgICAgIF93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoaW5mby5jb21wb25lbnQsICdzZS1jb21wb25lbnQtY29weScpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTUwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uU2F2ZV93eXNpd3lnOiBmdW5jdGlvbiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uU2F2ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb25zLm9uU2F2ZShjb250ZW50LCBjb3JlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQ3V0X3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaXBib2FyZERhdGEgPSB1dGlsLmlzSUUgPyBfdy5jbGlwYm9hcmREYXRhIDogZS5jbGlwYm9hcmREYXRhO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucy5vbkN1dCA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbnMub25DdXQoZSwgY2xpcGJvYXJkRGF0YSwgY29yZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpbmZvID0gY29yZS5jdXJyZW50RmlsZUNvbXBvbmVudEluZm87XHJcbiAgICAgICAgICAgIGlmIChpbmZvICYmICF1dGlsLmlzSUUpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9zZXRDbGlwYm9hcmRDb21wb25lbnQoZSwgaW5mbywgY2xpcGJvYXJkRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oaW5mby5jb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25Ecm9wX3d5c2l3eWc6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLmlzUmVhZE9ubHkgfHwgdXRpbC5pc0lFKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhVHJhbnNmZXIgPSBlLmRhdGFUcmFuc2ZlcjtcclxuICAgICAgICAgICAgaWYgKCFkYXRhVHJhbnNmZXIpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgZXZlbnQuX3NldERyb3BMb2NhdGlvblNlbGVjdGlvbihlKTtcclxuICAgICAgICAgICAgY29yZS5yZW1vdmVOb2RlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMoY29yZS5jdXJyZW50Q29udHJvbGxlclRhcmdldCkpIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBldmVudC5fZGF0YVRyYW5zZmVyQWN0aW9uKCdkcm9wJywgZSwgZGF0YVRyYW5zZmVyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfc2V0RHJvcExvY2F0aW9uU2VsZWN0aW9uOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHsgc3RhcnRDb250YWluZXI6IG51bGwsIHN0YXJ0T2Zmc2V0OiBudWxsLCBlbmRDb250YWluZXI6IG51bGwsIGVuZE9mZnNldDogbnVsbCB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IHIgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZS5yYW5nZVBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgPSBlLnJhbmdlUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPSBlLnJhbmdlT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gZS5yYW5nZVBhcmVudDtcclxuICAgICAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IGUucmFuZ2VPZmZzZXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29yZS5fd2QuY2FyZXRSYW5nZUZyb21Qb2ludCkge1xyXG4gICAgICAgICAgICAgICAgciA9IGNvcmUuX3dkLmNhcmV0UmFuZ2VGcm9tUG9pbnQoZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgciA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgPSByLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPSByLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gci5lbmRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5lbmRPZmZzZXQgPSByLmVuZE9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHV0aWwuZ2V0UGFyZW50RWxlbWVudChyYW5nZS5zdGFydENvbnRhaW5lciwgdXRpbC5pc0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmVuZENvbnRhaW5lciA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5lbmRPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX2RhdGFUcmFuc2ZlckFjdGlvbjogZnVuY3Rpb24gKHR5cGUsIGUsIGRhdGEpIHtcclxuICAgICAgICAgICAgbGV0IHBsYWluVGV4dCwgY2xlYW5EYXRhO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc0lFKSB7XHJcbiAgICAgICAgICAgICAgICBwbGFpblRleHQgPSBkYXRhLmdldERhdGEoJ1RleHQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGNvcmUuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBEaXYgPSB1dGlsLmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcFJhbmdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjOiByYW5nZS5zdGFydENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICBzbzogcmFuZ2Uuc3RhcnRPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgZWM6IHJhbmdlLmVuZENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICBlbzogcmFuZ2UuZW5kT2Zmc2V0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRlbXBEaXYuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRlbXBEaXYuc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjA7IGxlZnQ6MDsgd2lkdGg6MXB4OyBoZWlnaHQ6MXB4OyBvdmVyZmxvdzpoaWRkZW47JztcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVsYXRpdmUuYXBwZW5kQ2hpbGQodGVtcERpdik7XHJcbiAgICAgICAgICAgICAgICB0ZW1wRGl2LmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gdGVtcERpdi5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5yZW1vdmVJdGVtKHRlbXBEaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0UmFuZ2UodGVtcFJhbmdlLnNjLCB0ZW1wUmFuZ2Uuc28sIHRlbXBSYW5nZS5lYywgdGVtcFJhbmdlLmVvKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5fc2V0Q2xpcGJvYXJkRGF0YSh0eXBlLCBlLCBwbGFpblRleHQsIGNsZWFuRGF0YSwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBsYWluVGV4dCA9IGRhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xyXG4gICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gZGF0YS5nZXREYXRhKCd0ZXh0L2h0bWwnKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5fc2V0Q2xpcGJvYXJkRGF0YSh0eXBlLCBlLCBwbGFpblRleHQsIGNsZWFuRGF0YSwgZGF0YSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3NldENsaXBib2FyZERhdGE6IGZ1bmN0aW9uICh0eXBlLCBlLCBwbGFpblRleHQsIGNsZWFuRGF0YSwgZGF0YSkge1xyXG4gICAgICAgICAgICAvLyBNUyB3b3JkLCBPbmVOb2RlLCBFeGNlbFxyXG4gICAgICAgICAgICBjb25zdCBNU0RhdGEgPSAvY2xhc3M9W1wiJ10qTXNvKE5vcm1hbHxMaXN0KS9pLnRlc3QoY2xlYW5EYXRhKSB8fCAvY29udGVudD1bXCInXSpXb3JkLkRvY3VtZW50L2kudGVzdChjbGVhbkRhdGEpIHx8IC9jb250ZW50PVtcIiddKk9uZU5vdGUuRmlsZS9pLnRlc3QoY2xlYW5EYXRhKSB8fCAvY29udGVudD1bXCInXSpFeGNlbC5TaGVldC9pLnRlc3QoY2xlYW5EYXRhKTtcclxuICAgICAgICAgICAgY29uc3Qgb25seVRleHQgPSAhY2xlYW5EYXRhO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFvbmx5VGV4dCkge1xyXG4gICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gY2xlYW5EYXRhLnJlcGxhY2UoL148aHRtbD5cXHI/XFxuPzxib2R5Plxccj9cXG4/XFx4M0MhLS1TdGFydEZyYWdtZW50LS1cXD58XFx4M0MhLS1FbmRGcmFnbWVudC0tPlxccj9cXG4/PFxcL2JvZHlcXD5cXHI/XFxuPzxcXC9odG1sPiQvZywgJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKE1TRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuRGF0YSA9IGNsZWFuRGF0YS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFpblRleHQgPSBwbGFpblRleHQucmVwbGFjZSgvXFxuL2csICcgJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSBjb3JlLmNsZWFuSFRNTChjbGVhbkRhdGEsIGNvcmUucGFzdGVUYWdzV2hpdGVsaXN0UmVnRXhwLCBjb3JlLnBhc3RlVGFnc0JsYWNrbGlzdFJlZ0V4cCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhbkRhdGEgPSB1dGlsLl9IVE1MQ29udmVydG9yKHBsYWluVGV4dCkucmVwbGFjZSgvXFxuL2csICc8YnI+Jyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1heENoYXJDb3VudCA9IGNvcmUuX2NoYXJDb3VudChjb3JlLl9jaGFyVHlwZUhUTUwgPyBjbGVhbkRhdGEgOiBwbGFpblRleHQpO1xyXG4gICAgICAgICAgICAvLyB1c2VyIGV2ZW50IC0gcGFzdGVcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdwYXN0ZScgJiYgdHlwZW9mIGZ1bmN0aW9ucy5vblBhc3RlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZ1bmN0aW9ucy5vblBhc3RlKGUsIGNsZWFuRGF0YSwgbWF4Q2hhckNvdW50LCBjb3JlKTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdXNlciBldmVudCAtIGRyb3BcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkcm9wJyAmJiB0eXBlb2YgZnVuY3Rpb25zLm9uRHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmdW5jdGlvbnMub25Ecm9wKGUsIGNsZWFuRGF0YSwgbWF4Q2hhckNvdW50LCBjb3JlKTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5EYXRhID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGZpbGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gZGF0YS5maWxlcztcclxuICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDAgJiYgIU1TRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKC9eaW1hZ2UvLnRlc3QoZmlsZXNbMF0udHlwZSkgJiYgY29yZS5wbHVnaW5zLmltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25zLmluc2VydEltYWdlKGZpbGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFtYXhDaGFyQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNsZWFuRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb25zLmluc2VydEhUTUwoY2xlYW5EYXRhLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbk1vdXNlTW92ZV93eXNpd3lnOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoY29yZS5pc0Rpc2FibGVkIHx8IGNvcmUuaXNSZWFkT25seSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSB1dGlsLmdldFBhcmVudEVsZW1lbnQoZS50YXJnZXQsIHV0aWwuaXNDb21wb25lbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lQnJlYWtlclN0eWxlID0gY29yZS5fbGluZUJyZWFrZXIuc3R5bGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50ICYmICFjb3JlLmN1cnJlbnRDb250cm9sbGVyTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3R4RWwgPSBjb250ZXh0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2Nyb2xsVG9wID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBlbCA9IGN0eEVsLnd5c2l3eWc7XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wICs9IGVsLnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChlbCAmJiAhL14oQk9EWXxIVE1MKSQvaS50ZXN0KGVsLm5vZGVOYW1lKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgd1Njcm9sbCA9IGN0eEVsLnd5c2l3eWcuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IGV2ZW50Ll9nZXRFZGl0b3JPZmZzZXRzKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VG9wID0gdXRpbC5nZXRPZmZzZXQoY29tcG9uZW50LCBjdHhFbC53eXNpd3lnRnJhbWUpLnRvcCArIHdTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gZS5wYWdlWSArIHNjcm9sbFRvcCArIChvcHRpb25zLmlmcmFtZSAmJiAhb3B0aW9ucy50b29sYmFyQ29udGFpbmVyID8gY3R4RWwudG9vbGJhci5vZmZzZXRIZWlnaHQgOiAwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBjb21wb25lbnRUb3AgKyAob3B0aW9ucy5pZnJhbWUgPyBzY3JvbGxUb3AgOiBvZmZzZXRzLnRvcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNMaXN0ID0gdXRpbC5pc0xpc3RDZWxsKGNvbXBvbmVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIGxldCBkaXIgPSAnJywgdG9wID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGlzTGlzdCA/ICFjb21wb25lbnQucHJldmlvdXNTaWJsaW5nIDogIXV0aWwuaXNGb3JtYXRFbGVtZW50KGNvbXBvbmVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSkgJiYgeSA8IChjICsgMjApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gY29tcG9uZW50VG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpciA9ICd0JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGlzTGlzdCA/ICFjb21wb25lbnQubmV4dFNpYmxpbmcgOiAhdXRpbC5pc0Zvcm1hdEVsZW1lbnQoY29tcG9uZW50Lm5leHRFbGVtZW50U2libGluZykpICYmIHkgPiAoYyArIGNvbXBvbmVudC5vZmZzZXRIZWlnaHQgLSAyMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBjb21wb25lbnRUb3AgKyBjb21wb25lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGRpciA9ICdiJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZUJyZWFrZXJTdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5fbGluZUJyZWFrQ29tcCA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIGNvcmUuX3ZhcmlhYmxlLl9saW5lQnJlYWtEaXIgPSBkaXI7XHJcbiAgICAgICAgICAgICAgICBsaW5lQnJlYWtlclN0eWxlLnRvcCA9ICh0b3AgLSB3U2Nyb2xsKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9saW5lQnJlYWtlckJ1dHRvbi5zdHlsZS5sZWZ0ID0gKHV0aWwuZ2V0T2Zmc2V0KGNvbXBvbmVudCkubGVmdCArIChjb21wb25lbnQub2Zmc2V0V2lkdGggLyAyKSAtIDE1KSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBsaW5lQnJlYWtlclN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB9IC8vIG9mZiBsaW5lIGJyZWFrZXJcclxuICAgICAgICAgICAgZWxzZSBpZiAobGluZUJyZWFrZXJTdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgICAgIGxpbmVCcmVha2VyU3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9lbnRlclByZXZlbnQoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc01vYmlsZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29yZS5fX2ZvY3VzVGVtcC5mb2N1cygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9vbk1vdXNlRG93bl9saW5lQnJlYWs6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfb25MaW5lQnJlYWs6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvcmUuX3ZhcmlhYmxlLl9saW5lQnJlYWtDb21wO1xyXG4gICAgICAgICAgICBjb25zdCBkaXIgPSAhdGhpcyA/IGNvcmUuX3ZhcmlhYmxlLl9saW5lQnJlYWtEaXIgOiB0aGlzO1xyXG4gICAgICAgICAgICBjb25zdCBpc0xpc3QgPSB1dGlsLmlzTGlzdENlbGwoY29tcG9uZW50LnBhcmVudE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdXRpbC5jcmVhdGVFbGVtZW50KGlzTGlzdCA/ICdCUicgOiB1dGlsLmlzQ2VsbChjb21wb25lbnQucGFyZW50Tm9kZSkgPyAnRElWJyA6IG9wdGlvbnMuZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgIGlmICghaXNMaXN0KSBmb3JtYXQuaW5uZXJIVE1MID0gJzxicj4nO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvcmUuX2NoYXJUeXBlSFRNTCAmJiAhY29yZS5jaGVja0NoYXJDb3VudChmb3JtYXQub3V0ZXJIVE1MLCAnYnl0ZS1odG1sJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmb3JtYXQsIGRpciA9PT0gJ3QnID8gY29tcG9uZW50IDogY29tcG9uZW50Lm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgY29yZS5fdmFyaWFibGUuX2xpbmVCcmVha0NvbXAgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9jdXNFbCA9IGlzTGlzdCA/IGZvcm1hdCA6IGZvcm1hdC5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICBjb3JlLnNldFJhbmdlKGZvY3VzRWwsIDEsIGZvY3VzRWwsIDEpO1xyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YWNrXHJcbiAgICAgICAgICAgIGNvcmUuaGlzdG9yeS5wdXNoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBfcmVzaXplT2JzZXJ2ZXI6IG51bGwsXHJcbiAgICAgICAgX3Rvb2xiYXJPYnNlcnZlcjogbnVsbCxcclxuICAgICAgICBfYWRkRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnRXeXNpd3lnID0gb3B0aW9ucy5pZnJhbWUgPyBjb3JlLl93dyA6IGNvbnRleHQuZWxlbWVudC53eXNpd3lnO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1Jlc2l6ZU9ic2VydmVyU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlciA9IG5ldyBfdy5SZXNpemVPYnNlcnZlcihmdW5jdGlvbihlbnRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29yZS5fX2NhbGxSZXNpemVGdW5jdGlvbigtMSwgZW50cmllc1swXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHRvb2xiYXIgZXZlbnQgKi9cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvb2xiYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2J1dHRvbnNFdmVudEhhbmRsZXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9tZW51VHJheS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fYnV0dG9uc0V2ZW50SGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50Lm9uQ2xpY2tfdG9vbGJhciwgZmFsc2UpO1xyXG4gICAgICAgICAgICAvKiogZWRpdG9yIGFyZWEgKi9cclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Lm9uTW91c2VEb3duX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQub25DbGlja193eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKHV0aWwuaXNJRSA/ICd0ZXh0aW5wdXQnIDogJ2lucHV0JywgZXZlbnQub25JbnB1dF93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQub25LZXlEb3duX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnQub25LZXlVcF93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIGV2ZW50Lm9uUGFzdGVfd3lzaXd5ZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcignY29weScsIGV2ZW50Lm9uQ29weV93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdjdXQnLCBldmVudC5vbkN1dF93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgZXZlbnQub25Ecm9wX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50Lm9uU2Nyb2xsX3d5c2l3eWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZXZlbnQub25Gb2N1c193eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZXZlbnQub25CbHVyX3d5c2l3eWcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBsaW5lIGJyZWFrZXIgKi9cclxuICAgICAgICAgICAgZXZlbnQuX2xpbmVCcmVha2VyQmluZCA9IHsgYTogZXZlbnQuX29uTGluZUJyZWFrLmJpbmQoJycpLCB0OiBldmVudC5fb25MaW5lQnJlYWsuYmluZCgndCcpLCBiOiBldmVudC5fb25MaW5lQnJlYWsuYmluZCgnYicpIH07XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudC5vbk1vdXNlTW92ZV93eXNpd3lnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvcmUuX2xpbmVCcmVha2VyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9vbk1vdXNlRG93bl9saW5lQnJlYWssIGZhbHNlKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudC5fbGluZUJyZWFrZXJCaW5kLmEsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX3QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2xpbmVCcmVha2VyQmluZC50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5saW5lQnJlYWtlcl9iLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9saW5lQnJlYWtlckJpbmQuYiwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgLyoqIEV2ZW50cyBhcmUgcmVnaXN0ZXJlZCBtb2JpbGUuICAqL1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGV2ZW50Lm9uTW91c2VEb3duX3d5c2l3eWcsIHtwYXNzaXZlOiB0cnVlLCB1c2VDYXB0dXJlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBldmVudC5vbkNsaWNrX3d5c2l3eWcsIHtwYXNzaXZlOiB0cnVlLCB1c2VDYXB0dXJlOiBmYWxzZX0pO1xyXG5cclxuICAgICAgICAgICAgLyoqIGNvZGUgdmlldyBhcmVhIGF1dG8gbGluZSAqL1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyAmJiAhb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQuX2NvZGVWaWV3QXV0b0hlaWdodCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIGV2ZW50Ll9jb2RlVmlld0F1dG9IZWlnaHQsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHJlc2l6aW5nQmFyICovXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmVsZW1lbnQucmVzaXppbmdCYXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICgvXFxkKy8udGVzdChvcHRpb25zLmhlaWdodCkgJiYgb3B0aW9ucy5yZXNpemVFbmFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQucmVzaXppbmdCYXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQub25Nb3VzZURvd25fcmVzaXppbmdCYXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjb250ZXh0LmVsZW1lbnQucmVzaXppbmdCYXIsICdzZS1yZXNpemluZy1ub25lJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKiBzZXQgcmVzcG9uc2UgdG9vbGJhciAqL1xyXG4gICAgICAgICAgICBldmVudC5fc2V0UmVzcG9uc2l2ZVRvb2xiYXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiByZXNwb25zaXZlIHRvb2xiYXIgb2JzZXJ2ZXIgKi9cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNSZXNpemVPYnNlcnZlclN1cHBvcnRlZCkgdGhpcy5fdG9vbGJhck9ic2VydmVyID0gbmV3IF93LlJlc2l6ZU9ic2VydmVyKGNvcmUucmVzZXRSZXNwb25zaXZlVG9vbGJhcik7XHJcblxyXG4gICAgICAgICAgICAvKiogd2luZG93IGV2ZW50ICovXHJcbiAgICAgICAgICAgIF93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGV2ZW50Lm9uUmVzaXplX3dpbmRvdywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdGlja3lUb29sYmFyID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIF93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGV2ZW50Lm9uU2Nyb2xsX3dpbmRvdywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3JlbW92ZUV2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50V3lzaXd5ZyA9IG9wdGlvbnMuaWZyYW1lID8gY29yZS5fd3cgOiBjb250ZXh0LmVsZW1lbnQud3lzaXd5ZztcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50Ll9idXR0b25zRXZlbnRIYW5kbGVyKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9tZW51VHJheS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5fYnV0dG9uc0V2ZW50SGFuZGxlcik7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQub25DbGlja190b29sYmFyKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5vbk1vdXNlRG93bl93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQub25DbGlja193eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIodXRpbC5pc0lFID8gJ3RleHRpbnB1dCcgOiAnaW5wdXQnLCBldmVudC5vbklucHV0X3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGV2ZW50Lm9uS2V5RG93bl93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnQub25LZXlVcF93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZXZlbnQub25QYXN0ZV93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvcHknLCBldmVudC5vbkNvcHlfd3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdjdXQnLCBldmVudC5vbkN1dF93eXNpd3lnKTtcclxuICAgICAgICAgICAgZXZlbnRXeXNpd3lnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBldmVudC5vbkRyb3Bfd3lzaXd5Zyk7XHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBldmVudC5vblNjcm9sbF93eXNpd3lnKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50V3lzaXd5Zy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudC5vbk1vdXNlTW92ZV93eXNpd3lnKTtcclxuICAgICAgICAgICAgY29yZS5fbGluZUJyZWFrZXJCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX29uTW91c2VEb3duX2xpbmVCcmVhayk7XHJcbiAgICAgICAgICAgIGNvcmUuX2xpbmVCcmVha2VyQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQuX2xpbmVCcmVha2VyQmluZC5hKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2xpbmVCcmVha2VyQmluZC50KTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmxpbmVCcmVha2VyX2IucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZXZlbnQuX2xpbmVCcmVha2VyQmluZC5iKTtcclxuICAgICAgICAgICAgZXZlbnQuX2xpbmVCcmVha2VyQmluZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGV2ZW50Lm9uTW91c2VEb3duX3d5c2l3eWcsIHtwYXNzaXZlOiB0cnVlLCB1c2VDYXB0dXJlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBldmVudC5vbkNsaWNrX3d5c2l3eWcsIHtwYXNzaXZlOiB0cnVlLCB1c2VDYXB0dXJlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBldmVudC5vbkZvY3VzX3d5c2l3eWcpO1xyXG4gICAgICAgICAgICBldmVudFd5c2l3eWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGV2ZW50Lm9uQmx1cl93eXNpd3lnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBldmVudC5fY29kZVZpZXdBdXRvSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmVsZW1lbnQucmVzaXppbmdCYXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5yZXNpemluZ0Jhci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudC5vbk1vdXNlRG93bl9yZXNpemluZ0Jhcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5fcmVzaXplT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll9yZXNpemVPYnNlcnZlci51bm9ic2VydmUoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5fcmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZXZlbnQuX3Rvb2xiYXJPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuX3Rvb2xiYXJPYnNlcnZlci51bm9ic2VydmUoY29udGV4dC5lbGVtZW50Ll90b29sYmFyU2hhZG93KTtcclxuICAgICAgICAgICAgICAgIGV2ZW50Ll90b29sYmFyT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBldmVudC5vblJlc2l6ZV93aW5kb3cpO1xyXG4gICAgICAgICAgICBfdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBldmVudC5vblNjcm9sbF93aW5kb3cpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9zZXRSZXNwb25zaXZlVG9vbGJhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3Jlc3BvbnNpdmVCdXR0b25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVCdXR0b25zID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnQuX3Jlc3BvbnNpdmVDdXJyZW50U2l6ZSA9ICdkZWZhdWx0JztcclxuICAgICAgICAgICAgY29uc3Qgc2l6ZUFycmF5ID0gZXZlbnQuX3Jlc3BvbnNpdmVCdXR0b25TaXplID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbnNPYmogPSBldmVudC5fcmVzcG9uc2l2ZUJ1dHRvbnMgPSB7ZGVmYXVsdDogX3Jlc3BvbnNpdmVCdXR0b25zWzBdfTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDEsIGxlbiA9IF9yZXNwb25zaXZlQnV0dG9ucy5sZW5ndGgsIHNpemUsIGJ1dHRvbkdyb3VwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3VwID0gX3Jlc3BvbnNpdmVCdXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IGJ1dHRvbkdyb3VwWzBdICogMTtcclxuICAgICAgICAgICAgICAgIHNpemVBcnJheS5wdXNoKHNpemUpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uc09ialtzaXplXSA9IGJ1dHRvbkdyb3VwWzFdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzaXplQXJyYXkuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSAtIGI7IH0pLnVuc2hpZnQoJ2RlZmF1bHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiBmdW5jdGlvbnMgKi9cclxuICAgIGNvbnN0IGZ1bmN0aW9ucyA9IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29yZSwgVXRpbCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb3JlOiBjb3JlLFxyXG4gICAgICAgIHV0aWw6IHV0aWwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZSBFdmVudCBPYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9ubG9hZDogbnVsbCxcclxuICAgICAgICBvblNjcm9sbDogbnVsbCxcclxuICAgICAgICBvbk1vdXNlRG93bjogbnVsbCxcclxuICAgICAgICBvbkNsaWNrOiBudWxsLFxyXG4gICAgICAgIG9uSW5wdXQ6IG51bGwsXHJcbiAgICAgICAgb25LZXlEb3duOiBudWxsLFxyXG4gICAgICAgIG9uS2V5VXA6IG51bGwsXHJcbiAgICAgICAgb25Db3B5OiBudWxsLFxyXG4gICAgICAgIG9uQ3V0OiBudWxsLFxyXG4gICAgICAgIG9uRm9jdXM6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFdmVudCBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZSBFdmVudCBPYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50cyBDdXJyZW50IGNvbnRlbnRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25CbHVyOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgZnVuY3Rpb25zXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIEN1cnJlbnQgY29udGVudHNcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uQ2hhbmdlOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRXZlbnQgZnVuY3Rpb25zXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIEN1cnJlbnQgY29udGVudHNcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uU2F2ZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IGZ1bmN0aW9ucyAoZHJvcCwgcGFzdGUpXHJcbiAgICAgICAgICogV2hlbiBmYWxzZSBpcyByZXR1cm5lZCwgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgc3RvcHBlZC5cclxuICAgICAgICAgKiBJZiB0aGUgc3RyaW5nIGlzIHJldHVybmVkLCB0aGUgY2xlYW5EYXRhIHZhbHVlIGlzIG1vZGlmaWVkIHRvIHRoZSByZXR1cm4gdmFsdWUuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGUgRXZlbnQgb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGVhbkRhdGEgSFRNTCBzdHJpbmcgbW9kaWZpZWQgZm9yIGVkaXRvciBmb3JtYXQuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBtYXhDaGFydENvdW50IG9wdGlvbiAodHJ1ZSBpZiBtYXggY2hhcmFjdGVyIGlzIGV4Y2VlZGVkKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW58U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uRHJvcDogbnVsbCxcclxuICAgICAgICBvblBhc3RlOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGp1c3QgYmVmb3JlIHRoZSBpbmxpbmUgdG9vbGJhciBpcyBwb3NpdGlvbmVkIGFuZCBkaXNwbGF5ZWQgb24gdGhlIHNjcmVlbi5cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRvb2xiYXIgVG9vbGJhciBFbGVtZW50XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHQgVGhlIGVkaXRvcidzIGNvbnRleHQgb2JqZWN0IChlZGl0b3IuZ2V0Q29udGV4dCgpKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd0lubGluZTogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCBqdXN0IGFmdGVyIHRoZSBjb250cm9sbGVyIGlzIHBvc2l0aW9uZWQgYW5kIGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuLlxyXG4gICAgICAgICAqIGNvbnRyb2xsZXIgLSBlZGl0aW5nIGVsZW1lbnRzIGRpc3BsYXllZCBvbiB0aGUgc2NyZWVuIFtpbWFnZSByZXNpemluZywgdGFibGUgZWRpdG9yLCBsaW5rIGVkaXRvci4uXV1cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRoYXQgY2FsbGVkIHRoZSBjb250cm9sbGVyXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gY29udHJvbGxlcnMgQXJyYXkgb2YgQ29udHJvbGxlciBlbGVtZW50c1xyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd0NvbnRyb2xsZXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBbiBldmVudCB3aGVuIHRvZ2dsaW5nIGJldHdlZW4gY29kZSB2aWV3IGFuZCB3eXNpd3lnIHZpZXcuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBpc0NvZGVWaWV3IFdoZXRoZXIgdGhlIGN1cnJlbnQgY29kZSB2aWV3IG1vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZUNvZGVWaWV3OiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQW4gZXZlbnQgd2hlbiB0b2dnbGluZyBmdWxsIHNjcmVlbi5cclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRnVsbFNjcmVlbiBXaGV0aGVyIHRoZSBjdXJyZW50IGZ1bGwgc2NyZWVuIG1vZGVcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZUZ1bGxTY3JlZW46IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBJdCByZXBsYWNlcyB0aGUgZGVmYXVsdCBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgaW1hZ2UgdXBsb2FkXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIFJlc3BvbnNlIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIElucHV0IGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogLSBsaW5rVmFsdWU6IExpbmsgdXJsIHZhbHVlXHJcbiAgICAgICAgICogLSBsaW5rTmV3V2luZG93OiBPcGVuIGluIG5ldyB3aW5kb3cgQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlucHV0V2lkdGg6IFZhbHVlIG9mIHdpZHRoIGlucHV0XHJcbiAgICAgICAgICogLSBpbnB1dEhlaWdodDogVmFsdWUgb2YgaGVpZ2h0IGlucHV0XHJcbiAgICAgICAgICogLSBhbGlnbjogQWxpZ24gQ2hlY2sgVmFsdWVcclxuICAgICAgICAgKiAtIGlzVXBkYXRlOiBVcGRhdGUgaW1hZ2UgaWYgdHJ1ZSwgY3JlYXRlIGltYWdlIGlmIGZhbHNlXHJcbiAgICAgICAgICogLSBlbGVtZW50OiBJZiBpc1VwZGF0ZSBpcyB0cnVlLCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGltYWdlLlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW1hZ2VVcGxvYWRIYW5kbGVyOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gSXQgcmVwbGFjZXMgdGhlIGRlZmF1bHQgY2FsbGJhY2sgZnVuY3Rpb24gb2YgdGhlIHZpZGVvIHVwbG9hZFxyXG4gICAgICAgICAqIEBwYXJhbSB4bWxIdHRwIHhtbEh0dHBSZXF1ZXN0IG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmZvIElucHV0IGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogLSBpbnB1dFdpZHRoOiBWYWx1ZSBvZiB3aWR0aCBpbnB1dFxyXG4gICAgICAgICAqIC0gaW5wdXRIZWlnaHQ6IFZhbHVlIG9mIGhlaWdodCBpbnB1dFxyXG4gICAgICAgICAqIC0gYWxpZ246IEFsaWduIENoZWNrIFZhbHVlXHJcbiAgICAgICAgICogLSBpc1VwZGF0ZTogVXBkYXRlIHZpZGVvIGlmIHRydWUsIGNyZWF0ZSB2aWRlbyBpZiBmYWxzZVxyXG4gICAgICAgICAqIC0gZWxlbWVudDogSWYgaXNVcGRhdGUgaXMgdHJ1ZSwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2aWRlby5cclxuICAgICAgICAgKiBAcGFyYW0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZpZGVvVXBsb2FkSGFuZGxlcjogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEl0IHJlcGxhY2VzIHRoZSBkZWZhdWx0IGNhbGxiYWNrIGZ1bmN0aW9uIG9mIHRoZSBhdWRpbyB1cGxvYWRcclxuICAgICAgICAgKiBAcGFyYW0geG1sSHR0cCB4bWxIdHRwUmVxdWVzdCBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0gaW5mbyBJbnB1dCBpbmZvcm1hdGlvblxyXG4gICAgICAgICAqIC0gaXNVcGRhdGU6IFVwZGF0ZSBhdWRpbyBpZiB0cnVlLCBjcmVhdGUgYXVkaW8gaWYgZmFsc2VcclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IElmIGlzVXBkYXRlIGlzIHRydWUsIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgYXVkaW8uXHJcbiAgICAgICAgICogQHBhcmFtIGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBhdWRpb1VwbG9hZEhhbmRsZXI6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgYmVmb3JlIHRoZSBpbWFnZSBpcyB1cGxvYWRlZFxyXG4gICAgICAgICAqIElmIHRydWUgaXMgcmV0dXJuZWQsIHRoZSBpbnRlcm5hbCB1cGxvYWQgcHJvY2VzcyBydW5zIG5vcm1hbGx5LlxyXG4gICAgICAgICAqIElmIGZhbHNlIGlzIHJldHVybmVkLCBubyBpbWFnZSB1cGxvYWQgaXMgcGVyZm9ybWVkLlxyXG4gICAgICAgICAqIElmIG5ldyBmaWxlTGlzdCBhcmUgcmV0dXJuZWQsICByZXBsYWNlZCB0aGUgcHJldmlvdXMgZmlsZUxpc3RcclxuICAgICAgICAgKiBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbGVzIEZpbGVzIGFycmF5XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gaW5mbzoge1xyXG4gICAgICAgICAqIC0gbGlua1ZhbHVlOiBMaW5rIHVybCB2YWx1ZVxyXG4gICAgICAgICAqIC0gbGlua05ld1dpbmRvdzogT3BlbiBpbiBuZXcgd2luZG93IENoZWNrIFZhbHVlXHJcbiAgICAgICAgICogLSBpbnB1dFdpZHRoOiBWYWx1ZSBvZiB3aWR0aCBpbnB1dFxyXG4gICAgICAgICAqIC0gaW5wdXRIZWlnaHQ6IFZhbHVlIG9mIGhlaWdodCBpbnB1dFxyXG4gICAgICAgICAqIC0gYWxpZ246IEFsaWduIENoZWNrIFZhbHVlXHJcbiAgICAgICAgICogLSBpc1VwZGF0ZTogVXBkYXRlIGltYWdlIGlmIHRydWUsIGNyZWF0ZSBpbWFnZSBpZiBmYWxzZVxyXG4gICAgICAgICAqIC0gZWxlbWVudDogSWYgaXNVcGRhdGUgaXMgdHJ1ZSwgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpbWFnZS5cclxuICAgICAgICAgKiB9XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGxvYWRIYW5kbGVyIElmIHVuZGVmaW5lZCBpcyByZXR1cm5lZCwgaXQgd2FpdHMgdW50aWwgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgZXhlY3V0ZWQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgXCJ1cGxvYWRIYW5kbGVyXCIgaXMgYW4gdXBsb2FkIGZ1bmN0aW9uIHdpdGggXCJjb3JlXCIgYW5kIFwiaW5mb1wiIGJvdW5kLlxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFt1cGxvYWQgZmlsZXNdIDogdXBsb2FkSGFuZGxlcihmaWxlcyBvciBbbmV3IEZpbGUoLi4uKSxdKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtlcnJvcl0gICAgICAgIDogdXBsb2FkSGFuZGxlcihcIkVycm9yIG1lc3NhZ2VcIilcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbSnVzdCBmaW5pc2hdICA6IHVwbG9hZEhhbmRsZXIoKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtkaXJlY3RseSByZWdpc3Rlcl0gOiB1cGxvYWRIYW5kbGVyKHJlc3BvbnNlKSAvLyBTYW1lIGZvcm1hdCBhcyBcImltYWdlVXBsb2FkVXJsXCIgcmVzcG9uc2VcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXgpIHtcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJlcnJvck1lc3NhZ2VcIjogXCJpbnNlcnQgZXJyb3IgbWVzc2FnZVwiLFxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdFwiOiBbIHsgXCJ1cmxcIjogXCIuLi5cIiwgXCJuYW1lXCI6IFwiLi4uXCIsIFwic2l6ZVwiOiBcIjk5OVwiIH0sIF1cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufEFycmF5fHVuZGVmaW5lZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkltYWdlVXBsb2FkQmVmb3JlOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgYmVmb3JlIHRoZSB2aWRlbyBpcyB1cGxvYWRlZFxyXG4gICAgICAgICAqIElmIHRydWUgaXMgcmV0dXJuZWQsIHRoZSBpbnRlcm5hbCB1cGxvYWQgcHJvY2VzcyBydW5zIG5vcm1hbGx5LlxyXG4gICAgICAgICAqIElmIGZhbHNlIGlzIHJldHVybmVkLCBubyB2aWRlbyhpZnJhbWUsIHZpZGVvKSB1cGxvYWQgaXMgcGVyZm9ybWVkLlxyXG4gICAgICAgICAqIElmIG5ldyBmaWxlTGlzdCBhcmUgcmV0dXJuZWQsICByZXBsYWNlZCB0aGUgcHJldmlvdXMgZmlsZUxpc3RcclxuICAgICAgICAgKiBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbGVzIEZpbGVzIGFycmF5XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gaW5mbzoge1xyXG4gICAgICAgICAqIC0gaW5wdXRXaWR0aDogVmFsdWUgb2Ygd2lkdGggaW5wdXRcclxuICAgICAgICAgKiAtIGlucHV0SGVpZ2h0OiBWYWx1ZSBvZiBoZWlnaHQgaW5wdXRcclxuICAgICAgICAgKiAtIGFsaWduOiBBbGlnbiBDaGVjayBWYWx1ZVxyXG4gICAgICAgICAqIC0gaXNVcGRhdGU6IFVwZGF0ZSB2aWRlbyBpZiB0cnVlLCBjcmVhdGUgdmlkZW8gaWYgZmFsc2VcclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IElmIGlzVXBkYXRlIGlzIHRydWUsIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmlkZW8uXHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBsb2FkSGFuZGxlciBJZiB1bmRlZmluZWQgaXMgcmV0dXJuZWQsIGl0IHdhaXRzIHVudGlsIFwidXBsb2FkSGFuZGxlclwiIGlzIGV4ZWN1dGVkLlxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFwidXBsb2FkSGFuZGxlclwiIGlzIGFuIHVwbG9hZCBmdW5jdGlvbiB3aXRoIFwiY29yZVwiIGFuZCBcImluZm9cIiBib3VuZC5cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbdXBsb2FkIGZpbGVzXSA6IHVwbG9hZEhhbmRsZXIoZmlsZXMgb3IgW25ldyBGaWxlKC4uLiksXSlcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbZXJyb3JdICAgICAgICA6IHVwbG9hZEhhbmRsZXIoXCJFcnJvciBtZXNzYWdlXCIpXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW0p1c3QgZmluaXNoXSAgOiB1cGxvYWRIYW5kbGVyKClcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBbZGlyZWN0bHkgcmVnaXN0ZXJdIDogdXBsb2FkSGFuZGxlcihyZXNwb25zZSkgLy8gU2FtZSBmb3JtYXQgYXMgXCJ2aWRlb1VwbG9hZFVybFwiIHJlc3BvbnNlXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4KSB7XHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwiZXJyb3JNZXNzYWdlXCI6IFwiaW5zZXJ0IGVycm9yIG1lc3NhZ2VcIixcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXN1bHRcIjogWyB7IFwidXJsXCI6IFwiLi4uXCIsIFwibmFtZVwiOiBcIi4uLlwiLCBcInNpemVcIjogXCI5OTlcIiB9LCBdXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbnxBcnJheXx1bmRlZmluZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25WaWRlb1VwbG9hZEJlZm9yZTogbnVsbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIGJlZm9yZSB0aGUgYXVkaW8gaXMgdXBsb2FkZWRcclxuICAgICAgICAgKiBJZiB0cnVlIGlzIHJldHVybmVkLCB0aGUgaW50ZXJuYWwgdXBsb2FkIHByb2Nlc3MgcnVucyBub3JtYWxseS5cclxuICAgICAgICAgKiBJZiBmYWxzZSBpcyByZXR1cm5lZCwgbm8gYXVkaW8gdXBsb2FkIGlzIHBlcmZvcm1lZC5cclxuICAgICAgICAgKiBJZiBuZXcgZmlsZUxpc3QgYXJlIHJldHVybmVkLCAgcmVwbGFjZWQgdGhlIHByZXZpb3VzIGZpbGVMaXN0XHJcbiAgICAgICAgICogSWYgdW5kZWZpbmVkIGlzIHJldHVybmVkLCBpdCB3YWl0cyB1bnRpbCBcInVwbG9hZEhhbmRsZXJcIiBpcyBleGVjdXRlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWxlcyBGaWxlcyBhcnJheVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIGluZm86IHtcclxuICAgICAgICAgKiAtIGlzVXBkYXRlOiBVcGRhdGUgYXVkaW8gaWYgdHJ1ZSwgY3JlYXRlIGF1ZGlvIGlmIGZhbHNlXHJcbiAgICAgICAgICogLSBlbGVtZW50OiBJZiBpc1VwZGF0ZSBpcyB0cnVlLCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGF1ZGlvLlxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwbG9hZEhhbmRsZXIgSWYgdW5kZWZpbmVkIGlzIHJldHVybmVkLCBpdCB3YWl0cyB1bnRpbCBcInVwbG9hZEhhbmRsZXJcIiBpcyBleGVjdXRlZC5cclxuICAgICAgICAgKiAgICAgICAgICAgICAgICBcInVwbG9hZEhhbmRsZXJcIiBpcyBhbiB1cGxvYWQgZnVuY3Rpb24gd2l0aCBcImNvcmVcIiBhbmQgXCJpbmZvXCIgYm91bmQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW3VwbG9hZCBmaWxlc10gOiB1cGxvYWRIYW5kbGVyKGZpbGVzIG9yIFtuZXcgRmlsZSguLi4pLF0pXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW2Vycm9yXSAgICAgICAgOiB1cGxvYWRIYW5kbGVyKFwiRXJyb3IgbWVzc2FnZVwiKVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgIFtKdXN0IGZpbmlzaF0gIDogdXBsb2FkSGFuZGxlcigpXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgW2RpcmVjdGx5IHJlZ2lzdGVyXSA6IHVwbG9hZEhhbmRsZXIocmVzcG9uc2UpIC8vIFNhbWUgZm9ybWF0IGFzIFwiYXVkaW9VcGxvYWRVcmxcIiByZXNwb25zZVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleCkge1xyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcImVycm9yTWVzc2FnZVwiOiBcImluc2VydCBlcnJvciBtZXNzYWdlXCIsXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0XCI6IFsgeyBcInVybFwiOiBcIi4uLlwiLCBcIm5hbWVcIjogXCIuLi5cIiwgXCJzaXplXCI6IFwiOTk5XCIgfSwgXVxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICogQHJldHVybnMge0Jvb2xlYW58QXJyYXl8dW5kZWZpbmVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uQXVkaW9VcGxvYWRCZWZvcmU6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgaW1hZ2UgaXMgdXBsb2FkZWQsIHVwZGF0ZWQsIGRlbGV0ZWRcclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldEVsZW1lbnQgVGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVXBsb2FkZWQgaW5kZXhcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgVXBsb2FkIHN0YXR1cyAoJ2NyZWF0ZScsICd1cGRhdGUnLCAnZGVsZXRlJylcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5mbyBJbWFnZSBpbmZvIG9iamVjdFxyXG4gICAgICAgICAqIC0gaW5kZXg6IGRhdGEgaW5kZXhcclxuICAgICAgICAgKiAtIG5hbWU6IGZpbGUgbmFtZVxyXG4gICAgICAgICAqIC0gc2l6ZTogZmlsZSBzaXplXHJcbiAgICAgICAgICogLSBzZWxlY3Q6IHNlbGVjdCBmdW5jdGlvblxyXG4gICAgICAgICAqIC0gZGVsZXRlOiBkZWxldGUgZnVuY3Rpb25cclxuICAgICAgICAgKiAtIGVsZW1lbnQ6IHRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgICogLSBzcmM6IHNyYyBhdHRyaWJ1dGUgb2YgdGFnXHJcbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlbWFpbmluZ0ZpbGVzQ291bnQgQ291bnQgb2YgcmVtYWluaW5nIGZpbGVzIHRvIHVwbG9hZCAoMCB3aGVuIGFkZGVkIGFzIGEgdXJsKVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25JbWFnZVVwbG9hZDogbnVsbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgdmlkZW8oaWZyYW1lLCB2aWRlbykgaXMgaXMgdXBsb2FkZWQsIHVwZGF0ZWQsIGRlbGV0ZWRcclxuICAgICAgICAqIC0tIGFyZ3VtZW50cyBpcyBzYW1lIFwib25JbWFnZVVwbG9hZFwiIC0tXHJcbiAgICAgICAgKi9cclxuICAgICAgICBvblZpZGVvVXBsb2FkOiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSBhdWRpbyBpcyBpcyB1cGxvYWRlZCwgdXBkYXRlZCwgZGVsZXRlZFxyXG4gICAgICAgICogLS0gYXJndW1lbnRzIGlzIHNhbWUgXCJvbkltYWdlVXBsb2FkXCIgLS1cclxuICAgICAgICAqL1xyXG4gICAgICAgIG9uQXVkaW9VcGxvYWQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgd2hlbiB0aGUgaW1hZ2UgaXMgdXBsb2FkIGZhaWxlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlcnJvck1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHQgUmVzcG9uc2UgT2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNvcmUgQ29yZSBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBvbkltYWdlVXBsb2FkRXJyb3I6IG51bGwsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENhbGxlZCB3aGVuIHRoZSB2aWRlbyhpZnJhbWUsIHZpZGVvKSB1cGxvYWQgZmFpbGVkXHJcbiAgICAgICAgICogLS0gYXJndW1lbnRzIGlzIHNhbWUgXCJvbkltYWdlVXBsb2FkRXJyb3JcIiAtLVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9uVmlkZW9VcGxvYWRFcnJvcjogbnVsbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlIGF1ZGlvIHVwbG9hZCBmYWlsZWRcclxuICAgICAgICAgKiAtLSBhcmd1bWVudHMgaXMgc2FtZSBcIm9uSW1hZ2VVcGxvYWRFcnJvclwiIC0tXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25BdWRpb1VwbG9hZEVycm9yOiBudWxsLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2FsbGVkIHdoZW4gdGhlIGVkaXRvciBpcyByZXNpemVkIHVzaW5nIHRoZSBib3R0b20gYmFyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25SZXNpemVFZGl0b3I6IG51bGwsXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYWxsZWQgYWZ0ZXIgdGhlIFwic2V0VG9vbGJhckJ1dHRvbnNcIiBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAqIENhbiBiZSB1c2VkIHRvIHR3ZWFrIGJ1dHRvbnMgcHJvcGVydGllcyAodXNlZnVsIGZvciBjdXN0b20gYnV0dG9ucylcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBidXR0b25MaXN0IEJ1dHRvbiBsaXN0IFxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3JlIENvcmUgb2JqZWN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb25TZXRUb29sYmFyQnV0dG9uczogbnVsbCxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlc2V0IHRoZSBidXR0b25zIG9uIHRoZSB0b29sYmFyLiAoRWRpdG9yIGlzIG5vdCByZWxvYWRlZClcclxuICAgICAgICAgKiBZb3UgY2Fubm90IHNldCBhIG5ldyBwbHVnaW4gZm9yIHRoZSBidXR0b24uXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gYnV0dG9uTGlzdCBCdXR0b24gbGlzdCBcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRUb29sYmFyQnV0dG9uczogZnVuY3Rpb24gKGJ1dHRvbkxpc3QpIHtcclxuICAgICAgICAgICAgY29yZS5zdWJtZW51T2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcbiAgICAgICAgICAgIGNvcmUubW9yZUxheWVyT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBuZXdUb29sYmFyID0gX0NvbnN0cnVjdG9yLl9jcmVhdGVUb29sQmFyKF9kLCBidXR0b25MaXN0LCBjb3JlLnBsdWdpbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBfcmVzcG9uc2l2ZUJ1dHRvbnMgPSBuZXdUb29sYmFyLnJlc3BvbnNpdmVCdXR0b25zO1xyXG4gICAgICAgICAgICBldmVudC5fc2V0UmVzcG9uc2l2ZVRvb2xiYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC50b29sYmFyLnJlcGxhY2VDaGlsZChuZXdUb29sYmFyLl9idXR0b25UcmF5LCBjb250ZXh0LmVsZW1lbnQuX2J1dHRvblRyYXkpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0gX0NvbnRleHQoY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQsIGNvcmUuX2dldENvbnN0cnVjdGVkKGNvbnRleHQuZWxlbWVudCksIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50ID0gbmV3Q29udGV4dC5lbGVtZW50O1xyXG4gICAgICAgICAgICBjb250ZXh0LnRvb2wgPSBuZXdDb250ZXh0LnRvb2w7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlmcmFtZSkgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcgPSBjb3JlLl93ZC5ib2R5O1xyXG5cclxuICAgICAgICAgICAgY29yZS5fcmVjb3ZlckJ1dHRvblN0YXRlcygpO1xyXG4gICAgICAgICAgICBjb3JlLl9jYWNoaW5nQnV0dG9ucygpO1xyXG4gICAgICAgICAgICBjb3JlLmhpc3RvcnkuX3Jlc2V0Q2FjaGluZ0J1dHRvbigpO1xyXG5cclxuICAgICAgICAgICAgY29yZS5lZmZlY3ROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaGFzRm9jdXMpIGV2ZW50Ll9hcHBseVRhZ0VmZmVjdHMoKTtcclxuICAgICAgICAgICAgaWYgKGNvcmUuaXNSZWFkT25seSkgdXRpbC5zZXREaXNhYmxlZEJ1dHRvbnModHJ1ZSwgY29yZS5yZXNpemluZ0Rpc2FibGVkQnV0dG9ucyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuY3Rpb25zLm9uU2V0VG9vbGJhckJ1dHRvbnMgPT09ICdmdW5jdGlvbicpIGZ1bmN0aW9ucy5vblNldFRvb2xiYXJCdXR0b25zKG5ld1Rvb2xiYXIuX2J1dHRvblRyYXkucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJyksIGNvcmUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGQgb3IgcmVzZXQgb3B0aW9uIHByb3BlcnR5IChFZGl0b3IgaXMgcmVsb2FkZWQpXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IF9vcHRpb25zIE9wdGlvbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiAoX29wdGlvbnMpIHtcclxuICAgICAgICAgICAgZXZlbnQuX3JlbW92ZUV2ZW50KCk7XHJcbiAgICAgICAgICAgIGNvcmUuX3Jlc2V0Q29tcG9uZW50cygpO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5yZW1vdmVDbGFzcyhjb3JlLl9zdHlsZUNvbW1hbmRNYXAuc2hvd0Jsb2NrcywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUNsYXNzKGNvcmUuX3N0eWxlQ29tbWFuZE1hcC5jb2RlVmlldywgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICBjb3JlLl92YXJpYWJsZS5pc0NvZGVWaWV3ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvcmUuX2lmcmFtZUF1dG8gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgY29yZS5wbHVnaW5zID0gX29wdGlvbnMucGx1Z2lucyB8fCBjb3JlLnBsdWdpbnM7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlT3B0aW9ucyA9IFtvcHRpb25zLCBfb3B0aW9uc10ucmVkdWNlKGZ1bmN0aW9uIChpbml0LCBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaGFzT3duKG9wdGlvbiwga2V5KSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3BsdWdpbnMnICYmIG9wdGlvbltrZXldICYmIGluaXRba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGluaXRba2V5XSwgbyA9IG9wdGlvbltrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gaS5sZW5ndGggPyBpIDogX3cuT2JqZWN0LmtleXMoaSkubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIGlbbmFtZV07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gby5sZW5ndGggPyBvIDogX3cuT2JqZWN0LmtleXMobykubWFwKGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG9bbmFtZV07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSAoby5maWx0ZXIoZnVuY3Rpb24odmFsKSB7IHJldHVybiBpLmluZGV4T2YodmFsKSA9PT0gLTE7IH0pKS5jb25jYXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFtrZXldID0gb3B0aW9uW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluaXQ7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gY29udGV4dC5lbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBfaW5pdEhUTUwgPSBlbC53eXNpd3lnLmlubmVySFRNTDtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBvcHRpb25cclxuICAgICAgICAgICAgY29uc3QgY29ucyA9IF9Db25zdHJ1Y3Rvci5fc2V0T3B0aW9ucyhtZXJnZU9wdGlvbnMsIGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnMuY2FsbEJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgICAgIHBsdWdpbkNhbGxCdXR0b25zID0gY29ucy5jYWxsQnV0dG9ucztcclxuICAgICAgICAgICAgICAgIGNvcmUuaW5pdFBsdWdpbnMgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnMucGx1Z2lucykge1xyXG4gICAgICAgICAgICAgICAgY29yZS5wbHVnaW5zID0gcGx1Z2lucyA9IGNvbnMucGx1Z2lucztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcmVzZXQgY29udGV4dFxyXG4gICAgICAgICAgICBpZiAoZWwuX21lbnVUcmF5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgdGhpcy5fbWVudVRyYXkgPSB7fTtcclxuICAgICAgICAgICAgX3Jlc3BvbnNpdmVCdXR0b25zID0gY29ucy50b29sYmFyLnJlc3BvbnNpdmVCdXR0b25zO1xyXG4gICAgICAgICAgICBjb3JlLm9wdGlvbnMgPSBvcHRpb25zID0gbWVyZ2VPcHRpb25zO1xyXG4gICAgICAgICAgICBjb3JlLmxhbmcgPSBsYW5nID0gb3B0aW9ucy5sYW5nO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBlbC53eXNpd3lnRnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLl9zZXRJZnJhbWVEb2N1bWVudCh0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLl9zZXRPcHRpb25zSW5pdChlbCwgX2luaXRIVE1MKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbC5lZGl0b3JBcmVhLmFwcGVuZENoaWxkKGVsLnd5c2l3eWdGcmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaWZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb3JlLl9zZXRPcHRpb25zSW5pdChlbCwgX2luaXRIVE1MKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXQgXCJvcHRpb25zLmRlZmF1bHRTdHlsZVwiIHN0eWxlLlxyXG4gICAgICAgICAqIERlZmluZSB0aGUgc3R5bGUgb2YgdGhlIGVkaXQgYXJlYVxyXG4gICAgICAgICAqIEl0IGNhbiBhbHNvIGJlIGRlZmluZWQgd2l0aCB0aGUgXCJzZXRPcHRpb25zXCIgbWV0aG9kLCBidXQgdGhlIFwic2V0RGVmYXVsdFN0eWxlXCIgbWV0aG9kIGRvZXMgbm90IHJlbmRlciB0aGUgZWRpdG9yIGFnYWluLlxyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZSBTdHlsZSBzdHJpbmdcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXREZWZhdWx0U3R5bGU6IGZ1bmN0aW9uIChzdHlsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdTdHlsZXMgPSBvcHRpb25zLl9lZGl0b3JTdHlsZXMgPSB1dGlsLl9zZXREZWZhdWx0T3B0aW9uU3R5bGUob3B0aW9ucywgc3R5bGUpO1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IGNvbnRleHQuZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIC8vIHRvcCBhcmVhXHJcbiAgICAgICAgICAgIGVsLnRvcEFyZWEuc3R5bGUuY3NzVGV4dCA9IG5ld1N0eWxlcy50b3A7XHJcbiAgICAgICAgICAgIC8vIGNvZGUgdmlld1xyXG4gICAgICAgICAgICBlbC5jb2RlLnN0eWxlLmNzc1RleHQgPSBvcHRpb25zLl9lZGl0b3JTdHlsZXMuZnJhbWU7XHJcbiAgICAgICAgICAgIGVsLmNvZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0ID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgIGVsLmNvZGUuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsLmNvZGUuc3R5bGUub3ZlcmZsb3cgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3eXNpd3lnIGZyYW1lXHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGVsLnd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0ID0gbmV3U3R5bGVzLmZyYW1lICsgbmV3U3R5bGVzLmVkaXRvcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsLnd5c2l3eWdGcmFtZS5zdHlsZS5jc3NUZXh0ID0gbmV3U3R5bGVzLmZyYW1lO1xyXG4gICAgICAgICAgICAgICAgZWwud3lzaXd5Zy5zdHlsZS5jc3NUZXh0ID0gbmV3U3R5bGVzLmVkaXRvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGEgbm90aWNlIGFyZWFcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBOb3RpY2UgbWVzc2FnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5vdGljZU9wZW46IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGNvcmUubm90aWNlLm9wZW4uY2FsbChjb3JlLCBtZXNzYWdlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2xvc2UgYSBub3RpY2UgYXJlYVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5vdGljZUNsb3NlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvcmUubm90aWNlLmNsb3NlLmNhbGwoY29yZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvcHlpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBlZGl0b3IgdG8gdGhlIG9yaWdpbmFsIHRleHRhcmVhIGFuZCBleGVjdXRlIG9uU2F2ZSBjYWxsYmFja1xyXG4gICAgICAgICAqICogbm90IHdvcmtpbmcgZHVyaW5nIGVuYWJsZWQgY29kZVZpZXcgbW9kZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGVudHMgPSBjb3JlLmdldENvbnRlbnRzKGZhbHNlKTtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lm9yaWdpbkVsZW1lbnQudmFsdWUgPSBjb250ZW50cztcclxuICAgICAgICAgICAgZXZlbnQub25TYXZlX3d5c2l3eWcoY29udGVudHMsIGNvcmUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBzdW5lZGl0b3IncyBjb250ZXh0IG9iamVjdC4gQ29udGFpbnMgc2V0dGluZ3MsIHBsdWdpbnMsIGFuZCBjYWNoZWQgZWxlbWVudCBvYmplY3RzXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXRzIHRoZSBjb250ZW50cyBvZiB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICogKiBub3Qgd29ya2luZyBkdXJpbmcgZW5hYmxlZCBjb2RlVmlldyBtb2RlXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBvbmx5Q29udGVudHMgLSBSZXR1cm4gb25seSB0aGUgY29udGVudHMgb2YgdGhlIGJvZHkgd2l0aG91dCBoZWFkZXJzIHdoZW4gdGhlIFwiZnVsbFBhZ2VcIiBvcHRpb24gaXMgdHJ1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0Q29udGVudHM6IGZ1bmN0aW9uIChvbmx5Q29udGVudHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvcmUuZ2V0Q29udGVudHMob25seUNvbnRlbnRzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyBvbmx5IHRoZSB0ZXh0IG9mIHRoZSBzdW5lZGl0b3IgY29udGVudHNcclxuICAgICAgICAgKiAqIG5vdCB3b3JraW5nIGR1cmluZyBlbmFibGVkIGNvZGVWaWV3IG1vZGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFRleHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnRleHRDb250ZW50O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIGVkaXRvcidzIG51bWJlciBvZiBjaGFyYWN0ZXJzIG9yIGJpbmFyeSBkYXRhIHNpemUuXHJcbiAgICAgICAgICogWW91IGNhbiB1c2UgdGhlIFwiY2hhckNvdW50ZXJUeXBlXCIgb3B0aW9uIGZvcm1hdC5cclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBjaGFyQ291bnRlclR5cGUgb3B0aW9ucyAtIGNoYXJDb3VudGVyVHlwZSAoJ2NoYXInLCAnYnl0ZScsICdieXRlLWh0bWwnKVxyXG4gICAgICAgICAqIElmIGFyZ3VtZW50IGlzIG5vIHZhbHVlLCB0aGUgY3VycmVudGx5IHNldCBcImNoYXJDb3VudGVyVHlwZVwiIG9wdGlvbiBpcyB1c2VkLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0Q2hhckNvdW50OiBmdW5jdGlvbiAoY2hhckNvdW50ZXJUeXBlKSB7XHJcbiAgICAgICAgICAgIGNoYXJDb3VudGVyVHlwZSA9IHR5cGVvZiBjaGFyQ291bnRlclR5cGUgPT09ICdzdHJpbmcnID8gY2hhckNvdW50ZXJUeXBlIDogb3B0aW9ucy5jaGFyQ291bnRlclR5cGU7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3JlLmdldENoYXJMZW5ndGgoKGNvcmUuX2NoYXJUeXBlSFRNTCA/IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLmlubmVySFRNTCA6IGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnRleHRDb250ZW50KSwgY2hhckNvdW50ZXJUeXBlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB1cGxvYWRlZCBpbWFnZXMgaW5mb3JtYXRpb25zXHJcbiAgICAgICAgICogLSBpbmRleDogZGF0YSBpbmRleFxyXG4gICAgICAgICAqIC0gbmFtZTogZmlsZSBuYW1lXHJcbiAgICAgICAgICogLSBzaXplOiBmaWxlIHNpemVcclxuICAgICAgICAgKiAtIHNlbGVjdDogc2VsZWN0IGZ1bmN0aW9uXHJcbiAgICAgICAgICogLSBkZWxldGU6IGRlbGV0ZSBmdW5jdGlvblxyXG4gICAgICAgICAqIC0gZWxlbWVudDogdGFyZ2V0IGVsZW1lbnRcclxuICAgICAgICAgKiAtIHNyYzogc3JjIGF0dHJpYnV0ZSBvZiB0YWdcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0SW1hZ2VzSW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5pbWFnZSA/IGNvbnRleHQuaW1hZ2UuX2luZm9MaXN0IDogW107XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEdldHMgdXBsb2FkZWQgZmlsZXMocGx1Z2luIHVzaW5nIGZpbGVNYW5hZ2VyKSBpbmZvcm1hdGlvbiBsaXN0LlxyXG4gICAgICAgICAqIGltYWdlOiBbaW1nXSwgdmlkZW86IFt2aWRlbywgaWZyYW1lXSwgYXVkaW86IFthdWRpb11cclxuICAgICAgICAgKiBXaGVuIHRoZSBhcmd1bWVudCB2YWx1ZSBpcyAnaW1hZ2UnLCBpdCBpcyB0aGUgc2FtZSBmdW5jdGlvbiBhcyBcImdldEltYWdlc0luZm9cIi5cclxuICAgICAgICAgKiAtIGluZGV4OiBkYXRhIGluZGV4XHJcbiAgICAgICAgICogLSBuYW1lOiBmaWxlIG5hbWVcclxuICAgICAgICAgKiAtIHNpemU6IGZpbGUgc2l6ZVxyXG4gICAgICAgICAqIC0gc2VsZWN0OiBzZWxlY3QgZnVuY3Rpb25cclxuICAgICAgICAgKiAtIGRlbGV0ZTogZGVsZXRlIGZ1bmN0aW9uXHJcbiAgICAgICAgICogLSBlbGVtZW50OiB0YXJnZXQgZWxlbWVudFxyXG4gICAgICAgICAqIC0gc3JjOiBzcmMgYXR0cmlidXRlIG9mIHRhZ1xyXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5OYW1lIFBsdWdpbiBuYW1lIChpbWFnZSwgdmlkZW8sIGF1ZGlvKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRGaWxlc0luZm86IGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0W3BsdWdpbk5hbWVdID8gY29udGV4dFtwbHVnaW5OYW1lXS5faW5mb0xpc3QgOiBbXTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVXBsb2FkIGltYWdlcyB1c2luZyBpbWFnZSBwbHVnaW5cclxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGVMaXN0fSBmaWxlcyBGaWxlTGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc2VydEltYWdlOiBmdW5jdGlvbiAoZmlsZXMpIHtcclxuICAgICAgICAgICAgaWYgKCFjb3JlLnBsdWdpbnMuaW1hZ2UgfHwgIWZpbGVzKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvcmUuaW5pdFBsdWdpbnMuaW1hZ2UpIGNvcmUuY2FsbFBsdWdpbignaW1hZ2UnLCBjb3JlLnBsdWdpbnMuaW1hZ2Uuc3VibWl0QWN0aW9uLmJpbmQoY29yZSwgZmlsZXMpLCBudWxsKTtcclxuICAgICAgICAgICAgZWxzZSBjb3JlLnBsdWdpbnMuaW1hZ2Uuc3VibWl0QWN0aW9uLmNhbGwoY29yZSwgZmlsZXMpO1xyXG4gICAgICAgICAgICBjb3JlLmZvY3VzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgYW4gSFRNTCBlbGVtZW50IG9yIEhUTUwgc3RyaW5nIG9yIHBsYWluIHN0cmluZyBhdCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb25cclxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfSBodG1sIEhUTUwgRWxlbWVudCBvciBIVE1MIHN0cmluZyBvciBwbGFpbiBzdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG5vdENsZWFuaW5nRGF0YSBJZiB0cnVlLCBpbnNlcnRzIHRoZSBIVE1MIHN0cmluZyB3aXRob3V0IHJlZmluaW5nIGl0IHdpdGggY29yZS5jbGVhbkhUTUwuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBjaGVja0NoYXJDb3VudCBJZiB0cnVlLCBpZiBcIm9wdGlvbnMubWF4Q2hhckNvdW50XCIgaXMgZXhjZWVkZWQgd2hlbiBcImVsZW1lbnRcIiBpcyBhZGRlZCwgbnVsbCBpcyByZXR1cm5lZCB3aXRob3V0IGFkZGl0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmFuZ2VTZWxlY3Rpb24gSWYgdHJ1ZSwgcmFuZ2Ugc2VsZWN0IHRoZSBpbnNlcnRlZCBub2RlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc2VydEhUTUw6IGZ1bmN0aW9uIChodG1sLCBub3RDbGVhbmluZ0RhdGEsIGNoZWNrQ2hhckNvdW50LCByYW5nZVNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRleHQuZWxlbWVudC53eXNpd3lnRnJhbWUuY29udGFpbnMoY29yZS5nZXRTZWxlY3Rpb24oKS5mb2N1c05vZGUpKSBjb3JlLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5vdENsZWFuaW5nRGF0YSkgaHRtbCA9IGNvcmUuY2xlYW5IVE1MKGh0bWwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0xpc3RDZWxsKHV0aWwuZ2V0Rm9ybWF0RWxlbWVudChjb3JlLmdldFNlbGVjdGlvbk5vZGUoKSwgbnVsbCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbSA9IF9kLmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb21UcmVlID0gZG9tLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLl9pc0Zvcm1hdERhdGEoZG9tVHJlZSkpIGh0bWwgPSBjb3JlLl9jb252ZXJ0TGlzdENlbGwoZG9tVHJlZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkb20gPSBfZC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChodG1sKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkb21UcmVlID0gZG9tLmNoaWxkTm9kZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0NoYXJDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gY29yZS5fY2hhclR5cGVIVE1MID8gJ291dGVySFRNTCcgOiAndGV4dENvbnRlbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hlY2tIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkb21UcmVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja0hUTUwgKz0gZG9tVHJlZVtpXVt0eXBlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvcmUuY2hlY2tDaGFyQ291bnQoY2hlY2tIVE1MLCBudWxsKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMsIGEsIHQsIHByZXYsIGZpcnN0Q29uO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoYyA9IGRvbVRyZWVbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2ICYmIHByZXYubm9kZVR5cGUgPT09IDMgJiYgYSAmJiBhLm5vZGVUeXBlID09PSAxICYmIHV0aWwuaXNCcmVhayhjKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gY29yZS5pbnNlcnROb2RlKGMsIGEsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHQuY29udGFpbmVyIHx8IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RDb24pIGZpcnN0Q29uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldi5ub2RlVHlwZSA9PT0gMyAmJiBhLm5vZGVUeXBlID09PSAxKSBhID0gcHJldjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBhLm5vZGVUeXBlID09PSAzID8gKHQuZW5kT2Zmc2V0IHx8IGEudGV4dENvbnRlbnQubGVuZ3RoKTogYS5jaGlsZE5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VTZWxlY3Rpb24pIGNvcmUuc2V0UmFuZ2UoZmlyc3RDb24uY29udGFpbmVyIHx8IGZpcnN0Q29uLCBmaXJzdENvbi5zdGFydE9mZnNldCB8fCAwLCBhLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY29yZS5zZXRSYW5nZShhLCBvZmZzZXQsIGEsIG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3JlLmlzRGlzYWJsZWQgfHwgY29yZS5pc1JlYWRPbmx5KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1VORURJVE9SLmluc2VydEhUTUwuZmFpbF0gJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmV4ZWNDb21tYW5kKCdpbnNlcnRIVE1MJywgZmFsc2UsIGh0bWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNDb21wb25lbnQoaHRtbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmluc2VydENvbXBvbmVudChodG1sLCBmYWxzZSwgY2hlY2tDaGFyQ291bnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFmdGVyTm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNGb3JtYXRFbGVtZW50KGh0bWwpIHx8IHV0aWwuaXNNZWRpYShodG1sKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlck5vZGUgPSB1dGlsLmdldEZvcm1hdEVsZW1lbnQoY29yZS5nZXRTZWxlY3Rpb25Ob2RlKCksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmluc2VydE5vZGUoaHRtbCwgYWZ0ZXJOb2RlLCBjaGVja0NoYXJDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvcmUuZWZmZWN0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGNvcmUuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhY2tcclxuICAgICAgICAgICAgY29yZS5oaXN0b3J5LnB1c2goZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGFuZ2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3x1bmRlZmluZWR9IGNvbnRlbnRzIENvbnRlbnRzIHRvIElucHV0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Q29udGVudHM6IGZ1bmN0aW9uIChjb250ZW50cykge1xyXG4gICAgICAgICAgICBjb3JlLnNldENvbnRlbnRzKGNvbnRlbnRzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkIGNvbnRlbnRzIHRvIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHMgQ29udGVudHMgdG8gSW5wdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBhcHBlbmRDb250ZW50czogZnVuY3Rpb24gKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRWYWx1ZSA9IGNvcmUuY29udmVydENvbnRlbnRzRm9yRWRpdG9yKGNvbnRlbnRzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29yZS5fdmFyaWFibGUuaXNDb2RlVmlldykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IHV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IGNvbnZlcnRWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3eXNpd3lnID0gY29udGV4dC5lbGVtZW50Lnd5c2l3eWc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRlbXAuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5baV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3lzaXd5Zy5hcHBlbmRDaGlsZChjaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29yZS5fc2V0Q29kZVZpZXcoY29yZS5fZ2V0Q29kZVZpZXcoKSArICdcXG4nICsgY29yZS5jb252ZXJ0SFRNTEZvckNvZGVWaWV3KGNvbnZlcnRWYWx1ZSwgZmFsc2UpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xyXG4gICAgICAgICAgICBjb3JlLmhpc3RvcnkucHVzaChmYWxzZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFN3aXRjaCB0byBvciBvZmYgXCJSZWFkT25seVwiIG1vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZSBcInJlYWRPbmx5XCIgYm9vbGVhbiB2YWx1ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkT25seTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvcmUuaXNSZWFkT25seSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgdXRpbC5zZXREaXNhYmxlZEJ1dHRvbnMoISF2YWx1ZSwgY29yZS5yZXNpemluZ0Rpc2FibGVkQnV0dG9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8qKiBvZmYgbWVudXMgKi9cclxuICAgICAgICAgICAgICAgIGNvcmUuY29udHJvbGxlcnNPZmYoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLnN1Ym1lbnVBY3RpdmVCdXR0b24gJiYgY29yZS5zdWJtZW51QWN0aXZlQnV0dG9uLmRpc2FibGVkKSBjb3JlLnN1Ym1lbnVPZmYoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24gJiYgY29yZS5fbW9yZUxheWVyQWN0aXZlQnV0dG9uLmRpc2FibGVkKSBjb3JlLm1vcmVMYXllck9mZigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuY29udGFpbmVyQWN0aXZlQnV0dG9uICYmIGNvcmUuY29udGFpbmVyQWN0aXZlQnV0dG9uLmRpc2FibGVkKSBjb3JlLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUubW9kYWxGb3JtKSBjb3JlLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwoY29yZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LmNvZGUuc2V0QXR0cmlidXRlKFwicmVhZE9ubHlcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hZGRDbGFzcyhjb250ZXh0LmVsZW1lbnQud3lzaXd5Z0ZyYW1lLCAnc2UtcmVhZC1vbmx5Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkT25seVwiKTtcclxuICAgICAgICAgICAgICAgIHV0aWwucmVtb3ZlQ2xhc3MoY29udGV4dC5lbGVtZW50Lnd5c2l3eWdGcmFtZSwgJ3NlLXJlYWQtb25seScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSBvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3Iuc2V0T3B0aW9uKCdyZWFkT25seScsICEhdmFsdWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlIHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhci5kaXNhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMud3lzaXd5Zy5kaXNhYmxlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMy4wLjAgdmVyc2lvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBFbmFibGUgdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2xiYXIuZW5hYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMud3lzaXd5Zy5lbmFibGUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAzLjAuMCB2ZXJzaW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZW5hYmxlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IHRoZSBzdW5lZGl0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcEFyZWFTdHlsZSA9IGNvbnRleHQuZWxlbWVudC50b3BBcmVhLnN0eWxlO1xyXG4gICAgICAgICAgICBpZiAodG9wQXJlYVN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgdG9wQXJlYVN0eWxlLmRpc3BsYXkgPSBvcHRpb25zLmRpc3BsYXk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEhpZGUgdGhlIHN1bmVkaXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udGV4dC5lbGVtZW50LnRvcEFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gRGVzdHJveSB0aGUgc3VuZWRpdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvKiogb2ZmIG1lbnVzICovXHJcbiAgICAgICAgICAgIGNvcmUuc3VibWVudU9mZigpO1xyXG4gICAgICAgICAgICBjb3JlLmNvbnRhaW5lck9mZigpO1xyXG4gICAgICAgICAgICBjb3JlLmNvbnRyb2xsZXJzT2ZmKCk7XHJcbiAgICAgICAgICAgIGlmIChjb3JlLm5vdGljZSkgY29yZS5ub3RpY2UuY2xvc2UuY2FsbChjb3JlKTtcclxuICAgICAgICAgICAgaWYgKGNvcmUubW9kYWxGb3JtKSBjb3JlLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwoY29yZSk7XHJcblxyXG4gICAgICAgICAgICAvKiogcmVtb3ZlIGhpc3RvcnkgKi9cclxuICAgICAgICAgICAgY29yZS5oaXN0b3J5Ll9kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICAvKiogcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgICAgICBldmVudC5fcmVtb3ZlRXZlbnQoKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiByZW1vdmUgZWxlbWVudCAqL1xyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY29udGV4dC5lbGVtZW50LnRvb2xiYXIpO1xyXG4gICAgICAgICAgICB1dGlsLnJlbW92ZUl0ZW0oY29udGV4dC5lbGVtZW50LnRvcEFyZWEpO1xyXG5cclxuICAgICAgICAgICAgLyoqIHJlbW92ZSBvYmplY3QgcmVmZXJlbmNlICovXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gY29yZS5mdW5jdGlvbnMpIHsgaWYgKHV0aWwuaGFzT3duKGNvcmUsIGspKSBkZWxldGUgY29yZS5mdW5jdGlvbnNba107IH1cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBjb3JlKSB7IGlmICh1dGlsLmhhc093bihjb3JlLCBrKSkgZGVsZXRlIGNvcmVba107IH1cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBldmVudCkgeyBpZiAodXRpbC5oYXNPd24oZXZlbnQsIGspKSBkZWxldGUgZXZlbnRba107IH1cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBjb250ZXh0KSB7IGlmICh1dGlsLmhhc093bihjb250ZXh0LCBrKSkgZGVsZXRlIGNvbnRleHRba107IH1cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBwbHVnaW5DYWxsQnV0dG9ucykgeyBpZiAodXRpbC5oYXNPd24ocGx1Z2luQ2FsbEJ1dHRvbnMsIGspKSBkZWxldGUgcGx1Z2luQ2FsbEJ1dHRvbnNba107IH1cclxuXHJcbiAgICAgICAgICAgIC8qKiByZW1vdmUgdXNlciBvYmplY3QgKi9cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiB0aGlzKSB7IGlmICh1dGlsLmhhc093bih0aGlzLCBrKSkgZGVsZXRlIHRoaXNba107IH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gVG9vbGJhciBtZXRob2RzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIERpc2FibGUgdGhlIHRvb2xiYXJcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8qKiBvZmYgbWVudXMgKi9cclxuICAgICAgICAgICAgICAgIGNvcmUuc3VibWVudU9mZigpO1xyXG4gICAgICAgICAgICAgICAgY29yZS5tb3JlTGF5ZXJPZmYoKTtcclxuICAgICAgICAgICAgICAgIGNvcmUuY29udGFpbmVyT2ZmKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC50b29sLmNvdmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4wIHZlcnNpb25cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gRW5hYmxlIHRoZSB0b29sYmFyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBlbmFibGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQudG9vbC5jb3Zlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4wIHZlcnNpb25cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgdGhlIHRvb2xiYXJcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLl9pc0lubGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9zaG93VG9vbGJhcklubGluZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Ll9zdGlja3lEdW1teS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQub25SZXNpemVfd2luZG93KCk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIEhpZGUgdGhlIHRvb2xiYXJcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb3JlLl9pc0lubGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9oaWRlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQudG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5fc3RpY2t5RHVtbXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBldmVudC5vblJlc2l6ZV93aW5kb3coKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gV3lzaXd5ZyBtZXRob2RzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgd3lzaXd5Zzoge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIERpc2FibGUgdGhlIHd5c2l3eWcgYXJlYVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLyoqIG9mZiBtZW51cyAqL1xyXG4gICAgICAgICAgICAgICAgY29yZS5jb250cm9sbGVyc09mZigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUubW9kYWxGb3JtKSBjb3JlLnBsdWdpbnMuZGlhbG9nLmNsb3NlLmNhbGwoY29yZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5lbGVtZW50Lnd5c2l3eWcuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLmlzRGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvZGVNaXJyb3JFZGl0b3Iuc2V0T3B0aW9uKCdyZWFkT25seScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVsZW1lbnQuY29kZS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIEVuYWJsZSB0aGUgd3lzaXd5ZyBhcmVhXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBlbmFibGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC53eXNpd3lnLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb3JlLmlzRGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb2RlTWlycm9yRWRpdG9yLnNldE9wdGlvbigncmVhZE9ubHknLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZWxlbWVudC5jb2RlLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKioqKioqKioqKiogQ29yZSBpbml0ICoqKioqKioqKioqKi9cclxuICAgIC8vIGZ1bmN0aW9uc1xyXG4gICAgY29yZS5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XHJcbiAgICBjb3JlLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0byBzaWJsaW5nIG5vZGVcclxuICAgIGxldCBjb250ZXh0RWwgPSBjb250ZXh0LmVsZW1lbnQ7XHJcbiAgICBsZXQgb3JpZ2luRWwgPSBjb250ZXh0RWwub3JpZ2luRWxlbWVudDtcclxuICAgIGxldCB0b3BFbCA9IGNvbnRleHRFbC50b3BBcmVhO1xyXG4gICAgb3JpZ2luRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIHRvcEVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgIC8vIGluaXRcclxuICAgIGlmIChvcHRpb25zLmlmcmFtZSkge1xyXG4gICAgICAgIGNvbnRleHRFbC53eXNpd3lnRnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXRpbC5fc2V0SWZyYW1lRG9jdW1lbnQodGhpcywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGNvcmUuX2VkaXRvckluaXQoZmFsc2UsIG9wdGlvbnMudmFsdWUpO1xyXG4gICAgICAgICAgICBvcHRpb25zLnZhbHVlID0gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpbnNlcnQgZWRpdG9yIGVsZW1lbnRcclxuICAgIGlmICh0eXBlb2Ygb3JpZ2luRWwubmV4dEVsZW1lbnRTaWJsaW5nID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIG9yaWdpbkVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRvcEVsLCBvcmlnaW5FbC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBvcmlnaW5FbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRvcEVsKTtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0RWwuZWRpdG9yQXJlYS5hcHBlbmRDaGlsZChjb250ZXh0RWwud3lzaXd5Z0ZyYW1lKTtcclxuICAgIGNvbnRleHRFbCA9IG9yaWdpbkVsID0gdG9wRWwgPSBudWxsO1xyXG5cclxuICAgIC8vIGluaXRcclxuICAgIGlmICghb3B0aW9ucy5pZnJhbWUpIHtcclxuICAgICAgICBjb3JlLl9lZGl0b3JJbml0KGZhbHNlLCBvcHRpb25zLnZhbHVlKTtcclxuICAgICAgICBvcHRpb25zLnZhbHVlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb25zO1xyXG59Il0sIm5hbWVzIjpbIl9Db25zdHJ1Y3RvciIsIl9Db250ZXh0IiwiX2hpc3RvcnkiLCJfdXRpbCIsIl9ub3RpY2UiLCJjb250ZXh0IiwicGx1Z2luQ2FsbEJ1dHRvbnMiLCJwbHVnaW5zIiwibGFuZyIsIm9wdGlvbnMiLCJfcmVzcG9uc2l2ZUJ1dHRvbnMiLCJfZCIsImVsZW1lbnQiLCJvcmlnaW5FbGVtZW50Iiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50IiwiX3ciLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsInV0aWwiLCJpY29ucyIsImNvcmUiLCJfcGFyc2VyIiwiRE9NUGFyc2VyIiwiX3ByZXZSdGwiLCJydGwiLCJfZWRpdG9ySGVpZ2h0IiwiX2VkaXRvckhlaWdodFBhZGRpbmciLCJfbGlzdENhbWVsIiwiX19saXN0Q29tbW9uU3R5bGUiLCJfbGlzdEtlYmFiIiwiY2FtZWxUb0tlYmFiQ2FzZSIsIl9fZm9jdXNUZW1wIiwiX2ZvY3VzVGVtcCIsIl93ZCIsIl93dyIsIl9zaGFkb3dSb290IiwiX3NoYWRvd1Jvb3RDb250cm9sbGVyRXZlbnRUYXJnZXQiLCJmdW5jdGlvbnMiLCJ3d0NvbXB1dGVkU3R5bGUiLCJub3RpY2UiLCJoaXN0b3J5IiwiaW5pdFBsdWdpbnMiLCJfdGFyZ2V0UGx1Z2lucyIsIl9tZW51VHJheSIsImVmZmVjdE5vZGUiLCJzdWJtZW51IiwiY29udGFpbmVyIiwiX3N1Ym1lbnVOYW1lIiwiX2JpbmRlZFN1Ym1lbnVPZmYiLCJfYmluZGVkQ29udGFpbmVyT2ZmIiwic3VibWVudUFjdGl2ZUJ1dHRvbiIsImNvbnRhaW5lckFjdGl2ZUJ1dHRvbiIsImNvbnRyb2xsZXJBcnJheSIsImN1cnJlbnRDb250cm9sbGVyTmFtZSIsImN1cnJlbnRDb250cm9sbGVyVGFyZ2V0IiwiY3VycmVudEZpbGVDb21wb25lbnRJbmZvIiwiY29kZVZpZXdEaXNhYmxlZEJ1dHRvbnMiLCJyZXNpemluZ0Rpc2FibGVkQnV0dG9ucyIsIl9tb3JlTGF5ZXJBY3RpdmVCdXR0b24iLCJfaHRtbENoZWNrV2hpdGVsaXN0UmVnRXhwIiwiX2h0bWxDaGVja0JsYWNrbGlzdFJlZ0V4cCIsIl9kaXNhbGxvd2VkVGV4dFRhZ3NSZWdFeHAiLCJlZGl0b3JUYWdzV2hpdGVsaXN0UmVnRXhwIiwiZWRpdG9yVGFnc0JsYWNrbGlzdFJlZ0V4cCIsInBhc3RlVGFnc1doaXRlbGlzdFJlZ0V4cCIsInBhc3RlVGFnc0JsYWNrbGlzdFJlZ0V4cCIsImhhc0ZvY3VzIiwiaXNEaXNhYmxlZCIsImlzUmVhZE9ubHkiLCJfYXR0cmlidXRlc1doaXRlbGlzdFJlZ0V4cCIsIl9hdHRyaWJ1dGVzV2hpdGVsaXN0UmVnRXhwX2FsbF9kYXRhIiwiX2F0dHJpYnV0ZXNCbGFja2xpc3RSZWdFeHAiLCJfYXR0cmlidXRlc1RhZ3NXaGl0ZWxpc3QiLCJfYXR0cmlidXRlc1RhZ3NCbGFja2xpc3QiLCJfYmluZENvbnRyb2xsZXJzT2ZmIiwiX2lzSW5saW5lIiwiX2lzQmFsbG9vbiIsIl9pc0JhbGxvb25BbHdheXMiLCJfaW5saW5lVG9vbGJhckF0dHIiLCJ0b3AiLCJ3aWR0aCIsImlzU2hvdyIsIl9ub3RIaWRlVG9vbGJhciIsIl9zdGlja3kiLCJfYW50aUJsdXIiLCJfbGluZUJyZWFrZXIiLCJfbGluZUJyZWFrZXJCdXR0b24iLCJfY29tcG9uZW50c0luZm9Jbml0IiwiX2NvbXBvbmVudHNJbmZvUmVzZXQiLCJhY3RpdmVQbHVnaW5zIiwibWFuYWdlZFRhZ3NJbmZvIiwiX2NoYXJUeXBlSFRNTCIsIl9maWxlSW5mb1BsdWdpbnNDaGVjayIsIl9maWxlSW5mb1BsdWdpbnNSZXNldCIsIl9maWxlTWFuYWdlciIsInRhZ3MiLCJyZWdFeHAiLCJxdWVyeVN0cmluZyIsInBsdWdpblJlZ0V4cCIsInBsdWdpbk1hcCIsImNvbW1hbmRNYXAiLCJfY29tbWFuZE1hcFN0eWxlcyIsIlNUUk9ORyIsIlUiLCJFTSIsIkRFTCIsIl9zdHlsZUNvbW1hbmRNYXAiLCJfY2xlYW5TdHlsZVJlZ0V4cCIsImRpdiIsIlJlZ0V4cCIsInNwYW4iLCJmb3JtYXQiLCJmb250U2l6ZVVuaXQiLCJfdmFyaWFibGUiLCJpc0NoYW5nZWQiLCJpc0NvZGVWaWV3IiwiaXNGdWxsU2NyZWVuIiwiaW5uZXJIZWlnaHRfZnVsbFNjcmVlbiIsInJlc2l6ZUNsaWVudFkiLCJ0YWJTaXplIiwiY29kZUluZGVudCIsIm1pblJlc2l6aW5nU2l6ZSIsImdldE51bWJlciIsInd5c2l3eWdGcmFtZSIsInN0eWxlIiwibWluSGVpZ2h0IiwiY3VycmVudE5vZGVzIiwiY3VycmVudE5vZGVzTWFwIiwiX3JhbmdlIiwiX3NlbGVjdGlvbk5vZGUiLCJfb3JpZ2luQ3NzVGV4dCIsInRvcEFyZWEiLCJjc3NUZXh0IiwiX2JvZHlPdmVyZmxvdyIsIl9lZGl0b3JBcmVhT3JpZ2luQ3NzVGV4dCIsIl93eXNpd3lnT3JpZ2luQ3NzVGV4dCIsIl9jb2RlT3JpZ2luQ3NzVGV4dCIsIl9mdWxsU2NyZWVuQXR0cnMiLCJzdGlja3kiLCJiYWxsb29uIiwiaW5saW5lIiwiX2xpbmVCcmVha0NvbXAiLCJfbGluZUJyZWFrRGlyIiwiX2Zvcm1hdEF0dHJzVGVtcCIsIl9zYXZlQnV0dG9uU3RhdGVzIiwiYWxsQ29tbWFuZEJ1dHRvbnMiLCJjdXJyZW50QnV0dG9ucyIsIl9idXR0b25UcmF5IiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJjb21tYW5kIiwibGVuZ3RoIiwiZ2V0QXR0cmlidXRlIiwiX3JlY292ZXJCdXR0b25TdGF0ZXMiLCJidXR0b24iLCJvbGRCdXR0b24iLCJwYXJlbnRFbGVtZW50IiwicmVwbGFjZUNoaWxkIiwidG9vbCIsImNhbGxQbHVnaW4iLCJwbHVnaW5OYW1lIiwiY2FsbEJhY2tGdW5jdGlvbiIsIl90YXJnZXQiLCJFcnJvciIsImFkZCIsImluaXRNZW51VGFyZ2V0IiwiYWN0aXZlIiwicHVzaCIsImFkZE1vZHVsZSIsIm1vZHVsZUFycmF5IiwibGVuIiwibW9kdWxlTmFtZSIsIm5hbWUiLCJnZXRHbG9iYWxTY3JvbGxPZmZzZXQiLCJ0IiwibCIsImVsIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImhvc3QiLCJsZWZ0IiwidGFyZ2V0IiwibWVudSIsImFwcGVuZENoaWxkIiwic3VibWVudU9uIiwiY29udHJvbGxlcnNPZmYiLCJzdWJtZW51TmFtZSIsIl9zZXRNZW51UG9zaXRpb24iLCJzdWJtZW51T2ZmIiwiYmluZCIsImFkZERvY0V2ZW50Iiwib24iLCJjYWxsIiwicmVtb3ZlRG9jRXZlbnQiLCJkaXNwbGF5IiwicmVtb3ZlQ2xhc3MiLCJtb3JlTGF5ZXJPZmYiLCJsYXllciIsInRvb2xiYXIiLCJxdWVyeVNlbGVjdG9yIiwiY29udGFpbmVyT24iLCJjb250YWluZXJOYW1lIiwiX2NvbnRhaW5lck5hbWUiLCJjb250YWluZXJPZmYiLCJ2aXNpYmlsaXR5IiwiaGVpZ2h0IiwiYWRkQ2xhc3MiLCJ0b29sYmFyVyIsIm9mZnNldFdpZHRoIiwidG9vbGJhck9mZnNldCIsImV2ZW50IiwiX2dldEVkaXRvck9mZnNldHMiLCJtZW51VyIsIm9mZnNldExlZnQiLCJlbGVtZW50VyIsInJ0bFciLCJydGxMIiwib3ZlckxlZnQiLCJvZmZzZXRFbCIsIm9mZnNldFRvcCIsIm9mZnNldFBhcmVudCIsImJ0Iiwib2Zmc2V0SGVpZ2h0IiwidG9vbGJhclRvcCIsIm1lbnVIZWlnaHQiLCJtZW51SGVpZ2h0X2JvdHRvbSIsImlubmVySGVpZ2h0IiwibWVudVRvcCIsImluc1RvcCIsIm1lbnVIZWlnaHRfdG9wIiwiY29udHJvbGxlcnNPbiIsImFyZyIsImFyZ3VtZW50cyIsImhhc0NsYXNzIiwiZ2V0RmlsZUNvbXBvbmVudCIsImluZGV4T2YiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic2hvd0NvbnRyb2xsZXIiLCJjb250YWlucyIsInRlc3QiLCJ0eXBlIiwia2V5Q29kZSIsImxpbmVCcmVha2VyX3QiLCJsaW5lQnJlYWtlcl9iIiwic2V0Q29udHJvbGxlclBvc2l0aW9uIiwiY29udHJvbGxlciIsInJlZmVyRWwiLCJwb3NpdGlvbiIsImFkZE9mZnNldCIsIm9mZnNldCIsImdldE9mZnNldCIsInRvcE1hcmdpbiIsImNvbnRyb2xsZXJXIiwicmVmZXJFbFciLCJhbGxvdyIsImZpcnN0RWxlbWVudENoaWxkIiwib3ZlclNpemUiLCJleGVjQ29tbWFuZCIsInNob3dEZWZhdWx0VUkiLCJ2YWx1ZSIsIm5hdGl2ZUZvY3VzIiwiX19mb2N1cyIsIl9lZGl0b3JSYW5nZSIsImNhcHRpb24iLCJnZXRQYXJlbnRFbGVtZW50IiwiZ2V0U2VsZWN0aW9uTm9kZSIsImZvY3VzIiwid3lzaXd5ZyIsImlmcmFtZSIsInJhbmdlIiwiZ2V0UmFuZ2UiLCJzdGFydENvbnRhaW5lciIsImVuZENvbnRhaW5lciIsImlzV3lzaXd5Z0RpdiIsImN1cnJlbnROb2RlIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjaGlsZHJlbiIsInN0YXJ0T2Zmc2V0IiwiaXNGb3JtYXRFbGVtZW50IiwiaXNDb21wb25lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGVmYXVsdFRhZyIsImJyIiwiaW5zZXJ0QmVmb3JlIiwic2V0UmFuZ2UiLCJlbmRPZmZzZXQiLCJfYXBwbHlUYWdFZmZlY3RzIiwiX3RvZ2dsZVRvb2xiYXJCYWxsb29uIiwiZm9jdXNFZGdlIiwiZm9jdXNFbCIsImxhc3RFbGVtZW50Q2hpbGQiLCJmaWxlQ29tcG9uZW50SW5mbyIsInNlbGVjdENvbXBvbmVudCIsImdldENoaWxkRWxlbWVudCIsImN1cnJlbnQiLCJjaGlsZE5vZGVzIiwibm9kZVR5cGUiLCJ0ZXh0Q29udGVudCIsImJsdXIiLCJzdGFydENvbiIsInN0YXJ0T2ZmIiwiZW5kQ29uIiwiZW5kT2ZmIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIl9yYW5nZUluZm8iLCJyZW1vdmVSYW5nZSIsIl9zZXRLZXlFZmZlY3QiLCJfY3JlYXRlRGVmYXVsdFJhbmdlIiwiY29sbGFwc2VkIiwiaXNDb2xsYXBzZWQiLCJmb2N1c05vZGUiLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsInNjIiwiYW5jaG9yTm9kZSIsImVjIiwic28iLCJhbmNob3JPZmZzZXQiLCJlbyIsImZvY3VzT2Zmc2V0IiwiY29tcGFyZVZhbHVlIiwiY29tcGFyZUVsZW1lbnRzIiwicmlnaHREaXIiLCJhbmNlc3RvciIsInJlc3VsdCIsImdldFJhbmdlX2FkZExpbmUiLCJfc2VsZWN0aW9uVm9pZCIsIm9wIiwiaW5uZXJIVE1MIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwic2VsZWN0aW9uTm9kZSIsImZpcnN0Q2hpbGQiLCJhY3RpdmVFbCIsImFjdGl2ZUVsZW1lbnQiLCJpc0lucHV0RWxlbWVudCIsImV4dGVudE5vZGUiLCJmaXJzdEZvcm1hdCIsImNvbW0iLCJub2RlTmFtZSIsImlzTWVkaWFDb21wb25lbnQiLCJfcmVzZXRSYW5nZVRvVGV4dE5vZGUiLCJ0ZW1wQ29uIiwidGVtcE9mZnNldCIsInRlbXBDaGlsZCIsImxhc3RDaGlsZCIsImlzQnJlYWsiLCJvbmx5QnJlYWsiLCJuZXh0U2libGluZyIsImdldEZvcm1hdEVsZW1lbnQiLCJnZXRSYW5nZUZvcm1hdEVsZW1lbnQiLCJpc0NlbGwiLCJwYXJlbnROb2RlIiwiZW1wdHlUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJ6ZXJvV2lkdGhTcGFjZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2aW91c1NpYmxpbmciLCJyZW1vdmVJdGVtIiwiZ2V0U2VsZWN0ZWRFbGVtZW50cyIsInZhbGlkYXRpb24iLCJ0cmltIiwiY29tbW9uQ29uIiwibGluZU5vZGVzIiwiZ2V0TGlzdENoaWxkcmVuIiwiaXNSYW5nZUZvcm1hdEVsZW1lbnQiLCJ1bnNoaWZ0Iiwic3RhcnRMaW5lIiwiZW5kTGluZSIsInN0YXJ0SWR4IiwiZW5kSWR4Iiwib25seVRhYmxlIiwiaXNUYWJsZSIsInN0YXJ0UmFuZ2VFbCIsImVuZFJhbmdlRWwiLCJpc0xpc3RDZWxsIiwic2FtZVJhbmdlIiwibGluZSIsInNsaWNlIiwiZ2V0U2VsZWN0ZWRFbGVtZW50c0FuZENvbXBvbmVudHMiLCJyZW1vdmVEdXBsaWNhdGUiLCJteUNvbXBvbmVudCIsInNlbGVjdGVkTGluZXMiLCJjb21wb25lbnQiLCJqIiwic3BsaWNlIiwiaXNFZGdlUG9pbnQiLCJkaXIiLCJub2RlVmFsdWUiLCJfaXNFZGdlRm9ybWF0Iiwibm9kZSIsImNsb25lTm9kZSIsInNob3dMb2FkaW5nIiwibG9hZGluZyIsImNsb3NlTG9hZGluZyIsImFwcGVuZEZvcm1hdFRhZyIsImZvcm1hdE5vZGUiLCJjdXJyZW50Rm9ybWF0RWwiLCJvRm9ybWF0IiwiaXNGcmVlRm9ybWF0RWxlbWVudCIsIm9Gb3JtYXROYW1lIiwiY29weVRhZ0F0dHJpYnV0ZXMiLCJpbnNlcnRDb21wb25lbnQiLCJub3RIaXN0b3J5UHVzaCIsImNoZWNrQ2hhckNvdW50Iiwibm90U2VsZWN0IiwiciIsInJlbW92ZU5vZGUiLCJvTm9kZSIsImZvcm1hdEVsIiwiaW5zZXJ0Tm9kZSIsImRlcHRoRm9ybWF0Iiwic3BsaXRFbGVtZW50IiwiZ2V0RWxlbWVudERlcHRoIiwib25seVplcm9XaWR0aFNwYWNlIiwiZ2V0RWRnZUNoaWxkTm9kZXMiLCJjbGFzc05hbWUiLCJ0b0xvd2VyQ2FzZSIsImlzVW5lZGl0YWJsZUNvbXBvbmVudCIsInBsdWdpbiIsInNldFRpbWVvdXQiLCJzZWxlY3QiLCJfc2V0Q29tcG9uZW50TGluZUJyZWFrZXIiLCJ0X3N0eWxlIiwiYl9zdHlsZSIsInJlc2l6aW5nIiwicmVzaXplQ29udGFpbmVyIiwiaXNMaXN0IiwiY29tcG9uZW50VG9wIiwid1Njcm9sbCIsInciLCJfY2hlY2tEdXBsaWNhdGVOb2RlIiwicmVjdXJzaW9uRnVuYyIsIl9kdXBsZUNoZWNrIiwiaXNUZXh0U3R5bGVFbGVtZW50Iiwib1N0eWxlcyIsIm1hdGNoIiwibWFwIiwidiIsImR1cGxlIiwic3R5bGVzIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiam9pbiIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJpYnV0ZXMiLCJhZnRlck5vZGUiLCJmTm9kZSIsImluc2VydExpc3RDZWxsIiwib3JpZ2luQWZ0ZXIiLCJ0ZW1wQWZ0ZXJOb2RlIiwidGVtcFBhcmVudE5vZGUiLCJmcmVlRm9ybWF0IiwiaXNGb3JtYXRzIiwiaXNNZWRpYSIsImlzRWRnZSIsInByZXZDb250YWluZXIiLCJzYW1lUGFyZW50Iiwic3ViTGlzdCIsIm5ld0NlbGwiLCJmb3JtYXRSYW5nZSIsInNwbGl0VGV4dCIsImMiLCJyZW1vdmVDaGlsZCIsImlzU2FtZUNvbnRhaW5lciIsInJlbW92ZWRUYWciLCJvbGRQYXJlbnQiLCJyYW5nZUNvbiIsImZvbWF0Tm9kZSIsInVsIiwiY2hMaXN0IiwiZ2V0QXJyYXlJdGVtIiwiZHVwbGVOb2RlcyIsImQiLCJjaCIsInBhcmVudCIsImNJdGVtIiwiaXNFbXB0eUxpbmUiLCJfc2V0SW50b0ZyZWVGb3JtYXQiLCJ6ZXJvV2lkdGgiLCJfaXNJZ25vcmVOb2RlQ2hhbmdlIiwib05vZGVDaGlsZHJlbiIsImxhc3RPTm9kZSIsImZpbGVDb21wb25lbnQiLCJjaGFuZ2VFbGVtZW50IiwiaXNTdGFydEVkZ2UiLCJpc0VuZEVkZ2UiLCJzdGFydFByZXZFbCIsImVuZE5leHRFbCIsInN1YnN0ciIsImJlZm9yZU5vZGUiLCJnZXRMaXN0Q2hpbGROb2RlcyIsInN0YXJ0SW5kZXgiLCJnZXRBcnJheUluZGV4IiwiZW5kSW5kZXgiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiaXRlbSIsImRhdGEiLCJ1bmRlZmluZWQiLCJfbm9kZVJlbW92ZUxpc3RJdGVtIiwic3Vic3RyaW5nRGF0YSIsImVuZFVsIiwic3RhcnRMaSIsInJjIiwicmVtb3ZlSXRlbUFsbFBhcmVudHMiLCJhcHBseVJhbmdlRm9ybWF0RWxlbWVudCIsInJhbmdlRWxlbWVudCIsInJhbmdlTGluZXMiLCJsaW5lc0xvb3AiLCJuZXN0ZWQiLCJmRWwiLCJsRWwiLCJmIiwibGlzdCIsImxhc3QiLCJzdGFuZFRhZyIsImJlZm9yZVRhZyIsInBFbGVtZW50IiwicGFyZW50RGVwdGgiLCJsaXN0UGFyZW50IiwibGluZUFyciIsInJlbW92ZUl0ZW1zIiwib3JpZ2luIiwiYmVmb3JlIiwiY2MiLCJvcmlnaW5QYXJlbnQiLCJkZXB0aCIsIm5leHRMaW5lIiwibmV4dExpc3QiLCJwIiwiZWRnZSIsImRldGFjaFJhbmdlRm9ybWF0RWxlbWVudCIsImNMZW4iLCJyZW1vdmVBcnJheSIsIm1lcmdlU2FtZVRhZ3MiLCJtZXJnZU5lc3RlZFRhZ3MiLCJzcGxpdFJhbmdlIiwic2VsZWN0ZWRGb3JtYXRzIiwibmV3UmFuZ2VFbGVtZW50IiwiZmlyc3ROb2RlIiwibGFzdE5vZGUiLCJyYW5nZUVsIiwibmV3TGlzdCIsImluc2VydGVkTmV3IiwicmVzZXQiLCJtb3ZlQ29tcGxldGUiLCJhcHBlbmROb2RlIiwiaW5zTm9kZSIsInNpYmxpbmciLCJvcmlnaW5Ob2RlIiwiaW5zQ2hpbGRyZW4iLCJmaXJzdCIsIl9ub3RUZXh0Tm9kZSIsIm9yaWdpbk5leHQiLCJkZXRhY2hSYW5nZSIsImRldGFjaE5lc3RlZExpc3QiLCJmQ2hpbGRyZW4iLCJsaW5lSW5kZXgiLCJuZXh0IiwiaW5zTmV4dCIsImlubmVyIiwiaW5uZXJDaGlsZHJlbiIsImNvcHlGb3JtYXRBdHRyaWJ1dGVzIiwicmFuZ2VQYXJlbnQiLCJyYW5nZVJpZ2h0IiwicmVtb3ZlRW1wdHlOb2RlIiwiY2hpbGRFZGdlIiwiZGV0YWNoTGlzdCIsInJhbmdlQXJyIiwibGlzdEZpcnN0IiwibGlzdExhc3QiLCJwYXNzQ29tcG9uZW50IiwibyIsImxhc3RJbmRleCIsIm5vZGVDaGFuZ2UiLCJzdHlsZUFycmF5IiwicmVtb3ZlTm9kZUFycmF5Iiwic3RyaWN0UmVtb3ZlIiwiaXNSZW1vdmVOb2RlIiwiaXNSZW1vdmVGb3JtYXQiLCJpc05vbkVkaXRhYmxlIiwiZ2V0VmFsdWVzIiwic29tZSIsImsiLCJ3UmVnRXhwIiwibmV3Tm9kZU5hbWUiLCJzTm9kZSIsImNoZWNrQ250IiwiY2hlY2tBdHRycyIsImNoZWNrU3R5bGVzIiwiY2tlY2tDbGFzc2VzIiwicyIsImNsYXNzUmVnIiwicmVwbGFjZSIsInN0eWxlQ2hlY2siLCJjbGFzc0NoZWNrIiwic3RhcnQiLCJlbmQiLCJuZXdOb2RlIiwic3R5bGVSZWdFeHAiLCJjbGFzc1JlZ0V4cCIsInJlbW92ZU5vZGVSZWdFeHAiLCJ3Qm9vbGVhbiIsIkJvb2xlYW4iLCJfcmVtb3ZlQ2hlY2siLCJjaGVja05vZGUiLCJ2Tm9kZSIsInRhZ1JlbW92ZSIsIm9yaWdpblN0eWxlIiwib3JpZ2luQ2xhc3NlcyIsImNsYXNzZXMiLCJvbmVMaW5lIiwiZW5kTGVuZ3RoIiwiaXNSZW1vdmVBbmNob3IiLCJhcnIiLCJuIiwiX2lzTWFpbnRhaW5lZE5vZGUiLCJfaXNTaXplTm9kZSIsImlzU2l6ZU5vZGUiLCJfZ2V0TWFpbnRhaW5lZE5vZGUiLCJfdXRpbF9nZXRNYWludGFpbmVkTm9kZSIsIl91dGlsX2lzTWFpbnRhaW5lZE5vZGUiLCJfcmVzZXRDb21tb25MaXN0Q2VsbCIsIm5ld1JhbmdlIiwiX25vZGVDaGFuZ2Vfb25lTGluZSIsIl9zZXRDb21tb25MaXN0U3R5bGUiLCJhcHBsaWVkQ29tbW9uTGlzdCIsIl9ub2RlQ2hhbmdlX2VuZExpbmUiLCJfbm9kZUNoYW5nZV9taWRkbGVMaW5lIiwiX25vZGVDaGFuZ2Vfc3RhcnRMaW5lIiwiZWxTdHlsZXMiLCJlayIsImVsS2V5cyIsInJlZmVyIiwicmVtb3ZlUHJvcGVydHkiLCJzZWwiLCJhcHBsaWVkRWwiLCJfdGV4dFRhZ3NNYXAiLCJjaGlsZCIsImNoaWxkU3R5bGUiLCJlbFN0eWxlIiwiX2RlZmF1bHRDb21tYW5kIiwiYm9sZCIsImZvbnRXZWlnaHQiLCJpdGFsaWMiLCJmb250U3R5bGUiLCJjS2V5cyIsIl9zdHJpcFJlbW92ZU5vZGUiLCJfaXNSZW1vdmUiLCJhbmNob3IiLCJuZXdJbm5lck5vZGUiLCJwYXJlbnRDb24iLCJzYW1lVGFnIiwieiIsIm5Ob2RlQXJyYXkiLCJwTm9kZSIsImlzU2FtZU5vZGUiLCJzdGFydFBhc3MiLCJlbmRQYXNzIiwicEN1cnJlbnQiLCJjaGVja0NzcyIsImNvdmVyTm9kZSIsInByZXZOb2RlIiwidGV4dE5vZGUiLCJhIiwibSIsInByZXZBbmNob3JOb2RlIiwiY2hpbGROb2RlIiwicG9wIiwiYW5jaG9ycyIsImNvbmNhdCIsImFmdGVyQW5jaG9yTm9kZSIsImFDaGlsZHJlbiIsImFMZW4iLCJhbmNlc3RvckFuY2hvck5vZGUiLCJ0ZXh0Tm9kZV9zIiwidGV4dE5vZGVfZSIsInJDaGlsZHJlbiIsImVuZENvblJlc2V0IiwibmV3U3RhcnRPZmZzZXQiLCJzdGFydFBhdGgiLCJnZXROb2RlUGF0aCIsIm1lcmdlRW5kQ29uIiwibmV3RW5kT2Zmc2V0IiwiZW5kUGF0aCIsIm5ld09mZnNldHMiLCJnZXROb2RlRnJvbVBhdGgiLCJfZW5kQ29udGFpbmVyIiwicGFzc05vZGUiLCJjbG9uZUNoaWxkIiwiaXNUb3BOb2RlIiwib2Zmc2V0cyIsInBhdGgiLCJ0ZW1wTm9kZSIsIm5ld0Nzc1RleHQiLCJuZXdDbGFzcyIsIm5vbmVDaGFuZ2UiLCJhY3Rpb25DYWxsIiwiX3Nob3dUb29sYmFyQmFsbG9vbiIsIl9zaG93VG9vbGJhcklubGluZSIsImFycmF5SW5jbHVkZXMiLCJvcGVuIiwiYWN0aW9uIiwiY29tbWFuZEhhbmRsZXIiLCJpbmZvIiwidG9nZ2xlQ29kZVZpZXciLCJ0b2dnbGVGdWxsU2NyZWVuIiwiaW5kZW50IiwidW5kbyIsInJlZG8iLCJyZW1vdmVGb3JtYXQiLCJwcmludCIsInByZXZpZXciLCJ0b2dnbGVEaXNwbGF5QmxvY2tzIiwic2V0RGlyIiwiY2FsbEJhY2tTYXZlIiwiZ2V0Q29udGVudHMiLCJzYXZlIiwibm9kZXNNYXAiLCJjbWQiLCJjZWxscyIsInNoaWZ0IiwibWFyZ2luRGlyIiwibWFyZ2luIiwic2V0U3R5bGUiLCJlZGl0SW5zaWRlTGlzdCIsInRvZ2dsZUNsYXNzIiwic2hvd0Jsb2NrcyIsIl9yZXNvdXJjZXNTdGF0ZUNoYW5nZSIsInNldERpc2FibGVkQnV0dG9ucyIsIl9zZXRDb2RlRGF0YVRvRWRpdG9yIiwiY29kZSIsImNvZGVNaXJyb3JFZGl0b3IiLCJtb2RlIiwiX2Fycm93IiwiX2hpZGVUb29sYmFyIiwiY29kZVZpZXciLCJfcmVzZXRDYWNoaW5nQnV0dG9uIiwiX3NldEVkaXRvckRhdGFUb0NvZGVWaWV3Iiwic2Nyb2xsSGVpZ2h0IiwicmVmcmVzaCIsIl9jaGVja1BsYWNlaG9sZGVyIiwiY29kZV9odG1sIiwiX2dldENvZGVWaWV3IiwiZnVsbFBhZ2UiLCJwYXJzZURvY3VtZW50IiwicGFyc2VGcm9tU3RyaW5nIiwiX19hbGxvd2VkU2NyaXB0VGFnIiwiaGVhZENoaWxkcmVuIiwiaGVhZCIsInRhZ05hbWUiLCJoZWFkZXJzIiwiX3NldElmcmFtZUNzc1RhZ3MiLCJib2R5IiwiY29udmVydENvbnRlbnRzRm9yRWRpdG9yIiwiYXR0cnMiLCJlZGl0YWJsZUNsYXNzZXMiLCJfZWRpdGFibGVDbGFzcyIsInNwbGl0IiwiY29kZUNvbnRlbnRzIiwiY29udmVydEhUTUxGb3JDb2RlVmlldyIsImNvZGVWYWx1ZSIsImdldEF0dHJpYnV0ZXNUb1N0cmluZyIsIm91dGVySFRNTCIsIl9zZXRDb2RlVmlldyIsImVkaXRvckFyZWEiLCJfdmFyIiwid2FzVG9vbGJhckhpZGRlbiIsInRvb2xiYXJDb250YWluZXIiLCJyZWxhdGl2ZSIsIm1heFdpZHRoIiwiekluZGV4IiwiX3N0aWNreUR1bW15Iiwib3ZlcmZsb3ciLCJfZWRpdG9yU3R5bGVzIiwiZWRpdG9yIiwiZnVsbFNjcmVlbk9mZnNldCIsInJlZHVjdGlvbiIsIl9pZnJhbWVBdXRvSGVpZ2h0IiwibWFyZ2luVG9wIiwiZnVsbFNjcmVlbiIsIl9jb2RlVmlld0F1dG9IZWlnaHQiLCJzdGlja3lUb29sYmFyIiwib25TY3JvbGxfd2luZG93IiwiZXhwYW5zaW9uIiwiaGlkZSIsImNvbnRlbnRzSFRNTCIsInByaW50VGVtcGxhdGUiLCJwcmludERvY3VtZW50IiwiZ2V0SWZyYW1lRG9jdW1lbnQiLCJ3RG9jIiwiYXJydHMiLCJfcHJpbnRDbGFzcyIsIndyaXRlIiwibGlua3MiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxpbmtIVE1MIiwiaXNJRV9FZGdlIiwiaXNDaHJvbWl1bSIsImRvY3VtZW50TW9kZSIsIlN0eWxlTWVkaWEiLCJjb250ZW50V2luZG93IiwicHJldmlld1RlbXBsYXRlIiwid2luZG93T2JqZWN0IiwibWltZVR5cGUiLCJjaGFuZ2VEaXIiLCJhbGlnbiIsImV4Y2hhbmdlRGlyIiwib3V0ZGVudCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luTGVmdCIsInRleHRBbGlnbiIsImNoYW5nZVR4dCIsImRpcl9sdHIiLCJkaXJfcnRsIiwic2V0Q29udGVudHMiLCJodG1sIiwiY29udmVydFZhbHVlIiwiX3Jlc2V0Q29tcG9uZW50cyIsInNldElmcmFtZUNvbnRlbnRzIiwiY3R4IiwiX19zY3JpcHRUYWdSZWdFeHAiLCJvbmx5Q29udGVudHMiLCJjb250ZW50cyIsImNsZWFuSFRNTCIsInJlbmRlckhUTUwiLCJlZGl0YWJsZUVscyIsImhhc0F0dHJpYnV0ZSIsImdldEZ1bGxDb250ZW50cyIsIl9tYWtlTGluZSIsInJlcXVpcmVGb3JtYXQiLCJfX2Rpc2FsbG93ZWRUYWdOYW1lUmVnRXhwIiwiaXNTcGFuV2l0aG91dEF0dHIiLCJpc05vdENoZWNraW5nTm9kZSIsImlzRmlndXJlcyIsImlzQW5jaG9yIiwiX0hUTUxDb252ZXJ0b3IiLCJ0ZXh0QXJyYXkiLCJ0TGVuIiwidGV4dCIsIl9hbGxvd0hUTUxDb21tZW50cyIsIl90YWdDb252ZXJ0b3IiLCJfZGVsZXRlRGlzYWxsb3dlZFRhZ3MiLCJfX2Rpc2FsbG93ZWRUYWdzUmVnRXhwIiwiX2VkaXRvclRhZ3NXaGl0ZWxpc3QiLCJfY29udmVydEZvbnRTaXplIiwidG8iLCJzaXplIiwibWF0aCIsIk1hdGgiLCJzaXplTnVtIiwiZm9udFZhbHVlTWFwIiwiZnJvbSIsInB4U2l6ZSIsInJvdW5kIiwidG9GaXhlZCIsImZsb29yIiwiX2NsZWFuU3R5bGUiLCJzdiIsImZhY2UiLCJjb2xvciIsImFsbG93ZWRTdHlsZSIsImtlYmFiVG9DYW1lbENhc2UiLCJmb250IiwiZm9udFNpemUiLCJmb250Q29sb3IiLCJoaWxpdGVDb2xvciIsIl9jbGVhblRhZ3MiLCJsb3dMZXZlbENoZWNrIiwiYkF0dHIiLCJ3QXR0ciIsInRvU3RyaW5nIiwiX2VkaXRGb3JtYXQiLCJkb20iLCJ0ZW1wVHJlZSIsImNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCIsIl9jb252ZXJ0TGlzdENlbGwiLCJkb21UcmVlIiwiX2lzRm9ybWF0RGF0YSIsIndoaXRlbGlzdCIsImJsYWNrbGlzdCIsInN0cmljdE1vZGUiLCJodG1sQ29tcHJlc3MiLCJfY29uc2lzdGVuY3lDaGVja09mSFRNTCIsIl9jbGFzc05hbWVGaWx0ZXIiLCJxdWVyeSIsInRleHRDb21wTGlzdCIsImluaXRNZXRob2QiLCJfX2FsbG93ZWRTY3JpcHRSZWdFeHAiLCJodG1sUmVtb3ZlV2hpdGVTcGFjZSIsImNyZWF0ZVRhZ3NXaGl0ZWxpc3QiLCJjcmVhdGVUYWdzQmxhY2tsaXN0IiwiY29tcCIsInJldHVybkhUTUwiLCJiclJlZyIsImlzRm9ybWF0IiwiYnJDaGFyIiwiaW5kZW50U2l6ZSIsIkFycmF5IiwiZWxlbWVudFJlZ1Rlc3QiLCJlbGVtZW50SW5kZW50IiwibGluZUJSIiwibm9kZVJlZ1Rlc3QiLCJ0YWciLCJ0YWdJbmRlbnQiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJsaXN0ZW5lciIsInVzZUNhcHR1cmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2NoYXJDb3VudCIsImlucHV0VGV4dCIsIm1heENoYXJDb3VudCIsImNvdW50VHlwZSIsImNoYXJDb3VudGVyVHlwZSIsIm5leHRDaGFyQ291bnQiLCJnZXRDaGFyTGVuZ3RoIiwiX3NldENoYXJDb3VudCIsIm92ZXIiLCJjb3VudCIsImdldENoYXJDb3VudCIsInNsaWNlUG9zaXRpb24iLCJfY2FsbENvdW50ZXJCbGluayIsImNvbnRlbnQiLCJnZXRCeXRlTGVuZ3RoIiwicmVzZXRSZXNwb25zaXZlVG9vbGJhciIsInJlc3BvbnNpdmVTaXplIiwiX3Jlc3BvbnNpdmVCdXR0b25TaXplIiwidG9vbGJhcldpZHRoIiwicmVzcG9uc2l2ZVdpZHRoIiwiX3Jlc3BvbnNpdmVDdXJyZW50U2l6ZSIsInNldFRvb2xiYXJCdXR0b25zIiwiY2hhckNvdW50ZXIiLCJjaGFyV3JhcHBlciIsIl9jaGVja0NvbXBvbmVudHMiLCJnZXREb2MiLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwiaWdub3JlZExpc3QiLCJrZXkiLCJoYXNPd24iLCJPVVRERU5UIiwiaXNJbXBvcnRhbnREaXNhYmxlZCIsIklOREVOVCIsIl9pbml0IiwicmVsb2FkIiwiX2luaXRIVE1MIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJhbGxvd2VkQ2xhc3NOYW1lcyIsInNQcmVmaXgiLCJTaGFkb3dSb290Iiwic2hhZG93Um9vdCIsImRpc2FsbG93VGV4dFRhZ3MiLCJPYmplY3QiLCJrZXlzIiwiYWxsb3dUZXh0VGFncyIsImFkZFRhZ3NXaGl0ZWxpc3QiLCJmaWx0ZXIiLCJnZXRSZWdMaXN0Iiwic3RyIiwic3RyMiIsInZpZGVvQXR0ciIsImlmcmFtZUF0dHIiLCJkZWZhdWx0QXR0ciIsImRhdGFBdHRyIiwidGFnc0JsYWNrbGlzdCIsInBhc3RlVGFnc1doaXRlbGlzdCIsInBhc3RlVGFnc0JsYWNrbGlzdCIsInJlZ0VuZFN0ciIsIl93QXR0ciIsImF0dHJpYnV0ZXNXaGl0ZWxpc3QiLCJ0YWdzQXR0ciIsImFsbEF0dHIiLCJfYkF0dHIiLCJhdHRyaWJ1dGVzQmxhY2tsaXN0IiwiX2NhY2hpbmdCdXR0b25zIiwibWFuYWdlZENsYXNzIiwiZmlsZVBsdWdpblJlZ0V4cCIsImNoZWNrRmlsZUluZm8iLCJyZXNldEZpbGVJbmZvIiwiaXNBcnJheSIsImZpbGVUYWdzIiwibWFuYWdlZFRhZ3MiLCJtZXRob2QiLCJfcGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlciIsImxpbmVCcmVha2VyIiwiX29uQ2hhbmdlX2hpc3RvcnlTdGFjayIsImNvbnRlbnREb2N1bWVudCIsIl9pZnJhbWVBdXRvIiwiX2luaXRXeXNpd3lnQXJlYSIsInRleHRUYWdzIiwidG9VcHBlckNhc2UiLCJ1bmRlcmxpbmUiLCJzdHJpa2UiLCJzdWIiLCJzdWJzY3JpcHQiLCJzdXAiLCJzdXBlcnNjcmlwdCIsIm9uQ2hhbmdlIiwiaCIsImlzUmVzaXplT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJfX2NhbGxSZXNpemVGdW5jdGlvbiIsInJlc2l6ZU9ic2VydmVyRW50cnkiLCJib3JkZXJCb3hTaXplIiwiYmxvY2tTaXplIiwiY29udGVudFJlY3QiLCJvblJlc2l6ZUVkaXRvciIsIl9hbGxvd2VkRW1wdHlOb2RlTGlzdCIsImlubmVyVGV4dCIsIl9zZXREZWZhdWx0Rm9ybWF0IiwiZm9ybWF0TmFtZSIsIl9zZXRPcHRpb25zSW5pdCIsIl9nZXRDb25zdHJ1Y3RlZCIsIl9lZGl0b3JJbml0IiwiX2FkZEV2ZW50IiwiX29mZlN0aWNreVRvb2xiYXIiLCJvblJlc2l6ZV93aW5kb3ciLCJhdHRyIiwiZnJhbWVBdHRyYnV0ZXMiLCJfcmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiX3Rvb2xiYXJPYnNlcnZlciIsIl90b29sYmFyU2hhZG93Iiwib25sb2FkIiwiY29udGV4dEVsIiwiX3RvcCIsIl9yZWxhdGl2ZSIsIl90b29sQmFyIiwiX2VkaXRvckFyZWEiLCJfd3lzaXd5Z0FyZWEiLCJfY29kZUFyZWEiLCJfcmVzaXppbmdCYXIiLCJyZXNpemluZ0JhciIsIl9uYXZpZ2F0aW9uIiwibmF2aWdhdGlvbiIsIl9jaGFyQ291bnRlciIsIl9jaGFyV3JhcHBlciIsIl9sb2FkaW5nIiwiX2xpbmVCcmVha2VyX3QiLCJfbGluZUJyZWFrZXJfYiIsIl9yZXNpemVCYWNrIiwicmVzaXplQmFja2dyb3VuZCIsIl9JRWlzQ29tcG9zaW5nIiwiX2xpbmVCcmVha2VyQmluZCIsIl9jdXJzb3JNb3ZlS2V5Q29kZSIsIl9kaXJlY3Rpb25LZXlDb2RlIiwiX25vblRleHRLZXlDb2RlIiwiX2hpc3RvcnlJZ25vcmVLZXlDb2RlIiwiX29uQnV0dG9uc0NoZWNrIiwiX2Zyb250WmVyb1dpZHRoUmVnIiwiX2tleUNvZGVTaG9ydGN1dCIsIl9zaG9ydGN1dENvbW1hbmQiLCJrZXlTdHIiLCJzaG9ydGN1dHNEaXNhYmxlIiwiY2xhc3NPbkNoZWNrIiwiY29tbWFuZE1hcE5vZGVzIiwicmV2ZXJzZSIsInNob3dQYXRoTGFiZWwiLCJfYnV0dG9uc0V2ZW50SGFuZGxlciIsImFkZEdsb2JhbEV2ZW50IiwicmVtb3ZlR2xvYmFsRXZlbnQiLCJvbkNsaWNrX3Rvb2xiYXIiLCJkaXNhYmxlZCIsIl9fc2VsZWN0aW9uU3luY0V2ZW50Iiwib25Nb3VzZURvd25fd3lzaXd5ZyIsIl9pc0V4Y2x1ZGVTZWxlY3Rpb25FbGVtZW50Iiwib25Nb3VzZURvd24iLCJ0YWJsZUNlbGwiLCJ0YWJsZVBsdWdpbiIsInRhYmxlIiwiX2ZpeGVkQ2VsbCIsIl9zaGlmdCIsIm9uVGFibGVDZWxsTXVsdGlTZWxlY3QiLCJvbkNsaWNrX3d5c2l3eWciLCJ0YXJnZXRFbGVtZW50IiwiaHJlZiIsIm9uQ2xpY2siLCJmaWdjYXB0aW9uIiwiaGlkZVRvb2xiYXIiLCJkZXRhaWwiLCJzZWxlY3Rpb25Ob2RlRGVlcGVzdEZpcnN0Q2hpbGQiLCJzZWxlY3RlZENvbXBvbmVudEluZm8iLCJvTGkiLCJwcmV2TGkiLCJfYmFsbG9vbkRlbGF5IiwiX3Nob3dUb29sYmFyQmFsbG9vbkRlbGF5IiwiY2xlYXJUaW1lb3V0IiwicmFuZ2VPYmoiLCJpc0RpclRvcCIsInJlY3RzIiwiZ2V0Q2xpZW50UmVjdHMiLCJnbG9iYWxTY3JvbGwiLCJlZGl0b3JXaWR0aCIsInN0aWNreVRvcCIsImVkaXRvckxlZnQiLCJub2RlT2Zmc2V0IiwicmlnaHQiLCJib3R0b20iLCJub1RleHQiLCJhcnJvd01hcmdpbiIsInRvb2xiYXJIZWlnaHQiLCJpZnJhbWVSZWN0cyIsIl9zZXRUb29sYmFyT2Zmc2V0IiwiZWRpdG9yUGFyZW50IiwicGFkZGluZyIsImFic29sdXRlTGVmdCIsIm92ZXJSaWdodCIsInJlc2V0VG9wIiwic3BhY2UiLCJfZ2V0UGFnZUJvdHRvbVNwYWNlIiwiZG9jdW1lbnRFbGVtZW50IiwiYXJyb3dfbGVmdCIsInNob3dJbmxpbmUiLCJvbklucHV0X3d5c2l3eWciLCJnbyIsImdldEN1cnJlbnRJbmRleCIsIm9uSW5wdXQiLCJfaXNVbmVkaXRhYmxlTm9kZSIsImlzRnJvbnQiLCJzaWJsaW5nS2V5IiwiaXNFbGVtZW50Iiwic2libGluZ05vZGUiLCJfaXNVbmVkaXRhYmxlTm9kZV9nZXRTaWJsaW5nIiwic2VsZWN0Tm9kZSIsIl9vblNob3J0Y3V0S2V5Iiwib25LZXlEb3duX3d5c2l3eWciLCJzaGlmdEtleSIsImN0cmwiLCJjdHJsS2V5IiwibWV0YUtleSIsImFsdCIsImFsdEtleSIsIm9uS2V5RG93biIsInNlbGVjdFJhbmdlIiwiZmlsZUNvbXBvbmVudE5hbWUiLCJpc0Fycm93S2V5IiwiX29uS2V5RG93bl93eXNpd3lnX2Fycm93S2V5IiwiZGVzdHJveSIsIl9oYXJkRGVsZXRlIiwiaXNDbG9zdXJlRnJlZUZvcm1hdEVsZW1lbnQiLCJpc0Nsb3N1cmVSYW5nZUZvcm1hdEVsZW1lbnQiLCJkZWZhdWx0Rm9ybWF0IiwicHJldiIsImNvbiIsInByZXZMYXN0IiwiYWZ0ZXIiLCJkZXRhY2giLCJpZ25vcmVaV1MiLCJuZXh0RWwiLCJjZWxsIiwidGFiRGlzYWJsZSIsImxpbmVzIiwiZmMiLCJsYyIsImlkeCIsInByZXZJZHgiLCJuZXh0SWR4IiwibW92ZUNlbGwiLCJ0YWJUZXh0IiwidGV4dFJhbmdlIiwiZW5kQ2hpbGQiLCJmcmVlRm9ybWF0RWwiLCJnZXRGcmVlRm9ybWF0RWxlbWVudCIsImVudGVySFRNTCIsImZvcm1hdEVuZEVkZ2UiLCJmb3JtYXRTdGFydEVkZ2UiLCJfZW50ZXJQcmV2ZW50IiwidGVtcCIsIm5ld0Zvcm1hdCIsImlubmVyTm9kZSIsIm5ld0VsIiwicGFyZW50TGkiLCJuZXdMaXN0Q2VsbCIsImxpbmVBdHRyUmVzZXQiLCJzZWxlY3Rpb25Gb3JtYXQiLCJ3U2VsZWN0aW9uIiwiaW5zZXJ0SFRNTCIsIndPZmZzZXQiLCJmb2N1c05leHQiLCJiclByZXYiLCJick5leHQiLCJmb2N1c0JSIiwiaXNNdWx0aUxpbmUiLCJpbm5lclJhbmdlIiwidGVtcEVsIiwiY29tcENvbnRleHQiLCJfY29udGFpbmVyIiwiX2VsZW1lbnQiLCJfcmVmIiwiaXNPU1hfSU9TIiwibmJzcCIsImlzSUUiLCJjb21wb25lbnRJbmZvIiwiY3VycmVudFJvdyIsImN1cnJlbnRDZWxsIiwiY3VycmVudENlbGxGaXJzdE5vZGUiLCJjdXJyZW50Q2VsbExhc3ROb2RlIiwiaXNDZWxsRmlyc3ROb2RlIiwiaXNDZWxsTGFzdE5vZGUiLCJzaWJsaW5nVG9TZXQiLCJwcmV2aW91c1JvdyIsImNlbGxJbmRleCIsImdldFByZXZpb3VzRGVlcGVzdE5vZGUiLCJuZXh0Um93IiwiZ2V0TmV4dERlZXBlc3ROb2RlIiwic2VsZWN0UHJldmlvdXMiLCJzZWxlY3ROZXh0IiwicHJldmlvdXNEZWVwZXN0Tm9kZSIsIm5leHREZWVwZXN0Tm9kZSIsIm9uS2V5VXBfd3lzaXd5ZyIsIm9Gb3JtYXRUYWciLCJ0ZXh0S2V5IiwiemVyb1dpZHRoUmVnRXhwIiwiaXNDb21wb3NpbmciLCJmcm9udFplcm9XaWR0aENudCIsInN1YnN0cmluZyIsIm9uS2V5VXAiLCJvblNjcm9sbF93eXNpd3lnIiwib25TY3JvbGwiLCJvbkZvY3VzX3d5c2l3eWciLCJvbkZvY3VzIiwib25CbHVyX3d5c2l3eWciLCJvbkJsdXIiLCJvbk1vdXNlRG93bl9yZXNpemluZ0JhciIsImNsaWVudFkiLCJjbG9zdXJlRnVuYyIsIl9yZXNpemVfZWRpdG9yIiwicmVzaXplSW50ZXJ2YWwiLCJpc1Rvb2xiYXJIaWRkZW4iLCJmaWxlQnJvd3NlciIsImFyZWEiLCJtYXhIZWlnaHQiLCJoZWFkZXIiLCJlZGl0b3JIZWlnaHQiLCJ5Iiwic2Nyb2xsWSIsImVkaXRvclRvcCIsImlubGluZU9mZnNldCIsIl9vblN0aWNreVRvb2xiYXIiLCJzY3JvbGwiLCJzQ2VsbCIsImVDZWxsIiwic0lzQ2VsbCIsImVJc0NlbGwiLCJzQ29tcCIsImVDb21wIiwib25QYXN0ZV93eXNpd3lnIiwiY2xpcGJvYXJkRGF0YSIsIl9kYXRhVHJhbnNmZXJBY3Rpb24iLCJfc2V0Q2xpcGJvYXJkQ29tcG9uZW50Iiwic2V0RGF0YSIsIm9uQ29weV93eXNpd3lnIiwib25Db3B5Iiwib25TYXZlX3d5c2l3eWciLCJvblNhdmUiLCJvbkN1dF93eXNpd3lnIiwib25DdXQiLCJvbkRyb3Bfd3lzaXd5ZyIsImRhdGFUcmFuc2ZlciIsIl9zZXREcm9wTG9jYXRpb25TZWxlY3Rpb24iLCJyYW5nZU9mZnNldCIsImNhcmV0UmFuZ2VGcm9tUG9pbnQiLCJjbGllbnRYIiwicGxhaW5UZXh0IiwiY2xlYW5EYXRhIiwiZ2V0RGF0YSIsInRlbXBEaXYiLCJ0ZW1wUmFuZ2UiLCJfc2V0Q2xpcGJvYXJkRGF0YSIsIk1TRGF0YSIsIm9ubHlUZXh0Iiwib25QYXN0ZSIsIm9uRHJvcCIsImZpbGVzIiwiaW1hZ2UiLCJpbnNlcnRJbWFnZSIsIm9uTW91c2VNb3ZlX3d5c2l3eWciLCJsaW5lQnJlYWtlclN0eWxlIiwiY3R4RWwiLCJwYWdlWSIsImlzTW9iaWxlIiwiX29uTW91c2VEb3duX2xpbmVCcmVhayIsIl9vbkxpbmVCcmVhayIsImV2ZW50V3lzaXd5ZyIsIlJlc2l6ZU9ic2VydmVyIiwiZW50cmllcyIsImIiLCJwYXNzaXZlIiwicmVzaXplRW5hYmxlIiwiX3NldFJlc3BvbnNpdmVUb29sYmFyIiwiX3JlbW92ZUV2ZW50IiwidW5vYnNlcnZlIiwic2l6ZUFycmF5IiwiYnV0dG9uc09iaiIsImRlZmF1bHQiLCJidXR0b25Hcm91cCIsInNvcnQiLCJpbWFnZVVwbG9hZEhhbmRsZXIiLCJ2aWRlb1VwbG9hZEhhbmRsZXIiLCJhdWRpb1VwbG9hZEhhbmRsZXIiLCJvbkltYWdlVXBsb2FkQmVmb3JlIiwib25WaWRlb1VwbG9hZEJlZm9yZSIsIm9uQXVkaW9VcGxvYWRCZWZvcmUiLCJvbkltYWdlVXBsb2FkIiwib25WaWRlb1VwbG9hZCIsIm9uQXVkaW9VcGxvYWQiLCJvbkltYWdlVXBsb2FkRXJyb3IiLCJvblZpZGVvVXBsb2FkRXJyb3IiLCJvbkF1ZGlvVXBsb2FkRXJyb3IiLCJvblNldFRvb2xiYXJCdXR0b25zIiwiYnV0dG9uTGlzdCIsIm5ld1Rvb2xiYXIiLCJfY3JlYXRlVG9vbEJhciIsInJlc3BvbnNpdmVCdXR0b25zIiwibmV3Q29udGV4dCIsInNldE9wdGlvbnMiLCJfb3B0aW9ucyIsIm1lcmdlT3B0aW9ucyIsInJlZHVjZSIsImluaXQiLCJvcHRpb24iLCJ2YWwiLCJjb25zIiwiX3NldE9wdGlvbnMiLCJjYWxsQnV0dG9ucyIsIl9zZXRJZnJhbWVEb2N1bWVudCIsInNldERlZmF1bHRTdHlsZSIsIm5ld1N0eWxlcyIsIl9zZXREZWZhdWx0T3B0aW9uU3R5bGUiLCJmcmFtZSIsIm5vdGljZU9wZW4iLCJtZXNzYWdlIiwibm90aWNlQ2xvc2UiLCJjbG9zZSIsImdldENvbnRleHQiLCJnZXRUZXh0IiwiZ2V0SW1hZ2VzSW5mbyIsIl9pbmZvTGlzdCIsImdldEZpbGVzSW5mbyIsInN1Ym1pdEFjdGlvbiIsIm5vdENsZWFuaW5nRGF0YSIsInJhbmdlU2VsZWN0aW9uIiwiY2hlY2tIVE1MIiwiZmlyc3RDb24iLCJhcHBlbmRDb250ZW50cyIsInJlYWRPbmx5IiwibW9kYWxGb3JtIiwiZGlhbG9nIiwic2V0T3B0aW9uIiwiZGlzYWJsZSIsImVuYWJsZSIsImVuYWJsZWQiLCJzaG93IiwidG9wQXJlYVN0eWxlIiwiX2Rlc3Ryb3kiLCJjb3ZlciIsIm9yaWdpbkVsIiwidG9wRWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lib/core.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lib/history.js":
/*!***************************************************!*\
  !*** ./node_modules/suneditor/src/lib/history.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2019 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(core, change) {\n    const _w = core._w;\n    const util = core.util;\n    const delayTime = core.options.historyStackDelayTime;\n    let editor = core.context.element;\n    let undo = core.context.tool.undo;\n    let redo = core.context.tool.redo;\n    let pushDelay = null;\n    let stackIndex = 0;\n    let stack = [];\n    function setContentsFromStack() {\n        const item = stack[stackIndex];\n        editor.wysiwyg.innerHTML = item.contents;\n        core.setRange(util.getNodeFromPath(item.s.path, editor.wysiwyg), item.s.offset, util.getNodeFromPath(item.e.path, editor.wysiwyg), item.e.offset);\n        core.focus();\n        if (stack.length <= 1) {\n            if (undo) undo.setAttribute(\"disabled\", true);\n            if (redo) redo.setAttribute(\"disabled\", true);\n        } else {\n            if (stackIndex === 0) {\n                if (undo) undo.setAttribute(\"disabled\", true);\n                if (redo) redo.removeAttribute(\"disabled\");\n            } else if (stackIndex === stack.length - 1) {\n                if (undo) undo.removeAttribute(\"disabled\");\n                if (redo) redo.setAttribute(\"disabled\", true);\n            } else {\n                if (undo) undo.removeAttribute(\"disabled\");\n                if (redo) redo.removeAttribute(\"disabled\");\n            }\n        }\n        core.controllersOff();\n        core._checkComponents();\n        core._setCharCount();\n        core._resourcesStateChange();\n        // onChange\n        change();\n    }\n    function pushStack() {\n        core._checkComponents();\n        const current = editor.wysiwyg.innerHTML;\n        if (!current || !!stack[stackIndex] && current === stack[stackIndex].contents) return;\n        stackIndex++;\n        const range = core._variable._range;\n        if (stack.length > stackIndex) {\n            stack = stack.slice(0, stackIndex);\n            if (redo) redo.setAttribute(\"disabled\", true);\n        }\n        if (!range) {\n            stack[stackIndex] = {\n                contents: current,\n                s: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: [\n                        0,\n                        0\n                    ]\n                },\n                e: {\n                    path: 0,\n                    offset: 0\n                }\n            };\n        } else {\n            stack[stackIndex] = {\n                contents: current,\n                s: {\n                    path: util.getNodePath(range.startContainer, null, null),\n                    offset: range.startOffset\n                },\n                e: {\n                    path: util.getNodePath(range.endContainer, null, null),\n                    offset: range.endOffset\n                }\n            };\n        }\n        if (stackIndex === 1 && undo) undo.removeAttribute(\"disabled\");\n        core._setCharCount();\n        // onChange\n        change();\n    }\n    return {\n        /**\n         * @description History stack\n         */ stack: stack,\n        /**\n         * @description Saving the current status to the history object stack\n         * If \"delay\" is true, it will be saved after (options.historyStackDelayTime || 400) miliseconds\n         * If the function is called again with the \"delay\" argument true before it is saved, the delay time is renewal\n         * You can specify the delay time by sending a number.\n         * @param {Boolean|Number} delay If true, Add stack without delay time.\n         */ push: function(delay) {\n            _w.setTimeout(core._resourcesStateChange.bind(core));\n            const time = typeof delay === \"number\" ? delay > 0 ? delay : 0 : !delay ? 0 : delayTime;\n            if (!time || pushDelay) {\n                _w.clearTimeout(pushDelay);\n                if (!time) {\n                    pushStack();\n                    return;\n                }\n            }\n            pushDelay = _w.setTimeout(function() {\n                _w.clearTimeout(pushDelay);\n                pushDelay = null;\n                pushStack();\n            }, time);\n        },\n        /**\n         * @description Undo function\n         */ undo: function() {\n            if (stackIndex > 0) {\n                stackIndex--;\n                setContentsFromStack();\n            }\n        },\n        /**\n         * @description Redo function\n         */ redo: function() {\n            if (stack.length - 1 > stackIndex) {\n                stackIndex++;\n                setContentsFromStack();\n            }\n        },\n        /**\n         * @description Go to the history stack for that index.\n         * If \"index\" is -1, go to the last stack\n         */ go: function(index) {\n            stackIndex = index < 0 ? stack.length - 1 : index;\n            setContentsFromStack();\n        },\n        /**\n         * @description Get the current history stack index.\n         * @returns {Number} Current Stack index\n         */ getCurrentIndex: function() {\n            return stackIndex;\n        },\n        /**\n         * @description Reset the history object\n         */ reset: function(ignoreChangeEvent) {\n            if (undo) undo.setAttribute(\"disabled\", true);\n            if (redo) redo.setAttribute(\"disabled\", true);\n            core._variable.isChanged = false;\n            if (core.context.tool.save) core.context.tool.save.setAttribute(\"disabled\", true);\n            stack.splice(0);\n            stackIndex = 0;\n            // pushStack\n            stack[stackIndex] = {\n                contents: core.getContents(true),\n                s: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: 0\n                },\n                e: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: 0\n                }\n            };\n            if (!ignoreChangeEvent) change();\n        },\n        /**\n         * @description Reset the disabled state of the buttons to fit the current stack.\n         * @private\n         */ _resetCachingButton: function() {\n            editor = core.context.element;\n            undo = core.context.tool.undo;\n            redo = core.context.tool.redo;\n            if (stackIndex === 0) {\n                if (undo) undo.setAttribute(\"disabled\", true);\n                if (redo && stackIndex === stack.length - 1) redo.setAttribute(\"disabled\", true);\n                core._variable.isChanged = false;\n                if (core.context.tool.save) core.context.tool.save.setAttribute(\"disabled\", true);\n            } else if (stackIndex === stack.length - 1) {\n                if (redo) redo.setAttribute(\"disabled\", true);\n            }\n        },\n        /**\n         * @description Remove all stacks and remove the timeout function.\n         * @private\n         */ _destroy: function() {\n            if (pushDelay) _w.clearTimeout(pushDelay);\n            stack = null;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lib/history.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/lib/util.js":
/*!************************************************!*\
  !*** ./node_modules/suneditor/src/lib/util.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n/**\r\n * @description utility function\r\n */ const util = {\n    _d: null,\n    _w: null,\n    isIE: null,\n    isIE_Edge: null,\n    isOSX_IOS: null,\n    isChromium: null,\n    isMobile: null,\n    isResizeObserverSupported: null,\n    _propertiesInit: function() {\n        if (this._d) return;\n        this._d = document;\n        this._w = window;\n        this.isIE = navigator.userAgent.indexOf(\"Trident\") > -1;\n        this.isIE_Edge = navigator.userAgent.indexOf(\"Trident\") > -1 || navigator.appVersion.indexOf(\"Edge\") > -1;\n        this.isOSX_IOS = /(Mac|iPhone|iPod|iPad)/.test(navigator.platform);\n        this.isChromium = !!window.chrome;\n        this.isResizeObserverSupported = typeof ResizeObserver === \"function\";\n        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || \"ontouchstart\" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n    },\n    _allowedEmptyNodeList: \".se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas\",\n    /**\r\n     * @description HTML Reserved Word Converter.\r\n     * @param {String} contents \r\n     * @returns {String} HTML string\r\n     * @private\r\n     */ _HTMLConvertor: function(contents) {\n        const ec = {\n            \"&\": \"&amp;\",\n            \"\\xa0\": \"&nbsp;\",\n            \"'\": \"&apos;\",\n            '\"': \"&quot;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\"\n        };\n        return contents.replace(/&|\\u00A0|'|\"|<|>/g, function(m) {\n            return typeof ec[m] === \"string\" ? ec[m] : m;\n        });\n    },\n    /**\r\n     * @description Unicode Character 'ZERO WIDTH SPACE' (\\u200B)\r\n     */ zeroWidthSpace: String.fromCharCode(8203),\n    /**\r\n     * @description Regular expression to find 'zero width space' (/\\u200B/g)\r\n     */ zeroWidthRegExp: new RegExp(String.fromCharCode(8203), \"g\"),\n    /**\r\n     * @description Regular expression to find only 'zero width space' (/^\\u200B+$/)\r\n     */ onlyZeroWidthRegExp: new RegExp(\"^\" + String.fromCharCode(8203) + \"+$\"),\n    fontValueMap: {\n        \"xx-small\": 1,\n        \"x-small\": 2,\n        \"small\": 3,\n        \"medium\": 4,\n        \"large\": 5,\n        \"x-large\": 6,\n        \"xx-large\": 7\n    },\n    /**\r\n     * @description A method that checks If the text is blank or to see if it contains 'ZERO WIDTH SPACE' or empty (util.zeroWidthSpace)\r\n     * @param {String|Node} text String value or Node\r\n     * @returns {Boolean}\r\n     */ onlyZeroWidthSpace: function(text) {\n        if (text === null || text === undefined) return false;\n        if (typeof text !== \"string\") text = text.textContent;\n        return text === \"\" || this.onlyZeroWidthRegExp.test(text);\n    },\n    /**\r\n     * @description Gets XMLHttpRequest object\r\n     * @returns {XMLHttpRequest|ActiveXObject}\r\n     */ getXMLHttpRequest: function() {\n        /** IE */ if (this._w.ActiveXObject) {\n            try {\n                return new ActiveXObject(\"Msxml2.XMLHTTP\");\n            } catch (e) {\n                try {\n                    return new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } catch (e1) {\n                    return null;\n                }\n            }\n        } else if (this._w.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        } else {\n            return null;\n        }\n    },\n    /**\r\n     * @description Object.values\r\n     * @param {Object|null} obj Object parameter.\r\n     * @returns {Array}\r\n     */ getValues: function(obj) {\n        return !obj ? [] : this._w.Object.keys(obj).map(function(i) {\n            return obj[i];\n        });\n    },\n    /**\r\n     * @description Convert the CamelCase To the KebabCase.\r\n     * @param {String|Array} param [Camel string]\r\n     * @returns {String|Array}\r\n     */ camelToKebabCase: function(param) {\n        if (typeof param === \"string\") {\n            return param.replace(/[A-Z]/g, function(letter) {\n                return \"-\" + letter.toLowerCase();\n            });\n        } else {\n            return param.map(function(str) {\n                return util.camelToKebabCase(str);\n            });\n        }\n    },\n    /**\r\n     * @description Convert the KebabCase To the CamelCase.\r\n     * @param {String|Array} param [KebabCase string]\r\n     * @returns {String|Array}\r\n     */ kebabToCamelCase: function(param) {\n        if (typeof param === \"string\") {\n            return param.replace(/-[a-zA-Z]/g, function(letter) {\n                return letter.replace(\"-\", \"\").toUpperCase();\n            });\n        } else {\n            return param.map(function(str) {\n                return util.camelToKebabCase(str);\n            });\n        }\n    },\n    /**\r\n     * @description Create Element node\r\n     * @param {String} elementName Element name\r\n     * @returns {Element}\r\n     */ createElement: function(elementName) {\n        return this._d.createElement(elementName);\n    },\n    /**\r\n     * @description Create text node\r\n     * @param {String} text text contents\r\n     * @returns {Node}\r\n     */ createTextNode: function(text) {\n        return this._d.createTextNode(text || \"\");\n    },\n    /**\r\n     * @description The editor checks tags by string.\r\n     * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n     * When using an attribute with \"<\" or \">\", use \"HTMLEncoder\" to save. (ex: math(katex))\r\n     * @param {String} contents HTML or Text string\r\n     * @returns {String}\r\n     */ HTMLEncoder: function(contents) {\n        const ec = {\n            \"<\": \"$lt;\",\n            \">\": \"$gt;\"\n        };\n        return contents.replace(/<|>/g, function(m) {\n            return typeof ec[m] === \"string\" ? ec[m] : m;\n        });\n    },\n    /**\r\n     * @description The editor checks tags by string.\r\n     * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n     * Decoder of data stored as \"HTMLEncoder\" (ex: math(katex))\r\n     * @param {String} contents HTML or Text string\r\n     * @returns {String}\r\n     */ HTMLDecoder: function(contents) {\n        const ec = {\n            \"$lt;\": \"<\",\n            \"$gt;\": \">\"\n        };\n        return contents.replace(/\\$lt;|\\$gt;/g, function(m) {\n            return typeof ec[m] === \"string\" ? ec[m] : m;\n        });\n    },\n    /**\r\n     * @description This method run Object.prototype.hasOwnProperty.call(obj, key)\r\n     * @param {Object} obj Object\r\n     * @param {String} key obj.key\r\n     * @returns {Boolean}\r\n     */ hasOwn: function(obj, key) {\n        return this._hasOwn.call(obj, key);\n    },\n    _hasOwn: Object.prototype.hasOwnProperty,\n    /**\r\n     * @deprecated\r\n     * @description Get the the tag path of the arguments value\r\n     * If not found, return the first found value\r\n     * @param {Array} nameArray File name array\r\n     * @param {String} extension js, css\r\n     * @returns {String}\r\n     */ getIncludePath: function(nameArray, extension) {\n        let path = \"\";\n        const pathList = [];\n        const tagName = extension === \"js\" ? \"script\" : \"link\";\n        const src = extension === \"js\" ? \"src\" : \"href\";\n        let fileName = \"(?:\";\n        for(let i = 0, len = nameArray.length; i < len; i++){\n            fileName += nameArray[i] + (i < len - 1 ? \"|\" : \")\");\n        }\n        const regExp = new this._w.RegExp(\"(^|.*[\\\\/])\" + fileName + \"(\\\\.[^\\\\/]+)?.\" + extension + \"(?:\\\\?.*|;.*)?$\", \"i\");\n        const extRegExp = new this._w.RegExp(\".+\\\\.\" + extension + \"(?:\\\\?.*|;.*)?$\", \"i\");\n        for(let c = this._d.getElementsByTagName(tagName), i = 0; i < c.length; i++){\n            if (extRegExp.test(c[i][src])) {\n                pathList.push(c[i]);\n            }\n        }\n        for(let i = 0; i < pathList.length; i++){\n            let editorTag = pathList[i][src].match(regExp);\n            if (editorTag) {\n                path = editorTag[0];\n                break;\n            }\n        }\n        if (path === \"\") path = pathList.length > 0 ? pathList[0][src] : \"\";\n        -1 === path.indexOf(\":/\") && \"//\" !== path.slice(0, 2) && (path = 0 === path.indexOf(\"/\") ? location.href.match(/^.*?:\\/\\/[^\\/]*/)[0] + path : location.href.match(/^[^\\?]*\\/(?:)/)[0] + path);\n        if (!path) throw \"[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +\" + name + \", extension: \" + extension + \")\";\n        return path;\n    },\n    /**\r\n     * @deprecated\r\n     * @description Returns the CSS text that has been applied to the current page.\r\n     * @param {Document|null} doc To get the CSS text of an document(core._wd). If null get the current document.\r\n     * @returns {String} Styles string\r\n     */ getPageStyle: function(doc) {\n        let cssText = \"\";\n        const sheets = (doc || this._d).styleSheets;\n        for(let i = 0, len = sheets.length, rules; i < len; i++){\n            try {\n                rules = sheets[i].cssRules;\n            } catch (e) {\n                continue;\n            }\n            if (rules) {\n                for(let c = 0, cLen = rules.length; c < cLen; c++){\n                    cssText += rules[c].cssText;\n                }\n            }\n        }\n        return cssText;\n    },\n    /**\r\n     * @description Get the argument iframe's document object\r\n     * @param {Element} iframe Iframe element (context.element.wysiwygFrame)\r\n     * @returns {Document}\r\n     */ getIframeDocument: function(iframe) {\n        let wDocument = iframe.contentWindow || iframe.contentDocument;\n        if (wDocument.document) wDocument = wDocument.document;\n        return wDocument;\n    },\n    /**\r\n     * @description Get attributes of argument element to string ('class=\"---\" name=\"---\" ')\r\n     * @param {Element} element Element object\r\n     * @param {Array|null} exceptAttrs Array of attribute names to exclude from the result\r\n     * @returns {String}\r\n     */ getAttributesToString: function(element, exceptAttrs) {\n        if (!element.attributes) return \"\";\n        const attrs = element.attributes;\n        let attrString = \"\";\n        for(let i = 0, len = attrs.length; i < len; i++){\n            if (exceptAttrs && exceptAttrs.indexOf(attrs[i].name) > -1) continue;\n            attrString += attrs[i].name + '=\"' + attrs[i].value + '\" ';\n        }\n        return attrString;\n    },\n    /**\r\n     * @descriptionGets Get the length in bytes of a string.\r\n     * referencing code: \"https://github.com/shaan1974/myrdin/blob/master/expressions/string.js#L11\"\r\n     * @param {String} text String text\r\n     * @returns {Number}\r\n     */ getByteLength: function(text) {\n        if (!text || !text.toString) return 0;\n        text = text.toString();\n        const encoder = this._w.encodeURIComponent;\n        let cr, cl;\n        if (this.isIE_Edge) {\n            cl = this._w.unescape(encoder(text)).length;\n            cr = 0;\n            if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\n                cr = encoder(text).match(/(%0A|%0D)/gi).length;\n            }\n            return cl + cr;\n        } else {\n            cl = new this._w.TextEncoder(\"utf-8\").encode(text).length;\n            cr = 0;\n            if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\n                cr = encoder(text).match(/(%0A|%0D)/gi).length;\n            }\n            return cl + cr;\n        }\n    },\n    /**\r\n     * @description It is judged whether it is the edit region top div element or iframe's body tag.\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isWysiwygDiv: function(element) {\n        return element && element.nodeType === 1 && (this.hasClass(element, \"se-wrapper-wysiwyg\") || /^BODY$/i.test(element.nodeName));\n    },\n    /**\r\n     * @description It is judged whether it is the contenteditable property is false.\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isNonEditable: function(element) {\n        return element && element.nodeType === 1 && element.getAttribute(\"contenteditable\") === \"false\";\n    },\n    /**\r\n     * @description It is judged whether it is a node related to the text style.\r\n     * (strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isTextStyleElement: function(element) {\n        return element && element.nodeType !== 3 && /^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(element.nodeName);\n    },\n    /**\r\n     * @description It is judged whether it is the input element (INPUT, TEXTAREA)\r\n     * @param {Node} element The node to check\r\n     * @returns \r\n     */ isInputElement: function(element) {\n        return element && element.nodeType === 1 && /^(INPUT|TEXTAREA)$/i.test(element.nodeName);\n    },\n    /**\r\n     * @description It is judged whether it is the format element (P, DIV, H[1-6], PRE, LI | class=\"__se__format__replace_xxx\")\r\n     * Format element also contain \"free format Element\"\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__replace_.+(\\\\s|$)|(\\\\s|^)__se__format__free_.+(\\\\s|$)\")) && !this.isComponent(element) && !this.isWysiwygDiv(element);\n    },\n    /**\r\n     * @description It is judged whether it is the range format element. (BLOCKQUOTE, OL, UL, FIGCAPTION, TABLE, THEAD, TBODY, TR, TH, TD | class=\"__se__format__range_xxx\")\r\n     * Range format element is wrap the \"format element\" and \"component\"\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isRangeFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__range_.+(\\\\s|$)\"));\n    },\n    /**\r\n     * @description It is judged whether it is the closure range format element. (TH, TD | class=\"__se__format__range__closure_xxx\")\r\n     * Closure range format elements is included in the range format element.\r\n     *  - Closure range format element is wrap the \"format element\" and \"component\"\r\n     * ※ You cannot exit this format with the Enter key or Backspace key.\r\n     * ※ Use it only in special cases. ([ex] format of table cells)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isClosureRangeFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^(TH|TD)$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__range__closure_.+(\\\\s|$)\"));\n    },\n    /**\r\n     * @description It is judged whether it is the free format element. (PRE | class=\"__se__format__free_xxx\")\r\n     * Free format elements is included in the format element.\r\n     * Free format elements's line break is \"BR\" tag.\r\n     * ※ Entering the Enter key in the space on the last line ends \"Free Format\" and appends \"Format\".\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isFreeFormatElement: function(element) {\n        return element && element.nodeType === 1 && (/^PRE$/i.test(element.nodeName) || this.hasClass(element, \"(\\\\s|^)__se__format__free_.+(\\\\s|$)\")) && !this.isComponent(element) && !this.isWysiwygDiv(element);\n    },\n    /**\r\n     * @description It is judged whether it is the closure free format element. (class=\"__se__format__free__closure_xxx\")\r\n     * Closure free format elements is included in the free format element.\r\n     *  - Closure free format elements's line break is \"BR\" tag.\r\n     * ※ You cannot exit this format with the Enter key or Backspace key.\r\n     * ※ Use it only in special cases. ([ex] format of table cells)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isClosureFreeFormatElement: function(element) {\n        return element && element.nodeType === 1 && this.hasClass(element, \"(\\\\s|^)__se__format__free__closure_.+(\\\\s|$)\");\n    },\n    /**\r\n     * @description It is judged whether it is the component[img, iframe, video, audio, table] cover(class=\"se-component\") and table, hr\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isComponent: function(element) {\n        return element && (/se-component/.test(element.className) || /^(TABLE|HR)$/.test(element.nodeName));\n    },\n    /**\r\n     * @description Checks for \"__se__uneditable\" in the class list.\r\n     * Components with class \"__se__uneditable\" cannot be modified.\r\n     * @param {Element} element The element to check\r\n     * @returns {Boolean}\r\n     */ isUneditableComponent: function(element) {\n        return element && this.hasClass(element, \"__se__uneditable\");\n    },\n    /**\r\n     * @description It is judged whether it is the component [img, iframe] cover(class=\"se-component\")\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isMediaComponent: function(element) {\n        return element && /se-component/.test(element.className);\n    },\n    /**\r\n     * @description It is judged whether it is the not checking node. (class=\"katex\", \"__se__tag\")\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */ isNotCheckingNode: function(element) {\n        return element && /katex|__se__tag/.test(element.className);\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a format node (util.isFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isRangeFormatElement(element)) element.firstElementChild;\n            if (this.isFormatElement(element) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a format node (util.isRangeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getRangeFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isRangeFormatElement(element) && !/^(THEAD|TBODY|TR)$/i.test(element.nodeName) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a free format node (util.isFreeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getFreeFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isFreeFormatElement(element) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description If a parent node that contains an argument node finds a closure free format node (util.isClosureFreeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */ getClosureFreeFormatElement: function(element, validation) {\n        if (!element) return null;\n        if (!validation) {\n            validation = function() {\n                return true;\n            };\n        }\n        while(element){\n            if (this.isWysiwygDiv(element)) return null;\n            if (this.isClosureFreeFormatElement(element) && validation(element)) return element;\n            element = element.parentNode;\n        }\n        return null;\n    },\n    /**\r\n     * @description Add style and className of copyEl to originEl\r\n     * @param {Element} originEl Origin element\r\n     * @param {Element} copyEl Element to copy\r\n     * @param {Array|null} blacklist Blacklist array(LowerCase)\r\n     */ copyTagAttributes: function(originEl, copyEl, blacklist) {\n        if (copyEl.style.cssText) {\n            const copyStyles = copyEl.style;\n            for(let i = 0, len = copyStyles.length; i < len; i++){\n                originEl.style[copyStyles[i]] = copyStyles[copyStyles[i]];\n            }\n        }\n        const attrs = copyEl.attributes;\n        for(let i = 0, len = attrs.length, name1; i < len; i++){\n            name1 = attrs[i].name.toLowerCase();\n            if (blacklist && blacklist.indexOf(name1) > -1 || !attrs[i].value) originEl.removeAttribute(name1);\n            else if (name1 !== \"style\") originEl.setAttribute(attrs[i].name, attrs[i].value);\n        }\n    },\n    /**\r\n     * @description Copy and apply attributes of format tag that should be maintained. (style, class) Ignore \"__se__format__\" class\r\n     * @param {Element} originEl Origin element\r\n     * @param {Element} copyEl Element to copy\r\n     */ copyFormatAttributes: function(originEl, copyEl) {\n        copyEl = copyEl.cloneNode(false);\n        copyEl.className = copyEl.className.replace(/(\\s|^)__se__format__[^\\s]+/g, \"\");\n        this.copyTagAttributes(originEl, copyEl);\n    },\n    /**\r\n     * @description Get the item from the array that matches the condition.\r\n     * @param {Array|HTMLCollection|NodeList} array Array to get item\r\n     * @param {Function|null} validation Conditional function\r\n     * @param {Boolean} multi If true, returns all items that meet the criteria otherwise, returns an empty array.\r\n     * If false, returns only one item that meet the criteria otherwise return null.\r\n     * @returns {Array|Node|null}\r\n     */ getArrayItem: function(array, validation, multi) {\n        if (!array || array.length === 0) return null;\n        validation = validation || function() {\n            return true;\n        };\n        const arr = [];\n        for(let i = 0, len = array.length, a; i < len; i++){\n            a = array[i];\n            if (validation(a)) {\n                if (!multi) return a;\n                else arr.push(a);\n            }\n        }\n        return !multi ? null : arr;\n    },\n    /**\r\n     * @description Check if an array contains an element \r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} element The element to check for\r\n     * @returns {Boolean}\r\n     */ arrayIncludes: function(array, element) {\n        for(let i = 0; i < array.length; i++){\n            if (array[i] === element) {\n                return true;\n            }\n        }\n        return false;\n    },\n    /**\r\n     * @description Get the index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} element The element to find index\r\n     * @returns {Number}\r\n     */ getArrayIndex: function(array, element) {\n        let idx = -1;\n        for(let i = 0, len = array.length; i < len; i++){\n            if (array[i] === element) {\n                idx = i;\n                break;\n            }\n        }\n        return idx;\n    },\n    /**\r\n     * @description Get the next index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} item The element to find index\r\n     * @returns {Number}\r\n     */ nextIdx: function(array, item) {\n        let idx = this.getArrayIndex(array, item);\n        if (idx === -1) return -1;\n        return idx + 1;\n    },\n    /**\r\n     * @description Get the previous index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array Element array\r\n     * @param {Node} item The element to find index\r\n     * @returns {Number}\r\n     */ prevIdx: function(array, item) {\n        let idx = this.getArrayIndex(array, item);\n        if (idx === -1) return -1;\n        return idx - 1;\n    },\n    /**\r\n     * @description Returns the index compared to other sibling nodes.\r\n     * @param {Node} node The Node to find index\r\n     * @returns {Number}\r\n     */ getPositionIndex: function(node) {\n        let idx = 0;\n        while(node = node.previousSibling){\n            idx += 1;\n        }\n        return idx;\n    },\n    /**\r\n     * @description Returns the position of the \"node\" in the \"parentNode\" in a numerical array.\r\n     * ex) <p><span>aa</span><span>bb</span></p> : getNodePath(node: \"bb\", parentNode: \"<P>\") -> [1, 0]\r\n     * @param {Node} node The Node to find position path\r\n     * @param {Node|null} parentNode Parent node. If null, wysiwyg div area\r\n     * @param {Object|null} _newOffsets If you send an object of the form \"{s: 0, e: 0}\", the text nodes that are attached together are merged into one, centered on the \"node\" argument.\r\n     * \"_newOffsets.s\" stores the length of the combined characters after \"node\" and \"_newOffsets.e\" stores the length of the combined characters before \"node\".\r\n     * Do not use unless absolutely necessary.\r\n     * @returns {Array}\r\n     */ getNodePath: function(node, parentNode, _newOffsets) {\n        const path = [];\n        let finds = true;\n        this.getParentElement(node, (function(el) {\n            if (el === parentNode) finds = false;\n            if (finds && !this.isWysiwygDiv(el)) {\n                // merge text nodes\n                if (_newOffsets && el.nodeType === 3) {\n                    let temp = null, tempText = null;\n                    _newOffsets.s = _newOffsets.e = 0;\n                    let previous = el.previousSibling;\n                    while(previous && previous.nodeType === 3){\n                        tempText = previous.textContent.replace(this.zeroWidthRegExp, \"\");\n                        _newOffsets.s += tempText.length;\n                        el.textContent = tempText + el.textContent;\n                        temp = previous;\n                        previous = previous.previousSibling;\n                        this.removeItem(temp);\n                    }\n                    let next = el.nextSibling;\n                    while(next && next.nodeType === 3){\n                        tempText = next.textContent.replace(this.zeroWidthRegExp, \"\");\n                        _newOffsets.e += tempText.length;\n                        el.textContent += tempText;\n                        temp = next;\n                        next = next.nextSibling;\n                        this.removeItem(temp);\n                    }\n                }\n                // index push\n                path.push(el);\n            }\n            return false;\n        }).bind(this));\n        return path.map(this.getPositionIndex).reverse();\n    },\n    /**\r\n     * @description Returns the node in the location of the path array obtained from \"util.getNodePath\".\r\n     * @param {Array} offsets Position array, array obtained from \"util.getNodePath\"\r\n     * @param {Node} parentNode Base parent element\r\n     * @returns {Node}\r\n     */ getNodeFromPath: function(offsets, parentNode) {\n        let current = parentNode;\n        let nodes;\n        for(let i = 0, len = offsets.length; i < len; i++){\n            nodes = current.childNodes;\n            if (nodes.length === 0) break;\n            if (nodes.length <= offsets[i]) {\n                current = nodes[nodes.length - 1];\n            } else {\n                current = nodes[offsets[i]];\n            }\n        }\n        return current;\n    },\n    /**\r\n     * @description Compares the style and class for equal values.\r\n     * Returns true if both are text nodes.\r\n     * @param {Node} a Node to compare\r\n     * @param {Node} b Node to compare\r\n     * @returns {Boolean}\r\n     */ isSameAttributes: function(a, b) {\n        if (a.nodeType === 3 && b.nodeType === 3) return true;\n        if (a.nodeType === 3 || b.nodeType === 3) return false;\n        const style_a = a.style;\n        const style_b = b.style;\n        let compStyle = 0;\n        for(let i = 0, len = style_a.length; i < len; i++){\n            if (style_a[style_a[i]] === style_b[style_a[i]]) compStyle++;\n        }\n        const class_a = a.classList;\n        const class_b = b.classList;\n        const reg = this._w.RegExp;\n        let compClass = 0;\n        for(let i = 0, len = class_a.length; i < len; i++){\n            if (reg(\"(s|^)\" + class_a[i] + \"(s|$)\").test(class_b.value)) compClass++;\n        }\n        return compStyle === style_b.length && compStyle === style_a.length && compClass === class_b.length && compClass === class_a.length;\n    },\n    /**\r\n     * @description Check the line element(util.isFormatElement) is empty.\r\n     * @param {Element} element Format element node\r\n     * @returns {Boolean}\r\n     */ isEmptyLine: function(element) {\n        return !element || !element.parentNode || !element.querySelector(\"IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE\") && element.children.length === 0 && this.onlyZeroWidthSpace(element.textContent);\n    },\n    /**\r\n     * @description Check the span's attributes are empty.\r\n     * @param {Element|null} element Element node\r\n     * @returns {Boolean}\r\n     */ isSpanWithoutAttr: function(element) {\n        return !!element && element.nodeType === 1 && /^SPAN$/i.test(element.nodeName) && !element.className && !element.style.cssText;\n    },\n    /**\r\n     * @description Check the node is a list (ol, ul)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isList: function(node) {\n        return node && /^(OL|UL)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a list cell (li)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isListCell: function(node) {\n        return node && /^LI$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a table (table, thead, tbody, tr, th, td)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isTable: function(node) {\n        return node && /^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a table cell (td, th)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isCell: function(node) {\n        return node && /^(TD|TH)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a break node (BR)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isBreak: function(node) {\n        return node && /^BR$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a anchor node (A)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isAnchor: function(node) {\n        return node && /^A$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a media node (img, iframe, audio, video, canvas)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isMedia: function(node) {\n        return node && /^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test(typeof node === \"string\" ? node : node.nodeName);\n    },\n    /**\r\n     * @description Check the node is a figure tag or util.isMedia()\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */ isFigures: function(node) {\n        return node && (this.isMedia(node) || /^(FIGURE)$/i.test(typeof node === \"string\" ? node : node.nodeName));\n    },\n    /**\r\n     * @description Checks for numeric (with decimal point).\r\n     * @param {String|Number} text Text string or number\r\n     * @returns {Boolean}\r\n     */ isNumber: function(text) {\n        return !!text && /^-?\\d+(\\.\\d+)?$/.test(text + \"\");\n    },\n    /**\r\n     * @description Get a number.\r\n     * @param {String|Number} text Text string or number\r\n     * @param {Number} maxDec Maximum number of decimal places (-1 : Infinity)\r\n     * @returns {Number}\r\n     */ getNumber: function(text, maxDec) {\n        if (!text) return 0;\n        let number = (text + \"\").match(/-?\\d+(\\.\\d+)?/);\n        if (!number || !number[0]) return 0;\n        number = number[0];\n        return maxDec < 0 ? number * 1 : maxDec === 0 ? this._w.Math.round(number * 1) : (number * 1).toFixed(maxDec) * 1;\n    },\n    /**\r\n     * @description Get all \"children\" of the argument value element (Without text nodes)\r\n     * @param {Element} element element to get child node\r\n     * @param {Function|null} validation Conditional function\r\n     * @returns {Array}\r\n     */ getListChildren: function(element, validation) {\n        const children = [];\n        if (!element || !element.children || element.children.length === 0) return children;\n        validation = validation || function() {\n            return true;\n        };\n        (function recursionFunc(current) {\n            if (element !== current && validation(current)) {\n                children.push(current);\n            }\n            if (!!current.children) {\n                for(let i = 0, len = current.children.length; i < len; i++){\n                    recursionFunc(current.children[i]);\n                }\n            }\n        })(element);\n        return children;\n    },\n    /**\r\n     * @description Get all \"childNodes\" of the argument value element (Include text nodes)\r\n     * @param {Node} element element to get child node\r\n     * @param {Function|null} validation Conditional function\r\n     * @returns {Array}\r\n     */ getListChildNodes: function(element, validation) {\n        const children = [];\n        if (!element || element.childNodes.length === 0) return children;\n        validation = validation || function() {\n            return true;\n        };\n        (function recursionFunc(current) {\n            if (element !== current && validation(current)) {\n                children.push(current);\n            }\n            for(let i = 0, len = current.childNodes.length; i < len; i++){\n                recursionFunc(current.childNodes[i]);\n            }\n        })(element);\n        return children;\n    },\n    /**\r\n     * @description Returns the number of parents nodes.\r\n     * \"0\" when the parent node is the WYSIWYG area.\r\n     * \"-1\" when the element argument is the WYSIWYG area.\r\n     * @param {Node} element The element to check\r\n     * @returns {Number}\r\n     */ getElementDepth: function(element) {\n        if (!element || this.isWysiwygDiv(element)) return -1;\n        let depth = 0;\n        element = element.parentNode;\n        while(element && !this.isWysiwygDiv(element)){\n            depth += 1;\n            element = element.parentNode;\n        }\n        return depth;\n    },\n    /**\r\n     * @description Compares two elements to find a common ancestor, and returns the order of the two elements.\r\n     * @param {Node} a Node to compare.\r\n     * @param {Node} b Node to compare.\r\n     * @returns {Object} { ancesstor, a, b, result: (a > b ? 1 : a < b ? -1 : 0) };\r\n     */ compareElements: function(a, b) {\n        let aNode = a, bNode = b;\n        while(aNode && bNode && aNode.parentNode !== bNode.parentNode){\n            aNode = aNode.parentNode;\n            bNode = bNode.parentNode;\n        }\n        if (!aNode || !bNode) return {\n            ancestor: null,\n            a: a,\n            b: b,\n            result: 0\n        };\n        const children = aNode.parentNode.childNodes;\n        const aIndex = this.getArrayIndex(children, aNode);\n        const bIndex = this.getArrayIndex(children, bNode);\n        return {\n            ancestor: aNode.parentNode,\n            a: aNode,\n            b: bNode,\n            result: aIndex > bIndex ? 1 : aIndex < bIndex ? -1 : 0\n        };\n    },\n    /**\r\n     * @description Get the parent element of the argument value.\r\n     * A tag that satisfies the query condition is imported.\r\n     * Returns null if not found.\r\n     * @param {Node} element Reference element\r\n     * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n     * Not use it like jquery.\r\n     * Only one condition can be entered at a time.\r\n     * @returns {Element|null}\r\n     */ getParentElement: function(element, query) {\n        let check;\n        if (typeof query === \"function\") {\n            check = query;\n        } else {\n            let attr;\n            if (/^\\./.test(query)) {\n                attr = \"className\";\n                query = query.split(\".\")[1];\n            } else if (/^#/.test(query)) {\n                attr = \"id\";\n                query = \"^\" + query.split(\"#\")[1] + \"$\";\n            } else if (/^:/.test(query)) {\n                attr = \"name\";\n                query = \"^\" + query.split(\":\")[1] + \"$\";\n            } else {\n                attr = \"nodeName\";\n                query = \"^\" + query + \"$\";\n            }\n            const regExp = new this._w.RegExp(query, \"i\");\n            check = function(el) {\n                return regExp.test(el[attr]);\n            };\n        }\n        while(element && !check(element)){\n            if (this.isWysiwygDiv(element)) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return element;\n    },\n    /**\r\n     * @description Gets the previous sibling last child. If there is no sibling, then it'll take it from the closest ancestor with child\r\n     * Returns null if not found.\r\n     * @param {Node} node Reference element\r\n     * @param {Node|null} ceiling Highest boundary allowed\r\n     * @returns {Node|null}\r\n     */ getPreviousDeepestNode: function(node, ceiling) {\n        let previousNode = node.previousSibling;\n        if (!previousNode) {\n            for(let parentNode = node.parentNode; parentNode; parentNode = parentNode.parentNode){\n                if (parentNode === ceiling) return null;\n                if (parentNode.previousSibling) {\n                    previousNode = parentNode.previousSibling;\n                    break;\n                }\n            }\n            if (!previousNode) return null;\n        }\n        while(previousNode.lastChild)previousNode = previousNode.lastChild;\n        return previousNode;\n    },\n    /**\r\n     * @description Gets the next sibling first child. If there is no sibling, then it'll take it from the closest ancestor with child\r\n     * Returns null if not found.\r\n     * @param {Node} node Reference element\r\n     * @param {Node|null} ceiling Highest boundary allowed\r\n     * @returns {Node|null}\r\n     */ getNextDeepestNode: function(node, ceiling) {\n        let nextNode = node.nextSibling;\n        if (!nextNode) {\n            for(let parentNode = node.parentNode; parentNode; parentNode = parentNode.parentNode){\n                if (parentNode === ceiling) return null;\n                if (parentNode.nextSibling) {\n                    nextNode = parentNode.nextSibling;\n                    break;\n                }\n            }\n            if (!nextNode) return null;\n        }\n        while(nextNode.firstChild)nextNode = nextNode.firstChild;\n        return nextNode;\n    },\n    /**\r\n     * @description Get the child element of the argument value.\r\n     * A tag that satisfies the query condition is imported.\r\n     * Returns null if not found.\r\n     * @param {Node} element Reference element\r\n     * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n     * @param {Boolean} last If true returns the last node among the found child nodes. (default: first node)\r\n     * Not use it like jquery.\r\n     * Only one condition can be entered at a time.\r\n     * @returns {Element|null}\r\n     */ getChildElement: function(element, query, last) {\n        let check;\n        if (typeof query === \"function\") {\n            check = query;\n        } else {\n            let attr;\n            if (/^\\./.test(query)) {\n                attr = \"className\";\n                query = query.split(\".\")[1];\n            } else if (/^#/.test(query)) {\n                attr = \"id\";\n                query = \"^\" + query.split(\"#\")[1] + \"$\";\n            } else if (/^:/.test(query)) {\n                attr = \"name\";\n                query = \"^\" + query.split(\":\")[1] + \"$\";\n            } else {\n                attr = \"nodeName\";\n                query = \"^\" + (query === \"text\" ? \"#\" + query : query) + \"$\";\n            }\n            const regExp = new this._w.RegExp(query, \"i\");\n            check = function(el) {\n                return regExp.test(el[attr]);\n            };\n        }\n        const childList = this.getListChildNodes(element, function(current) {\n            return check(current);\n        });\n        return childList[last ? childList.length - 1 : 0];\n    },\n    /**\r\n     * @description 1. The first node of all the child nodes of the \"first\" element is returned.\r\n     * 2. The last node of all the child nodes of the \"last\" element is returned.\r\n     * 3. When there is no \"last\" element, the first and last nodes of all the children of the \"first\" element are returned.\r\n     * { sc: \"first\", ec: \"last\" }\r\n     * @param {Node} first First element\r\n     * @param {Node|null} last Last element\r\n     * @returns {Object}\r\n     */ getEdgeChildNodes: function(first, last) {\n        if (!first) return;\n        if (!last) last = first;\n        while(first && first.nodeType === 1 && first.childNodes.length > 0 && !this.isBreak(first))first = first.firstChild;\n        while(last && last.nodeType === 1 && last.childNodes.length > 0 && !this.isBreak(last))last = last.lastChild;\n        return {\n            sc: first,\n            ec: last || first\n        };\n    },\n    /**\r\n     * @description Returns the position of the left and top of argument. {left:0, top:0}\r\n     * @param {Node} element Target node\r\n     * @param {Element|null} wysiwygFrame When use iframe option, iframe object should be sent (context.element.wysiwygFrame)\r\n     * @returns {Object}\r\n     */ getOffset: function(element, wysiwygFrame) {\n        let offsetLeft = 0;\n        let offsetTop = 0;\n        let offsetElement = element.nodeType === 3 ? element.parentElement : element;\n        const wysiwyg = this.getParentElement(element, this.isWysiwygDiv.bind(this));\n        while(offsetElement && !this.hasClass(offsetElement, \"se-container\") && offsetElement !== wysiwyg){\n            offsetLeft += offsetElement.offsetLeft;\n            offsetTop += offsetElement.offsetTop;\n            offsetElement = offsetElement.offsetParent;\n        }\n        const iframe = wysiwygFrame && /iframe/i.test(wysiwygFrame.nodeName);\n        return {\n            left: offsetLeft + (iframe ? wysiwygFrame.parentElement.offsetLeft : 0),\n            top: offsetTop - (wysiwyg ? wysiwyg.scrollTop : 0) + (iframe ? wysiwygFrame.parentElement.offsetTop : 0)\n        };\n    },\n    /**\r\n     * @description It compares the start and end indexes of \"a\" and \"b\" and returns the number of overlapping indexes in the range.\r\n     * ex) 1, 5, 4, 6 => \"2\" (4 ~ 5)\r\n     * @param {Number} aStart Start index of \"a\"\r\n     * @param {Number} aEnd End index of \"a\"\r\n     * @param {Number} bStart Start index of \"b\"\r\n     * @param {Number} bEnd Start index of \"b\"\r\n     * @returns {Number}\r\n     */ getOverlapRangeAtIndex: function(aStart, aEnd, bStart, bEnd) {\n        if (aStart <= bEnd ? aEnd < bStart : aEnd > bStart) return 0;\n        const overlap = (aStart > bStart ? aStart : bStart) - (aEnd < bEnd ? aEnd : bEnd);\n        return (overlap < 0 ? overlap * -1 : overlap) + 1;\n    },\n    /**\r\n     * @description Set the text content value of the argument value element\r\n     * @param {Node} element Element to replace text content\r\n     * @param {String} txt Text to be applied\r\n     */ changeTxt: function(element, txt) {\n        if (!element || !txt) return;\n        element.textContent = txt;\n    },\n    /**\r\n     * @description Replace element\r\n     * @param {Element} element Target element\r\n     * @param {String|Element} newElement String or element of the new element to apply\r\n     */ changeElement: function(element, newElement) {\n        if (typeof newElement === \"string\") {\n            if (element.outerHTML) {\n                element.outerHTML = newElement;\n            } else {\n                const doc = this.createElement(\"DIV\");\n                doc.innerHTML = newElement;\n                newElement = doc.firstChild;\n                element.parentNode.replaceChild(newElement, element);\n            }\n        } else if (newElement.nodeType === 1) {\n            element.parentNode.replaceChild(newElement, element);\n        }\n    },\n    /**\r\n     * @description Set style, if all styles are deleted, the style properties are deleted.\r\n     * @param {Element} element Element to set style\r\n     * @param {String} styleName Style attribute name (marginLeft, textAlign...)\r\n     * @param {String|Number} value Style value\r\n     */ setStyle: function(element, styleName, value) {\n        element.style[styleName] = value;\n        if (!value && !element.style.cssText) {\n            element.removeAttribute(\"style\");\n        }\n    },\n    /**\r\n     * @description Determine whether any of the matched elements are assigned the given class\r\n     * @param {Element} element Elements to search class name\r\n     * @param {String} className Class name to search for\r\n     * @returns {Boolean}\r\n     */ hasClass: function(element, className) {\n        if (!element) return;\n        return new this._w.RegExp(className).test(element.className);\n    },\n    /**\r\n     * @description Append the className value of the argument value element\r\n     * @param {Element} element Elements to add class name\r\n     * @param {String} className Class name to be add\r\n     */ addClass: function(element, className) {\n        if (!element) return;\n        const check = new this._w.RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        if (check.test(element.className)) return;\n        element.className += (element.className.length > 0 ? \" \" : \"\") + className;\n    },\n    /**\r\n     * @description Delete the className value of the argument value element\r\n     * @param {Element} element Elements to remove class name\r\n     * @param {String} className Class name to be remove\r\n     */ removeClass: function(element, className) {\n        if (!element) return;\n        const check = new this._w.RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        element.className = element.className.replace(check, \" \").trim();\n        if (!element.className.trim()) element.removeAttribute(\"class\");\n    },\n    /**\r\n     * @description Argument value If there is no class name, insert it and delete the class name if it exists\r\n     * @param {Element} element Elements to replace class name\r\n     * @param {String} className Class name to be change\r\n     * @returns {Boolean|undefined}\r\n     */ toggleClass: function(element, className) {\n        if (!element) return;\n        let result = false;\n        const check = new this._w.RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        if (check.test(element.className)) {\n            element.className = element.className.replace(check, \" \").trim();\n        } else {\n            element.className += \" \" + className;\n            result = true;\n        }\n        if (!element.className.trim()) element.removeAttribute(\"class\");\n        return result;\n    },\n    /**\r\n     * @description Checks if element can't be easily enabled\r\n     * @param {Element} element Element to check for\r\n     */ isImportantDisabled: function(element) {\n        return element.hasAttribute(\"data-important-disabled\");\n    },\n    /**\r\n     * @description In the predefined code view mode, the buttons except the executable button are changed to the 'disabled' state.\r\n     * core.codeViewDisabledButtons (An array of buttons whose class name is not \"se-code-view-enabled\")\r\n     * core.resizingDisabledButtons (An array of buttons whose class name is not \"se-resizing-enabled\")\r\n     * @param {Boolean} disabled Disabled value\r\n     * @param {Array|HTMLCollection|NodeList} buttonList Button array\r\n     * @param {Boolean} important If priveleged mode should be used (Necessary to switch importantDisabled buttons)\r\n     */ setDisabledButtons: function(disabled, buttonList, important) {\n        for(let i = 0, len = buttonList.length; i < len; i++){\n            let button = buttonList[i];\n            if (important || !this.isImportantDisabled(button)) button.disabled = disabled;\n            if (important) {\n                if (disabled) {\n                    button.setAttribute(\"data-important-disabled\", \"\");\n                } else {\n                    button.removeAttribute(\"data-important-disabled\");\n                }\n            }\n        }\n    },\n    /**\r\n     * @description Delete argumenu value element\r\n     * @param {Node} item Node to be remove\r\n     */ removeItem: function(item) {\n        if (!item) return;\n        if (typeof item.remove === \"function\") item.remove();\n        else if (item.parentNode) item.parentNode.removeChild(item);\n    },\n    /**\r\n     * @description Delete all parent nodes that match the condition.\r\n     * Returns an {sc: previousSibling, ec: nextSibling}(the deleted node reference) or null.\r\n     * @param {Node} item Node to be remove\r\n     * @param {Function|null} validation Validation function. default(Deleted if it only have breakLine and blanks)\r\n     * @param {Element|null} stopParent Stop when the parent node reaches stopParent\r\n     * @returns {Object|null} {sc: previousSibling, ec: nextSibling}\r\n     */ removeItemAllParents: function(item, validation, stopParent) {\n        if (!item) return null;\n        let cc = null;\n        if (!validation) {\n            validation = (function(current) {\n                if (current === stopParent || this.isComponent(current)) return false;\n                const text = current.textContent.trim();\n                return text.length === 0 || /^(\\n|\\u200B)+$/.test(text);\n            }).bind(this);\n        }\n        (function recursionFunc(element) {\n            if (!util.isWysiwygDiv(element)) {\n                const parent = element.parentNode;\n                if (parent && validation(element)) {\n                    cc = {\n                        sc: element.previousElementSibling,\n                        ec: element.nextElementSibling\n                    };\n                    util.removeItem(element);\n                    recursionFunc(parent);\n                }\n            }\n        })(item);\n        return cc;\n    },\n    /**\r\n     * @description Detach Nested all nested lists under the \"baseNode\".\r\n     * Returns a list with nested removed.\r\n     * @param {Node} baseNode Element on which to base.\r\n     * @param {Boolean} all If true, it also detach all nested lists of a returned list.\r\n     * @returns {Element}\r\n     */ detachNestedList: function(baseNode, all) {\n        const rNode = this._deleteNestedList(baseNode);\n        let rangeElement, cNodes;\n        if (rNode) {\n            rangeElement = rNode.cloneNode(false);\n            cNodes = rNode.childNodes;\n            const index = this.getPositionIndex(baseNode);\n            while(cNodes[index]){\n                rangeElement.appendChild(cNodes[index]);\n            }\n        } else {\n            rangeElement = baseNode;\n        }\n        let rChildren;\n        if (!all) {\n            const depth = this.getElementDepth(baseNode) + 2;\n            rChildren = this.getListChildren(baseNode, (function(current) {\n                return this.isListCell(current) && !current.previousElementSibling && this.getElementDepth(current) === depth;\n            }).bind(this));\n        } else {\n            rChildren = this.getListChildren(rangeElement, (function(current) {\n                return this.isListCell(current) && !current.previousElementSibling;\n            }).bind(this));\n        }\n        for(let i = 0, len = rChildren.length; i < len; i++){\n            this._deleteNestedList(rChildren[i]);\n        }\n        if (rNode) {\n            rNode.parentNode.insertBefore(rangeElement, rNode.nextSibling);\n            if (cNodes && cNodes.length === 0) this.removeItem(rNode);\n        }\n        return rangeElement === baseNode ? rangeElement.parentNode : rangeElement;\n    },\n    /**\r\n     * @description Sub function of util.detachNestedList method.\r\n     * @private\r\n     */ _deleteNestedList: function(baseNode) {\n        const baseParent = baseNode.parentNode;\n        let sibling = baseParent;\n        let parent = sibling.parentNode;\n        let liSibling, liParent, child, index, c;\n        while(this.isListCell(parent)){\n            index = this.getPositionIndex(baseNode);\n            liSibling = parent.nextElementSibling;\n            liParent = parent.parentNode;\n            child = sibling;\n            while(child){\n                sibling = sibling.nextSibling;\n                if (this.isList(child)) {\n                    c = child.childNodes;\n                    while(c[index]){\n                        liParent.insertBefore(c[index], liSibling);\n                    }\n                    if (c.length === 0) this.removeItem(child);\n                } else {\n                    liParent.appendChild(child);\n                }\n                child = sibling;\n            }\n            sibling = liParent;\n            parent = liParent.parentNode;\n        }\n        if (baseParent.children.length === 0) this.removeItem(baseParent);\n        return liParent;\n    },\n    /**\r\n     * @description Split all tags based on \"baseNode\"\r\n     * Returns the last element of the splited tag.\r\n     * @param {Node} baseNode Element or text node on which to base\r\n     * @param {Number|Node|null} offset Text offset of \"baseNode\" (Only valid when \"baseNode\" is a text node)\r\n     * @param {Number} depth The nesting depth of the element being split. (default: 0)\r\n     * @returns {Element}\r\n     */ splitElement: function(baseNode, offset, depth) {\n        if (this.isWysiwygDiv(baseNode)) return baseNode;\n        if (offset && !this.isNumber(offset)) {\n            const children = baseNode.childNodes;\n            let index = this.getPositionIndex(offset);\n            const prev = baseNode.cloneNode(false);\n            const next = baseNode.cloneNode(false);\n            for(let i = 0, len = children.length; i < len; i++){\n                if (i < index) prev.appendChild(children[i]);\n                else if (i > index) next.appendChild(children[i]);\n                else continue;\n                i--;\n                len--;\n                index--;\n            }\n            if (prev.childNodes.length > 0) baseNode.parentNode.insertBefore(prev, baseNode);\n            if (next.childNodes.length > 0) baseNode.parentNode.insertBefore(next, baseNode.nextElementSibling);\n            return baseNode;\n        }\n        const bp = baseNode.parentNode;\n        let index = 0;\n        let suffixIndex = 1;\n        let next = true;\n        let newEl, children, temp;\n        if (!depth || depth < 0) depth = 0;\n        if (baseNode.nodeType === 3) {\n            index = this.getPositionIndex(baseNode);\n            if (offset >= 0 && baseNode.length !== offset) {\n                baseNode.splitText(offset);\n                const after = this.getNodeFromPath([\n                    index + 1\n                ], bp);\n                if (this.onlyZeroWidthSpace(after)) after.data = this.zeroWidthSpace;\n            }\n        } else if (baseNode.nodeType === 1) {\n            if (offset === 0) {\n                while(baseNode.firstChild){\n                    baseNode = baseNode.firstChild;\n                }\n                if (baseNode.nodeType === 3) {\n                    const after = this.createTextNode(this.zeroWidthSpace);\n                    baseNode.parentNode.insertBefore(after, baseNode);\n                    baseNode = after;\n                }\n            }\n            if (!baseNode.previousSibling) {\n                if (this.getElementDepth(baseNode) === depth) next = false;\n            } else {\n                baseNode = baseNode.previousSibling;\n            }\n        }\n        if (baseNode.nodeType === 1) suffixIndex = 0;\n        let depthEl = baseNode;\n        while(this.getElementDepth(depthEl) > depth){\n            index = this.getPositionIndex(depthEl) + suffixIndex;\n            depthEl = depthEl.parentNode;\n            temp = newEl;\n            newEl = depthEl.cloneNode(false);\n            children = depthEl.childNodes;\n            if (temp) {\n                if (this.isListCell(newEl) && this.isList(temp) && temp.firstElementChild) {\n                    newEl.innerHTML = temp.firstElementChild.innerHTML;\n                    util.removeItem(temp.firstElementChild);\n                    if (temp.children.length > 0) newEl.appendChild(temp);\n                } else {\n                    newEl.appendChild(temp);\n                }\n            }\n            while(children[index]){\n                newEl.appendChild(children[index]);\n            }\n        }\n        if (depthEl.childNodes.length <= 1 && (!depthEl.firstChild || depthEl.firstChild.textContent.length === 0)) depthEl.innerHTML = \"<br>\";\n        const pElement = depthEl.parentNode;\n        if (next) depthEl = depthEl.nextSibling;\n        if (!newEl) return depthEl;\n        this.mergeSameTags(newEl, null, false);\n        this.mergeNestedTags(newEl, (function(current) {\n            return this.isList(current);\n        }).bind(this));\n        if (newEl.childNodes.length > 0) pElement.insertBefore(newEl, depthEl);\n        else newEl = depthEl;\n        if (this.isListCell(newEl) && newEl.children && this.isList(newEl.children[0])) {\n            newEl.insertBefore(this.createElement(\"BR\"), newEl.children[0]);\n        }\n        if (bp.childNodes.length === 0) this.removeItem(bp);\n        return newEl;\n    },\n    /**\r\n     * @description Use with \"npdePath (util.getNodePath)\" to merge the same attributes and tags if they are present and modify the nodepath.\r\n     * If \"offset\" has been changed, it will return as much \"offset\" as it has been modified.\r\n     * An array containing change offsets is returned in the order of the \"nodePathArray\" array.\r\n     * @param {Element} element Element\r\n     * @param {Array|null} nodePathArray Array of NodePath object ([util.getNodePath(), ..])\r\n     * @param {Boolean} onlyText If true, non-text nodes(!util._isIgnoreNodeChange) like 'span', 'strong'.. are ignored.\r\n     * @returns {Array} [offset, ..]\r\n     */ mergeSameTags: function(element, nodePathArray, onlyText) {\n        const inst = this;\n        const nodePathLen = nodePathArray ? nodePathArray.length : 0;\n        let offsets = null;\n        if (nodePathLen) {\n            offsets = this._w.Array.apply(null, new this._w.Array(nodePathLen)).map(this._w.Number.prototype.valueOf, 0);\n        }\n        (function recursionFunc(current, depth, depthIndex) {\n            const children = current.childNodes;\n            for(let i = 0, len = children.length, child, next; i < len; i++){\n                child = children[i];\n                next = children[i + 1];\n                if (!child) break;\n                if (onlyText && inst._isIgnoreNodeChange(child) || !onlyText && (inst.isTable(child) || inst.isListCell(child) || inst.isFormatElement(child) && !inst.isFreeFormatElement(child))) {\n                    if (inst.isTable(child) || inst.isListCell(child)) {\n                        recursionFunc(child, depth + 1, i);\n                    }\n                    continue;\n                }\n                if (len === 1 && current.nodeName === child.nodeName && current.parentNode) {\n                    // update nodePath\n                    if (nodePathLen) {\n                        let path, c, p, cDepth, spliceDepth;\n                        for(let n = 0; n < nodePathLen; n++){\n                            path = nodePathArray[n];\n                            if (path && path[depth] === i) {\n                                c = child, p = current, cDepth = depth, spliceDepth = true;\n                                while(cDepth >= 0){\n                                    if (inst.getArrayIndex(p.childNodes, c) !== path[cDepth]) {\n                                        spliceDepth = false;\n                                        break;\n                                    }\n                                    c = child.parentNode;\n                                    p = c.parentNode;\n                                    cDepth--;\n                                }\n                                if (spliceDepth) {\n                                    path.splice(depth, 1);\n                                    path[depth] = i;\n                                }\n                            }\n                        }\n                    }\n                    // merge tag\n                    inst.copyTagAttributes(child, current);\n                    current.parentNode.insertBefore(child, current);\n                    inst.removeItem(current);\n                }\n                if (!next) {\n                    if (child.nodeType === 1) recursionFunc(child, depth + 1, i);\n                    break;\n                }\n                if (child.nodeName === next.nodeName && inst.isSameAttributes(child, next) && child.href === next.href) {\n                    const childs = child.childNodes;\n                    let childLength = 0;\n                    for(let n = 0, nLen = childs.length; n < nLen; n++){\n                        if (childs[n].textContent.length > 0) childLength++;\n                    }\n                    const l = child.lastChild;\n                    const r = next.firstChild;\n                    let addOffset = 0;\n                    if (l && r) {\n                        const textOffset = l.nodeType === 3 && r.nodeType === 3;\n                        addOffset = l.textContent.length;\n                        let tempL = l.previousSibling;\n                        while(tempL && tempL.nodeType === 3){\n                            addOffset += tempL.textContent.length;\n                            tempL = tempL.previousSibling;\n                        }\n                        if (childLength > 0 && l.nodeType === 3 && r.nodeType === 3 && (l.textContent.length > 0 || r.textContent.length > 0)) childLength--;\n                        if (nodePathLen) {\n                            let path = null;\n                            for(let n = 0; n < nodePathLen; n++){\n                                path = nodePathArray[n];\n                                if (path && path[depth] > i) {\n                                    if (depth > 0 && path[depth - 1] !== depthIndex) continue;\n                                    path[depth] -= 1;\n                                    if (path[depth + 1] >= 0 && path[depth] === i) {\n                                        path[depth + 1] += childLength;\n                                        if (textOffset) {\n                                            if (l && l.nodeType === 3 && r && r.nodeType === 3) {\n                                                offsets[n] += addOffset;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (child.nodeType === 3) {\n                        addOffset = child.textContent.length;\n                        child.textContent += next.textContent;\n                        if (nodePathLen) {\n                            let path = null;\n                            for(let n = 0; n < nodePathLen; n++){\n                                path = nodePathArray[n];\n                                if (path && path[depth] > i) {\n                                    if (depth > 0 && path[depth - 1] !== depthIndex) continue;\n                                    path[depth] -= 1;\n                                    if (path[depth + 1] >= 0 && path[depth] === i) {\n                                        path[depth + 1] += childLength;\n                                        offsets[n] += addOffset;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        child.innerHTML += next.innerHTML;\n                    }\n                    inst.removeItem(next);\n                    i--;\n                } else if (child.nodeType === 1) {\n                    recursionFunc(child, depth + 1, i);\n                }\n            }\n        })(element, 0, 0);\n        return offsets;\n    },\n    /**\r\n     * @description Remove nested tags without other child nodes.\r\n     * @param {Element} element Element object\r\n     * @param {Function|String|null} validation Validation function / String(\"tag1|tag2..\") / If null, all tags are applicable.\r\n     */ mergeNestedTags: function(element, validation) {\n        if (typeof validation === \"string\") {\n            validation = (function(current) {\n                return this.test(current.tagName);\n            }).bind(new this._w.RegExp(\"^(\" + (validation ? validation : \".+\") + \")$\", \"i\"));\n        } else if (typeof validation !== \"function\") {\n            validation = function() {\n                return true;\n            };\n        }\n        (function recursionFunc(current) {\n            let children = current.children;\n            if (children.length === 1 && children[0].nodeName === current.nodeName && validation(current)) {\n                const temp = children[0];\n                children = temp.children;\n                while(children[0]){\n                    current.appendChild(children[0]);\n                }\n                current.removeChild(temp);\n            }\n            for(let i = 0, len = current.children.length; i < len; i++){\n                recursionFunc(current.children[i]);\n            }\n        })(element);\n    },\n    /**\r\n     * @description Delete a empty child node of argument element.\r\n     * @param {Element} element Element node\r\n     * @param {Node|null} notRemoveNode Do not remove node\r\n     * @param {boolean} forceDelete When all child nodes are deleted, the parent node is also deleted.\r\n     */ removeEmptyNode: function(element, notRemoveNode, forceDelete) {\n        const inst = this;\n        if (notRemoveNode) {\n            notRemoveNode = inst.getParentElement(notRemoveNode, function(current) {\n                return element === current.parentElement;\n            });\n        }\n        (function recursionFunc(current) {\n            if (inst._notTextNode(current) || current === notRemoveNode || inst.isNonEditable(current)) return 0;\n            if (current !== element && inst.onlyZeroWidthSpace(current.textContent) && (!current.firstChild || !inst.isBreak(current.firstChild)) && !current.querySelector(inst._allowedEmptyNodeList)) {\n                if (current.parentNode) {\n                    current.parentNode.removeChild(current);\n                    return -1;\n                }\n            } else {\n                const children = current.children;\n                for(let i = 0, len = children.length, r = 0; i < len; i++){\n                    if (!children[i + r] || inst.isComponent(children[i + r])) continue;\n                    r += recursionFunc(children[i + r]);\n                }\n            }\n            return 0;\n        })(element);\n        if (element.childNodes.length === 0) {\n            if (forceDelete) {\n                this.removeItem(element);\n            } else {\n                element.innerHTML = \"<br>\";\n            }\n        }\n    },\n    /**\r\n     * @description Remove whitespace between tags in HTML string.\r\n     * @param {String} html HTML string\r\n     * @returns {String}\r\n     */ htmlRemoveWhiteSpace: function(html) {\n        if (!html) return \"\";\n        return html.trim().replace(/<\\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\\s+(?=<)/ig, function(m) {\n            return m.replace(/\\n/g, \"\").replace(/\\s+/, \" \");\n        });\n    },\n    /**\r\n     * @description HTML code compression\r\n     * @param {string} html HTML string\r\n     * @returns {string} HTML string\r\n     */ htmlCompress: function(html) {\n        return html.replace(/\\n/g, \"\").replace(/(>)(?:\\s+)(<)/g, \"$1$2\");\n    },\n    /**\r\n     * @description Sort a element array by depth of element.\r\n     * @param {Array} array Array object\r\n     * @param {Boolean} des true: descending order / false: ascending order\r\n     */ sortByDepth: function(array, des) {\n        const t = !des ? -1 : 1;\n        const f = t * -1;\n        array.sort((function(a, b) {\n            if (!this.isListCell(a) || !this.isListCell(b)) return 0;\n            a = this.getElementDepth(a);\n            b = this.getElementDepth(b);\n            return a > b ? t : a < b ? f : 0;\n        }).bind(this));\n    },\n    /**\r\n     * @description Escape a string for safe use in regular expressions.\r\n     * @param {String} string String to escape\r\n     * @returns {String}\r\n     */ escapeStringRegexp: function(string) {\n        if (typeof string !== \"string\") {\n            throw new TypeError(\"Expected a string\");\n        }\n        // Escape characters with special meaning either inside or outside character sets.\n        // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n        return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n    },\n    _isExcludeSelectionElement: function(element) {\n        return !/FIGCAPTION/i.test(element.nodeName) && (this.isComponent(element) || /FIGURE/i.test(element.nodeName));\n    },\n    /**\r\n     * @description Nodes that need to be added without modification when changing text nodes\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _isIgnoreNodeChange: function(element) {\n        return element && element.nodeType !== 3 && (this.isNonEditable(element) || !this.isTextStyleElement(element));\n    },\n    /**\r\n     * @description Nodes that must remain undetached when changing text nodes (A, Label, Code, Span:font-size)\r\n     * @param {Node|String} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _isMaintainedNode: function(element) {\n        return element && element.nodeType !== 3 && /^(a|label|code|summary)$/i.test(typeof element === \"string\" ? element : element.nodeName);\n    },\n    /**\r\n     * @description Node with font-size style\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _isSizeNode: function(element) {\n        return element && element.nodeType !== 3 && this.isTextStyleElement(element) && !!element.style.fontSize;\n    },\n    /**\r\n     * @description Nodes without text\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _notTextNode: function(element) {\n        return element && element.nodeType !== 3 && (this.isComponent(element) || /^(br|input|select|canvas|img|iframe|audio|video)$/i.test(typeof element === \"string\" ? element : element.nodeName));\n    },\n    /**\r\n     * @deprecated\r\n     * @description Check disallowed tags\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */ _disallowedTags: function(element) {\n        return /^(meta|script|link|style|[a-z]+\\:[a-z]+)$/i.test(element.nodeName);\n    },\n    /**\r\n     * @description Create whitelist RegExp object.\r\n     * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?!\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n     * @param {String} list Tags list (\"br|p|div|pre...\")\r\n     * @returns {RegExp}\r\n     */ createTagsWhitelist: function(list) {\n        return new RegExp(\"<\\\\/?\\\\b(?!\\\\b\" + (list || \"\").replace(/\\|/g, \"\\\\b|\\\\b\") + \"\\\\b)[^>]*>\", \"gi\");\n    },\n    /**\r\n     * @description Create blacklist RegExp object.\r\n     * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?:\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n     * @param {String} list Tags list (\"br|p|div|pre...\")\r\n     * @returns {RegExp}\r\n     */ createTagsBlacklist: function(list) {\n        return new RegExp(\"<\\\\/?\\\\b(?:\\\\b\" + (list || \"^\").replace(/\\|/g, \"\\\\b|\\\\b\") + \"\\\\b)[^>]*>\", \"gi\");\n    },\n    /**\r\n     * @description Fix tags that do not fit the editor format.\r\n     * @param {Element} documentFragment Document fragment \"DOCUMENT_FRAGMENT_NODE\" (nodeType === 11)\r\n     * @param {RegExp} htmlCheckWhitelistRegExp Editor tags whitelist (core._htmlCheckWhitelistRegExp)\r\n     * @param {RegExp} htmlCheckBlacklistRegExp Editor tags blacklist (core._htmlCheckBlacklistRegExp)\r\n     * @param {Function} classNameFilter Class name filter function\r\n     * @private\r\n     */ _consistencyCheckOfHTML: function(documentFragment, htmlCheckWhitelistRegExp, htmlCheckBlacklistRegExp, classNameFilter) {\n        /**\r\n         * It is can use \".children(util.getListChildren)\" to exclude text nodes, but \"documentFragment.children\" is not supported in IE.\r\n         * So check the node type and exclude the text no (current.nodeType !== 1)\r\n         */ const removeTags = [], emptyTags = [], wrongList = [], withoutFormatCells = [];\n        // wrong position\n        const wrongTags = this.getListChildNodes(documentFragment, (function(current) {\n            if (current.nodeType !== 1) {\n                if (this.isList(current.parentElement)) removeTags.push(current);\n                return false;\n            }\n            // white list\n            if (htmlCheckBlacklistRegExp.test(current.nodeName) || !htmlCheckWhitelistRegExp.test(current.nodeName) && current.childNodes.length === 0 && this.isNotCheckingNode(current)) {\n                removeTags.push(current);\n                return false;\n            }\n            // empty tags\n            const nrtag = !this.getParentElement(current, this.isNotCheckingNode);\n            if (!this.isTable(current) && !this.isListCell(current) && !this.isAnchor(current) && (this.isFormatElement(current) || this.isRangeFormatElement(current) || this.isTextStyleElement(current)) && current.childNodes.length === 0 && nrtag) {\n                emptyTags.push(current);\n                return false;\n            }\n            // wrong list\n            if (this.isList(current.parentNode) && !this.isList(current) && !this.isListCell(current)) {\n                wrongList.push(current);\n                return false;\n            }\n            // table cells\n            if (this.isCell(current)) {\n                const fel = current.firstElementChild;\n                if (!this.isFormatElement(fel) && !this.isRangeFormatElement(fel) && !this.isComponent(fel)) {\n                    withoutFormatCells.push(current);\n                    return false;\n                }\n            }\n            // class filter\n            if (nrtag && current.className) {\n                const className = new this._w.Array(current.classList).map(classNameFilter).join(\" \").trim();\n                if (className) current.className = className;\n                else current.removeAttribute(\"class\");\n            }\n            const result = current.parentNode !== documentFragment && nrtag && (this.isListCell(current) && !this.isList(current.parentNode) || (this.isFormatElement(current) || this.isComponent(current)) && !this.isRangeFormatElement(current.parentNode) && !this.getParentElement(current, this.isComponent));\n            return result;\n        }).bind(this));\n        for(let i = 0, len = removeTags.length; i < len; i++){\n            this.removeItem(removeTags[i]);\n        }\n        const checkTags = [];\n        for(let i = 0, len = wrongTags.length, t, p; i < len; i++){\n            t = wrongTags[i];\n            p = t.parentNode;\n            if (!p || !p.parentNode) continue;\n            if (this.getParentElement(t, this.isListCell)) {\n                const cellChildren = t.childNodes;\n                for(let j = cellChildren.length - 1; len >= 0; j--){\n                    p.insertBefore(t, cellChildren[j]);\n                }\n                checkTags.push(t);\n            } else {\n                p.parentNode.insertBefore(t, p);\n                checkTags.push(p);\n            }\n        }\n        for(let i = 0, len = checkTags.length, t; i < len; i++){\n            t = checkTags[i];\n            if (this.onlyZeroWidthSpace(t.textContent.trim())) {\n                this.removeItem(t);\n            }\n        }\n        for(let i = 0, len = emptyTags.length; i < len; i++){\n            this.removeItem(emptyTags[i]);\n        }\n        for(let i = 0, len = wrongList.length, t, tp, children, p; i < len; i++){\n            t = wrongList[i];\n            p = t.parentNode;\n            if (!p) continue;\n            tp = this.createElement(\"LI\");\n            if (this.isFormatElement(t)) {\n                children = t.childNodes;\n                while(children[0]){\n                    tp.appendChild(children[0]);\n                }\n                p.insertBefore(tp, t);\n                this.removeItem(t);\n            } else {\n                t = t.nextSibling;\n                tp.appendChild(wrongList[i]);\n                p.insertBefore(tp, t);\n            }\n        }\n        for(let i = 0, len = withoutFormatCells.length, t, f; i < len; i++){\n            t = withoutFormatCells[i];\n            f = this.createElement(\"DIV\");\n            f.innerHTML = t.textContent.trim().length === 0 && t.children.length === 0 ? \"<br>\" : t.innerHTML;\n            t.innerHTML = f.outerHTML;\n        }\n    },\n    _setDefaultOptionStyle: function(options, defaultStyle) {\n        let optionStyle = \"\";\n        if (options.height) optionStyle += \"height:\" + options.height + \";\";\n        if (options.minHeight) optionStyle += \"min-height:\" + options.minHeight + \";\";\n        if (options.maxHeight) optionStyle += \"max-height:\" + options.maxHeight + \";\";\n        if (options.position) optionStyle += \"position:\" + options.position + \";\";\n        if (options.width) optionStyle += \"width:\" + options.width + \";\";\n        if (options.minWidth) optionStyle += \"min-width:\" + options.minWidth + \";\";\n        if (options.maxWidth) optionStyle += \"max-width:\" + options.maxWidth + \";\";\n        let top = \"\", frame = \"\", editor = \"\";\n        defaultStyle = optionStyle + defaultStyle;\n        const styleArr = defaultStyle.split(\";\");\n        for(let i = 0, len = styleArr.length, s; i < len; i++){\n            s = styleArr[i].trim();\n            if (!s) continue;\n            if (/^(min-|max-)?width\\s*:/.test(s) || /^(z-index|position)\\s*:/.test(s)) {\n                top += s + \";\";\n                continue;\n            }\n            if (/^(min-|max-)?height\\s*:/.test(s)) {\n                if (/^height/.test(s) && s.split(\":\")[1].trim() === \"auto\") {\n                    options.height = \"auto\";\n                }\n                frame += s + \";\";\n                continue;\n            }\n            editor += s + \";\";\n        }\n        return {\n            top: top,\n            frame: frame,\n            editor: editor\n        };\n    },\n    _setIframeDocument: function(frame, options) {\n        frame.setAttribute(\"scrolling\", \"auto\");\n        frame.contentDocument.head.innerHTML = \"\" + '<meta charset=\"utf-8\" />' + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">' + this._setIframeCssTags(options);\n        frame.contentDocument.body.className = options._editableClass;\n        frame.contentDocument.body.setAttribute(\"contenteditable\", true);\n        frame.contentDocument.body.setAttribute(\"autocorrect\", \"off\");\n    },\n    _setIframeCssTags: function(options) {\n        const linkNames = options.iframeCSSFileName;\n        const wRegExp = this._w.RegExp;\n        let tagString = \"\";\n        for(let f = 0, len = linkNames.length, path; f < len; f++){\n            path = [];\n            if (/(^https?:\\/\\/)|(^data:text\\/css,)/.test(linkNames[f])) {\n                path.push(linkNames[f]);\n            } else {\n                const CSSFileName = new wRegExp(\"(^|.*[\\\\/])\" + linkNames[f] + \"(\\\\..+)?\\\\.css(?:\\\\?.*|;.*)?$\", \"i\");\n                for(let c = document.getElementsByTagName(\"link\"), i = 0, len = c.length, styleTag; i < len; i++){\n                    styleTag = c[i].href.match(CSSFileName);\n                    if (styleTag) path.push(styleTag[0]);\n                }\n            }\n            if (!path || path.length === 0) throw '[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property \"iframeCSSFileName\" before creating editor instances.';\n            for(let i = 0, len = path.length; i < len; i++){\n                tagString += '<link href=\"' + path[i] + '\" rel=\"stylesheet\">';\n            }\n        }\n        return tagString + (options.height === \"auto\" ? \"<style>\\n/** Iframe height auto */\\nbody{height: min-content; overflow: hidden;}\\n</style>\" : \"\");\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (util);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/lib/util.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/command/blockquote.js":
/*!******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/command/blockquote.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"blockquote\",\n    display: \"command\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.blockquote = {\n            targetButton: targetElement,\n            tag: core.util.createElement(\"BLOCKQUOTE\")\n        };\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        if (!element) {\n            this.util.removeClass(this.context.blockquote.targetButton, \"active\");\n        } else if (/blockquote/i.test(element.nodeName)) {\n            this.util.addClass(this.context.blockquote.targetButton, \"active\");\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override core\n     */ action: function() {\n        const currentBlockquote = this.util.getParentElement(this.getSelectionNode(), \"blockquote\");\n        if (currentBlockquote) {\n            this.detachRangeFormatElement(currentBlockquote, null, null, false, false);\n        } else {\n            this.applyRangeFormatElement(this.context.blockquote.tag.cloneNode(false));\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvY29tbWFuZC9ibG9ja3F1b3RlLmpzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0NBTUMsR0FDRDtBQUVBLCtEQUFlO0lBQ1hBLE1BQU07SUFDTkMsU0FBUztJQUNUQyxLQUFLLFNBQVVDLElBQUksRUFBRUMsYUFBYTtRQUM5QixNQUFNQyxVQUFVRixLQUFLRSxPQUFPO1FBQzVCQSxRQUFRQyxVQUFVLEdBQUc7WUFDakJDLGNBQWNIO1lBQ2RJLEtBQUtMLEtBQUtNLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1FBQ2pDO0lBQ0o7SUFFQTs7S0FFQyxHQUNEQyxRQUFRLFNBQVVDLE9BQU87UUFDckIsSUFBSSxDQUFDQSxTQUFTO1lBQ1YsSUFBSSxDQUFDSCxJQUFJLENBQUNJLFdBQVcsQ0FBQyxJQUFJLENBQUNSLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDQyxZQUFZLEVBQUU7UUFDaEUsT0FBTyxJQUFJLGNBQWNPLElBQUksQ0FBQ0YsUUFBUUcsUUFBUSxHQUFHO1lBQzdDLElBQUksQ0FBQ04sSUFBSSxDQUFDTyxRQUFRLENBQUMsSUFBSSxDQUFDWCxPQUFPLENBQUNDLFVBQVUsQ0FBQ0MsWUFBWSxFQUFFO1lBQ3pELE9BQU87UUFDWDtRQUVBLE9BQU87SUFDWDtJQUVBOztLQUVDLEdBQ0RVLFFBQVE7UUFDSixNQUFNQyxvQkFBb0IsSUFBSSxDQUFDVCxJQUFJLENBQUNVLGdCQUFnQixDQUFDLElBQUksQ0FBQ0MsZ0JBQWdCLElBQUk7UUFFOUUsSUFBSUYsbUJBQW1CO1lBQ25CLElBQUksQ0FBQ0csd0JBQXdCLENBQUNILG1CQUFtQixNQUFNLE1BQU0sT0FBTztRQUN4RSxPQUFPO1lBQ0gsSUFBSSxDQUFDSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUNqQixPQUFPLENBQUNDLFVBQVUsQ0FBQ0UsR0FBRyxDQUFDZSxTQUFTLENBQUM7UUFDdkU7SUFDSjtBQUNKLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9wbHVnaW5zL2NvbW1hbmQvYmxvY2txdW90ZS5qcz9hOTljIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ2Jsb2NrcXVvdGUnLFxuICAgIGRpc3BsYXk6ICdjb21tYW5kJyxcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XG4gICAgICAgIGNvbnRleHQuYmxvY2txdW90ZSA9IHtcbiAgICAgICAgICAgIHRhcmdldEJ1dHRvbjogdGFyZ2V0RWxlbWVudCxcbiAgICAgICAgICAgIHRhZzogY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ0JMT0NLUVVPVEUnKVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxuICAgICAqL1xuICAgIGFjdGl2ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3ModGhpcy5jb250ZXh0LmJsb2NrcXVvdGUudGFyZ2V0QnV0dG9uLCAnYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoL2Jsb2NrcXVvdGUvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3ModGhpcy5jb250ZXh0LmJsb2NrcXVvdGUudGFyZ2V0QnV0dG9uLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAT3ZlcnJpZGUgY29yZVxuICAgICAqL1xuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjdXJyZW50QmxvY2txdW90ZSA9IHRoaXMudXRpbC5nZXRQYXJlbnRFbGVtZW50KHRoaXMuZ2V0U2VsZWN0aW9uTm9kZSgpLCAnYmxvY2txdW90ZScpO1xuXG4gICAgICAgIGlmIChjdXJyZW50QmxvY2txdW90ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXRhY2hSYW5nZUZvcm1hdEVsZW1lbnQoY3VycmVudEJsb2NrcXVvdGUsIG51bGwsIG51bGwsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UmFuZ2VGb3JtYXRFbGVtZW50KHRoaXMuY29udGV4dC5ibG9ja3F1b3RlLnRhZy5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgICAgfVxuICAgIH1cbn07Il0sIm5hbWVzIjpbIm5hbWUiLCJkaXNwbGF5IiwiYWRkIiwiY29yZSIsInRhcmdldEVsZW1lbnQiLCJjb250ZXh0IiwiYmxvY2txdW90ZSIsInRhcmdldEJ1dHRvbiIsInRhZyIsInV0aWwiLCJjcmVhdGVFbGVtZW50IiwiYWN0aXZlIiwiZWxlbWVudCIsInJlbW92ZUNsYXNzIiwidGVzdCIsIm5vZGVOYW1lIiwiYWRkQ2xhc3MiLCJhY3Rpb24iLCJjdXJyZW50QmxvY2txdW90ZSIsImdldFBhcmVudEVsZW1lbnQiLCJnZXRTZWxlY3Rpb25Ob2RlIiwiZGV0YWNoUmFuZ2VGb3JtYXRFbGVtZW50IiwiYXBwbHlSYW5nZUZvcm1hdEVsZW1lbnQiLCJjbG9uZU5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/command/blockquote.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/image.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/dialog/image.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/dialog */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/dialog.js\");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/_anchor */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_anchor.js\");\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/component */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/component.js\");\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_modules_component__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/resizing */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/resizing.js\");\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_modules_resizing__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/fileManager */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/fileManager.js\");\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_modules_fileManager__WEBPACK_IMPORTED_MODULE_4__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"image\",\n    display: \"dialog\",\n    add: function(core) {\n        core.addModule([\n            (_modules_dialog__WEBPACK_IMPORTED_MODULE_0___default()),\n            _modules_anchor__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n            (_modules_component__WEBPACK_IMPORTED_MODULE_2___default()),\n            (_modules_resizing__WEBPACK_IMPORTED_MODULE_3___default()),\n            (_modules_fileManager__WEBPACK_IMPORTED_MODULE_4___default())\n        ]);\n        const options = core.options;\n        const context = core.context;\n        const contextImage = context.image = {\n            _infoList: [],\n            _infoIndex: 0,\n            _uploadFileLength: 0,\n            focusElement: null,\n            sizeUnit: options._imageSizeUnit,\n            _linkElement: \"\",\n            _altText: \"\",\n            _align: \"none\",\n            _floatClassRegExp: \"__se__float\\\\-[a-z]+\",\n            _v_src: {\n                _linkValue: \"\"\n            },\n            svgDefaultSize: \"30%\",\n            base64RenderIndex: 0,\n            // @require @Override component\n            _element: null,\n            _cover: null,\n            _container: null,\n            // @Override resizing properties\n            inputX: null,\n            inputY: null,\n            _element_w: 1,\n            _element_h: 1,\n            _element_l: 0,\n            _element_t: 0,\n            _defaultSizeX: \"auto\",\n            _defaultSizeY: \"auto\",\n            _origin_w: options.imageWidth === \"auto\" ? \"\" : options.imageWidth,\n            _origin_h: options.imageHeight === \"auto\" ? \"\" : options.imageHeight,\n            _proportionChecked: true,\n            _resizing: options.imageResizing,\n            _resizeDotHide: !options.imageHeightShow,\n            _rotation: options.imageRotation,\n            _alignHide: !options.imageAlignShow,\n            _onlyPercentage: options.imageSizeOnlyPercentage,\n            _ratio: false,\n            _ratioX: 1,\n            _ratioY: 1,\n            _captionShow: true,\n            _captionChecked: false,\n            _caption: null,\n            captionCheckEl: null\n        };\n        /** image dialog */ let image_dialog = this.setDialog(core);\n        contextImage.modal = image_dialog;\n        contextImage.imgInputFile = image_dialog.querySelector(\"._se_image_file\");\n        contextImage.imgUrlFile = image_dialog.querySelector(\"._se_image_url\");\n        contextImage.focusElement = contextImage.imgInputFile || contextImage.imgUrlFile;\n        contextImage.altText = image_dialog.querySelector(\"._se_image_alt\");\n        contextImage.captionCheckEl = image_dialog.querySelector(\"._se_image_check_caption\");\n        contextImage.previewSrc = image_dialog.querySelector(\"._se_tab_content_image .se-link-preview\");\n        /** add event listeners */ image_dialog.querySelector(\".se-dialog-tabs\").addEventListener(\"click\", this.openTab.bind(core));\n        image_dialog.querySelector(\"form\").addEventListener(\"submit\", this.submit.bind(core));\n        if (contextImage.imgInputFile) image_dialog.querySelector(\".se-file-remove\").addEventListener(\"click\", this._removeSelectedFiles.bind(contextImage.imgInputFile, contextImage.imgUrlFile, contextImage.previewSrc));\n        if (contextImage.imgUrlFile) contextImage.imgUrlFile.addEventListener(\"input\", this._onLinkPreview.bind(contextImage.previewSrc, contextImage._v_src, options.linkProtocol));\n        if (contextImage.imgInputFile && contextImage.imgUrlFile) contextImage.imgInputFile.addEventListener(\"change\", this._fileInputChange.bind(contextImage));\n        const imageGalleryButton = image_dialog.querySelector(\".__se__gallery\");\n        if (imageGalleryButton) imageGalleryButton.addEventListener(\"click\", this._openGallery.bind(core));\n        contextImage.proportion = {};\n        contextImage.inputX = {};\n        contextImage.inputY = {};\n        if (options.imageResizing) {\n            contextImage.proportion = image_dialog.querySelector(\"._se_image_check_proportion\");\n            contextImage.inputX = image_dialog.querySelector(\"._se_image_size_x\");\n            contextImage.inputY = image_dialog.querySelector(\"._se_image_size_y\");\n            contextImage.inputX.value = options.imageWidth;\n            contextImage.inputY.value = options.imageHeight;\n            contextImage.inputX.addEventListener(\"keyup\", this.setInputSize.bind(core, \"x\"));\n            contextImage.inputY.addEventListener(\"keyup\", this.setInputSize.bind(core, \"y\"));\n            contextImage.inputX.addEventListener(\"change\", this.setRatio.bind(core));\n            contextImage.inputY.addEventListener(\"change\", this.setRatio.bind(core));\n            contextImage.proportion.addEventListener(\"change\", this.setRatio.bind(core));\n            image_dialog.querySelector(\".se-dialog-btn-revert\").addEventListener(\"click\", this.sizeRevert.bind(core));\n        }\n        /** append html */ context.dialog.modal.appendChild(image_dialog);\n        /** link event */ core.plugins.anchor.initEvent.call(core, \"image\", image_dialog.querySelector(\"._se_tab_content_url\"));\n        contextImage.anchorCtx = core.context.anchor.caller.image;\n        /** empty memory */ image_dialog = null;\n    },\n    /** dialog */ setDialog: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const dialog = core.util.createElement(\"DIV\");\n        dialog.className = \"se-dialog-content se-dialog-image\";\n        dialog.style.display = \"none\";\n        let html = \"\" + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" class=\"close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + \"</button>\" + '<span class=\"se-modal-title\">' + lang.dialogBox.imageBox.title + \"</span>\" + \"</div>\" + '<div class=\"se-dialog-tabs\">' + '<button type=\"button\" class=\"_se_tab_link active\" data-tab-link=\"image\">' + lang.toolbar.image + \"</button>\" + '<button type=\"button\" class=\"_se_tab_link\" data-tab-link=\"url\">' + lang.toolbar.link + \"</button>\" + \"</div>\" + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"_se_tab_content _se_tab_content_image\">' + '<div class=\"se-dialog-body\"><div style=\"border-bottom: 1px dashed #ccc;\">';\n        if (option.imageFileInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.imageBox.file + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_image_file\" type=\"file\" accept=\"' + option.imageAccept + '\"' + (option.imageMultipleFile ? ' multiple=\"multiple\"' : \"\") + \"/>\" + '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + \"</button>\" + \"</div>\" + \"</div>\";\n        }\n        if (option.imageUrlInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.imageBox.url + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form se-input-url _se_image_url\" type=\"text\" />' + (option.imageGalleryUrl && core.plugins.imageGallery ? '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button __se__gallery\" title=\"' + lang.toolbar.imageGallery + '\" aria-label=\"' + lang.toolbar.imageGallery + '\">' + core.icons.image_gallery + \"</button>\" : \"\") + \"</div>\" + '<pre class=\"se-link-preview\"></pre>' + \"</div>\";\n        }\n        html += \"</div>\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.imageBox.altText + '</label><input class=\"se-input-form _se_image_alt\" type=\"text\" />' + \"</div>\";\n        if (option.imageResizing) {\n            const onlyPercentage = option.imageSizeOnlyPercentage;\n            const onlyPercentDisplay = onlyPercentage ? ' style=\"display: none !important;\"' : \"\";\n            const heightDisplay = !option.imageHeightShow ? ' style=\"display: none !important;\"' : \"\";\n            html += '<div class=\"se-dialog-form\">';\n            if (onlyPercentage || !option.imageHeightShow) {\n                html += \"\" + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.size + \"</label>\" + \"</div>\";\n            } else {\n                html += \"\" + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.width + \"</label>\" + '<label class=\"se-dialog-size-x\">&nbsp;</label>' + '<label class=\"size-h\">' + lang.dialogBox.height + \"</label>\" + \"</div>\";\n            }\n            html += \"\" + '<input class=\"se-input-control _se_image_size_x\" placeholder=\"auto\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : \"\") + \" />\" + '<label class=\"se-dialog-size-x\"' + heightDisplay + \">\" + (onlyPercentage ? \"%\" : \"x\") + \"</label>\" + '<input type=\"text\" class=\"se-input-control _se_image_size_y\" placeholder=\"auto\"' + onlyPercentDisplay + (onlyPercentage ? ' max=\"100\"' : \"\") + heightDisplay + \"/>\" + \"<label\" + onlyPercentDisplay + heightDisplay + '><input type=\"checkbox\" class=\"se-dialog-btn-check _se_image_check_proportion\" checked/>&nbsp;' + lang.dialogBox.proportion + \"</label>\" + '<button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" aria-label=\"' + lang.dialogBox.revertButton + '\" class=\"se-btn se-dialog-btn-revert\" style=\"float: right;\">' + core.icons.revert + \"</button>\" + \"</div>\";\n        }\n        html += \"\" + '<div class=\"se-dialog-form se-dialog-form-footer\">' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_image_check_caption\" />&nbsp;' + lang.dialogBox.caption + \"</label>\" + \"</div>\" + \"</div>\" + \"</div>\" + '<div class=\"_se_tab_content _se_tab_content_url\" style=\"display: none\">' + core.context.anchor.forms.innerHTML + \"</div>\" + '<div class=\"se-dialog-footer\">' + \"<div\" + (option.imageAlignShow ? \"\" : ' style=\"display: none\"') + \">\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"none\" checked>' + lang.dialogBox.basic + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"left\">' + lang.dialogBox.left + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"center\">' + lang.dialogBox.center + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_image_radio\" class=\"se-dialog-btn-radio\" value=\"right\">' + lang.dialogBox.right + \"</label>\" + \"</div>\" + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + \"</span></button>\" + \"</div>\" + \"</form>\";\n        dialog.innerHTML = html;\n        return dialog;\n    },\n    _fileInputChange: function() {\n        if (!this.imgInputFile.value) {\n            this.imgUrlFile.removeAttribute(\"disabled\");\n            this.previewSrc.style.textDecoration = \"\";\n        } else {\n            this.imgUrlFile.setAttribute(\"disabled\", true);\n            this.previewSrc.style.textDecoration = \"line-through\";\n        }\n    },\n    _removeSelectedFiles: function(urlInput, previewSrc) {\n        this.value = \"\";\n        if (urlInput) {\n            urlInput.removeAttribute(\"disabled\");\n            previewSrc.style.textDecoration = \"\";\n        }\n    },\n    _openGallery: function() {\n        this.callPlugin(\"imageGallery\", this.plugins.imageGallery.open.bind(this, this.plugins.image._setUrlInput.bind(this.context.image)), null);\n    },\n    _setUrlInput: function(target) {\n        this.altText.value = target.alt;\n        this._v_src._linkValue = this.previewSrc.textContent = this.imgUrlFile.value = target.getAttribute(\"data-value\") || target.src;\n        this.imgUrlFile.focus();\n    },\n    _onLinkPreview: function(context, protocol, e) {\n        const value = e.target.value.trim();\n        context._linkValue = this.textContent = !value ? \"\" : protocol && value.indexOf(\"://\") === -1 && value.indexOf(\"#\") !== 0 ? protocol + value : value.indexOf(\"://\") === -1 ? \"/\" + value : value;\n    },\n    /**\n     * @Override @Required fileManager\n     */ fileTags: [\n        \"img\"\n    ],\n    /**\n     * @Override core, fileManager, resizing\n     * @description It is called from core.selectComponent.\n     * @param {Element} element Target element\n     */ select: function(element) {\n        this.plugins.image.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, \"image\"));\n    },\n    /**\n     * @Override fileManager, resizing\n     */ destroy: function(element) {\n        const imageEl = element || this.context.image._element;\n        const imageContainer = this.util.getParentElement(imageEl, this.util.isMediaComponent) || imageEl;\n        const dataIndex = imageEl.getAttribute(\"data-index\") * 1;\n        // event\n        if (typeof this.functions.onImageDeleteBefore === \"function\" && this.functions.onImageDeleteBefore(imageEl, imageContainer, dataIndex, this) === false) return;\n        let focusEl = imageContainer.previousElementSibling || imageContainer.nextElementSibling;\n        const emptyDiv = imageContainer.parentNode;\n        this.util.removeItem(imageContainer);\n        this.plugins.image.init.call(this);\n        this.controllersOff();\n        if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function(current) {\n            return current.childNodes.length === 0;\n        }, null);\n        // focus\n        this.focusEdge(focusEl);\n        // event\n        this.plugins.fileManager.deleteInfo.call(this, \"image\", dataIndex, this.functions.onImageUpload);\n        // history stack\n        this.history.push(false);\n    },\n    /**\n     * @Required @Override dialog\n     */ on: function(update) {\n        const contextImage = this.context.image;\n        if (!update) {\n            contextImage.inputX.value = contextImage._origin_w = this.options.imageWidth === contextImage._defaultSizeX ? \"\" : this.options.imageWidth;\n            contextImage.inputY.value = contextImage._origin_h = this.options.imageHeight === contextImage._defaultSizeY ? \"\" : this.options.imageHeight;\n            if (contextImage.imgInputFile && this.options.imageMultipleFile) contextImage.imgInputFile.setAttribute(\"multiple\", \"multiple\");\n        } else {\n            if (contextImage.imgInputFile && this.options.imageMultipleFile) contextImage.imgInputFile.removeAttribute(\"multiple\");\n        }\n        this.plugins.anchor.on.call(this, contextImage.anchorCtx, update);\n    },\n    /**\n     * @Required @Override dialog\n     */ open: function() {\n        this.plugins.dialog.open.call(this, \"image\", \"image\" === this.currentControllerName);\n    },\n    openTab: function(e) {\n        const modal = this.context.image.modal;\n        const targetElement = e === \"init\" ? modal.querySelector(\"._se_tab_link\") : e.target;\n        if (!/^BUTTON$/i.test(targetElement.tagName)) {\n            return false;\n        }\n        // Declare all variables\n        const tabName = targetElement.getAttribute(\"data-tab-link\");\n        const contentClassName = \"_se_tab_content\";\n        let i, tabContent, tabLinks;\n        // Get all elements with class=\"tabcontent\" and hide them\n        tabContent = modal.getElementsByClassName(contentClassName);\n        for(i = 0; i < tabContent.length; i++){\n            tabContent[i].style.display = \"none\";\n        }\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\n        tabLinks = modal.getElementsByClassName(\"_se_tab_link\");\n        for(i = 0; i < tabLinks.length; i++){\n            this.util.removeClass(tabLinks[i], \"active\");\n        }\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\n        modal.querySelector(\".\" + contentClassName + \"_\" + tabName).style.display = \"block\";\n        this.util.addClass(targetElement, \"active\");\n        // focus\n        if (tabName === \"image\" && this.context.image.focusElement) {\n            this.context.image.focusElement.focus();\n        } else if (tabName === \"url\") {\n            this.context.anchor.caller.image.urlInput.focus();\n        }\n        return false;\n    },\n    submit: function(e) {\n        const contextImage = this.context.image;\n        const imagePlugin = this.plugins.image;\n        e.preventDefault();\n        e.stopPropagation();\n        contextImage._altText = contextImage.altText.value;\n        contextImage._align = contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\n        contextImage._captionChecked = contextImage.captionCheckEl.checked;\n        if (contextImage._resizing) contextImage._proportionChecked = contextImage.proportion.checked;\n        try {\n            if (this.context.dialog.updateModal) {\n                imagePlugin.update_image.call(this, false, true, false);\n            }\n            if (contextImage.imgInputFile && contextImage.imgInputFile.files.length > 0) {\n                this.showLoading();\n                imagePlugin.submitAction.call(this, this.context.image.imgInputFile.files);\n            } else if (contextImage.imgUrlFile && contextImage._v_src._linkValue.length > 0) {\n                this.showLoading();\n                imagePlugin.onRender_imgUrl.call(this, contextImage._v_src._linkValue);\n            }\n        } catch (error) {\n            this.closeLoading();\n            throw Error('[SUNEDITOR.image.submit.fail] cause : \"' + error.message + '\"');\n        } finally{\n            this.plugins.dialog.close.call(this);\n        }\n        return false;\n    },\n    submitAction: function(fileList) {\n        if (fileList.length === 0) return;\n        let fileSize = 0;\n        let files = [];\n        for(let i = 0, len = fileList.length; i < len; i++){\n            if (/image/i.test(fileList[i].type)) {\n                files.push(fileList[i]);\n                fileSize += fileList[i].size;\n            }\n        }\n        const limitSize = this.options.imageUploadSizeLimit;\n        if (limitSize > 0) {\n            let infoSize = 0;\n            const imagesInfo = this.context.image._infoList;\n            for(let i = 0, len = imagesInfo.length; i < len; i++){\n                infoSize += imagesInfo[i].size * 1;\n            }\n            if (fileSize + infoSize > limitSize) {\n                this.closeLoading();\n                const err = \"[SUNEDITOR.imageUpload.fail] Size of uploadable total images: \" + limitSize / 1000 + \"KB\";\n                if (typeof this.functions.onImageUploadError !== \"function\" || this.functions.onImageUploadError(err, {\n                    \"limitSize\": limitSize,\n                    \"currentSize\": infoSize,\n                    \"uploadSize\": fileSize\n                }, this)) {\n                    this.functions.noticeOpen(err);\n                }\n                return;\n            }\n        }\n        const contextImage = this.context.image;\n        contextImage._uploadFileLength = files.length;\n        const anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);\n        const info = {\n            anchor: anchor,\n            inputWidth: contextImage.inputX.value,\n            inputHeight: contextImage.inputY.value,\n            align: contextImage._align,\n            isUpdate: this.context.dialog.updateModal,\n            alt: contextImage._altText,\n            element: contextImage._element\n        };\n        if (typeof this.functions.onImageUploadBefore === \"function\") {\n            const result = this.functions.onImageUploadBefore(files, info, this, (function(data) {\n                if (data && this._w.Array.isArray(data.result)) {\n                    this.plugins.image.register.call(this, info, data);\n                } else {\n                    this.plugins.image.upload.call(this, info, data);\n                }\n            }).bind(this));\n            if (typeof result === \"undefined\") return;\n            if (!result) {\n                this.closeLoading();\n                return;\n            }\n            if (this._w.Array.isArray(result) && result.length > 0) files = result;\n        }\n        this.plugins.image.upload.call(this, info, files);\n    },\n    error: function(message, response) {\n        this.closeLoading();\n        if (typeof this.functions.onImageUploadError !== \"function\" || this.functions.onImageUploadError(message, response, this)) {\n            this.functions.noticeOpen(message);\n            throw Error(\"[SUNEDITOR.plugin.image.error] response: \" + message);\n        }\n    },\n    upload: function(info, files) {\n        if (!files) {\n            this.closeLoading();\n            return;\n        }\n        if (typeof files === \"string\") {\n            this.plugins.image.error.call(this, files, null);\n            return;\n        }\n        const imageUploadUrl = this.options.imageUploadUrl;\n        const filesLen = this.context.dialog.updateModal ? 1 : files.length;\n        // server upload\n        if (typeof imageUploadUrl === \"string\" && imageUploadUrl.length > 0) {\n            const formData = new FormData();\n            for(let i = 0; i < filesLen; i++){\n                formData.append(\"file-\" + i, files[i]);\n            }\n            this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);\n        } else {\n            this.plugins.image.setup_reader.call(this, files, info.anchor, info.inputWidth, info.inputHeight, info.align, info.alt, filesLen, info.isUpdate);\n        }\n    },\n    callBack_imgUpload: function(info, xmlHttp) {\n        if (typeof this.functions.imageUploadHandler === \"function\") {\n            this.functions.imageUploadHandler(xmlHttp, info, this);\n        } else {\n            const response = JSON.parse(xmlHttp.responseText);\n            if (response.errorMessage) {\n                this.plugins.image.error.call(this, response.errorMessage, response);\n            } else {\n                this.plugins.image.register.call(this, info, response);\n            }\n        }\n    },\n    register: function(info, response) {\n        const fileList = response.result;\n        for(let i = 0, len = fileList.length, file; i < len; i++){\n            file = {\n                name: fileList[i].name,\n                size: fileList[i].size\n            };\n            if (info.isUpdate) {\n                this.plugins.image.update_src.call(this, fileList[i].url, info.element, file);\n                break;\n            } else {\n                this.plugins.image.create_image.call(this, fileList[i].url, info.anchor, info.inputWidth, info.inputHeight, info.align, file, info.alt);\n            }\n        }\n        this.closeLoading();\n    },\n    setup_reader: function(files, anchor, width, height, align, alt, filesLen, isUpdate) {\n        try {\n            if (filesLen === 0) {\n                this.closeLoading();\n                console.warn(\"[SUNEDITOR.image.base64.fail] cause : No applicable files\");\n                return;\n            }\n            this.context.image.base64RenderIndex = filesLen;\n            const wFileReader = this._w.FileReader;\n            const filesStack = [\n                filesLen\n            ];\n            this.context.image.inputX.value = width;\n            this.context.image.inputY.value = height;\n            for(let i = 0, reader, file; i < filesLen; i++){\n                reader = new wFileReader();\n                file = files[i];\n                reader.onload = (function(reader, update, updateElement, file, index) {\n                    filesStack[index] = {\n                        result: reader.result,\n                        file: file\n                    };\n                    if (--this.context.image.base64RenderIndex === 0) {\n                        this.plugins.image.onRender_imgBase64.call(this, update, filesStack, updateElement, anchor, width, height, align, alt);\n                        this.closeLoading();\n                    }\n                }).bind(this, reader, isUpdate, this.context.image._element, file, i);\n                reader.readAsDataURL(file);\n            }\n        } catch (e) {\n            this.closeLoading();\n            throw Error('[SUNEDITOR.image.setup_reader.fail] cause : \"' + e.message + '\"');\n        }\n    },\n    onRender_imgBase64: function(update, filesStack, updateElement, anchor, width, height, align, alt) {\n        const updateMethod = this.plugins.image.update_src;\n        const createMethod = this.plugins.image.create_image;\n        for(let i = 0, len = filesStack.length; i < len; i++){\n            if (update) {\n                this.context.image._element.setAttribute(\"data-file-name\", filesStack[i].file.name);\n                this.context.image._element.setAttribute(\"data-file-size\", filesStack[i].file.size);\n                updateMethod.call(this, filesStack[i].result, updateElement, filesStack[i].file);\n            } else {\n                createMethod.call(this, filesStack[i].result, anchor, width, height, align, filesStack[i].file, alt);\n            }\n        }\n    },\n    onRender_imgUrl: function(url) {\n        if (!url) url = this.context.image._v_src._linkValue;\n        if (!url) return false;\n        const contextImage = this.context.image;\n        try {\n            const file = {\n                name: url.split(\"/\").pop(),\n                size: 0\n            };\n            if (this.context.dialog.updateModal) this.plugins.image.update_src.call(this, url, contextImage._element, file);\n            else this.plugins.image.create_image.call(this, url, this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true), contextImage.inputX.value, contextImage.inputY.value, contextImage._align, file, contextImage._altText);\n        } catch (e) {\n            throw Error('[SUNEDITOR.image.URLRendering.fail] cause : \"' + e.message + '\"');\n        } finally{\n            this.closeLoading();\n        }\n    },\n    onRender_link: function(imgTag, anchor) {\n        if (anchor) {\n            anchor.setAttribute(\"data-image-link\", \"image\");\n            imgTag.setAttribute(\"data-image-link\", anchor.href);\n            anchor.appendChild(imgTag);\n            return anchor;\n        }\n        return imgTag;\n    },\n    /**\n     * @Override resizing\n     * @param {String} xy 'x': width, 'y': height\n     * @param {KeyboardEvent} e Event object\n     */ setInputSize: function(xy, e) {\n        if (e && e.keyCode === 32) {\n            e.preventDefault();\n            return;\n        }\n        this.plugins.resizing._module_setInputSize.call(this, this.context.image, xy);\n    },\n    /**\n     * @Override resizing\n     */ setRatio: function() {\n        this.plugins.resizing._module_setRatio.call(this, this.context.image);\n    },\n    /**\n     * @Override fileManager\n     */ checkFileInfo: function() {\n        const imagePlugin = this.plugins.image;\n        const contextImage = this.context.image;\n        const modifyHandler = (function(tag) {\n            imagePlugin.onModifyMode.call(this, tag, null);\n            imagePlugin.openModify.call(this, true);\n            // get size\n            contextImage.inputX.value = contextImage._origin_w;\n            contextImage.inputY.value = contextImage._origin_h;\n            // get align\n            const format = this.util.getFormatElement(tag);\n            if (format) contextImage._align = format.style.textAlign || format.style.float;\n            // link\n            if (this.util.isAnchor(tag.parentNode) && !contextImage.anchorCtx.linkValue) contextImage.anchorCtx.linkValue = \" \";\n            imagePlugin.update_image.call(this, true, false, true);\n            imagePlugin.init.call(this);\n        }).bind(this);\n        this.plugins.fileManager.checkInfo.call(this, \"image\", [\n            \"img\"\n        ], this.functions.onImageUpload, modifyHandler, true);\n    },\n    /**\n     * @Override fileManager\n     */ resetFileInfo: function() {\n        this.plugins.fileManager.resetInfo.call(this, \"image\", this.functions.onImageUpload);\n    },\n    create_image: function(src, anchor, width, height, align, file, alt) {\n        const imagePlugin = this.plugins.image;\n        const contextImage = this.context.image;\n        this.context.resizing._resize_plugin = \"image\";\n        let oImg = this.util.createElement(\"IMG\");\n        oImg.src = src;\n        oImg.alt = alt;\n        oImg.setAttribute(\"data-rotate\", \"0\");\n        anchor = imagePlugin.onRender_link.call(this, oImg, anchor ? anchor.cloneNode(false) : null);\n        if (contextImage._resizing) {\n            oImg.setAttribute(\"data-proportion\", contextImage._proportionChecked);\n        }\n        const cover = this.plugins.component.set_cover.call(this, anchor);\n        const container = this.plugins.component.set_container.call(this, cover, \"se-image-container\");\n        // caption\n        if (contextImage._captionChecked) {\n            contextImage._caption = this.plugins.component.create_caption.call(this);\n            cover.appendChild(contextImage._caption);\n        }\n        contextImage._element = oImg;\n        contextImage._cover = cover;\n        contextImage._container = container;\n        // set size\n        imagePlugin.applySize.call(this, width, height);\n        // align\n        imagePlugin.setAlign.call(this, align, oImg, cover, container);\n        oImg.onload = imagePlugin._image_create_onload.bind(this, oImg, contextImage.svgDefaultSize, container);\n        if (this.insertComponent(container, true, true, true)) this.plugins.fileManager.setInfo.call(this, \"image\", oImg, this.functions.onImageUpload, file, true);\n        this.context.resizing._resize_plugin = \"\";\n    },\n    _image_create_onload: function(oImg, svgDefaultSize, container) {\n        // svg exception handling\n        if (oImg.offsetWidth === 0) this.plugins.image.applySize.call(this, svgDefaultSize, \"\");\n        if (this.options.mediaAutoSelect) {\n            this.selectComponent(oImg, \"image\");\n        } else {\n            const line = this.appendFormatTag(container, null);\n            if (line) this.setRange(line, 0, line, 0);\n        }\n    },\n    update_image: function(init, openController, notHistoryPush) {\n        const contextImage = this.context.image;\n        let imageEl = contextImage._element;\n        let cover = contextImage._cover;\n        let container = contextImage._container;\n        let isNewContainer = false;\n        if (cover === null) {\n            isNewContainer = true;\n            imageEl = contextImage._element.cloneNode(true);\n            cover = this.plugins.component.set_cover.call(this, imageEl);\n        }\n        if (container === null) {\n            cover = cover.cloneNode(true);\n            imageEl = cover.querySelector(\"img\");\n            isNewContainer = true;\n            container = this.plugins.component.set_container.call(this, cover, \"se-image-container\");\n        } else if (isNewContainer) {\n            container.innerHTML = \"\";\n            container.appendChild(cover);\n            contextImage._cover = cover;\n            contextImage._element = imageEl;\n            isNewContainer = false;\n        }\n        // check size\n        let changeSize;\n        const x = this.util.isNumber(contextImage.inputX.value) ? contextImage.inputX.value + contextImage.sizeUnit : contextImage.inputX.value;\n        const y = this.util.isNumber(contextImage.inputY.value) ? contextImage.inputY.value + contextImage.sizeUnit : contextImage.inputY.value;\n        if (/%$/.test(imageEl.style.width)) {\n            changeSize = x !== container.style.width || y !== container.style.height;\n        } else {\n            changeSize = x !== imageEl.style.width || y !== imageEl.style.height;\n        }\n        // alt\n        imageEl.alt = contextImage._altText;\n        // caption\n        let modifiedCaption = false;\n        if (contextImage._captionChecked) {\n            if (!contextImage._caption) {\n                contextImage._caption = this.plugins.component.create_caption.call(this);\n                cover.appendChild(contextImage._caption);\n                modifiedCaption = true;\n            }\n        } else {\n            if (contextImage._caption) {\n                this.util.removeItem(contextImage._caption);\n                contextImage._caption = null;\n                modifiedCaption = true;\n            }\n        }\n        // link\n        let isNewAnchor = null;\n        const anchor = this.plugins.anchor.createAnchor.call(this, contextImage.anchorCtx, true);\n        if (anchor) {\n            if (contextImage._linkElement !== anchor || isNewContainer && !container.contains(anchor)) {\n                contextImage._linkElement = anchor.cloneNode(false);\n                cover.insertBefore(this.plugins.image.onRender_link.call(this, imageEl, contextImage._linkElement), contextImage._caption);\n                isNewAnchor = contextImage._element;\n            } else {\n                contextImage._linkElement.setAttribute(\"data-image-link\", \"image\");\n            }\n        } else if (contextImage._linkElement !== null) {\n            const imageElement = imageEl;\n            imageElement.setAttribute(\"data-image-link\", \"\");\n            if (cover.contains(contextImage._linkElement)) {\n                const newEl = imageElement.cloneNode(true);\n                cover.removeChild(contextImage._linkElement);\n                cover.insertBefore(newEl, contextImage._caption);\n                contextImage._element = imageEl = newEl;\n            }\n        }\n        let existElement = null;\n        if (isNewContainer) {\n            existElement = this.util.isRangeFormatElement(contextImage._element.parentNode) || this.util.isWysiwygDiv(contextImage._element.parentNode) ? contextImage._element : this.util.isAnchor(contextImage._element.parentNode) ? contextImage._element.parentNode : this.util.getFormatElement(contextImage._element) || contextImage._element;\n            if (this.util.getParentElement(contextImage._element, this.util.isNotCheckingNode)) {\n                existElement = isNewAnchor ? anchor : contextImage._element;\n                existElement.parentNode.replaceChild(container, existElement);\n            } else if (this.util.isListCell(existElement)) {\n                const refer = this.util.getParentElement(contextImage._element, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement.insertBefore(container, refer);\n                this.util.removeItem(contextImage._element);\n                this.util.removeEmptyNode(refer, null, true);\n            } else if (this.util.isFormatElement(existElement)) {\n                const refer = this.util.getParentElement(contextImage._element, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement = this.util.splitElement(existElement, refer);\n                existElement.parentNode.insertBefore(container, existElement);\n                this.util.removeItem(contextImage._element);\n                this.util.removeEmptyNode(existElement, null, true);\n                if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n            } else {\n                if (this.util.isFormatElement(existElement.parentNode)) {\n                    const formats = existElement.parentNode;\n                    formats.parentNode.insertBefore(container, existElement.previousSibling ? formats.nextElementSibling : formats);\n                    if (contextImage.__updateTags.map(function(current) {\n                        return existElement.contains(current);\n                    }).length === 0) this.util.removeItem(existElement);\n                } else {\n                    existElement = this.util.isFigures(existElement.parentNode) ? existElement.parentNode : existElement;\n                    existElement.parentNode.replaceChild(container, existElement);\n                }\n            }\n            imageEl = container.querySelector(\"img\");\n            contextImage._element = imageEl;\n            contextImage._cover = cover;\n            contextImage._container = container;\n        }\n        if (isNewAnchor) {\n            if (!isNewContainer) {\n                this.util.removeItem(anchor);\n            } else {\n                this.util.removeItem(isNewAnchor);\n                if (this.util.getListChildren(anchor, function(current) {\n                    return /IMG/i.test(current.tagName);\n                }).length === 0) {\n                    this.util.removeItem(anchor);\n                }\n            }\n        }\n        // transform\n        if (modifiedCaption || !contextImage._onlyPercentage && changeSize) {\n            if (!init && (/\\d+/.test(imageEl.style.height) || this.context.resizing._rotateVertical && contextImage._captionChecked)) {\n                if (/%$/.test(contextImage.inputX.value) || /%$/.test(contextImage.inputY.value)) {\n                    this.plugins.resizing.resetTransform.call(this, imageEl);\n                } else {\n                    this.plugins.resizing.setTransformSize.call(this, imageEl, this.util.getNumber(contextImage.inputX.value, 0), this.util.getNumber(contextImage.inputY.value, 0));\n                }\n            }\n        }\n        // size\n        if (contextImage._resizing) {\n            imageEl.setAttribute(\"data-proportion\", contextImage._proportionChecked);\n            if (changeSize) {\n                this.plugins.image.applySize.call(this);\n            }\n        }\n        // align\n        this.plugins.image.setAlign.call(this, null, imageEl, null, null);\n        // set imagesInfo\n        if (init) {\n            this.plugins.fileManager.setInfo.call(this, \"image\", imageEl, this.functions.onImageUpload, null, true);\n        }\n        if (openController) {\n            this.selectComponent(imageEl, \"image\");\n        }\n        // history stack\n        if (!notHistoryPush) this.history.push(false);\n    },\n    update_src: function(src, element, file) {\n        element.src = src;\n        this._w.setTimeout(this.plugins.fileManager.setInfo.bind(this, \"image\", element, this.functions.onImageUpload, file, true));\n        this.selectComponent(element, \"image\");\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ onModifyMode: function(element, size) {\n        if (!element) return;\n        const contextImage = this.context.image;\n        contextImage._linkElement = contextImage.anchorCtx.linkAnchor = this.util.isAnchor(element.parentNode) ? element.parentNode : null;\n        contextImage._element = element;\n        contextImage._cover = this.util.getParentElement(element, \"FIGURE\");\n        contextImage._container = this.util.getParentElement(element, this.util.isMediaComponent);\n        contextImage._caption = this.util.getChildElement(contextImage._cover, \"FIGCAPTION\");\n        contextImage._align = element.getAttribute(\"data-align\") || element.style.float || \"none\";\n        element.style.float = \"\";\n        this.plugins.anchor.setCtx(contextImage._linkElement, contextImage.anchorCtx);\n        if (size) {\n            contextImage._element_w = size.w;\n            contextImage._element_h = size.h;\n            contextImage._element_t = size.t;\n            contextImage._element_l = size.l;\n        }\n        let userSize = contextImage._element.getAttribute(\"data-size\") || contextImage._element.getAttribute(\"data-origin\");\n        let w, h;\n        if (userSize) {\n            userSize = userSize.split(\",\");\n            w = userSize[0];\n            h = userSize[1];\n        } else if (size) {\n            w = size.w;\n            h = size.h;\n        }\n        contextImage._origin_w = w || element.style.width || element.width || \"\";\n        contextImage._origin_h = h || element.style.height || element.height || \"\";\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ openModify: function(notOpen) {\n        const contextImage = this.context.image;\n        if (contextImage.imgUrlFile) {\n            contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = contextImage._element.src;\n        }\n        contextImage._altText = contextImage.altText.value = contextImage._element.alt;\n        (contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"' + contextImage._align + '\"]') || contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"none\"]')).checked = true;\n        contextImage._align = contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\n        contextImage._captionChecked = contextImage.captionCheckEl.checked = !!contextImage._caption;\n        if (contextImage._resizing) {\n            this.plugins.resizing._module_setModifyInputSize.call(this, contextImage, this.plugins.image);\n        }\n        if (!notOpen) this.plugins.dialog.open.call(this, \"image\", true);\n    },\n    /**\n     * @Override fileManager\n     */ applySize: function(w, h) {\n        const contextImage = this.context.image;\n        if (!w) w = contextImage.inputX.value || this.options.imageWidth;\n        if (!h) h = contextImage.inputY.value || this.options.imageHeight;\n        if (contextImage._onlyPercentage && !!w || /%$/.test(w)) {\n            this.plugins.image.setPercentSize.call(this, w, h);\n            return true;\n        } else if ((!w || w === \"auto\") && (!h || h === \"auto\")) {\n            this.plugins.image.setAutoSize.call(this);\n        } else {\n            this.plugins.image.setSize.call(this, w, h, false);\n        }\n        return false;\n    },\n    /**\n     * @Override resizing\n     */ sizeRevert: function() {\n        this.plugins.resizing._module_sizeRevert.call(this, this.context.image);\n    },\n    /**\n     * @Override resizing\n     */ setSize: function(w, h, notResetPercentage, direction) {\n        const contextImage = this.context.image;\n        const onlyW = /^(rw|lw)$/.test(direction) && /\\d+/.test(contextImage._element.style.height);\n        const onlyH = /^(th|bh)$/.test(direction) && /\\d+/.test(contextImage._element.style.width);\n        if (!onlyH) {\n            contextImage._element.style.width = this.util.isNumber(w) ? w + contextImage.sizeUnit : w;\n            this.plugins.image.cancelPercentAttr.call(this);\n        }\n        if (!onlyW) {\n            contextImage._element.style.height = this.util.isNumber(h) ? h + contextImage.sizeUnit : /%$/.test(h) ? \"\" : h;\n        }\n        if (contextImage._align === \"center\") this.plugins.image.setAlign.call(this, null, null, null, null);\n        if (!notResetPercentage) contextImage._element.removeAttribute(\"data-percentage\");\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    },\n    /**\n     * @Override resizing\n     */ setAutoSize: function() {\n        const contextImage = this.context.image;\n        if (contextImage._caption) contextImage._caption.style.marginTop = \"\";\n        this.plugins.resizing.resetTransform.call(this, contextImage._element);\n        this.plugins.image.cancelPercentAttr.call(this);\n        contextImage._element.style.maxWidth = \"\";\n        contextImage._element.style.width = \"\";\n        contextImage._element.style.height = \"\";\n        contextImage._cover.style.width = \"\";\n        contextImage._cover.style.height = \"\";\n        this.plugins.image.setAlign.call(this, null, null, null, null);\n        contextImage._element.setAttribute(\"data-percentage\", \"auto,auto\");\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    },\n    /**\n     * @Override resizing\n     */ setOriginSize: function() {\n        const contextImage = this.context.image;\n        contextImage._element.removeAttribute(\"data-percentage\");\n        this.plugins.resizing.resetTransform.call(this, contextImage._element);\n        this.plugins.image.cancelPercentAttr.call(this);\n        const originSize = (contextImage._element.getAttribute(\"data-origin\") || \"\").split(\",\");\n        const w = originSize[0];\n        const h = originSize[1];\n        if (originSize) {\n            if (contextImage._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\\d/.test(h))) {\n                this.plugins.image.setPercentSize.call(this, w, h);\n            } else {\n                this.plugins.image.setSize.call(this, w, h);\n            }\n            // save current size\n            this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n        }\n    },\n    /**\n     * @Override resizing\n     */ setPercentSize: function(w, h) {\n        const contextImage = this.context.image;\n        h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + \"%\" : h : this.util.isNumber(h) ? h + contextImage.sizeUnit : h || \"\";\n        const heightPercentage = /%$/.test(h);\n        contextImage._container.style.width = this.util.isNumber(w) ? w + \"%\" : w;\n        contextImage._container.style.height = \"\";\n        contextImage._cover.style.width = \"100%\";\n        contextImage._cover.style.height = !heightPercentage ? \"\" : h;\n        contextImage._element.style.width = \"100%\";\n        contextImage._element.style.height = heightPercentage ? \"\" : h;\n        contextImage._element.style.maxWidth = \"\";\n        if (contextImage._align === \"center\") this.plugins.image.setAlign.call(this, null, null, null, null);\n        contextImage._element.setAttribute(\"data-percentage\", w + \",\" + h);\n        this.plugins.resizing.setCaptionPosition.call(this, contextImage._element);\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextImage);\n    },\n    /**\n     * @Override resizing\n     */ cancelPercentAttr: function() {\n        const contextImage = this.context.image;\n        contextImage._cover.style.width = \"\";\n        contextImage._cover.style.height = \"\";\n        contextImage._container.style.width = \"\";\n        contextImage._container.style.height = \"\";\n        this.util.removeClass(contextImage._container, this.context.image._floatClassRegExp);\n        this.util.addClass(contextImage._container, \"__se__float-\" + contextImage._align);\n        if (contextImage._align === \"center\") this.plugins.image.setAlign.call(this, null, null, null, null);\n    },\n    /**\n     * @Override resizing\n     */ setAlign: function(align, element, cover, container) {\n        const contextImage = this.context.image;\n        if (!align) align = contextImage._align;\n        if (!element) element = contextImage._element;\n        if (!cover) cover = contextImage._cover;\n        if (!container) container = contextImage._container;\n        if (/%$/.test(element.style.width) && align === \"center\") {\n            container.style.minWidth = \"100%\";\n            cover.style.width = container.style.width;\n        } else {\n            container.style.minWidth = \"\";\n            cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : !element.style.width || element.style.width === \"auto\" ? \"\" : element.style.width || \"100%\";\n        }\n        if (!this.util.hasClass(container, \"__se__float-\" + align)) {\n            this.util.removeClass(container, contextImage._floatClassRegExp);\n            this.util.addClass(container, \"__se__float-\" + align);\n        }\n        element.setAttribute(\"data-align\", align);\n    },\n    /**\n     * @Override dialog\n     */ init: function() {\n        const contextImage = this.context.image;\n        if (contextImage.imgInputFile) contextImage.imgInputFile.value = \"\";\n        if (contextImage.imgUrlFile) contextImage._v_src._linkValue = contextImage.previewSrc.textContent = contextImage.imgUrlFile.value = \"\";\n        if (contextImage.imgInputFile && contextImage.imgUrlFile) {\n            contextImage.imgUrlFile.removeAttribute(\"disabled\");\n            contextImage.previewSrc.style.textDecoration = \"\";\n        }\n        contextImage.altText.value = \"\";\n        contextImage.modal.querySelector('input[name=\"suneditor_image_radio\"][value=\"none\"]').checked = true;\n        contextImage.captionCheckEl.checked = false;\n        contextImage._element = null;\n        this.plugins.image.openTab.call(this, \"init\");\n        if (contextImage._resizing) {\n            contextImage.inputX.value = this.options.imageWidth === contextImage._defaultSizeX ? \"\" : this.options.imageWidth;\n            contextImage.inputY.value = this.options.imageHeight === contextImage._defaultSizeY ? \"\" : this.options.imageHeight;\n            contextImage.proportion.checked = true;\n            contextImage._ratio = false;\n            contextImage._ratioX = 1;\n            contextImage._ratioY = 1;\n        }\n        this.plugins.anchor.init.call(this, contextImage.anchorCtx);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/image.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/link.js":
/*!***********************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/dialog/link.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/dialog */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/dialog.js\");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_anchor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/_anchor */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_anchor.js\");\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"link\",\n    display: \"dialog\",\n    add: function(core) {\n        core.addModule([\n            (_modules_dialog__WEBPACK_IMPORTED_MODULE_0___default()),\n            _modules_anchor__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n        ]);\n        const context = core.context;\n        const contextLink = context.link = {\n            focusElement: null,\n            _linkAnchor: null,\n            anchorCtx: null\n        };\n        /** link dialog */ let link_dialog = this.setDialog(core);\n        contextLink.modal = link_dialog;\n        /** link controller */ let link_controller = this.setController_LinkButton(core);\n        contextLink.linkController = link_controller;\n        link_dialog.querySelector(\"form\").addEventListener(\"submit\", this.submit.bind(core));\n        link_controller.addEventListener(\"click\", this.onClick_linkController.bind(core));\n        /** append html */ context.dialog.modal.appendChild(link_dialog);\n        /** append controller */ context.element.relative.appendChild(link_controller);\n        /** link event */ core.plugins.anchor.initEvent.call(core, \"link\", link_dialog);\n        contextLink.focusElement = context.anchor.caller.link.urlInput;\n        /** empty memory */ link_dialog = null, link_controller = null;\n    },\n    /** dialog */ setDialog: function(core) {\n        const lang = core.lang;\n        const dialog = core.util.createElement(\"DIV\");\n        const icons = core.icons;\n        dialog.className = \"se-dialog-content\";\n        dialog.style.display = \"none\";\n        let html = \"\" + \"<form>\" + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + icons.cancel + \"</button>\" + '<span class=\"se-modal-title\">' + lang.dialogBox.linkBox.title + \"</span>\" + \"</div>\" + core.context.anchor.forms.innerHTML + '<div class=\"se-dialog-footer\">' + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + \"</span></button>\" + \"</div>\" + \"</form>\";\n        dialog.innerHTML = html;\n        return dialog;\n    },\n    /** modify controller button */ setController_LinkButton: function(core) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const link_btn = core.util.createElement(\"DIV\");\n        link_btn.className = \"se-controller se-controller-link\";\n        link_btn.innerHTML = \"\" + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"link-content\"><span><a target=\"_blank\" href=\"\"></a>&nbsp;</span>' + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"update\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.edit + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"unlink\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.unlink + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.unlink + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" tabindex=\"-1\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + \"</span></span>\" + \"</button>\" + \"</div>\" + \"</div>\";\n        return link_btn;\n    },\n    /**\n     * @Override dialog\n     */ open: function() {\n        this.plugins.dialog.open.call(this, \"link\", \"link\" === this.currentControllerName);\n    },\n    submit: function(e) {\n        this.showLoading();\n        e.preventDefault();\n        e.stopPropagation();\n        try {\n            const oA = this.plugins.anchor.createAnchor.call(this, this.context.anchor.caller.link, false);\n            if (oA === null) return;\n            if (!this.context.dialog.updateModal) {\n                const selectedFormats = this.getSelectedElements();\n                if (selectedFormats.length > 1) {\n                    const oFormat = this.util.createElement(selectedFormats[0].nodeName);\n                    oFormat.appendChild(oA);\n                    if (!this.insertNode(oFormat, null, true)) return;\n                } else {\n                    if (!this.insertNode(oA, null, true)) return;\n                }\n                this.setRange(oA.childNodes[0], 0, oA.childNodes[0], oA.textContent.length);\n            } else {\n                // set range\n                const textNode = this.context.link._linkAnchor.childNodes[0];\n                this.setRange(textNode, 0, textNode, textNode.textContent.length);\n            }\n        } finally{\n            this.plugins.dialog.close.call(this);\n            this.closeLoading();\n            // history stack\n            this.history.push(false);\n        }\n        return false;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        if (!element) {\n            if (this.controllerArray.indexOf(this.context.link.linkController) > -1) {\n                this.controllersOff();\n            }\n        } else if (this.util.isAnchor(element) && element.getAttribute(\"data-image-link\") === null) {\n            if (this.controllerArray.indexOf(this.context.link.linkController) < 0) {\n                this.plugins.link.call_controller.call(this, element);\n            }\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override dialog\n     */ on: function(update) {\n        this.plugins.anchor.on.call(this, this.context.anchor.caller.link, update);\n    },\n    call_controller: function(selectionATag) {\n        this.editLink = this.context.link._linkAnchor = this.context.anchor.caller.link.linkAnchor = selectionATag;\n        const linkBtn = this.context.link.linkController;\n        const link = linkBtn.querySelector(\"a\");\n        link.href = selectionATag.href;\n        link.title = selectionATag.textContent;\n        link.textContent = selectionATag.textContent;\n        this.util.addClass(selectionATag, \"on\");\n        this.setControllerPosition(linkBtn, selectionATag, \"bottom\", {\n            left: 0,\n            top: 0\n        });\n        this.controllersOn(linkBtn, selectionATag, \"link\", this.util.removeClass.bind(this.util, this.context.link._linkAnchor, \"on\"));\n    },\n    onClick_linkController: function(e) {\n        e.stopPropagation();\n        const command = e.target.getAttribute(\"data-command\") || e.target.parentNode.getAttribute(\"data-command\");\n        if (!command) return;\n        e.preventDefault();\n        if (/update/.test(command)) {\n            this.plugins.dialog.open.call(this, \"link\", true);\n        } else if (/unlink/.test(command)) {\n            const sc = this.util.getChildElement(this.context.link._linkAnchor, function(current) {\n                return current.childNodes.length === 0 || current.nodeType === 3;\n            }, false);\n            const ec = this.util.getChildElement(this.context.link._linkAnchor, function(current) {\n                return current.childNodes.length === 0 || current.nodeType === 3;\n            }, true);\n            this.setRange(sc, 0, ec, ec.textContent.length);\n            this.nodeChange(null, null, [\n                \"A\"\n            ], false);\n        } else {\n            /** delete */ this.util.removeItem(this.context.link._linkAnchor);\n            this.context.anchor.caller.link.linkAnchor = null;\n            this.focus();\n            // history stack\n            this.history.push(false);\n        }\n        this.controllersOff();\n    },\n    /**\n     * @Override dialog\n     */ init: function() {\n        this.context.link.linkController.style.display = \"none\";\n        this.plugins.anchor.init.call(this, this.context.anchor.caller.link);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/video.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/dialog/video.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/dialog */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/dialog.js\");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/component */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/component.js\");\n/* harmony import */ var _modules_component__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modules_component__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/resizing */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/resizing.js\");\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_modules_resizing__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/fileManager */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/fileManager.js\");\n/* harmony import */ var _modules_fileManager__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_modules_fileManager__WEBPACK_IMPORTED_MODULE_3__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"video\",\n    display: \"dialog\",\n    add: function(core) {\n        core.addModule([\n            (_modules_dialog__WEBPACK_IMPORTED_MODULE_0___default()),\n            (_modules_component__WEBPACK_IMPORTED_MODULE_1___default()),\n            (_modules_resizing__WEBPACK_IMPORTED_MODULE_2___default()),\n            (_modules_fileManager__WEBPACK_IMPORTED_MODULE_3___default())\n        ]);\n        const options = core.options;\n        const context = core.context;\n        const contextVideo = context.video = {\n            _infoList: [],\n            _infoIndex: 0,\n            _uploadFileLength: 0,\n            focusElement: null,\n            sizeUnit: options._videoSizeUnit,\n            _align: \"none\",\n            _floatClassRegExp: \"__se__float\\\\-[a-z]+\",\n            _youtubeQuery: options.youtubeQuery,\n            _vimeoQuery: options.vimeoQuery,\n            _videoRatio: options.videoRatio * 100 + \"%\",\n            _defaultRatio: options.videoRatio * 100 + \"%\",\n            _linkValue: \"\",\n            // @require @Override component\n            _element: null,\n            _cover: null,\n            _container: null,\n            // @Override resizing properties\n            inputX: null,\n            inputY: null,\n            _element_w: 1,\n            _element_h: 1,\n            _element_l: 0,\n            _element_t: 0,\n            _defaultSizeX: \"100%\",\n            _defaultSizeY: options.videoRatio * 100 + \"%\",\n            _origin_w: options.videoWidth === \"100%\" ? \"\" : options.videoWidth,\n            _origin_h: options.videoHeight === \"56.25%\" ? \"\" : options.videoHeight,\n            _proportionChecked: true,\n            _resizing: options.videoResizing,\n            _resizeDotHide: !options.videoHeightShow,\n            _rotation: options.videoRotation,\n            _alignHide: !options.videoAlignShow,\n            _onlyPercentage: options.videoSizeOnlyPercentage,\n            _ratio: false,\n            _ratioX: 1,\n            _ratioY: 1,\n            _captionShow: false\n        };\n        /** video dialog */ let video_dialog = this.setDialog(core);\n        contextVideo.modal = video_dialog;\n        contextVideo.videoInputFile = video_dialog.querySelector(\"._se_video_file\");\n        contextVideo.videoUrlFile = video_dialog.querySelector(\".se-input-url\");\n        contextVideo.focusElement = contextVideo.videoUrlFile || contextVideo.videoInputFile;\n        contextVideo.preview = video_dialog.querySelector(\".se-link-preview\");\n        /** add event listeners */ video_dialog.querySelector(\"form\").addEventListener(\"submit\", this.submit.bind(core));\n        if (contextVideo.videoInputFile) video_dialog.querySelector(\".se-dialog-files-edge-button\").addEventListener(\"click\", this._removeSelectedFiles.bind(contextVideo.videoInputFile, contextVideo.videoUrlFile, contextVideo.preview));\n        if (contextVideo.videoInputFile && contextVideo.videoUrlFile) contextVideo.videoInputFile.addEventListener(\"change\", this._fileInputChange.bind(contextVideo));\n        if (contextVideo.videoUrlFile) contextVideo.videoUrlFile.addEventListener(\"input\", this._onLinkPreview.bind(contextVideo.preview, contextVideo, options.linkProtocol));\n        contextVideo.proportion = {};\n        contextVideo.videoRatioOption = {};\n        contextVideo.inputX = {};\n        contextVideo.inputY = {};\n        if (options.videoResizing) {\n            contextVideo.proportion = video_dialog.querySelector(\"._se_video_check_proportion\");\n            contextVideo.videoRatioOption = video_dialog.querySelector(\".se-video-ratio\");\n            contextVideo.inputX = video_dialog.querySelector(\"._se_video_size_x\");\n            contextVideo.inputY = video_dialog.querySelector(\"._se_video_size_y\");\n            contextVideo.inputX.value = options.videoWidth;\n            contextVideo.inputY.value = options.videoHeight;\n            contextVideo.inputX.addEventListener(\"keyup\", this.setInputSize.bind(core, \"x\"));\n            contextVideo.inputY.addEventListener(\"keyup\", this.setInputSize.bind(core, \"y\"));\n            contextVideo.inputX.addEventListener(\"change\", this.setRatio.bind(core));\n            contextVideo.inputY.addEventListener(\"change\", this.setRatio.bind(core));\n            contextVideo.proportion.addEventListener(\"change\", this.setRatio.bind(core));\n            contextVideo.videoRatioOption.addEventListener(\"change\", this.setVideoRatio.bind(core));\n            video_dialog.querySelector(\".se-dialog-btn-revert\").addEventListener(\"click\", this.sizeRevert.bind(core));\n        }\n        /** append html */ context.dialog.modal.appendChild(video_dialog);\n        /** empty memory */ video_dialog = null;\n    },\n    /** dialog */ setDialog: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const dialog = core.util.createElement(\"DIV\");\n        dialog.className = \"se-dialog-content\";\n        dialog.style.display = \"none\";\n        let html = \"\" + '<form method=\"post\" enctype=\"multipart/form-data\">' + '<div class=\"se-dialog-header\">' + '<button type=\"button\" data-command=\"close\" class=\"se-btn se-dialog-close\" title=\"' + lang.dialogBox.close + '\" aria-label=\"' + lang.dialogBox.close + '\">' + core.icons.cancel + \"</button>\" + '<span class=\"se-modal-title\">' + lang.dialogBox.videoBox.title + \"</span>\" + \"</div>\" + '<div class=\"se-dialog-body\">';\n        if (option.videoFileInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.videoBox.file + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form _se_video_file\" type=\"file\" accept=\"' + option.videoAccept + '\"' + (option.videoMultipleFile ? ' multiple=\"multiple\"' : \"\") + \"/>\" + '<button type=\"button\" data-command=\"filesRemove\" class=\"se-btn se-dialog-files-edge-button se-file-remove\" title=\"' + lang.controller.remove + '\" aria-label=\"' + lang.controller.remove + '\">' + core.icons.cancel + \"</button>\" + \"</div>\" + \"</div>\";\n        }\n        if (option.videoUrlInput) {\n            html += \"\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.videoBox.url + \"</label>\" + '<input class=\"se-input-form se-input-url\" type=\"text\" />' + '<pre class=\"se-link-preview\"></pre>' + \"</div>\";\n        }\n        if (option.videoResizing) {\n            const ratioList = option.videoRatioList || [\n                {\n                    name: \"16:9\",\n                    value: 0.5625\n                },\n                {\n                    name: \"4:3\",\n                    value: 0.75\n                },\n                {\n                    name: \"21:9\",\n                    value: 0.4285\n                }\n            ];\n            const ratio = option.videoRatio;\n            const onlyPercentage = option.videoSizeOnlyPercentage;\n            const onlyPercentDisplay = onlyPercentage ? ' style=\"display: none !important;\"' : \"\";\n            const heightDisplay = !option.videoHeightShow ? ' style=\"display: none !important;\"' : \"\";\n            const ratioDisplay = !option.videoRatioShow ? ' style=\"display: none !important;\"' : \"\";\n            const onlyWidthDisplay = !onlyPercentage && !option.videoHeightShow && !option.videoRatioShow ? ' style=\"display: none !important;\"' : \"\";\n            html += \"\" + '<div class=\"se-dialog-form\">' + '<div class=\"se-dialog-size-text\">' + '<label class=\"size-w\">' + lang.dialogBox.width + \"</label>\" + '<label class=\"se-dialog-size-x\">&nbsp;</label>' + '<label class=\"size-h\"' + heightDisplay + \">\" + lang.dialogBox.height + \"</label>\" + '<label class=\"size-h\"' + ratioDisplay + \">(\" + lang.dialogBox.ratio + \")</label>\" + \"</div>\" + '<input class=\"se-input-control _se_video_size_x\" placeholder=\"100%\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : \"\") + \"/>\" + '<label class=\"se-dialog-size-x\"' + onlyWidthDisplay + \">\" + (onlyPercentage ? \"%\" : \"x\") + \"</label>\" + '<input class=\"se-input-control _se_video_size_y\" placeholder=\"' + option.videoRatio * 100 + '%\"' + (onlyPercentage ? ' type=\"number\" min=\"1\"' : 'type=\"text\"') + (onlyPercentage ? ' max=\"100\"' : \"\") + heightDisplay + \"/>\" + '<select class=\"se-input-select se-video-ratio\" title=\"' + lang.dialogBox.ratio + '\" aria-label=\"' + lang.dialogBox.ratio + '\"' + ratioDisplay + \">\";\n            if (!heightDisplay) html += '<option value=\"\"> - </option>';\n            for(let i = 0, len = ratioList.length; i < len; i++){\n                html += '<option value=\"' + ratioList[i].value + '\"' + (ratio.toString() === ratioList[i].value.toString() ? \" selected\" : \"\") + \">\" + ratioList[i].name + \"</option>\";\n            }\n            html += \"</select>\" + '<button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" aria-label=\"' + lang.dialogBox.revertButton + '\" class=\"se-btn se-dialog-btn-revert\" style=\"float: right;\">' + core.icons.revert + \"</button>\" + \"</div>\" + '<div class=\"se-dialog-form se-dialog-form-footer\"' + onlyPercentDisplay + onlyWidthDisplay + \">\" + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_video_check_proportion\" checked/>&nbsp;' + lang.dialogBox.proportion + \"</label>\" + \"</div>\";\n        }\n        html += \"\" + \"</div>\" + '<div class=\"se-dialog-footer\">' + \"<div\" + (option.videoAlignShow ? \"\" : ' style=\"display: none\"') + \">\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"none\" checked>' + lang.dialogBox.basic + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"left\">' + lang.dialogBox.left + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"center\">' + lang.dialogBox.center + \"</label>\" + '<label><input type=\"radio\" name=\"suneditor_video_radio\" class=\"se-dialog-btn-radio\" value=\"right\">' + lang.dialogBox.right + \"</label>\" + \"</div>\" + '<button type=\"submit\" class=\"se-btn-primary\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\"><span>' + lang.dialogBox.submitButton + \"</span></button>\" + \"</div>\" + \"</form>\";\n        dialog.innerHTML = html;\n        return dialog;\n    },\n    _fileInputChange: function() {\n        if (!this.videoInputFile.value) {\n            this.videoUrlFile.removeAttribute(\"disabled\");\n            this.preview.style.textDecoration = \"\";\n        } else {\n            this.videoUrlFile.setAttribute(\"disabled\", true);\n            this.preview.style.textDecoration = \"line-through\";\n        }\n    },\n    _removeSelectedFiles: function(urlInput, preview) {\n        this.value = \"\";\n        if (urlInput) {\n            urlInput.removeAttribute(\"disabled\");\n            preview.style.textDecoration = \"\";\n        }\n    },\n    _onLinkPreview: function(context, protocol, e) {\n        const value = e.target.value.trim();\n        if (/^<iframe.*\\/iframe>$/.test(value)) {\n            context._linkValue = value;\n            this.textContent = '<IFrame :src=\"..\"></IFrame>';\n        } else {\n            context._linkValue = this.textContent = !value ? \"\" : protocol && value.indexOf(\"://\") === -1 && value.indexOf(\"#\") !== 0 ? protocol + value : value.indexOf(\"://\") === -1 ? \"/\" + value : value;\n        }\n    },\n    _setTagAttrs: function(element) {\n        element.setAttribute(\"controls\", true);\n        const attrs = this.options.videoTagAttrs;\n        if (!attrs) return;\n        for(let key in attrs){\n            if (!this.util.hasOwn(attrs, key)) continue;\n            element.setAttribute(key, attrs[key]);\n        }\n    },\n    createVideoTag: function() {\n        const videoTag = this.util.createElement(\"VIDEO\");\n        this.plugins.video._setTagAttrs.call(this, videoTag);\n        return videoTag;\n    },\n    _setIframeAttrs: function(element) {\n        element.frameBorder = \"0\";\n        element.allowFullscreen = true;\n        const attrs = this.options.videoIframeAttrs;\n        if (!attrs) return;\n        for(let key in attrs){\n            if (!this.util.hasOwn(attrs, key)) continue;\n            element.setAttribute(key, attrs[key]);\n        }\n    },\n    createIframeTag: function() {\n        const iframeTag = this.util.createElement(\"IFRAME\");\n        this.plugins.video._setIframeAttrs.call(this, iframeTag);\n        return iframeTag;\n    },\n    /**\n     * @Override @Required fileManager\n     */ fileTags: [\n        \"iframe\",\n        \"video\"\n    ],\n    /**\n     * @Override core, resizing, fileManager\n     * @description It is called from core.selectComponent.\n     * @param {Element} element Target element\n     */ select: function(element) {\n        this.plugins.video.onModifyMode.call(this, element, this.plugins.resizing.call_controller_resize.call(this, element, \"video\"));\n    },\n    /**\n     * @Override fileManager, resizing\n     */ destroy: function(element) {\n        const frame = element || this.context.video._element;\n        const container = this.context.video._container;\n        const dataIndex = frame.getAttribute(\"data-index\") * 1;\n        if (typeof this.functions.onVideoDeleteBefore === \"function\" && this.functions.onVideoDeleteBefore(frame, container, dataIndex, this) === false) return;\n        let focusEl = container.previousElementSibling || container.nextElementSibling;\n        const emptyDiv = container.parentNode;\n        this.util.removeItem(container);\n        this.plugins.video.init.call(this);\n        this.controllersOff();\n        if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function(current) {\n            return current.childNodes.length === 0;\n        }, null);\n        // focus\n        this.focusEdge(focusEl);\n        // event\n        this.plugins.fileManager.deleteInfo.call(this, \"video\", dataIndex, this.functions.onVideoUpload);\n        // history stack\n        this.history.push(false);\n    },\n    /**\n     * @Required @Override dialog\n     */ on: function(update) {\n        const contextVideo = this.context.video;\n        if (!update) {\n            contextVideo.inputX.value = contextVideo._origin_w = this.options.videoWidth === contextVideo._defaultSizeX ? \"\" : this.options.videoWidth;\n            contextVideo.inputY.value = contextVideo._origin_h = this.options.videoHeight === contextVideo._defaultSizeY ? \"\" : this.options.videoHeight;\n            contextVideo.proportion.disabled = true;\n            if (contextVideo.videoInputFile && this.options.videoMultipleFile) contextVideo.videoInputFile.setAttribute(\"multiple\", \"multiple\");\n        } else {\n            if (contextVideo.videoInputFile && this.options.videoMultipleFile) contextVideo.videoInputFile.removeAttribute(\"multiple\");\n        }\n        if (contextVideo._resizing) {\n            this.plugins.video.setVideoRatioSelect.call(this, contextVideo._origin_h || contextVideo._defaultRatio);\n        }\n    },\n    /**\n     * @Required @Override dialog\n     */ open: function() {\n        this.plugins.dialog.open.call(this, \"video\", \"video\" === this.currentControllerName);\n    },\n    setVideoRatio: function(e) {\n        const contextVideo = this.context.video;\n        const value = e.target.options[e.target.selectedIndex].value;\n        contextVideo._defaultSizeY = contextVideo._videoRatio = !value ? contextVideo._defaultSizeY : value * 100 + \"%\";\n        contextVideo.inputY.placeholder = !value ? \"\" : value * 100 + \"%\";\n        contextVideo.inputY.value = \"\";\n    },\n    /**\n     * @Override resizing\n     * @param {String} xy 'x': width, 'y': height\n     * @param {KeyboardEvent} e Event object\n     */ setInputSize: function(xy, e) {\n        if (e && e.keyCode === 32) {\n            e.preventDefault();\n            return;\n        }\n        const contextVideo = this.context.video;\n        this.plugins.resizing._module_setInputSize.call(this, contextVideo, xy);\n        if (xy === \"y\") {\n            this.plugins.video.setVideoRatioSelect.call(this, e.target.value || contextVideo._defaultRatio);\n        }\n    },\n    /**\n     * @Override resizing\n     */ setRatio: function() {\n        this.plugins.resizing._module_setRatio.call(this, this.context.video);\n    },\n    submit: function(e) {\n        const contextVideo = this.context.video;\n        const videoPlugin = this.plugins.video;\n        e.preventDefault();\n        e.stopPropagation();\n        contextVideo._align = contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"]:checked').value;\n        try {\n            if (contextVideo.videoInputFile && contextVideo.videoInputFile.files.length > 0) {\n                this.showLoading();\n                videoPlugin.submitAction.call(this, this.context.video.videoInputFile.files);\n            } else if (contextVideo.videoUrlFile && contextVideo._linkValue.length > 0) {\n                this.showLoading();\n                videoPlugin.setup_url.call(this, contextVideo._linkValue);\n            }\n        } catch (error) {\n            this.closeLoading();\n            throw Error('[SUNEDITOR.video.submit.fail] cause : \"' + error.message + '\"');\n        } finally{\n            this.plugins.dialog.close.call(this);\n        }\n        return false;\n    },\n    submitAction: function(fileList) {\n        if (fileList.length === 0) return;\n        let fileSize = 0;\n        let files = [];\n        for(let i = 0, len = fileList.length; i < len; i++){\n            if (/video/i.test(fileList[i].type)) {\n                files.push(fileList[i]);\n                fileSize += fileList[i].size;\n            }\n        }\n        const limitSize = this.options.videoUploadSizeLimit;\n        if (limitSize > 0) {\n            let infoSize = 0;\n            const videosInfo = this.context.video._infoList;\n            for(let i = 0, len = videosInfo.length; i < len; i++){\n                infoSize += videosInfo[i].size * 1;\n            }\n            if (fileSize + infoSize > limitSize) {\n                this.closeLoading();\n                const err = \"[SUNEDITOR.videoUpload.fail] Size of uploadable total videos: \" + limitSize / 1000 + \"KB\";\n                if (typeof this.functions.onVideoUploadError !== \"function\" || this.functions.onVideoUploadError(err, {\n                    \"limitSize\": limitSize,\n                    \"currentSize\": infoSize,\n                    \"uploadSize\": fileSize\n                }, this)) {\n                    this.functions.noticeOpen(err);\n                }\n                return;\n            }\n        }\n        const contextVideo = this.context.video;\n        contextVideo._uploadFileLength = files.length;\n        const info = {\n            inputWidth: contextVideo.inputX.value,\n            inputHeight: contextVideo.inputY.value,\n            align: contextVideo._align,\n            isUpdate: this.context.dialog.updateModal,\n            element: contextVideo._element\n        };\n        if (typeof this.functions.onVideoUploadBefore === \"function\") {\n            const result = this.functions.onVideoUploadBefore(files, info, this, (function(data) {\n                if (data && this._w.Array.isArray(data.result)) {\n                    this.plugins.video.register.call(this, info, data);\n                } else {\n                    this.plugins.video.upload.call(this, info, data);\n                }\n            }).bind(this));\n            if (typeof result === \"undefined\") return;\n            if (!result) {\n                this.closeLoading();\n                return;\n            }\n            if (typeof result === \"object\" && result.length > 0) files = result;\n        }\n        this.plugins.video.upload.call(this, info, files);\n    },\n    error: function(message, response) {\n        this.closeLoading();\n        if (typeof this.functions.onVideoUploadError !== \"function\" || this.functions.onVideoUploadError(message, response, this)) {\n            this.functions.noticeOpen(message);\n            throw Error(\"[SUNEDITOR.plugin.video.error] response: \" + message);\n        }\n    },\n    upload: function(info, files) {\n        if (!files) {\n            this.closeLoading();\n            return;\n        }\n        if (typeof files === \"string\") {\n            this.plugins.video.error.call(this, files, null);\n            return;\n        }\n        const videoUploadUrl = this.options.videoUploadUrl;\n        const filesLen = this.context.dialog.updateModal ? 1 : files.length;\n        // server upload\n        if (typeof videoUploadUrl === \"string\" && videoUploadUrl.length > 0) {\n            const formData = new FormData();\n            for(let i = 0; i < filesLen; i++){\n                formData.append(\"file-\" + i, files[i]);\n            }\n            this.plugins.fileManager.upload.call(this, videoUploadUrl, this.options.videoUploadHeader, formData, this.plugins.video.callBack_videoUpload.bind(this, info), this.functions.onVideoUploadError);\n        } else {\n            throw Error('[SUNEDITOR.videoUpload.fail] cause : There is no \"videoUploadUrl\" option.');\n        }\n    },\n    callBack_videoUpload: function(info, xmlHttp) {\n        if (typeof this.functions.videoUploadHandler === \"function\") {\n            this.functions.videoUploadHandler(xmlHttp, info, this);\n        } else {\n            const response = JSON.parse(xmlHttp.responseText);\n            if (response.errorMessage) {\n                this.plugins.video.error.call(this, response.errorMessage, response);\n            } else {\n                this.plugins.video.register.call(this, info, response);\n            }\n        }\n    },\n    register: function(info, response) {\n        const fileList = response.result;\n        const videoTag = this.plugins.video.createVideoTag.call(this);\n        for(let i = 0, len = fileList.length, file; i < len; i++){\n            file = {\n                name: fileList[i].name,\n                size: fileList[i].size\n            };\n            this.plugins.video.create_video.call(this, info.isUpdate ? info.element : videoTag.cloneNode(false), fileList[i].url, info.inputWidth, info.inputHeight, info.align, file, info.isUpdate);\n        }\n        this.closeLoading();\n    },\n    setup_url: function(url) {\n        try {\n            const contextVideo = this.context.video;\n            if (!url) url = contextVideo._linkValue;\n            if (!url) return false;\n            /** iframe source */ if (/^<iframe.*\\/iframe>$/.test(url)) {\n                const oIframe = new this._w.DOMParser().parseFromString(url, \"text/html\").querySelector(\"iframe\");\n                url = oIframe.src;\n                if (url.length === 0) return false;\n            }\n            /** youtube */ if (/youtu\\.?be/.test(url)) {\n                if (!/^http/.test(url)) url = \"https://\" + url;\n                url = url.replace(\"watch?v=\", \"\");\n                if (!/^\\/\\/.+\\/embed\\//.test(url)) {\n                    url = url.replace(url.match(/\\/\\/.+\\//)[0], \"//www.youtube.com/embed/\").replace(\"&\", \"?&\");\n                }\n                if (contextVideo._youtubeQuery.length > 0) {\n                    if (/\\?/.test(url)) {\n                        const splitUrl = url.split(\"?\");\n                        url = splitUrl[0] + \"?\" + contextVideo._youtubeQuery + \"&\" + splitUrl[1];\n                    } else {\n                        url += \"?\" + contextVideo._youtubeQuery;\n                    }\n                }\n            } else if (/vimeo\\.com/.test(url)) {\n                if (url.endsWith(\"/\")) {\n                    url = url.slice(0, -1);\n                }\n                url = \"https://player.vimeo.com/video/\" + url.slice(url.lastIndexOf(\"/\") + 1);\n                if (contextVideo._vimeoQuery.length > 0) {\n                    if (/\\?/.test(url)) {\n                        const splitUrl = url.split(\"?\");\n                        url = splitUrl[0] + \"?\" + contextVideo._vimeoQuery + \"&\" + splitUrl[1];\n                    } else {\n                        url += \"?\" + contextVideo._vimeoQuery;\n                    }\n                }\n            }\n            this.plugins.video.create_video.call(this, this.plugins.video[!/embed|iframe|player|\\/e\\/|\\.php|\\.html?/.test(url) && !/vimeo\\.com/.test(url) ? \"createVideoTag\" : \"createIframeTag\"].call(this), url, contextVideo.inputX.value, contextVideo.inputY.value, contextVideo._align, null, this.context.dialog.updateModal);\n        } catch (error) {\n            throw Error('[SUNEDITOR.video.upload.fail] cause : \"' + error.message + '\"');\n        } finally{\n            this.closeLoading();\n        }\n    },\n    create_video: function(oFrame, src, width, height, align, file, isUpdate) {\n        this.context.resizing._resize_plugin = \"video\";\n        const contextVideo = this.context.video;\n        let cover = null;\n        let container = null;\n        let init = false;\n        /** update */ if (isUpdate) {\n            oFrame = contextVideo._element;\n            if (oFrame.src !== src) {\n                init = true;\n                const isYoutube = /youtu\\.?be/.test(src);\n                const isVimeo = /vimeo\\.com/.test(src);\n                if ((isYoutube || isVimeo) && !/^iframe$/i.test(oFrame.nodeName)) {\n                    const newTag = this.plugins.video.createIframeTag.call(this);\n                    newTag.src = src;\n                    oFrame.parentNode.replaceChild(newTag, oFrame);\n                    contextVideo._element = oFrame = newTag;\n                } else if (!isYoutube && !isVimeo && !/^video$/i.test(oFrame.nodeName)) {\n                    const newTag = this.plugins.video.createVideoTag.call(this);\n                    newTag.src = src;\n                    oFrame.parentNode.replaceChild(newTag, oFrame);\n                    contextVideo._element = oFrame = newTag;\n                } else {\n                    oFrame.src = src;\n                }\n            }\n            container = contextVideo._container;\n            cover = this.util.getParentElement(oFrame, \"FIGURE\");\n        } else {\n            init = true;\n            oFrame.src = src;\n            contextVideo._element = oFrame;\n            cover = this.plugins.component.set_cover.call(this, oFrame);\n            container = this.plugins.component.set_container.call(this, cover, \"se-video-container\");\n        }\n        /** rendering */ contextVideo._cover = cover;\n        contextVideo._container = container;\n        const inputUpdate = this.plugins.resizing._module_getSizeX.call(this, contextVideo) !== (width || contextVideo._defaultSizeX) || this.plugins.resizing._module_getSizeY.call(this, contextVideo) !== (height || contextVideo._videoRatio);\n        const changeSize = !isUpdate || inputUpdate;\n        if (contextVideo._resizing) {\n            this.context.video._proportionChecked = contextVideo.proportion.checked;\n            oFrame.setAttribute(\"data-proportion\", contextVideo._proportionChecked);\n        }\n        // size\n        let isPercent = false;\n        if (changeSize) {\n            isPercent = this.plugins.video.applySize.call(this);\n        }\n        // align\n        if (!(isPercent && align === \"center\")) {\n            this.plugins.video.setAlign.call(this, null, oFrame, cover, container);\n        }\n        let changed = true;\n        if (!isUpdate) {\n            changed = this.insertComponent(container, false, true, !this.options.mediaAutoSelect);\n            if (!this.options.mediaAutoSelect) {\n                const line = this.appendFormatTag(container, null);\n                if (line) this.setRange(line, 0, line, 0);\n            }\n        } else if (contextVideo._resizing && this.context.resizing._rotateVertical && changeSize) {\n            this.plugins.resizing.setTransformSize.call(this, oFrame, null, null);\n        }\n        if (changed) {\n            if (init) {\n                this.plugins.fileManager.setInfo.call(this, \"video\", oFrame, this.functions.onVideoUpload, file, true);\n            }\n            if (isUpdate) {\n                this.selectComponent(oFrame, \"video\");\n                // history stack\n                this.history.push(false);\n            }\n        }\n        this.context.resizing._resize_plugin = \"\";\n    },\n    _update_videoCover: function(oFrame) {\n        if (!oFrame) return;\n        const contextVideo = this.context.video;\n        if (/^video$/i.test(oFrame.nodeName)) this.plugins.video._setTagAttrs.call(this, oFrame);\n        else this.plugins.video._setIframeAttrs.call(this, oFrame);\n        let existElement = this.util.isRangeFormatElement(oFrame.parentNode) || this.util.isWysiwygDiv(oFrame.parentNode) ? oFrame : this.util.getFormatElement(oFrame) || oFrame;\n        const prevFrame = oFrame;\n        contextVideo._element = oFrame = oFrame.cloneNode(true);\n        const cover = contextVideo._cover = this.plugins.component.set_cover.call(this, oFrame);\n        const container = contextVideo._container = this.plugins.component.set_container.call(this, cover, \"se-video-container\");\n        try {\n            const figcaption = existElement.querySelector(\"figcaption\");\n            let caption = null;\n            if (!!figcaption) {\n                caption = this.util.createElement(\"DIV\");\n                caption.innerHTML = figcaption.innerHTML;\n                this.util.removeItem(figcaption);\n            }\n            // size\n            const size = (oFrame.getAttribute(\"data-size\") || oFrame.getAttribute(\"data-origin\") || \"\").split(\",\");\n            this.plugins.video.applySize.call(this, size[0] || prevFrame.style.width || prevFrame.width || \"\", size[1] || prevFrame.style.height || prevFrame.height || \"\");\n            // align\n            const format = this.util.getFormatElement(prevFrame);\n            if (format) contextVideo._align = format.style.textAlign || format.style.float;\n            this.plugins.video.setAlign.call(this, null, oFrame, cover, container);\n            if (this.util.getParentElement(prevFrame, this.util.isNotCheckingNode)) {\n                prevFrame.parentNode.replaceChild(container, prevFrame);\n            } else if (this.util.isListCell(existElement)) {\n                const refer = this.util.getParentElement(prevFrame, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement.insertBefore(container, refer);\n                this.util.removeItem(prevFrame);\n                this.util.removeEmptyNode(refer, null, true);\n            } else if (this.util.isFormatElement(existElement)) {\n                const refer = this.util.getParentElement(prevFrame, function(current) {\n                    return current.parentNode === existElement;\n                });\n                existElement = this.util.splitElement(existElement, refer);\n                existElement.parentNode.insertBefore(container, existElement);\n                this.util.removeItem(prevFrame);\n                this.util.removeEmptyNode(existElement, null, true);\n                if (existElement.children.length === 0) existElement.innerHTML = this.util.htmlRemoveWhiteSpace(existElement.innerHTML);\n            } else {\n                existElement.parentNode.replaceChild(container, existElement);\n            }\n            if (!!caption) existElement.parentNode.insertBefore(caption, container.nextElementSibling);\n        } catch (error) {\n            console.warn(\"[SUNEDITOR.video.error] Maybe the video tag is nested.\", error);\n        }\n        this.plugins.fileManager.setInfo.call(this, \"video\", oFrame, this.functions.onVideoUpload, null, true);\n        this.plugins.video.init.call(this);\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ onModifyMode: function(element, size) {\n        const contextVideo = this.context.video;\n        contextVideo._element = element;\n        contextVideo._cover = this.util.getParentElement(element, \"FIGURE\");\n        contextVideo._container = this.util.getParentElement(element, this.util.isMediaComponent);\n        contextVideo._align = element.style.float || element.getAttribute(\"data-align\") || \"none\";\n        element.style.float = \"\";\n        if (size) {\n            contextVideo._element_w = size.w;\n            contextVideo._element_h = size.h;\n            contextVideo._element_t = size.t;\n            contextVideo._element_l = size.l;\n        }\n        let origin = contextVideo._element.getAttribute(\"data-size\") || contextVideo._element.getAttribute(\"data-origin\");\n        let w, h;\n        if (origin) {\n            origin = origin.split(\",\");\n            w = origin[0];\n            h = origin[1];\n        } else if (size) {\n            w = size.w;\n            h = size.h;\n        }\n        contextVideo._origin_w = w || element.style.width || element.width || \"\";\n        contextVideo._origin_h = h || element.style.height || element.height || \"\";\n    },\n    /**\n     * @Required @Override fileManager, resizing\n     */ openModify: function(notOpen) {\n        const contextVideo = this.context.video;\n        if (contextVideo.videoUrlFile) contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = contextVideo._element.src || (contextVideo._element.querySelector(\"source\") || \"\").src || \"\";\n        (contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"' + contextVideo._align + '\"]') || contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"none\"]')).checked = true;\n        if (contextVideo._resizing) {\n            this.plugins.resizing._module_setModifyInputSize.call(this, contextVideo, this.plugins.video);\n            const y = contextVideo._videoRatio = this.plugins.resizing._module_getSizeY.call(this, contextVideo);\n            const ratioSelected = this.plugins.video.setVideoRatioSelect.call(this, y);\n            if (!ratioSelected) contextVideo.inputY.value = contextVideo._onlyPercentage ? this.util.getNumber(y, 2) : y;\n        }\n        if (!notOpen) this.plugins.dialog.open.call(this, \"video\", true);\n    },\n    setVideoRatioSelect: function(value) {\n        let ratioSelected = false;\n        const contextVideo = this.context.video;\n        const ratioOptions = contextVideo.videoRatioOption.options;\n        if (/%$/.test(value) || contextVideo._onlyPercentage) value = this.util.getNumber(value, 2) / 100 + \"\";\n        else if (!this.util.isNumber(value) || value * 1 >= 1) value = \"\";\n        contextVideo.inputY.placeholder = \"\";\n        for(let i = 0, len = ratioOptions.length; i < len; i++){\n            if (ratioOptions[i].value === value) {\n                ratioSelected = ratioOptions[i].selected = true;\n                contextVideo.inputY.placeholder = !value ? \"\" : value * 100 + \"%\";\n            } else ratioOptions[i].selected = false;\n        }\n        return ratioSelected;\n    },\n    /**\n     * @Override fileManager\n     */ checkFileInfo: function() {\n        this.plugins.fileManager.checkInfo.call(this, \"video\", [\n            \"iframe\",\n            \"video\"\n        ], this.functions.onVideoUpload, this.plugins.video._update_videoCover.bind(this), true);\n    },\n    /**\n     * @Override fileManager\n     */ resetFileInfo: function() {\n        this.plugins.fileManager.resetInfo.call(this, \"video\", this.functions.onVideoUpload);\n    },\n    /**\n     * @Override fileManager\n     */ applySize: function(w, h) {\n        const contextVideo = this.context.video;\n        if (!w) w = contextVideo.inputX.value || this.options.videoWidth;\n        if (!h) h = contextVideo.inputY.value || this.options.videoHeight;\n        if (contextVideo._onlyPercentage || /%$/.test(w) || !w) {\n            this.plugins.video.setPercentSize.call(this, w || \"100%\", h || (/%$/.test(contextVideo._videoRatio) ? contextVideo._videoRatio : contextVideo._defaultRatio));\n            return true;\n        } else if ((!w || w === \"auto\") && (!h || h === \"auto\")) {\n            this.plugins.video.setAutoSize.call(this);\n        } else {\n            this.plugins.video.setSize.call(this, w, h || contextVideo._videoRatio || contextVideo._defaultRatio, false);\n        }\n        return false;\n    },\n    /**\n     * @Override resizing\n     */ sizeRevert: function() {\n        this.plugins.resizing._module_sizeRevert.call(this, this.context.video);\n    },\n    /**\n     * @Override resizing\n     */ setSize: function(w, h, notResetPercentage, direction) {\n        const contextVideo = this.context.video;\n        const onlyW = /^(rw|lw)$/.test(direction);\n        const onlyH = /^(th|bh)$/.test(direction);\n        if (!onlyH) w = this.util.getNumber(w, 0);\n        if (!onlyW) h = this.util.isNumber(h) ? h + contextVideo.sizeUnit : !h ? \"\" : h;\n        w = w ? w + contextVideo.sizeUnit : \"\";\n        if (!onlyH) contextVideo._element.style.width = w;\n        if (!onlyW) contextVideo._cover.style.paddingBottom = contextVideo._cover.style.height = h;\n        if (!onlyH && !/%$/.test(w)) {\n            contextVideo._cover.style.width = w;\n            contextVideo._container.style.width = \"\";\n        }\n        if (!onlyW && !/%$/.test(h)) {\n            contextVideo._element.style.height = h;\n        } else {\n            contextVideo._element.style.height = \"\";\n        }\n        if (!notResetPercentage) contextVideo._element.removeAttribute(\"data-percentage\");\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n    },\n    /**\n     * @Override resizing\n     */ setAutoSize: function() {\n        this.plugins.video.setPercentSize.call(this, 100, this.context.video._defaultRatio);\n    },\n    /**\n     * @Override resizing\n     */ setOriginSize: function(dataSize) {\n        const contextVideo = this.context.video;\n        contextVideo._element.removeAttribute(\"data-percentage\");\n        this.plugins.resizing.resetTransform.call(this, contextVideo._element);\n        this.plugins.video.cancelPercentAttr.call(this);\n        const originSize = ((dataSize ? contextVideo._element.getAttribute(\"data-size\") : \"\") || contextVideo._element.getAttribute(\"data-origin\") || \"\").split(\",\");\n        if (originSize) {\n            const w = originSize[0];\n            const h = originSize[1];\n            if (contextVideo._onlyPercentage || /%$/.test(w) && (/%$/.test(h) || !/\\d/.test(h))) {\n                this.plugins.video.setPercentSize.call(this, w, h);\n            } else {\n                this.plugins.video.setSize.call(this, w, h);\n            }\n            // save current size\n            this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n        }\n    },\n    /**\n     * @Override resizing\n     */ setPercentSize: function(w, h) {\n        const contextVideo = this.context.video;\n        h = !!h && !/%$/.test(h) && !this.util.getNumber(h, 0) ? this.util.isNumber(h) ? h + \"%\" : h : this.util.isNumber(h) ? h + contextVideo.sizeUnit : h || contextVideo._defaultRatio;\n        contextVideo._container.style.width = this.util.isNumber(w) ? w + \"%\" : w;\n        contextVideo._container.style.height = \"\";\n        contextVideo._cover.style.width = \"100%\";\n        contextVideo._cover.style.height = h;\n        contextVideo._cover.style.paddingBottom = h;\n        contextVideo._element.style.width = \"100%\";\n        contextVideo._element.style.height = \"100%\";\n        contextVideo._element.style.maxWidth = \"\";\n        if (contextVideo._align === \"center\") this.plugins.video.setAlign.call(this, null, null, null, null);\n        contextVideo._element.setAttribute(\"data-percentage\", w + \",\" + h);\n        // save current size\n        this.plugins.resizing._module_saveCurrentSize.call(this, contextVideo);\n    },\n    /**\n     * @Override resizing\n     */ cancelPercentAttr: function() {\n        const contextVideo = this.context.video;\n        contextVideo._cover.style.width = \"\";\n        contextVideo._cover.style.height = \"\";\n        contextVideo._cover.style.paddingBottom = \"\";\n        contextVideo._container.style.width = \"\";\n        contextVideo._container.style.height = \"\";\n        this.util.removeClass(contextVideo._container, this.context.video._floatClassRegExp);\n        this.util.addClass(contextVideo._container, \"__se__float-\" + contextVideo._align);\n        if (contextVideo._align === \"center\") this.plugins.video.setAlign.call(this, null, null, null, null);\n    },\n    /**\n     * @Override resizing\n     */ setAlign: function(align, element, cover, container) {\n        const contextVideo = this.context.video;\n        if (!align) align = contextVideo._align;\n        if (!element) element = contextVideo._element;\n        if (!cover) cover = contextVideo._cover;\n        if (!container) container = contextVideo._container;\n        if (/%$/.test(element.style.width) && align === \"center\") {\n            container.style.minWidth = \"100%\";\n            cover.style.width = container.style.width;\n            cover.style.height = cover.style.height;\n            cover.style.paddingBottom = !/%$/.test(cover.style.height) ? cover.style.height : this.util.getNumber(this.util.getNumber(cover.style.height, 2) / 100 * this.util.getNumber(cover.style.width, 2), 2) + \"%\";\n        } else {\n            container.style.minWidth = \"\";\n            cover.style.width = this.context.resizing._rotateVertical ? element.style.height || element.offsetHeight : element.style.width || \"100%\";\n            cover.style.paddingBottom = cover.style.height;\n        }\n        if (!this.util.hasClass(container, \"__se__float-\" + align)) {\n            this.util.removeClass(container, contextVideo._floatClassRegExp);\n            this.util.addClass(container, \"__se__float-\" + align);\n        }\n        element.setAttribute(\"data-align\", align);\n    },\n    /**\n     * @Override dialog\n     */ init: function() {\n        const contextVideo = this.context.video;\n        if (contextVideo.videoInputFile) contextVideo.videoInputFile.value = \"\";\n        if (contextVideo.videoUrlFile) contextVideo._linkValue = contextVideo.preview.textContent = contextVideo.videoUrlFile.value = \"\";\n        if (contextVideo.videoInputFile && contextVideo.videoUrlFile) {\n            contextVideo.videoUrlFile.removeAttribute(\"disabled\");\n            contextVideo.preview.style.textDecoration = \"\";\n        }\n        contextVideo._origin_w = this.options.videoWidth;\n        contextVideo._origin_h = this.options.videoHeight;\n        contextVideo.modal.querySelector('input[name=\"suneditor_video_radio\"][value=\"none\"]').checked = true;\n        if (contextVideo._resizing) {\n            contextVideo.inputX.value = this.options.videoWidth === contextVideo._defaultSizeX ? \"\" : this.options.videoWidth;\n            contextVideo.inputY.value = this.options.videoHeight === contextVideo._defaultSizeY ? \"\" : this.options.videoHeight;\n            contextVideo.proportion.checked = true;\n            contextVideo.proportion.disabled = true;\n            this.plugins.video.setVideoRatioSelect.call(this, contextVideo._defaultRatio);\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/video.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_anchor.js":
/*!***************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_anchor.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _selectMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_selectMenu */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_selectMenu.js\");\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"anchor\",\n    add: function(core) {\n        core.addModule([\n            _selectMenu__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n        ]);\n        core.context.anchor = {\n            caller: {},\n            forms: this.setDialogForm(core),\n            host: (core._w.location.origin + core._w.location.pathname).replace(/\\/$/, \"\"),\n            callerContext: null\n        };\n    },\n    /** dialog */ setDialogForm: function(core) {\n        const lang = core.lang;\n        const relList = core.options.linkRel;\n        const defaultRel = (core.options.linkRelDefault.default || \"\").split(\" \");\n        const icons = core.icons;\n        const forms = core.util.createElement(\"DIV\");\n        let html = '<div class=\"se-dialog-body\">' + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.linkBox.url + \"</label>\" + '<div class=\"se-dialog-form-files\">' + '<input class=\"se-input-form se-input-url\" type=\"text\" placeholder=\"' + (core.options.protocol || \"\") + '\" />' + '<button type=\"button\" class=\"se-btn se-dialog-files-edge-button _se_bookmark_button\" title=\"' + lang.dialogBox.linkBox.bookmark + '\" aria-label=\"' + lang.dialogBox.linkBox.bookmark + '\">' + icons.bookmark + \"</button>\" + core.plugins.selectMenu.setForm() + \"</div>\" + '<div class=\"se-anchor-preview-form\">' + '<span class=\"se-svg se-anchor-preview-icon _se_anchor_bookmark_icon\">' + icons.bookmark + \"</span>\" + '<span class=\"se-svg se-anchor-preview-icon _se_anchor_download_icon\">' + icons.download + \"</span>\" + '<pre class=\"se-link-preview\"></pre>' + \"</div>\" + \"</div>\" + '<div class=\"se-dialog-form\">' + \"<label>\" + lang.dialogBox.linkBox.text + '</label><input class=\"se-input-form _se_anchor_text\" type=\"text\" />' + \"</div>\" + '<div class=\"se-dialog-form-footer\">' + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_anchor_check\" />&nbsp;' + lang.dialogBox.linkBox.newWindowCheck + \"</label>\" + '<label><input type=\"checkbox\" class=\"se-dialog-btn-check _se_anchor_download\" />&nbsp;' + lang.dialogBox.linkBox.downloadLinkCheck + \"</label>\";\n        if (relList.length > 0) {\n            html += '<div class=\"se-anchor-rel\"><button type=\"button\" class=\"se-btn se-btn-select se-anchor-rel-btn\">&lt;rel&gt;</button>' + '<div class=\"se-anchor-rel-wrapper\"><pre class=\"se-link-preview se-anchor-rel-preview\"></pre></div>' + '<div class=\"se-list-layer\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic se-list-checked\">';\n            for(let i = 0, len = relList.length, rel; i < len; i++){\n                rel = relList[i];\n                html += '<li><button type=\"button\" class=\"se-btn-list' + (defaultRel.indexOf(rel) > -1 ? \" se-checked\" : \"\") + '\" data-command=\"' + rel + '\" title=\"' + rel + '\" aria-label=\"' + rel + '\"><span class=\"se-svg\">' + icons.checked + \"</span>\" + rel + \"</button></li>\";\n            }\n            html += \"</ul></div></div></div>\";\n        }\n        html += \"</div></div>\";\n        forms.innerHTML = html;\n        return forms;\n    },\n    initEvent: function(pluginName, forms) {\n        const anchorPlugin = this.plugins.anchor;\n        const context = this.context.anchor.caller[pluginName] = {\n            modal: forms,\n            urlInput: null,\n            linkDefaultRel: this.options.linkRelDefault,\n            defaultRel: this.options.linkRelDefault.default || \"\",\n            currentRel: [],\n            linkAnchor: null,\n            linkValue: \"\",\n            _change: false,\n            callerName: pluginName\n        };\n        if (typeof context.linkDefaultRel.default === \"string\") context.linkDefaultRel.default = context.linkDefaultRel.default.trim();\n        if (typeof context.linkDefaultRel.check_new_window === \"string\") context.linkDefaultRel.check_new_window = context.linkDefaultRel.check_new_window.trim();\n        if (typeof context.linkDefaultRel.check_bookmark === \"string\") context.linkDefaultRel.check_bookmark = context.linkDefaultRel.check_bookmark.trim();\n        context.urlInput = forms.querySelector(\".se-input-url\");\n        context.anchorText = forms.querySelector(\"._se_anchor_text\");\n        context.newWindowCheck = forms.querySelector(\"._se_anchor_check\");\n        context.downloadCheck = forms.querySelector(\"._se_anchor_download\");\n        context.download = forms.querySelector(\"._se_anchor_download_icon\");\n        context.preview = forms.querySelector(\".se-link-preview\");\n        context.bookmark = forms.querySelector(\"._se_anchor_bookmark_icon\");\n        context.bookmarkButton = forms.querySelector(\"._se_bookmark_button\");\n        this.plugins.selectMenu.initEvent.call(this, pluginName, forms);\n        const listContext = this.context.selectMenu.caller[pluginName];\n        /** rel */ if (this.options.linkRel.length > 0) {\n            context.relButton = forms.querySelector(\".se-anchor-rel-btn\");\n            context.relList = forms.querySelector(\".se-list-layer\");\n            context.relPreview = forms.querySelector(\".se-anchor-rel-preview\");\n            context.relButton.addEventListener(\"click\", anchorPlugin.onClick_relButton.bind(this, context));\n            context.relList.addEventListener(\"click\", anchorPlugin.onClick_relList.bind(this, context));\n        }\n        context.newWindowCheck.addEventListener(\"change\", anchorPlugin.onChange_newWindowCheck.bind(this, context));\n        context.downloadCheck.addEventListener(\"change\", anchorPlugin.onChange_downloadCheck.bind(this, context));\n        context.anchorText.addEventListener(\"input\", anchorPlugin.onChangeAnchorText.bind(this, context));\n        context.urlInput.addEventListener(\"input\", anchorPlugin.onChangeUrlInput.bind(this, context));\n        context.urlInput.addEventListener(\"keydown\", anchorPlugin.onKeyDownUrlInput.bind(this, listContext));\n        context.urlInput.addEventListener(\"focus\", anchorPlugin.onFocusUrlInput.bind(this, context, listContext));\n        context.urlInput.addEventListener(\"blur\", anchorPlugin.onBlurUrlInput.bind(this, listContext));\n        context.bookmarkButton.addEventListener(\"click\", anchorPlugin.onClick_bookmarkButton.bind(this, context));\n    },\n    on: function(contextAnchor, update) {\n        const anchorPlugin = this.plugins.anchor;\n        if (!update) {\n            anchorPlugin.init.call(this, contextAnchor);\n            contextAnchor.anchorText.value = this.getSelection().toString().trim();\n            contextAnchor.newWindowCheck.checked = this.options.linkTargetNewWindow;\n        } else if (contextAnchor.linkAnchor) {\n            this.context.dialog.updateModal = true;\n            const href = contextAnchor.linkAnchor.getAttribute(\"href\");\n            contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = anchorPlugin.selfPathBookmark.call(this, href) ? href.substr(href.lastIndexOf(\"#\")) : href;\n            contextAnchor.anchorText.value = contextAnchor.linkAnchor.textContent;\n            contextAnchor.newWindowCheck.checked = /_blank/i.test(contextAnchor.linkAnchor.target) ? true : false;\n            contextAnchor.downloadCheck.checked = contextAnchor.linkAnchor.download;\n        }\n        this.context.anchor.callerContext = contextAnchor;\n        anchorPlugin.setRel.call(this, contextAnchor, update && contextAnchor.linkAnchor ? contextAnchor.linkAnchor.rel : contextAnchor.defaultRel);\n        anchorPlugin.setLinkPreview.call(this, contextAnchor, contextAnchor.linkValue);\n        this.plugins.selectMenu.on.call(this, contextAnchor.callerName, this.plugins.anchor.setHeaderBookmark);\n    },\n    selfPathBookmark: function(path) {\n        const href = this._w.location.href.replace(/\\/$/, \"\");\n        return path.indexOf(\"#\") === 0 || path.indexOf(href) === 0 && path.indexOf(\"#\") === (href.indexOf(\"#\") === -1 ? href.length : href.substr(0, href.indexOf(\"#\")).length);\n    },\n    _closeRelMenu: null,\n    toggleRelList: function(contextAnchor, show) {\n        if (!show) {\n            if (this.plugins.anchor._closeRelMenu) this.plugins.anchor._closeRelMenu();\n        } else {\n            const target = contextAnchor.relButton;\n            const relList = contextAnchor.relList;\n            this.util.addClass(target, \"active\");\n            relList.style.visibility = \"hidden\";\n            relList.style.display = \"block\";\n            if (!this.options.rtl) relList.style.left = target.offsetLeft + target.offsetWidth + 1 + \"px\";\n            else relList.style.left = target.offsetLeft - relList.offsetWidth - 1 + \"px\";\n            relList.style.top = target.offsetTop + target.offsetHeight / 2 - relList.offsetHeight / 2 + \"px\";\n            relList.style.visibility = \"\";\n            this.plugins.anchor._closeRelMenu = (function(context, target, e) {\n                if (e && (context.relButton.contains(e.target) || context.relList.contains(e.target))) return;\n                this.util.removeClass(target, \"active\");\n                context.relList.style.display = \"none\";\n                this.modalForm.removeEventListener(\"click\", this.plugins.anchor._closeRelMenu);\n                this.plugins.anchor._closeRelMenu = null;\n            }).bind(this, contextAnchor, target);\n            this.modalForm.addEventListener(\"click\", this.plugins.anchor._closeRelMenu);\n        }\n    },\n    onClick_relButton: function(contextAnchor, e) {\n        this.plugins.anchor.toggleRelList.call(this, contextAnchor, !this.util.hasClass(e.target, \"active\"));\n    },\n    onClick_relList: function(contextAnchor, e) {\n        const target = e.target;\n        const cmd = target.getAttribute(\"data-command\");\n        if (!cmd) return;\n        const current = contextAnchor.currentRel;\n        const checked = this.util.toggleClass(target, \"se-checked\");\n        const index = current.indexOf(cmd);\n        if (checked) {\n            if (index === -1) current.push(cmd);\n        } else {\n            if (index > -1) current.splice(index, 1);\n        }\n        contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = current.join(\" \");\n    },\n    setRel: function(contextAnchor, relAttr) {\n        const relListEl = contextAnchor.relList;\n        const rels = contextAnchor.currentRel = !relAttr ? [] : relAttr.split(\" \");\n        if (!relListEl) return;\n        const checkedRel = relListEl.querySelectorAll(\"button\");\n        for(let i = 0, len = checkedRel.length, cmd; i < len; i++){\n            cmd = checkedRel[i].getAttribute(\"data-command\");\n            if (rels.indexOf(cmd) > -1) {\n                this.util.addClass(checkedRel[i], \"se-checked\");\n            } else {\n                this.util.removeClass(checkedRel[i], \"se-checked\");\n            }\n        }\n        contextAnchor.relPreview.title = contextAnchor.relPreview.textContent = rels.join(\" \");\n    },\n    createHeaderList: function(contextAnchor, contextList, urlValue) {\n        const headers = this.util.getListChildren(this.context.element.wysiwyg, function(current) {\n            return /h[1-6]/i.test(current.nodeName);\n        });\n        if (headers.length === 0) return;\n        const valueRegExp = new this._w.RegExp(\"^\" + urlValue.replace(/^#/, \"\"), \"i\");\n        const list = [];\n        let html = \"\";\n        for(let i = 0, len = headers.length, h; i < len; i++){\n            h = headers[i];\n            if (!valueRegExp.test(h.textContent)) continue;\n            list.push(h);\n            html += '<li class=\"se-select-item\" data-index=\"' + i + '\">' + h.textContent + \"</li>\";\n        }\n        if (list.length === 0) {\n            this.plugins.selectMenu.close.call(this, contextList);\n        } else {\n            this.plugins.selectMenu.createList(contextList, list, html);\n            this.plugins.selectMenu.open.call(this, contextList, this.plugins.anchor._setMenuListPosition.bind(this, contextAnchor));\n        }\n    },\n    _setMenuListPosition: function(contextAnchor, list) {\n        list.style.top = contextAnchor.urlInput.offsetHeight + 1 + \"px\";\n    },\n    onKeyDownUrlInput: function(contextList, e) {\n        const keyCode = e.keyCode;\n        switch(keyCode){\n            case 38:\n                e.preventDefault();\n                e.stopPropagation();\n                this.plugins.selectMenu.moveItem.call(this, contextList, -1);\n                break;\n            case 40:\n                e.preventDefault();\n                e.stopPropagation();\n                this.plugins.selectMenu.moveItem.call(this, contextList, 1);\n                break;\n            case 13:\n                if (contextList.index > -1) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.plugins.anchor.setHeaderBookmark.call(this, this.plugins.selectMenu.getItem(contextList, null));\n                }\n                break;\n        }\n    },\n    setHeaderBookmark: function(header) {\n        const contextAnchor = this.context.anchor.callerContext;\n        const id = header.id || \"h_\" + this._w.Math.random().toString().replace(/.+\\./, \"\");\n        header.id = id;\n        contextAnchor.urlInput.value = \"#\" + id;\n        if (!contextAnchor.anchorText.value.trim() || !contextAnchor._change) {\n            contextAnchor.anchorText.value = header.textContent;\n        }\n        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, contextAnchor.urlInput.value);\n        this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n        this.context.anchor.callerContext.urlInput.focus();\n    },\n    onChangeAnchorText: function(contextAnchor, e) {\n        contextAnchor._change = !!e.target.value.trim();\n    },\n    onChangeUrlInput: function(contextAnchor, e) {\n        const value = e.target.value.trim();\n        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, value);\n        if (this.plugins.anchor.selfPathBookmark.call(this, value)) this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, value);\n        else this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n    },\n    onFocusUrlInput: function(contextAnchor, contextLink) {\n        const value = contextAnchor.urlInput.value;\n        if (this.plugins.anchor.selfPathBookmark.call(this, value)) this.plugins.anchor.createHeaderList.call(this, contextAnchor, contextLink, value);\n    },\n    onBlurUrlInput: function(contextList) {\n        this.plugins.selectMenu.close.call(this, contextList);\n    },\n    setLinkPreview: function(context, value) {\n        const preview = context.preview;\n        const protocol = this.options.linkProtocol;\n        const noPrefix = this.options.linkNoPrefix;\n        const reservedProtocol = /^(mailto\\:|tel\\:|sms\\:|https*\\:\\/\\/|#)/.test(value) || value.indexOf(protocol) === 0;\n        const sameProtocol = !protocol ? false : this._w.RegExp(\"^\" + this.util.escapeStringRegexp(value.substr(0, protocol.length))).test(protocol);\n        value = context.linkValue = preview.textContent = !value ? \"\" : noPrefix ? value : protocol && !reservedProtocol && !sameProtocol ? protocol + value : reservedProtocol ? value : /^www\\./.test(value) ? \"http://\" + value : this.context.anchor.host + (/^\\//.test(value) ? \"\" : \"/\") + value;\n        if (this.plugins.anchor.selfPathBookmark.call(this, value)) {\n            context.bookmark.style.display = \"block\";\n            this.util.addClass(context.bookmarkButton, \"active\");\n        } else {\n            context.bookmark.style.display = \"none\";\n            this.util.removeClass(context.bookmarkButton, \"active\");\n        }\n        if (!this.plugins.anchor.selfPathBookmark.call(this, value) && context.downloadCheck.checked) {\n            context.download.style.display = \"block\";\n        } else {\n            context.download.style.display = \"none\";\n        }\n    },\n    setCtx: function(anchor, contextAnchor) {\n        if (!anchor) return;\n        contextAnchor.linkAnchor = anchor;\n        contextAnchor.linkValue = anchor.href;\n        contextAnchor.currentRel = anchor.rel.split(\" \");\n    },\n    updateAnchor: function(anchor, url, displayText, contextAnchor, notText) {\n        // download\n        if (!this.plugins.anchor.selfPathBookmark.call(this, url) && contextAnchor.downloadCheck.checked) {\n            anchor.setAttribute(\"download\", displayText || url);\n        } else {\n            anchor.removeAttribute(\"download\");\n        }\n        // new window\n        if (contextAnchor.newWindowCheck.checked) anchor.target = \"_blank\";\n        else anchor.removeAttribute(\"target\");\n        // rel\n        const rel = contextAnchor.currentRel.join(\" \");\n        if (!rel) anchor.removeAttribute(\"rel\");\n        else anchor.rel = rel;\n        // set url\n        anchor.href = url;\n        if (notText) {\n            if (anchor.children.length === 0) anchor.textContent = \"\";\n        } else {\n            anchor.textContent = displayText;\n        }\n    },\n    createAnchor: function(contextAnchor, notText) {\n        if (contextAnchor.linkValue.length === 0) return null;\n        const url = contextAnchor.linkValue;\n        const anchor = contextAnchor.anchorText;\n        const displayText = anchor.value.length === 0 ? url : anchor.value;\n        const oA = contextAnchor.linkAnchor || this.util.createElement(\"A\");\n        this.plugins.anchor.updateAnchor.call(this, oA, url, displayText, contextAnchor, notText);\n        contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.anchorText.value = \"\";\n        return oA;\n    },\n    onClick_bookmarkButton: function(contextAnchor) {\n        let url = contextAnchor.urlInput.value;\n        if (this.plugins.anchor.selfPathBookmark.call(this, url)) {\n            url = url.substr(1);\n            contextAnchor.bookmark.style.display = \"none\";\n            this.util.removeClass(contextAnchor.bookmarkButton, \"active\");\n            this.plugins.selectMenu.close.call(this, this.context.selectMenu.callerContext);\n        } else {\n            url = \"#\" + url;\n            contextAnchor.bookmark.style.display = \"block\";\n            this.util.addClass(contextAnchor.bookmarkButton, \"active\");\n            contextAnchor.downloadCheck.checked = false;\n            contextAnchor.download.style.display = \"none\";\n            this.plugins.anchor.createHeaderList.call(this, contextAnchor, this.context.selectMenu.callerContext, url);\n        }\n        contextAnchor.urlInput.value = url;\n        this.plugins.anchor.setLinkPreview.call(this, contextAnchor, url);\n        contextAnchor.urlInput.focus();\n    },\n    onChange_newWindowCheck: function(contextAnchor, e) {\n        if (typeof contextAnchor.linkDefaultRel.check_new_window !== \"string\") return;\n        if (e.target.checked) {\n            this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));\n        } else {\n            this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_new_window));\n        }\n    },\n    onChange_downloadCheck: function(contextAnchor, e) {\n        if (e.target.checked) {\n            contextAnchor.download.style.display = \"block\";\n            contextAnchor.bookmark.style.display = \"none\";\n            this.util.removeClass(contextAnchor.bookmarkButton, \"active\");\n            contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = contextAnchor.urlInput.value.replace(/^\\#+/, \"\");\n            if (typeof contextAnchor.linkDefaultRel.check_bookmark === \"string\") {\n                this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relMerge.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));\n            }\n        } else {\n            contextAnchor.download.style.display = \"none\";\n            if (typeof contextAnchor.linkDefaultRel.check_bookmark === \"string\") {\n                this.plugins.anchor.setRel.call(this, contextAnchor, this.plugins.anchor._relDelete.call(this, contextAnchor, contextAnchor.linkDefaultRel.check_bookmark));\n            }\n        }\n    },\n    _relMerge: function(contextAnchor, relAttr) {\n        const current = contextAnchor.currentRel;\n        if (!relAttr) return current.join(\" \");\n        if (/^only\\:/.test(relAttr)) {\n            relAttr = relAttr.replace(/^only\\:/, \"\").trim();\n            contextAnchor.currentRel = relAttr.split(\" \");\n            return relAttr;\n        }\n        const rels = relAttr.split(\" \");\n        for(let i = 0, len = rels.length, index; i < len; i++){\n            index = current.indexOf(rels[i]);\n            if (index === -1) current.push(rels[i]);\n        }\n        return current.join(\" \");\n    },\n    _relDelete: function(contextAnchor, relAttr) {\n        if (!relAttr) return contextAnchor.currentRel.join(\" \");\n        if (/^only\\:/.test(relAttr)) relAttr = relAttr.replace(/^only\\:/, \"\").trim();\n        const rels = contextAnchor.currentRel.join(\" \").replace(this._w.RegExp(relAttr + \"\\\\s*\"), \"\");\n        contextAnchor.currentRel = rels.split(\" \");\n        return rels;\n    },\n    init: function(contextAnchor) {\n        contextAnchor.linkAnchor = null;\n        contextAnchor.linkValue = contextAnchor.preview.textContent = contextAnchor.urlInput.value = \"\";\n        contextAnchor.anchorText.value = \"\";\n        contextAnchor.newWindowCheck.checked = false;\n        contextAnchor.downloadCheck.checked = false;\n        contextAnchor._change = false;\n        this.plugins.anchor.setRel.call(this, contextAnchor, contextAnchor.defaultRel);\n        if (contextAnchor.relList) {\n            this.plugins.anchor.toggleRelList.call(this, contextAnchor, false);\n        }\n        this.context.anchor.callerContext = null;\n        this.plugins.selectMenu.init.call(this, this.context.selectMenu.callerContext);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_anchor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js":
/*!********************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_colorPicker.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2018 JiHong Lee.\r\n * MIT license.\r\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"colorPicker\",\n    /**\r\n     * @description Constructor\r\n     * @param {Object} core Core object \r\n     */ add: function(core) {\n        const context = core.context;\n        context.colorPicker = {\n            colorListHTML: \"\",\n            _colorInput: \"\",\n            _defaultColor: \"#000\",\n            _styleProperty: \"color\",\n            _currentColor: \"\",\n            _colorList: []\n        };\n        /** set submenu */ context.colorPicker.colorListHTML = this.createColorList(core, this._makeColorList);\n    },\n    /**\r\n     * @description Create color list\r\n     * @param {Object} core Core object \r\n     * @param {Function} makeColor this._makeColorList\r\n     * @returns {String} HTML string\r\n     */ createColorList: function(core, makeColor) {\n        const option = core.options;\n        const lang = core.lang;\n        const colorList = !option.colorList || option.colorList.length === 0 ? [\n            \"#ff0000\",\n            \"#ff5e00\",\n            \"#ffe400\",\n            \"#abf200\",\n            \"#00d8ff\",\n            \"#0055ff\",\n            \"#6600ff\",\n            \"#ff00dd\",\n            \"#000000\",\n            \"#ffd8d8\",\n            \"#fae0d4\",\n            \"#faf4c0\",\n            \"#e4f7ba\",\n            \"#d4f4fa\",\n            \"#d9e5ff\",\n            \"#e8d9ff\",\n            \"#ffd9fa\",\n            \"#f1f1f1\",\n            \"#ffa7a7\",\n            \"#ffc19e\",\n            \"#faed7d\",\n            \"#cef279\",\n            \"#b2ebf4\",\n            \"#b2ccff\",\n            \"#d1b2ff\",\n            \"#ffb2f5\",\n            \"#bdbdbd\",\n            \"#f15f5f\",\n            \"#f29661\",\n            \"#e5d85c\",\n            \"#bce55c\",\n            \"#5cd1e5\",\n            \"#6699ff\",\n            \"#a366ff\",\n            \"#f261df\",\n            \"#8c8c8c\",\n            \"#980000\",\n            \"#993800\",\n            \"#998a00\",\n            \"#6b9900\",\n            \"#008299\",\n            \"#003399\",\n            \"#3d0099\",\n            \"#990085\",\n            \"#353535\",\n            \"#670000\",\n            \"#662500\",\n            \"#665c00\",\n            \"#476600\",\n            \"#005766\",\n            \"#002266\",\n            \"#290066\",\n            \"#660058\",\n            \"#222222\"\n        ] : option.colorList;\n        let colorArr = [];\n        let list = '<div class=\"se-list-inner\">';\n        for(let i = 0, len = colorList.length, color; i < len; i++){\n            color = colorList[i];\n            if (!color) continue;\n            if (typeof color === \"string\") {\n                colorArr.push(color);\n                if (i < len - 1) continue;\n            }\n            if (colorArr.length > 0) {\n                list += '<div class=\"se-selector-color\">' + makeColor(colorArr) + \"</div>\";\n                colorArr = [];\n            }\n            if (typeof color === \"object\") {\n                list += '<div class=\"se-selector-color\">' + makeColor(color) + \"</div>\";\n            }\n        }\n        list += \"\" + '<form class=\"se-form-group\">' + '<input type=\"text\" maxlength=\"9\" class=\"_se_color_picker_input se-color-input\"/>' + '<button type=\"submit\" class=\"se-btn-primary _se_color_picker_submit\" title=\"' + lang.dialogBox.submitButton + '\" aria-label=\"' + lang.dialogBox.submitButton + '\">' + core.icons.checked + \"</button>\" + '<button type=\"button\" class=\"se-btn _se_color_picker_remove\" title=\"' + lang.toolbar.removeFormat + '\" aria-label=\"' + lang.toolbar.removeFormat + '\">' + core.icons.erase + \"</button>\" + \"</form>\" + \"</div>\";\n        return list;\n    },\n    /**\r\n     * @description Internal function used by this.createColorList\r\n     * @param {Array} colorList Color list\r\n     * @private\r\n     */ _makeColorList: function(colorList) {\n        let list = \"\";\n        list += '<ul class=\"se-color-pallet\">';\n        for(let i = 0, len = colorList.length, color; i < len; i++){\n            color = colorList[i];\n            if (typeof color === \"string\") {\n                list += \"<li>\" + '<button type=\"button\" data-value=\"' + color + '\" title=\"' + color + '\" aria-label=\"' + color + '\" style=\"background-color:' + color + ';\"></button>' + \"</li>\";\n            }\n        }\n        list += \"</ul>\";\n        return list;\n    },\n    /**\r\n     * @description Displays or resets the currently selected color at color list.\r\n     * @param {Node} node Current Selected node\r\n     * @param {String|null} color Color value\r\n     */ init: function(node, color) {\n        const colorPicker = this.plugins.colorPicker;\n        let fillColor = color ? color : colorPicker.getColorInNode.call(this, node) || this.context.colorPicker._defaultColor;\n        fillColor = colorPicker.isHexColor(fillColor) ? fillColor : colorPicker.rgb2hex(fillColor) || fillColor;\n        const colorList = this.context.colorPicker._colorList;\n        if (colorList) {\n            for(let i = 0, len = colorList.length; i < len; i++){\n                if (fillColor.toLowerCase() === colorList[i].getAttribute(\"data-value\").toLowerCase()) {\n                    this.util.addClass(colorList[i], \"active\");\n                } else {\n                    this.util.removeClass(colorList[i], \"active\");\n                }\n            }\n        }\n        colorPicker.setInputText.call(this, colorPicker.colorName2hex.call(this, fillColor));\n    },\n    /**\r\n     * @description Store color values\r\n     * @param {String} hexColorStr Hax color value\r\n     */ setCurrentColor: function(hexColorStr) {\n        this.context.colorPicker._currentColor = hexColorStr;\n        this.context.colorPicker._colorInput.style.borderColor = hexColorStr;\n    },\n    /**\r\n     * @description Set color at input element\r\n     * @param {String} hexColorStr Hax color value\r\n     */ setInputText: function(hexColorStr) {\n        hexColorStr = /^#/.test(hexColorStr) ? hexColorStr : \"#\" + hexColorStr;\n        this.context.colorPicker._colorInput.value = hexColorStr;\n        this.plugins.colorPicker.setCurrentColor.call(this, hexColorStr);\n    },\n    /**\r\n     * @description Gets color value at color property of node\r\n     * @param {Node} node Selected node \r\n     * @returns {String}\r\n     */ getColorInNode: function(node) {\n        let findColor = \"\";\n        const styleProperty = this.context.colorPicker._styleProperty;\n        while(node && !this.util.isWysiwygDiv(node) && findColor.length === 0){\n            if (node.nodeType === 1 && node.style[styleProperty]) findColor = node.style[styleProperty];\n            node = node.parentNode;\n        }\n        return findColor;\n    },\n    /**\r\n     * @description Function to check hex format color\r\n     * @param {String} str Color value\r\n     */ isHexColor: function(str) {\n        return /^#[0-9a-f]{3}(?:[0-9a-f]{3})?$/i.test(str);\n    },\n    /**\r\n     * @description Function to convert hex format to a rgb color\r\n     * @param {String} rgb RGB color format\r\n     * @returns {String}\r\n     */ rgb2hex: function(rgb) {\n        const rgbMatch = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n        return rgbMatch && rgbMatch.length === 4 ? \"#\" + (\"0\" + parseInt(rgbMatch[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(rgbMatch[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(rgbMatch[3], 10).toString(16)).slice(-2) : \"\";\n    },\n    /**\r\n     * @description Converts color values of other formats to hex color values and returns.\r\n     * @param {String} colorName Color value\r\n     * @returns {String}\r\n     */ colorName2hex: function(colorName) {\n        if (/^#/.test(colorName)) return colorName;\n        var temp = this.util.createElement(\"div\");\n        temp.style.display = \"none\";\n        temp.style.color = colorName;\n        var colors = this._w.getComputedStyle(this._d.body.appendChild(temp)).color.match(/\\d+/g).map(function(a) {\n            return parseInt(a, 10);\n        });\n        this.util.removeItem(temp);\n        return colors.length >= 3 ? \"#\" + ((1 << 24) + (colors[0] << 16) + (colors[1] << 8) + colors[2]).toString(16).substr(1) : false;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_notice.js":
/*!***************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_notice.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"notice\",\n    /**\n     * @description Constructor\n     * @param {Object} core Core object \n     */ add: function(core) {\n        const context = core.context;\n        context.notice = {};\n        /** dialog */ let notice_div = core.util.createElement(\"DIV\");\n        let notice_span = core.util.createElement(\"SPAN\");\n        let notice_button = core.util.createElement(\"BUTTON\");\n        notice_div.className = \"se-notice\";\n        notice_button.className = \"close\";\n        notice_button.setAttribute(\"aria-label\", \"Close\");\n        notice_button.setAttribute(\"title\", core.lang.dialogBox.close);\n        notice_button.innerHTML = core.icons.cancel;\n        notice_div.appendChild(notice_span);\n        notice_div.appendChild(notice_button);\n        context.notice.modal = notice_div;\n        context.notice.message = notice_span;\n        /** add event listeners */ notice_button.addEventListener(\"click\", this.onClick_cancel.bind(core));\n        /** append html */ context.element.editorArea.appendChild(notice_div);\n        /** empty memory */ notice_div = null;\n    },\n    /**\n     * @description Event when clicking the cancel button\n     * @param {MouseEvent} e Event object\n     */ onClick_cancel: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.notice.close.call(this);\n    },\n    /**\n     * @description  Open the notice panel\n     * @param {String} text Notice message\n     */ open: function(text) {\n        this.context.notice.message.textContent = text;\n        this.context.notice.modal.style.display = \"block\";\n    },\n    /**\n     * @description  Open the notice panel\n     */ close: function() {\n        this.context.notice.modal.style.display = \"none\";\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvbW9kdWxlcy9fbm90aWNlLmpzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0NBTUMsR0FDRDtBQUVBLCtEQUFlO0lBQ1hBLE1BQU07SUFDTjs7O0tBR0MsR0FDREMsS0FBSyxTQUFVQyxJQUFJO1FBQ2YsTUFBTUMsVUFBVUQsS0FBS0MsT0FBTztRQUM1QkEsUUFBUUMsTUFBTSxHQUFHLENBQUM7UUFFbEIsV0FBVyxHQUNYLElBQUlDLGFBQWFILEtBQUtJLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1FBQ3pDLElBQUlDLGNBQWNOLEtBQUtJLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1FBQzFDLElBQUlFLGdCQUFnQlAsS0FBS0ksSUFBSSxDQUFDQyxhQUFhLENBQUM7UUFFNUNGLFdBQVdLLFNBQVMsR0FBRztRQUN2QkQsY0FBY0MsU0FBUyxHQUFHO1FBQzFCRCxjQUFjRSxZQUFZLENBQUMsY0FBYztRQUN6Q0YsY0FBY0UsWUFBWSxDQUFDLFNBQVNULEtBQUtVLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxLQUFLO1FBQzdETCxjQUFjTSxTQUFTLEdBQUdiLEtBQUtjLEtBQUssQ0FBQ0MsTUFBTTtRQUUzQ1osV0FBV2EsV0FBVyxDQUFDVjtRQUN2QkgsV0FBV2EsV0FBVyxDQUFDVDtRQUV2Qk4sUUFBUUMsTUFBTSxDQUFDZSxLQUFLLEdBQUdkO1FBQ3ZCRixRQUFRQyxNQUFNLENBQUNnQixPQUFPLEdBQUdaO1FBRXpCLHdCQUF3QixHQUN4QkMsY0FBY1ksZ0JBQWdCLENBQUMsU0FBUyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDckI7UUFFakUsZ0JBQWdCLEdBQ2hCQyxRQUFRcUIsT0FBTyxDQUFDQyxVQUFVLENBQUNQLFdBQVcsQ0FBQ2I7UUFFdkMsaUJBQWlCLEdBQ2pCQSxhQUFhO0lBQ2pCO0lBRUE7OztLQUdDLEdBQ0RpQixnQkFBZ0IsU0FBVUksQ0FBQztRQUN2QkEsRUFBRUMsY0FBYztRQUNoQkQsRUFBRUUsZUFBZTtRQUNqQixJQUFJLENBQUNDLE9BQU8sQ0FBQ3pCLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDZ0IsSUFBSSxDQUFDLElBQUk7SUFDdkM7SUFFQTs7O0tBR0MsR0FDREMsTUFBTSxTQUFVQyxJQUFJO1FBQ2hCLElBQUksQ0FBQzdCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDZ0IsT0FBTyxDQUFDYSxXQUFXLEdBQUdEO1FBQzFDLElBQUksQ0FBQzdCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDZSxLQUFLLENBQUNlLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO0lBQzlDO0lBRUE7O0tBRUMsR0FDRHJCLE9BQU87UUFDSCxJQUFJLENBQUNYLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDZSxLQUFLLENBQUNlLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO0lBQzlDO0FBQ0osQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvbW9kdWxlcy9fbm90aWNlLmpzP2U4NzciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxuICpcbiAqIHN1bmVkaXRvci5qc1xuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cbiAqIE1JVCBsaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnbm90aWNlJyxcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29yZSBDb3JlIG9iamVjdCBcbiAgICAgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XG4gICAgICAgIGNvbnRleHQubm90aWNlID0ge307XG5cbiAgICAgICAgLyoqIGRpYWxvZyAqL1xuICAgICAgICBsZXQgbm90aWNlX2RpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICAgICAgbGV0IG5vdGljZV9zcGFuID0gY29yZS51dGlsLmNyZWF0ZUVsZW1lbnQoJ1NQQU4nKTtcbiAgICAgICAgbGV0IG5vdGljZV9idXR0b24gPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnQlVUVE9OJyk7XG5cbiAgICAgICAgbm90aWNlX2Rpdi5jbGFzc05hbWUgPSAnc2Utbm90aWNlJztcbiAgICAgICAgbm90aWNlX2J1dHRvbi5jbGFzc05hbWUgPSAnY2xvc2UnO1xuICAgICAgICBub3RpY2VfYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdDbG9zZScpO1xuICAgICAgICBub3RpY2VfYnV0dG9uLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBjb3JlLmxhbmcuZGlhbG9nQm94LmNsb3NlKTtcbiAgICAgICAgbm90aWNlX2J1dHRvbi5pbm5lckhUTUwgPSBjb3JlLmljb25zLmNhbmNlbDtcbiAgICAgICAgXG4gICAgICAgIG5vdGljZV9kaXYuYXBwZW5kQ2hpbGQobm90aWNlX3NwYW4pO1xuICAgICAgICBub3RpY2VfZGl2LmFwcGVuZENoaWxkKG5vdGljZV9idXR0b24pO1xuXG4gICAgICAgIGNvbnRleHQubm90aWNlLm1vZGFsID0gbm90aWNlX2RpdjtcbiAgICAgICAgY29udGV4dC5ub3RpY2UubWVzc2FnZSA9IG5vdGljZV9zcGFuO1xuXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXG4gICAgICAgIG5vdGljZV9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tfY2FuY2VsLmJpbmQoY29yZSkpO1xuICAgICAgICBcbiAgICAgICAgLyoqIGFwcGVuZCBodG1sICovXG4gICAgICAgIGNvbnRleHQuZWxlbWVudC5lZGl0b3JBcmVhLmFwcGVuZENoaWxkKG5vdGljZV9kaXYpO1xuICAgICAgICBcbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xuICAgICAgICBub3RpY2VfZGl2ID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIEV2ZW50IHdoZW4gY2xpY2tpbmcgdGhlIGNhbmNlbCBidXR0b25cbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgb25DbGlja19jYW5jZWw6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5wbHVnaW5zLm5vdGljZS5jbG9zZS5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gIE9wZW4gdGhlIG5vdGljZSBwYW5lbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IE5vdGljZSBtZXNzYWdlXG4gICAgICovXG4gICAgb3BlbjogZnVuY3Rpb24gKHRleHQpICB7XG4gICAgICAgIHRoaXMuY29udGV4dC5ub3RpY2UubWVzc2FnZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgIHRoaXMuY29udGV4dC5ub3RpY2UubW9kYWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiAgT3BlbiB0aGUgbm90aWNlIHBhbmVsXG4gICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0Lm5vdGljZS5tb2RhbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsibmFtZSIsImFkZCIsImNvcmUiLCJjb250ZXh0Iiwibm90aWNlIiwibm90aWNlX2RpdiIsInV0aWwiLCJjcmVhdGVFbGVtZW50Iiwibm90aWNlX3NwYW4iLCJub3RpY2VfYnV0dG9uIiwiY2xhc3NOYW1lIiwic2V0QXR0cmlidXRlIiwibGFuZyIsImRpYWxvZ0JveCIsImNsb3NlIiwiaW5uZXJIVE1MIiwiaWNvbnMiLCJjYW5jZWwiLCJhcHBlbmRDaGlsZCIsIm1vZGFsIiwibWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkNsaWNrX2NhbmNlbCIsImJpbmQiLCJlbGVtZW50IiwiZWRpdG9yQXJlYSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBsdWdpbnMiLCJjYWxsIiwib3BlbiIsInRleHQiLCJ0ZXh0Q29udGVudCIsInN0eWxlIiwiZGlzcGxheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_notice.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_selectMenu.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/_selectMenu.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2018 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"selectMenu\",\n    add: function(core) {\n        core.context.selectMenu = {\n            caller: {},\n            callerContext: null\n        };\n    },\n    setForm: function() {\n        return '<div class=\"se-select-list\"></div>';\n    },\n    createList: function(listContext, items, html) {\n        listContext.form.innerHTML = \"<ul>\" + html + \"</ul>\";\n        listContext.items = items;\n        listContext.menus = listContext.form.querySelectorAll(\"li\");\n    },\n    initEvent: function(pluginName, forms) {\n        const form = forms.querySelector(\".se-select-list\");\n        const context = this.context.selectMenu.caller[pluginName] = {\n            form: form,\n            items: [],\n            menus: [],\n            index: -1,\n            item: null,\n            clickMethod: null,\n            callerName: pluginName\n        };\n        form.addEventListener(\"mousedown\", this.plugins.selectMenu.onMousedown_list);\n        form.addEventListener(\"mousemove\", this.plugins.selectMenu.onMouseMove_list.bind(this, context));\n        form.addEventListener(\"click\", this.plugins.selectMenu.onClick_list.bind(this, context));\n    },\n    onMousedown_list: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    },\n    onMouseMove_list: function(context, e) {\n        this.util.addClass(context.form, \"__se_select-menu-mouse-move\");\n        const index = e.target.getAttribute(\"data-index\");\n        if (!index) return;\n        context.index = index * 1;\n    },\n    onClick_list: function(context, e) {\n        const index = e.target.getAttribute(\"data-index\");\n        if (!index) return;\n        context.clickMethod.call(this, context.items[index]);\n    },\n    moveItem: function(listContext, num) {\n        this.util.removeClass(listContext.form, \"__se_select-menu-mouse-move\");\n        num = listContext.index + num;\n        const menus = listContext.menus;\n        const len = menus.length;\n        const selectIndex = listContext.index = num >= len ? 0 : num < 0 ? len - 1 : num;\n        for(let i = 0; i < len; i++){\n            if (i === selectIndex) {\n                this.util.addClass(menus[i], \"active\");\n            } else {\n                this.util.removeClass(menus[i], \"active\");\n            }\n        }\n        listContext.item = listContext.items[selectIndex];\n    },\n    getItem: function(listContext, index) {\n        index = !index || index < 0 ? listContext.index : index;\n        return listContext.items[index];\n    },\n    on: function(callerName, clickMethod) {\n        const listContext = this.context.selectMenu.caller[callerName];\n        this.context.selectMenu.callerContext = listContext;\n        listContext.clickMethod = clickMethod;\n        listContext.callerName = callerName;\n    },\n    open: function(listContext, positionHandler) {\n        const form = listContext.form;\n        form.style.visibility = \"hidden\";\n        form.style.display = \"block\";\n        positionHandler(form);\n        form.style.visibility = \"\";\n    },\n    close: function(listContext) {\n        listContext.form.style.display = \"none\";\n        listContext.items = [];\n        listContext.menus = [];\n        listContext.index = -1;\n        listContext.item = null;\n    },\n    init: function(listContext) {\n        if (!listContext) return;\n        listContext.items = [];\n        listContext.menus = [];\n        listContext.index = -1;\n        listContext.item = null;\n        listContext.callerName = \"\";\n        this.context.selectMenu.callerContext = null;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_selectMenu.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/component.js":
/*!*****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/component.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const component = {\n        name: \"component\",\n        /**\n         * @description Create a container for the resizing component and insert the element.\n         * @param {Element} cover Cover element (FIGURE)\n         * @param {String} className Class name of container (fixed: se-component)\n         * @returns {Element} Created container element\n         */ set_container: function(cover, className) {\n            const container = this.util.createElement(\"DIV\");\n            container.className = \"se-component \" + className;\n            container.appendChild(cover);\n            return container;\n        },\n        /**\n         * @description Cover the target element with a FIGURE element.\n         * @param {Element} element Target element\n         */ set_cover: function(element) {\n            const cover = this.util.createElement(\"FIGURE\");\n            cover.appendChild(element);\n            return cover;\n        },\n        /**\n         * @description Return HTML string of caption(FIGCAPTION) element\n         * @returns {String}\n         */ create_caption: function() {\n            const caption = this.util.createElement(\"FIGCAPTION\");\n            caption.innerHTML = \"<div>\" + this.lang.dialogBox.caption + \"</div>\";\n            return caption;\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"component\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: component\n        });\n    }\n    return component;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvbW9kdWxlcy9jb21wb25lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQyxVQUFVQSxNQUFNLEVBQUVDLE9BQU87SUFDdEIsSUFBSSxLQUFrQixJQUFZLE9BQU9DLE9BQU9DLE9BQU8sS0FBSyxVQUFVO1FBQ2xFRCxPQUFPQyxPQUFPLEdBQUdILE9BQU9JLFFBQVEsR0FDNUJILFFBQVFELFFBQVEsUUFDaEIsU0FBVUssQ0FBQztZQUNQLElBQUksQ0FBQ0EsRUFBRUQsUUFBUSxFQUFFO2dCQUNiLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBLE9BQU9MLFFBQVFJO1FBQ25CO0lBQ1IsT0FBTztRQUNISixRQUFRRDtJQUNaO0FBQ0osR0FBRSxLQUFrQixHQUFjTyxTQUFTLEdBQU0sU0FBVUEsT0FBTSxFQUFFQyxRQUFRO0lBQ3ZFLE1BQU1DLFlBQVk7UUFDZEMsTUFBTTtRQUNOOzs7OztTQUtDLEdBQ0RDLGVBQWUsU0FBVUMsS0FBSyxFQUFFQyxTQUFTO1lBQ3JDLE1BQU1DLFlBQVksSUFBSSxDQUFDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQztZQUMxQ0YsVUFBVUQsU0FBUyxHQUFHLGtCQUFrQkE7WUFDeENDLFVBQVVHLFdBQVcsQ0FBQ0w7WUFFdEIsT0FBT0U7UUFDWDtRQUVBOzs7U0FHQyxHQUNESSxXQUFXLFNBQVVDLE9BQU87WUFDeEIsTUFBTVAsUUFBUSxJQUFJLENBQUNHLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1lBQ3RDSixNQUFNSyxXQUFXLENBQUNFO1lBRWxCLE9BQU9QO1FBQ1g7UUFFQTs7O1NBR0MsR0FDRFEsZ0JBQWdCO1lBQ1osTUFBTUMsVUFBVSxJQUFJLENBQUNOLElBQUksQ0FBQ0MsYUFBYSxDQUFDO1lBQ3hDSyxRQUFRQyxTQUFTLEdBQUcsVUFBVSxJQUFJLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxPQUFPLEdBQUc7WUFDNUQsT0FBT0E7UUFDWDtJQUNKO0lBRUEsSUFBSSxPQUFPYixhQUFhLE9BQU9pQixXQUFXO1FBQ3RDLElBQUksQ0FBQ2xCLFFBQU9tQixpQkFBaUIsRUFBRTtZQUMzQkMsT0FBT0MsY0FBYyxDQUFDckIsU0FBUSxxQkFBcUI7Z0JBQy9Dc0IsWUFBWTtnQkFDWkMsVUFBVTtnQkFDVkMsY0FBYztnQkFDZEMsT0FBTyxDQUFDO1lBQ1o7UUFDSjtRQUVBTCxPQUFPQyxjQUFjLENBQUNyQixRQUFPbUIsaUJBQWlCLEVBQUUsYUFBYTtZQUN6REcsWUFBWTtZQUNaQyxVQUFVO1lBQ1ZDLGNBQWM7WUFDZEMsT0FBT3ZCO1FBQ1g7SUFDSjtJQUVBLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvcGx1Z2lucy9tb2R1bGVzL2NvbXBvbmVudC5qcz9iNjNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiB3eXNpd3lnIHdlYiBlZGl0b3JcbiAqXG4gKiBzdW5lZGl0b3IuanNcbiAqIENvcHlyaWdodCAyMDE3IEppSG9uZyBMZWUuXG4gKiBNSVQgbGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cbiAgICAgICAgICAgIGZhY3RvcnkoZ2xvYmFsLCB0cnVlKSA6XG4gICAgICAgICAgICBmdW5jdGlvbiAodykge1xuICAgICAgICAgICAgICAgIGlmICghdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NVTkVESVRPUl9NT0RVTEVTIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeSh3KTtcbiAgICAgICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShnbG9iYWwpO1xuICAgIH1cbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAod2luZG93LCBub0dsb2JhbCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHtcbiAgICAgICAgbmFtZTogJ2NvbXBvbmVudCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ3JlYXRlIGEgY29udGFpbmVyIGZvciB0aGUgcmVzaXppbmcgY29tcG9uZW50IGFuZCBpbnNlcnQgdGhlIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY292ZXIgQ292ZXIgZWxlbWVudCAoRklHVVJFKVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIG5hbWUgb2YgY29udGFpbmVyIChmaXhlZDogc2UtY29tcG9uZW50KVxuICAgICAgICAgKiBAcmV0dXJucyB7RWxlbWVudH0gQ3JlYXRlZCBjb250YWluZXIgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0X2NvbnRhaW5lcjogZnVuY3Rpb24gKGNvdmVyLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnc2UtY29tcG9uZW50ICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY292ZXIpO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvdmVyIHRoZSB0YXJnZXQgZWxlbWVudCB3aXRoIGEgRklHVVJFIGVsZW1lbnQuXG4gICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUYXJnZXQgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0X2NvdmVyOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgY292ZXIgPSB0aGlzLnV0aWwuY3JlYXRlRWxlbWVudCgnRklHVVJFJyk7XG4gICAgICAgICAgICBjb3Zlci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBjb3ZlcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJldHVybiBIVE1MIHN0cmluZyBvZiBjYXB0aW9uKEZJR0NBUFRJT04pIGVsZW1lbnRcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZV9jYXB0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBjYXB0aW9uID0gdGhpcy51dGlsLmNyZWF0ZUVsZW1lbnQoJ0ZJR0NBUFRJT04nKTtcbiAgICAgICAgICAgIGNhcHRpb24uaW5uZXJIVE1MID0gJzxkaXY+JyArIHRoaXMubGFuZy5kaWFsb2dCb3guY2FwdGlvbiArICc8L2Rpdj4nO1xuICAgICAgICAgICAgcmV0dXJuIGNhcHRpb247XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBub0dsb2JhbCA9PT0gdHlwZW9mIHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXdpbmRvdy5TVU5FRElUT1JfTU9EVUxFUykge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NVTkVESVRPUl9NT0RVTEVTJywge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuU1VORURJVE9SX01PRFVMRVMsICdjb21wb25lbnQnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBjb21wb25lbnRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn0pKTsiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsIm5vR2xvYmFsIiwiY29tcG9uZW50IiwibmFtZSIsInNldF9jb250YWluZXIiLCJjb3ZlciIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsInV0aWwiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJzZXRfY292ZXIiLCJlbGVtZW50IiwiY3JlYXRlX2NhcHRpb24iLCJjYXB0aW9uIiwiaW5uZXJIVE1MIiwibGFuZyIsImRpYWxvZ0JveCIsInVuZGVmaW5lZCIsIlNVTkVESVRPUl9NT0RVTEVTIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/component.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/dialog.js":
/*!**************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/dialog.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const dialog = {\n        name: \"dialog\",\n        /**\n         * @description Constructor\n         * @param {Object} core Core object \n         */ add: function(core) {\n            const context = core.context;\n            context.dialog = {\n                kind: \"\",\n                updateModal: false,\n                _closeSignal: false\n            };\n            /** dialog */ let dialog_div = core.util.createElement(\"DIV\");\n            dialog_div.className = \"se-dialog sun-editor-common\";\n            let dialog_back = core.util.createElement(\"DIV\");\n            dialog_back.className = \"se-dialog-back\";\n            dialog_back.style.display = \"none\";\n            let dialog_area = core.util.createElement(\"DIV\");\n            dialog_area.className = \"se-dialog-inner\";\n            dialog_area.style.display = \"none\";\n            dialog_div.appendChild(dialog_back);\n            dialog_div.appendChild(dialog_area);\n            context.dialog.modalArea = dialog_div;\n            context.dialog.back = dialog_back;\n            context.dialog.modal = dialog_area;\n            /** add event listeners */ context.dialog.modal.addEventListener(\"mousedown\", this._onMouseDown_dialog.bind(core));\n            context.dialog.modal.addEventListener(\"click\", this._onClick_dialog.bind(core));\n            /** append html */ context.element.relative.appendChild(dialog_div);\n            /** empty memory */ dialog_div = null, dialog_back = null, dialog_area = null;\n        },\n        /**\n         * @description Event to control the behavior of closing the dialog\n         * @param {MouseEvent} e Event object\n         * @private\n         */ _onMouseDown_dialog: function(e) {\n            if (/se-dialog-inner/.test(e.target.className)) {\n                this.context.dialog._closeSignal = true;\n            } else {\n                this.context.dialog._closeSignal = false;\n            }\n        },\n        /**\n         * @description Event to close the window when the outside area of the dialog or close button is click\n         * @param {MouseEvent} e Event object\n         * @private\n         */ _onClick_dialog: function(e) {\n            if (/close/.test(e.target.getAttribute(\"data-command\")) || this.context.dialog._closeSignal) {\n                this.plugins.dialog.close.call(this);\n            }\n        },\n        /**\n         * @description Open a Dialog plugin\n         * @param {String} kind Dialog plugin name\n         * @param {Boolean} update Whether it will open for update ('image' === this.currentControllerName)\n         */ open: function(kind, update) {\n            if (this.modalForm) return false;\n            if (this.plugins.dialog._bindClose) {\n                this._d.removeEventListener(\"keydown\", this.plugins.dialog._bindClose);\n                this.plugins.dialog._bindClose = null;\n            }\n            this.plugins.dialog._bindClose = (function(e) {\n                if (!/27/.test(e.keyCode)) return;\n                this.plugins.dialog.close.call(this);\n            }).bind(this);\n            this._d.addEventListener(\"keydown\", this.plugins.dialog._bindClose);\n            this.context.dialog.updateModal = update;\n            if (this.options.popupDisplay === \"full\") {\n                this.context.dialog.modalArea.style.position = \"fixed\";\n            } else {\n                this.context.dialog.modalArea.style.position = \"absolute\";\n            }\n            this.context.dialog.kind = kind;\n            this.modalForm = this.context[kind].modal;\n            const focusElement = this.context[kind].focusElement;\n            if (typeof this.plugins[kind].on === \"function\") this.plugins[kind].on.call(this, update);\n            this.context.dialog.modalArea.style.display = \"block\";\n            this.context.dialog.back.style.display = \"block\";\n            this.context.dialog.modal.style.display = \"block\";\n            this.modalForm.style.display = \"block\";\n            if (focusElement) focusElement.focus();\n        },\n        _bindClose: null,\n        /**\n         * @description Close a Dialog plugin\n         * The plugin's \"init\" method is called.\n         */ close: function() {\n            if (this.plugins.dialog._bindClose) {\n                this._d.removeEventListener(\"keydown\", this.plugins.dialog._bindClose);\n                this.plugins.dialog._bindClose = null;\n            }\n            const kind = this.context.dialog.kind;\n            this.modalForm.style.display = \"none\";\n            this.context.dialog.back.style.display = \"none\";\n            this.context.dialog.modalArea.style.display = \"none\";\n            this.context.dialog.updateModal = false;\n            if (typeof this.plugins[kind].init === \"function\") this.plugins[kind].init.call(this);\n            this.context.dialog.kind = \"\";\n            this.modalForm = null;\n            this.focus();\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"dialog\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: dialog\n        });\n    }\n    return dialog;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/dialog.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/fileManager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/fileManager.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const fileManager = {\n        name: \"fileManager\",\n        _xmlHttp: null,\n        _checkMediaComponent: function(tag) {\n            if (/IMG/i.test(tag)) {\n                return !/FIGURE/i.test(tag.parentElement.nodeName) || !/FIGURE/i.test(tag.parentElement.parentElement.nodeName);\n            }\n            return true;\n        },\n        /**\n         * @description Upload the file to the server.\n         * @param {String} uploadUrl Upload server url\n         * @param {Object|null} uploadHeader Request header\n         * @param {FormData} formData FormData in body\n         * @param {Function|null} callBack Success call back function\n         * @param {Function|null} errorCallBack Error call back function\n         * @example this.plugins.fileManager.upload.call(this, imageUploadUrl, this.options.imageUploadHeader, formData, this.plugins.image.callBack_imgUpload.bind(this, info), this.functions.onImageUploadError);\n         */ upload: function(uploadUrl, uploadHeader, formData, callBack, errorCallBack) {\n            this.showLoading();\n            const filePlugin = this.plugins.fileManager;\n            const xmlHttp = filePlugin._xmlHttp = this.util.getXMLHttpRequest();\n            xmlHttp.onreadystatechange = filePlugin._callBackUpload.bind(this, xmlHttp, callBack, errorCallBack);\n            xmlHttp.open(\"post\", uploadUrl, true);\n            if (uploadHeader !== null && typeof uploadHeader === \"object\" && this._w.Object.keys(uploadHeader).length > 0) {\n                for(let key in uploadHeader){\n                    xmlHttp.setRequestHeader(key, uploadHeader[key]);\n                }\n            }\n            xmlHttp.send(formData);\n        },\n        _callBackUpload: function(xmlHttp, callBack, errorCallBack) {\n            if (xmlHttp.readyState === 4) {\n                if (xmlHttp.status === 200) {\n                    try {\n                        callBack(xmlHttp);\n                    } catch (e) {\n                        throw Error('[SUNEDITOR.fileManager.upload.callBack.fail] cause : \"' + e.message + '\"');\n                    } finally{\n                        this.closeLoading();\n                    }\n                } else {\n                    this.closeLoading();\n                    const res = !xmlHttp.responseText ? xmlHttp : JSON.parse(xmlHttp.responseText);\n                    if (typeof errorCallBack !== \"function\" || errorCallBack(\"\", res, this)) {\n                        const err = \"[SUNEDITOR.fileManager.upload.serverException] status: \" + xmlHttp.status + \", response: \" + (res.errorMessage || xmlHttp.responseText);\n                        this.functions.noticeOpen(err);\n                        throw Error(err);\n                    }\n                }\n            }\n        },\n        /**\n         * @description Checke the file's information and modify the tag that does not fit the format.\n         * @param {String} pluginName Plugin name\n         * @param {Array} tagNames Tag array to check\n         * @param {Function|null} uploadEventHandler Event handler to process updated file info after checking (used in \"setInfo\")\n         * @param {Function} modifyHandler A function to modify a tag that does not fit the format (Argument value: Tag element)\n         * @param {Boolean} resizing True if the plugin is using a resizing module\n         * @example \n         * const modifyHandler = function (tag) {\n         *      imagePlugin.onModifyMode.call(this, tag, null);\n         *      imagePlugin.openModify.call(this, true);\n         *      imagePlugin.update_image.call(this, true, false, true);\n         *  }.bind(this);\n         *  this.plugins.fileManager.checkInfo.call(this, 'image', ['img'], this.functions.onImageUpload, modifyHandler, true);\n         */ checkInfo: function(pluginName, tagNames, uploadEventHandler, modifyHandler, resizing) {\n            let tags = [];\n            for(let i = 0, len = tagNames.length; i < len; i++){\n                tags = tags.concat([].slice.call(this.context.element.wysiwyg.querySelectorAll(tagNames[i] + ':not([data-se-embed=\"true\"])')));\n            }\n            const fileManagerPlugin = this.plugins.fileManager;\n            const context = this.context[pluginName];\n            const infoList = context._infoList;\n            const setFileInfo = fileManagerPlugin.setInfo.bind(this);\n            if (tags.length === infoList.length) {\n                // reset\n                if (this._componentsInfoReset) {\n                    for(let i = 0, len = tags.length; i < len; i++){\n                        setFileInfo(pluginName, tags[i], uploadEventHandler, null, resizing);\n                    }\n                    return;\n                } else {\n                    let infoUpdate = false;\n                    for(let i = 0, len = infoList.length, info; i < len; i++){\n                        info = infoList[i];\n                        if (tags.filter(function(t) {\n                            return info.src === t.src && info.index.toString() === t.getAttribute(\"data-index\");\n                        }).length === 0) {\n                            infoUpdate = true;\n                            break;\n                        }\n                    }\n                    // pass\n                    if (!infoUpdate) return;\n                }\n            }\n            // check\n            const _resize_plugin = resizing ? this.context.resizing._resize_plugin : \"\";\n            if (resizing) this.context.resizing._resize_plugin = pluginName;\n            const currentTags = [];\n            const infoIndex = [];\n            for(let i = 0, len = infoList.length; i < len; i++){\n                infoIndex[i] = infoList[i].index;\n            }\n            context.__updateTags = tags;\n            while(tags.length > 0){\n                const tag = tags.shift();\n                if (!this.util.getParentElement(tag, this.util.isMediaComponent) || !fileManagerPlugin._checkMediaComponent(tag)) {\n                    currentTags.push(context._infoIndex);\n                    modifyHandler(tag);\n                } else if (!tag.getAttribute(\"data-index\") || infoIndex.indexOf(tag.getAttribute(\"data-index\") * 1) < 0) {\n                    currentTags.push(context._infoIndex);\n                    tag.removeAttribute(\"data-index\");\n                    setFileInfo(pluginName, tag, uploadEventHandler, null, resizing);\n                } else {\n                    currentTags.push(tag.getAttribute(\"data-index\") * 1);\n                }\n            }\n            for(let i = 0, dataIndex; i < infoList.length; i++){\n                dataIndex = infoList[i].index;\n                if (currentTags.indexOf(dataIndex) > -1) continue;\n                infoList.splice(i, 1);\n                if (typeof uploadEventHandler === \"function\") uploadEventHandler(null, dataIndex, \"delete\", null, 0, this);\n                i--;\n            }\n            if (resizing) this.context.resizing._resize_plugin = _resize_plugin;\n        },\n        /**\n         * @description Create info object of file and add it to \"_infoList\" (this.context[pluginName]._infoList[])\n         * @param {String} pluginName Plugin name \n         * @param {Element} element \n         * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n         * @param {Object|null} file \n         * @param {Boolean} resizing True if the plugin is using a resizing module\n         * @example \n         * uploadCallBack {.. file = { name: fileList[i].name, size: fileList[i].size };\n         * this.plugins.fileManager.setInfo.call(this, 'image', oImg, this.functions.onImageUpload, file, true);\n         */ setInfo: function(pluginName, element, uploadEventHandler, file, resizing) {\n            const _resize_plugin = resizing ? this.context.resizing._resize_plugin : \"\";\n            if (resizing) this.context.resizing._resize_plugin = pluginName;\n            const plguin = this.plugins[pluginName];\n            const context = this.context[pluginName];\n            const infoList = context._infoList;\n            let dataIndex = element.getAttribute(\"data-index\");\n            let info = null;\n            let state = \"\";\n            if (!file) {\n                file = {\n                    \"name\": element.getAttribute(\"data-file-name\") || (typeof element.src === \"string\" ? element.src.split(\"/\").pop() : \"\"),\n                    \"size\": element.getAttribute(\"data-file-size\") || 0\n                };\n            }\n            // create\n            if (!dataIndex || this._componentsInfoInit) {\n                state = \"create\";\n                dataIndex = context._infoIndex++;\n                element.setAttribute(\"data-index\", dataIndex);\n                element.setAttribute(\"data-file-name\", file.name);\n                element.setAttribute(\"data-file-size\", file.size);\n                info = {\n                    src: element.src,\n                    index: dataIndex * 1,\n                    name: file.name,\n                    size: file.size\n                };\n                infoList.push(info);\n            } else {\n                state = \"update\";\n                dataIndex *= 1;\n                for(let i = 0, len = infoList.length; i < len; i++){\n                    if (dataIndex === infoList[i].index) {\n                        info = infoList[i];\n                        break;\n                    }\n                }\n                if (!info) {\n                    dataIndex = context._infoIndex++;\n                    info = {\n                        index: dataIndex\n                    };\n                    infoList.push(info);\n                }\n                info.src = element.src;\n                info.name = element.getAttribute(\"data-file-name\");\n                info.size = element.getAttribute(\"data-file-size\") * 1;\n            }\n            // method bind\n            info.element = element;\n            info.delete = plguin.destroy.bind(this, element);\n            info.select = (function(element) {\n                element.scrollIntoView(true);\n                this._w.setTimeout(plguin.select.bind(this, element));\n            }).bind(this, element);\n            if (resizing) {\n                if (!element.getAttribute(\"origin-size\") && element.naturalWidth) {\n                    element.setAttribute(\"origin-size\", element.naturalWidth + \",\" + element.naturalHeight);\n                }\n                if (!element.getAttribute(\"data-origin\")) {\n                    const container = this.util.getParentElement(element, this.util.isMediaComponent);\n                    const cover = this.util.getParentElement(element, \"FIGURE\");\n                    const w = this.plugins.resizing._module_getSizeX.call(this, context, element, cover, container);\n                    const h = this.plugins.resizing._module_getSizeY.call(this, context, element, cover, container);\n                    element.setAttribute(\"data-origin\", w + \",\" + h);\n                    element.setAttribute(\"data-size\", w + \",\" + h);\n                }\n                if (!element.style.width) {\n                    const size = (element.getAttribute(\"data-size\") || element.getAttribute(\"data-origin\") || \"\").split(\",\");\n                    plguin.onModifyMode.call(this, element, null);\n                    plguin.applySize.call(this, size[0], size[1]);\n                }\n                this.context.resizing._resize_plugin = _resize_plugin;\n            }\n            if (typeof uploadEventHandler === \"function\") uploadEventHandler(element, dataIndex, state, info, --context._uploadFileLength < 0 ? 0 : context._uploadFileLength, this);\n        },\n        /**\n         * @description Delete info object at \"_infoList\"\n         * @param {String} pluginName Plugin name \n         * @param {Number} index index of info object (this.context[pluginName]._infoList[].index)\n         * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n         */ deleteInfo: function(pluginName, index, uploadEventHandler) {\n            if (index >= 0) {\n                const infoList = this.context[pluginName]._infoList;\n                for(let i = 0, len = infoList.length; i < len; i++){\n                    if (index === infoList[i].index) {\n                        infoList.splice(i, 1);\n                        if (typeof uploadEventHandler === \"function\") uploadEventHandler(null, index, \"delete\", null, 0, this);\n                        return;\n                    }\n                }\n            }\n        },\n        /**\n         * @description Reset info object and \"_infoList = []\", \"_infoIndex = 0\"\n         * @param {String} pluginName Plugin name \n         * @param {Function|null} uploadEventHandler Event handler to process updated file info (created in setInfo)\n         */ resetInfo: function(pluginName, uploadEventHandler) {\n            const context = this.context[pluginName];\n            if (typeof uploadEventHandler === \"function\") {\n                const infoList = context._infoList;\n                for(let i = 0, len = infoList.length; i < len; i++){\n                    uploadEventHandler(null, infoList[i].index, \"delete\", null, 0, this);\n                }\n            }\n            context._infoList = [];\n            context._infoIndex = 0;\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"fileManager\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: fileManager\n        });\n    }\n    return fileManager;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/fileManager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/resizing.js":
/*!****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/modules/resizing.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n(function(global, factory) {\n    if ( true && typeof module.exports === \"object\") {\n        module.exports = global.document ? factory(global, true) : function(w) {\n            if (!w.document) {\n                throw new Error(\"SUNEDITOR_MODULES a window with a document\");\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n})( true ? window : 0, function(window1, noGlobal) {\n    const resizing = {\n        name: \"resizing\",\n        /**\n         * @description Constructor\n         * Require context properties when resizing module\n            inputX: Element,\n            inputY: Element,\n            _container: null,\n            _cover: null,\n            _element: null,\n            _element_w: 1,\n            _element_h: 1,\n            _element_l: 0,\n            _element_t: 0,\n            _defaultSizeX: 'auto',\n            _defaultSizeY: 'auto',\n            _origin_w: core.options.imageWidth === 'auto' ? '' : core.options.imageWidth,\n            _origin_h: core.options.imageHeight === 'auto' ? '' : core.options.imageHeight,\n            _proportionChecked: true,\n            // -- select function --\n            _resizing: core.options.imageResizing,\n            _resizeDotHide: !core.options.imageHeightShow,\n            _rotation: core.options.imageRotation,\n            _onlyPercentage: core.options.imageSizeOnlyPercentage,\n            _ratio: false,\n            _ratioX: 1,\n            _ratioY: 1\n            _captionShow: true,\n            // -- when used caption (_captionShow: true) --\n            _caption: null,\n            _captionChecked: false,\n            captionCheckEl: null,\n         * @param {Object} core Core object \n         */ add: function(core) {\n            const icons = core.icons;\n            const context = core.context;\n            context.resizing = {\n                _resizeClientX: 0,\n                _resizeClientY: 0,\n                _resize_plugin: \"\",\n                _resize_w: 0,\n                _resize_h: 0,\n                _origin_w: 0,\n                _origin_h: 0,\n                _rotateVertical: false,\n                _resize_direction: \"\",\n                _move_path: null,\n                _isChange: false,\n                alignIcons: {\n                    basic: icons.align_justify,\n                    left: icons.align_left,\n                    right: icons.align_right,\n                    center: icons.align_center\n                }\n            };\n            /** resize controller, button */ let resize_div_container = this.setController_resize(core);\n            context.resizing.resizeContainer = resize_div_container;\n            context.resizing.resizeDiv = resize_div_container.querySelector(\".se-modal-resize\");\n            context.resizing.resizeDot = resize_div_container.querySelector(\".se-resize-dot\");\n            context.resizing.resizeDisplay = resize_div_container.querySelector(\".se-resize-display\");\n            let resize_button = this.setController_button(core);\n            context.resizing.resizeButton = resize_button;\n            let resize_handles = context.resizing.resizeHandles = context.resizing.resizeDot.querySelectorAll(\"span\");\n            context.resizing.resizeButtonGroup = resize_button.querySelector(\"._se_resizing_btn_group\");\n            context.resizing.rotationButtons = resize_button.querySelectorAll(\"._se_resizing_btn_group ._se_rotation\");\n            context.resizing.percentageButtons = resize_button.querySelectorAll(\"._se_resizing_btn_group ._se_percentage\");\n            context.resizing.alignMenu = resize_button.querySelector(\".se-resizing-align-list\");\n            context.resizing.alignMenuList = context.resizing.alignMenu.querySelectorAll(\"button\");\n            context.resizing.alignButton = resize_button.querySelector(\"._se_resizing_align_button\");\n            context.resizing.autoSizeButton = resize_button.querySelector(\"._se_resizing_btn_group ._se_auto_size\");\n            context.resizing.captionButton = resize_button.querySelector(\"._se_resizing_caption_button\");\n            /** add event listeners */ resize_div_container.addEventListener(\"mousedown\", function(e) {\n                e.preventDefault();\n            });\n            resize_handles[0].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[1].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[2].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[3].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[4].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[5].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[6].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_handles[7].addEventListener(\"mousedown\", this.onMouseDown_resize_handle.bind(core));\n            resize_button.addEventListener(\"click\", this.onClick_resizeButton.bind(core));\n            /** append html */ context.element.relative.appendChild(resize_div_container);\n            context.element.relative.appendChild(resize_button);\n            /** empty memory */ resize_div_container = null, resize_button = null, resize_handles = null;\n        },\n        /** resize controller, button (image, iframe, video) */ setController_resize: function(core) {\n            const resize_container = core.util.createElement(\"DIV\");\n            resize_container.className = \"se-controller se-resizing-container\";\n            resize_container.style.display = \"none\";\n            resize_container.innerHTML = \"\" + '<div class=\"se-modal-resize\"></div>' + '<div class=\"se-resize-dot\">' + '<span class=\"tl\"></span>' + '<span class=\"tr\"></span>' + '<span class=\"bl\"></span>' + '<span class=\"br\"></span>' + '<span class=\"lw\"></span>' + '<span class=\"th\"></span>' + '<span class=\"rw\"></span>' + '<span class=\"bh\"></span>' + '<div class=\"se-resize-display\"></div>' + \"</div>\";\n            return resize_container;\n        },\n        setController_button: function(core) {\n            const lang = core.lang;\n            const icons = core.icons;\n            const resize_button = core.util.createElement(\"DIV\");\n            resize_button.className = \"se-controller se-controller-resizing\";\n            resize_button.innerHTML = \"\" + '<div class=\"se-arrow se-arrow-up\"></div>' + '<div class=\"se-btn-group _se_resizing_btn_group\">' + '<button type=\"button\" data-command=\"percent\" data-value=\"1\" class=\"se-tooltip _se_percentage\">' + \"<span>100%</span>\" + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize100 + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"percent\" data-value=\"0.75\" class=\"se-tooltip _se_percentage\">' + \"<span>75%</span>\" + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize75 + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"percent\" data-value=\"0.5\" class=\"se-tooltip _se_percentage\">' + \"<span>50%</span>\" + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.resize50 + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"auto\" class=\"se-btn se-tooltip _se_auto_size\">' + icons.auto_size + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.autoSize + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"rotate\" data-value=\"-90\" class=\"se-btn se-tooltip _se_rotation\">' + icons.rotate_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.rotateLeft + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"rotate\" data-value=\"90\" class=\"se-btn se-tooltip _se_rotation\">' + icons.rotate_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.rotateRight + \"</span></span>\" + \"</button>\" + \"</div>\" + '<div class=\"se-btn-group\" style=\"padding-top: 0;\">' + '<button type=\"button\" data-command=\"mirror\" data-value=\"h\" class=\"se-btn se-tooltip\">' + icons.mirror_horizontal + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mirrorHorizontal + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"mirror\" data-value=\"v\" class=\"se-btn se-tooltip\">' + icons.mirror_vertical + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mirrorVertical + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"onalign\" class=\"se-btn se-tooltip _se_resizing_align_button\">' + icons.align_justify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.toolbar.align + \"</span></span>\" + \"</button>\" + '<div class=\"se-btn-group-sub sun-editor-common se-list-layer se-resizing-align-list\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"basic\">' + icons.align_justify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.basic + \"</span></span>\" + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"left\">' + icons.align_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.left + \"</span></span>\" + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"center\">' + icons.align_center + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.center + \"</span></span>\" + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"align\" data-value=\"right\">' + icons.align_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.right + \"</span></span>\" + \"</button></li>\" + \"</ul>\" + \"</div>\" + \"</div>\" + '<button type=\"button\" data-command=\"caption\" class=\"se-btn se-tooltip _se_resizing_caption_button\">' + icons.caption + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.caption + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"revert\" class=\"se-btn se-tooltip\">' + icons.revert + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.dialogBox.revertButton + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"update\" class=\"se-btn se-tooltip\">' + icons.modify + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.edit + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + \"</span></span>\" + \"</button>\" + \"</div>\";\n            return resize_button;\n        },\n        /**\n         * @description Gets the width size\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {Element} element Target element\n         * @param {Element} cover Cover element (FIGURE)\n         * @param {Element} container Container element (DIV.se-component)\n         * @returns {String}\n         */ _module_getSizeX: function(contextPlugin, element, cover, container) {\n            if (!element) element = contextPlugin._element;\n            if (!cover) cover = contextPlugin._cover;\n            if (!container) container = contextPlugin._container;\n            if (!element) return \"\";\n            return !/%$/.test(element.style.width) ? element.style.width : (container && this.util.getNumber(container.style.width, 2) || 100) + \"%\";\n        },\n        /**\n         * @description Gets the height size\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {Element} element Target element\n         * @param {Element} cover Cover element (FIGURE)\n         * @param {Element} container Container element (DIV.se-component)\n         * @returns {String}\n         */ _module_getSizeY: function(contextPlugin, element, cover, container) {\n            if (!element) element = contextPlugin._element;\n            if (!cover) cover = contextPlugin._cover;\n            if (!container) container = contextPlugin._container;\n            if (!container || !cover) return element && element.style.height || \"\";\n            return this.util.getNumber(cover.style.paddingBottom, 0) > 0 && !this.context.resizing._rotateVertical ? cover.style.height : !/%$/.test(element.style.height) || !/%$/.test(element.style.width) ? element.style.height : (container && this.util.getNumber(container.style.height, 2) || 100) + \"%\";\n        },\n        /**\n         * @description Called at the \"openModify\" to put the size of the current target into the size input element.\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {Object} pluginObj Plugin object\n         */ _module_setModifyInputSize: function(contextPlugin, pluginObj) {\n            const percentageRotation = contextPlugin._onlyPercentage && this.context.resizing._rotateVertical;\n            contextPlugin.proportion.checked = contextPlugin._proportionChecked = contextPlugin._element.getAttribute(\"data-proportion\") !== \"false\";\n            let x = percentageRotation ? \"\" : this.plugins.resizing._module_getSizeX.call(this, contextPlugin);\n            if (x === contextPlugin._defaultSizeX) x = \"\";\n            if (contextPlugin._onlyPercentage) x = this.util.getNumber(x, 2);\n            contextPlugin.inputX.value = x;\n            pluginObj.setInputSize.call(this, \"x\");\n            if (!contextPlugin._onlyPercentage) {\n                let y = percentageRotation ? \"\" : this.plugins.resizing._module_getSizeY.call(this, contextPlugin);\n                if (y === contextPlugin._defaultSizeY) y = \"\";\n                if (contextPlugin._onlyPercentage) y = this.util.getNumber(y, 2);\n                contextPlugin.inputY.value = y;\n            }\n            contextPlugin.inputX.disabled = percentageRotation ? true : false;\n            contextPlugin.inputY.disabled = percentageRotation ? true : false;\n            contextPlugin.proportion.disabled = percentageRotation ? true : false;\n            pluginObj.setRatio.call(this);\n        },\n        /**\n         * @description It is called in \"setInputSize\" (input tag keyupEvent), \n         * checks the value entered in the input tag, \n         * calculates the ratio, and sets the calculated value in the input tag of the opposite size.\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         * @param {String} xy 'x': width, 'y': height\n         */ _module_setInputSize: function(contextPlugin, xy) {\n            if (contextPlugin._onlyPercentage) {\n                if (xy === \"x\" && contextPlugin.inputX.value > 100) contextPlugin.inputX.value = 100;\n                return;\n            }\n            if (contextPlugin.proportion.checked && contextPlugin._ratio && /\\d/.test(contextPlugin.inputX.value) && /\\d/.test(contextPlugin.inputY.value)) {\n                const xUnit = contextPlugin.inputX.value.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                const yUnit = contextPlugin.inputY.value.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                if (xUnit !== yUnit) return;\n                const dec = xUnit === \"%\" ? 2 : 0;\n                if (xy === \"x\") {\n                    contextPlugin.inputY.value = this.util.getNumber(contextPlugin._ratioY * this.util.getNumber(contextPlugin.inputX.value, dec), dec) + yUnit;\n                } else {\n                    contextPlugin.inputX.value = this.util.getNumber(contextPlugin._ratioX * this.util.getNumber(contextPlugin.inputY.value, dec), dec) + xUnit;\n                }\n            }\n        },\n        /**\n         * @description It is called in \"setRatio\" (input and proportionCheck tags changeEvent), \n         * checks the value of the input tag, calculates the ratio, and resets it in the input tag.\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         */ _module_setRatio: function(contextPlugin) {\n            const xValue = contextPlugin.inputX.value;\n            const yValue = contextPlugin.inputY.value;\n            if (contextPlugin.proportion.checked && /\\d+/.test(xValue) && /\\d+/.test(yValue)) {\n                const xUnit = xValue.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                const yUnit = yValue.replace(/\\d+|\\./g, \"\") || contextPlugin.sizeUnit;\n                if (xUnit !== yUnit) {\n                    contextPlugin._ratio = false;\n                } else if (!contextPlugin._ratio) {\n                    const x = this.util.getNumber(xValue, 0);\n                    const y = this.util.getNumber(yValue, 0);\n                    contextPlugin._ratio = true;\n                    contextPlugin._ratioX = x / y;\n                    contextPlugin._ratioY = y / x;\n                }\n            } else {\n                contextPlugin._ratio = false;\n            }\n        },\n        /**\n         * @description Revert size of element to origin size (plugin._origin_w, plugin._origin_h)\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         */ _module_sizeRevert: function(contextPlugin) {\n            if (contextPlugin._onlyPercentage) {\n                contextPlugin.inputX.value = contextPlugin._origin_w > 100 ? 100 : contextPlugin._origin_w;\n            } else {\n                contextPlugin.inputX.value = contextPlugin._origin_w;\n                contextPlugin.inputY.value = contextPlugin._origin_h;\n            }\n        },\n        /**\n         * @description Save the size data (element.setAttribute(\"data-size\"))\n         * Used at the \"setSize\" method\n         * @param {Object} contextPlugin context object of plugin (core.context[plugin])\n         */ _module_saveCurrentSize: function(contextPlugin) {\n            const x = this.plugins.resizing._module_getSizeX.call(this, contextPlugin);\n            const y = this.plugins.resizing._module_getSizeY.call(this, contextPlugin);\n            // add too width, height attribute\n            contextPlugin._element.setAttribute(\"width\", x.replace(\"px\", \"\"));\n            contextPlugin._element.setAttribute(\"height\", y.replace(\"px\", \"\"));\n            contextPlugin._element.setAttribute(\"data-size\", x + \",\" + y);\n            if (!!contextPlugin._videoRatio) contextPlugin._videoRatio = y;\n        },\n        /**\n         * @description Call the resizing module\n         * @param {Element} targetElement Resizing target element\n         * @param {string} plugin Plugin name\n         * @returns {Object} Size of resizing div {w, h, t, l}\n         */ call_controller_resize: function(targetElement, plugin) {\n            const contextResizing = this.context.resizing;\n            const contextPlugin = this.context[plugin];\n            contextResizing._resize_plugin = plugin;\n            const resizeContainer = contextResizing.resizeContainer;\n            const resizeDiv = contextResizing.resizeDiv;\n            const offset = this.util.getOffset(targetElement, this.context.element.wysiwygFrame);\n            const isVertical = contextResizing._rotateVertical = /^(90|270)$/.test(Math.abs(targetElement.getAttribute(\"data-rotate\")).toString());\n            const w = isVertical ? targetElement.offsetHeight : targetElement.offsetWidth;\n            const h = isVertical ? targetElement.offsetWidth : targetElement.offsetHeight;\n            const t = offset.top;\n            const l = offset.left - this.context.element.wysiwygFrame.scrollLeft;\n            resizeContainer.style.top = t + \"px\";\n            resizeContainer.style.left = l + \"px\";\n            resizeContainer.style.width = w + \"px\";\n            resizeContainer.style.height = h + \"px\";\n            resizeDiv.style.top = \"0px\";\n            resizeDiv.style.left = \"0px\";\n            resizeDiv.style.width = w + \"px\";\n            resizeDiv.style.height = h + \"px\";\n            let align = targetElement.getAttribute(\"data-align\") || \"basic\";\n            align = align === \"none\" ? \"basic\" : align;\n            // text\n            const container = this.util.getParentElement(targetElement, this.util.isComponent);\n            const cover = this.util.getParentElement(targetElement, \"FIGURE\");\n            const displayX = this.plugins.resizing._module_getSizeX.call(this, contextPlugin, targetElement, cover, container) || \"auto\";\n            const displayY = contextPlugin._onlyPercentage && plugin === \"image\" ? \"\" : \", \" + (this.plugins.resizing._module_getSizeY.call(this, contextPlugin, targetElement, cover, container) || \"auto\");\n            this.util.changeTxt(contextResizing.resizeDisplay, this.lang.dialogBox[align] + \" (\" + displayX + displayY + \")\");\n            // resizing display\n            contextResizing.resizeButtonGroup.style.display = contextPlugin._resizing ? \"\" : \"none\";\n            const resizeDotShow = contextPlugin._resizing && !contextPlugin._resizeDotHide && !contextPlugin._onlyPercentage ? \"flex\" : \"none\";\n            const resizeHandles = contextResizing.resizeHandles;\n            for(let i = 0, len = resizeHandles.length; i < len; i++){\n                resizeHandles[i].style.display = resizeDotShow;\n            }\n            if (contextPlugin._resizing) {\n                const rotations = contextResizing.rotationButtons;\n                rotations[0].style.display = rotations[1].style.display = contextPlugin._rotation ? \"\" : \"none\";\n            }\n            // align icon\n            if (contextPlugin._alignHide) {\n                contextResizing.alignButton.style.display = \"none\";\n            } else {\n                contextResizing.alignButton.style.display = \"\";\n                const alignList = contextResizing.alignMenuList;\n                this.util.changeElement(contextResizing.alignButton.firstElementChild, contextResizing.alignIcons[align]);\n                for(let i = 0, len = alignList.length; i < len; i++){\n                    if (alignList[i].getAttribute(\"data-value\") === align) this.util.addClass(alignList[i], \"on\");\n                    else this.util.removeClass(alignList[i], \"on\");\n                }\n            }\n            // percentage active\n            const pButtons = contextResizing.percentageButtons;\n            const value = /%$/.test(targetElement.style.width) && /%$/.test(container.style.width) ? this.util.getNumber(container.style.width, 0) / 100 + \"\" : \"\";\n            for(let i = 0, len = pButtons.length; i < len; i++){\n                if (pButtons[i].getAttribute(\"data-value\") === value) {\n                    this.util.addClass(pButtons[i], \"active\");\n                } else {\n                    this.util.removeClass(pButtons[i], \"active\");\n                }\n            }\n            // caption display, active\n            if (!contextPlugin._captionShow) {\n                contextResizing.captionButton.style.display = \"none\";\n            } else {\n                contextResizing.captionButton.style.display = \"\";\n                if (this.util.getChildElement(targetElement.parentNode, \"figcaption\")) {\n                    this.util.addClass(contextResizing.captionButton, \"active\");\n                    contextPlugin._captionChecked = true;\n                } else {\n                    this.util.removeClass(contextResizing.captionButton, \"active\");\n                    contextPlugin._captionChecked = false;\n                }\n            }\n            resizeContainer.style.display = \"block\";\n            const addOffset = {\n                left: 0,\n                top: 50\n            };\n            if (this.options.iframe) {\n                addOffset.left -= this.context.element.wysiwygFrame.parentElement.offsetLeft;\n                addOffset.top -= this.context.element.wysiwygFrame.parentElement.offsetTop;\n            }\n            this.setControllerPosition(contextResizing.resizeButton, resizeContainer, \"bottom\", addOffset);\n            const onControlsOff = function() {\n                this.util.setDisabledButtons.call(this.util, false, this.resizingDisabledButtons);\n                this.history._resetCachingButton();\n            };\n            this.controllersOn(resizeContainer, contextResizing.resizeButton, onControlsOff.bind(this), targetElement, plugin);\n            this.util.setDisabledButtons(true, this.resizingDisabledButtons);\n            contextResizing._resize_w = w;\n            contextResizing._resize_h = h;\n            const originSize = (targetElement.getAttribute(\"origin-size\") || \"\").split(\",\");\n            contextResizing._origin_w = originSize[0] || targetElement.naturalWidth;\n            contextResizing._origin_h = originSize[1] || targetElement.naturalHeight;\n            return {\n                w: w,\n                h: h,\n                t: t,\n                l: l\n            };\n        },\n        _closeAlignMenu: null,\n        /**\n         * @description Open align submenu of module\n         */ openAlignMenu: function() {\n            const alignButton = this.context.resizing.alignButton;\n            this.util.addClass(alignButton, \"on\");\n            this.context.resizing.alignMenu.style.top = alignButton.offsetTop + alignButton.offsetHeight + \"px\";\n            this.context.resizing.alignMenu.style.left = alignButton.offsetLeft - alignButton.offsetWidth / 2 + \"px\";\n            this.context.resizing.alignMenu.style.display = \"block\";\n            this.plugins.resizing._closeAlignMenu = (function() {\n                this.util.removeClass(this.context.resizing.alignButton, \"on\");\n                this.context.resizing.alignMenu.style.display = \"none\";\n                this.removeDocEvent(\"click\", this.plugins.resizing._closeAlignMenu);\n                this.plugins.resizing._closeAlignMenu = null;\n            }).bind(this);\n            this.addDocEvent(\"click\", this.plugins.resizing._closeAlignMenu);\n        },\n        /**\n         * @description Click event of resizing toolbar\n         * Performs the action of the clicked toolbar button.\n         * @param {MouseEvent} e Event object\n         */ onClick_resizeButton: function(e) {\n            e.stopPropagation();\n            const target = e.target;\n            const command = target.getAttribute(\"data-command\") || target.parentNode.getAttribute(\"data-command\");\n            if (!command) return;\n            const value = target.getAttribute(\"data-value\") || target.parentNode.getAttribute(\"data-value\");\n            const pluginName = this.context.resizing._resize_plugin;\n            const currentContext = this.context[pluginName];\n            const contextEl = currentContext._element;\n            const currentModule = this.plugins[pluginName];\n            e.preventDefault();\n            if (typeof this.plugins.resizing._closeAlignMenu === \"function\") {\n                this.plugins.resizing._closeAlignMenu();\n                if (command === \"onalign\") return;\n            }\n            switch(command){\n                case \"auto\":\n                    this.plugins.resizing.resetTransform.call(this, contextEl);\n                    currentModule.setAutoSize.call(this);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"percent\":\n                    let percentY = this.plugins.resizing._module_getSizeY.call(this, currentContext);\n                    if (this.context.resizing._rotateVertical) {\n                        const percentage = contextEl.getAttribute(\"data-percentage\");\n                        if (percentage) percentY = percentage.split(\",\")[1];\n                    }\n                    this.plugins.resizing.resetTransform.call(this, contextEl);\n                    currentModule.setPercentSize.call(this, value * 100, this.util.getNumber(percentY, 0) === null || !/%$/.test(percentY) ? \"\" : percentY);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"mirror\":\n                    const r = contextEl.getAttribute(\"data-rotate\") || \"0\";\n                    let x = contextEl.getAttribute(\"data-rotateX\") || \"\";\n                    let y = contextEl.getAttribute(\"data-rotateY\") || \"\";\n                    if (value === \"h\" && !this.context.resizing._rotateVertical || value === \"v\" && this.context.resizing._rotateVertical) {\n                        y = y ? \"\" : \"180\";\n                    } else {\n                        x = x ? \"\" : \"180\";\n                    }\n                    contextEl.setAttribute(\"data-rotateX\", x);\n                    contextEl.setAttribute(\"data-rotateY\", y);\n                    this.plugins.resizing._setTransForm(contextEl, r, x, y);\n                    break;\n                case \"rotate\":\n                    const contextResizing = this.context.resizing;\n                    const slope = contextEl.getAttribute(\"data-rotate\") * 1 + value * 1;\n                    const deg = this._w.Math.abs(slope) >= 360 ? 0 : slope;\n                    contextEl.setAttribute(\"data-rotate\", deg);\n                    contextResizing._rotateVertical = /^(90|270)$/.test(this._w.Math.abs(deg).toString());\n                    this.plugins.resizing.setTransformSize.call(this, contextEl, null, null);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"onalign\":\n                    this.plugins.resizing.openAlignMenu.call(this);\n                    return;\n                case \"align\":\n                    const alignValue = value === \"basic\" ? \"none\" : value;\n                    currentModule.setAlign.call(this, alignValue, null, null, null);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"caption\":\n                    const caption = !currentContext._captionChecked;\n                    currentModule.openModify.call(this, true);\n                    currentContext._captionChecked = currentContext.captionCheckEl.checked = caption;\n                    currentModule.update_image.call(this, false, false, false);\n                    if (caption) {\n                        const captionText = this.util.getChildElement(currentContext._caption, function(current) {\n                            return current.nodeType === 3;\n                        });\n                        if (!captionText) {\n                            currentContext._caption.focus();\n                        } else {\n                            this.setRange(captionText, 0, captionText, captionText.textContent.length);\n                        }\n                        this.controllersOff();\n                    } else {\n                        this.selectComponent(contextEl, pluginName);\n                        currentModule.openModify.call(this, true);\n                    }\n                    break;\n                case \"revert\":\n                    currentModule.setOriginSize.call(this);\n                    this.selectComponent(contextEl, pluginName);\n                    break;\n                case \"update\":\n                    currentModule.openModify.call(this);\n                    this.controllersOff();\n                    break;\n                case \"delete\":\n                    currentModule.destroy.call(this);\n                    break;\n            }\n            // history stack\n            this.history.push(false);\n        },\n        /**\n         * @description Initialize the transform style (rotation) of the element.\n         * @param {Element} element Target element\n         */ resetTransform: function(element) {\n            const size = (element.getAttribute(\"data-size\") || element.getAttribute(\"data-origin\") || \"\").split(\",\");\n            this.context.resizing._rotateVertical = false;\n            element.style.maxWidth = \"\";\n            element.style.transform = \"\";\n            element.style.transformOrigin = \"\";\n            element.setAttribute(\"data-rotate\", \"\");\n            element.setAttribute(\"data-rotateX\", \"\");\n            element.setAttribute(\"data-rotateY\", \"\");\n            this.plugins[this.context.resizing._resize_plugin].setSize.call(this, size[0] ? size[0] : \"auto\", size[1] ? size[1] : \"\", true);\n        },\n        /**\n         * @description Set the transform style (rotation) of the element.\n         * @param {Element} element Target element\n         * @param {Number|null} width Element's width size\n         * @param {Number|null} height Element's height size\n         */ setTransformSize: function(element, width, height) {\n            let percentage = element.getAttribute(\"data-percentage\");\n            const isVertical = this.context.resizing._rotateVertical;\n            const deg = element.getAttribute(\"data-rotate\") * 1;\n            let transOrigin = \"\";\n            if (percentage && !isVertical) {\n                percentage = percentage.split(\",\");\n                if (percentage[0] === \"auto\" && percentage[1] === \"auto\") {\n                    this.plugins[this.context.resizing._resize_plugin].setAutoSize.call(this);\n                } else {\n                    this.plugins[this.context.resizing._resize_plugin].setPercentSize.call(this, percentage[0], percentage[1]);\n                }\n            } else {\n                const cover = this.util.getParentElement(element, \"FIGURE\");\n                const offsetW = width || element.offsetWidth;\n                const offsetH = height || element.offsetHeight;\n                const w = (isVertical ? offsetH : offsetW) + \"px\";\n                const h = (isVertical ? offsetW : offsetH) + \"px\";\n                this.plugins[this.context.resizing._resize_plugin].cancelPercentAttr.call(this);\n                this.plugins[this.context.resizing._resize_plugin].setSize.call(this, offsetW + \"px\", offsetH + \"px\", true);\n                cover.style.width = w;\n                cover.style.height = !!this.context[this.context.resizing._resize_plugin]._caption ? \"\" : h;\n                if (isVertical) {\n                    let transW = offsetW / 2 + \"px \" + offsetW / 2 + \"px 0\";\n                    let transH = offsetH / 2 + \"px \" + offsetH / 2 + \"px 0\";\n                    transOrigin = deg === 90 || deg === -270 ? transH : transW;\n                }\n            }\n            element.style.transformOrigin = transOrigin;\n            this.plugins.resizing._setTransForm(element, deg.toString(), element.getAttribute(\"data-rotateX\") || \"\", element.getAttribute(\"data-rotateY\") || \"\");\n            if (isVertical) element.style.maxWidth = \"none\";\n            else element.style.maxWidth = \"\";\n            this.plugins.resizing.setCaptionPosition.call(this, element);\n        },\n        _setTransForm: function(element, r, x, y) {\n            let width = (element.offsetWidth - element.offsetHeight) * (/-/.test(r) ? 1 : -1);\n            let translate = \"\";\n            if (/[1-9]/.test(r) && (x || y)) {\n                translate = x ? \"Y\" : \"X\";\n                switch(r){\n                    case \"90\":\n                        translate = x && y ? \"X\" : y ? translate : \"\";\n                        break;\n                    case \"270\":\n                        width *= -1;\n                        translate = x && y ? \"Y\" : x ? translate : \"\";\n                        break;\n                    case \"-90\":\n                        translate = x && y ? \"Y\" : x ? translate : \"\";\n                        break;\n                    case \"-270\":\n                        width *= -1;\n                        translate = x && y ? \"X\" : y ? translate : \"\";\n                        break;\n                    default:\n                        translate = \"\";\n                }\n            }\n            if (r % 180 === 0) {\n                element.style.maxWidth = \"\";\n            }\n            element.style.transform = \"rotate(\" + r + \"deg)\" + (x ? \" rotateX(\" + x + \"deg)\" : \"\") + (y ? \" rotateY(\" + y + \"deg)\" : \"\") + (translate ? \" translate\" + translate + \"(\" + width + \"px)\" : \"\");\n        },\n        /**\n         * @description The position of the caption is set automatically.\n         * @param {Element} element Target element (not caption element)\n         */ setCaptionPosition: function(element) {\n            const figcaption = this.util.getChildElement(this.util.getParentElement(element, \"FIGURE\"), \"FIGCAPTION\");\n            if (figcaption) {\n                figcaption.style.marginTop = (this.context.resizing._rotateVertical ? element.offsetWidth - element.offsetHeight : 0) + \"px\";\n            }\n        },\n        /**\n         * @description Mouse down event of resize handles\n         * @param {MouseEvent} e Event object \n         */ onMouseDown_resize_handle: function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            const contextResizing = this.context.resizing;\n            const direction = contextResizing._resize_direction = e.target.classList[0];\n            contextResizing._resizeClientX = e.clientX;\n            contextResizing._resizeClientY = e.clientY;\n            this.context.element.resizeBackground.style.display = \"block\";\n            contextResizing.resizeButton.style.display = \"none\";\n            contextResizing.resizeDiv.style.float = /l/.test(direction) ? \"right\" : /r/.test(direction) ? \"left\" : \"none\";\n            const closureFunc_bind = (function closureFunc(e) {\n                if (e.type === \"keydown\" && e.keyCode !== 27) return;\n                const change = contextResizing._isChange;\n                contextResizing._isChange = false;\n                this.removeDocEvent(\"mousemove\", resizing_element_bind);\n                this.removeDocEvent(\"mouseup\", closureFunc_bind);\n                this.removeDocEvent(\"keydown\", closureFunc_bind);\n                if (e.type === \"keydown\") {\n                    this.controllersOff();\n                    this.context.element.resizeBackground.style.display = \"none\";\n                    this.plugins[this.context.resizing._resize_plugin].init.call(this);\n                } else {\n                    // element resize\n                    this.plugins.resizing.cancel_controller_resize.call(this, direction);\n                    // history stack\n                    if (change) this.history.push(false);\n                }\n            }).bind(this);\n            const resizing_element_bind = this.plugins.resizing.resizing_element.bind(this, contextResizing, direction, this.context[contextResizing._resize_plugin]);\n            this.addDocEvent(\"mousemove\", resizing_element_bind);\n            this.addDocEvent(\"mouseup\", closureFunc_bind);\n            this.addDocEvent(\"keydown\", closureFunc_bind);\n        },\n        /**\n         * @description Mouse move event after call \"onMouseDown_resize_handle\" of resize handles\n         * The size of the module's \"div\" is adjusted according to the mouse move event.\n         * @param {Object} contextResizing \"core.context.resizing\" object (binding argument)\n         * @param {String} direction Direction (\"tl\", \"tr\", \"bl\", \"br\", \"lw\", \"th\", \"rw\", \"bh\") (binding argument)\n         * @param {Object} plugin \"core.context[currentPlugin]\" object (binding argument)\n         * @param {MouseEvent} e Event object\n         */ resizing_element: function(contextResizing, direction, plugin, e) {\n            const clientX = e.clientX;\n            const clientY = e.clientY;\n            let resultW = plugin._element_w;\n            let resultH = plugin._element_h;\n            const w = plugin._element_w + (/r/.test(direction) ? clientX - contextResizing._resizeClientX : contextResizing._resizeClientX - clientX);\n            const h = plugin._element_h + (/b/.test(direction) ? clientY - contextResizing._resizeClientY : contextResizing._resizeClientY - clientY);\n            const wh = plugin._element_h / plugin._element_w * w;\n            if (/t/.test(direction)) contextResizing.resizeDiv.style.top = plugin._element_h - (/h/.test(direction) ? h : wh) + \"px\";\n            if (/l/.test(direction)) contextResizing.resizeDiv.style.left = plugin._element_w - w + \"px\";\n            if (/r|l/.test(direction)) {\n                contextResizing.resizeDiv.style.width = w + \"px\";\n                resultW = w;\n            }\n            if (/^(t|b)[^h]$/.test(direction)) {\n                contextResizing.resizeDiv.style.height = wh + \"px\";\n                resultH = wh;\n            } else if (/^(t|b)h$/.test(direction)) {\n                contextResizing.resizeDiv.style.height = h + \"px\";\n                resultH = h;\n            }\n            contextResizing._resize_w = resultW;\n            contextResizing._resize_h = resultH;\n            this.util.changeTxt(contextResizing.resizeDisplay, this._w.Math.round(resultW) + \" x \" + this._w.Math.round(resultH));\n            contextResizing._isChange = true;\n        },\n        /**\n         * @description Resize the element to the size of the \"div\" adjusted in the \"resizing_element\" method.\n         * Called at the mouse-up event registered in \"onMouseDown_resize_handle\".\n         * @param {String} direction Direction (\"tl\", \"tr\", \"bl\", \"br\", \"lw\", \"th\", \"rw\", \"bh\")\n         */ cancel_controller_resize: function(direction) {\n            const isVertical = this.context.resizing._rotateVertical;\n            this.controllersOff();\n            this.context.element.resizeBackground.style.display = \"none\";\n            let w = this._w.Math.round(isVertical ? this.context.resizing._resize_h : this.context.resizing._resize_w);\n            let h = this._w.Math.round(isVertical ? this.context.resizing._resize_w : this.context.resizing._resize_h);\n            if (!isVertical && !/%$/.test(w)) {\n                const padding = 16;\n                const limit = this.context.element.wysiwygFrame.clientWidth - padding * 2 - 2;\n                if (this.util.getNumber(w, 0) > limit) {\n                    h = this._w.Math.round(h / w * limit);\n                    w = limit;\n                }\n            }\n            const pluginName = this.context.resizing._resize_plugin;\n            this.plugins[pluginName].setSize.call(this, w, h, false, direction);\n            if (isVertical) this.plugins.resizing.setTransformSize.call(this, this.context[this.context.resizing._resize_plugin]._element, w, h);\n            this.selectComponent(this.context[pluginName]._element, pluginName);\n        }\n    };\n    if (typeof noGlobal === typeof undefined) {\n        if (!window1.SUNEDITOR_MODULES) {\n            Object.defineProperty(window1, \"SUNEDITOR_MODULES\", {\n                enumerable: true,\n                writable: false,\n                configurable: false,\n                value: {}\n            });\n        }\n        Object.defineProperty(window1.SUNEDITOR_MODULES, \"resizing\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: resizing\n        });\n    }\n    return resizing;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/resizing.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/align.js":
/*!*************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/align.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"align\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const icons = core.icons;\n        const context = core.context;\n        context.align = {\n            targetButton: targetElement,\n            _itemMenu: null,\n            _alignList: null,\n            currentAlign: \"\",\n            defaultDir: core.options.rtl ? \"right\" : \"left\",\n            icons: {\n                justify: icons.align_justify,\n                left: icons.align_left,\n                right: icons.align_right,\n                center: icons.align_center\n            }\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = context.align._itemMenu = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.align._alignList = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const listDiv = core.util.createElement(\"DIV\");\n        const alignItems = core.options.alignItems;\n        let html = \"\";\n        for(let i = 0, item, text; i < alignItems.length; i++){\n            item = alignItems[i];\n            text = lang.toolbar[\"align\" + item.charAt(0).toUpperCase() + item.slice(1)];\n            html += \"<li>\" + '<button type=\"button\" class=\"se-btn-list se-btn-align\" data-value=\"' + item + '\" title=\"' + text + '\" aria-label=\"' + text + '\">' + '<span class=\"se-list-icon\">' + icons[\"align_\" + item] + \"</span>\" + text + \"</button>\" + \"</li>\";\n        }\n        listDiv.className = \"se-submenu se-list-layer se-list-align\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + html + \"</ul>\" + \"</div>\";\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        const alignContext = this.context.align;\n        const targetButton = alignContext.targetButton;\n        const target = targetButton.firstElementChild;\n        if (!element) {\n            this.util.changeElement(target, alignContext.icons[alignContext.defaultDir]);\n            targetButton.removeAttribute(\"data-focus\");\n        } else if (this.util.isFormatElement(element)) {\n            const textAlign = element.style.textAlign;\n            if (textAlign) {\n                this.util.changeElement(target, alignContext.icons[textAlign] || alignContext.icons[alignContext.defaultDir]);\n                targetButton.setAttribute(\"data-focus\", textAlign);\n                return true;\n            }\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const alignContext = this.context.align;\n        const alignList = alignContext._alignList;\n        const currentAlign = alignContext.targetButton.getAttribute(\"data-focus\") || alignContext.defaultDir;\n        if (currentAlign !== alignContext.currentAlign) {\n            for(let i = 0, len = alignList.length; i < len; i++){\n                if (currentAlign === alignList[i].getAttribute(\"data-value\")) {\n                    this.util.addClass(alignList[i], \"active\");\n                } else {\n                    this.util.removeClass(alignList[i], \"active\");\n                }\n            }\n            alignContext.currentAlign = currentAlign;\n        }\n    },\n    exchangeDir: function() {\n        const dir = this.options.rtl ? \"right\" : \"left\";\n        if (!this.context.align || this.context.align.defaultDir === dir) return;\n        this.context.align.defaultDir = dir;\n        let menu = this.context.align._itemMenu;\n        let leftBtn = menu.querySelector('[data-value=\"left\"]');\n        let rightBtn = menu.querySelector('[data-value=\"right\"]');\n        if (leftBtn && rightBtn) {\n            const lp = leftBtn.parentElement;\n            const rp = rightBtn.parentElement;\n            lp.appendChild(rightBtn);\n            rp.appendChild(leftBtn);\n        }\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let value = null;\n        while(!value && !/UL/i.test(target.tagName)){\n            value = target.getAttribute(\"data-value\");\n            target = target.parentNode;\n        }\n        if (!value) return;\n        const defaultDir = this.context.align.defaultDir;\n        const selectedFormsts = this.getSelectedElements();\n        for(let i = 0, len = selectedFormsts.length; i < len; i++){\n            this.util.setStyle(selectedFormsts[i], \"textAlign\", value === defaultDir ? \"\" : value);\n        }\n        this.effectNode = null;\n        this.submenuOff();\n        this.focus();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/align.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/font.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/font.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"font\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.font = {\n            targetText: targetElement.querySelector(\".txt\"),\n            targetTooltip: targetElement.parentNode.querySelector(\".se-tooltip-text\"),\n            _fontList: null,\n            currentFont: \"\"\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\".se-list-inner\").addEventListener(\"click\", this.pickup.bind(core));\n        context.font._fontList = listDiv.querySelectorAll(\"ul li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-font-family\";\n        let font, text, i, len;\n        let fontList = core.options.font;\n        let list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + \")</button></li>\";\n        for(i = 0, len = fontList.length; i < len; i++){\n            font = fontList[i];\n            text = font.split(\",\")[0];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + font + '\" data-txt=\"' + text + '\" title=\"' + text + '\" aria-label=\"' + text + '\" style=\"font-family:' + font + ';\">' + text + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        const target = this.context.font.targetText;\n        const tooltip = this.context.font.targetTooltip;\n        if (!element) {\n            const font = this.hasFocus ? this.wwComputedStyle.fontFamily : this.lang.toolbar.font;\n            this.util.changeTxt(target, font);\n            this.util.changeTxt(tooltip, this.hasFocus ? this.lang.toolbar.font + (font ? \" (\" + font + \")\" : \"\") : font);\n        } else if (element.style && element.style.fontFamily.length > 0) {\n            const selectFont = element.style.fontFamily.replace(/[\"']/g, \"\");\n            this.util.changeTxt(target, selectFont);\n            this.util.changeTxt(tooltip, this.lang.toolbar.font + \" (\" + selectFont + \")\");\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const fontContext = this.context.font;\n        const fontList = fontContext._fontList;\n        const currentFont = fontContext.targetText.textContent;\n        if (currentFont !== fontContext.currentFont) {\n            for(let i = 0, len = fontList.length; i < len; i++){\n                if (currentFont === (fontList[i].getAttribute(\"data-value\") || \"\").replace(/'|\"/g, \"\")) {\n                    this.util.addClass(fontList[i], \"active\");\n                } else {\n                    this.util.removeClass(fontList[i], \"active\");\n                }\n            }\n            fontContext.currentFont = currentFont;\n        }\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        let value = e.target.getAttribute(\"data-value\");\n        if (value) {\n            const newNode = this.util.createElement(\"SPAN\");\n            if (/[\\s\\d\\W]/.test(value) && !/^['\"].*['\"]$/.test(value)) {\n                value = '\"' + value + '\"';\n            }\n            newNode.style.fontFamily = value;\n            this.nodeChange(newNode, [\n                \"font-family\"\n            ], null, null);\n        } else {\n            this.nodeChange(null, [\n                \"font-family\"\n            ], [\n                \"span\"\n            ], true);\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/font.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/fontColor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/fontColor.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/_colorPicker */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"fontColor\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        core.addModule([\n            _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n        ]);\n        const context = core.context;\n        context.fontColor = {\n            previewEl: null,\n            colorInput: null,\n            colorList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        context.fontColor.colorInput = listDiv.querySelector(\"._se_color_picker_input\");\n        /** add event listeners */ context.fontColor.colorInput.addEventListener(\"keyup\", this.onChangeInput.bind(core));\n        listDiv.querySelector(\"._se_color_picker_submit\").addEventListener(\"click\", this.submit.bind(core));\n        listDiv.querySelector(\"._se_color_picker_remove\").addEventListener(\"click\", this.remove.bind(core));\n        listDiv.addEventListener(\"click\", this.pickup.bind(core));\n        context.fontColor.colorList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const colorArea = core.context.colorPicker.colorListHTML;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        listDiv.innerHTML = colorArea;\n        return listDiv;\n    },\n    /**\r\n     * @Override submenu\r\n     */ on: function() {\n        const contextPicker = this.context.colorPicker;\n        const contextFontColor = this.context.fontColor;\n        contextPicker._colorInput = contextFontColor.colorInput;\n        const color = this.wwComputedStyle.color;\n        contextPicker._defaultColor = color ? this.plugins.colorPicker.isHexColor(color) ? color : this.plugins.colorPicker.rgb2hex(color) : \"#333333\";\n        contextPicker._styleProperty = \"color\";\n        contextPicker._colorList = contextFontColor.colorList;\n        this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);\n    },\n    /**\r\n     * @Override _colorPicker\r\n     */ onChangeInput: function(e) {\n        this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);\n    },\n    submit: function() {\n        this.plugins.fontColor.applyColor.call(this, this.context.colorPicker._currentColor);\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.fontColor.applyColor.call(this, e.target.getAttribute(\"data-value\"));\n    },\n    remove: function() {\n        this.nodeChange(null, [\n            \"color\"\n        ], [\n            \"span\"\n        ], true);\n        this.submenuOff();\n    },\n    applyColor: function(color) {\n        if (!color) return;\n        const newNode = this.util.createElement(\"SPAN\");\n        newNode.style.color = color;\n        this.nodeChange(newNode, [\n            \"color\"\n        ], null, null);\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/fontColor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/fontSize.js":
/*!****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/fontSize.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"fontSize\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.fontSize = {\n            targetText: targetElement.querySelector(\".txt\"),\n            _sizeList: null,\n            currentSize: \"\"\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.fontSize._sizeList = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-font-size\";\n        const sizeList = !option.fontSize ? [\n            8,\n            9,\n            10,\n            11,\n            12,\n            14,\n            16,\n            18,\n            20,\n            22,\n            24,\n            26,\n            28,\n            36,\n            48,\n            72\n        ] : option.fontSize;\n        let list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + \")</button></li>\";\n        for(let i = 0, unit = option.fontSizeUnit, len = sizeList.length, size; i < len; i++){\n            size = sizeList[i];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + size + unit + '\" title=\"' + size + unit + '\" aria-label=\"' + size + unit + '\" style=\"font-size:' + size + unit + ';\">' + size + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        if (!element) {\n            this.util.changeTxt(this.context.fontSize.targetText, this.hasFocus ? this._convertFontSize.call(this, this.options.fontSizeUnit, this.wwComputedStyle.fontSize) : this.lang.toolbar.fontSize);\n        } else if (element.style && element.style.fontSize.length > 0) {\n            this.util.changeTxt(this.context.fontSize.targetText, this._convertFontSize.call(this, this.options.fontSizeUnit, element.style.fontSize));\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const fontSizeContext = this.context.fontSize;\n        const sizeList = fontSizeContext._sizeList;\n        const currentSize = fontSizeContext.targetText.textContent;\n        if (currentSize !== fontSizeContext.currentSize) {\n            for(let i = 0, len = sizeList.length; i < len; i++){\n                if (currentSize === sizeList[i].getAttribute(\"data-value\")) {\n                    this.util.addClass(sizeList[i], \"active\");\n                } else {\n                    this.util.removeClass(sizeList[i], \"active\");\n                }\n            }\n            fontSizeContext.currentSize = currentSize;\n        }\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        const value = e.target.getAttribute(\"data-value\");\n        if (value) {\n            const newNode = this.util.createElement(\"SPAN\");\n            newNode.style.fontSize = value;\n            this.nodeChange(newNode, [\n                \"font-size\"\n            ], null, null);\n        } else {\n            this.nodeChange(null, [\n                \"font-size\"\n            ], [\n                \"span\"\n            ], true);\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/fontSize.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/formatBlock.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/formatBlock.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"formatBlock\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.formatBlock = {\n            targetText: targetElement.querySelector(\".txt\"),\n            targetTooltip: targetElement.parentNode.querySelector(\".se-tooltip-text\"),\n            _formatList: null,\n            currentFormat: \"\"\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\"ul\").addEventListener(\"click\", this.pickUp.bind(core));\n        context.formatBlock._formatList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const lang_toolbar = core.lang.toolbar;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-format\";\n        const defaultFormats = [\n            \"p\",\n            \"div\",\n            \"blockquote\",\n            \"pre\",\n            \"h1\",\n            \"h2\",\n            \"h3\",\n            \"h4\",\n            \"h5\",\n            \"h6\"\n        ];\n        const formatList = !option.formats || option.formats.length === 0 ? defaultFormats : option.formats;\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for(let i = 0, len = formatList.length, format, tagName, command, name, h, attrs, className; i < len; i++){\n            format = formatList[i];\n            if (typeof format === \"string\" && defaultFormats.indexOf(format) > -1) {\n                tagName = format.toLowerCase();\n                command = tagName === \"blockquote\" ? \"range\" : tagName === \"pre\" ? \"free\" : \"replace\";\n                h = /^h/.test(tagName) ? tagName.match(/\\d+/)[0] : \"\";\n                name = lang_toolbar[\"tag_\" + (h ? \"h\" : tagName)] + h;\n                className = \"\";\n                attrs = \"\";\n            } else {\n                tagName = format.tag.toLowerCase();\n                command = format.command;\n                name = format.name || tagName;\n                className = format.class;\n                attrs = className ? ' class=\"' + className + '\"' : \"\";\n            }\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list\" data-command=\"' + command + '\" data-value=\"' + tagName + '\" data-class=\"' + className + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + \"<\" + tagName + attrs + \">\" + name + \"</\" + tagName + \">\" + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        let formatTitle = this.lang.toolbar.formats;\n        const target = this.context.formatBlock.targetText;\n        if (!element) {\n            this.util.changeTxt(target, formatTitle);\n        } else if (this.util.isFormatElement(element)) {\n            const formatContext = this.context.formatBlock;\n            const formatList = formatContext._formatList;\n            const nodeName = element.nodeName.toLowerCase();\n            const className = (element.className.match(/(\\s|^)__se__format__[^\\s]+/) || [\n                \"\"\n            ])[0].trim();\n            for(let i = 0, len = formatList.length, f; i < len; i++){\n                f = formatList[i];\n                if (nodeName === f.getAttribute(\"data-value\") && className === f.getAttribute(\"data-class\")) {\n                    formatTitle = f.title;\n                    break;\n                }\n            }\n            this.util.changeTxt(target, formatTitle);\n            target.setAttribute(\"data-value\", nodeName);\n            target.setAttribute(\"data-class\", className);\n            return true;\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const formatContext = this.context.formatBlock;\n        const formatList = formatContext._formatList;\n        const target = formatContext.targetText;\n        const currentFormat = (target.getAttribute(\"data-value\") || \"\") + (target.getAttribute(\"data-class\") || \"\");\n        if (currentFormat !== formatContext.currentFormat) {\n            for(let i = 0, len = formatList.length, f; i < len; i++){\n                f = formatList[i];\n                if (currentFormat === f.getAttribute(\"data-value\") + f.getAttribute(\"data-class\")) {\n                    this.util.addClass(f, \"active\");\n                } else {\n                    this.util.removeClass(f, \"active\");\n                }\n            }\n            formatContext.currentFormat = currentFormat;\n        }\n    },\n    pickUp: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = null, value = null, tag = null, className = \"\";\n        while(!command && !/UL/i.test(target.tagName)){\n            command = target.getAttribute(\"data-command\");\n            value = target.getAttribute(\"data-value\");\n            className = target.getAttribute(\"data-class\");\n            if (command) {\n                tag = target.firstChild;\n                break;\n            }\n            target = target.parentNode;\n        }\n        if (!command) return;\n        // blockquote\n        if (command === \"range\") {\n            const rangeElement = tag.cloneNode(false);\n            this.applyRangeFormatElement(rangeElement);\n        } else {\n            let range = this.getRange();\n            let selectedFormsts = this.getSelectedElementsAndComponents(false);\n            if (selectedFormsts.length === 0) {\n                range = this.getRange_addLine(range, null);\n                selectedFormsts = this.getSelectedElementsAndComponents(false);\n                if (selectedFormsts.length === 0) return;\n            }\n            const startOffset = range.startOffset;\n            const endOffset = range.endOffset;\n            const util = this.util;\n            let first = selectedFormsts[0];\n            let last = selectedFormsts[selectedFormsts.length - 1];\n            const firstPath = util.getNodePath(range.startContainer, first, null, null);\n            const lastPath = util.getNodePath(range.endContainer, last, null, null);\n            // remove selected list\n            const rlist = this.detachList(selectedFormsts, false);\n            if (rlist.sc) first = rlist.sc;\n            if (rlist.ec) last = rlist.ec;\n            // change format tag\n            this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            const modifiedFormsts = this.getSelectedElementsAndComponents(false);\n            // free format\n            if (command === \"free\") {\n                const len = modifiedFormsts.length - 1;\n                let parentNode = modifiedFormsts[len].parentNode;\n                let freeElement = tag.cloneNode(false);\n                const focusElement = freeElement;\n                for(let i = len, f, html, before, next, inner, isComp, first = true; i >= 0; i--){\n                    f = modifiedFormsts[i];\n                    if (f === (!modifiedFormsts[i + 1] ? null : modifiedFormsts[i + 1].parentNode)) continue;\n                    isComp = util.isComponent(f);\n                    html = isComp ? \"\" : f.innerHTML.replace(/(?!>)\\s+(?=<)|\\n/g, \" \");\n                    before = util.getParentElement(f, function(current) {\n                        return current.parentNode === parentNode;\n                    });\n                    if (parentNode !== f.parentNode || isComp) {\n                        if (util.isFormatElement(parentNode)) {\n                            parentNode.parentNode.insertBefore(freeElement, parentNode.nextSibling);\n                            parentNode = parentNode.parentNode;\n                        } else {\n                            parentNode.insertBefore(freeElement, before ? before.nextSibling : null);\n                            parentNode = f.parentNode;\n                        }\n                        next = freeElement.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += \"<BR>\" + next.innerHTML;\n                            util.removeItem(next);\n                        }\n                        freeElement = tag.cloneNode(false);\n                        first = true;\n                    }\n                    inner = freeElement.innerHTML;\n                    freeElement.innerHTML = (first || !html || !inner || /<br>$/i.test(html) ? html : html + \"<BR>\") + inner;\n                    if (i === 0) {\n                        parentNode.insertBefore(freeElement, f);\n                        next = f.nextSibling;\n                        if (next && freeElement.nodeName === next.nodeName && util.isSameAttributes(freeElement, next)) {\n                            freeElement.innerHTML += \"<BR>\" + next.innerHTML;\n                            util.removeItem(next);\n                        }\n                        const prev = freeElement.previousSibling;\n                        if (prev && freeElement.nodeName === prev.nodeName && util.isSameAttributes(freeElement, prev)) {\n                            prev.innerHTML += \"<BR>\" + freeElement.innerHTML;\n                            util.removeItem(freeElement);\n                        }\n                    }\n                    if (!isComp) util.removeItem(f);\n                    if (!!html) first = false;\n                }\n                this.setRange(focusElement, 0, focusElement, 0);\n            } else {\n                for(let i = 0, len = modifiedFormsts.length, node, newFormat; i < len; i++){\n                    node = modifiedFormsts[i];\n                    if ((node.nodeName.toLowerCase() !== value.toLowerCase() || (node.className.match(/(\\s|^)__se__format__[^\\s]+/) || [\n                        \"\"\n                    ])[0].trim() !== className) && !util.isComponent(node)) {\n                        newFormat = tag.cloneNode(false);\n                        util.copyFormatAttributes(newFormat, node);\n                        newFormat.innerHTML = node.innerHTML;\n                        node.parentNode.replaceChild(newFormat, node);\n                    }\n                    if (i === 0) first = newFormat || node;\n                    if (i === len - 1) last = newFormat || node;\n                    newFormat = null;\n                }\n                this.setRange(util.getNodeFromPath(firstPath, first), startOffset, util.getNodeFromPath(lastPath, last), endOffset);\n            }\n            // history stack\n            this.history.push(false);\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/formatBlock.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/hiliteColor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/hiliteColor.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/_colorPicker */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/modules/_colorPicker.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"hiliteColor\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        core.addModule([\n            _modules_colorPicker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n        ]);\n        const context = core.context;\n        context.hiliteColor = {\n            previewEl: null,\n            colorInput: null,\n            colorList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        context.hiliteColor.colorInput = listDiv.querySelector(\"._se_color_picker_input\");\n        /** add event listeners */ context.hiliteColor.colorInput.addEventListener(\"keyup\", this.onChangeInput.bind(core));\n        listDiv.querySelector(\"._se_color_picker_submit\").addEventListener(\"click\", this.submit.bind(core));\n        listDiv.querySelector(\"._se_color_picker_remove\").addEventListener(\"click\", this.remove.bind(core));\n        listDiv.addEventListener(\"click\", this.pickup.bind(core));\n        context.hiliteColor.colorList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const colorArea = core.context.colorPicker.colorListHTML;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        listDiv.innerHTML = colorArea;\n        return listDiv;\n    },\n    /**\r\n     * @Override submenu\r\n     */ on: function() {\n        const contextPicker = this.context.colorPicker;\n        const contextHiliteColor = this.context.hiliteColor;\n        contextPicker._colorInput = contextHiliteColor.colorInput;\n        const color = this.wwComputedStyle.backgroundColor;\n        contextPicker._defaultColor = color ? this.plugins.colorPicker.isHexColor(color) ? color : this.plugins.colorPicker.rgb2hex(color) : \"#ffffff\";\n        contextPicker._styleProperty = \"backgroundColor\";\n        contextPicker._colorList = contextHiliteColor.colorList;\n        this.plugins.colorPicker.init.call(this, this.getSelectionNode(), null);\n    },\n    /**\r\n     * @Override _colorPicker\r\n     */ onChangeInput: function(e) {\n        this.plugins.colorPicker.setCurrentColor.call(this, e.target.value);\n    },\n    submit: function() {\n        this.plugins.hiliteColor.applyColor.call(this, this.context.colorPicker._currentColor);\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.plugins.hiliteColor.applyColor.call(this, e.target.getAttribute(\"data-value\"));\n    },\n    remove: function() {\n        this.nodeChange(null, [\n            \"background-color\"\n        ], [\n            \"span\"\n        ], true);\n        this.submenuOff();\n    },\n    applyColor: function(color) {\n        if (!color) return;\n        const newNode = this.util.createElement(\"SPAN\");\n        newNode.style.backgroundColor = color;\n        this.nodeChange(newNode, [\n            \"background-color\"\n        ], null, null);\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/hiliteColor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/horizontalRule.js":
/*!**********************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/horizontalRule.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"horizontalRule\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        core.context.horizontalRule = {\n            currentHR: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\"ul\").addEventListener(\"click\", this.horizontalRulePick.bind(core));\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        const items = core.options.hrItems || [\n            {\n                name: lang.toolbar.hr_solid,\n                class: \"__se__solid\"\n            },\n            {\n                name: lang.toolbar.hr_dashed,\n                class: \"__se__dashed\"\n            },\n            {\n                name: lang.toolbar.hr_dotted,\n                class: \"__se__dotted\"\n            }\n        ];\n        let list = \"\";\n        for(let i = 0, len = items.length; i < len; i++){\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list btn_line\" data-command=\"horizontalRule\" data-value=\"' + items[i].class + '\" title=\"' + items[i].name + '\" aria-label=\"' + items[i].name + '\">' + \"<hr\" + (items[i].class ? ' class=\"' + items[i].class + '\"' : \"\") + (items[i].style ? ' style=\"' + items[i].style + '\"' : \"\") + \"/>\" + \"</button>\" + \"</li>\";\n        }\n        listDiv.className = \"se-submenu se-list-layer se-list-line\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + list + \"</ul>\" + \"</div>\";\n        return listDiv;\n    },\n    active: function(element) {\n        if (!element) {\n            if (this.util.hasClass(this.context.horizontalRule.currentHR, \"on\")) {\n                this.controllersOff();\n            }\n        } else if (/HR/i.test(element.nodeName)) {\n            this.context.horizontalRule.currentHR = element;\n            if (!this.util.hasClass(element, \"on\")) {\n                this.util.addClass(element, \"on\");\n                this.controllersOn(\"hr\", this.util.removeClass.bind(this.util, element, \"on\"));\n            }\n            return true;\n        }\n        return false;\n    },\n    appendHr: function(hrTemp) {\n        this.focus();\n        return this.insertComponent(hrTemp.cloneNode(false), false, true, false);\n    },\n    horizontalRulePick: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = target.getAttribute(\"data-command\");\n        while(!command && !/UL/i.test(target.tagName)){\n            target = target.parentNode;\n            command = target.getAttribute(\"data-command\");\n        }\n        if (!command) return;\n        const oNode = this.plugins.horizontalRule.appendHr.call(this, target.firstElementChild);\n        if (oNode) {\n            this.setRange(oNode, 0, oNode, 0);\n            this.submenuOff();\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/horizontalRule.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/lineHeight.js":
/*!******************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/lineHeight.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 20197 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"lineHeight\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.lineHeight = {\n            _sizeList: null,\n            currentSize: -1\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.lineHeight._sizeList = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        const sizeList = !option.lineHeights ? [\n            {\n                text: \"1\",\n                value: 1\n            },\n            {\n                text: \"1.15\",\n                value: 1.15\n            },\n            {\n                text: \"1.5\",\n                value: 1.5\n            },\n            {\n                text: \"2\",\n                value: 2\n            }\n        ] : option.lineHeights;\n        let list = '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"default_value se-btn-list\" title=\"' + lang.toolbar.default + '\" aria-label=\"' + lang.toolbar.default + '\">(' + lang.toolbar.default + \")</button></li>\";\n        for(let i = 0, len = sizeList.length, size; i < len; i++){\n            size = sizeList[i];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + size.value + '\" title=\"' + size.text + '\" aria-label=\"' + size.text + '\">' + size.text + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const lineHeightContext = this.context.lineHeight;\n        const sizeList = lineHeightContext._sizeList;\n        const format = this.util.getFormatElement(this.getSelectionNode());\n        const currentSize = !format ? \"\" : format.style.lineHeight + \"\";\n        if (currentSize !== lineHeightContext.currentSize) {\n            for(let i = 0, len = sizeList.length; i < len; i++){\n                if (currentSize === sizeList[i].getAttribute(\"data-value\")) {\n                    this.util.addClass(sizeList[i], \"active\");\n                } else {\n                    this.util.removeClass(sizeList[i], \"active\");\n                }\n            }\n            lineHeightContext.currentSize = currentSize;\n        }\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        const value = e.target.getAttribute(\"data-value\") || \"\";\n        const formats = this.getSelectedElements();\n        for(let i = 0, len = formats.length; i < len; i++){\n            formats[i].style.lineHeight = value;\n        }\n        this.submenuOff();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/lineHeight.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/list.js":
/*!************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/list.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"list\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.list = {\n            targetButton: targetElement,\n            _list: null,\n            currentList: \"\",\n            icons: {\n                bullets: core.icons.list_bullets,\n                number: core.icons.list_number\n            }\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.list._list = listUl.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const lang = core.lang;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"OL\" title=\"' + lang.toolbar.orderList + '\" aria-label=\"' + lang.toolbar.orderList + '\">' + core.icons.list_number + \"</button></li>\" + '<li><button type=\"button\" class=\"se-btn-list se-tooltip\" data-command=\"UL\" title=\"' + lang.toolbar.unorderList + '\" aria-label=\"' + lang.toolbar.unorderList + '\">' + core.icons.list_bullets + \"</button></li>\" + \"</ul>\" + \"</div>\";\n        return listDiv;\n    },\n    /**\n     * @Override core\n     */ active: function(element) {\n        const button = this.context.list.targetButton;\n        const icon = button.firstElementChild;\n        const util = this.util;\n        if (util.isList(element)) {\n            const nodeName = element.nodeName;\n            button.setAttribute(\"data-focus\", nodeName);\n            util.addClass(button, \"active\");\n            if (/UL/i.test(nodeName)) {\n                util.changeElement(icon, this.context.list.icons.bullets);\n            } else {\n                util.changeElement(icon, this.context.list.icons.number);\n            }\n            return true;\n        } else {\n            button.removeAttribute(\"data-focus\");\n            util.changeElement(icon, this.context.list.icons.number);\n            util.removeClass(button, \"active\");\n        }\n        return false;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const listContext = this.context.list;\n        const list = listContext._list;\n        const currentList = listContext.targetButton.getAttribute(\"data-focus\") || \"\";\n        if (currentList !== listContext.currentList) {\n            for(let i = 0, len = list.length; i < len; i++){\n                if (currentList === list[i].getAttribute(\"data-command\")) {\n                    this.util.addClass(list[i], \"active\");\n                } else {\n                    this.util.removeClass(list[i], \"active\");\n                }\n            }\n            listContext.currentList = currentList;\n        }\n    },\n    editList: function(command, selectedCells, detach) {\n        let range = this.getRange();\n        let selectedFormats = !selectedCells ? this.getSelectedElementsAndComponents(false) : selectedCells;\n        if (selectedFormats.length === 0) {\n            if (selectedCells) return;\n            range = this.getRange_addLine(range, null);\n            selectedFormats = this.getSelectedElementsAndComponents(false);\n            if (selectedFormats.length === 0) return;\n        }\n        const util = this.util;\n        util.sortByDepth(selectedFormats, true);\n        // merge\n        let firstSel = selectedFormats[0];\n        let lastSel = selectedFormats[selectedFormats.length - 1];\n        let topEl = (util.isListCell(firstSel) || util.isComponent(firstSel)) && !firstSel.previousElementSibling ? firstSel.parentNode.previousElementSibling : firstSel.previousElementSibling;\n        let bottomEl = (util.isListCell(lastSel) || util.isComponent(lastSel)) && !lastSel.nextElementSibling ? lastSel.parentNode.nextElementSibling : lastSel.nextElementSibling;\n        const isCollapsed = range.collapsed;\n        const originRange = {\n            sc: range.startContainer,\n            so: range.startContainer === range.endContainer && util.onlyZeroWidthSpace(range.startContainer) && range.startOffset === 0 && range.endOffset === 1 ? range.endOffset : range.startOffset,\n            ec: range.endContainer,\n            eo: range.endOffset\n        };\n        let afterRange = null;\n        let isRemove = true;\n        for(let i = 0, len = selectedFormats.length; i < len; i++){\n            if (!util.isList(util.getRangeFormatElement(selectedFormats[i], (function(current) {\n                return this.getRangeFormatElement(current) && current !== selectedFormats[i];\n            }).bind(util)))) {\n                isRemove = false;\n                break;\n            }\n        }\n        if (isRemove && (!topEl || firstSel.tagName !== topEl.tagName || command !== topEl.tagName.toUpperCase()) && (!bottomEl || lastSel.tagName !== bottomEl.tagName || command !== bottomEl.tagName.toUpperCase())) {\n            if (detach) {\n                for(let i = 0, len = selectedFormats.length; i < len; i++){\n                    for(let j = i - 1; j >= 0; j--){\n                        if (selectedFormats[j].contains(selectedFormats[i])) {\n                            selectedFormats.splice(i, 1);\n                            i--;\n                            len--;\n                            break;\n                        }\n                    }\n                }\n            }\n            const currentFormat = util.getRangeFormatElement(firstSel);\n            const cancel = currentFormat && currentFormat.tagName === command;\n            let rangeArr, tempList;\n            const passComponent = (function(current) {\n                return !this.isComponent(current);\n            }).bind(util);\n            if (!cancel) tempList = util.createElement(command);\n            for(let i = 0, len = selectedFormats.length, r, o; i < len; i++){\n                o = util.getRangeFormatElement(selectedFormats[i], passComponent);\n                if (!o || !util.isList(o)) continue;\n                if (!r) {\n                    r = o;\n                    rangeArr = {\n                        r: r,\n                        f: [\n                            util.getParentElement(selectedFormats[i], \"LI\")\n                        ]\n                    };\n                } else {\n                    if (r !== o) {\n                        if (detach && util.isListCell(o.parentNode)) {\n                            this.plugins.list._detachNested.call(this, rangeArr.f);\n                        } else {\n                            afterRange = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);\n                        }\n                        o = selectedFormats[i].parentNode;\n                        if (!cancel) tempList = util.createElement(command);\n                        r = o;\n                        rangeArr = {\n                            r: r,\n                            f: [\n                                util.getParentElement(selectedFormats[i], \"LI\")\n                            ]\n                        };\n                    } else {\n                        rangeArr.f.push(util.getParentElement(selectedFormats[i], \"LI\"));\n                    }\n                }\n                if (i === len - 1) {\n                    if (detach && util.isListCell(o.parentNode)) {\n                        this.plugins.list._detachNested.call(this, rangeArr.f);\n                    } else {\n                        afterRange = this.detachRangeFormatElement(rangeArr.f[0].parentNode, rangeArr.f, tempList, false, true);\n                    }\n                }\n            }\n        } else {\n            const topElParent = topEl ? topEl.parentNode : topEl;\n            const bottomElParent = bottomEl ? bottomEl.parentNode : bottomEl;\n            topEl = topElParent && !util.isWysiwygDiv(topElParent) && topElParent.nodeName === command ? topElParent : topEl;\n            bottomEl = bottomElParent && !util.isWysiwygDiv(bottomElParent) && bottomElParent.nodeName === command ? bottomElParent : bottomEl;\n            const mergeTop = topEl && topEl.tagName === command;\n            const mergeBottom = bottomEl && bottomEl.tagName === command;\n            let list = mergeTop ? topEl : util.createElement(command);\n            let firstList = null;\n            let lastList = null;\n            let topNumber = null;\n            let bottomNumber = null;\n            const passComponent = (function(current) {\n                return !this.isComponent(current) && !this.isList(current);\n            }).bind(util);\n            for(let i = 0, len = selectedFormats.length, newCell, fTag, isCell, next, originParent, nextParent, parentTag, siblingTag, rangeTag; i < len; i++){\n                fTag = selectedFormats[i];\n                if (fTag.childNodes.length === 0 && !util._isIgnoreNodeChange(fTag)) {\n                    util.removeItem(fTag);\n                    continue;\n                }\n                next = selectedFormats[i + 1];\n                originParent = fTag.parentNode;\n                nextParent = next ? next.parentNode : null;\n                isCell = util.isListCell(fTag);\n                rangeTag = util.isRangeFormatElement(originParent) ? originParent : null;\n                parentTag = isCell && !util.isWysiwygDiv(originParent) ? originParent.parentNode : originParent;\n                siblingTag = isCell && !util.isWysiwygDiv(originParent) ? !next || util.isListCell(parentTag) ? originParent : originParent.nextSibling : fTag.nextSibling;\n                newCell = util.createElement(\"LI\");\n                util.copyFormatAttributes(newCell, fTag);\n                if (i === 0 && originRange.sc === fTag) {\n                    originRange.sc = newCell;\n                }\n                if (i === len - 1 && originRange.ec === fTag) {\n                    originRange.ec = newCell;\n                }\n                if (util.isComponent(fTag)) {\n                    const isHR = /^HR$/i.test(fTag.nodeName);\n                    if (!isHR) newCell.innerHTML = \"<br>\";\n                    newCell.innerHTML += fTag.outerHTML;\n                    if (isHR) newCell.innerHTML += \"<br>\";\n                } else {\n                    const fChildren = fTag.childNodes;\n                    while(fChildren[0]){\n                        newCell.appendChild(fChildren[0]);\n                    }\n                }\n                list.appendChild(newCell);\n                if (!next) lastList = list;\n                if (!next || parentTag !== nextParent || util.isRangeFormatElement(siblingTag)) {\n                    if (!firstList) firstList = list;\n                    if ((!mergeTop || !next || parentTag !== nextParent) && !(next && util.isList(nextParent) && nextParent === originParent)) {\n                        if (list.parentNode !== parentTag) parentTag.insertBefore(list, siblingTag);\n                    }\n                }\n                util.removeItem(fTag);\n                if (mergeTop && topNumber === null) topNumber = list.children.length - 1;\n                if (next && (util.getRangeFormatElement(nextParent, passComponent) !== util.getRangeFormatElement(originParent, passComponent) || util.isList(nextParent) && util.isList(originParent) && util.getElementDepth(nextParent) !== util.getElementDepth(originParent))) {\n                    list = util.createElement(command);\n                }\n                if (rangeTag && rangeTag.children.length === 0) util.removeItem(rangeTag);\n            }\n            if (topNumber) {\n                firstList = firstList.children[topNumber];\n            }\n            if (mergeBottom) {\n                bottomNumber = list.children.length - 1;\n                list.innerHTML += bottomEl.innerHTML;\n                lastList = list.children[bottomNumber];\n                util.removeItem(bottomEl);\n            }\n        }\n        this.effectNode = null;\n        return !isCollapsed ? originRange : afterRange;\n    },\n    _detachNested: function(cells) {\n        const first = cells[0];\n        const last = cells[cells.length - 1];\n        const next = last.nextElementSibling;\n        const originList = first.parentNode;\n        const sibling = originList.parentNode.nextElementSibling;\n        const parentNode = originList.parentNode.parentNode;\n        for(let c = 0, cLen = cells.length; c < cLen; c++){\n            parentNode.insertBefore(cells[c], sibling);\n        }\n        if (next && originList.children.length > 0) {\n            const newList = originList.cloneNode(false);\n            const children = originList.childNodes;\n            const index = this.util.getPositionIndex(next);\n            while(children[index]){\n                newList.appendChild(children[index]);\n            }\n            last.appendChild(newList);\n        }\n        if (originList.children.length === 0) this.util.removeItem(originList);\n        this.util.mergeSameTags(parentNode);\n        const edge = this.util.getEdgeChildNodes(first, last);\n        return {\n            cc: first.parentNode,\n            sc: edge.sc,\n            ec: edge.ec\n        };\n    },\n    editInsideList: function(remove, selectedCells) {\n        selectedCells = !selectedCells ? this.getSelectedElements().filter((function(el) {\n            return this.isListCell(el);\n        }).bind(this.util)) : selectedCells;\n        const cellsLen = selectedCells.length;\n        if (cellsLen === 0 || !remove && !this.util.isListCell(selectedCells[0].previousElementSibling) && !this.util.isListCell(selectedCells[cellsLen - 1].nextElementSibling)) {\n            return {\n                sc: selectedCells[0],\n                so: 0,\n                ec: selectedCells[cellsLen - 1],\n                eo: 1\n            };\n        }\n        let originList = selectedCells[0].parentNode;\n        let lastCell = selectedCells[cellsLen - 1];\n        let range = null;\n        if (remove) {\n            if (originList !== lastCell.parentNode && this.util.isList(lastCell.parentNode.parentNode) && lastCell.nextElementSibling) {\n                lastCell = lastCell.nextElementSibling;\n                while(lastCell){\n                    selectedCells.push(lastCell);\n                    lastCell = lastCell.nextElementSibling;\n                }\n            }\n            range = this.plugins.list.editList.call(this, originList.nodeName.toUpperCase(), selectedCells, true);\n        } else {\n            let innerList = this.util.createElement(originList.nodeName);\n            let prev = selectedCells[0].previousElementSibling;\n            let next = lastCell.nextElementSibling;\n            const nodePath = {\n                s: null,\n                e: null,\n                sl: originList,\n                el: originList\n            };\n            for(let i = 0, len = cellsLen, c; i < len; i++){\n                c = selectedCells[i];\n                if (c.parentNode !== originList) {\n                    this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);\n                    originList = c.parentNode;\n                    innerList = this.util.createElement(originList.nodeName);\n                }\n                prev = c.previousElementSibling;\n                next = c.nextElementSibling;\n                innerList.appendChild(c);\n            }\n            this.plugins.list._insiedList.call(this, originList, innerList, prev, next, nodePath);\n            const sc = this.util.getNodeFromPath(nodePath.s, nodePath.sl);\n            const ec = this.util.getNodeFromPath(nodePath.e, nodePath.el);\n            range = {\n                sc: sc,\n                so: 0,\n                ec: ec,\n                eo: ec.textContent.length\n            };\n        }\n        return range;\n    },\n    _insiedList: function(originList, innerList, prev, next, nodePath) {\n        let insertPrev = false;\n        if (prev && innerList.tagName === prev.tagName) {\n            const children = innerList.children;\n            while(children[0]){\n                prev.appendChild(children[0]);\n            }\n            innerList = prev;\n            insertPrev = true;\n        }\n        if (next && innerList.tagName === next.tagName) {\n            const children = next.children;\n            while(children[0]){\n                innerList.appendChild(children[0]);\n            }\n            const temp = next.nextElementSibling;\n            next.parentNode.removeChild(next);\n            next = temp;\n        }\n        if (!insertPrev) {\n            if (this.util.isListCell(prev)) {\n                originList = prev;\n                next = null;\n            }\n            originList.insertBefore(innerList, next);\n            if (!nodePath.s) {\n                nodePath.s = this.util.getNodePath(innerList.firstElementChild.firstChild, originList, null);\n                nodePath.sl = originList;\n            }\n            const slPath = originList.contains(nodePath.sl) ? this.util.getNodePath(nodePath.sl, originList) : null;\n            nodePath.e = this.util.getNodePath(innerList.lastElementChild.firstChild, originList, null);\n            nodePath.el = originList;\n            this.util.mergeSameTags(originList, [\n                nodePath.s,\n                nodePath.e,\n                slPath\n            ], false);\n            this.util.mergeNestedTags(originList);\n            if (slPath) nodePath.sl = this.util.getNodeFromPath(slPath, originList);\n        }\n        return innerList;\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = \"\";\n        while(!command && !/^UL$/i.test(target.tagName)){\n            command = target.getAttribute(\"data-command\");\n            target = target.parentNode;\n        }\n        if (!command) return;\n        const range = this.plugins.list.editList.call(this, command, null, false);\n        if (range) this.setRange(range.sc, range.so, range.ec, range.eo);\n        this.submenuOff();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/list.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js":
/*!**********************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"paragraphStyle\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.paragraphStyle = {\n            _classList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        /** add event listeners */ listDiv.querySelector(\"ul\").addEventListener(\"click\", this.pickUp.bind(core));\n        context.paragraphStyle._classList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-format\";\n        const menuLang = core.lang.menu;\n        const defaultList = {\n            spaced: {\n                name: menuLang.spaced,\n                class: \"__se__p-spaced\",\n                _class: \"\"\n            },\n            bordered: {\n                name: menuLang.bordered,\n                class: \"__se__p-bordered\",\n                _class: \"\"\n            },\n            neon: {\n                name: menuLang.neon,\n                class: \"__se__p-neon\",\n                _class: \"\"\n            }\n        };\n        const paragraphStyles = !option.paragraphStyles || option.paragraphStyles.length === 0 ? [\n            \"spaced\",\n            \"bordered\",\n            \"neon\"\n        ] : option.paragraphStyles;\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for(let i = 0, len = paragraphStyles.length, p, name, attrs, _class; i < len; i++){\n            p = paragraphStyles[i];\n            if (typeof p === \"string\") {\n                const defaultStyle = defaultList[p.toLowerCase()];\n                if (!defaultStyle) continue;\n                p = defaultStyle;\n            }\n            name = p.name;\n            attrs = p.class ? ' class=\"' + p.class + '\"' : \"\";\n            _class = p._class;\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list' + (_class ? \" \" + _class : \"\") + '\" data-value=\"' + p.class + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + \"<div\" + attrs + \">\" + name + \"</div>\" + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const paragraphContext = this.context.paragraphStyle;\n        const paragraphList = paragraphContext._classList;\n        const currentFormat = this.util.getFormatElement(this.getSelectionNode());\n        for(let i = 0, len = paragraphList.length; i < len; i++){\n            if (this.util.hasClass(currentFormat, paragraphList[i].getAttribute(\"data-value\"))) {\n                this.util.addClass(paragraphList[i], \"active\");\n            } else {\n                this.util.removeClass(paragraphList[i], \"active\");\n            }\n        }\n    },\n    pickUp: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let value = null;\n        while(!/^UL$/i.test(target.tagName)){\n            value = target.getAttribute(\"data-value\");\n            if (value) break;\n            target = target.parentNode;\n        }\n        if (!value) return;\n        let selectedFormsts = this.getSelectedElements();\n        if (selectedFormsts.length === 0) {\n            this.getRange_addLine(this.getRange(), null);\n            selectedFormsts = this.getSelectedElements();\n            if (selectedFormsts.length === 0) return;\n        }\n        // change format class\n        const toggleClass = this.util.hasClass(target, \"active\") ? this.util.removeClass.bind(this.util) : this.util.addClass.bind(this.util);\n        for(let i = 0, len = selectedFormsts.length; i < len; i++){\n            toggleClass(selectedFormsts[i], value);\n        }\n        this.submenuOff();\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvc3VibWVudS9wYXJhZ3JhcGhTdHlsZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQSwrREFBZTtJQUNYQSxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsS0FBSyxTQUFVQyxJQUFJLEVBQUVDLGFBQWE7UUFDOUIsTUFBTUMsVUFBVUYsS0FBS0UsT0FBTztRQUM1QkEsUUFBUUMsY0FBYyxHQUFHO1lBQ3JCQyxZQUFZO1FBQ2hCO1FBRUEsZ0JBQWdCLEdBQ2hCLElBQUlDLFVBQVUsSUFBSSxDQUFDQyxVQUFVLENBQUNOO1FBRTlCLHdCQUF3QixHQUN4QkssUUFBUUUsYUFBYSxDQUFDLE1BQU1DLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ1Y7UUFFdkVFLFFBQVFDLGNBQWMsQ0FBQ0MsVUFBVSxHQUFHQyxRQUFRTSxnQkFBZ0IsQ0FBQztRQUU3RCw4QkFBOEIsR0FDOUJYLEtBQUtZLGNBQWMsQ0FBQyxJQUFJLENBQUNmLElBQUksRUFBRUksZUFBZUk7UUFFOUMsaUJBQWlCLEdBQ2pCQSxVQUFVO0lBQ2Q7SUFFQUMsWUFBWSxTQUFVTixJQUFJO1FBQ3RCLE1BQU1hLFNBQVNiLEtBQUtjLE9BQU87UUFDM0IsTUFBTVQsVUFBVUwsS0FBS2UsSUFBSSxDQUFDQyxhQUFhLENBQUM7UUFDeENYLFFBQVFZLFNBQVMsR0FBRztRQUVwQixNQUFNQyxXQUFXbEIsS0FBS21CLElBQUksQ0FBQ0MsSUFBSTtRQUMvQixNQUFNQyxjQUFjO1lBQ2hCQyxRQUFRO2dCQUNKekIsTUFBTXFCLFNBQVNJLE1BQU07Z0JBQ3JCQyxPQUFPO2dCQUNQQyxRQUFRO1lBQ1o7WUFDQUMsVUFBVTtnQkFDTjVCLE1BQU1xQixTQUFTTyxRQUFRO2dCQUN2QkYsT0FBTztnQkFDUEMsUUFBUTtZQUNaO1lBQ0FFLE1BQU07Z0JBQ0Y3QixNQUFN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QUksQ0FBQ0EsSUFBSSxDQUFDOEIsUUFBUSxDQUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQ0ssSUFBSTtRQUNwSSxJQUFLLElBQUllLElBQUksR0FBR0MsTUFBTXdCLGdCQUFnQjNCLE1BQU0sRUFBRUUsSUFBSUMsS0FBS0QsSUFBSztZQUN4RDZCLFlBQVlKLGVBQWUsQ0FBQ3pCLEVBQUUsRUFBRXFCO1FBQ3BDO1FBRUEsSUFBSSxDQUFDUyxVQUFVO1FBRWYsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUM7SUFDdEI7QUFDSixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvcGx1Z2lucy9zdWJtZW51L3BhcmFncmFwaFN0eWxlLmpzPzU1N2QiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxuICpcbiAqIHN1bmVkaXRvci5qc1xuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cbiAqIE1JVCBsaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAncGFyYWdyYXBoU3R5bGUnLFxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XG4gICAgICAgIGNvbnRleHQucGFyYWdyYXBoU3R5bGUgPSB7XG4gICAgICAgICAgICBfY2xhc3NMaXN0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqIHNldCBzdWJtZW51ICovXG4gICAgICAgIGxldCBsaXN0RGl2ID0gdGhpcy5zZXRTdWJtZW51KGNvcmUpO1xuXG4gICAgICAgIC8qKiBhZGQgZXZlbnQgbGlzdGVuZXJzICovXG4gICAgICAgIGxpc3REaXYucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja1VwLmJpbmQoY29yZSkpO1xuXG4gICAgICAgIGNvbnRleHQucGFyYWdyYXBoU3R5bGUuX2NsYXNzTGlzdCA9IGxpc3REaXYucXVlcnlTZWxlY3RvckFsbCgnbGkgYnV0dG9uJyk7XG5cbiAgICAgICAgLyoqIGFwcGVuZCB0YXJnZXQgYnV0dG9uIG1lbnUgKi9cbiAgICAgICAgY29yZS5pbml0TWVudVRhcmdldCh0aGlzLm5hbWUsIHRhcmdldEVsZW1lbnQsIGxpc3REaXYpO1xuXG4gICAgICAgIC8qKiBlbXB0eSBtZW1vcnkgKi9cbiAgICAgICAgbGlzdERpdiA9IG51bGw7XG4gICAgfSxcblxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGNvcmUub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGlzdERpdiA9IGNvcmUudXRpbC5jcmVhdGVFbGVtZW50KCdESVYnKTtcbiAgICAgICAgbGlzdERpdi5jbGFzc05hbWUgPSAnc2Utc3VibWVudSBzZS1saXN0LWxheWVyIHNlLWxpc3QtZm9ybWF0JztcblxuICAgICAgICBjb25zdCBtZW51TGFuZyA9IGNvcmUubGFuZy5tZW51O1xuICAgICAgICBjb25zdCBkZWZhdWx0TGlzdCA9IHtcbiAgICAgICAgICAgIHNwYWNlZDoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG1lbnVMYW5nLnNwYWNlZCxcbiAgICAgICAgICAgICAgICBjbGFzczogJ19fc2VfX3Atc3BhY2VkJyxcbiAgICAgICAgICAgICAgICBfY2xhc3M6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9yZGVyZWQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBtZW51TGFuZy5ib3JkZXJlZCxcbiAgICAgICAgICAgICAgICBjbGFzczogJ19fc2VfX3AtYm9yZGVyZWQnLFxuICAgICAgICAgICAgICAgIF9jbGFzczogJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZW9uOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbWVudUxhbmcubmVvbixcbiAgICAgICAgICAgICAgICBjbGFzczogJ19fc2VfX3AtbmVvbicsXG4gICAgICAgICAgICAgICAgX2NsYXNzOiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXJhZ3JhcGhTdHlsZXMgPSAhb3B0aW9uLnBhcmFncmFwaFN0eWxlcyB8fCBvcHRpb24ucGFyYWdyYXBoU3R5bGVzLmxlbmd0aCA9PT0gMCA/IFsnc3BhY2VkJywgJ2JvcmRlcmVkJywgJ25lb24nXSA6IG9wdGlvbi5wYXJhZ3JhcGhTdHlsZXM7XG5cbiAgICAgICAgbGV0IGxpc3QgPSAnPGRpdiBjbGFzcz1cInNlLWxpc3QtaW5uZXJcIj48dWwgY2xhc3M9XCJzZS1saXN0LWJhc2ljXCI+JztcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhcmFncmFwaFN0eWxlcy5sZW5ndGgsIHAsIG5hbWUsIGF0dHJzLCBfY2xhc3M7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgcCA9IHBhcmFncmFwaFN0eWxlc1tpXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRTdHlsZSA9IGRlZmF1bHRMaXN0W3AudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0U3R5bGUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHAgPSBkZWZhdWx0U3R5bGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5hbWUgPSBwLm5hbWU7XG4gICAgICAgICAgICBhdHRycyA9IHAuY2xhc3MgPyAnIGNsYXNzPVwiJyArIHAuY2xhc3MgKyAnXCInIDogJyc7XG4gICAgICAgICAgICBfY2xhc3MgPSBwLl9jbGFzcztcblxuICAgICAgICAgICAgbGlzdCArPSAnPGxpPicgK1xuICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInNlLWJ0bi1saXN0JyArIChfY2xhc3MgPyAnICcgKyBfY2xhc3M6ICcnKSArICdcIiBkYXRhLXZhbHVlPVwiJyArIHAuY2xhc3MgKyAnXCIgdGl0bGU9XCInICsgbmFtZSArICdcIiBhcmlhLWxhYmVsPVwiJyArIG5hbWUgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2JyArIGF0dHJzICsgJz4nICsgbmFtZSArICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+PC9saT4nO1xuICAgICAgICB9XG4gICAgICAgIGxpc3QgKz0gJzwvdWw+PC9kaXY+JztcblxuICAgICAgICBsaXN0RGl2LmlubmVySFRNTCA9IGxpc3Q7XG5cbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XG4gICAgfSxcblxuICAgICAvKipcbiAgICAgKiBAT3ZlcnJpZGUgc3VibWVudVxuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaENvbnRleHQgPSB0aGlzLmNvbnRleHQucGFyYWdyYXBoU3R5bGU7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaExpc3QgPSBwYXJhZ3JhcGhDb250ZXh0Ll9jbGFzc0xpc3Q7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb3JtYXQgPSB0aGlzLnV0aWwuZ2V0Rm9ybWF0RWxlbWVudCh0aGlzLmdldFNlbGVjdGlvbk5vZGUoKSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhcmFncmFwaExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWwuaGFzQ2xhc3MoY3VycmVudEZvcm1hdCwgcGFyYWdyYXBoTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuYWRkQ2xhc3MocGFyYWdyYXBoTGlzdFtpXSwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwucmVtb3ZlQ2xhc3MocGFyYWdyYXBoTGlzdFtpXSwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHBpY2tVcDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHdoaWxlICghL15VTCQvaS50ZXN0KHRhcmdldC50YWdOYW1lKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XG4gICAgICAgICAgICBpZiAodmFsdWUpIGJyZWFrO1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG5cbiAgICAgICAgbGV0IHNlbGVjdGVkRm9ybXN0cyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbGVtZW50cygpO1xuICAgICAgICBpZiAoc2VsZWN0ZWRGb3Jtc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5nZXRSYW5nZV9hZGRMaW5lKHRoaXMuZ2V0UmFuZ2UoKSwgbnVsbCk7XG4gICAgICAgICAgICBzZWxlY3RlZEZvcm1zdHMgPSB0aGlzLmdldFNlbGVjdGVkRWxlbWVudHMoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEZvcm1zdHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGFuZ2UgZm9ybWF0IGNsYXNzXG4gICAgICAgIGNvbnN0IHRvZ2dsZUNsYXNzID0gdGhpcy51dGlsLmhhc0NsYXNzKHRhcmdldCwgJ2FjdGl2ZScpID8gdGhpcy51dGlsLnJlbW92ZUNsYXNzLmJpbmQodGhpcy51dGlsKSA6IHRoaXMudXRpbC5hZGRDbGFzcy5iaW5kKHRoaXMudXRpbCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3RlZEZvcm1zdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGVjdGVkRm9ybXN0c1tpXSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdWJtZW51T2ZmKCk7XG5cbiAgICAgICAgLy8gaGlzdG9yeSBzdGFja1xuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChmYWxzZSk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJuYW1lIiwiZGlzcGxheSIsImFkZCIsImNvcmUiLCJ0YXJnZXRFbGVtZW50IiwiY29udGV4dCIsInBhcmFncmFwaFN0eWxlIiwiX2NsYXNzTGlzdCIsImxpc3REaXYiLCJzZXRTdWJtZW51IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwaWNrVXAiLCJiaW5kIiwicXVlcnlTZWxlY3RvckFsbCIsImluaXRNZW51VGFyZ2V0Iiwib3B0aW9uIiwib3B0aW9ucyIsInV0aWwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibWVudUxhbmciLCJsYW5nIiwibWVudSIsImRlZmF1bHRMaXN0Iiwic3BhY2VkIiwiY2xhc3MiLCJfY2xhc3MiLCJib3JkZXJlZCIsIm5lb24iLCJwYXJhZ3JhcGhTdHlsZXMiLCJsZW5ndGgiLCJsaXN0IiwiaSIsImxlbiIsInAiLCJhdHRycyIsImRlZmF1bHRTdHlsZSIsInRvTG93ZXJDYXNlIiwiaW5uZXJIVE1MIiwib24iLCJwYXJhZ3JhcGhDb250ZXh0IiwicGFyYWdyYXBoTGlzdCIsImN1cnJlbnRGb3JtYXQiLCJnZXRGb3JtYXRFbGVtZW50IiwiZ2V0U2VsZWN0aW9uTm9kZSIsImhhc0NsYXNzIiwiZ2V0QXR0cmlidXRlIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInRhcmdldCIsInZhbHVlIiwidGVzdCIsInRhZ05hbWUiLCJwYXJlbnROb2RlIiwic2VsZWN0ZWRGb3Jtc3RzIiwiZ2V0U2VsZWN0ZWRFbGVtZW50cyIsImdldFJhbmdlX2FkZExpbmUiLCJnZXRSYW5nZSIsInRvZ2dsZUNsYXNzIiwic3VibWVudU9mZiIsImhpc3RvcnkiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/table.js":
/*!*************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/table.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"table\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        let contextTable = context.table = {\n            _element: null,\n            _tdElement: null,\n            _trElement: null,\n            _trElements: null,\n            _tableXY: [],\n            _maxWidth: true,\n            _fixedColumn: false,\n            _rtl: core.options.rtl,\n            cellControllerTop: core.options.tableCellControllerPosition === \"top\",\n            resizeText: null,\n            headerButton: null,\n            mergeButton: null,\n            splitButton: null,\n            splitMenu: null,\n            maxText: core.lang.controller.maxSize,\n            minText: core.lang.controller.minSize,\n            _physical_cellCnt: 0,\n            _logical_cellCnt: 0,\n            _rowCnt: 0,\n            _rowIndex: 0,\n            _physical_cellIndex: 0,\n            _logical_cellIndex: 0,\n            _current_colSpan: 0,\n            _current_rowSpan: 0,\n            icons: {\n                expansion: core.icons.expansion,\n                reduction: core.icons.reduction\n            }\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let tablePicker = listDiv.querySelector(\".se-controller-table-picker\");\n        contextTable.tableHighlight = listDiv.querySelector(\".se-table-size-highlighted\");\n        contextTable.tableUnHighlight = listDiv.querySelector(\".se-table-size-unhighlighted\");\n        contextTable.tableDisplay = listDiv.querySelector(\".se-table-size-display\");\n        if (core.options.rtl) contextTable.tableHighlight.style.left = 10 * 18 - 13 + \"px\";\n        /** set table controller */ let tableController = this.setController_table(core);\n        contextTable.tableController = tableController;\n        contextTable.resizeButton = tableController.querySelector(\"._se_table_resize\");\n        contextTable.resizeText = tableController.querySelector(\"._se_table_resize > span > span\");\n        contextTable.columnFixedButton = tableController.querySelector(\"._se_table_fixed_column\");\n        contextTable.headerButton = tableController.querySelector(\"._se_table_header\");\n        /** set resizing */ let resizeDiv = this.setController_tableEditor(core, contextTable.cellControllerTop);\n        contextTable.resizeDiv = resizeDiv;\n        contextTable.splitMenu = resizeDiv.querySelector(\".se-btn-group-sub\");\n        contextTable.mergeButton = resizeDiv.querySelector(\"._se_table_merge_button\");\n        contextTable.splitButton = resizeDiv.querySelector(\"._se_table_split_button\");\n        contextTable.insertRowAboveButton = resizeDiv.querySelector(\"._se_table_insert_row_a\");\n        contextTable.insertRowBelowButton = resizeDiv.querySelector(\"._se_table_insert_row_b\");\n        /** add event listeners */ tablePicker.addEventListener(\"mousemove\", this.onMouseMove_tablePicker.bind(core, contextTable));\n        tablePicker.addEventListener(\"click\", this.appendTable.bind(core));\n        resizeDiv.addEventListener(\"click\", this.onClick_tableController.bind(core));\n        tableController.addEventListener(\"click\", this.onClick_tableController.bind(core));\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** append controller */ context.element.relative.appendChild(resizeDiv);\n        context.element.relative.appendChild(tableController);\n        /** empty memory */ listDiv = null, tablePicker = null, resizeDiv = null, tableController = null, contextTable = null;\n    },\n    setSubmenu: function(core) {\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-selector-table\";\n        listDiv.innerHTML = \"\" + '<div class=\"se-table-size\">' + '<div class=\"se-table-size-picker se-controller-table-picker\"></div>' + '<div class=\"se-table-size-highlighted\"></div>' + '<div class=\"se-table-size-unhighlighted\"></div>' + \"</div>\" + '<div class=\"se-table-size-display\">1 x 1</div>';\n        return listDiv;\n    },\n    setController_table: function(core) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const tableResize = core.util.createElement(\"DIV\");\n        tableResize.className = \"se-controller se-controller-table\";\n        tableResize.innerHTML = \"\" + \"<div>\" + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"resize\" class=\"se-btn se-tooltip _se_table_resize\">' + icons.expansion + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.maxSize + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"layout\" class=\"se-btn se-tooltip _se_table_fixed_column\">' + icons.fixed_column_width + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.fixedColumnWidth + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"header\" class=\"se-btn se-tooltip _se_table_header\">' + icons.table_header + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.tableHeader + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"remove\" class=\"se-btn se-tooltip\">' + icons.delete + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.remove + \"</span></span>\" + \"</button>\" + \"</div>\" + \"</div>\";\n        return tableResize;\n    },\n    setController_tableEditor: function(core, cellControllerTop) {\n        const lang = core.lang;\n        const icons = core.icons;\n        const tableResize = core.util.createElement(\"DIV\");\n        tableResize.className = \"se-controller se-controller-table-cell\";\n        tableResize.innerHTML = (cellControllerTop ? \"\" : '<div class=\"se-arrow se-arrow-up\"></div>') + '<div class=\"se-btn-group\">' + '<button type=\"button\" data-command=\"insert\" data-value=\"row\" data-option=\"up\" class=\"se-btn se-tooltip _se_table_insert_row_a\">' + icons.insert_row_above + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertRowAbove + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"insert\" data-value=\"row\" data-option=\"down\" class=\"se-btn se-tooltip _se_table_insert_row_b\">' + icons.insert_row_below + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertRowBelow + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" data-value=\"row\" class=\"se-btn se-tooltip\">' + icons.delete_row + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.deleteRow + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"merge\" class=\"_se_table_merge_button se-btn se-tooltip\" disabled>' + icons.merge_cell + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.mergeCells + \"</span></span>\" + \"</button>\" + \"</div>\" + '<div class=\"se-btn-group\" style=\"padding-top: 0;\">' + '<button type=\"button\" data-command=\"insert\" data-value=\"cell\" data-option=\"left\" class=\"se-btn se-tooltip\">' + icons.insert_column_left + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertColumnBefore + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"insert\" data-value=\"cell\" data-option=\"right\" class=\"se-btn se-tooltip\">' + icons.insert_column_right + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.insertColumnAfter + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"delete\" data-value=\"cell\" class=\"se-btn se-tooltip\">' + icons.delete_column + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.deleteColumn + \"</span></span>\" + \"</button>\" + '<button type=\"button\" data-command=\"onsplit\" class=\"_se_table_split_button se-btn se-tooltip\">' + icons.split_cell + '<span class=\"se-tooltip-inner\"><span class=\"se-tooltip-text\">' + lang.controller.splitCells + \"</span></span>\" + \"</button>\" + '<div class=\"se-btn-group-sub sun-editor-common se-list-layer se-table-split\">' + '<div class=\"se-list-inner\">' + '<ul class=\"se-list-basic\">' + '<li class=\"se-btn-list\" data-command=\"split\" data-value=\"vertical\" style=\"line-height:32px;\" title=\"' + lang.controller.VerticalSplit + '\" aria-label=\"' + lang.controller.VerticalSplit + '\">' + lang.controller.VerticalSplit + \"</li>\" + '<li class=\"se-btn-list\" data-command=\"split\" data-value=\"horizontal\" style=\"line-height:32px;\" title=\"' + lang.controller.HorizontalSplit + '\" aria-label=\"' + lang.controller.HorizontalSplit + '\">' + lang.controller.HorizontalSplit + \"</li>\" + \"</ul>\" + \"</div>\" + \"</div>\" + \"</div>\";\n        return tableResize;\n    },\n    appendTable: function() {\n        const oTable = this.util.createElement(\"TABLE\");\n        const createCells = this.plugins.table.createCells;\n        const x = this.context.table._tableXY[0];\n        let y = this.context.table._tableXY[1];\n        let tableHTML = \"<tbody>\";\n        while(y > 0){\n            tableHTML += \"<tr>\" + createCells.call(this, \"td\", x) + \"</tr>\";\n            --y;\n        }\n        tableHTML += \"</tbody>\";\n        oTable.innerHTML = tableHTML;\n        const changed = this.insertComponent(oTable, false, true, false);\n        if (changed) {\n            const firstTd = oTable.querySelector(\"td div\");\n            this.setRange(firstTd, 0, firstTd, 0);\n            this.plugins.table.reset_table_picker.call(this);\n        }\n    },\n    createCells: function(nodeName, cnt, returnElement) {\n        nodeName = nodeName.toLowerCase();\n        if (!returnElement) {\n            let cellsHTML = \"\";\n            while(cnt > 0){\n                cellsHTML += \"<\" + nodeName + \"><div><br></div></\" + nodeName + \">\";\n                cnt--;\n            }\n            return cellsHTML;\n        } else {\n            const cell = this.util.createElement(nodeName);\n            cell.innerHTML = \"<div><br></div>\";\n            return cell;\n        }\n    },\n    onMouseMove_tablePicker: function(contextTable, e) {\n        e.stopPropagation();\n        let x = this._w.Math.ceil(e.offsetX / 18);\n        let y = this._w.Math.ceil(e.offsetY / 18);\n        x = x < 1 ? 1 : x;\n        y = y < 1 ? 1 : y;\n        if (contextTable._rtl) {\n            contextTable.tableHighlight.style.left = x * 18 - 13 + \"px\";\n            x = 11 - x;\n        }\n        contextTable.tableHighlight.style.width = x + \"em\";\n        contextTable.tableHighlight.style.height = y + \"em\";\n        // let x_u = x < 5 ? 5 : (x > 9 ? 10 : x + 1);\n        // let y_u = y < 5 ? 5 : (y > 9 ? 10 : y + 1);\n        // contextTable.tableUnHighlight.style.width = x_u + 'em';\n        // contextTable.tableUnHighlight.style.height = y_u + 'em';\n        this.util.changeTxt(contextTable.tableDisplay, x + \" x \" + y);\n        contextTable._tableXY = [\n            x,\n            y\n        ];\n    },\n    reset_table_picker: function() {\n        if (!this.context.table.tableHighlight) return;\n        const highlight = this.context.table.tableHighlight.style;\n        const unHighlight = this.context.table.tableUnHighlight.style;\n        highlight.width = \"1em\";\n        highlight.height = \"1em\";\n        unHighlight.width = \"10em\";\n        unHighlight.height = \"10em\";\n        this.util.changeTxt(this.context.table.tableDisplay, \"1 x 1\");\n        this.submenuOff();\n    },\n    init: function() {\n        const contextTable = this.context.table;\n        const tablePlugin = this.plugins.table;\n        tablePlugin._removeEvents.call(this);\n        if (tablePlugin._selectedTable) {\n            const selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n            for(let i = 0, len = selectedCells.length; i < len; i++){\n                this.util.removeClass(selectedCells[i], \"se-table-selected-cell\");\n            }\n        }\n        tablePlugin._toggleEditor.call(this, true);\n        contextTable._element = null;\n        contextTable._tdElement = null;\n        contextTable._trElement = null;\n        contextTable._trElements = null;\n        contextTable._tableXY = [];\n        contextTable._maxWidth = true;\n        contextTable._fixedColumn = false;\n        contextTable._physical_cellCnt = 0;\n        contextTable._logical_cellCnt = 0;\n        contextTable._rowCnt = 0;\n        contextTable._rowIndex = 0;\n        contextTable._physical_cellIndex = 0;\n        contextTable._logical_cellIndex = 0;\n        contextTable._current_colSpan = 0;\n        contextTable._current_rowSpan = 0;\n        tablePlugin._shift = false;\n        tablePlugin._selectedCells = null;\n        tablePlugin._selectedTable = null;\n        tablePlugin._ref = null;\n        tablePlugin._fixedCell = null;\n        tablePlugin._selectedCell = null;\n        tablePlugin._fixedCellName = null;\n    },\n    /** table edit controller */ call_controller_tableEdit: function(tdElement) {\n        const tablePlugin = this.plugins.table;\n        const contextTable = this.context.table;\n        if (!this.getSelection().isCollapsed && !tablePlugin._selectedCell) {\n            this.controllersOff();\n            this.util.removeClass(tdElement, \"se-table-selected-cell\");\n            return;\n        }\n        const tableElement = contextTable._element || this.plugins.table._selectedTable || this.util.getParentElement(tdElement, \"TABLE\");\n        contextTable._maxWidth = this.util.hasClass(tableElement, \"se-table-size-100\") || tableElement.style.width === \"100%\" || !tableElement.style.width && !this.util.hasClass(tableElement, \"se-table-size-auto\");\n        contextTable._fixedColumn = this.util.hasClass(tableElement, \"se-table-layout-fixed\") || tableElement.style.tableLayout === \"fixed\";\n        tablePlugin.setTableStyle.call(this, contextTable._maxWidth ? \"width|column\" : \"width\");\n        tablePlugin.setPositionControllerTop.call(this, tableElement);\n        tablePlugin.setPositionControllerDiv.call(this, tdElement, tablePlugin._shift);\n        if (!tablePlugin._shift) this.controllersOn(contextTable.resizeDiv, contextTable.tableController, tablePlugin.init.bind(this), tdElement, \"table\");\n    },\n    setPositionControllerTop: function(tableElement) {\n        this.setControllerPosition(this.context.table.tableController, tableElement, \"top\", {\n            left: 0,\n            top: 0\n        });\n    },\n    setPositionControllerDiv: function(tdElement, reset) {\n        const contextTable = this.context.table;\n        const resizeDiv = contextTable.resizeDiv;\n        this.plugins.table.setCellInfo.call(this, tdElement, reset);\n        if (contextTable.cellControllerTop) {\n            this.setControllerPosition(resizeDiv, contextTable._element, \"top\", {\n                left: contextTable.tableController.offsetWidth,\n                top: 0\n            });\n        } else {\n            this.setControllerPosition(resizeDiv, tdElement, \"bottom\", {\n                left: 0,\n                top: 0\n            });\n        }\n    },\n    setCellInfo: function(tdElement, reset) {\n        const contextTable = this.context.table;\n        const table = contextTable._element = this.plugins.table._selectedTable || this.util.getParentElement(tdElement, \"TABLE\");\n        if (/THEAD/i.test(table.firstElementChild.nodeName)) {\n            this.util.addClass(contextTable.headerButton, \"active\");\n        } else {\n            this.util.removeClass(contextTable.headerButton, \"active\");\n        }\n        if (reset || contextTable._physical_cellCnt === 0) {\n            if (contextTable._tdElement !== tdElement) {\n                contextTable._tdElement = tdElement;\n                contextTable._trElement = tdElement.parentNode;\n            }\n            const rows = contextTable._trElements = table.rows;\n            const cellIndex = tdElement.cellIndex;\n            let cellCnt = 0;\n            for(let i = 0, cells = rows[0].cells, len = rows[0].cells.length; i < len; i++){\n                cellCnt += cells[i].colSpan;\n            }\n            // row cnt, row index\n            const rowIndex = contextTable._rowIndex = contextTable._trElement.rowIndex;\n            contextTable._rowCnt = rows.length;\n            // cell cnt, physical cell index\n            contextTable._physical_cellCnt = contextTable._trElement.cells.length;\n            contextTable._logical_cellCnt = cellCnt;\n            contextTable._physical_cellIndex = cellIndex;\n            // span\n            contextTable._current_colSpan = contextTable._tdElement.colSpan - 1;\n            contextTable._current_rowSpan - contextTable._trElement.cells[cellIndex].rowSpan - 1;\n            // find logcal cell index\n            let rowSpanArr = [];\n            let spanIndex = [];\n            for(let i = 0, cells, colSpan; i <= rowIndex; i++){\n                cells = rows[i].cells;\n                colSpan = 0;\n                for(let c = 0, cLen = cells.length, cell, cs, rs, logcalIndex; c < cLen; c++){\n                    cell = cells[c];\n                    cs = cell.colSpan - 1;\n                    rs = cell.rowSpan - 1;\n                    logcalIndex = c + colSpan;\n                    if (spanIndex.length > 0) {\n                        for(let r = 0, arr; r < spanIndex.length; r++){\n                            arr = spanIndex[r];\n                            if (arr.row > i) continue;\n                            if (logcalIndex >= arr.index) {\n                                colSpan += arr.cs;\n                                logcalIndex += arr.cs;\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            } else if (c === cLen - 1) {\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            }\n                        }\n                    }\n                    // logcal cell index\n                    if (i === rowIndex && c === cellIndex) {\n                        contextTable._logical_cellIndex = logcalIndex;\n                        break;\n                    }\n                    if (rs > 0) {\n                        rowSpanArr.push({\n                            index: logcalIndex,\n                            cs: cs + 1,\n                            rs: rs,\n                            row: -1\n                        });\n                    }\n                    colSpan += cs;\n                }\n                spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                    return a.index - b.index;\n                });\n                rowSpanArr = [];\n            }\n            rowSpanArr = null;\n            spanIndex = null;\n        }\n    },\n    editTable: function(type, option) {\n        const tablePlugin = this.plugins.table;\n        const contextTable = this.context.table;\n        const table = contextTable._element;\n        const isRow = type === \"row\";\n        if (isRow) {\n            const tableAttr = contextTable._trElement.parentNode;\n            if (/^THEAD$/i.test(tableAttr.nodeName)) {\n                if (option === \"up\") {\n                    return;\n                } else if (!tableAttr.nextElementSibling || !/^TBODY$/i.test(tableAttr.nextElementSibling.nodeName)) {\n                    table.innerHTML += \"<tbody><tr>\" + tablePlugin.createCells.call(this, \"td\", contextTable._logical_cellCnt, false) + \"</tr></tbody>\";\n                    return;\n                }\n            }\n        }\n        // multi\n        if (tablePlugin._ref) {\n            const positionCell = contextTable._tdElement;\n            const selectedCells = tablePlugin._selectedCells;\n            // multi - row\n            if (isRow) {\n                // remove row\n                if (!option) {\n                    let row = selectedCells[0].parentNode;\n                    const removeCells = [\n                        selectedCells[0]\n                    ];\n                    for(let i = 1, len = selectedCells.length, cell; i < len; i++){\n                        cell = selectedCells[i];\n                        if (row !== cell.parentNode) {\n                            removeCells.push(cell);\n                            row = cell.parentNode;\n                        }\n                    }\n                    for(let i = 0, len = removeCells.length; i < len; i++){\n                        tablePlugin.setCellInfo.call(this, removeCells[i], true);\n                        tablePlugin.editRow.call(this, option);\n                    }\n                } else {\n                    tablePlugin.setCellInfo.call(this, option === \"up\" ? selectedCells[0] : selectedCells[selectedCells.length - 1], true);\n                    tablePlugin.editRow.call(this, option, positionCell);\n                }\n            } else {\n                const firstRow = selectedCells[0].parentNode;\n                // remove cell\n                if (!option) {\n                    const removeCells = [\n                        selectedCells[0]\n                    ];\n                    for(let i = 1, len = selectedCells.length, cell; i < len; i++){\n                        cell = selectedCells[i];\n                        if (firstRow === cell.parentNode) {\n                            removeCells.push(cell);\n                        } else {\n                            break;\n                        }\n                    }\n                    for(let i = 0, len = removeCells.length; i < len; i++){\n                        tablePlugin.setCellInfo.call(this, removeCells[i], true);\n                        tablePlugin.editCell.call(this, option);\n                    }\n                } else {\n                    let rightCell = null;\n                    for(let i = 0, len = selectedCells.length - 1; i < len; i++){\n                        if (firstRow !== selectedCells[i + 1].parentNode) {\n                            rightCell = selectedCells[i];\n                            break;\n                        }\n                    }\n                    tablePlugin.setCellInfo.call(this, option === \"left\" ? selectedCells[0] : rightCell || selectedCells[0], true);\n                    tablePlugin.editCell.call(this, option, positionCell);\n                }\n            }\n            if (!option) tablePlugin.init.call(this);\n        } else {\n            tablePlugin[isRow ? \"editRow\" : \"editCell\"].call(this, option);\n        }\n        // after remove\n        if (!option) {\n            const children = table.children;\n            for(let i = 0; i < children.length; i++){\n                if (children[i].children.length === 0) {\n                    this.util.removeItem(children[i]);\n                    i--;\n                }\n            }\n            if (table.children.length === 0) this.util.removeItem(table);\n        }\n    },\n    editRow: function(option, positionResetElement) {\n        const contextTable = this.context.table;\n        const remove = !option;\n        const up = option === \"up\";\n        const originRowIndex = contextTable._rowIndex;\n        const rowIndex = remove || up ? originRowIndex : originRowIndex + contextTable._current_rowSpan + 1;\n        const sign = remove ? -1 : 1;\n        const rows = contextTable._trElements;\n        let cellCnt = contextTable._logical_cellCnt;\n        for(let i = 0, len = originRowIndex + (remove ? -1 : 0), cell; i <= len; i++){\n            cell = rows[i].cells;\n            if (cell.length === 0) return;\n            for(let c = 0, cLen = cell.length, rs, cs; c < cLen; c++){\n                rs = cell[c].rowSpan;\n                cs = cell[c].colSpan;\n                if (rs < 2 && cs < 2) continue;\n                if (rs + i > rowIndex && rowIndex > i) {\n                    cell[c].rowSpan = rs + sign;\n                    cellCnt -= cs;\n                }\n            }\n        }\n        if (remove) {\n            const next = rows[originRowIndex + 1];\n            if (next) {\n                const spanCells = [];\n                let cells = rows[originRowIndex].cells;\n                let colSpan = 0;\n                for(let i = 0, len = cells.length, cell, logcalIndex; i < len; i++){\n                    cell = cells[i];\n                    logcalIndex = i + colSpan;\n                    colSpan += cell.colSpan - 1;\n                    if (cell.rowSpan > 1) {\n                        cell.rowSpan -= 1;\n                        spanCells.push({\n                            cell: cell.cloneNode(false),\n                            index: logcalIndex\n                        });\n                    }\n                }\n                if (spanCells.length > 0) {\n                    let spanCell = spanCells.shift();\n                    cells = next.cells;\n                    colSpan = 0;\n                    for(let i = 0, len = cells.length, cell, logcalIndex; i < len; i++){\n                        cell = cells[i];\n                        logcalIndex = i + colSpan;\n                        colSpan += cell.colSpan - 1;\n                        if (logcalIndex >= spanCell.index) {\n                            i--, colSpan--;\n                            colSpan += spanCell.cell.colSpan - 1;\n                            next.insertBefore(spanCell.cell, cell);\n                            spanCell = spanCells.shift();\n                            if (!spanCell) break;\n                        }\n                    }\n                    if (spanCell) {\n                        next.appendChild(spanCell.cell);\n                        for(let i = 0, len = spanCells.length; i < len; i++){\n                            next.appendChild(spanCells[i].cell);\n                        }\n                    }\n                }\n            }\n            contextTable._element.deleteRow(rowIndex);\n        } else {\n            const newRow = contextTable._element.insertRow(rowIndex);\n            newRow.innerHTML = this.plugins.table.createCells.call(this, \"td\", cellCnt, false);\n        }\n        if (!remove) {\n            this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);\n        } else {\n            this.controllersOff();\n        }\n    },\n    editCell: function(option, positionResetElement) {\n        const contextTable = this.context.table;\n        const util = this.util;\n        const remove = !option;\n        const left = option === \"left\";\n        const colSpan = contextTable._current_colSpan;\n        const cellIndex = remove || left ? contextTable._logical_cellIndex : contextTable._logical_cellIndex + colSpan + 1;\n        const rows = contextTable._trElements;\n        let rowSpanArr = [];\n        let spanIndex = [];\n        let passCell = 0;\n        const removeCell = [];\n        const removeSpanArr = [];\n        for(let i = 0, len = contextTable._rowCnt, row, insertIndex, cells, newCell, applySpan, cellColSpan; i < len; i++){\n            row = rows[i];\n            insertIndex = cellIndex;\n            applySpan = false;\n            cells = row.cells;\n            cellColSpan = 0;\n            for(let c = 0, cell, cLen = cells.length, rs, cs, removeIndex; c < cLen; c++){\n                cell = cells[c];\n                if (!cell) break;\n                rs = cell.rowSpan - 1;\n                cs = cell.colSpan - 1;\n                if (!remove) {\n                    if (c >= insertIndex) break;\n                    if (cs > 0) {\n                        if (passCell < 1 && cs + c >= insertIndex) {\n                            cell.colSpan += 1;\n                            insertIndex = null;\n                            passCell = rs + 1;\n                            break;\n                        }\n                        insertIndex -= cs;\n                    }\n                    if (!applySpan) {\n                        for(let r = 0, arr; r < spanIndex.length; r++){\n                            arr = spanIndex[r];\n                            insertIndex -= arr.cs;\n                            arr.rs -= 1;\n                            if (arr.rs < 1) {\n                                spanIndex.splice(r, 1);\n                                r--;\n                            }\n                        }\n                        applySpan = true;\n                    }\n                } else {\n                    removeIndex = c + cellColSpan;\n                    if (spanIndex.length > 0) {\n                        const lastCell = !cells[c + 1];\n                        for(let r = 0, arr; r < spanIndex.length; r++){\n                            arr = spanIndex[r];\n                            if (arr.row > i) continue;\n                            if (removeIndex >= arr.index) {\n                                cellColSpan += arr.cs;\n                                removeIndex = c + cellColSpan;\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            } else if (lastCell) {\n                                arr.rs -= 1;\n                                arr.row = i + 1;\n                                if (arr.rs < 1) {\n                                    spanIndex.splice(r, 1);\n                                    r--;\n                                }\n                            }\n                        }\n                    }\n                    if (rs > 0) {\n                        rowSpanArr.push({\n                            rs: rs,\n                            cs: cs + 1,\n                            index: removeIndex,\n                            row: -1\n                        });\n                    }\n                    if (removeIndex >= insertIndex && removeIndex + cs <= insertIndex + colSpan) {\n                        removeCell.push(cell);\n                    } else if (removeIndex <= insertIndex + colSpan && removeIndex + cs >= insertIndex) {\n                        cell.colSpan -= util.getOverlapRangeAtIndex(cellIndex, cellIndex + colSpan, removeIndex, removeIndex + cs);\n                    } else if (rs > 0 && (removeIndex < insertIndex || removeIndex + cs > insertIndex + colSpan)) {\n                        removeSpanArr.push({\n                            cell: cell,\n                            i: i,\n                            rs: i + rs\n                        });\n                    }\n                    cellColSpan += cs;\n                }\n            }\n            spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                return a.index - b.index;\n            });\n            rowSpanArr = [];\n            if (!remove) {\n                if (passCell > 0) {\n                    passCell -= 1;\n                    continue;\n                }\n                if (insertIndex !== null && cells.length > 0) {\n                    newCell = this.plugins.table.createCells.call(this, cells[0].nodeName, 0, true);\n                    newCell = row.insertBefore(newCell, cells[insertIndex]);\n                }\n            }\n        }\n        if (remove) {\n            let removeFirst, removeEnd;\n            for(let r = 0, rLen = removeCell.length, row; r < rLen; r++){\n                row = removeCell[r].parentNode;\n                util.removeItem(removeCell[r]);\n                if (row.cells.length === 0) {\n                    if (!removeFirst) removeFirst = util.getArrayIndex(rows, row);\n                    removeEnd = util.getArrayIndex(rows, row);\n                    util.removeItem(row);\n                }\n            }\n            for(let c = 0, cLen = removeSpanArr.length, rowSpanCell; c < cLen; c++){\n                rowSpanCell = removeSpanArr[c];\n                rowSpanCell.cell.rowSpan = util.getOverlapRangeAtIndex(removeFirst, removeEnd, rowSpanCell.i, rowSpanCell.rs);\n            }\n            this.controllersOff();\n        } else {\n            this.plugins.table.setPositionControllerDiv.call(this, positionResetElement || contextTable._tdElement, true);\n        }\n    },\n    _closeSplitMenu: null,\n    openSplitMenu: function() {\n        this.util.addClass(this.context.table.splitButton, \"on\");\n        this.context.table.splitMenu.style.display = \"inline-table\";\n        this.plugins.table._closeSplitMenu = (function() {\n            this.util.removeClass(this.context.table.splitButton, \"on\");\n            this.context.table.splitMenu.style.display = \"none\";\n            this.removeDocEvent(\"click\", this.plugins.table._closeSplitMenu);\n            this.plugins.table._closeSplitMenu = null;\n        }).bind(this);\n        this.addDocEvent(\"click\", this.plugins.table._closeSplitMenu);\n    },\n    splitCells: function(direction) {\n        const util = this.util;\n        const vertical = direction === \"vertical\";\n        const contextTable = this.context.table;\n        const currentCell = contextTable._tdElement;\n        const rows = contextTable._trElements;\n        const currentRow = contextTable._trElement;\n        const index = contextTable._logical_cellIndex;\n        const rowIndex = contextTable._rowIndex;\n        const newCell = this.plugins.table.createCells.call(this, currentCell.nodeName, 0, true);\n        // vertical\n        if (vertical) {\n            const currentColSpan = currentCell.colSpan;\n            newCell.rowSpan = currentCell.rowSpan;\n            // colspan > 1\n            if (currentColSpan > 1) {\n                newCell.colSpan = this._w.Math.floor(currentColSpan / 2);\n                currentCell.colSpan = currentColSpan - newCell.colSpan;\n                currentRow.insertBefore(newCell, currentCell.nextElementSibling);\n            } else {\n                let rowSpanArr = [];\n                let spanIndex = [];\n                for(let i = 0, len = contextTable._rowCnt, cells, colSpan; i < len; i++){\n                    cells = rows[i].cells;\n                    colSpan = 0;\n                    for(let c = 0, cLen = cells.length, cell, cs, rs, logcalIndex; c < cLen; c++){\n                        cell = cells[c];\n                        cs = cell.colSpan - 1;\n                        rs = cell.rowSpan - 1;\n                        logcalIndex = c + colSpan;\n                        if (spanIndex.length > 0) {\n                            for(let r = 0, arr; r < spanIndex.length; r++){\n                                arr = spanIndex[r];\n                                if (arr.row > i) continue;\n                                if (logcalIndex >= arr.index) {\n                                    colSpan += arr.cs;\n                                    logcalIndex += arr.cs;\n                                    arr.rs -= 1;\n                                    arr.row = i + 1;\n                                    if (arr.rs < 1) {\n                                        spanIndex.splice(r, 1);\n                                        r--;\n                                    }\n                                } else if (c === cLen - 1) {\n                                    arr.rs -= 1;\n                                    arr.row = i + 1;\n                                    if (arr.rs < 1) {\n                                        spanIndex.splice(r, 1);\n                                        r--;\n                                    }\n                                }\n                            }\n                        }\n                        if (logcalIndex <= index && rs > 0) {\n                            rowSpanArr.push({\n                                index: logcalIndex,\n                                cs: cs + 1,\n                                rs: rs,\n                                row: -1\n                            });\n                        }\n                        if (cell !== currentCell && logcalIndex <= index && logcalIndex + cs >= index + currentColSpan - 1) {\n                            cell.colSpan += 1;\n                            break;\n                        }\n                        if (logcalIndex > index) break;\n                        colSpan += cs;\n                    }\n                    spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                        return a.index - b.index;\n                    });\n                    rowSpanArr = [];\n                }\n                currentRow.insertBefore(newCell, currentCell.nextElementSibling);\n            }\n        } else {\n            const currentRowSpan = currentCell.rowSpan;\n            newCell.colSpan = currentCell.colSpan;\n            // rowspan > 1\n            if (currentRowSpan > 1) {\n                newCell.rowSpan = this._w.Math.floor(currentRowSpan / 2);\n                const newRowSpan = currentRowSpan - newCell.rowSpan;\n                const rowSpanArr = [];\n                const nextRowIndex = util.getArrayIndex(rows, currentRow) + newRowSpan;\n                for(let i = 0, cells, colSpan; i < nextRowIndex; i++){\n                    cells = rows[i].cells;\n                    colSpan = 0;\n                    for(let c = 0, cLen = cells.length, cell, cs, logcalIndex; c < cLen; c++){\n                        logcalIndex = c + colSpan;\n                        if (logcalIndex >= index) break;\n                        cell = cells[c];\n                        cs = cell.rowSpan - 1;\n                        if (cs > 0 && cs + i >= nextRowIndex && logcalIndex < index) {\n                            rowSpanArr.push({\n                                index: logcalIndex,\n                                cs: cell.colSpan\n                            });\n                        }\n                        colSpan += cell.colSpan - 1;\n                    }\n                }\n                const nextRow = rows[nextRowIndex];\n                const nextCells = nextRow.cells;\n                let rs = rowSpanArr.shift();\n                for(let c = 0, cLen = nextCells.length, colSpan = 0, cell, cs, logcalIndex, insertIndex; c < cLen; c++){\n                    logcalIndex = c + colSpan;\n                    cell = nextCells[c];\n                    cs = cell.colSpan - 1;\n                    insertIndex = logcalIndex + cs + 1;\n                    if (rs && insertIndex >= rs.index) {\n                        colSpan += rs.cs;\n                        insertIndex += rs.cs;\n                        rs = rowSpanArr.shift();\n                    }\n                    if (insertIndex >= index || c === cLen - 1) {\n                        nextRow.insertBefore(newCell, cell.nextElementSibling);\n                        break;\n                    }\n                    colSpan += cs;\n                }\n                currentCell.rowSpan = newRowSpan;\n            } else {\n                newCell.rowSpan = currentCell.rowSpan;\n                const newRow = util.createElement(\"TR\");\n                newRow.appendChild(newCell);\n                for(let i = 0, cells; i < rowIndex; i++){\n                    cells = rows[i].cells;\n                    if (cells.length === 0) return;\n                    for(let c = 0, cLen = cells.length; c < cLen; c++){\n                        if (i + cells[c].rowSpan - 1 >= rowIndex) {\n                            cells[c].rowSpan += 1;\n                        }\n                    }\n                }\n                const physicalIndex = contextTable._physical_cellIndex;\n                const cells = currentRow.cells;\n                for(let c = 0, cLen = cells.length; c < cLen; c++){\n                    if (c === physicalIndex) continue;\n                    cells[c].rowSpan += 1;\n                }\n                currentRow.parentNode.insertBefore(newRow, currentRow.nextElementSibling);\n            }\n        }\n        this.focusEdge(currentCell);\n        this.plugins.table.setPositionControllerDiv.call(this, currentCell, true);\n    },\n    mergeCells: function() {\n        const tablePlugin = this.plugins.table;\n        const contextTable = this.context.table;\n        const util = this.util;\n        const ref = tablePlugin._ref;\n        const selectedCells = tablePlugin._selectedCells;\n        const mergeCell = selectedCells[0];\n        let emptyRowFirst = null;\n        let emptyRowLast = null;\n        let cs = ref.ce - ref.cs + 1;\n        let rs = ref.re - ref.rs + 1;\n        let mergeHTML = \"\";\n        let row = null;\n        for(let i = 1, len = selectedCells.length, cell, ch; i < len; i++){\n            cell = selectedCells[i];\n            if (row !== cell.parentNode) row = cell.parentNode;\n            ch = cell.children;\n            for(let c = 0, cLen = ch.length; c < cLen; c++){\n                if (util.isFormatElement(ch[c]) && util.onlyZeroWidthSpace(ch[c].textContent)) {\n                    util.removeItem(ch[c]);\n                }\n            }\n            mergeHTML += cell.innerHTML;\n            util.removeItem(cell);\n            if (row.cells.length === 0) {\n                if (!emptyRowFirst) emptyRowFirst = row;\n                else emptyRowLast = row;\n                rs -= 1;\n            }\n        }\n        if (emptyRowFirst) {\n            const rows = contextTable._trElements;\n            const rowIndexFirst = util.getArrayIndex(rows, emptyRowFirst);\n            const rowIndexLast = util.getArrayIndex(rows, emptyRowLast || emptyRowFirst);\n            const removeRows = [];\n            for(let i = 0, cells; i <= rowIndexLast; i++){\n                cells = rows[i].cells;\n                if (cells.length === 0) {\n                    removeRows.push(rows[i]);\n                    continue;\n                }\n                for(let c = 0, cLen = cells.length, cell, rs; c < cLen; c++){\n                    cell = cells[c];\n                    rs = cell.rowSpan - 1;\n                    if (rs > 0 && i + rs >= rowIndexFirst) {\n                        cell.rowSpan -= util.getOverlapRangeAtIndex(rowIndexFirst, rowIndexLast, i, i + rs);\n                    }\n                }\n            }\n            for(let i = 0, len = removeRows.length; i < len; i++){\n                util.removeItem(removeRows[i]);\n            }\n        }\n        mergeCell.innerHTML += mergeHTML;\n        mergeCell.colSpan = cs;\n        mergeCell.rowSpan = rs;\n        this.controllersOff();\n        tablePlugin.setActiveButton.call(this, true, false);\n        tablePlugin.call_controller_tableEdit.call(this, mergeCell);\n        util.addClass(mergeCell, \"se-table-selected-cell\");\n        this.focusEdge(mergeCell);\n    },\n    toggleHeader: function() {\n        const util = this.util;\n        const headerButton = this.context.table.headerButton;\n        const active = util.hasClass(headerButton, \"active\");\n        const table = this.context.table._element;\n        if (!active) {\n            const header = util.createElement(\"THEAD\");\n            header.innerHTML = \"<tr>\" + this.plugins.table.createCells.call(this, \"th\", this.context.table._logical_cellCnt, false) + \"</tr>\";\n            table.insertBefore(header, table.firstElementChild);\n        } else {\n            util.removeItem(table.querySelector(\"thead\"));\n        }\n        util.toggleClass(headerButton, \"active\");\n        if (/TH/i.test(this.context.table._tdElement.nodeName)) {\n            this.controllersOff();\n        } else {\n            this.plugins.table.setPositionControllerDiv.call(this, this.context.table._tdElement, false);\n        }\n    },\n    setTableStyle: function(styles) {\n        const contextTable = this.context.table;\n        const tableElement = contextTable._element;\n        let icon, span, sizeIcon, text;\n        if (styles.indexOf(\"width\") > -1) {\n            icon = contextTable.resizeButton.firstElementChild;\n            span = contextTable.resizeText;\n            if (!contextTable._maxWidth) {\n                sizeIcon = contextTable.icons.expansion;\n                text = contextTable.maxText;\n                contextTable.columnFixedButton.style.display = \"none\";\n                this.util.removeClass(tableElement, \"se-table-size-100\");\n                this.util.addClass(tableElement, \"se-table-size-auto\");\n            } else {\n                sizeIcon = contextTable.icons.reduction;\n                text = contextTable.minText;\n                contextTable.columnFixedButton.style.display = \"block\";\n                this.util.removeClass(tableElement, \"se-table-size-auto\");\n                this.util.addClass(tableElement, \"se-table-size-100\");\n            }\n            this.util.changeElement(icon, sizeIcon);\n            this.util.changeTxt(span, text);\n        }\n        if (styles.indexOf(\"column\") > -1) {\n            if (!contextTable._fixedColumn) {\n                this.util.removeClass(tableElement, \"se-table-layout-fixed\");\n                this.util.addClass(tableElement, \"se-table-layout-auto\");\n                this.util.removeClass(contextTable.columnFixedButton, \"active\");\n            } else {\n                this.util.removeClass(tableElement, \"se-table-layout-auto\");\n                this.util.addClass(tableElement, \"se-table-layout-fixed\");\n                this.util.addClass(contextTable.columnFixedButton, \"active\");\n            }\n        }\n    },\n    setActiveButton: function(fixedCell, selectedCell) {\n        const contextTable = this.context.table;\n        if (/^TH$/i.test(fixedCell.nodeName)) {\n            contextTable.insertRowAboveButton.setAttribute(\"disabled\", true);\n            contextTable.insertRowBelowButton.setAttribute(\"disabled\", true);\n        } else {\n            contextTable.insertRowAboveButton.removeAttribute(\"disabled\");\n            contextTable.insertRowBelowButton.removeAttribute(\"disabled\");\n        }\n        if (!selectedCell || fixedCell === selectedCell) {\n            contextTable.splitButton.removeAttribute(\"disabled\");\n            contextTable.mergeButton.setAttribute(\"disabled\", true);\n        } else {\n            contextTable.splitButton.setAttribute(\"disabled\", true);\n            contextTable.mergeButton.removeAttribute(\"disabled\");\n        }\n    },\n    // multi selecte\n    _bindOnSelect: null,\n    _bindOffSelect: null,\n    _bindOffShift: null,\n    _selectedCells: null,\n    _shift: false,\n    _fixedCell: null,\n    _fixedCellName: null,\n    _selectedCell: null,\n    _selectedTable: null,\n    _ref: null,\n    _toggleEditor: function(enabled) {\n        this.context.element.wysiwyg.setAttribute(\"contenteditable\", enabled);\n        if (enabled) this.util.removeClass(this.context.element.wysiwyg, \"se-disabled\");\n        else this.util.addClass(this.context.element.wysiwyg, \"se-disabled\");\n    },\n    _offCellMultiSelect: function(e) {\n        e.stopPropagation();\n        const tablePlugin = this.plugins.table;\n        if (!tablePlugin._shift) {\n            tablePlugin._removeEvents.call(this);\n            tablePlugin._toggleEditor.call(this, true);\n        } else if (tablePlugin._initBind) {\n            this._wd.removeEventListener(\"touchmove\", tablePlugin._initBind);\n            tablePlugin._initBind = null;\n        }\n        if (!tablePlugin._fixedCell || !tablePlugin._selectedTable) return;\n        tablePlugin.setActiveButton.call(this, tablePlugin._fixedCell, tablePlugin._selectedCell);\n        tablePlugin.call_controller_tableEdit.call(this, tablePlugin._selectedCell || tablePlugin._fixedCell);\n        tablePlugin._selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n        if (tablePlugin._selectedCell && tablePlugin._fixedCell) this.focusEdge(tablePlugin._selectedCell);\n        if (!tablePlugin._shift) {\n            tablePlugin._fixedCell = null;\n            tablePlugin._selectedCell = null;\n            tablePlugin._fixedCellName = null;\n        }\n    },\n    _onCellMultiSelect: function(e) {\n        this._antiBlur = true;\n        const tablePlugin = this.plugins.table;\n        const target = this.util.getParentElement(e.target, this.util.isCell);\n        if (tablePlugin._shift) {\n            if (target === tablePlugin._fixedCell) tablePlugin._toggleEditor.call(this, true);\n            else tablePlugin._toggleEditor.call(this, false);\n        } else if (!tablePlugin._ref) {\n            if (target === tablePlugin._fixedCell) return;\n            else tablePlugin._toggleEditor.call(this, false);\n        }\n        if (!target || target === tablePlugin._selectedCell || tablePlugin._fixedCellName !== target.nodeName || tablePlugin._selectedTable !== this.util.getParentElement(target, \"TABLE\")) {\n            return;\n        }\n        tablePlugin._selectedCell = target;\n        tablePlugin._setMultiCells.call(this, tablePlugin._fixedCell, target);\n    },\n    _setMultiCells: function(startCell, endCell) {\n        const tablePlugin = this.plugins.table;\n        const rows = tablePlugin._selectedTable.rows;\n        const util = this.util;\n        const selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n        for(let i = 0, len = selectedCells.length; i < len; i++){\n            util.removeClass(selectedCells[i], \"se-table-selected-cell\");\n        }\n        if (startCell === endCell) {\n            util.addClass(startCell, \"se-table-selected-cell\");\n            if (!tablePlugin._shift) return;\n        }\n        let findSelectedCell = true;\n        let spanIndex = [];\n        let rowSpanArr = [];\n        const ref = tablePlugin._ref = {\n            _i: 0,\n            cs: null,\n            ce: null,\n            rs: null,\n            re: null\n        };\n        for(let i = 0, len = rows.length, cells, colSpan; i < len; i++){\n            cells = rows[i].cells;\n            colSpan = 0;\n            for(let c = 0, cLen = cells.length, cell, logcalIndex, cs, rs; c < cLen; c++){\n                cell = cells[c];\n                cs = cell.colSpan - 1;\n                rs = cell.rowSpan - 1;\n                logcalIndex = c + colSpan;\n                if (spanIndex.length > 0) {\n                    for(let r = 0, arr; r < spanIndex.length; r++){\n                        arr = spanIndex[r];\n                        if (arr.row > i) continue;\n                        if (logcalIndex >= arr.index) {\n                            colSpan += arr.cs;\n                            logcalIndex += arr.cs;\n                            arr.rs -= 1;\n                            arr.row = i + 1;\n                            if (arr.rs < 1) {\n                                spanIndex.splice(r, 1);\n                                r--;\n                            }\n                        } else if (c === cLen - 1) {\n                            arr.rs -= 1;\n                            arr.row = i + 1;\n                            if (arr.rs < 1) {\n                                spanIndex.splice(r, 1);\n                                r--;\n                            }\n                        }\n                    }\n                }\n                if (findSelectedCell) {\n                    if (cell === startCell || cell === endCell) {\n                        ref.cs = ref.cs !== null && ref.cs < logcalIndex ? ref.cs : logcalIndex;\n                        ref.ce = ref.ce !== null && ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;\n                        ref.rs = ref.rs !== null && ref.rs < i ? ref.rs : i;\n                        ref.re = ref.re !== null && ref.re > i + rs ? ref.re : i + rs;\n                        ref._i += 1;\n                    }\n                    if (ref._i === 2) {\n                        findSelectedCell = false;\n                        spanIndex = [];\n                        rowSpanArr = [];\n                        i = -1;\n                        break;\n                    }\n                } else if (util.getOverlapRangeAtIndex(ref.cs, ref.ce, logcalIndex, logcalIndex + cs) && util.getOverlapRangeAtIndex(ref.rs, ref.re, i, i + rs)) {\n                    const newCs = ref.cs < logcalIndex ? ref.cs : logcalIndex;\n                    const newCe = ref.ce > logcalIndex + cs ? ref.ce : logcalIndex + cs;\n                    const newRs = ref.rs < i ? ref.rs : i;\n                    const newRe = ref.re > i + rs ? ref.re : i + rs;\n                    if (ref.cs !== newCs || ref.ce !== newCe || ref.rs !== newRs || ref.re !== newRe) {\n                        ref.cs = newCs;\n                        ref.ce = newCe;\n                        ref.rs = newRs;\n                        ref.re = newRe;\n                        i = -1;\n                        spanIndex = [];\n                        rowSpanArr = [];\n                        break;\n                    }\n                    util.addClass(cell, \"se-table-selected-cell\");\n                }\n                if (rs > 0) {\n                    rowSpanArr.push({\n                        index: logcalIndex,\n                        cs: cs + 1,\n                        rs: rs,\n                        row: -1\n                    });\n                }\n                colSpan += cell.colSpan - 1;\n            }\n            spanIndex = spanIndex.concat(rowSpanArr).sort(function(a, b) {\n                return a.index - b.index;\n            });\n            rowSpanArr = [];\n        }\n    },\n    _removeEvents: function() {\n        const tablePlugin = this.plugins.table;\n        if (tablePlugin._initBind) {\n            this._wd.removeEventListener(\"touchmove\", tablePlugin._initBind);\n            tablePlugin._initBind = null;\n        }\n        if (tablePlugin._bindOnSelect) {\n            this._wd.removeEventListener(\"mousedown\", tablePlugin._bindOnSelect);\n            this._wd.removeEventListener(\"mousemove\", tablePlugin._bindOnSelect);\n            tablePlugin._bindOnSelect = null;\n        }\n        if (tablePlugin._bindOffSelect) {\n            this._wd.removeEventListener(\"mouseup\", tablePlugin._bindOffSelect);\n            tablePlugin._bindOffSelect = null;\n        }\n        if (tablePlugin._bindOffShift) {\n            this._wd.removeEventListener(\"keyup\", tablePlugin._bindOffShift);\n            tablePlugin._bindOffShift = null;\n        }\n    },\n    _initBind: null,\n    onTableCellMultiSelect: function(tdElement, shift) {\n        const tablePlugin = this.plugins.table;\n        tablePlugin._removeEvents.call(this);\n        this.controllersOff();\n        tablePlugin._shift = shift;\n        tablePlugin._fixedCell = tdElement;\n        tablePlugin._fixedCellName = tdElement.nodeName;\n        tablePlugin._selectedTable = this.util.getParentElement(tdElement, \"TABLE\");\n        const selectedCells = tablePlugin._selectedTable.querySelectorAll(\".se-table-selected-cell\");\n        for(let i = 0, len = selectedCells.length; i < len; i++){\n            this.util.removeClass(selectedCells[i], \"se-table-selected-cell\");\n        }\n        this.util.addClass(tdElement, \"se-table-selected-cell\");\n        tablePlugin._bindOnSelect = tablePlugin._onCellMultiSelect.bind(this);\n        tablePlugin._bindOffSelect = tablePlugin._offCellMultiSelect.bind(this);\n        if (!shift) {\n            this._wd.addEventListener(\"mousemove\", tablePlugin._bindOnSelect, false);\n        } else {\n            tablePlugin._bindOffShift = (function() {\n                this.controllersOn(this.context.table.resizeDiv, this.context.table.tableController, this.plugins.table.init.bind(this), tdElement, \"table\");\n                if (!tablePlugin._ref) this.controllersOff();\n            }).bind(this);\n            this._wd.addEventListener(\"keyup\", tablePlugin._bindOffShift, false);\n            this._wd.addEventListener(\"mousedown\", tablePlugin._bindOnSelect, false);\n        }\n        this._wd.addEventListener(\"mouseup\", tablePlugin._bindOffSelect, false);\n        tablePlugin._initBind = tablePlugin.init.bind(this);\n        this._wd.addEventListener(\"touchmove\", tablePlugin._initBind, false);\n    },\n    onClick_tableController: function(e) {\n        e.stopPropagation();\n        const target = e.target.getAttribute(\"data-command\") ? e.target : e.target.parentNode;\n        if (target.getAttribute(\"disabled\")) return;\n        const command = target.getAttribute(\"data-command\");\n        const value = target.getAttribute(\"data-value\");\n        const option = target.getAttribute(\"data-option\");\n        const tablePlugin = this.plugins.table;\n        if (typeof tablePlugin._closeSplitMenu === \"function\") {\n            tablePlugin._closeSplitMenu();\n            if (command === \"onsplit\") return;\n        }\n        if (!command) return;\n        e.preventDefault();\n        const contextTable = this.context.table;\n        switch(command){\n            case \"insert\":\n            case \"delete\":\n                tablePlugin.editTable.call(this, value, option);\n                break;\n            case \"header\":\n                tablePlugin.toggleHeader.call(this);\n                break;\n            case \"onsplit\":\n                tablePlugin.openSplitMenu.call(this);\n                break;\n            case \"split\":\n                tablePlugin.splitCells.call(this, value);\n                break;\n            case \"merge\":\n                tablePlugin.mergeCells.call(this);\n                break;\n            case \"resize\":\n                contextTable._maxWidth = !contextTable._maxWidth;\n                tablePlugin.setTableStyle.call(this, \"width\");\n                tablePlugin.setPositionControllerTop.call(this, contextTable._element);\n                tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);\n                break;\n            case \"layout\":\n                contextTable._fixedColumn = !contextTable._fixedColumn;\n                tablePlugin.setTableStyle.call(this, \"column\");\n                tablePlugin.setPositionControllerTop.call(this, contextTable._element);\n                tablePlugin.setPositionControllerDiv.call(this, contextTable._tdElement, tablePlugin._shift);\n                break;\n            case \"remove\":\n                const emptyDiv = contextTable._element.parentNode;\n                this.util.removeItem(contextTable._element);\n                this.controllersOff();\n                if (emptyDiv !== this.context.element.wysiwyg) this.util.removeItemAllParents(emptyDiv, function(current) {\n                    return current.childNodes.length === 0;\n                }, null);\n                this.focus();\n        }\n        // history stack\n        this.history.push(false);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/table.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/template.js":
/*!****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/template.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"template\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.template = {\n            selectedIndex: -1\n        };\n        /** set submenu */ let templateDiv = this.setSubmenu(core);\n        /** add event listeners */ templateDiv.querySelector(\"ul\").addEventListener(\"click\", this.pickup.bind(core));\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, templateDiv);\n        /** empty memory */ templateDiv = null;\n    },\n    setSubmenu: function(core) {\n        const templateList = core.options.templates;\n        if (!templateList || templateList.length === 0) {\n            throw Error('[SUNEDITOR.plugins.template.fail] To use the \"template\" plugin, please define the \"templates\" option.');\n        }\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-list-layer\";\n        let list = '<div class=\"se-submenu se-list-inner\">' + '<ul class=\"se-list-basic\">';\n        for(let i = 0, len = templateList.length, t; i < len; i++){\n            t = templateList[i];\n            list += '<li><button type=\"button\" class=\"se-btn-list\" data-value=\"' + i + '\" title=\"' + t.name + '\" aria-label=\"' + t.name + '\">' + t.name + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    pickup: function(e) {\n        if (!/^BUTTON$/i.test(e.target.tagName)) return false;\n        e.preventDefault();\n        e.stopPropagation();\n        this.context.template.selectedIndex = e.target.getAttribute(\"data-value\") * 1;\n        const temp = this.options.templates[this.context.template.selectedIndex];\n        if (temp.html) {\n            this.setContents(temp.html);\n        } else {\n            this.submenuOff();\n            throw Error('[SUNEDITOR.template.fail] cause : \"templates[i].html not found\"');\n        }\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3BsdWdpbnMvc3VibWVudS90ZW1wbGF0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQSwrREFBZTtJQUNYQSxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsS0FBSyxTQUFVQyxJQUFJLEVBQUVDLGFBQWE7UUFDOUIsTUFBTUMsVUFBVUYsS0FBS0UsT0FBTztRQUM1QkEsUUFBUUMsUUFBUSxHQUFHO1lBQ2ZDLGVBQWUsQ0FBQztRQUNwQjtRQUVBLGdCQUFnQixHQUNoQixJQUFJQyxjQUFjLElBQUksQ0FBQ0MsVUFBVSxDQUFDTjtRQUVsQyx3QkFBd0IsR0FDeEJLLFlBQVlFLGFBQWEsQ0FBQyxNQUFNQyxnQkFBZ0IsQ0FBQyxTQUFTLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNWO1FBRTNFLDhCQUE4QixHQUM5QkEsS0FBS1csY0FBYyxDQUFDLElBQUksQ0FBQ2QsSUFBSSxFQUFFSSxlQUFlSTtRQUU5QyxpQkFBaUIsR0FDakJBLGNBQWM7SUFDbEI7SUFFQUMsWUFBWSxTQUFVTixJQUFJO1FBQ3RCLE1BQU1ZLGVBQWVaLEtBQUthLE9BQU8sQ0FBQ0MsU0FBUztRQUMzQyxJQUFJLENBQUNGLGdCQUFnQkEsYUFBYUcsTUFBTSxLQUFLLEdBQUc7WUFDNUMsTUFBTUMsTUFBTTtRQUNoQjtRQUVBLE1BQU1DLFVBQVVqQixLQUFLa0IsSUFBSSxDQUFDQyxhQUFhLENBQUM7UUFDeENGLFFBQVFHLFNBQVMsR0FBRztRQUVwQixJQUFJQyxPQUFPLDJDQUNIO1FBQ1IsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLE1BQU1YLGFBQWFHLE1BQU0sRUFBRVMsR0FBR0YsSUFBSUMsS0FBS0QsSUFBSztZQUN4REUsSUFBSVosWUFBWSxDQUFDVSxFQUFFO1lBQ25CRCxRQUFRLCtEQUErREMsSUFBSSxjQUFjRSxFQUFFM0IsSUFBSSxHQUFHLG1CQUFtQjJCLEVBQUUzQixJQUFJLEdBQUcsT0FBTzJCLEVBQUUzQixJQUFJLEdBQUc7UUFDbEo7UUFDQXdCLFFBQVE7UUFFUkosUUFBUVEsU0FBUyxHQUFHSjtRQUVwQixPQUFPSjtJQUNYO0lBRUFSLFFBQVEsU0FBVWlCLENBQUM7UUFDZixJQUFJLENBQUMsWUFBWUMsSUFBSSxDQUFDRCxFQUFFRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxPQUFPO1FBRWhESCxFQUFFSSxjQUFjO1FBQ2hCSixFQUFFSyxlQUFlO1FBRWpCLElBQUksQ0FBQzdCLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDQyxhQUFhLEdBQUdzQixFQUFFRSxNQUFNLENBQUNJLFlBQVksQ0FBQyxnQkFBZ0I7UUFDNUUsTUFBTUMsT0FBTyxJQUFJLENBQUNwQixPQUFPLENBQUNDLFNBQVMsQ0FBQyxJQUFJLENBQUNaLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDQyxhQUFhLENBQUM7UUFFeEUsSUFBSTZCLEtBQUtDLElBQUksRUFBRTtZQUNYLElBQUksQ0FBQ0MsV0FBVyxDQUFDRixLQUFLQyxJQUFJO1FBQzlCLE9BQU87WUFDSCxJQUFJLENBQUNFLFVBQVU7WUFDZixNQUFNcEIsTUFBTTtRQUNoQjtRQUVBLElBQUksQ0FBQ29CLFVBQVU7SUFDbkI7QUFDSixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N1bmVkaXRvci9zcmMvcGx1Z2lucy9zdWJtZW51L3RlbXBsYXRlLmpzPzk2MGIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxuICpcbiAqIHN1bmVkaXRvci5qc1xuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cbiAqIE1JVCBsaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAndGVtcGxhdGUnLFxuICAgIGRpc3BsYXk6ICdzdWJtZW51JyxcbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3JlLCB0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XG4gICAgICAgIGNvbnRleHQudGVtcGxhdGUgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4OiAtMVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKiBzZXQgc3VibWVudSAqL1xuICAgICAgICBsZXQgdGVtcGxhdGVEaXYgPSB0aGlzLnNldFN1Ym1lbnUoY29yZSk7XG5cbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cbiAgICAgICAgdGVtcGxhdGVEaXYucXVlcnlTZWxlY3RvcigndWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGlja3VwLmJpbmQoY29yZSkpO1xuXG4gICAgICAgIC8qKiBhcHBlbmQgdGFyZ2V0IGJ1dHRvbiBtZW51ICovXG4gICAgICAgIGNvcmUuaW5pdE1lbnVUYXJnZXQodGhpcy5uYW1lLCB0YXJnZXRFbGVtZW50LCB0ZW1wbGF0ZURpdik7XG5cbiAgICAgICAgLyoqIGVtcHR5IG1lbW9yeSAqL1xuICAgICAgICB0ZW1wbGF0ZURpdiA9IG51bGw7XG4gICAgfSxcblxuICAgIHNldFN1Ym1lbnU6IGZ1bmN0aW9uIChjb3JlKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlTGlzdCA9IGNvcmUub3B0aW9ucy50ZW1wbGF0ZXM7XG4gICAgICAgIGlmICghdGVtcGxhdGVMaXN0IHx8IHRlbXBsYXRlTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLnBsdWdpbnMudGVtcGxhdGUuZmFpbF0gVG8gdXNlIHRoZSBcInRlbXBsYXRlXCIgcGx1Z2luLCBwbGVhc2UgZGVmaW5lIHRoZSBcInRlbXBsYXRlc1wiIG9wdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpc3REaXYgPSBjb3JlLnV0aWwuY3JlYXRlRWxlbWVudCgnRElWJyk7XG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ3NlLWxpc3QtbGF5ZXInO1xuXG4gICAgICAgIGxldCBsaXN0ID0gJzxkaXYgY2xhc3M9XCJzZS1zdWJtZW51IHNlLWxpc3QtaW5uZXJcIj4nICtcbiAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwic2UtbGlzdC1iYXNpY1wiPic7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0ZW1wbGF0ZUxpc3QubGVuZ3RoLCB0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHQgPSB0ZW1wbGF0ZUxpc3RbaV07XG4gICAgICAgICAgICBsaXN0ICs9ICc8bGk+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzZS1idG4tbGlzdFwiIGRhdGEtdmFsdWU9XCInICsgaSArICdcIiB0aXRsZT1cIicgKyB0Lm5hbWUgKyAnXCIgYXJpYS1sYWJlbD1cIicgKyB0Lm5hbWUgKyAnXCI+JyArIHQubmFtZSArICc8L2J1dHRvbj48L2xpPic7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdCArPSAnPC91bD48L2Rpdj4nO1xuXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gbGlzdDtcblxuICAgICAgICByZXR1cm4gbGlzdERpdjtcbiAgICB9LFxuXG4gICAgcGlja3VwOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoIS9eQlVUVE9OJC9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgdGhpcy5jb250ZXh0LnRlbXBsYXRlLnNlbGVjdGVkSW5kZXggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSAqIDE7XG4gICAgICAgIGNvbnN0IHRlbXAgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGVzW3RoaXMuY29udGV4dC50ZW1wbGF0ZS5zZWxlY3RlZEluZGV4XTtcblxuICAgICAgICBpZiAodGVtcC5odG1sKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbnRlbnRzKHRlbXAuaHRtbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLnRlbXBsYXRlLmZhaWxdIGNhdXNlIDogXCJ0ZW1wbGF0ZXNbaV0uaHRtbCBub3QgZm91bmRcIicpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN1Ym1lbnVPZmYoKTtcbiAgICB9XG59OyJdLCJuYW1lcyI6WyJuYW1lIiwiZGlzcGxheSIsImFkZCIsImNvcmUiLCJ0YXJnZXRFbGVtZW50IiwiY29udGV4dCIsInRlbXBsYXRlIiwic2VsZWN0ZWRJbmRleCIsInRlbXBsYXRlRGl2Iiwic2V0U3VibWVudSIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwicGlja3VwIiwiYmluZCIsImluaXRNZW51VGFyZ2V0IiwidGVtcGxhdGVMaXN0Iiwib3B0aW9ucyIsInRlbXBsYXRlcyIsImxlbmd0aCIsIkVycm9yIiwibGlzdERpdiIsInV0aWwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibGlzdCIsImkiLCJsZW4iLCJ0IiwiaW5uZXJIVE1MIiwiZSIsInRlc3QiLCJ0YXJnZXQiLCJ0YWdOYW1lIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJnZXRBdHRyaWJ1dGUiLCJ0ZW1wIiwiaHRtbCIsInNldENvbnRlbnRzIiwic3VibWVudU9mZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/template.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/textStyle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/suneditor/src/plugins/submenu/textStyle.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"textStyle\",\n    display: \"submenu\",\n    add: function(core, targetElement) {\n        const context = core.context;\n        context.textStyle = {\n            _styleList: null\n        };\n        /** set submenu */ let listDiv = this.setSubmenu(core);\n        let listUl = listDiv.querySelector(\"ul\");\n        /** add event listeners */ listUl.addEventListener(\"click\", this.pickup.bind(core));\n        context.textStyle._styleList = listDiv.querySelectorAll(\"li button\");\n        /** append target button menu */ core.initMenuTarget(this.name, targetElement, listDiv);\n        /** empty memory */ listDiv = null, listUl = null;\n    },\n    setSubmenu: function(core) {\n        const option = core.options;\n        const listDiv = core.util.createElement(\"DIV\");\n        listDiv.className = \"se-submenu se-list-layer se-list-format\";\n        const defaultList = {\n            code: {\n                name: core.lang.menu.code,\n                class: \"__se__t-code\",\n                tag: \"code\"\n            },\n            translucent: {\n                name: core.lang.menu.translucent,\n                style: \"opacity: 0.5;\",\n                tag: \"span\"\n            },\n            shadow: {\n                name: core.lang.menu.shadow,\n                class: \"__se__t-shadow\",\n                tag: \"span\"\n            }\n        };\n        const styleList = !option.textStyles ? core._w.Object.keys(defaultList) : option.textStyles;\n        let list = '<div class=\"se-list-inner\"><ul class=\"se-list-basic\">';\n        for(let i = 0, len = styleList.length, t, tag, name, attrs, command, value, _class; i < len; i++){\n            t = styleList[i];\n            attrs = \"\", value = \"\", command = [];\n            if (typeof t === \"string\") {\n                const defaultStyle = defaultList[t.toLowerCase()];\n                if (!defaultStyle) continue;\n                t = defaultStyle;\n            }\n            name = t.name;\n            tag = t.tag || \"span\";\n            _class = t._class;\n            if (t.style) {\n                attrs += ' style=\"' + t.style + '\"';\n                value += t.style.replace(/:[^;]+(;|$)\\s*/g, \",\");\n                command.push(\"style\");\n            }\n            if (t.class) {\n                attrs += ' class=\"' + t.class + '\"';\n                value += \".\" + t.class.trim().replace(/\\s+/g, \",.\");\n                command.push(\"class\");\n            }\n            value = value.replace(/,$/, \"\");\n            list += \"<li>\" + '<button type=\"button\" class=\"se-btn-list' + (_class ? \" \" + _class : \"\") + '\" data-command=\"' + tag + '\" data-value=\"' + value + '\" title=\"' + name + '\" aria-label=\"' + name + '\">' + \"<\" + tag + attrs + \">\" + name + \"</\" + tag + \">\" + \"</button></li>\";\n        }\n        list += \"</ul></div>\";\n        listDiv.innerHTML = list;\n        return listDiv;\n    },\n    /**\n     * @Override submenu\n     */ on: function() {\n        const util = this.util;\n        const textStyleContext = this.context.textStyle;\n        const styleButtonList = textStyleContext._styleList;\n        const selectionNode = this.getSelectionNode();\n        for(let i = 0, len = styleButtonList.length, btn, data, active; i < len; i++){\n            btn = styleButtonList[i];\n            data = btn.getAttribute(\"data-value\").split(\",\");\n            for(let v = 0, node, value; v < data.length; v++){\n                node = selectionNode;\n                active = false;\n                while(node && !util.isFormatElement(node) && !util.isComponent(node)){\n                    if (node.nodeName.toLowerCase() === btn.getAttribute(\"data-command\").toLowerCase()) {\n                        value = data[v];\n                        if (/^\\./.test(value) ? util.hasClass(node, value.replace(/^\\./, \"\")) : !!node.style[value]) {\n                            active = true;\n                            break;\n                        }\n                    }\n                    node = node.parentNode;\n                }\n                if (!active) break;\n            }\n            active ? util.addClass(btn, \"active\") : util.removeClass(btn, \"active\");\n        }\n    },\n    pickup: function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        let target = e.target;\n        let command = null, tag = null;\n        while(!command && !/UL/i.test(target.tagName)){\n            command = target.getAttribute(\"data-command\");\n            if (command) {\n                tag = target.firstChild;\n                break;\n            }\n            target = target.parentNode;\n        }\n        if (!command) return;\n        const checkStyles = tag.style.cssText.replace(/:.+(;|$)/g, \",\").split(\",\");\n        checkStyles.pop();\n        const classes = tag.classList;\n        for(let i = 0, len = classes.length; i < len; i++){\n            checkStyles.push(\".\" + classes[i]);\n        }\n        const newNode = this.util.hasClass(target, \"active\") ? null : tag.cloneNode(false);\n        const removeNodes = newNode ? null : [\n            tag.nodeName\n        ];\n        this.nodeChange(newNode, checkStyles, removeNodes, true);\n        this.submenuOff();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/textStyle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/src/suneditor.js":
/*!*************************************************!*\
  !*** ./node_modules/suneditor/src/suneditor.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/core */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/core.js\");\n/* harmony import */ var _lib_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/util */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/util.js\");\n/* harmony import */ var _lib_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/constructor */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/constructor.js\");\n/* harmony import */ var _lib_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/context */ \"(app-pages-browser)/./node_modules/suneditor/src/lib/context.js\");\n/*\n * wysiwyg web editor\n *\n * suneditor.js\n * Copyright 2017 JiHong Lee.\n * MIT license.\n */ \n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    /**\n     * @description Returns the create function with preset options.\n     * If the options overlap, the options of the 'create' function take precedence.\n     * @param {Json} options Initialization options\n     * @returns {Object}\n     */ init: function(init_options) {\n        return {\n            create: (function(idOrElement, options) {\n                return this.create(idOrElement, options, init_options);\n            }).bind(this)\n        };\n    },\n    /**\n     * @description Create the suneditor\n     * @param {String|Element} idOrElement textarea Id or textarea element\n     * @param {JSON|Object} options user options\n     * @returns {Object}\n     */ create: function(idOrElement, options, _init_options) {\n        _lib_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"]._propertiesInit();\n        if (typeof options !== \"object\") options = {};\n        if (_init_options) {\n            options = [\n                _init_options,\n                options\n            ].reduce(function(init, option) {\n                for(let key in option){\n                    if (!_lib_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasOwn(option, key)) continue;\n                    if (key === \"plugins\" && option[key] && init[key]) {\n                        let i = init[key], o = option[key];\n                        i = i.length ? i : Object.keys(i).map(function(name) {\n                            return i[name];\n                        });\n                        o = o.length ? o : Object.keys(o).map(function(name) {\n                            return o[name];\n                        });\n                        init[key] = o.filter(function(val) {\n                            return i.indexOf(val) === -1;\n                        }).concat(i);\n                    } else {\n                        init[key] = option[key];\n                    }\n                }\n                return init;\n            }, {});\n        }\n        const element = typeof idOrElement === \"string\" ? document.getElementById(idOrElement) : idOrElement;\n        if (!element) {\n            if (typeof idOrElement === \"string\") {\n                throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:\"' + idOrElement + '\")');\n            }\n            throw Error(\"[SUNEDITOR.create.fail] suneditor requires textarea's element or id value\");\n        }\n        const cons = _lib_constructor__WEBPACK_IMPORTED_MODULE_1__[\"default\"].init(element, options);\n        if (cons.constructed._top.id && document.getElementById(cons.constructed._top.id)) {\n            throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:\"' + cons.constructed._top.id + '\")');\n        }\n        return (0,_lib_core__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_lib_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(element, cons.constructed, cons.options), cons.pluginCallButtons, cons.plugins, cons.options.lang, options, cons._responsiveButtons);\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3Ivc3JjL3N1bmVkaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNEO0FBRThCO0FBQ0E7QUFDZTtBQUNSO0FBRXJDLCtEQUFlO0lBQ1g7Ozs7O0tBS0MsR0FDREksTUFBTSxTQUFVQyxZQUFZO1FBQ3hCLE9BQU87WUFDSEMsUUFBUSxVQUFVQyxXQUFXLEVBQUVDLE9BQU87Z0JBQ2xDLE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUNDLGFBQWFDLFNBQVNIO1lBQzdDLEdBQUVJLElBQUksQ0FBQyxJQUFJO1FBQ2Y7SUFDSjtJQUVBOzs7OztLQUtDLEdBQ0RILFFBQVEsU0FBVUMsV0FBVyxFQUFFQyxPQUFPLEVBQUVFLGFBQWE7UUFDakRULGlEQUFJQSxDQUFDVSxlQUFlO1FBRXBCLElBQUksT0FBT0gsWUFBWSxVQUFVQSxVQUFVLENBQUM7UUFDNUMsSUFBSUUsZUFBZTtZQUNmRixVQUFXO2dCQUFDRTtnQkFBZUY7YUFBUSxDQUFDSSxNQUFNLENBQUMsU0FBVVIsSUFBSSxFQUFFUyxNQUFNO2dCQUNqRCxJQUFLLElBQUlDLE9BQU9ELE9BQVE7b0JBQ3BCLElBQUksQ0FBQ1osaURBQUlBLENBQUNjLE1BQU0sQ0FBQ0YsUUFBUUMsTUFBTTtvQkFDL0IsSUFBSUEsUUFBUSxhQUFhRCxNQUFNLENBQUNDLElBQUksSUFBSVYsSUFBSSxDQUFDVSxJQUFJLEVBQUU7d0JBQy9DLElBQUlFLElBQUlaLElBQUksQ0FBQ1UsSUFBSSxFQUFFRyxJQUFJSixNQUFNLENBQUNDLElBQUk7d0JBQ2xDRSxJQUFJQSxFQUFFRSxNQUFNLEdBQUdGLElBQUlHLE9BQU9DLElBQUksQ0FBQ0osR0FBR0ssR0FBRyxDQUFDLFNBQVNDLElBQUk7NEJBQUksT0FBT04sQ0FBQyxDQUFDTSxLQUFLO3dCQUFFO3dCQUN2RUwsSUFBSUEsRUFBRUMsTUFBTSxHQUFHRCxJQUFJRSxPQUFPQyxJQUFJLENBQUNILEdBQUdJLEdBQUcsQ0FBQyxTQUFTQyxJQUFJOzRCQUFJLE9BQU9MLENBQUMsQ0FBQ0ssS0FBSzt3QkFBRTt3QkFDdkVsQixJQUFJLENBQUNVLElBQUksR0FBRyxFQUFHUyxNQUFNLENBQUMsU0FBU0MsR0FBRzs0QkFBSSxPQUFPUixFQUFFUyxPQUFPLENBQUNELFNBQVMsQ0FBQzt3QkFBRyxHQUFJRSxNQUFNLENBQUNWO29CQUNuRixPQUFPO3dCQUNIWixJQUFJLENBQUNVLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO29CQUMzQjtnQkFDSjtnQkFDQSxPQUFPVjtZQUNYLEdBQUcsQ0FBQztRQUNwQjtRQUVBLE1BQU11QixVQUFVLE9BQU9wQixnQkFBZ0IsV0FBV3FCLFNBQVNDLGNBQWMsQ0FBQ3RCLGVBQWVBO1FBRXpGLElBQUksQ0FBQ29CLFNBQVM7WUFDVixJQUFJLE9BQU9wQixnQkFBZ0IsVUFBVTtnQkFDakMsTUFBTXVCLE1BQU0sd0VBQXdFdkIsY0FBYztZQUN0RztZQUVBLE1BQU11QixNQUFNO1FBQ2hCO1FBRUEsTUFBTUMsT0FBTzdCLHdEQUFZQSxDQUFDRSxJQUFJLENBQUN1QixTQUFTbkI7UUFFeEMsSUFBSXVCLEtBQUtDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxFQUFFLElBQUlOLFNBQVNDLGNBQWMsQ0FBQ0UsS0FBS0MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLEVBQUUsR0FBRztZQUMvRSxNQUFNSixNQUFNLGtHQUFrR0MsS0FBS0MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLEVBQUUsR0FBRztRQUM3STtRQUVBLE9BQU9sQyxxREFBSUEsQ0FBQ0csd0RBQVFBLENBQUN3QixTQUFTSSxLQUFLQyxXQUFXLEVBQUVELEtBQUt2QixPQUFPLEdBQUd1QixLQUFLSSxpQkFBaUIsRUFBRUosS0FBS0ssT0FBTyxFQUFFTCxLQUFLdkIsT0FBTyxDQUFDNkIsSUFBSSxFQUFFN0IsU0FBU3VCLEtBQUtPLGtCQUFrQjtJQUM1SjtBQUNKLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3VuZWRpdG9yL3NyYy9zdW5lZGl0b3IuanM/OWVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXG4gKlxuICogc3VuZWRpdG9yLmpzXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxuICogTUlUIGxpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGNvcmUgZnJvbSAnLi9saWIvY29yZSc7XG5pbXBvcnQgdXRpbCBmcm9tICcuL2xpYi91dGlsJztcbmltcG9ydCBfQ29uc3RydWN0b3IgZnJvbSAnLi9saWIvY29uc3RydWN0b3InO1xuaW1wb3J0IF9Db250ZXh0IGZyb20gJy4vbGliL2NvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGNyZWF0ZSBmdW5jdGlvbiB3aXRoIHByZXNldCBvcHRpb25zLlxuICAgICAqIElmIHRoZSBvcHRpb25zIG92ZXJsYXAsIHRoZSBvcHRpb25zIG9mIHRoZSAnY3JlYXRlJyBmdW5jdGlvbiB0YWtlIHByZWNlZGVuY2UuXG4gICAgICogQHBhcmFtIHtKc29ufSBvcHRpb25zIEluaXRpYWxpemF0aW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uIChpbml0X29wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKGlkT3JFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKGlkT3JFbGVtZW50LCBvcHRpb25zLCBpbml0X29wdGlvbnMpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgdGhlIHN1bmVkaXRvclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEVsZW1lbnR9IGlkT3JFbGVtZW50IHRleHRhcmVhIElkIG9yIHRleHRhcmVhIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge0pTT058T2JqZWN0fSBvcHRpb25zIHVzZXIgb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAoaWRPckVsZW1lbnQsIG9wdGlvbnMsIF9pbml0X29wdGlvbnMpIHtcbiAgICAgICAgdXRpbC5fcHJvcGVydGllc0luaXQoKTtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSBvcHRpb25zID0ge307XG4gICAgICAgIGlmIChfaW5pdF9vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gIFtfaW5pdF9vcHRpb25zLCBvcHRpb25zXS5yZWR1Y2UoZnVuY3Rpb24gKGluaXQsIG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmhhc093bihvcHRpb24sIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAncGx1Z2lucycgJiYgb3B0aW9uW2tleV0gJiYgaW5pdFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGluaXRba2V5XSwgbyA9IG9wdGlvbltrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkubGVuZ3RoID8gaSA6IE9iamVjdC5rZXlzKGkpLm1hcChmdW5jdGlvbihuYW1lKSB7IHJldHVybiBpW25hbWVdOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvLmxlbmd0aCA/IG8gOiBPYmplY3Qua2V5cyhvKS5tYXAoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gb1tuYW1lXTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSAoby5maWx0ZXIoZnVuY3Rpb24odmFsKSB7IHJldHVybiBpLmluZGV4T2YodmFsKSA9PT0gLTE7IH0pKS5jb25jYXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSBvcHRpb25ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHR5cGVvZiBpZE9yRWxlbWVudCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZE9yRWxlbWVudCkgOiBpZE9yRWxlbWVudDtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaWRPckVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1tTVU5FRElUT1IuY3JlYXRlLmZhaWxdIFRoZSBlbGVtZW50IGZvciB0aGF0IGlkIHdhcyBub3QgZm91bmQgKElEOlwiJyArIGlkT3JFbGVtZW50ICsgJ1wiKScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gc3VuZWRpdG9yIHJlcXVpcmVzIHRleHRhcmVhXFwncyBlbGVtZW50IG9yIGlkIHZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb25zID0gX0NvbnN0cnVjdG9yLmluaXQoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKGNvbnMuY29uc3RydWN0ZWQuX3RvcC5pZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gVGhlIElEIG9mIHRoZSBzdW5lZGl0b3IgeW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGFscmVhZHkgZXhpc3RzIChJRDpcIicgKyBjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQgKyAnXCIpJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29yZShfQ29udGV4dChlbGVtZW50LCBjb25zLmNvbnN0cnVjdGVkLCBjb25zLm9wdGlvbnMpLCBjb25zLnBsdWdpbkNhbGxCdXR0b25zLCBjb25zLnBsdWdpbnMsIGNvbnMub3B0aW9ucy5sYW5nLCBvcHRpb25zLCBjb25zLl9yZXNwb25zaXZlQnV0dG9ucyk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJjb3JlIiwidXRpbCIsIl9Db25zdHJ1Y3RvciIsIl9Db250ZXh0IiwiaW5pdCIsImluaXRfb3B0aW9ucyIsImNyZWF0ZSIsImlkT3JFbGVtZW50Iiwib3B0aW9ucyIsImJpbmQiLCJfaW5pdF9vcHRpb25zIiwiX3Byb3BlcnRpZXNJbml0IiwicmVkdWNlIiwib3B0aW9uIiwia2V5IiwiaGFzT3duIiwiaSIsIm8iLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwibmFtZSIsImZpbHRlciIsInZhbCIsImluZGV4T2YiLCJjb25jYXQiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIkVycm9yIiwiY29ucyIsImNvbnN0cnVjdGVkIiwiX3RvcCIsImlkIiwicGx1Z2luQ2FsbEJ1dHRvbnMiLCJwbHVnaW5zIiwibGFuZyIsIl9yZXNwb25zaXZlQnV0dG9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/src/suneditor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/suneditor/dist/css/suneditor.min.css":
/*!***********************************************************!*\
  !*** ./node_modules/suneditor/dist/css/suneditor.min.css ***!
  \***********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"1cefd07fee4e\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3IvZGlzdC9jc3Mvc3VuZWRpdG9yLm1pbi5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdW5lZGl0b3IvZGlzdC9jc3Mvc3VuZWRpdG9yLm1pbi5jc3M/NDdkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjFjZWZkMDdmZWU0ZVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/suneditor/dist/css/suneditor.min.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./react/atom/editor.module.scss":
/*!***************************************!*\
  !*** ./react/atom/editor.module.scss ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"editor_editor__MOPOI\"};\n    if(true) {\n      // 1734401902857\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  \nmodule.exports.__checksum = \"b24b195897f0\"\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3JlYWN0L2F0b20vZWRpdG9yLm1vZHVsZS5zY3NzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCO0FBQ2xCLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdNQUFvSSxjQUFjLHNEQUFzRDtBQUN0TyxNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3JlYWN0L2F0b20vZWRpdG9yLm1vZHVsZS5zY3NzP2M5ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImVkaXRvclwiOlwiZWRpdG9yX2VkaXRvcl9fTU9QT0lcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTczNDQwMTkwMjg1N1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvVXNlcnMvZmxleF9hcHBsZV9tMi9wcm9qZWN0L3BrZy5mbGV4aW9uLmNvLmtyL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiL19uZXh0L1wiLFwiZXNNb2R1bGVcIjpmYWxzZSxcImxvY2Fsc1wiOnRydWV9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgXG4gICAgfVxuICBcbm1vZHVsZS5leHBvcnRzLl9fY2hlY2tzdW0gPSBcImIyNGIxOTU4OTdmMFwiXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./react/atom/editor.module.scss\n"));

/***/ }),

/***/ "(app-pages-browser)/./react/atom/editor.tsx":
/*!*******************************!*\
  !*** ./react/atom/editor.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var suneditor__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! suneditor */ \"(app-pages-browser)/./node_modules/suneditor/src/suneditor.js\");\n/* harmony import */ var suneditor_dist_css_suneditor_min_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! suneditor/dist/css/suneditor.min.css */ \"(app-pages-browser)/./node_modules/suneditor/dist/css/suneditor.min.css\");\n/* harmony import */ var _editor_module_scss__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./editor.module.scss */ \"(app-pages-browser)/./react/atom/editor.module.scss\");\n/* harmony import */ var _editor_module_scss__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_editor_module_scss__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var suneditor_src_lang__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! suneditor/src/lang */ \"(app-pages-browser)/./node_modules/suneditor/src/lang/index.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/command/blockquote.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/align.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/font.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/fontSize.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/fontColor.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/hiliteColor.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/horizontalRule.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/list.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/table.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/formatBlock.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/lineHeight.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/template.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/paragraphStyle.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/submenu/textStyle.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/link.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/image.js\");\n/* harmony import */ var suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! suneditor/src/plugins */ \"(app-pages-browser)/./node_modules/suneditor/src/plugins/dialog/video.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nconst SunEditor = (param)=>{\n    let { value = \"\", width = \"100%\", height = \"600px\", onChange, imageUploadUrl } = param;\n    _s();\n    const editorID = \"f\".concat((0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])());\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const toolbar = [\n            [\n                \"undo\",\n                \"redo\"\n            ],\n            [\n                \"formatBlock\",\n                \"bold\",\n                \"underline\",\n                \"italic\",\n                \"strike\"\n            ],\n            [\n                \"fontColor\",\n                \"hiliteColor\"\n            ],\n            [\n                \"align\",\n                \"list\",\n                \"table\"\n            ],\n            [\n                \"link\",\n                \"image\",\n                \"video\"\n            ],\n            [\n                \"fullScreen\",\n                \"codeView\"\n            ]\n        ];\n        const editorOptions = {\n            lang: suneditor_src_lang__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ko,\n            plugins: {\n                blockquote: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n                align: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n                font: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n                fontSize: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n                fontColor: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n                hiliteColor: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n                horizontalRule: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n                list: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n                table: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\n                formatBlock: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n                lineHeight: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n                template: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n                paragraphStyle: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n                textStyle: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\n                link: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n                image: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_20__[\"default\"],\n                video: suneditor_src_plugins__WEBPACK_IMPORTED_MODULE_21__[\"default\"]\n            },\n            width: width,\n            height: height,\n            buttonList: toolbar,\n            formats: [\n                \"h1\",\n                \"h2\",\n                \"h3\",\n                {\n                    tag: \"p\",\n                    name: \"본문\",\n                    command: \"replace\",\n                    class: \"\"\n                },\n                {\n                    tag: \"div\",\n                    name: \"인용구\",\n                    command: \"range\",\n                    class: \"__se__format__range__quote\"\n                }\n            ],\n            resizingBar: false,\n            imageUploadUrl,\n            icons: {\n                undo: '<i class=\"editor undo\">실행취소</i>',\n                redo: '<i class=\"editor redo\">다시실행</i>',\n                bold: '<i class=\"editor bold\">굵게</i>',\n                underline: '<i class=\"editor underline\">밑줄</i>',\n                italic: '<i class=\"editor italic\">기울이기</i>',\n                strike: '<i class=\"editor strike\">가운데선</i>',\n                font_color: '<i class=\"editor font\">글자색</i>',\n                highlight_color: '<i class=\"editor highlighter\">배경색</i>',\n                align_left: '<i class=\"editor align-left\">왼쪽 정렬</i>',\n                align_center: '<i class=\"editor align-center\">가운데 정렬</i>',\n                align_right: '<i class=\"editor align-right\">우측 정렬</i>',\n                align_justify: '<i class=\"editor align-justify\">양쪽 정렬</i>',\n                list_bullets: '<i class=\"editor list-ul\">목록</i>',\n                list_number: '<i class=\"editor list-ol\">숫자 목록</i>',\n                table: '<i class=\"editor table\">테이블</i>',\n                link: '<i class=\"editor link\">링크</i>',\n                image: '<i class=\"editor image\">사진</i>',\n                video: '<i class=\"editor video\">비디오</i>',\n                expansion: '<i class=\"editor expand\">확장</i>',\n                code_view: '<i class=\"editor code\">코드</i>'\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ref.current = suneditor__WEBPACK_IMPORTED_MODULE_22__[\"default\"].create(editorID, editorOptions);\n        ref.current.onChange = function(content) {\n            onChange(content);\n        };\n        return ()=>{\n            ref.current.destroy();\n        };\n    }, [\n        editorID,\n        height,\n        onChange,\n        width,\n        imageUploadUrl\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_editor_module_scss__WEBPACK_IMPORTED_MODULE_23___default().editor),\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n            id: editorID,\n            defaultValue: value\n        }, void 0, false, {\n            fileName: \"/Users/flex_apple_m2/project/pkg.flexion.co.kr/react/atom/editor.tsx\",\n            lineNumber: 134,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/flex_apple_m2/project/pkg.flexion.co.kr/react/atom/editor.tsx\",\n        lineNumber: 133,\n        columnNumber: 5\n    }, undefined);\n};\n_s(SunEditor, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = SunEditor;\n/* harmony default export */ __webpack_exports__[\"default\"] = (SunEditor);\nvar _c;\n$RefreshReg$(_c, \"SunEditor\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./react/atom/editor.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nconst randomUUID = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    randomUUID\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxhQUFhLE9BQU9DLFdBQVcsZUFBZUEsT0FBT0QsVUFBVSxJQUFJQyxPQUFPRCxVQUFVLENBQUNFLElBQUksQ0FBQ0Q7QUFDaEcsK0RBQWU7SUFBRUQ7QUFBVyxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uYXRpdmUuanM/ZWE3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuZXhwb3J0IGRlZmF1bHQgeyByYW5kb21VVUlEIH07XG4iXSwibmFtZXMiOlsicmFuZG9tVVVJRCIsImNyeXB0byIsImJpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLDBKQUEwSixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanM/NTg3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLThdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMHxmZmZmZmZmZi1mZmZmLWZmZmYtZmZmZi1mZmZmZmZmZmZmZmYpJC9pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ rng; }\n/* harmony export */ });\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === \"undefined\" || !crypto.getRandomValues) {\n            throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQTtBQUNKLE1BQU1DLFFBQVEsSUFBSUMsV0FBVztBQUNkLFNBQVNDO0lBQ3BCLElBQUksQ0FBQ0gsaUJBQWlCO1FBQ2xCLElBQUksT0FBT0ksV0FBVyxlQUFlLENBQUNBLE9BQU9KLGVBQWUsRUFBRTtZQUMxRCxNQUFNLElBQUlLLE1BQU07UUFDcEI7UUFDQUwsa0JBQWtCSSxPQUFPSixlQUFlLENBQUNNLElBQUksQ0FBQ0Y7SUFDbEQ7SUFDQSxPQUFPSixnQkFBZ0JDO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzPzUyNzYiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJyB8fCAhY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdldFJhbmRvbVZhbHVlcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn1cbiJdLCJuYW1lcyI6WyJnZXRSYW5kb21WYWx1ZXMiLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmciLCJjcnlwdG8iLCJFcnJvciIsImJpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unsafeStringify: function() { return /* binding */ unsafeStringify; }\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\");\n\nconst byteToHex = [];\nfor(let i = 0; i < 256; ++i){\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n    }\n    return uuid;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBQ3JDLE1BQU1DLFlBQVksRUFBRTtBQUNwQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLLEVBQUVBLEVBQUc7SUFDMUJELFVBQVVFLElBQUksQ0FBQyxDQUFDRCxJQUFJLEtBQUksRUFBR0UsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUNsRDtBQUNPLFNBQVNDLGdCQUFnQkMsR0FBRztRQUFFQyxTQUFBQSxpRUFBUztJQUMxQyxPQUFPLENBQUNQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUM5QlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQzFCUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FDMUJQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQixNQUNBUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FDMUJQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQixNQUNBUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FDMUJQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQixNQUNBUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FDMUJQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUMxQixNQUNBUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FDM0JQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUMzQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQzNCUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FDM0JQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUMzQlAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEVBQUVDLFdBQVc7QUFDaEQ7QUFDQSxTQUFTQyxVQUFVSCxHQUFHO1FBQUVDLFNBQUFBLGlFQUFTO0lBQzdCLE1BQU1HLE9BQU9MLGdCQUFnQkMsS0FBS0M7SUFDbEMsSUFBSSxDQUFDUix3REFBUUEsQ0FBQ1csT0FBTztRQUNqQixNQUFNQyxVQUFVO0lBQ3BCO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBLCtEQUFlRCxTQUFTQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzPzYzMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTtcbiAgICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5O1xuIl0sIm5hbWVzIjpbInZhbGlkYXRlIiwiYnl0ZVRvSGV4IiwiaSIsInB1c2giLCJ0b1N0cmluZyIsInNsaWNlIiwidW5zYWZlU3RyaW5naWZ5IiwiYXJyIiwib2Zmc2V0IiwidG9Mb3dlckNhc2UiLCJzdHJpbmdpZnkiLCJ1dWlkIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for(let i = 0; i < 16; ++i){\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pELFNBQVNHLEdBQUdDLE9BQU8sRUFBRUMsR0FBRyxFQUFFQyxNQUFNO0lBQzVCLElBQUlOLGtEQUFNQSxDQUFDTyxVQUFVLElBQUksQ0FBQ0YsT0FBTyxDQUFDRCxTQUFTO1FBQ3ZDLE9BQU9KLGtEQUFNQSxDQUFDTyxVQUFVO0lBQzVCO0lBQ0FILFVBQVVBLFdBQVcsQ0FBQztJQUN0QixNQUFNSSxPQUFPSixRQUFRSyxNQUFNLElBQUksQ0FBQ0wsUUFBUUgsR0FBRyxJQUFJQSwrQ0FBRTtJQUNqRE8sSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFLLENBQUMsRUFBRSxHQUFHLE9BQVE7SUFDN0JBLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSyxDQUFDLEVBQUUsR0FBRyxPQUFRO0lBQzdCLElBQUlILEtBQUs7UUFDTEMsU0FBU0EsVUFBVTtRQUNuQixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSSxJQUFJLEVBQUVBLEVBQUc7WUFDekJMLEdBQUcsQ0FBQ0MsU0FBU0ksRUFBRSxHQUFHRixJQUFJLENBQUNFLEVBQUU7UUFDN0I7UUFDQSxPQUFPTDtJQUNYO0lBQ0EsT0FBT0gsOERBQWVBLENBQUNNO0FBQzNCO0FBQ0EsK0RBQWVMLEVBQUVBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcz9mMDU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcbiAgICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gICAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuICAgIGlmIChidWYpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjQ7XG4iXSwibmFtZXMiOlsibmF0aXZlIiwicm5nIiwidW5zYWZlU3RyaW5naWZ5IiwidjQiLCJvcHRpb25zIiwiYnVmIiwib2Zmc2V0IiwicmFuZG9tVVVJRCIsInJuZHMiLCJyYW5kb20iLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBK0I7QUFDL0IsU0FBU0MsU0FBU0MsSUFBSTtJQUNsQixPQUFPLE9BQU9BLFNBQVMsWUFBWUYsaURBQUtBLENBQUNHLElBQUksQ0FBQ0Q7QUFDbEQ7QUFDQSwrREFBZUQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzPzRlOTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICAgIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlO1xuIl0sIm5hbWVzIjpbIlJFR0VYIiwidmFsaWRhdGUiLCJ1dWlkIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\n"));

/***/ })

}]);